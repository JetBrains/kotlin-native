buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://dl.bintray.com/kotlin/kotlin-dev' }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        mavenCentral()
        maven { url 'https://dl.bintray.com/kotlin/kotlin-dev' }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    }
}

def localRepo = rootProject.file('build/.m2-local')

task clean {
    doLast {
        delete(localRepo)
    }
}

task buildSh(type: Exec) {
    errorOutput = System.out
    ignoreExitValue = true
    workingDir projectDir
    enabled = !MPPTools.isWindows()
    if (MPPTools.isLinux() || MPPTools.isMacos()) {
        commandLine "$projectDir/build.sh"
    }
}

task buildSamplesWithPlatformLibs() {
    dependsOn ':csvparser:assemble'
    dependsOn ':curl:assemble'
    dependsOn ':echoServer:assemble'
    dependsOn ':globalState:assemble'
    dependsOn ':html5Canvas:assemble'
    dependsOn ':workers:assemble'

    if (MPPTools.isMacos() || MPPTools.isLinux()) {
        dependsOn ':nonBlockingEchoServer:assemble'
        dependsOn ':tensorflow:assemble'
    }

    if (MPPTools.isMacos()) {
        dependsOn ':objc:assemble'
        dependsOn ':opengl:assemble'
        dependsOn ':uikit:assemble'
        dependsOn ':coverage:assemble'
    }

    if (MPPTools.isWindows()) {
        dependsOn ':win32:assemble'
    }
}

task buildAllSamples() {
    subprojects.each {
        dependsOn("${it.path}:assemble")
    }
    finalizedBy buildSh
}
