apply plugin: 'konan'

konan.targets = ['macbook', 'linux', 'raspberrypi', 'mingw']

def konanUserDir = System.getenv("KONAN_DATA_DIR") ?: "${System.getProperty("user.home")}/.konan"

konanArtifacts {

    interop ('sdl') {
        defFile 'src/main/c_interop/sdl.def'
        packageName 'sdl'

        target 'macbook', {
            includeDirs '/Library/Frameworks/SDL2.framework/Headers',
                    "${System.getProperty("user.home")}/Library/Frameworks/SDL2.framework/Headers",
                    '/opt/local/include/SDL2',
                    '/usr/local/include/SDL2'
        }

        target 'linux', {
            includeDirs '/usr/include/SDL2'
        }

        target 'raspberrypi', {
            includeDirs "$konanUserDir/dependencies/target-sysroot-1-raspberrypi/usr/include/SDL2"
        }

        target 'mingw', {
            includeDirs "${System.getenv("MINGW64_DIR")?:"c:/msys64/mingw64"}/include/SDL2"
        }
    }

    program ('tetris') {
        libraries {
            artifact 'sdl'
        }

        target 'macbook', {
            linkerOpts "-F ${System.getProperty("user.home")}/Library/Frameworks -F /Library/Frameworks -framework SDL2"
            // Use this line instead of the previous one if you've got a 'No SDL-framework' error.
            //linkerOpts "-L/opt/local/lib -L/usr/local/lib -lSDL2"
        }

        target 'linux', {
            linkerOpts '-L/usr/lib/x86_64-linux-gnu -lSDL2'
        }

        target 'raspberrypi', {
            linkerOpts '-lSDL2'
        }

        target 'mingw', {
            linkerOpts "-L${System.getenv("MINGW64_DIR")?:"c:/msys64/mingw64"}/lib -lSDL2 -mwindows"
        }
    }
}

compileKonan {
    doLast {
        konanArtifacts.tetris.forEach() { task ->
            copy {
                from 'src/main/resources'
                into task.artifact.parentFile
            }
            if (task.name.endsWith('Mingw_x64')) {
                copy {
                    from "${System.getenv("MINGW64_DIR")?:"c:/msys64/mingw64"}/bin/SDL2.dll"
                    into task.artifact.parentFile
                }
            }
        }
    }
}