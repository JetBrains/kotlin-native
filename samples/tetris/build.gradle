apply plugin: 'konan'

konanInterop {
    sdlMacbook {
        defFile 'sdl.def'
        includeDirs '/Library/Frameworks/SDL2.framework/Headers',
                "${System.getProperty("user.home")}/Library/Frameworks/SDL2.framework/Headers",
                '/opt/local/include/SDL2',
                '/usr/local/include/SDL2'

        target 'macbook'
    }

    sdlLinux {
        defFile 'sdl.def'
        includeDirs '/usr/include/SDL2'
        target 'linux'
    }

    sdlIphone {
        defFile 'sdl.def'
        includeDirs "${project.property("konan.home")}/dependencies/target-sysroot-2-darwin-ios/System/Library/Frameworks/SDL2.framework/Headers"
        target 'iphone'
    }

    sdlRaspberry {
        defFile 'sdl.def'
        includeDirs "${project.property("konan.home")}/dependencies/target-sysroot-1-raspberrypi/usr/include/SDL2"
        target 'raspberrypi'
    }
}

konanArtifacts {
    TetrisMacbook {
        inputFiles project.file('Tetris.kt')
        useInterop 'sdlMacbook'
        linkerOpts "-F ${System.getProperty("user.home")}/Library/Frameworks -F /Library/Frameworks -framework SDL2"
        // Use this line instead of the previous one if you've got a 'No SDL-framework' error.
        //linkerOpts "-L/opt/local/lib -L/usr/local/lib -lSDL2"
        target 'macbook'
    }

    TetrisLinux {
        inputFiles project.file('Tetris.kt')
        useInterop 'sdlLinux'

        linkerOpts '-L/usr/lib/x86_64-linux-gnu -lSDL2'
        target 'linux'
    }

    TetrisIphone {

        inputFiles project.file('Tetris.kt')
        useInterop 'sdlIphone'

        linkerOpts '-framework SDL2 -framework AVFoundation -framework CoreGraphics -framework CoreMotion ' +
                   '-framework Foundation -framework GameController -framework AudioToolbox -framework OpenGLES ' +
                   '-framework QuartzCore -framework UIKit'
        noMain()
        target 'iphone'
    }

    TetrisRaspberry {
        inputFiles project.file('Tetris.kt')
        useInterop 'sdlRaspberry'

        linkerOpts '-lSDL2'
        target 'raspberrypi'
    }

}

build {
    project.ext {
        buildTasks = getTaskDependencies().getDependencies().findAll { task -> task.name.startsWith("compileKonan") }
        outputFiles = buildTasks.collect { task -> "${projectDir.canonicalPath}/${file(task.artifactPath).name}" }
    }
    doLast {
        buildTasks.forEach() { task ->
            copy {
                from task.artifactPath
                into projectDir.canonicalPath
            }
        }
    }
}

clean {
    doLast {
        outputFiles.forEach {
            delete it
        }
    }
}
