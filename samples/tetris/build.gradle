plugins {
    id 'kotlin-multiplatform'
}

File winCompiledResourceFile = file("$buildDir/compiledWindowsResources/Tetris.res")
def hostPreset = determinePreset()

kotlin {
    targets {
        fromPreset(hostPreset, 'tetris') {
            compilations.main.outputKinds 'EXECUTABLE'
            compilations.main.entryPoint 'sample.tetris.main'

            switch (hostPreset) {
                case presets.macosX64:
                    compilations.main.linkerOpts '-L/opt/local/lib', '-L/usr/local/lib', '-lSDL2'
                    break
                case presets.linuxX64:
                    compilations.main.linkerOpts '-L/usr/lib64', '-L/usr/lib/x86_64-linux-gnu', '-lSDL2'
                    break
                case presets.mingwX86:
                case presets.mingwX64:
                    compilations.main.linkerOpts winCompiledResourceFile.path,
                            "-L${MPPTools.mingwPath(hostPreset)}/lib",
                            '-Wl,-Bstatic',
                            '-lstdc++',
                            '-static',
                            '-lSDL2',
                            '-limm32',
                            '-lole32',
                            '-loleaut32',
                            '-lversion',
                            '-lwinmm',
                            '-lsetupapi',
                            '-mwindows'
                    break
                case presets.linuxArm32Hfp:
                    compilations.main.linkerOpts '-lSDL2'
                    break
            }

            compilations.main.cinterops {
                sdl {
                    switch (hostPreset) {
                        case presets.macosX64:
                            includeDirs '/opt/local/include/SDL2', '/usr/local/include/SDL2'
                            break
                        case presets.linuxX64:
                            includeDirs '/usr/include/SDL2'
                            break
                        case presets.mingwX86:
                        case presets.mingwX64:
                            includeDirs "${MPPTools.mingwPath(hostPreset)}/include/SDL2"
                            break
                        case presets.linuxArm32Hfp:
                            includeDirs "${MPPTools.kotlinNativeDataPath()}/dependencies/target-sysroot-1-raspberrypi/usr/include/SDL2"
                            break
                    }
                }
            }
        }
    }
}

if ((hostPreset == kotlin.presets.mingwX86) || (hostPreset == kotlin.presets.mingwX64)) {
    tasks.create('compileWindowsResources', Exec) {
        def windresDir = null
        if (hostPreset == kotlin.presets.mingwX86)
            windresDir = "${MPPTools.kotlinNativeDataPath()}/dependencies/msys2-mingw-w64-i686-gcc-7.4.0-clang-llvm-6.0.1/bin"
        else
            windresDir = "${MPPTools.kotlinNativeDataPath()}/dependencies/msys2-mingw-w64-x86_64-gcc-7.3.0-clang-llvm-lld-6.0.1/bin"
        assert windresDir != null

        def winResourceFile = kotlin.sourceSets.tetrisMain.resources.files.find { it.name == 'Tetris.rc' }
        def path = System.getenv('PATH')

        commandLine "$windresDir/windres", winResourceFile, '-O', 'coff', '-o', winCompiledResourceFile
        environment 'PATH', "$windresDir;$path"

        inputs.file winResourceFile
        outputs.file winCompiledResourceFile
    }
}

MPPTools.createRunTask(project, 'runProgram', kotlin.targets.tetris) {
    workingDir = project.provider {
        kotlin.targets.tetris.compilations.main.getBinary('EXECUTABLE', buildType).parentFile
    }
}

afterEvaluate {
    kotlin.targets.tetris.compilations.main { mainCompilation ->
        def linkTasks = ['RELEASE', 'DEBUG']
                .collect { mainCompilation.findLinkTask('EXECUTABLE', it) }
                .findAll { it != null }

        def compileWindowsResourcesTask = tasks.findByName('compileWindowsResources')

        linkTasks.each { task ->
            if (compileWindowsResourcesTask != null)
                task.dependsOn compileWindowsResourcesTask

            task.doLast {
                copy {
                    from kotlin.sourceSets.tetrisMain.resources
                    into task.outputFile.get().parentFile
                    exclude '*.rc'
                }
            }
        }
    }
}

private def determinePreset() {
    def preset = null
    if (isRaspberryPiBuild()) {
        preset = kotlin.presets.linuxArm32Hfp // aka RaspberryPi
    } else if (isMingwX86Build()) {
        preset = kotlin.presets.mingwX86
    } else {
        preset = MPPTools.defaultHostPreset(project)
    }
    assert preset != null
    
    println("$project has been configured for ${preset.name} platform.")
    preset
}

// If host platform is Linux and RaspberryPi target is activated.
private boolean isRaspberryPiBuild() {
    MPPTools.isLinux() && Boolean.parseBoolean(project.findProperty('tetris.raspberrypi.build') as String)
}

// If host platform is Windows and x86 target is activated.
private boolean isMingwX86Build() {
    MPPTools.isWindows() && Boolean.parseBoolean(project.findProperty('tetris.mingwX86.build') as String)
}
