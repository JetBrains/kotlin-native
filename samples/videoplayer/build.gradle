plugins {
    id 'kotlin-multiplatform'
}

// Determine host preset.
def hostPreset = MPPTools.defaultHostPreset(project, [kotlin.presets.macosX64, kotlin.presets.linuxX64, kotlin.presets.mingwX64])

kotlin {
    targetFromPreset(hostPreset, 'videoPlayer') {
        binaries {
            executable() {
                entryPoint = 'sample.videoplayer.main'

                switch (hostPreset) {
                    case presets.macosX64:
                        linkerOpts += ['-L/opt/local/lib', '-L/usr/local/lib']
                        break
                    case presets.linuxX64:
                        linkerOpts += ['-L/usr/lib/x86_64-linux-gnu', '-L/usr/lib64']
                        break
                    case presets.mingwX64:
                        linkerOpts += ["-L${MPPTools.mingwPath()}/lib".toString()]
                        break
                }
            }
        }

        compilations.main.cinterops {
            ffmpeg {
                switch (hostPreset) {
                    case presets.macosX64: 
                        includeDirs.headerFilterOnly '/opt/local/include', '/usr/local/include'
                        break
                    case presets.linuxX64:
                        includeDirs.headerFilterOnly '/usr/include', '/usr/include/x86_64-linux-gnu', '/usr/include/ffmpeg'
                        break
                    case presets.mingwX64:
                        includeDirs "${MPPTools.mingwPath()}/include"
                        break
                }
            }
            sdl {
                switch (hostPreset) {
                    case presets.macosX64:
                        includeDirs '/opt/local/include/SDL2', '/usr/local/include/SDL2'
                        break
                    case presets.linuxX64:
                        includeDirs '/usr/include/SDL2'
                        break
                    case presets.mingwX64:
                        includeDirs "${MPPTools.mingwPath()}/include/SDL2"
                        break
                }
            }
        }
    }
}
