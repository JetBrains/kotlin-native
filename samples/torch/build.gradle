plugins {
    id 'kotlin-multiplatform'
}

def torchHome = "${MPPTools.kotlinNativeDataPath()}/third-party/torch"

// Determine host preset.
def hostPreset = MPPTools.defaultHostPreset(project, [kotlin.presets.macosX64, kotlin.presets.linuxX64])

kotlin {
    targets {
        fromPreset(hostPreset, 'torch') {
            compilations.main.outputKinds 'EXECUTABLE'
            compilations.main.entryPoint 'sample.torch.main'
            compilations.main.linkerOpts "-L$torchHome/lib", '-lATen'
            compilations.main.cinterops {
                torch {
                    includeDirs "$torchHome/include", "$torchHome/include/TH"
                }
            }
        }
    }
}

task downloadTorch(type: Exec) {
    workingDir projectDir
    commandLine './downloadTorch.sh'
}
tasks[kotlin.targets.torch.compilations.main.cinterops.torch.interopProcessingTaskName].dependsOn downloadTorch

task downloadMNIST(type: Exec) {
    workingDir projectDir
    commandLine './downloadMNIST.sh'
}

MPPTools.createRunTask(project, 'runProgram', kotlin.targets.torch) {
    dependsOn downloadMNIST
    environment 'LD_LIBRARY_PATH': "$torchHome/lib"
    environment 'DYLD_LIBRARY_PATH': "$torchHome/lib"
}
