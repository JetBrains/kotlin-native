plugins {
    id 'kotlin-multiplatform'
}

def torchHome = "${MPPTools.kotlinNativeDataPath()}/third-party/torch"

// Determine host preset.
def hostPreset = MPPTools.defaultHostPreset(project, [kotlin.presets.macosX64, kotlin.presets.linuxX64])

kotlin {
    targetFromPreset(hostPreset, 'torch') {
        binaries {
            executable() {
                entryPoint = 'sample.torch.main'
                linkerOpts += ["-L$torchHome/lib".toString(), '-lATen']
                runTask?.dependsOn 'downloadMNIST'
                runTask?.environment('LD_LIBRARY_PATH', "$torchHome/lib".toString())
                runTask?.environment('DYLD_LIBRARY_PATH', "$torchHome/lib".toString())
            }
        }
        compilations.main.cinterops {
            torch {
                includeDirs "$torchHome/include", "$torchHome/include/TH"
            }
        }
    }
}

task downloadTorch(type: Exec) {
    workingDir projectDir
    commandLine './downloadTorch.sh'
}
tasks[kotlin.targets.torch.compilations.main.cinterops.torch.interopProcessingTaskName].dependsOn downloadTorch

task downloadMNIST(type: Exec) {
    workingDir projectDir
    commandLine './downloadMNIST.sh'
}