package = platform.posix
headers = assert.h complex.h dirent.h errno.h fcntl.h \
    fenv.h float.h ftw.h getopt.h inttypes.h libgen.h limits.h \
    locale.h math.h memory.h sched.h search.h semaphore.h \
    setjmp.h signal.h stdint.h stdio.h stdlib.h string.h \
    time.h uchar.h unistd.h utime.h wchar.h wctype.h
noStringConversion = send sendto recv
linkerOpts = -lWs2_32

---
// Wrapper to access errno variable.
static int posix_errno() {
    return errno;
}

static short posix_htons(short x) {
    return htons(x);
}

// Hacks to make MinGW Windows headers look more modular than they are.
typedef void* HWND;
struct _OVERLAPPED;
typedef struct _OVERLAPPED* LPOVERLAPPED;
#define __INSIDE_CYGWIN__
#include <winsock.h>

// Wrapper to access h_errno variable.
static int posix_h_errno() {
    return h_errno;
}

static int init_sockets() {
    WORD wVersionRequested = MAKEWORD(2, 2);
    WSADATA wsaData;
    return WSAStartup(wVersionRequested, &wsaData);
}

static void deinit_sockets() {
    WSACleanup();
    return;
}

static void posix_FD_ZERO(fd_set *set) {
    FD_ZERO(set);
}

static void posix_FD_SET(int bit, fd_set *set) {
    FD_SET(bit, set);
}

static int posix_FD_ISSET(int bit, fd_set *set) {
    return FD_ISSET(bit, set);
}
