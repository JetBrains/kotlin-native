package = platform.posix
headers = alloca.h assert.h complex.h dirent.h dlfcn.h err.h errno.h fcntl.h \
    fenv.h fnmatch.h fts.h ftw.h getopt.h grp.h inttypes.h libgen.h limits.h \
    locale.h math.h memory.h netdb.h paths.h poll.h \
    pthread.h pwd.h regex.h resolv.h sched.h search.h semaphore.h setjmp.h signal.h \
    stdatomic.h stdint.h stdio.h stdlib.h string.h strings.h syslog.h termios.h \
    time.h ucontext.h unistd.h utime.h wchar.h wctype.h xlocale.h \
    net/ethernet.h net/if.h \
    netinet/icmp6.h netinet/in.h netinet/in_systm.h \
    netinet/ip.h netinet/ip6.h netinet/ip_icmp.h netinet/tcp.h netinet/udp.h \
    sys/ioctl.h sys/ipc.h sys/mman.h sys/poll.h \
    sys/queue.h sys/select.h sys/shm.h sys/stat.h \
    sys/syslimits.h sys/time.h sys/times.h sys/wait.h

headers.osx = ar.h sgtty.h utmp.h net/if_arp.h net/route.h netinet/if_ether.h sys/ptrace.h 

compilerOpts = -D_XOPEN_SOURCE
linkerOpts = -ldl -lresolv

---
// cinterop -def klib/src/platform/osx/posix.def -o platform.posix.klib

// Wrapper to access errno variable.
static int posix_errno() {
    return errno;
}

// Wrapper to access h_errno variable.
static int posix_h_errno() {
    return h_errno;
}

static short posix_htons(short x) {
	return htons(x);
}

static void posix_FD_ZERO(fd_set *set) {
	FD_ZERO(set);
}

static void posix_FD_SET(int bit, fd_set *set) {
	FD_SET(bit, set);
}

static int posix_FD_ISSET(int bit, fd_set *set) {
	return FD_ISSET(bit, set);
}
