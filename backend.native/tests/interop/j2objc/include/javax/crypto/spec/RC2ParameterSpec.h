//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/javax/crypto/spec/RC2ParameterSpec.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxCryptoSpecRC2ParameterSpec")
#ifdef RESTRICT_JavaxCryptoSpecRC2ParameterSpec
#define INCLUDE_ALL_JavaxCryptoSpecRC2ParameterSpec 0
#else
#define INCLUDE_ALL_JavaxCryptoSpecRC2ParameterSpec 1
#endif
#undef RESTRICT_JavaxCryptoSpecRC2ParameterSpec

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxCryptoSpecRC2ParameterSpec_) && (INCLUDE_ALL_JavaxCryptoSpecRC2ParameterSpec || defined(INCLUDE_JavaxCryptoSpecRC2ParameterSpec))
#define JavaxCryptoSpecRC2ParameterSpec_

#define RESTRICT_JavaSecuritySpecAlgorithmParameterSpec 1
#define INCLUDE_JavaSecuritySpecAlgorithmParameterSpec 1
#include "java/security/spec/AlgorithmParameterSpec.h"

@class IOSByteArray;

/*!
 @brief This class specifies the parameters used with the 
 <a href="http://www.ietf.org/rfc/rfc2268.txt"><i>RC2</i></a>
  algorithm.
 <p> The parameters consist of an effective key size and optionally
  an 8-byte initialization vector (IV) (only in feedback mode). 
 <p> This class can be used to initialize a <code>Cipher</code> object that
  implements the <i>RC2</i> algorithm.
 @author Jan Luehe
 @since 1.4
 */
@interface JavaxCryptoSpecRC2ParameterSpec : NSObject < JavaSecuritySpecAlgorithmParameterSpec >

#pragma mark Public

/*!
 @brief Constructs a parameter set for RC2 from the given effective key size
  (in bits).
 @param effectiveKeyBits the effective key size in bits.
 */
- (instancetype __nonnull)initWithInt:(jint)effectiveKeyBits;

/*!
 @brief Constructs a parameter set for RC2 from the given effective key size
  (in bits) and an 8-byte IV.
 <p> The bytes that constitute the IV are those between 
 <code>iv[0]</code> and <code>iv[7]</code> inclusive.
 @param effectiveKeyBits the effective key size in bits.
 @param iv the buffer with the 8-byte IV. The first 8 bytes of  the buffer are copied to protect against subsequent modification.
 @throw IllegalArgumentExceptionif <code>iv</code> is null.
 */
- (instancetype __nonnull)initWithInt:(jint)effectiveKeyBits
                        withByteArray:(IOSByteArray *)iv;

/*!
 @brief Constructs a parameter set for RC2 from the given effective key size
  (in bits) and IV.
 <p> The IV is taken from <code>iv</code>, starting at 
 <code>offset</code> inclusive.
  The bytes that constitute the IV are those between 
 <code>iv[offset]</code> and <code>iv[offset+7]</code> inclusive.
 @param effectiveKeyBits the effective key size in bits.
 @param iv the buffer with the IV. The first 8 bytes  of the buffer beginning at 
  <code> offset </code>  inclusive  are copied to protect against subsequent modification.
 @param offset the offset in  <code> iv </code>  where the 8-byte IV
   starts.
 @throw IllegalArgumentExceptionif <code>iv</code> is null.
 */
- (instancetype __nonnull)initWithInt:(jint)effectiveKeyBits
                        withByteArray:(IOSByteArray *)iv
                              withInt:(jint)offset;

/*!
 @brief Tests for equality between the specified object and this
  object.Two RC2ParameterSpec objects are considered equal if their
  effective key sizes and IVs are equal.
 (Two IV references are considered equal if both are <tt>null</tt>.)
 @param obj the object to test for equality with this object.
 @return true if the objects are considered equal, false if 
 <code>obj</code> is null or otherwise.
 */
- (jboolean)isEqual:(id)obj;

/*!
 @brief Returns the effective key size in bits.
 @return the effective key size in bits.
 */
- (jint)getEffectiveKeyBits;

/*!
 @brief Returns the IV or null if this parameter set does not contain an IV.
 @return the IV or null if this parameter set does not contain an IV.
  Returns a new array each time this method is called.
 */
- (IOSByteArray *)getIV;

/*!
 @brief Calculates a hash code value for the object.
 Objects that are equal will also have the same hashcode.
 */
- (NSUInteger)hash;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxCryptoSpecRC2ParameterSpec)

FOUNDATION_EXPORT void JavaxCryptoSpecRC2ParameterSpec_initWithInt_(JavaxCryptoSpecRC2ParameterSpec *self, jint effectiveKeyBits);

FOUNDATION_EXPORT JavaxCryptoSpecRC2ParameterSpec *new_JavaxCryptoSpecRC2ParameterSpec_initWithInt_(jint effectiveKeyBits) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxCryptoSpecRC2ParameterSpec *create_JavaxCryptoSpecRC2ParameterSpec_initWithInt_(jint effectiveKeyBits);

FOUNDATION_EXPORT void JavaxCryptoSpecRC2ParameterSpec_initWithInt_withByteArray_(JavaxCryptoSpecRC2ParameterSpec *self, jint effectiveKeyBits, IOSByteArray *iv);

FOUNDATION_EXPORT JavaxCryptoSpecRC2ParameterSpec *new_JavaxCryptoSpecRC2ParameterSpec_initWithInt_withByteArray_(jint effectiveKeyBits, IOSByteArray *iv) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxCryptoSpecRC2ParameterSpec *create_JavaxCryptoSpecRC2ParameterSpec_initWithInt_withByteArray_(jint effectiveKeyBits, IOSByteArray *iv);

FOUNDATION_EXPORT void JavaxCryptoSpecRC2ParameterSpec_initWithInt_withByteArray_withInt_(JavaxCryptoSpecRC2ParameterSpec *self, jint effectiveKeyBits, IOSByteArray *iv, jint offset);

FOUNDATION_EXPORT JavaxCryptoSpecRC2ParameterSpec *new_JavaxCryptoSpecRC2ParameterSpec_initWithInt_withByteArray_withInt_(jint effectiveKeyBits, IOSByteArray *iv, jint offset) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxCryptoSpecRC2ParameterSpec *create_JavaxCryptoSpecRC2ParameterSpec_initWithInt_withByteArray_withInt_(jint effectiveKeyBits, IOSByteArray *iv, jint offset);

J2OBJC_TYPE_LITERAL_HEADER(JavaxCryptoSpecRC2ParameterSpec)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaxCryptoSpecRC2ParameterSpec")
