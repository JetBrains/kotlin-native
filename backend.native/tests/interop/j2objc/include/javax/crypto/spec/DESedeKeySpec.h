//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/javax/crypto/spec/DESedeKeySpec.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxCryptoSpecDESedeKeySpec")
#ifdef RESTRICT_JavaxCryptoSpecDESedeKeySpec
#define INCLUDE_ALL_JavaxCryptoSpecDESedeKeySpec 0
#else
#define INCLUDE_ALL_JavaxCryptoSpecDESedeKeySpec 1
#endif
#undef RESTRICT_JavaxCryptoSpecDESedeKeySpec

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxCryptoSpecDESedeKeySpec_) && (INCLUDE_ALL_JavaxCryptoSpecDESedeKeySpec || defined(INCLUDE_JavaxCryptoSpecDESedeKeySpec))
#define JavaxCryptoSpecDESedeKeySpec_

#define RESTRICT_JavaSecuritySpecKeySpec 1
#define INCLUDE_JavaSecuritySpecKeySpec 1
#include "java/security/spec/KeySpec.h"

@class IOSByteArray;

/*!
 @brief This class specifies a DES-EDE ("triple-DES") key.
 @author Jan Luehe
 @since 1.4
 */
@interface JavaxCryptoSpecDESedeKeySpec : NSObject < JavaSecuritySpecKeySpec >
@property (readonly, class) jint DES_EDE_KEY_LEN NS_SWIFT_NAME(DES_EDE_KEY_LEN);

+ (jint)DES_EDE_KEY_LEN;

#pragma mark Public

/*!
 @brief Creates a DESedeKeySpec object using the first 24 bytes in 
 <code>key</code> as the key material for the DES-EDE key.
 <p> The bytes that constitute the DES-EDE key are those between 
 <code>key[0]</code> and <code>key[23]</code> inclusive
 @param key the buffer with the DES-EDE key material. The first  24 bytes of the buffer are copied to protect against subsequent
   modification.
 @throw NullPointerExceptionif <code>key</code> is null.
 @throw InvalidKeyExceptionif the given key material is shorter
  than 24 bytes.
 */
- (instancetype __nonnull)initWithByteArray:(IOSByteArray *)key;

/*!
 @brief Creates a DESedeKeySpec object using the first 24 bytes in 
 <code>key</code>, beginning at <code>offset</code> inclusive,
  as the key material for the DES-EDE key.
 <p> The bytes that constitute the DES-EDE key are those between 
 <code>key[offset]</code> and <code>key[offset+23]</code> inclusive.
 @param key the buffer with the DES-EDE key material. The first  24 bytes of the buffer beginning at 
  <code> offset </code>  inclusive  are copied to protect against subsequent modification.
 @param offset the offset in  <code> key </code> , where the DES-EDE key
   material starts.
 @throw NullPointerExceptionif <code>key</code> is null.
 @throw InvalidKeyExceptionif the given key material, starting at 
 <code>offset</code> inclusive, is shorter than 24 bytes
 */
- (instancetype __nonnull)initWithByteArray:(IOSByteArray *)key
                                    withInt:(jint)offset;

/*!
 @brief Returns the DES-EDE key.
 @return the DES-EDE key. Returns a new array
  each time this method is called.
 */
- (IOSByteArray *)getKey;

/*!
 @brief Checks if the given DES-EDE key, starting at <code>offset</code>
  inclusive, is parity-adjusted.
 @param key a byte array which holds the key value
 @param offset the offset into the byte array
 @return true if the given DES-EDE key is parity-adjusted, false
  otherwise
 @throw NullPointerExceptionif <code>key</code> is null.
 @throw InvalidKeyExceptionif the given key material, starting at 
 <code>offset</code> inclusive, is shorter than 24 bytes
 */
+ (jboolean)isParityAdjustedWithByteArray:(IOSByteArray *)key
                                  withInt:(jint)offset;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxCryptoSpecDESedeKeySpec)

/*!
 @brief The constant which defines the length of a DESede key in bytes.
 */
inline jint JavaxCryptoSpecDESedeKeySpec_get_DES_EDE_KEY_LEN(void);
#define JavaxCryptoSpecDESedeKeySpec_DES_EDE_KEY_LEN 24
J2OBJC_STATIC_FIELD_CONSTANT(JavaxCryptoSpecDESedeKeySpec, DES_EDE_KEY_LEN, jint)

FOUNDATION_EXPORT void JavaxCryptoSpecDESedeKeySpec_initWithByteArray_(JavaxCryptoSpecDESedeKeySpec *self, IOSByteArray *key);

FOUNDATION_EXPORT JavaxCryptoSpecDESedeKeySpec *new_JavaxCryptoSpecDESedeKeySpec_initWithByteArray_(IOSByteArray *key) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxCryptoSpecDESedeKeySpec *create_JavaxCryptoSpecDESedeKeySpec_initWithByteArray_(IOSByteArray *key);

FOUNDATION_EXPORT void JavaxCryptoSpecDESedeKeySpec_initWithByteArray_withInt_(JavaxCryptoSpecDESedeKeySpec *self, IOSByteArray *key, jint offset);

FOUNDATION_EXPORT JavaxCryptoSpecDESedeKeySpec *new_JavaxCryptoSpecDESedeKeySpec_initWithByteArray_withInt_(IOSByteArray *key, jint offset) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxCryptoSpecDESedeKeySpec *create_JavaxCryptoSpecDESedeKeySpec_initWithByteArray_withInt_(IOSByteArray *key, jint offset);

FOUNDATION_EXPORT jboolean JavaxCryptoSpecDESedeKeySpec_isParityAdjustedWithByteArray_withInt_(IOSByteArray *key, jint offset);

J2OBJC_TYPE_LITERAL_HEADER(JavaxCryptoSpecDESedeKeySpec)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaxCryptoSpecDESedeKeySpec")
