//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/javax/crypto/spec/IvParameterSpec.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxCryptoSpecIvParameterSpec")
#ifdef RESTRICT_JavaxCryptoSpecIvParameterSpec
#define INCLUDE_ALL_JavaxCryptoSpecIvParameterSpec 0
#else
#define INCLUDE_ALL_JavaxCryptoSpecIvParameterSpec 1
#endif
#undef RESTRICT_JavaxCryptoSpecIvParameterSpec

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxCryptoSpecIvParameterSpec_) && (INCLUDE_ALL_JavaxCryptoSpecIvParameterSpec || defined(INCLUDE_JavaxCryptoSpecIvParameterSpec))
#define JavaxCryptoSpecIvParameterSpec_

#define RESTRICT_JavaSecuritySpecAlgorithmParameterSpec 1
#define INCLUDE_JavaSecuritySpecAlgorithmParameterSpec 1
#include "java/security/spec/AlgorithmParameterSpec.h"

@class IOSByteArray;

/*!
 @brief This class specifies an <i>initialization vector</i> (IV).
 Examples which use IVs are ciphers in feedback mode,
  e.g., DES in CBC mode and RSA ciphers with OAEP encoding
  operation.
 @author Jan Luehe
 @since 1.4
 */
@interface JavaxCryptoSpecIvParameterSpec : NSObject < JavaSecuritySpecAlgorithmParameterSpec >

#pragma mark Public

/*!
 @brief Creates an IvParameterSpec object using the bytes in <code>iv</code>
  as the IV.
 @param iv the buffer with the IV. The contents of the  buffer are copied to protect against subsequent modification.
 @throw NullPointerExceptionif <code>iv</code> is <code>null</code>
 */
- (instancetype __nonnull)initWithByteArray:(IOSByteArray *)iv;

/*!
 @brief Creates an IvParameterSpec object using the first <code>len</code>
  bytes in <code>iv</code>, beginning at <code>offset</code>
  inclusive, as the IV.
 <p> The bytes that constitute the IV are those between 
 <code>iv[offset]</code> and <code>iv[offset+len-1]</code> inclusive.
 @param iv the buffer with the IV. The first  <code> len </code>
   bytes of the buffer beginning at  <code> offset </code>  inclusive
   are copied to protect against subsequent modification.
 @param offset the offset in  <code> iv </code>  where the IV
   starts.
 @param len the number of IV bytes.
 @throw IllegalArgumentExceptionif <code>iv</code> is <code>null</code>
  or <code>(iv.length - offset < len)</code>
 @throw ArrayIndexOutOfBoundsExceptionis thrown if <code>offset</code>
  or <code>len</code> index bytes outside the <code>iv</code>.
 */
- (instancetype __nonnull)initWithByteArray:(IOSByteArray *)iv
                                    withInt:(jint)offset
                                    withInt:(jint)len;

/*!
 @brief Returns the initialization vector (IV).
 @return the initialization vector (IV). Returns a new array
  each time this method is called.
 */
- (IOSByteArray *)getIV;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxCryptoSpecIvParameterSpec)

FOUNDATION_EXPORT void JavaxCryptoSpecIvParameterSpec_initWithByteArray_(JavaxCryptoSpecIvParameterSpec *self, IOSByteArray *iv);

FOUNDATION_EXPORT JavaxCryptoSpecIvParameterSpec *new_JavaxCryptoSpecIvParameterSpec_initWithByteArray_(IOSByteArray *iv) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxCryptoSpecIvParameterSpec *create_JavaxCryptoSpecIvParameterSpec_initWithByteArray_(IOSByteArray *iv);

FOUNDATION_EXPORT void JavaxCryptoSpecIvParameterSpec_initWithByteArray_withInt_withInt_(JavaxCryptoSpecIvParameterSpec *self, IOSByteArray *iv, jint offset, jint len);

FOUNDATION_EXPORT JavaxCryptoSpecIvParameterSpec *new_JavaxCryptoSpecIvParameterSpec_initWithByteArray_withInt_withInt_(IOSByteArray *iv, jint offset, jint len) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxCryptoSpecIvParameterSpec *create_JavaxCryptoSpecIvParameterSpec_initWithByteArray_withInt_withInt_(IOSByteArray *iv, jint offset, jint len);

J2OBJC_TYPE_LITERAL_HEADER(JavaxCryptoSpecIvParameterSpec)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaxCryptoSpecIvParameterSpec")
