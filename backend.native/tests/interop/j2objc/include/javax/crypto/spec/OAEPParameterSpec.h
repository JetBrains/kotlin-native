//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/javax/crypto/spec/OAEPParameterSpec.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxCryptoSpecOAEPParameterSpec")
#ifdef RESTRICT_JavaxCryptoSpecOAEPParameterSpec
#define INCLUDE_ALL_JavaxCryptoSpecOAEPParameterSpec 0
#else
#define INCLUDE_ALL_JavaxCryptoSpecOAEPParameterSpec 1
#endif
#undef RESTRICT_JavaxCryptoSpecOAEPParameterSpec

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxCryptoSpecOAEPParameterSpec_) && (INCLUDE_ALL_JavaxCryptoSpecOAEPParameterSpec || defined(INCLUDE_JavaxCryptoSpecOAEPParameterSpec))
#define JavaxCryptoSpecOAEPParameterSpec_

#define RESTRICT_JavaSecuritySpecAlgorithmParameterSpec 1
#define INCLUDE_JavaSecuritySpecAlgorithmParameterSpec 1
#include "java/security/spec/AlgorithmParameterSpec.h"

@class JavaxCryptoSpecPSource;

/*!
 @brief This class specifies the set of parameters used with OAEP Padding,
  as defined in the 
 <a href="http://www.ietf.org/rfc/rfc3447.txt">PKCS #1</a>
  standard.
 Its ASN.1 definition in PKCS#1 standard is described below: 
 @code

  RSAES-OAEP-params ::= SEQUENCE {
    hashAlgorithm      [0] OAEP-PSSDigestAlgorithms     DEFAULT sha1,
    maskGenAlgorithm   [1] PKCS1MGFAlgorithms  DEFAULT mgf1SHA1,
    pSourceAlgorithm   [2] PKCS1PSourceAlgorithms  DEFAULT pSpecifiedEmpty
  } 
  
@endcode
  where 
 @code

  OAEP-PSSDigestAlgorithms    ALGORITHM-IDENTIFIER ::= {
    { OID id-sha1 PARAMETERS NULL   }|
    { OID id-sha256 PARAMETERS NULL }|
    { OID id-sha384 PARAMETERS NULL }|
    { OID id-sha512 PARAMETERS NULL },
    ...  -- Allows for future expansion --
  }
  PKCS1MGFAlgorithms    ALGORITHM-IDENTIFIER ::= {
    { OID id-mgf1 PARAMETERS OAEP-PSSDigestAlgorithms },
    ...  -- Allows for future expansion --
  }
  PKCS1PSourceAlgorithms    ALGORITHM-IDENTIFIER ::= {
    { OID id-pSpecified PARAMETERS OCTET STRING },
    ...  -- Allows for future expansion --
  } 
  
@endcode
  <p>Note: the OAEPParameterSpec.DEFAULT uses the following:
      message digest  -- "SHA-1"
      mask generation function (mgf) -- "MGF1"
      parameters for mgf -- MGF1ParameterSpec.SHA1
      source of encoding input -- PSource.PSpecified.DEFAULT
 - seealso: java.security.spec.MGF1ParameterSpec
 - seealso: PSource
 @author Valerie Peng
 @since 1.5
 */
@interface JavaxCryptoSpecOAEPParameterSpec : NSObject < JavaSecuritySpecAlgorithmParameterSpec >
@property (readonly, class, strong) JavaxCryptoSpecOAEPParameterSpec *DEFAULT NS_SWIFT_NAME(DEFAULT);

+ (JavaxCryptoSpecOAEPParameterSpec *)DEFAULT;

#pragma mark Public

/*!
 @brief Constructs a parameter set for OAEP padding as defined in
  the PKCS #1 standard using the specified message digest
  algorithm <code>mdName</code>, mask generation function
  algorithm <code>mgfName</code>, parameters for the mask
  generation function <code>mgfSpec</code>, and source of
  the encoding input P <code>pSrc</code>.
 @param mdName the algorithm name for the message digest.
 @param mgfName the algorithm name for the mask generation  function.
 @param mgfSpec the parameters for the mask generation function.  If null is specified, null will be returned by getMGFParameters().
 @param pSrc the source of the encoding input P.
 @throw NullPointerExceptionif <code>mdName</code>,
  <code>mgfName</code>, or <code>pSrc</code> is null.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)mdName
                              withNSString:(NSString *)mgfName
withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)mgfSpec
                withJavaxCryptoSpecPSource:(JavaxCryptoSpecPSource *)pSrc;

/*!
 @brief Returns the message digest algorithm name.
 @return the message digest algorithm name.
 */
- (NSString *)getDigestAlgorithm;

/*!
 @brief Returns the mask generation function algorithm name.
 @return the mask generation function algorithm name.
 */
- (NSString *)getMGFAlgorithm;

/*!
 @brief Returns the parameters for the mask generation function.
 @return the parameters for the mask generation function.
 */
- (id<JavaSecuritySpecAlgorithmParameterSpec>)getMGFParameters;

/*!
 @brief Returns the source of encoding input P.
 @return the source of encoding input P.
 */
- (JavaxCryptoSpecPSource *)getPSource;

@end

J2OBJC_STATIC_INIT(JavaxCryptoSpecOAEPParameterSpec)

/*!
 @brief The OAEP parameter set with all default values.
 */
inline JavaxCryptoSpecOAEPParameterSpec *JavaxCryptoSpecOAEPParameterSpec_get_DEFAULT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaxCryptoSpecOAEPParameterSpec *JavaxCryptoSpecOAEPParameterSpec_DEFAULT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaxCryptoSpecOAEPParameterSpec, DEFAULT, JavaxCryptoSpecOAEPParameterSpec *)

FOUNDATION_EXPORT void JavaxCryptoSpecOAEPParameterSpec_initWithNSString_withNSString_withJavaSecuritySpecAlgorithmParameterSpec_withJavaxCryptoSpecPSource_(JavaxCryptoSpecOAEPParameterSpec *self, NSString *mdName, NSString *mgfName, id<JavaSecuritySpecAlgorithmParameterSpec> mgfSpec, JavaxCryptoSpecPSource *pSrc);

FOUNDATION_EXPORT JavaxCryptoSpecOAEPParameterSpec *new_JavaxCryptoSpecOAEPParameterSpec_initWithNSString_withNSString_withJavaSecuritySpecAlgorithmParameterSpec_withJavaxCryptoSpecPSource_(NSString *mdName, NSString *mgfName, id<JavaSecuritySpecAlgorithmParameterSpec> mgfSpec, JavaxCryptoSpecPSource *pSrc) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxCryptoSpecOAEPParameterSpec *create_JavaxCryptoSpecOAEPParameterSpec_initWithNSString_withNSString_withJavaSecuritySpecAlgorithmParameterSpec_withJavaxCryptoSpecPSource_(NSString *mdName, NSString *mgfName, id<JavaSecuritySpecAlgorithmParameterSpec> mgfSpec, JavaxCryptoSpecPSource *pSrc);

J2OBJC_TYPE_LITERAL_HEADER(JavaxCryptoSpecOAEPParameterSpec)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaxCryptoSpecOAEPParameterSpec")
