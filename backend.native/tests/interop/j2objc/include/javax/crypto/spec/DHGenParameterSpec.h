//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/javax/crypto/spec/DHGenParameterSpec.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxCryptoSpecDHGenParameterSpec")
#ifdef RESTRICT_JavaxCryptoSpecDHGenParameterSpec
#define INCLUDE_ALL_JavaxCryptoSpecDHGenParameterSpec 0
#else
#define INCLUDE_ALL_JavaxCryptoSpecDHGenParameterSpec 1
#endif
#undef RESTRICT_JavaxCryptoSpecDHGenParameterSpec

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxCryptoSpecDHGenParameterSpec_) && (INCLUDE_ALL_JavaxCryptoSpecDHGenParameterSpec || defined(INCLUDE_JavaxCryptoSpecDHGenParameterSpec))
#define JavaxCryptoSpecDHGenParameterSpec_

#define RESTRICT_JavaSecuritySpecAlgorithmParameterSpec 1
#define INCLUDE_JavaSecuritySpecAlgorithmParameterSpec 1
#include "java/security/spec/AlgorithmParameterSpec.h"

/*!
 @brief This class specifies the set of parameters used for generating
  Diffie-Hellman (system) parameters for use in Diffie-Hellman key
  agreement.This is typically done by a central
  authority.
 <p> The central authority, after computing the parameters, must send this
  information to the parties looking to agree on a secret key.
 @author Jan Luehe
 - seealso: DHParameterSpec
 @since 1.4
 */
@interface JavaxCryptoSpecDHGenParameterSpec : NSObject < JavaSecuritySpecAlgorithmParameterSpec >

#pragma mark Public

/*!
 @brief Constructs a parameter set for the generation of Diffie-Hellman
  (system) parameters.The constructed parameter set can be used to
  initialize an 
 <code>AlgorithmParameterGenerator</code>
  object for the generation of Diffie-Hellman parameters.
 @param primeSize the size (in bits) of the prime modulus.
 @param exponentSize the size (in bits) of the random exponent.
 */
- (instancetype __nonnull)initWithInt:(jint)primeSize
                              withInt:(jint)exponentSize;

/*!
 @brief Returns the size in bits of the random exponent (private value).
 @return the size in bits of the random exponent (private value)
 */
- (jint)getExponentSize;

/*!
 @brief Returns the size in bits of the prime modulus.
 @return the size in bits of the prime modulus
 */
- (jint)getPrimeSize;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxCryptoSpecDHGenParameterSpec)

FOUNDATION_EXPORT void JavaxCryptoSpecDHGenParameterSpec_initWithInt_withInt_(JavaxCryptoSpecDHGenParameterSpec *self, jint primeSize, jint exponentSize);

FOUNDATION_EXPORT JavaxCryptoSpecDHGenParameterSpec *new_JavaxCryptoSpecDHGenParameterSpec_initWithInt_withInt_(jint primeSize, jint exponentSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxCryptoSpecDHGenParameterSpec *create_JavaxCryptoSpecDHGenParameterSpec_initWithInt_withInt_(jint primeSize, jint exponentSize);

J2OBJC_TYPE_LITERAL_HEADER(JavaxCryptoSpecDHGenParameterSpec)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaxCryptoSpecDHGenParameterSpec")
