//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/javax/crypto/SecretKeyFactorySpi.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxCryptoSecretKeyFactorySpi")
#ifdef RESTRICT_JavaxCryptoSecretKeyFactorySpi
#define INCLUDE_ALL_JavaxCryptoSecretKeyFactorySpi 0
#else
#define INCLUDE_ALL_JavaxCryptoSecretKeyFactorySpi 1
#endif
#undef RESTRICT_JavaxCryptoSecretKeyFactorySpi

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxCryptoSecretKeyFactorySpi_) && (INCLUDE_ALL_JavaxCryptoSecretKeyFactorySpi || defined(INCLUDE_JavaxCryptoSecretKeyFactorySpi))
#define JavaxCryptoSecretKeyFactorySpi_

@class IOSClass;
@protocol JavaSecuritySpecKeySpec;
@protocol JavaxCryptoSecretKey;

/*!
 @brief This class defines the <i>Service Provider Interface</i> (<b>SPI</b>)
  for the <code>SecretKeyFactory</code> class.
 All the abstract methods in this class must be implemented by each
  cryptographic service provider who wishes to supply the implementation
  of a secret-key factory for a particular algorithm. 
 <P> A provider should document all the key specifications supported by its
  secret key factory.
  For example, the DES secret-key factory supplied by the "SunJCE" provider
  supports <code>DESKeySpec</code> as a transparent representation of DES
  keys, and that provider's secret-key factory for Triple DES keys supports 
 <code>DESedeKeySpec</code> as a transparent representation of Triple DES
  keys.
 @author Jan Luehe
 - seealso: SecretKey
 - seealso: javax.crypto.spec.DESKeySpec
 - seealso: javax.crypto.spec.DESedeKeySpec
 @since 1.4
 */
@interface JavaxCryptoSecretKeyFactorySpi : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

#pragma mark Protected

/*!
 @brief Generates a <code>SecretKey</code> object from the
  provided key specification (key material).
 @param keySpec the specification (key material) of the secret key
 @return the secret key
 @throw InvalidKeySpecExceptionif the given key specification
  is inappropriate for this secret-key factory to produce a secret key.
 */
- (id<JavaxCryptoSecretKey>)engineGenerateSecretWithJavaSecuritySpecKeySpec:(id<JavaSecuritySpecKeySpec>)keySpec;

/*!
 @brief Returns a specification (key material) of the given key
  object in the requested format.
 @param key the key
 @param keySpec the requested format in which the key material shall be  returned
 @return the underlying key specification (key material) in the
  requested format
 @throw InvalidKeySpecExceptionif the requested key specification is
  inappropriate for the given key (e.g., the algorithms associated with 
 <code>key</code> and <code>keySpec</code> do not match, or 
 <code>key</code> references a key on a cryptographic hardware device
  whereas <code>keySpec</code> is the specification of a software-based
  key), or the given key cannot be dealt with
  (e.g., the given key has an algorithm or format not supported by this
  secret-key factory).
 */
- (id<JavaSecuritySpecKeySpec>)engineGetKeySpecWithJavaxCryptoSecretKey:(id<JavaxCryptoSecretKey>)key
                                                           withIOSClass:(IOSClass *)keySpec;

/*!
 @brief Translates a key object, whose provider may be unknown or
  potentially untrusted, into a corresponding key object of this
  secret-key factory.
 @param key the key whose provider is unknown or untrusted
 @return the translated key
 @throw InvalidKeyExceptionif the given key cannot be processed
  by this secret-key factory.
 */
- (id<JavaxCryptoSecretKey>)engineTranslateKeyWithJavaxCryptoSecretKey:(id<JavaxCryptoSecretKey>)key;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxCryptoSecretKeyFactorySpi)

FOUNDATION_EXPORT void JavaxCryptoSecretKeyFactorySpi_init(JavaxCryptoSecretKeyFactorySpi *self);

J2OBJC_TYPE_LITERAL_HEADER(JavaxCryptoSecretKeyFactorySpi)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaxCryptoSecretKeyFactorySpi")
