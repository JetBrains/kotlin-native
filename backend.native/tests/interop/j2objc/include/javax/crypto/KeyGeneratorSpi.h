//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/javax/crypto/KeyGeneratorSpi.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxCryptoKeyGeneratorSpi")
#ifdef RESTRICT_JavaxCryptoKeyGeneratorSpi
#define INCLUDE_ALL_JavaxCryptoKeyGeneratorSpi 0
#else
#define INCLUDE_ALL_JavaxCryptoKeyGeneratorSpi 1
#endif
#undef RESTRICT_JavaxCryptoKeyGeneratorSpi

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxCryptoKeyGeneratorSpi_) && (INCLUDE_ALL_JavaxCryptoKeyGeneratorSpi || defined(INCLUDE_JavaxCryptoKeyGeneratorSpi))
#define JavaxCryptoKeyGeneratorSpi_

@class JavaSecuritySecureRandom;
@protocol JavaSecuritySpecAlgorithmParameterSpec;
@protocol JavaxCryptoSecretKey;

/*!
 @brief This class defines the <i>Service Provider Interface</i> (<b>SPI</b>)
  for the <code>KeyGenerator</code> class.
 All the abstract methods in this class must be implemented by each
  cryptographic service provider who wishes to supply the implementation
  of a key generator for a particular algorithm.
 @author Jan Luehe
 - seealso: SecretKey
 @since 1.4
 */
@interface JavaxCryptoKeyGeneratorSpi : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

#pragma mark Protected

/*!
 @brief Generates a secret key.
 @return the new key
 */
- (id<JavaxCryptoSecretKey>)engineGenerateKey;

/*!
 @brief Initializes the key generator with the specified parameter
  set and a user-provided source of randomness.
 @param params the key generation parameters
 @param random the source of randomness for this key generator
 @throw InvalidAlgorithmParameterExceptionif <code>params</code> is
  inappropriate for this key generator
 */
- (void)engineInitWithJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params
                                withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

/*!
 @brief Initializes this key generator for a certain keysize, using the given
  source of randomness.
 @param keysize the keysize. This is an algorithm-specific metric,  specified in number of bits.
 @param random the source of randomness for this key generator
 @throw InvalidParameterExceptionif the keysize is wrong or not
  supported.
 */
- (void)engineInitWithInt:(jint)keysize
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

/*!
 @brief Initializes the key generator.
 @param random the source of randomness for this generator
 */
- (void)engineInitWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxCryptoKeyGeneratorSpi)

FOUNDATION_EXPORT void JavaxCryptoKeyGeneratorSpi_init(JavaxCryptoKeyGeneratorSpi *self);

J2OBJC_TYPE_LITERAL_HEADER(JavaxCryptoKeyGeneratorSpi)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaxCryptoKeyGeneratorSpi")
