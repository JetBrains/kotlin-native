//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/javax/crypto/CipherOutputStream.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxCryptoCipherOutputStream")
#ifdef RESTRICT_JavaxCryptoCipherOutputStream
#define INCLUDE_ALL_JavaxCryptoCipherOutputStream 0
#else
#define INCLUDE_ALL_JavaxCryptoCipherOutputStream 1
#endif
#undef RESTRICT_JavaxCryptoCipherOutputStream

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxCryptoCipherOutputStream_) && (INCLUDE_ALL_JavaxCryptoCipherOutputStream || defined(INCLUDE_JavaxCryptoCipherOutputStream))
#define JavaxCryptoCipherOutputStream_

#define RESTRICT_JavaIoFilterOutputStream 1
#define INCLUDE_JavaIoFilterOutputStream 1
#include "java/io/FilterOutputStream.h"

@class IOSByteArray;
@class JavaIoOutputStream;
@class JavaxCryptoCipher;

/*!
 @brief A CipherOutputStream is composed of an OutputStream and a Cipher so
  that write() methods first process the data before writing them out
  to the underlying OutputStream.The cipher must be fully
  initialized before being used by a CipherOutputStream.
 <p> For example, if the cipher is initialized for encryption, the
  CipherOutputStream will attempt to encrypt data before writing out the
  encrypted data. 
 <p> This class adheres strictly to the semantics, especially the
  failure semantics, of its ancestor classes
  java.io.OutputStream and java.io.FilterOutputStream.  This class
  has exactly those methods specified in its ancestor classes, and
  overrides them all.  Moreover, this class catches all exceptions
  that are not thrown by its ancestor classes. 
 <p> It is crucial for a programmer using this class not to use
  methods that are not defined or overriden in this class (such as a
  new method or constructor that is later added to one of the super
  classes), because the design and implementation of those methods
  are unlikely to have considered security impact with regard to
  CipherOutputStream.
 @author Li Gong
 - seealso: java.io.OutputStream
 - seealso: java.io.FilterOutputStream
 - seealso: javax.crypto.Cipher
 - seealso: javax.crypto.CipherInputStream
 @since 1.4
 */
@interface JavaxCryptoCipherOutputStream : JavaIoFilterOutputStream

#pragma mark Public

/*!
 @brief Constructs a CipherOutputStream from an OutputStream and a
  Cipher.
 <br>Note: if the specified output stream or cipher is
  null, a NullPointerException may be thrown later when
  they are used.
 @param os the OutputStream object
 @param c an initialized Cipher object
 */
- (instancetype __nonnull)initWithJavaIoOutputStream:(JavaIoOutputStream *)os
                               withJavaxCryptoCipher:(JavaxCryptoCipher *)c;

/*!
 @brief Closes this output stream and releases any system resources
  associated with this stream.
 <p>
  This method invokes the <code>doFinal</code> method of the encapsulated
  cipher object, which causes any bytes buffered by the encapsulated
  cipher to be processed. The result is written out by calling the 
 <code>flush</code> method of this output stream. 
 <p>
  This method resets the encapsulated cipher object to its initial state
  and calls the <code>close</code> method of the underlying output
  stream.
 @throw IOExceptionif an I/O error occurs.
 @since JCE1.2
 */
- (void)close;

/*!
 @brief Flushes this output stream by forcing any buffered output bytes
  that have already been processed by the encapsulated cipher object
  to be written out.
 <p>Any bytes buffered by the encapsulated cipher
  and waiting to be processed by it will not be written out. For example,
  if the encapsulated cipher is a block cipher, and the total number of
  bytes written using one of the <code>write</code> methods is less than
  the cipher's block size, no bytes will be written out.
 @throw IOExceptionif an I/O error occurs.
 @since JCE1.2
 */
- (void)flush;

/*!
 @brief Writes <code>b.length</code> bytes from the specified byte array
  to this output stream.
 <p>
  The <code>write</code> method of 
 <code>CipherOutputStream</code> calls the <code>write</code>
  method of three arguments with the three arguments 
 <code>b</code>, <code>0</code>, and <code>b.length</code>.
 @param b the data.
 @throw NullPointerExceptionif <code>b</code> is null.
 @throw IOExceptionif an I/O error occurs.
 - seealso: javax.crypto.CipherOutputStream#write(byte[], int, int)
 @since JCE1.2
 */
- (void)writeWithByteArray:(IOSByteArray *)b;

/*!
 @brief Writes <code>len</code> bytes from the specified byte array
  starting at offset <code>off</code> to this output stream.
 @param b the data.
 @param off the start offset in the data.
 @param len the number of bytes to write.
 @throw IOExceptionif an I/O error occurs.
 @since JCE1.2
 */
- (void)writeWithByteArray:(IOSByteArray *)b
                   withInt:(jint)off
                   withInt:(jint)len;

/*!
 @brief Writes the specified byte to this output stream.
 @param b the  <code> byte </code> .
 @throw IOExceptionif an I/O error occurs.
 @since JCE1.2
 */
- (void)writeWithInt:(jint)b;

#pragma mark Protected

/*!
 @brief Constructs a CipherOutputStream from an OutputStream without
  specifying a Cipher.This has the effect of constructing a
  CipherOutputStream using a NullCipher.
 <br>Note: if the specified output stream is null, a
  NullPointerException may be thrown later when it is used.
 @param os the OutputStream object
 */
- (instancetype __nonnull)initWithJavaIoOutputStream:(JavaIoOutputStream *)os;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxCryptoCipherOutputStream)

FOUNDATION_EXPORT void JavaxCryptoCipherOutputStream_initWithJavaIoOutputStream_withJavaxCryptoCipher_(JavaxCryptoCipherOutputStream *self, JavaIoOutputStream *os, JavaxCryptoCipher *c);

FOUNDATION_EXPORT JavaxCryptoCipherOutputStream *new_JavaxCryptoCipherOutputStream_initWithJavaIoOutputStream_withJavaxCryptoCipher_(JavaIoOutputStream *os, JavaxCryptoCipher *c) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxCryptoCipherOutputStream *create_JavaxCryptoCipherOutputStream_initWithJavaIoOutputStream_withJavaxCryptoCipher_(JavaIoOutputStream *os, JavaxCryptoCipher *c);

FOUNDATION_EXPORT void JavaxCryptoCipherOutputStream_initWithJavaIoOutputStream_(JavaxCryptoCipherOutputStream *self, JavaIoOutputStream *os);

FOUNDATION_EXPORT JavaxCryptoCipherOutputStream *new_JavaxCryptoCipherOutputStream_initWithJavaIoOutputStream_(JavaIoOutputStream *os) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxCryptoCipherOutputStream *create_JavaxCryptoCipherOutputStream_initWithJavaIoOutputStream_(JavaIoOutputStream *os);

J2OBJC_TYPE_LITERAL_HEADER(JavaxCryptoCipherOutputStream)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaxCryptoCipherOutputStream")
