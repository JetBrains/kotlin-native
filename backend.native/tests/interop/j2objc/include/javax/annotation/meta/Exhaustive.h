//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/jsr305/build_result/java/javax/annotation/meta/Exhaustive.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxAnnotationMetaExhaustive")
#ifdef RESTRICT_JavaxAnnotationMetaExhaustive
#define INCLUDE_ALL_JavaxAnnotationMetaExhaustive 0
#else
#define INCLUDE_ALL_JavaxAnnotationMetaExhaustive 1
#endif
#undef RESTRICT_JavaxAnnotationMetaExhaustive

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxAnnotationMetaExhaustive_) && (INCLUDE_ALL_JavaxAnnotationMetaExhaustive || defined(INCLUDE_JavaxAnnotationMetaExhaustive))
#define JavaxAnnotationMetaExhaustive_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

/*!
 @brief This annotation can be applied to the value() element of an annotation that
  is annotated as a TypeQualifier.This is only appropriate if the value field
  returns a value that is an Enumeration.
 Applications of the type qualifier with different values are exclusive, and
  the enumeration is an exhaustive list of the possible values. 
  For example, the following defines a type qualifier such that if you know a
  value is neither &commat;&commat;Foo(Color.Red) or &commat;&commat;Foo(Color.Blue),
  then the value must be &commat;&commat;Foo(Color.Green). And if you know it is 
 &commat;&commat;Foo(Color.Green), you know it cannot be 
 &commat;&commat;Foo(Color.Red) or &commat;&commat;Foo(Color.Blue)
   
 <code>
 */
@protocol JavaxAnnotationMetaExhaustive < JavaLangAnnotationAnnotation >

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface JavaxAnnotationMetaExhaustive : NSObject < JavaxAnnotationMetaExhaustive >

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxAnnotationMetaExhaustive)

FOUNDATION_EXPORT id<JavaxAnnotationMetaExhaustive> create_JavaxAnnotationMetaExhaustive(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaxAnnotationMetaExhaustive)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaxAnnotationMetaExhaustive")
