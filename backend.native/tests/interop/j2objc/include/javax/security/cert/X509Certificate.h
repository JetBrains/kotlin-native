//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/javax/security/cert/X509Certificate.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxSecurityCertX509Certificate")
#ifdef RESTRICT_JavaxSecurityCertX509Certificate
#define INCLUDE_ALL_JavaxSecurityCertX509Certificate 0
#else
#define INCLUDE_ALL_JavaxSecurityCertX509Certificate 1
#endif
#undef RESTRICT_JavaxSecurityCertX509Certificate

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxSecurityCertX509Certificate_) && (INCLUDE_ALL_JavaxSecurityCertX509Certificate || defined(INCLUDE_JavaxSecurityCertX509Certificate))
#define JavaxSecurityCertX509Certificate_

#define RESTRICT_JavaxSecurityCertCertificate 1
#define INCLUDE_JavaxSecurityCertCertificate 1
#include "javax/security/cert/Certificate.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaMathBigInteger;
@class JavaUtilDate;
@protocol JavaSecurityPrincipal;

/*!
 @brief Abstract base class for X.509 certificates.
 <p>
  This represents a standard way for accessing the attributes of X.509 v1
  certificates. 
 <p>
  Note: This package is provided only for compatibility reasons.
  It contains a simplified version of the java.security.cert package that was
  previously used by JSSE (Java SSL package). All applications that do not have
  to be compatible with older versions of JSSE (that is before Java SDK 1.5)
  should only use java.security.cert.
 */
@interface JavaxSecurityCertX509Certificate : JavaxSecurityCertCertificate

#pragma mark Public

/*!
 @brief Creates a new <code>X509Certificate</code>.
 */
- (instancetype __nonnull)init;

/*!
 @brief Checks whether the certificate is currently valid.
 <p>
  The validity defined in ASN.1: 
 @code

  validity             Validity
  Validity ::= SEQUENCE {
       notBefore       CertificateValidityDate,
       notAfter        CertificateValidityDate }
  CertificateValidityDate ::= CHOICE {
       utcTime         UTCTime,
       generalTime     GeneralizedTime } 
  
@endcode
 @throw CertificateExpiredException
 if the certificate has expired.
 @throw CertificateNotYetValidException
 if the certificate is not yet valid.
 */
- (void)checkValidity;

/*!
 @brief Checks whether the certificate is valid at the specified date.
 @param date the date to check the validity against.
 @throw CertificateExpiredException
 if the certificate has expired.
 @throw CertificateNotYetValidException
 if the certificate is not yet valid.
 - seealso: #checkValidity()
 */
- (void)checkValidityWithJavaUtilDate:(JavaUtilDate *)date;

/*!
 @brief Creates a new <code>X509Certificate</code> and initializes it from the
  specified byte array.
 @param certData byte array containing data to initialize the certificate.
 @return the certificate initialized from the specified byte array
 @throw CertificateException
 if the certificate cannot be created or initialized.
 */
+ (JavaxSecurityCertX509Certificate *)getInstanceWithByteArray:(IOSByteArray *)certData;

/*!
 @brief Creates a new <code>X509Certificate</code> and initializes it from the
  specified input stream.
 @param inStream input stream containing data to initialize the certificate.
 @return the certificate initialized from the specified input stream
 @throw CertificateException
 if the certificate cannot be created or initialized.
 */
+ (JavaxSecurityCertX509Certificate *)getInstanceWithJavaIoInputStream:(JavaIoInputStream *)inStream;

/*!
 @brief Returns the <code>issuer</code> (issuer distinguished name) as an
  implementation specific <code>Principal</code> object.
 <p>
  The ASN.1 definition of <code>issuer</code>:
  
 @code

   issuer      Name
   Name ::= CHOICE {
       RDNSequence }
     RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
     RelativeDistinguishedName ::= SET OF AttributeTypeAndValue
     AttributeTypeAndValue ::= SEQUENCE {
       type     AttributeType,
       value    AttributeValue }
     AttributeType ::= OBJECT IDENTIFIER
     AttributeValue ::= ANY DEFINED BY AttributeType 
  
@endcode
 @return the <code>issuer</code> as an implementation specific <code>Principal</code>
 .
 */
- (id<JavaSecurityPrincipal>)getIssuerDN;

/*!
 @brief Returns the <code>notAfter</code> date of the validity period of the
  certificate.
 @return the end of the validity period.
 */
- (JavaUtilDate *)getNotAfter;

/*!
 @brief Returns the <code>notBefore</code> date from the validity period of the
  certificate.
 @return the start of the validity period.
 */
- (JavaUtilDate *)getNotBefore;

/*!
 @brief Returns the <code>serialNumber</code> of the certificate.
 <p>
  The ASN.1 definition of <code>serialNumber</code>:
  
 @code

  CertificateSerialNumber  ::=  INTEGER 
  
@endcode
 @return the serial number.
 */
- (JavaMathBigInteger *)getSerialNumber;

/*!
 @brief Returns the name of the algorithm for the certificate signature.
 @return the signature algorithm name.
 */
- (NSString *)getSigAlgName;

/*!
 @brief Returns the OID of the signature algorithm from the certificate.
 @return the OID of the signature algorithm.
 */
- (NSString *)getSigAlgOID;

/*!
 @brief Returns the parameters of the signature algorithm in DER-encoded format.
 @return the parameters of the signature algorithm, or null if none are
          used.
 */
- (IOSByteArray *)getSigAlgParams;

/*!
 @brief Returns the <code>subject</code> (subject distinguished name) as an
  implementation specific <code>Principal</code> object.
 <p>
  The ASN.1 definition of <code>subject</code>:
  
 @code

  subject      Name
   Name ::= CHOICE {
       RDNSequence }
     RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
     RelativeDistinguishedName ::= SET OF AttributeTypeAndValue
     AttributeTypeAndValue ::= SEQUENCE {
       type     AttributeType,
       value    AttributeValue }
     AttributeType ::= OBJECT IDENTIFIER
     AttributeValue ::= ANY DEFINED BY AttributeType 
  
@endcode
 @return the <code>subject</code> (subject distinguished name).
 */
- (id<JavaSecurityPrincipal>)getSubjectDN;

/*!
 @brief Returns the certificates <code>version</code> (version number).
 <p>
  The version defined is ASN.1: 
 @code

  Version ::=  INTEGER  {  v1(0), v2(1), v3(2)  } 
  
@endcode
 @return the version number.
 */
- (jint)getVersion;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxSecurityCertX509Certificate)

FOUNDATION_EXPORT void JavaxSecurityCertX509Certificate_init(JavaxSecurityCertX509Certificate *self);

FOUNDATION_EXPORT JavaxSecurityCertX509Certificate *JavaxSecurityCertX509Certificate_getInstanceWithJavaIoInputStream_(JavaIoInputStream *inStream);

FOUNDATION_EXPORT JavaxSecurityCertX509Certificate *JavaxSecurityCertX509Certificate_getInstanceWithByteArray_(IOSByteArray *certData);

J2OBJC_TYPE_LITERAL_HEADER(JavaxSecurityCertX509Certificate)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaxSecurityCertX509Certificate")
