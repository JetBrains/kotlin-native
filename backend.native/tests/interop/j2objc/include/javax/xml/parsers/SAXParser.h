//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/luni/src/main/java/javax/xml/parsers/SAXParser.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxXmlParsersSAXParser")
#ifdef RESTRICT_JavaxXmlParsersSAXParser
#define INCLUDE_ALL_JavaxXmlParsersSAXParser 0
#else
#define INCLUDE_ALL_JavaxXmlParsersSAXParser 1
#endif
#undef RESTRICT_JavaxXmlParsersSAXParser

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxXmlParsersSAXParser_) && (INCLUDE_ALL_JavaxXmlParsersSAXParser || defined(INCLUDE_JavaxXmlParsersSAXParser))
#define JavaxXmlParsersSAXParser_

@class JavaIoFile;
@class JavaIoInputStream;
@class JavaxXmlValidationSchema;
@class OrgXmlSaxHandlerBase;
@class OrgXmlSaxHelpersDefaultHandler;
@class OrgXmlSaxInputSource;
@protocol OrgXmlSaxParser;
@protocol OrgXmlSaxXMLReader;

/*!
 @brief Defines the API that wraps an <code>org.xml.sax.XMLReader</code>
  implementation class.In JAXP 1.0, this class wrapped the 
 <code>org.xml.sax.Parser</code> interface, however this interface was
  replaced by the <code>org.xml.sax.XMLReader</code>.
 For ease
  of transition, this class continues to support the same name
  and interface as well as supporting new methods.
  An instance of this class can be obtained from the 
 <code>javax.xml.parsers.SAXParserFactory.newSAXParser()</code> method.
  Once an instance of this class is obtained, XML can be parsed from
  a variety of input sources. These input sources are InputStreams,
  Files, URLs, and SAX InputSources.<p>
  This static method creates a new factory instance based
  on a system property setting or uses the platform default
  if no property has been defined.<p>
  The system property that controls which Factory implementation
  to create is named <code>&quot;javax.xml.parsers.SAXParserFactory&quot;</code>.
  This property names a class that is a concrete subclass of this
  abstract class. If no property is defined, a platform default
  will be used.</p>
  As the content is parsed by the underlying parser, methods of the
  given <code>org.xml.sax.HandlerBase</code> or the 
 <code>org.xml.sax.helpers.DefaultHandler</code> are called.<p>
  Implementations of this class which wrap an underlying implementation
  can consider using the <code>org.xml.sax.helpers.ParserAdapter</code>
  class to initially adapt their SAX1 implementation to work under
  this revised class.
 @author <a href="mailto:Jeff.Suttor@@Sun.com">Jeff Suttor</a>
 @version $Revision: 584483 $, $Date: 2007-10-13 19:54:48 -0700 (Sat, 13 Oct 2007) $
 */
@interface JavaxXmlParsersSAXParser : NSObject

#pragma mark Public

/*!
 @brief Returns the SAX parser that is encapsulated by the
  implementation of this class.
 @return The SAX parser that is encapsulated by the
          implementation of this class.
 @throw SAXExceptionIf any SAX errors occur during processing.
 */
- (id<OrgXmlSaxParser>)getParser;

/*!
 @brief <p>Returns the particular property requested for in the underlying
  implementation of <code>org.xml.sax.XMLReader</code>.
 </p>
 @param name The name of the property to be retrieved.
 @return Value of the requested property.
 @throw SAXNotRecognizedExceptionWhen the underlying XMLReader does
     not recognize the property name.
 @throw SAXNotSupportedExceptionWhen the underlying XMLReader
   recognizes the property name but doesn't support the property.
 - seealso: org.xml.sax.XMLReader#getProperty
 */
- (id)getPropertyWithNSString:(NSString *)name;

/*!
 @brief <p>Get a reference to the the <code>Schema</code> being used by
  the XML processor.
 </p>
  
 <p>If no schema is being used, <code>null</code> is returned.</p>
 @return <code>Schema</code> being used or <code>null</code>
   if none in use
 @throw UnsupportedOperationException
 For backward compatibility, when implementations for
       earlier versions of JAXP is used, this exception will be
       thrown.
 @since 1.5
 */
- (JavaxXmlValidationSchema *)getSchema;

/*!
 @brief Returns the <code>org.xml.sax.XMLReader</code> that is encapsulated by the
  implementation of this class.
 @return The XMLReader that is encapsulated by the
          implementation of this class.
 @throw SAXExceptionIf any SAX errors occur during processing.
 */
- (id<OrgXmlSaxXMLReader>)getXMLReader;

/*!
 @brief Indicates whether or not this parser is configured to
  understand namespaces.
 @return true if this parser is configured to
          understand namespaces; false otherwise.
 */
- (jboolean)isNamespaceAware;

/*!
 @brief Indicates whether or not this parser is configured to
  validate XML documents.
 @return true if this parser is configured to
          validate XML documents; false otherwise.
 */
- (jboolean)isValidating;

/*!
 @brief <p>Get the XInclude processing mode for this parser.
 </p>
 @return the return value of
       the <code>SAXParserFactory.isXIncludeAware()</code>
       when this parser was created from factory.
 @throw UnsupportedOperationException
 For backward compatibility, when implementations for
       earlier versions of JAXP is used, this exception will be
       thrown.
 @since 1.5
 - seealso: SAXParserFactory#setXIncludeAware(boolean)
 */
- (jboolean)isXIncludeAware;

/*!
 @brief Parse the content of the file specified as XML using the specified 
 <code>org.xml.sax.helpers.DefaultHandler</code>.
 @param f The file containing the XML to parse
 @param dh The SAX DefaultHandler to use.
 @throw IllegalArgumentExceptionIf the File object is null.
 @throw IOExceptionIf any IO errors occur.
 @throw SAXExceptionIf any SAX errors occur during processing.
 - seealso: org.xml.sax.DocumentHandler
 */
- (void)parseWithJavaIoFile:(JavaIoFile *)f
withOrgXmlSaxHelpersDefaultHandler:(OrgXmlSaxHelpersDefaultHandler *)dh;

/*!
 @brief Parse the content of the file specified as XML using the specified 
 <code>org.xml.sax.HandlerBase</code>.
 <i> Use of the DefaultHandler version of this method is recommended as
  the HandlerBase class has been deprecated in SAX 2.0</i>
 @param f The file containing the XML to parse
 @param hb The SAX HandlerBase to use.
 @throw IllegalArgumentExceptionIf the File object is null.
 @throw IOExceptionIf any IO errors occur.
 @throw SAXExceptionIf any SAX errors occur during processing.
 - seealso: org.xml.sax.DocumentHandler
 */
- (void)parseWithJavaIoFile:(JavaIoFile *)f
   withOrgXmlSaxHandlerBase:(OrgXmlSaxHandlerBase *)hb;

/*!
 @brief Parse the content given <code>org.xml.sax.InputSource</code>
  as XML using the specified 
 <code>org.xml.sax.helpers.DefaultHandler</code>.
 @param is The InputSource containing the content to be parsed.
 @param dh The SAX DefaultHandler to use.
 @throw IllegalArgumentExceptionIf the <code>InputSource</code> object
    is <code>null</code>.
 @throw IOExceptionIf any IO errors occur.
 @throw SAXExceptionIf any SAX errors occur during processing.
 - seealso: org.xml.sax.DocumentHandler
 */
- (void)parseWithOrgXmlSaxInputSource:(OrgXmlSaxInputSource *)is
   withOrgXmlSaxHelpersDefaultHandler:(OrgXmlSaxHelpersDefaultHandler *)dh;

/*!
 @brief Parse the content given <code>org.xml.sax.InputSource</code>
  as XML using the specified 
 <code>org.xml.sax.HandlerBase</code>.
 <i> Use of the DefaultHandler version of this method is recommended as
  the HandlerBase class has been deprecated in SAX 2.0</i>
 @param is The InputSource containing the content to be parsed.
 @param hb The SAX HandlerBase to use.
 @throw IllegalArgumentExceptionIf the <code>InputSource</code> object
    is <code>null</code>.
 @throw IOExceptionIf any IO errors occur.
 @throw SAXExceptionIf any SAX errors occur during processing.
 - seealso: org.xml.sax.DocumentHandler
 */
- (void)parseWithOrgXmlSaxInputSource:(OrgXmlSaxInputSource *)is
             withOrgXmlSaxHandlerBase:(OrgXmlSaxHandlerBase *)hb;

/*!
 @brief Parse the content of the given <code>java.io.InputStream</code>
  instance as XML using the specified 
 <code>org.xml.sax.helpers.DefaultHandler</code>.
 @param is InputStream containing the content to be parsed.
 @param dh The SAX DefaultHandler to use.
 @throw IllegalArgumentExceptionIf the given InputStream is null.
 @throw IOExceptionIf any IO errors occur.
 @throw SAXExceptionIf any SAX errors occur during processing.
 - seealso: org.xml.sax.DocumentHandler
 */
- (void)parseWithJavaIoInputStream:(JavaIoInputStream *)is
withOrgXmlSaxHelpersDefaultHandler:(OrgXmlSaxHelpersDefaultHandler *)dh;

/*!
 @brief Parse the content of the given <code>java.io.InputStream</code>
  instance as XML using the specified 
 <code>org.xml.sax.helpers.DefaultHandler</code>.
 @param is InputStream containing the content to be parsed.
 @param dh The SAX DefaultHandler to use.
 @param systemId The systemId which is needed for resolving relative URIs.
 @throw IllegalArgumentExceptionIf the given InputStream is null.
 @throw IOExceptionIf any IO errors occur.
 @throw SAXExceptionIf any SAX errors occur during processing.
 - seealso: org.xml.sax.DocumentHandlerversion of this method instead.
 */
- (void)parseWithJavaIoInputStream:(JavaIoInputStream *)is
withOrgXmlSaxHelpersDefaultHandler:(OrgXmlSaxHelpersDefaultHandler *)dh
                      withNSString:(NSString *)systemId;

/*!
 @brief <p>Parse the content of the given <code>java.io.InputStream</code>
  instance as XML using the specified <code>org.xml.sax.HandlerBase</code>.
 <i> Use of the DefaultHandler version of this method is recommended as
  the HandlerBase class has been deprecated in SAX 2.0</i>.</p>
 @param is InputStream containing the content to be parsed.
 @param hb The SAX HandlerBase to use.
 @throw IllegalArgumentExceptionIf the given InputStream is null.
 @throw SAXExceptionIf parse produces a SAX error.
 @throw IOExceptionIf an IO error occurs interacting with the
    <code>InputStream</code>.
 - seealso: org.xml.sax.DocumentHandler
 */
- (void)parseWithJavaIoInputStream:(JavaIoInputStream *)is
          withOrgXmlSaxHandlerBase:(OrgXmlSaxHandlerBase *)hb;

/*!
 @brief <p>Parse the content of the given <code>java.io.InputStream</code>
  instance as XML using the specified <code>org.xml.sax.HandlerBase</code>.
 <i> Use of the DefaultHandler version of this method is recommended as
  the HandlerBase class has been deprecated in SAX 2.0</i>.</p>
 @param is InputStream containing the content to be parsed.
 @param hb The SAX HandlerBase to use.
 @param systemId The systemId which is needed for resolving relative URIs.
 @throw IllegalArgumentExceptionIf the given <code>InputStream</code> is
    <code>null</code>.
 @throw IOExceptionIf any IO error occurs interacting with the
    <code>InputStream</code>.
 @throw SAXExceptionIf any SAX errors occur during processing.
 - seealso: org.xml.sax.DocumentHandlerversion of this method instead.
 */
- (void)parseWithJavaIoInputStream:(JavaIoInputStream *)is
          withOrgXmlSaxHandlerBase:(OrgXmlSaxHandlerBase *)hb
                      withNSString:(NSString *)systemId;

/*!
 @brief Parse the content described by the giving Uniform Resource
  Identifier (URI) as XML using the specified 
 <code>org.xml.sax.helpers.DefaultHandler</code>.
 @param uri The location of the content to be parsed.
 @param dh The SAX DefaultHandler to use.
 @throw IllegalArgumentExceptionIf the uri is null.
 @throw IOExceptionIf any IO errors occur.
 @throw SAXExceptionIf any SAX errors occur during processing.
 - seealso: org.xml.sax.DocumentHandler
 */
- (void)parseWithNSString:(NSString *)uri
withOrgXmlSaxHelpersDefaultHandler:(OrgXmlSaxHelpersDefaultHandler *)dh;

/*!
 @brief Parse the content described by the giving Uniform Resource
  Identifier (URI) as XML using the specified 
 <code>org.xml.sax.HandlerBase</code>.
 <i> Use of the DefaultHandler version of this method is recommended as the 
 <code>HandlerBase</code> class has been deprecated in SAX 2.0</i>
 @param uri The location of the content to be parsed.
 @param hb The SAX HandlerBase to use.
 @throw IllegalArgumentExceptionIf the uri is null.
 @throw IOExceptionIf any IO errors occur.
 @throw SAXExceptionIf any SAX errors occur during processing.
 - seealso: org.xml.sax.DocumentHandler
 */
- (void)parseWithNSString:(NSString *)uri
 withOrgXmlSaxHandlerBase:(OrgXmlSaxHandlerBase *)hb;

/*!
 @brief <p>Reset this <code>SAXParser</code> to its original configuration.
 </p>
  
 <p><code>SAXParser</code> is reset to the same state as when it was created with 
 <code>SAXParserFactory.newSAXParser()</code>.
  <code>reset()</code> is designed to allow the reuse of existing <code>SAXParser</code>s
  thus saving resources associated with the creation of new <code>SAXParser</code>s.</p>
  
 <p>The reset <code>SAXParser</code> is not guaranteed to have the same <code>Schema</code>
  <code>Object</code>, e.g. <code>Object.equals(Object obj)</code>.  It is guaranteed to have a functionally equal 
 <code>Schema</code>.</p>
 @since 1.5
 */
- (void)reset;

/*!
 @brief <p>Sets the particular property in the underlying implementation of 
 <code>org.xml.sax.XMLReader</code>.
 A list of the core features and properties can be found at 
 <a href="http://sax.sourceforge.net/?selected=get-set">
  http://sax.sourceforge.net/?selected=get-set</a>.</p>
 @param name The name of the property to be set.
 @param value The value of the property to be set.
 @throw SAXNotRecognizedExceptionWhen the underlying XMLReader does
    not recognize the property name.
 @throw SAXNotSupportedExceptionWhen the underlying XMLReader
   recognizes the property name but doesn't support the property.
 - seealso: org.xml.sax.XMLReader#setProperty
 */
- (void)setPropertyWithNSString:(NSString *)name
                         withId:(id)value;

#pragma mark Protected

/*!
 @brief <p>Protected constructor to prevent instantiation.
 Use <code>javax.xml.parsers.SAXParserFactory.newSAXParser()</code>.</p>
 */
- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxXmlParsersSAXParser)

FOUNDATION_EXPORT void JavaxXmlParsersSAXParser_init(JavaxXmlParsersSAXParser *self);

J2OBJC_TYPE_LITERAL_HEADER(JavaxXmlParsersSAXParser)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaxXmlParsersSAXParser")
