//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/luni/src/main/java/javax/xml/parsers/FactoryConfigurationError.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxXmlParsersFactoryConfigurationError")
#ifdef RESTRICT_JavaxXmlParsersFactoryConfigurationError
#define INCLUDE_ALL_JavaxXmlParsersFactoryConfigurationError 0
#else
#define INCLUDE_ALL_JavaxXmlParsersFactoryConfigurationError 1
#endif
#undef RESTRICT_JavaxXmlParsersFactoryConfigurationError

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxXmlParsersFactoryConfigurationError_) && (INCLUDE_ALL_JavaxXmlParsersFactoryConfigurationError || defined(INCLUDE_JavaxXmlParsersFactoryConfigurationError))
#define JavaxXmlParsersFactoryConfigurationError_

#define RESTRICT_JavaLangError 1
#define INCLUDE_JavaLangError 1
#include "java/lang/Error.h"

@class JavaLangException;
@class JavaLangThrowable;

/*!
 @brief Thrown when a problem with configuration with the Parser Factories
  exists.This error will typically be thrown when the class of a
  parser factory specified in the system properties cannot be found
  or instantiated.
 @author <a href="mailto:Jeff.Suttor@@Sun.com">Jeff Suttor</a>
 @version $Revision: 569980 $, $Date: 2007-08-26 20:58:15 -0700 (Sun, 26 Aug 2007) $
 */
@interface JavaxXmlParsersFactoryConfigurationError : JavaLangError

#pragma mark Public

/*!
 @brief Create a new <code>FactoryConfigurationError</code> with no
  detail message.
 */
- (instancetype __nonnull)init;

/*!
 @brief Create a new <code>FactoryConfigurationError</code> with a
  given <code>Exception</code> base cause of the error.
 @param e The exception to be encapsulated in a  FactoryConfigurationError.
 */
- (instancetype __nonnull)initWithJavaLangException:(JavaLangException *)e;

/*!
 @brief Create a new <code>FactoryConfigurationError</code> with the
  given <code>Exception</code> base cause and detail message.
 @param e The exception to be encapsulated in a  FactoryConfigurationError
 @param msg The detail message.
 */
- (instancetype __nonnull)initWithJavaLangException:(JavaLangException *)e
                                       withNSString:(NSString *)msg;

/*!
 @brief Create a new <code>FactoryConfigurationError</code> with
  the <code>String </code> specified as an error message.
 @param msg The error message for the exception.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)msg;

/*!
 @brief Return the actual exception (if any) that caused this exception to
  be raised.
 @return The encapsulated exception, or null if there is none.
 */
- (JavaLangException *)getException;

/*!
 @brief Return the message (if any) for this error .If there is no
  message for the exception and there is an encapsulated
  exception then the message of that exception, if it exists will be
  returned.
 Else the name of the encapsulated exception will be returned.
 @return The error message.
 */
- (NSString *)getMessage;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1
                               withBoolean:(jboolean)arg2
                               withBoolean:(jboolean)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxXmlParsersFactoryConfigurationError)

FOUNDATION_EXPORT void JavaxXmlParsersFactoryConfigurationError_init(JavaxXmlParsersFactoryConfigurationError *self);

FOUNDATION_EXPORT JavaxXmlParsersFactoryConfigurationError *new_JavaxXmlParsersFactoryConfigurationError_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxXmlParsersFactoryConfigurationError *create_JavaxXmlParsersFactoryConfigurationError_init(void);

FOUNDATION_EXPORT void JavaxXmlParsersFactoryConfigurationError_initWithNSString_(JavaxXmlParsersFactoryConfigurationError *self, NSString *msg);

FOUNDATION_EXPORT JavaxXmlParsersFactoryConfigurationError *new_JavaxXmlParsersFactoryConfigurationError_initWithNSString_(NSString *msg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxXmlParsersFactoryConfigurationError *create_JavaxXmlParsersFactoryConfigurationError_initWithNSString_(NSString *msg);

FOUNDATION_EXPORT void JavaxXmlParsersFactoryConfigurationError_initWithJavaLangException_(JavaxXmlParsersFactoryConfigurationError *self, JavaLangException *e);

FOUNDATION_EXPORT JavaxXmlParsersFactoryConfigurationError *new_JavaxXmlParsersFactoryConfigurationError_initWithJavaLangException_(JavaLangException *e) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxXmlParsersFactoryConfigurationError *create_JavaxXmlParsersFactoryConfigurationError_initWithJavaLangException_(JavaLangException *e);

FOUNDATION_EXPORT void JavaxXmlParsersFactoryConfigurationError_initWithJavaLangException_withNSString_(JavaxXmlParsersFactoryConfigurationError *self, JavaLangException *e, NSString *msg);

FOUNDATION_EXPORT JavaxXmlParsersFactoryConfigurationError *new_JavaxXmlParsersFactoryConfigurationError_initWithJavaLangException_withNSString_(JavaLangException *e, NSString *msg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxXmlParsersFactoryConfigurationError *create_JavaxXmlParsersFactoryConfigurationError_initWithJavaLangException_withNSString_(JavaLangException *e, NSString *msg);

J2OBJC_TYPE_LITERAL_HEADER(JavaxXmlParsersFactoryConfigurationError)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaxXmlParsersFactoryConfigurationError")
