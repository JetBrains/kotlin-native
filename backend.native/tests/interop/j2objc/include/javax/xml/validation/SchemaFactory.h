//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/luni/src/main/java/javax/xml/validation/SchemaFactory.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxXmlValidationSchemaFactory")
#ifdef RESTRICT_JavaxXmlValidationSchemaFactory
#define INCLUDE_ALL_JavaxXmlValidationSchemaFactory 0
#else
#define INCLUDE_ALL_JavaxXmlValidationSchemaFactory 1
#endif
#undef RESTRICT_JavaxXmlValidationSchemaFactory

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxXmlValidationSchemaFactory_) && (INCLUDE_ALL_JavaxXmlValidationSchemaFactory || defined(INCLUDE_JavaxXmlValidationSchemaFactory))
#define JavaxXmlValidationSchemaFactory_

@class IOSObjectArray;
@class JavaIoFile;
@class JavaLangClassLoader;
@class JavaNetURL;
@class JavaxXmlValidationSchema;
@protocol JavaxXmlTransformSource;
@protocol OrgW3cDomLsLSResourceResolver;
@protocol OrgXmlSaxErrorHandler;

/*!
 @brief Factory that creates <code>Schema</code> objects&#x2E; Entry-point to
  the validation API.
 <p>
  <code>SchemaFactory</code> is a schema compiler. It reads external
  representations of schemas and prepares them for validation. 
 <p>
  The <code>SchemaFactory</code> class is not thread-safe. In other words,
  it is the application's responsibility to ensure that at most
  one thread is using a <code>SchemaFactory</code> object at any
  given moment. Implementations are encouraged to mark methods
  as <tt>synchronized</tt> to protect themselves from broken clients. 
 <p>
  <code>SchemaFactory</code> is not re-entrant. While one of the 
 <code>newSchema</code> methods is being invoked, applications
  may not attempt to recursively invoke the <code>newSchema</code> method,
  even from the same thread. 
 <h2><a name="schemaLanguage"></a>Schema Language</h2>
  <p>
  This spec uses a namespace URI to designate a schema language.
  The following table shows the values defined by this specification. 
 <p>
  To be compliant with the spec, the implementation
  is only required to support W3C XML Schema 1.0. However,
  if it chooses to support other schema languages listed here,
  it must conform to the relevant behaviors described in this spec. 
 <p>
  Schema languages not listed here are expected to
  introduce their own URIs to represent themselves.
  The <code>SchemaFactory</code> class is capable of locating other
  implementations for other schema languages at run-time. 
 <p>
  Note that because the XML DTD is strongly tied to the parsing process
  and has a significant effect on the parsing process, it is impossible
  to define the DTD validation as a process independent from parsing.
  For this reason, this specification does not define the semantics for
  the XML DTD. This doesn't prohibit implementers from implementing it
  in a way they see fit, but <em>users are warned that any DTD
  validation implemented on this interface necessarily deviate from
  the XML DTD semantics as defined in the XML 1.0</em>.
  
 <table border="1" cellpadding="2">
    <thead>
      <tr>
        <th>value</th>
        <th>language</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><code>javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI</code> ("<code>http://www.w3.org/2001/XMLSchema</code>")</td>
        <td><a href="http://www.w3.org/TR/xmlschema-1">W3C XML Schema 1.0</a></td>
      </tr>
      <tr>
        <td><code>javax.xml.XMLConstants.RELAXNG_NS_URI</code> ("<code>http://relaxng.org/ns/structure/1.0</code>")</td>
        <td><a href="http://www.relaxng.org/">RELAX NG 1.0</a></td>
      </tr>
    </tbody>
  </table>
 @author <a href="mailto:Kohsuke.Kawaguchi@@Sun.com">Kohsuke Kawaguchi</a>
 @version $Revision: 884952 $, $Date: 2009-11-27 10:55:08 -0800 (Fri, 27 Nov 2009) $
 @since 1.5
 */
@interface JavaxXmlValidationSchemaFactory : NSObject

#pragma mark Public

/*!
 @brief Gets the current <code>ErrorHandler</code> set to this <code>SchemaFactory</code>.
 @return This method returns the object that was last set through
       the <code>setErrorHandler(ErrorHandler)</code> method, or null
       if that method has never been called since this <code>SchemaFactory</code>
       has created.
 - seealso: #setErrorHandler(ErrorHandler)
 */
- (id<OrgXmlSaxErrorHandler>)getErrorHandler;

/*!
 @brief Look up the value of a feature flag.
 <p>The feature name is any fully-qualified URI.  It is
  possible for a <code>SchemaFactory</code> to recognize a feature name but
  temporarily be unable to return its value. 
 <p>Implementers are free (and encouraged) to invent their own features,
  using names built on their own URIs.</p>
 @param name The feature name, which is a non-null fully-qualified URI.
 @return The current value of the feature (true or false).
 @throw org.xml.sax.SAXNotRecognizedExceptionIf the feature
             value can't be assigned or retrieved.
 @throw org.xml.sax.SAXNotSupportedExceptionWhen the
             <code>SchemaFactory</code> recognizes the feature name but
             cannot determine its value at this time.
 @throw NullPointerException
 if the name parameter is null.
 - seealso: #setFeature(String, boolean)
 */
- (jboolean)getFeatureWithNSString:(NSString *)name;

/*!
 @brief Look up the value of a property.
 <p>The property name is any fully-qualified URI.  It is
  possible for a <code>SchemaFactory</code> to recognize a property name but
  temporarily be unable to return its value.</p>
  
 <p><code>SchemaFactory</code>s are not required to recognize any specific
  property names.</p>
  
 <p>Implementers are free (and encouraged) to invent their own properties,
  using names built on their own URIs.</p>
 @param name The property name, which is a non-null fully-qualified URI.
 @return The current value of the property.
 @throw org.xml.sax.SAXNotRecognizedExceptionIf the property
             value can't be assigned or retrieved.
 @throw org.xml.sax.SAXNotSupportedExceptionWhen the
             XMLReader recognizes the property name but
             cannot determine its value at this time.
 @throw NullPointerException
 if the name parameter is null.
 - seealso: #setProperty(String, Object)
 */
- (id)getPropertyWithNSString:(NSString *)name;

/*!
 @brief Gets the current <code>LSResourceResolver</code> set to this <code>SchemaFactory</code>.
 @return This method returns the object that was last set through
       the <code>setResourceResolver(LSResourceResolver)</code> method, or null
       if that method has never been called since this <code>SchemaFactory</code>
       has created.
 - seealso: #setErrorHandler(ErrorHandler)
 */
- (id<OrgW3cDomLsLSResourceResolver>)getResourceResolver;

/*!
 @brief <p>Is specified schema supported by this <code>SchemaFactory</code>?
 </p>
 @param schemaLanguage Specifies the schema language which the returned  <code> SchemaFactory </code>  will understand.
       <code> schemaLanguage </code>  must specify a  <a href="#schemaLanguage"> valid </a>  schema language.
 @return <code>true</code> if <code>SchemaFactory</code> supports <code>schemaLanguage</code>, else <code>false</code>.
 @throw NullPointerExceptionIf <code>schemaLanguage</code> is <code>null</code>.
 @throw IllegalArgumentExceptionIf <code>schemaLanguage.length() == 0</code>
    or <code>schemaLanguage</code> does not specify a <a href="#schemaLanguage">valid</a> schema language.
 */
- (jboolean)isSchemaLanguageSupportedWithNSString:(NSString *)schemaLanguage;

/*!
 @brief <p>Lookup an implementation of the <code>SchemaFactory</code> that supports the specified
  schema language and return it.
 </p>
  
 <p>To find a <code>SchemaFactory</code> object for a given schema language,
  this method looks the following places in the following order
  where "the class loader" refers to the context class loader:</p>
  <ol>
   <li>
      If the system property     
 <code>"javax.xml.validation.SchemaFactory:<i>schemaLanguage</i>"</code>
      is present (where <i>schemaLanguage</i> is the parameter
      to this method), then its value is read
      as a class name. The method will try to
      create a new instance of this class by using the class loader,
      and returns it if it is successfully created.   
 </li>
    <li>
      <code>$java.home/lib/jaxp.properties</code> is read and
      the value associated with the key being the system property above
      is looked for. If present, the value is processed just like above.   
 </li>
    <li>
      <p>The class loader is asked for service provider provider-configuration files matching
      <code>javax.xml.validation.SchemaFactory</code> in the resource directory META-INF/services.
      See the JAR File Specification for file format and parsing rules.
      Each potential service provider is required to implement the method:</p>
      @code

         <code>isSchemaLanguageSupported(String schemaLanguage)</code>
          
@endcode
      The first service provider found in class loader order that supports the specified schema language is returned.   
 </li>
    <li>
      Platform default <code>SchemaFactory</code> is located
      in a implementation specific way. There must be a platform default     
 <code>SchemaFactory</code> for W3C XML Schema.
    </li>
  </ol>
  
 <p>If everything fails, <code>IllegalArgumentException</code> will be thrown.</p>
  
 <p><strong>Tip for Trouble-shooting:</strong></p>
  <p>See <code>java.util.Properties.load(java.io.InputStream)</code> for
  exactly how a property file is parsed. In particular, colons ':'
  need to be escaped in a property file, so make sure schema language
  URIs are properly escaped in it. For example:</p>
  @code

  http\://www.w3.org/2001/XMLSchema=org.acme.foo.XSSchemaFactory 
  
@endcode
 @param schemaLanguage Specifies the schema language which the returned
        SchemaFactory will understand. See
         <a href="#schemaLanguage">
  the list of available       schema languages
  </a>  for the possible values.
 @return New instance of a <code>SchemaFactory</code>
 @throw IllegalArgumentException
 If no implementation of the schema language is available.
 @throw NullPointerException
 If the <tt>schemaLanguage</tt> parameter is null.
 */
+ (JavaxXmlValidationSchemaFactory *)newInstanceWithNSString:(NSString *)schemaLanguage OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns an instance of the named implementation of <code>SchemaFactory</code>.
 @throw IllegalArgumentExceptionif <code>factoryClassName</code> is not available, cannot be
      instantiated, or doesn't support <code>schemaLanguage</code>.
 @since 1.6
 */
+ (JavaxXmlValidationSchemaFactory *)newInstanceWithNSString:(NSString *)schemaLanguage
                                                withNSString:(NSString *)factoryClassName
                                     withJavaLangClassLoader:(JavaLangClassLoader *)classLoader OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Creates a special <code>Schema</code> object.
 <p>
  The exact semantics of the returned <code>Schema</code> object depends
  on the schema language that this <code>SchemaFactory</code> is created
  for. 
 <p>
  Also, implementations are allowed to use implementation-specific
  property/feature to alter the semantics of this method. 
 <h2>W3C XML Schema 1.0</h2>
  <p>
  For XML Schema, this method creates a <code>Schema</code> object that
  performs validation by using location hints specified in documents. 
 <p>
  The returned <code>Schema</code> object assumes that if documents
  refer to the same URL in the schema location hints,
  they will always resolve to the same schema document. This
  assumption allows implementations to reuse parsed results of
  schema documents so that multiple validations against the same
  schema will run faster. 
 <p>
  Note that the use of schema location hints introduces a
  vulnerability to denial-of-service attacks. 
 <h2>RELAX NG</h2>
  <p>
  RELAX NG does not support this operation.
 @return Always return non-null valid <code>Schema</code> object.
 @throw UnsupportedOperationException
 If this operation is not supported by the callee.
 @throw SAXException
 If this operation is supported but failed for some reason.
 */
- (JavaxXmlValidationSchema *)newSchema OBJC_METHOD_FAMILY_NONE;

/*!
 @brief <p>Parses the specified <code>File</code> as a schema and returns it as a <code>Schema</code>.
 </p>
  
 <p>This is a convenience method for <code>newSchema(Source schema)</code>.</p>
 @param schema File that represents a schema.
 @return New <code>Schema</code> from parsing <code>schema</code>.
 @throw SAXExceptionIf a SAX error occurs during parsing.
 @throw NullPointerExceptionif <tt>schema</tt> is null.
 */
- (JavaxXmlValidationSchema *)newSchemaWithJavaIoFile:(JavaIoFile *)schema OBJC_METHOD_FAMILY_NONE;

/*!
 @brief <p>Parses the specified source as a schema and returns it as a schema.
 </p>
  
 <p>This is a convenience method for <code>newSchema(Source[] schemas)</code>.</p>
 @param schema Source that represents a schema.
 @return New <code>Schema</code> from parsing <code>schema</code>.
 @throw SAXExceptionIf a SAX error occurs during parsing.
 @throw NullPointerExceptionif <tt>schema</tt> is null.
 */
- (JavaxXmlValidationSchema *)newSchemaWithJavaxXmlTransformSource:(id<JavaxXmlTransformSource>)schema OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Parses the specified source(s) as a schema and returns it as a schema.
 <p>
  The callee will read all the <code>Source</code>s and combine them into a
  single schema. The exact semantics of the combination depends on the schema
  language that this <code>SchemaFactory</code> object is created for. 
 <p>
  When an <code>ErrorHandler</code> is set, the callee will report all the errors
  found in sources to the handler. If the handler throws an exception, it will
  abort the schema compilation and the same exception will be thrown from
  this method. Also, after an error is reported to a handler, the callee is allowed
  to abort the further processing by throwing it. If an error handler is not set,
  the callee will throw the first error it finds in the sources. 
 <h2>W3C XML Schema 1.0</h2>
  <p>
  The resulting schema contains components from the specified sources.
  The same result would be achieved if all these sources were
  imported, using appropriate values for schemaLocation and namespace,
  into a single schema document with a different targetNamespace
  and no components of its own, if the import elements were given
  in the same order as the sources.  Section 4.2.3 of the XML Schema
  recommendation describes the options processors have in this
  regard.  While a processor should be consistent in its treatment of
  JAXP schema sources and XML Schema imports, the behavior between
  JAXP-compliant parsers may vary; in particular, parsers may choose
  to ignore all but the first &lt;import> for a given namespace,
  regardless of information provided in schemaLocation. 
 <p>
  If the parsed set of schemas includes error(s) as
  specified in the section 5.1 of the XML Schema spec, then
  the error must be reported to the <code>ErrorHandler</code>.
  
 <h2>RELAX NG</h2>
  
 <p>For RELAX NG, this method must throw <code>UnsupportedOperationException</code>
  if <tt>schemas.length!=1</tt>.
 @param schemas inputs to be parsed. 
 <code>SchemaFactory</code>  is required       to recognize 
 <code>StreamSource</code> ,       <code>javax.xml.transform.sax.SAXSource</code>
  ,       and <code>javax.xml.transform.dom.DOMSource</code>
  .
 @return Always return a non-null valid <code>Schema</code> object.
       Note that when an error has been reported, there is no
       guarantee that the returned <code>Schema</code> object is
       meaningful.
 @throw SAXException
 If an error is found during processing the specified inputs.
       When an <code>ErrorHandler</code> is set, errors are reported to
       there first. See <code>setErrorHandler(ErrorHandler)</code>.
 @throw NullPointerException
 If the <code>schemas</code> parameter itself is null or
       any item in the array is null.
 @throw IllegalArgumentException
 If any item in the array is not recognized by this method.
 @throw UnsupportedOperationException
 If the schema language doesn't support this operation.
 */
- (JavaxXmlValidationSchema *)newSchemaWithJavaxXmlTransformSourceArray:(IOSObjectArray *)schemas OBJC_METHOD_FAMILY_NONE;

/*!
 @brief <p>Parses the specified <code>URL</code> as a schema and returns it as a <code>Schema</code>.
 </p>
  
 <p>This is a convenience method for <code>newSchema(Source schema)</code>.</p>
 @param schema <code> URL </code>  that represents a schema.
 @return New <code>Schema</code> from parsing <code>schema</code>.
 @throw SAXExceptionIf a SAX error occurs during parsing.
 @throw NullPointerExceptionif <tt>schema</tt> is null.
 */
- (JavaxXmlValidationSchema *)newSchemaWithJavaNetURL:(JavaNetURL *)schema OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Sets the <code>ErrorHandler</code> to receive errors encountered
  during the <code>newSchema</code> method invocation.
 <p>
  Error handler can be used to customize the error handling process
  during schema parsing. When an <code>ErrorHandler</code> is set,
  errors found during the parsing of schemas will be first sent
  to the <code>ErrorHandler</code>.
  
 <p>
  The error handler can abort the parsing of a schema immediately
  by throwing <code>SAXException</code> from the handler. Or for example
  it can print an error to the screen and try to continue the
  processing by returning normally from the <code>ErrorHandler</code>
  
 <p>
  If any <code>Throwable</code> (or instances of its derived classes)
  is thrown from an <code>ErrorHandler</code>,
  the caller of the <code>newSchema</code> method will be thrown
  the same <code>Throwable</code> object. 
 <p>
  <code>SchemaFactory</code> is not allowed to
  throw <code>SAXException</code> without first reporting it to 
 <code>ErrorHandler</code>.
  
 <p>
  Applications can call this method even during a <code>Schema</code>
  is being parsed. 
 <p>
  When the <code>ErrorHandler</code> is null, the implementation will
  behave as if the following <code>ErrorHandler</code> is set: 
 @code

  class DraconianErrorHandler implements <code>ErrorHandler</code> {
      public void fatalError( <code>org.xml.sax.SAXParseException</code> e ) throws <code>SAXException</code> {
          throw e;
      }
      public void error( <code>org.xml.sax.SAXParseException</code> e ) throws <code>SAXException</code> {
          throw e;
      }
      public void warning( <code>org.xml.sax.SAXParseException</code> e ) throws <code>SAXException</code> {
          // noop
      }    }    
  
@endcode
  
 <p>
  When a new <code>SchemaFactory</code> object is created, initially
  this field is set to null. This field will <em>NOT</em> be
  inherited to <code>Schema</code>s, <code>Validator</code>s, or 
 <code>ValidatorHandler</code>s that are created from this <code>SchemaFactory</code>.
 @param errorHandler A new error handler to be set. This parameter can be null.
 */
- (void)setErrorHandlerWithOrgXmlSaxErrorHandler:(id<OrgXmlSaxErrorHandler>)errorHandler;

/*!
 @brief Set the value of a feature flag.
 <p>
  Feature can be used to control the way a <code>SchemaFactory</code>
  parses schemas, although <code>SchemaFactory</code>s are not required
  to recognize any specific feature names.</p>
  
 <p>The feature name is any fully-qualified URI.  It is
  possible for a <code>SchemaFactory</code> to expose a feature value but
  to be unable to change the current value.</p>
  
 <p>All implementations are required to support the <code>javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING</code> feature.
  When the feature is:</p>
  <ul>
    <li>
      <code>true</code>: the implementation will limit XML processing to conform to implementation limits.
      Examples include entity expansion limits and XML Schema constructs that would consume large amounts of resources.
      If XML processing is limited for security reasons, it will be reported via a call to the registered     
 <code>ErrorHandler.fatalError(org.xml.sax.SAXParseException)</code>.
      See <code>setErrorHandler(ErrorHandler errorHandler)</code>.
    </li>
    <li>
      <code>false</code>: the implementation will processing XML according to the XML specifications without
      regard to possible implementation limits.   
 </li>
  </ul>
 @param name The feature name, which is a non-null fully-qualified URI.
 @param value The requested value of the feature (true or false).
 @throw org.xml.sax.SAXNotRecognizedExceptionIf the feature
             value can't be assigned or retrieved.
 @throw org.xml.sax.SAXNotSupportedExceptionWhen the
             <code>SchemaFactory</code> recognizes the feature name but
             cannot set the requested value.
 @throw NullPointerException
 if the name parameter is null.
 - seealso: #getFeature(String)
 */
- (void)setFeatureWithNSString:(NSString *)name
                   withBoolean:(jboolean)value;

/*!
 @brief Set the value of a property.
 <p>The property name is any fully-qualified URI.  It is
  possible for a <code>SchemaFactory</code> to recognize a property name but
  to be unable to change the current value.</p>
  
 <p><code>SchemaFactory</code>s are not required to recognize setting
  any specific property names.</p>
 @param name The property name, which is a non-null fully-qualified URI.
 @param object The requested value for the property.
 @throw org.xml.sax.SAXNotRecognizedExceptionIf the property
             value can't be assigned or retrieved.
 @throw org.xml.sax.SAXNotSupportedExceptionWhen the
             <code>SchemaFactory</code> recognizes the property name but
             cannot set the requested value.
 @throw NullPointerException
 if the name parameter is null.
 */
- (void)setPropertyWithNSString:(NSString *)name
                         withId:(id)object;

/*!
 @brief Sets the <code>LSResourceResolver</code> to customize
  resource resolution when parsing schemas.
 <p>
  <code>SchemaFactory</code> uses a <code>LSResourceResolver</code>
  when it needs to locate external resources while parsing schemas,
  although exactly what constitutes "locating external resources" is
  up to each schema language. For example, for W3C XML Schema,
  this includes files <tt>&lt;include></tt>d or <tt>&lt;import></tt>ed,
  and DTD referenced from schema files, etc. 
 <p>
  Applications can call this method even during a <code>Schema</code>
  is being parsed. 
 <p>
  When the <code>LSResourceResolver</code> is null, the implementation will
  behave as if the following <code>LSResourceResolver</code> is set: 
 @code

  class DumbDOMResourceResolver implements <code>LSResourceResolver</code> {
      public <code>org.w3c.dom.ls.LSInput</code> resolveResource(
          String publicId, String systemId, String baseURI) {
          return null; // always return null
      }    }    
  
@endcode
  
 <p>
  If a <code>LSResourceResolver</code> throws a <code>RuntimeException</code>
   (or instances of its derived classes),
  then the <code>SchemaFactory</code> will abort the parsing and
  the caller of the <code>newSchema</code> method will receive
  the same <code>RuntimeException</code>.
  
 <p>
  When a new <code>SchemaFactory</code> object is created, initially
  this field is set to null.  This field will <em>NOT</em> be
  inherited to <code>Schema</code>s, <code>Validator</code>s, or 
 <code>ValidatorHandler</code>s that are created from this <code>SchemaFactory</code>.
 @param resourceResolver A new resource resolver to be set. This parameter can be null.
 */
- (void)setResourceResolverWithOrgW3cDomLsLSResourceResolver:(id<OrgW3cDomLsLSResourceResolver>)resourceResolver;

#pragma mark Protected

/*!
 @brief <p>Constructor for derived classes.
 </p>
  
 <p>The constructor does nothing.</p>
  
 <p>Derived classes must create <code>SchemaFactory</code> objects that have 
 <code>null</code> <code>ErrorHandler</code> and 
 <code>null</code> <code>LSResourceResolver</code>.</p>
 */
- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxXmlValidationSchemaFactory)

FOUNDATION_EXPORT void JavaxXmlValidationSchemaFactory_init(JavaxXmlValidationSchemaFactory *self);

FOUNDATION_EXPORT JavaxXmlValidationSchemaFactory *JavaxXmlValidationSchemaFactory_newInstanceWithNSString_(NSString *schemaLanguage);

FOUNDATION_EXPORT JavaxXmlValidationSchemaFactory *JavaxXmlValidationSchemaFactory_newInstanceWithNSString_withNSString_withJavaLangClassLoader_(NSString *schemaLanguage, NSString *factoryClassName, JavaLangClassLoader *classLoader);

J2OBJC_TYPE_LITERAL_HEADER(JavaxXmlValidationSchemaFactory)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaxXmlValidationSchemaFactory")
