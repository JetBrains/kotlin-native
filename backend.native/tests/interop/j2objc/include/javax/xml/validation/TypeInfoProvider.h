//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/luni/src/main/java/javax/xml/validation/TypeInfoProvider.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxXmlValidationTypeInfoProvider")
#ifdef RESTRICT_JavaxXmlValidationTypeInfoProvider
#define INCLUDE_ALL_JavaxXmlValidationTypeInfoProvider 0
#else
#define INCLUDE_ALL_JavaxXmlValidationTypeInfoProvider 1
#endif
#undef RESTRICT_JavaxXmlValidationTypeInfoProvider

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxXmlValidationTypeInfoProvider_) && (INCLUDE_ALL_JavaxXmlValidationTypeInfoProvider || defined(INCLUDE_JavaxXmlValidationTypeInfoProvider))
#define JavaxXmlValidationTypeInfoProvider_

@protocol OrgW3cDomTypeInfo;

/*!
 @brief This class provides access to the type information determined
  by <code>ValidatorHandler</code>.
 <p>
  Some schema languages, such as W3C XML Schema, encourages a validator
  to report the "type" it assigns to each attribute/element.
  Those applications who wish to access this type information can invoke
  methods defined on this "interface" to access such type information. 
 <p>
  Implementation of this "interface" can be obtained through the 
 <code>ValidatorHandler.getTypeInfoProvider()</code> method.
 @author <a href="mailto:Kohsuke.Kawaguchi@@Sun.com">Kohsuke Kawaguchi</a>
 @version $Revision: 884939 $, $Date: 2009-11-27 10:20:46 -0800 (Fri, 27 Nov 2009) $
 - seealso: org.w3c.dom.TypeInfo
 @since 1.5
 */
@interface JavaxXmlValidationTypeInfoProvider : NSObject

#pragma mark Public

/*!
 @brief Returns the immutable <code>TypeInfo</code> object for the specified
  attribute of the current element.
 <p>
  The method may only be called by the startElement event of the 
 <code>org.xml.sax.ContentHandler</code> that the application sets to the 
 <code>ValidatorHandler</code>.
 @param index The index of the attribute. The same index for
        the <code>org.xml.sax.Attributes</code>
   object passed to the        <tt> startElement
  </tt>  callback.
 @throw IndexOutOfBoundsException
 If the index is invalid.
 @throw IllegalStateException
 If this method is called from other <code>org.xml.sax.ContentHandler</code>
       methods.
 @return An immutable <code>TypeInfo</code> object that represents the
       type of the specified attribute.
       Note that the caller can keep references to the obtained      
 <code>TypeInfo</code> longer than the callback scope.
       Otherwise, this method returns
       null if the validator is unable to
       determine the type.
 */
- (id<OrgW3cDomTypeInfo>)getAttributeTypeInfoWithInt:(jint)index;

/*!
 @brief <p>Returns the immutable <code>TypeInfo</code> object for the current element.
 </p>
  
 <p>
  The method may only be called by the startElement and endElement event of the 
 <code>org.xml.sax.ContentHandler</code> that the application sets to the 
 <code>ValidatorHandler</code>.</p>
 @throw IllegalStateException
 If this method is called from other <code>org.xml.sax.ContentHandler</code>
       methods.
 @return An immutable <code>TypeInfo</code> object that represents the
       type of the current element.
       Note that the caller can keep references to the obtained      
 <code>TypeInfo</code> longer than the callback scope.
       Otherwise, this method returns
       null if the validator is unable to
       determine the type of the current element for some reason
       (for example, if the validator is recovering from
       an earlier error.)
 */
- (id<OrgW3cDomTypeInfo>)getElementTypeInfo;

/*!
 @brief Returns <tt>true</tt> if the specified attribute is determined
  to be ID.
 <p>
  Exactly how an attribute is "determined to be ID" is up to the
  schema language. In case of W3C XML Schema, this means
  that the actual type of the attribute is the built-in ID type
  or its derived type. 
 <p>
  A <code>javax.xml.parsers.DocumentBuilder</code> uses this information
  to properly implement <code>org.w3c.dom.Attr.isId()</code>.
  
 <p>
  The method may only be called by the startElement event of the 
 <code>org.xml.sax.ContentHandler</code> that the application sets to the 
 <code>ValidatorHandler</code>.
 @param index The index of the attribute. The same index for
        the <code>org.xml.sax.Attributes</code>
   object passed to the        <tt> startElement
  </tt>  callback.
 @throw IndexOutOfBoundsException
 If the index is invalid.
 @throw IllegalStateException
 If this method is called from other <code>org.xml.sax.ContentHandler</code>
       methods.
 @return true
       if the type of the specified attribute is ID.
 */
- (jboolean)isIdAttributeWithInt:(jint)index;

/*!
 @brief Returns <tt>false</tt> if the attribute was added by the validator.
 <p>
  This method provides information necessary for
  a <code>javax.xml.parsers.DocumentBuilder</code> to determine what
  the DOM tree should return from the <code>org.w3c.dom.Attr.getSpecified()</code> method. 
 <p>
  The method may only be called by the startElement event of the 
 <code>org.xml.sax.ContentHandler</code> that the application sets to the 
 <code>ValidatorHandler</code>.
  
 <p>
  A general guideline for validators is to return true if
  the attribute was originally present in the pipeline, and
  false if it was added by the validator.
 @param index The index of the attribute. The same index for
        the <code>org.xml.sax.Attributes</code>
   object passed to the        <tt> startElement
  </tt>  callback.
 @throw IndexOutOfBoundsException
 If the index is invalid.
 @throw IllegalStateException
 If this method is called from other <code>org.xml.sax.ContentHandler</code>
       methods.
 @return <tt>true</tt> if the attribute was present before the validator
       processes input. <tt>false</tt> if the attribute was added
       by the validator.
 */
- (jboolean)isSpecifiedWithInt:(jint)index;

#pragma mark Protected

/*!
 @brief Constructor for the derived class.
 <p>
  The constructor does nothing.
 */
- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxXmlValidationTypeInfoProvider)

FOUNDATION_EXPORT void JavaxXmlValidationTypeInfoProvider_init(JavaxXmlValidationTypeInfoProvider *self);

J2OBJC_TYPE_LITERAL_HEADER(JavaxXmlValidationTypeInfoProvider)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaxXmlValidationTypeInfoProvider")
