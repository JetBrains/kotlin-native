//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/luni/src/main/java/javax/xml/validation/Validator.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxXmlValidationValidator")
#ifdef RESTRICT_JavaxXmlValidationValidator
#define INCLUDE_ALL_JavaxXmlValidationValidator 0
#else
#define INCLUDE_ALL_JavaxXmlValidationValidator 1
#endif
#undef RESTRICT_JavaxXmlValidationValidator

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxXmlValidationValidator_) && (INCLUDE_ALL_JavaxXmlValidationValidator || defined(INCLUDE_JavaxXmlValidationValidator))
#define JavaxXmlValidationValidator_

@protocol JavaxXmlTransformResult;
@protocol JavaxXmlTransformSource;
@protocol OrgW3cDomLsLSResourceResolver;
@protocol OrgXmlSaxErrorHandler;

/*!
 @brief <p>A processor that checks an XML document against <code>Schema</code>.
 </p>
  
 <p>
  A validator is a thread-unsafe and non-reentrant object.
  In other words, it is the application's responsibility to make
  sure that one <code>Validator</code> object is not used from
  more than one thread at any given time, and while the <tt>validate</tt>
  method is invoked, applications may not recursively call
  the <tt>validate</tt> method. 
 <p>
  Note that while the <code>validate(javax.xml.transform.Source)</code> and <code>validate(javax.xml.transform.Source, javax.xml.transform.Result)</code>
  methods take a <code>Source</code> instance, the <code>Source</code>
  instance must be a <code>SAXSource</code>, <code>DOMSource</code>, <code>StAXSource</code> or <code>StreamSource</code>.
 @author <a href="mailto:Kohsuke.Kawaguchi@@Sun.com">Kohsuke Kawaguchi</a>
 @version $Revision: 888884 $, $Date: 2009-12-09 09:36:46 -0800 (Wed, 09 Dec 2009) $
 @since 1.5
 */
@interface JavaxXmlValidationValidator : NSObject

#pragma mark Public

/*!
 @brief Gets the current <code>ErrorHandler</code> set to this <code>Validator</code>.
 @return This method returns the object that was last set through
       the <code>setErrorHandler(ErrorHandler)</code> method, or null
       if that method has never been called since this <code>Validator</code>
       has created.
 - seealso: #setErrorHandler(ErrorHandler)
 */
- (id<OrgXmlSaxErrorHandler>)getErrorHandler;

/*!
 @brief Look up the value of a feature flag.
 <p>The feature name is any fully-qualified URI.  It is
  possible for a <code>Validator</code> to recognize a feature name but
  temporarily be unable to return its value.
  Some feature values may be available only in specific
  contexts, such as before, during, or after a validation. 
 <p>Implementors are free (and encouraged) to invent their own features,
  using names built on their own URIs.</p>
 @param name The feature name, which is a non-null fully-qualified URI.
 @return The current value of the feature (true or false).
 @throw org.xml.sax.SAXNotRecognizedExceptionIf the feature
             value can't be assigned or retrieved.
 @throw org.xml.sax.SAXNotSupportedExceptionWhen the
             <code>Validator</code> recognizes the feature name but
             cannot determine its value at this time.
 @throw NullPointerException
 When the name parameter is null.
 - seealso: #setFeature(String, boolean)
 */
- (jboolean)getFeatureWithNSString:(NSString *)name;

/*!
 @brief Look up the value of a property.
 <p>The property name is any fully-qualified URI.  It is
  possible for a <code>Validator</code> to recognize a property name but
  temporarily be unable to return its value.
  Some property values may be available only in specific
  contexts, such as before, during, or after a validation.</p>
  
 <p><code>Validator</code>s are not required to recognize any specific
  property names.</p>
  
 <p>Implementors are free (and encouraged) to invent their own properties,
  using names built on their own URIs.</p>
 @param name The property name, which is a non-null fully-qualified URI.
 @return The current value of the property.
 @throw org.xml.sax.SAXNotRecognizedExceptionIf the property
             value can't be assigned or retrieved.
 @throw org.xml.sax.SAXNotSupportedExceptionWhen the
             XMLReader recognizes the property name but
             cannot determine its value at this time.
 @throw NullPointerException
 When the name parameter is null.
 - seealso: #setProperty(String, Object)
 */
- (id)getPropertyWithNSString:(NSString *)name;

/*!
 @brief Gets the current <code>LSResourceResolver</code> set to this <code>Validator</code>.
 @return This method returns the object that was last set through
       the <code>setResourceResolver(LSResourceResolver)</code> method, or null
       if that method has never been called since this <code>Validator</code>
       has created.
 - seealso: #setErrorHandler(ErrorHandler)
 */
- (id<OrgW3cDomLsLSResourceResolver>)getResourceResolver;

/*!
 @brief <p>Reset this <code>Validator</code> to its original configuration.
 </p>
  
 <p><code>Validator</code> is reset to the same state as when it was created with 
 <code>Schema.newValidator()</code>.
  <code>reset()</code> is designed to allow the reuse of existing <code>Validator</code>s
  thus saving resources associated with the creation of new <code>Validator</code>s.</p>
  
 <p>The reset <code>Validator</code> is not guaranteed to have the same <code>LSResourceResolver</code> or <code>ErrorHandler</code>
  <code>Object</code>s, e.g. <code>Object.equals(Object obj)</code>.  It is guaranteed to have a functionally equal 
 <code>LSResourceResolver</code> and <code>ErrorHandler</code>.</p>
 */
- (void)reset;

/*!
 @brief Sets the <code>ErrorHandler</code> to receive errors encountered
  during the <code>validate</code> method invocation.
 <p>
  Error handler can be used to customize the error handling process
  during a validation. When an <code>ErrorHandler</code> is set,
  errors found during the validation will be first sent
  to the <code>ErrorHandler</code>.
  
 <p>
  The error handler can abort further validation immediately
  by throwing <code>SAXException</code> from the handler. Or for example
  it can print an error to the screen and try to continue the
  validation by returning normally from the <code>ErrorHandler</code>
  
 <p>
  If any <code>Throwable</code> is thrown from an <code>ErrorHandler</code>,
  the caller of the <code>validate</code> method will be thrown
  the same <code>Throwable</code> object. 
 <p>
  <code>Validator</code> is not allowed to
  throw <code>SAXException</code> without first reporting it to 
 <code>ErrorHandler</code>.
  
 <p>
  When the <code>ErrorHandler</code> is null, the implementation will
  behave as if the following <code>ErrorHandler</code> is set: 
 @code

  class DraconianErrorHandler implements <code>ErrorHandler</code> {
      public void fatalError( <code>org.xml.sax.SAXParseException</code> e ) throws <code>SAXException</code> {
          throw e;
      }
      public void error( <code>org.xml.sax.SAXParseException</code> e ) throws <code>SAXException</code> {
          throw e;
      }
      public void warning( <code>org.xml.sax.SAXParseException</code> e ) throws <code>SAXException</code> {
          // noop
      }    }    
  
@endcode
  
 <p>
  When a new <code>Validator</code> object is created, initially
  this field is set to null.
 @param errorHandler A new error handler to be set. This parameter can be null.
 */
- (void)setErrorHandlerWithOrgXmlSaxErrorHandler:(id<OrgXmlSaxErrorHandler>)errorHandler;

/*!
 @brief Set the value of a feature flag.
 <p>
  Feature can be used to control the way a <code>Validator</code>
  parses schemas, although <code>Validator</code>s are not required
  to recognize any specific property names.</p>
  
 <p>The feature name is any fully-qualified URI.  It is
  possible for a <code>Validator</code> to expose a feature value but
  to be unable to change the current value.
  Some feature values may be immutable or mutable only
  in specific contexts, such as before, during, or after
  a validation.</p>
 @param name The feature name, which is a non-null fully-qualified URI.
 @param value The requested value of the feature (true or false).
 @throw org.xml.sax.SAXNotRecognizedExceptionIf the feature
             value can't be assigned or retrieved.
 @throw org.xml.sax.SAXNotSupportedExceptionWhen the
             <code>Validator</code> recognizes the feature name but
             cannot set the requested value.
 @throw NullPointerException
 When the name parameter is null.
 - seealso: #getFeature(String)
 */
- (void)setFeatureWithNSString:(NSString *)name
                   withBoolean:(jboolean)value;

/*!
 @brief Set the value of a property.
 <p>The property name is any fully-qualified URI.  It is
  possible for a <code>Validator</code> to recognize a property name but
  to be unable to change the current value.
  Some property values may be immutable or mutable only
  in specific contexts, such as before, during, or after
  a validation.</p>
  
 <p><code>Validator</code>s are not required to recognize setting
  any specific property names.</p>
 @param name The property name, which is a non-null fully-qualified URI.
 @param object The requested value for the property.
 @throw org.xml.sax.SAXNotRecognizedExceptionIf the property
             value can't be assigned or retrieved.
 @throw org.xml.sax.SAXNotSupportedExceptionWhen the
             <code>Validator</code> recognizes the property name but
             cannot set the requested value.
 @throw NullPointerException
 When the name parameter is null.
 */
- (void)setPropertyWithNSString:(NSString *)name
                         withId:(id)object;

/*!
 @brief Sets the <code>LSResourceResolver</code> to customize
  resource resolution while in a validation episode.
 <p>
  <code>Validator</code> uses a <code>LSResourceResolver</code>
  when it needs to locate external resources while a validation,
  although exactly what constitutes "locating external resources" is
  up to each schema language. 
 <p>
  When the <code>LSResourceResolver</code> is null, the implementation will
  behave as if the following <code>LSResourceResolver</code> is set: 
 @code

  class DumbLSResourceResolver implements <code>LSResourceResolver</code> {
      public <code>org.w3c.dom.ls.LSInput</code> resolveResource(
          String publicId, String systemId, String baseURI) {
          return null; // always return null
      }    }    
  
@endcode
  
 <p>
  If a <code>LSResourceResolver</code> throws a <code>RuntimeException</code>
   (or instances of its derived classes),
  then the <code>Validator</code> will abort the parsing and
  the caller of the <code>validate</code> method will receive
  the same <code>RuntimeException</code>.
  
 <p>
  When a new <code>Validator</code> object is created, initially
  this field is set to null.
 @param resourceResolver A new resource resolver to be set. This parameter can be null.
 */
- (void)setResourceResolverWithOrgW3cDomLsLSResourceResolver:(id<OrgW3cDomLsLSResourceResolver>)resourceResolver;

/*!
 @brief Validates the specified input.
 <p>
  This is just a convenience method of: 
 @code

  validate(source,null); 
  
@endcode
 - seealso: #setErrorHandler(ErrorHandler)
 */
- (void)validateWithJavaxXmlTransformSource:(id<JavaxXmlTransformSource>)source;

/*!
 @brief Validates the specified input and send the augmented validation
  result to the specified output.
 <p>
  This method places the following restrictions on the types of the 
 <code>Source</code>/<code>Result</code> accepted. 
 <h4><code>Source</code>/<code>Result</code> accepted:</h4>
  <table border=1>
  <thead>
   <tr>
    <td></td>
    <td><code>javax.xml.transform.sax.SAXSource</code></td>
    <td><code>javax.xml.transform.dom.DOMSource</code></td>
    <td><code>javax.xml.transform.stream.StreamSource</code></td>
   </tr>
  </thead>
  <tbody>
   <tr>
    <td><tt>null</tt></td>
    <td>OK</td>
    <td>OK</td>
    <td>OK</td>
    <td>OK</td>
   </tr>
   <tr>
    <td><code>javax.xml.transform.sax.SAXResult</code></td>
    <td>OK</td>
    <td>Err</td>
    <td>Err</td>
    <td>Err</td>
   </tr>
   <tr>
    <td><code>javax.xml.transform.dom.DOMResult</code></td>
    <td>Err</td>
    <td>OK</td>
    <td>Err</td>
    <td>Err</td>
   </tr>
   <tr>
    <td><code>javax.xml.transform.stream.StreamResult</code></td>
    <td>Err</td>
    <td>Err</td>
    <td>Err</td>
    <td>OK</td>
   </tr>
  </tbody>
  </table>
  
 <p>
  To validate one <code>Source</code> into another kind of <code>Result</code>, use the identity transformer
  (see <code>javax.xml.transform.TransformerFactory.newTransformer()</code>).
  
 <p>
  Errors found during the validation is sent to the specified 
 <code>ErrorHandler</code>.
  
 <p>
  If a document is valid, or if a document contains some errors
  but none of them were fatal and the <code>ErrorHandler</code> didn't
  throw any exception, then the method returns normally.
 @param source XML to be validated. Must not be null.
 @param result The 
 <code>Result</code>  object that receives (possibly augmented)       XML. This parameter can be null if the caller is not interested
        in it.       Note that when a 
 <code>javax.xml.transform.dom.DOMResult</code>
   is used,       a validator might just pass the same DOM node from
        <code>javax.xml.transform.dom.DOMSource</code>
   to       <code>javax.xml.transform.dom.DOMResult</code>
        (in which case  <tt> source.getNode()==result.getNode()
  </tt> ),       it might copy the entire DOM tree, or it might alter the
        node given by the source.
 @throw IllegalArgumentException
 If the <code>Result</code> type doesn't match the <code>Source</code> type,
       or if the specified source is not a      
 <code>javax.xml.transform.sax.SAXSource</code>,
       <code>javax.xml.transform.dom.DOMSource</code> or
       <code>javax.xml.transform.stream.StreamSource</code>.
 @throw SAXException
 If the <code>ErrorHandler</code> throws a <code>SAXException</code> or
       if a fatal error is found and the <code>ErrorHandler</code> returns
       normally.
 @throw IOException
 If the validator is processing a
       <code>javax.xml.transform.sax.SAXSource</code> and the
       underlying <code>org.xml.sax.XMLReader</code> throws an
       <code>IOException</code>.
 @throw NullPointerException
 If the <tt>source</tt> parameter is null.
 - seealso: #validate(Source)
 */
- (void)validateWithJavaxXmlTransformSource:(id<JavaxXmlTransformSource>)source
                withJavaxXmlTransformResult:(id<JavaxXmlTransformResult>)result;

#pragma mark Protected

/*!
 @brief Constructor for derived classes.
 <p>
  The constructor does nothing. 
 <p>
  Derived classes must create <code>Validator</code> objects that have 
 <tt>null</tt> <code>ErrorHandler</code> and 
 <tt>null</tt> <code>LSResourceResolver</code>.
 */
- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxXmlValidationValidator)

FOUNDATION_EXPORT void JavaxXmlValidationValidator_init(JavaxXmlValidationValidator *self);

J2OBJC_TYPE_LITERAL_HEADER(JavaxXmlValidationValidator)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaxXmlValidationValidator")
