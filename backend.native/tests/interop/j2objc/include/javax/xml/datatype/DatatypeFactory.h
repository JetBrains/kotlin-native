//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/luni/src/main/java/javax/xml/datatype/DatatypeFactory.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxXmlDatatypeDatatypeFactory")
#ifdef RESTRICT_JavaxXmlDatatypeDatatypeFactory
#define INCLUDE_ALL_JavaxXmlDatatypeDatatypeFactory 0
#else
#define INCLUDE_ALL_JavaxXmlDatatypeDatatypeFactory 1
#endif
#undef RESTRICT_JavaxXmlDatatypeDatatypeFactory

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxXmlDatatypeDatatypeFactory_) && (INCLUDE_ALL_JavaxXmlDatatypeDatatypeFactory || defined(INCLUDE_JavaxXmlDatatypeDatatypeFactory))
#define JavaxXmlDatatypeDatatypeFactory_

@class JavaLangClassLoader;
@class JavaMathBigDecimal;
@class JavaMathBigInteger;
@class JavaUtilGregorianCalendar;
@class JavaxXmlDatatypeDuration;
@class JavaxXmlDatatypeXMLGregorianCalendar;

/*!
 @brief <p>Factory that creates new <code>javax.xml.datatype</code> <code>Object</code>s that map XML to/from Java <code>Object</code>s.
 </p>
  
 <p id="DatatypeFactory.newInstance"><code>newInstance()</code> is used to create a new <code>DatatypeFactory</code>.
  The following implementation resolution mechanisms are used in the following order:</p>
  <ol>
     <li>
       If the system property specified by <code>DATATYPEFACTORY_PROPERTY</code>, "<code>javax.xml.datatype.DatatypeFactory</code>",
       exists, a class with the name of the property's value is instantiated.
       Any Exception thrown during the instantiation process is wrapped as a <code>DatatypeConfigurationException</code>.
     </li>
     <li>
       If the file ${JAVA_HOME}/lib/jaxp.properties exists, it is loaded in a <code>java.util.Properties</code> <code>Object</code>.
       The <code>Properties</code> <code>Object </code> is then queried for the property as documented in the prior step
       and processed as documented in the prior step.    
 </li>
     <li>
       The services resolution mechanism is used, e.g. <code>META-INF/services/java.xml.datatype.DatatypeFactory</code>.
       Any Exception thrown during the instantiation process is wrapped as a <code>DatatypeConfigurationException</code>.
     </li>
     <li>
       The final mechanism is to attempt to instantiate the <code>Class</code> specified by
       <code>DATATYPEFACTORY_IMPLEMENTATION_CLASS</code>, "<code>javax.xml.datatype.DatatypeFactoryImpl</code>".
       Any Exception thrown during the instantiation process is wrapped as a <code>DatatypeConfigurationException</code>.
     </li>
  </ol>
  
 <p>Note that you must supply your own implementation (such as Xerces); Android does not ship with a default implementation.
 @author <a href="mailto:Joseph.Fialli@@Sun.COM">Joseph Fialli</a>
 @author <a href="mailto:Jeff.Suttor@@Sun.com">Jeff Suttor</a>
 @version $Revision: 884950 $, $Date: 2009-11-27 10:46:18 -0800 (Fri, 27 Nov 2009) $
 @since 1.5
 */
@interface JavaxXmlDatatypeDatatypeFactory : NSObject
@property (readonly, copy, class) NSString *DATATYPEFACTORY_PROPERTY NS_SWIFT_NAME(DATATYPEFACTORY_PROPERTY);
@property (readonly, copy, class) NSString *DATATYPEFACTORY_IMPLEMENTATION_CLASS NS_SWIFT_NAME(DATATYPEFACTORY_IMPLEMENTATION_CLASS);

+ (NSString *)DATATYPEFACTORY_PROPERTY;

+ (NSString *)DATATYPEFACTORY_IMPLEMENTATION_CLASS;

#pragma mark Public

/*!
 @brief <p>Obtain a new instance of a <code>Duration</code>
  specifying the <code>Duration</code> as isPositive, years, months, days, hours, minutes, seconds.
 </p>
  
 <p>The XML Schema specification states that values can be of an arbitrary size.
  Implementations may chose not to or be incapable of supporting arbitrarily large and/or small values.
  An <code>UnsupportedOperationException</code> will be thrown with a message indicating implementation limits
  if implementation capacities are exceeded.</p>
  
 <p>A <code>null</code> value indicates that field is not set.</p>
 @param isPositive Set to  <code> false </code>  to create a negative duration. When the length
     of the duration is zero, this parameter will be ignored.
 @param years of this  <code> Duration </code>
 @param months of this  <code> Duration </code>
 @param days of this  <code> Duration </code>
 @param hours of this  <code> Duration </code>
 @param minutes of this  <code> Duration </code>
 @param seconds of this  <code> Duration </code>
 @return New <code>Duration</code> created from the specified values.
 @throw IllegalArgumentExceptionIf values are not a valid representation of a <code>Duration</code>.
 @throw UnsupportedOperationExceptionIf implementation cannot support requested values.
 */
- (JavaxXmlDatatypeDuration *)newDurationWithBoolean:(jboolean)isPositive
                              withJavaMathBigInteger:(JavaMathBigInteger *)years
                              withJavaMathBigInteger:(JavaMathBigInteger *)months
                              withJavaMathBigInteger:(JavaMathBigInteger *)days
                              withJavaMathBigInteger:(JavaMathBigInteger *)hours
                              withJavaMathBigInteger:(JavaMathBigInteger *)minutes
                              withJavaMathBigDecimal:(JavaMathBigDecimal *)seconds OBJC_METHOD_FAMILY_NONE;

/*!
 @brief <p>Obtain a new instance of a <code>Duration</code>
  specifying the <code>Duration</code> as isPositive, years, months, days, hours, minutes, seconds.
 </p>
  
 <p>A <code>DatatypeConstants.FIELD_UNDEFINED</code> value indicates that field is not set.</p>
 @param isPositive Set to  <code> false </code>  to create a negative duration. When the length
     of the duration is zero, this parameter will be ignored.
 @param years of this  <code> Duration </code>
 @param months of this  <code> Duration </code>
 @param days of this  <code> Duration </code>
 @param hours of this  <code> Duration </code>
 @param minutes of this  <code> Duration </code>
 @param seconds of this  <code> Duration </code>
 @return New <code>Duration</code> created from the specified values.
 @throw IllegalArgumentExceptionIf values are not a valid representation of a <code>Duration</code>.
 - seealso: #newDuration(
   boolean isPositive,
   BigInteger years,
   BigInteger months,
   BigInteger days,
   BigInteger hours,
   BigInteger minutes,
   BigDecimal seconds)
 */
- (JavaxXmlDatatypeDuration *)newDurationWithBoolean:(jboolean)isPositive
                                             withInt:(jint)years
                                             withInt:(jint)months
                                             withInt:(jint)days
                                             withInt:(jint)hours
                                             withInt:(jint)minutes
                                             withInt:(jint)seconds OBJC_METHOD_FAMILY_NONE;

/*!
 @brief <p>Obtain a new instance of a <code>Duration</code>
  specifying the <code>Duration</code> as milliseconds.
 </p>
  
 <p>XML Schema Part 2: Datatypes, 3.2.6 duration, defines <code>duration</code> as:</p>
  <blockquote>
  duration represents a duration of time.
  The value space of duration is a six-dimensional space where the coordinates designate the
  Gregorian year, month, day, hour, minute, and second components defined in Section 5.5.3.2 of [ISO 8601], respectively.
  These components are ordered in their significance by their order of appearance i.e. as
  year, month, day, hour, minute, and second. 
 </blockquote>
  <p>All six values are set by computing their values from the specified milliseconds
  and are available using the <code>get</code> methods of  the created <code>Duration</code>.
  The values conform to and are defined by:</p>
  <ul>
    <li>ISO 8601:2000(E) Section 5.5.3.2 Alternative format</li>
    <li><a href="http://www.w3.org/TR/xmlschema-2/#isoformats">
      W3C XML Schema 1.0 Part 2, Appendix D, ISO 8601 Date and Time Formats</a>
    </li>
    <li><code>XMLGregorianCalendar</code>  Date/Time Datatype Field Mapping Between XML Schema 1.0 and Java Representation</li>
  </ul>
  
 <p>The default start instance is defined by <code>GregorianCalendar</code>'s use of the start of the epoch: i.e., 
 <code>java.util.Calendar.YEAR</code> = 1970, 
 <code>java.util.Calendar.MONTH</code> = <code>java.util.Calendar.JANUARY</code>,
  <code>java.util.Calendar.DATE</code> = 1, etc.
  This is important as there are variations in the Gregorian Calendar,
  e.g. leap years have different days in the month = <code>java.util.Calendar.FEBRUARY</code>
  so the result of <code>Duration.getMonths()</code> and <code>Duration.getDays()</code> can be influenced.</p>
 @param durationInMilliSeconds Duration in milliseconds to create.
 @return New <code>Duration</code> representing <code>durationInMilliSeconds</code>.
 */
- (JavaxXmlDatatypeDuration *)newDurationWithLong:(jlong)durationInMilliSeconds OBJC_METHOD_FAMILY_NONE;

/*!
 @brief <p>Obtain a new instance of a <code>Duration</code>
  specifying the <code>Duration</code> as its string representation, "PnYnMnDTnHnMnS",
  as defined in XML Schema 1.0 section 3.2.6.1.
 </p>
  
 <p>XML Schema Part 2: Datatypes, 3.2.6 duration, defines <code>duration</code> as:</p>
  <blockquote>
  duration represents a duration of time.
  The value space of duration is a six-dimensional space where the coordinates designate the
  Gregorian year, month, day, hour, minute, and second components defined in Section 5.5.3.2 of [ISO 8601], respectively.
  These components are ordered in their significance by their order of appearance i.e. as
  year, month, day, hour, minute, and second. 
 </blockquote>
  <p>All six values are set and available from the created <code>Duration</code></p>
  
 <p>The XML Schema specification states that values can be of an arbitrary size.
  Implementations may chose not to or be incapable of supporting arbitrarily large and/or small values.
  An <code>UnsupportedOperationException</code> will be thrown with a message indicating implementation limits
  if implementation capacities are exceeded.</p>
 @param lexicalRepresentation <code> String </code>  representation of a  <code> Duration </code>
  .
 @return New <code>Duration</code> created from parsing the <code>lexicalRepresentation</code>.
 @throw IllegalArgumentExceptionIf <code>lexicalRepresentation</code> is not a valid representation of a <code>Duration</code>.
 @throw UnsupportedOperationExceptionIf implementation cannot support requested values.
 @throw NullPointerExceptionif <code>lexicalRepresentation</code> is <code>null</code>.
 */
- (JavaxXmlDatatypeDuration *)newDurationWithNSString:(NSString *)lexicalRepresentation OBJC_METHOD_FAMILY_NONE;

/*!
 @brief <p>Create a <code>Duration</code> of type <code>xdt:dayTimeDuration</code> using the specified 
 <code>day</code>, <code>hour</code>, <code>minute</code> and <code>second</code> as defined in 
 <a href="http://www.w3.org/TR/xpath-datamodel#dt-dayTimeDuration">
    XQuery 1.0 and XPath 2.0 Data Model, xdt:dayTimeDuration</a>.
 </p>
  
 <p>The datatype <code>xdt:dayTimeDuration</code> is a subtype of <code>xs:duration</code>
  whose lexical representation contains only day, hour, minute, and second components.
  This datatype resides in the namespace <code>http://www.w3.org/2003/11/xpath-datatypes</code>.</p>
  
 <p>The XML Schema specification states that values can be of an arbitrary size.
  Implementations may chose not to or be incapable of supporting arbitrarily large and/or small values.
  An <code>UnsupportedOperationException</code> will be thrown with a message indicating implementation limits
  if implementation capacities are exceeded.</p>
  
 <p>A <code>null</code> value indicates that field is not set.</p>
 @param isPositive Set to  <code> false </code>  to create a negative duration. When the length
     of the duration is zero, this parameter will be ignored.
 @param day Day of  <code> Duration </code>
  .
 @param hour Hour of  <code> Duration </code>
  .
 @param minute Minute of  <code> Duration </code>
  .
 @param second Second of  <code> Duration </code>
  .
 @return New <code>Duration</code> created with the specified <code>day</code>, <code>hour</code>, <code>minute</code>
  and <code>second</code>.
 @throw IllegalArgumentExceptionIf any values would create an invalid <code>Duration</code>.
 @throw UnsupportedOperationExceptionIf implementation cannot support requested values.
 */
- (JavaxXmlDatatypeDuration *)newDurationDayTimeWithBoolean:(jboolean)isPositive
                                     withJavaMathBigInteger:(JavaMathBigInteger *)day
                                     withJavaMathBigInteger:(JavaMathBigInteger *)hour
                                     withJavaMathBigInteger:(JavaMathBigInteger *)minute
                                     withJavaMathBigInteger:(JavaMathBigInteger *)second OBJC_METHOD_FAMILY_NONE;

/*!
 @brief <p>Create a <code>Duration</code> of type <code>xdt:dayTimeDuration</code> using the specified 
 <code>day</code>, <code>hour</code>, <code>minute</code> and <code>second</code> as defined in 
 <a href="http://www.w3.org/TR/xpath-datamodel#dt-dayTimeDuration">
    XQuery 1.0 and XPath 2.0 Data Model, xdt:dayTimeDuration</a>.
 </p>
  
 <p>The datatype <code>xdt:dayTimeDuration</code> is a subtype of <code>xs:duration</code>
  whose lexical representation contains only day, hour, minute, and second components.
  This datatype resides in the namespace <code>http://www.w3.org/2003/11/xpath-datatypes</code>.</p>
  
 <p>A <code>DatatypeConstants.FIELD_UNDEFINED</code> value indicates that field is not set.</p>
 @param isPositive Set to  <code> false </code>  to create a negative duration. When the length
     of the duration is zero, this parameter will be ignored.
 @param day Day of  <code> Duration </code>
  .
 @param hour Hour of  <code> Duration </code>
  .
 @param minute Minute of  <code> Duration </code>
  .
 @param second Second of  <code> Duration </code>
  .
 @return New <code>Duration</code> created with the specified <code>day</code>, <code>hour</code>, <code>minute</code>
  and <code>second</code>.
 @throw IllegalArgumentExceptionIf any values would create an invalid <code>Duration</code>.
 */
- (JavaxXmlDatatypeDuration *)newDurationDayTimeWithBoolean:(jboolean)isPositive
                                                    withInt:(jint)day
                                                    withInt:(jint)hour
                                                    withInt:(jint)minute
                                                    withInt:(jint)second OBJC_METHOD_FAMILY_NONE;

/*!
 @brief <p>Create a <code>Duration</code> of type <code>xdt:dayTimeDuration</code> using the specified milliseconds as defined in 
 <a href="http://www.w3.org/TR/xpath-datamodel#dt-dayTimeDuration">
    XQuery 1.0 and XPath 2.0 Data Model, xdt:dayTimeDuration</a>.
 </p>
  
 <p>The datatype <code>xdt:dayTimeDuration</code> is a subtype of <code>xs:duration</code>
  whose lexical representation contains only day, hour, minute, and second components.
  This datatype resides in the namespace <code>http://www.w3.org/2003/11/xpath-datatypes</code>.</p>
  
 <p>All four values are set by computing their values from the specified milliseconds
  and are available using the <code>get</code> methods of  the created <code>Duration</code>.
  The values conform to and are defined by:</p>
  <ul>
    <li>ISO 8601:2000(E) Section 5.5.3.2 Alternative format</li>
    <li><a href="http://www.w3.org/TR/xmlschema-2/#isoformats">
      W3C XML Schema 1.0 Part 2, Appendix D, ISO 8601 Date and Time Formats</a>
    </li>
    <li><code>XMLGregorianCalendar</code>  Date/Time Datatype Field Mapping Between XML Schema 1.0 and Java Representation</li>
  </ul>
  
 <p>The default start instance is defined by <code>GregorianCalendar</code>'s use of the start of the epoch: i.e., 
 <code>java.util.Calendar.YEAR</code> = 1970, 
 <code>java.util.Calendar.MONTH</code> = <code>java.util.Calendar.JANUARY</code>,
  <code>java.util.Calendar.DATE</code> = 1, etc.
  This is important as there are variations in the Gregorian Calendar,
  e.g. leap years have different days in the month = <code>java.util.Calendar.FEBRUARY</code>
  so the result of <code>Duration.getDays()</code> can be influenced.</p>
  
 <p>Any remaining milliseconds after determining the day, hour, minute and second are discarded.</p>
 @param durationInMilliseconds Milliseconds of  <code> Duration </code>  to create.
 @return New <code>Duration</code> created with the specified <code>durationInMilliseconds</code>.
 - seealso: <a href="http://www.w3.org/TR/xpath-datamodel#dt-dayTimeDuration">
    XQuery 1.0 and XPath 2.0 Data Model, xdt:dayTimeDuration</a>
 */
- (JavaxXmlDatatypeDuration *)newDurationDayTimeWithLong:(jlong)durationInMilliseconds OBJC_METHOD_FAMILY_NONE;

/*!
 @brief <p>Create a <code>Duration</code> of type <code>xdt:dayTimeDuration</code> by parsing its <code>String</code> representation,
  "<em>PnDTnHnMnS</em>", <a href="http://www.w3.org/TR/xpath-datamodel#dt-dayTimeDuration">
    XQuery 1.0 and XPath 2.0 Data Model, xdt:dayTimeDuration</a>.
 </p>
  
 <p>The datatype <code>xdt:dayTimeDuration</code> is a subtype of <code>xs:duration</code>
  whose lexical representation contains only day, hour, minute, and second components.
  This datatype resides in the namespace <code>http://www.w3.org/2003/11/xpath-datatypes</code>.</p>
  
 <p>All four values are set and available from the created <code>Duration</code></p>
  
 <p>The XML Schema specification states that values can be of an arbitrary size.
  Implementations may chose not to or be incapable of supporting arbitrarily large and/or small values.
  An <code>UnsupportedOperationException</code> will be thrown with a message indicating implementation limits
  if implementation capacities are exceeded.</p>
 @param lexicalRepresentation Lexical representation of a duration.
 @return New <code>Duration</code> created using the specified <code>lexicalRepresentation</code>.
 @throw IllegalArgumentExceptionIf the given string does not conform to the aforementioned specification.
 @throw UnsupportedOperationExceptionIf implementation cannot support requested values.
 @throw NullPointerExceptionIf <code>lexicalRepresentation</code> is <code>null</code>.
 */
- (JavaxXmlDatatypeDuration *)newDurationDayTimeWithNSString:(NSString *)lexicalRepresentation OBJC_METHOD_FAMILY_NONE;

/*!
 @brief <p>Create a <code>Duration</code> of type <code>xdt:yearMonthDuration</code> using the specified 
 <code>year</code> and <code>month</code> as defined in 
 <a href="http://www.w3.org/TR/xpath-datamodel#dt-yearMonthyDuration">
    XQuery 1.0 and XPath 2.0 Data Model, xdt:yearMonthDuration</a>.
 </p>
  
 <p>The XML Schema specification states that values can be of an arbitrary size.
  Implementations may chose not to or be incapable of supporting arbitrarily large and/or small values.
  An <code>UnsupportedOperationException</code> will be thrown with a message indicating implementation limits
  if implementation capacities are exceeded.</p>
  
 <p>A <code>null</code> value indicates that field is not set.</p>
 @param isPositive Set to  <code> false </code>  to create a negative duration. When the length
     of the duration is zero, this parameter will be ignored.
 @param year Year of  <code> Duration </code>
  .
 @param month Month of  <code> Duration </code>
  .
 @return New <code>Duration</code> created using the specified <code>year</code> and <code>month</code>.
 @throw IllegalArgumentExceptionIf any values would create an invalid <code>Duration</code>.
 @throw UnsupportedOperationExceptionIf implementation cannot support requested values.
 */
- (JavaxXmlDatatypeDuration *)newDurationYearMonthWithBoolean:(jboolean)isPositive
                                       withJavaMathBigInteger:(JavaMathBigInteger *)year
                                       withJavaMathBigInteger:(JavaMathBigInteger *)month OBJC_METHOD_FAMILY_NONE;

/*!
 @brief <p>Create a <code>Duration</code> of type <code>xdt:yearMonthDuration</code> using the specified 
 <code>year</code> and <code>month</code> as defined in 
 <a href="http://www.w3.org/TR/xpath-datamodel#dt-yearMonthyDuration">
    XQuery 1.0 and XPath 2.0 Data Model, xdt:yearMonthDuration</a>.
 </p>
  
 <p>A <code>DatatypeConstants.FIELD_UNDEFINED</code> value indicates that field is not set.</p>
 @param isPositive Set to  <code> false </code>  to create a negative duration. When the length
     of the duration is zero, this parameter will be ignored.
 @param year Year of  <code> Duration </code>
  .
 @param month Month of  <code> Duration </code>
  .
 @return New <code>Duration</code> created using the specified <code>year</code> and <code>month</code>.
 @throw IllegalArgumentExceptionIf any values would create an invalid <code>Duration</code>.
 */
- (JavaxXmlDatatypeDuration *)newDurationYearMonthWithBoolean:(jboolean)isPositive
                                                      withInt:(jint)year
                                                      withInt:(jint)month OBJC_METHOD_FAMILY_NONE;

/*!
 @brief <p>Create a <code>Duration</code> of type <code>xdt:yearMonthDuration</code> using the specified milliseconds as defined in 
 <a href="http://www.w3.org/TR/xpath-datamodel#dt-yearMonthDuration">
    XQuery 1.0 and XPath 2.0 Data Model, xdt:yearMonthDuration</a>.
 </p>
  
 <p>The datatype <code>xdt:yearMonthDuration</code> is a subtype of <code>xs:duration</code>
  whose lexical representation contains only year and month components.
  This datatype resides in the namespace <code>javax.xml.XMLConstants.W3C_XPATH_DATATYPE_NS_URI</code>.</p>
  
 <p>Both values are set by computing their values from the specified milliseconds
  and are available using the <code>get</code> methods of  the created <code>Duration</code>.
  The values conform to and are defined by:</p>
  <ul>
    <li>ISO 8601:2000(E) Section 5.5.3.2 Alternative format</li>
    <li><a href="http://www.w3.org/TR/xmlschema-2/#isoformats">
      W3C XML Schema 1.0 Part 2, Appendix D, ISO 8601 Date and Time Formats</a>
    </li>
    <li><code>XMLGregorianCalendar</code>  Date/Time Datatype Field Mapping Between XML Schema 1.0 and Java Representation</li>
  </ul>
  
 <p>The default start instance is defined by <code>GregorianCalendar</code>'s use of the start of the epoch: i.e., 
 <code>java.util.Calendar.YEAR</code> = 1970, 
 <code>java.util.Calendar.MONTH</code> = <code>java.util.Calendar.JANUARY</code>,
  <code>java.util.Calendar.DATE</code> = 1, etc.
  This is important as there are variations in the Gregorian Calendar,
  e.g. leap years have different days in the month = <code>java.util.Calendar.FEBRUARY</code>
  so the result of <code>Duration.getMonths()</code> can be influenced.</p>
  
 <p>Any remaining milliseconds after determining the year and month are discarded.</p>
 @param durationInMilliseconds Milliseconds of  <code> Duration </code>  to create.
 @return New <code>Duration</code> created using the specified <code>durationInMilliseconds</code>.
 */
- (JavaxXmlDatatypeDuration *)newDurationYearMonthWithLong:(jlong)durationInMilliseconds OBJC_METHOD_FAMILY_NONE;

/*!
 @brief <p>Create a <code>Duration</code> of type <code>xdt:yearMonthDuration</code> by parsing its <code>String</code> representation,
  "<em>PnYnM</em>", <a href="http://www.w3.org/TR/xpath-datamodel#dt-yearMonthDuration">
    XQuery 1.0 and XPath 2.0 Data Model, xdt:yearMonthDuration</a>.
 </p>
  
 <p>The datatype <code>xdt:yearMonthDuration</code> is a subtype of <code>xs:duration</code>
  whose lexical representation contains only year and month components.
  This datatype resides in the namespace <code>javax.xml.XMLConstants.W3C_XPATH_DATATYPE_NS_URI</code>.</p>
  
 <p>Both values are set and available from the created <code>Duration</code></p>
  
 <p>The XML Schema specification states that values can be of an arbitrary size.
  Implementations may chose not to or be incapable of supporting arbitrarily large and/or small values.
  An <code>UnsupportedOperationException</code> will be thrown with a message indicating implementation limits
  if implementation capacities are exceeded.</p>
 @param lexicalRepresentation Lexical representation of a duration.
 @return New <code>Duration</code> created using the specified <code>lexicalRepresentation</code>.
 @throw IllegalArgumentExceptionIf the <code>lexicalRepresentation</code> does not conform to the specification.
 @throw UnsupportedOperationExceptionIf implementation cannot support requested values.
 @throw NullPointerExceptionIf <code>lexicalRepresentation</code> is <code>null</code>.
 */
- (JavaxXmlDatatypeDuration *)newDurationYearMonthWithNSString:(NSString *)lexicalRepresentation OBJC_METHOD_FAMILY_NONE;

/*!
 @brief <p>Obtain a new instance of a <code>DatatypeFactory</code>.
 </p>
  
 <p>The implementation resolution mechanisms are <a href="#DatatypeFactory.newInstance">defined</a> in this 
 <code>Class</code>'s documentation.</p>
  <p>Note that you must supply your own implementation (such as Xerces); Android does not ship with a default implementation.
 @return New instance of a <code>DocumentBuilderFactory</code>
 @throw DatatypeConfigurationExceptionIf the implementation is not
    available or cannot be instantiated.
 */
+ (JavaxXmlDatatypeDatatypeFactory *)newInstance OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns an instance of the named implementation of <code>DatatypeFactory</code>.
 @throw DatatypeConfigurationExceptionif <code>factoryClassName</code> is not available or cannot
      be instantiated.
 @since 1.6
 */
+ (JavaxXmlDatatypeDatatypeFactory *)newInstanceWithNSString:(NSString *)factoryClassName
                                     withJavaLangClassLoader:(JavaLangClassLoader *)classLoader OBJC_METHOD_FAMILY_NONE;

/*!
 @brief <p>Create a new instance of an <code>XMLGregorianCalendar</code>.
 </p>
  
 <p>All date/time datatype fields set to <code>DatatypeConstants.FIELD_UNDEFINED</code> or null.</p>
 @return New <code>XMLGregorianCalendar</code> with all date/time datatype fields set to
    <code>DatatypeConstants.FIELD_UNDEFINED</code> or null.
 */
- (JavaxXmlDatatypeXMLGregorianCalendar *)newXMLGregorianCalendar OBJC_METHOD_FAMILY_NONE;

/*!
 @brief <p>Constructor allowing for complete value spaces allowed by
  W3C XML Schema 1.0 recommendation for xsd:dateTime and related
  builtin datatypes.
 Note that <code>year</code> parameter supports
  arbitrarily large numbers and fractionalSecond has infinite
  precision.</p>
  
 <p>A <code>null</code> value indicates that field is not set.</p>
 @param year of  <code> XMLGregorianCalendar </code>  to be created.
 @param month of  <code> XMLGregorianCalendar </code>  to be created.
 @param day of  <code> XMLGregorianCalendar </code>  to be created.
 @param hour of  <code> XMLGregorianCalendar </code>  to be created.
 @param minute of  <code> XMLGregorianCalendar </code>  to be created.
 @param second of  <code> XMLGregorianCalendar </code>  to be created.
 @param fractionalSecond of  <code> XMLGregorianCalendar </code>  to be created.
 @param timezone of  <code> XMLGregorianCalendar </code>  to be created.
 @return <code>XMLGregorianCalendar</code> created from specified values.
 @throw IllegalArgumentExceptionIf any individual parameter's value is outside the maximum value constraint for the field
    as determined by the Date/Time Data Mapping table in <code>XMLGregorianCalendar</code>
    or if the composite values constitute an invalid <code>XMLGregorianCalendar</code> instance
    as determined by <code>XMLGregorianCalendar.isValid()</code>.
 */
- (JavaxXmlDatatypeXMLGregorianCalendar *)newXMLGregorianCalendarWithJavaMathBigInteger:(JavaMathBigInteger *)year
                                                                                withInt:(jint)month
                                                                                withInt:(jint)day
                                                                                withInt:(jint)hour
                                                                                withInt:(jint)minute
                                                                                withInt:(jint)second
                                                                 withJavaMathBigDecimal:(JavaMathBigDecimal *)fractionalSecond
                                                                                withInt:(jint)timezone OBJC_METHOD_FAMILY_NONE;

/*!
 @brief <p>Create an <code>XMLGregorianCalendar</code> from a <code>GregorianCalendar</code>.
 </p>
  
 <table border="2" rules="all" cellpadding="2">
    <thead>
      <tr>
        <th align="center" colspan="2">
           Field by Field Conversion from          
 <code>GregorianCalendar</code> to an <code>XMLGregorianCalendar</code>
        </th>
      </tr>
      <tr>
         <th><code>java.util.GregorianCalendar</code> field</th>
         <th><code>javax.xml.datatype.XMLGregorianCalendar</code> field</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><code>ERA == GregorianCalendar.BC ? -YEAR : YEAR</code></td>
        <td><code>XMLGregorianCalendar.setYear(int year)</code></td>
      </tr>
      <tr>
        <td><code>MONTH + 1</code></td>
        <td><code>XMLGregorianCalendar.setMonth(int month)</code></td>
      </tr>
      <tr>
        <td><code>DAY_OF_MONTH</code></td>
        <td><code>XMLGregorianCalendar.setDay(int day)</code></td>
      </tr>
      <tr>
        <td><code>HOUR_OF_DAY, MINUTE, SECOND, MILLISECOND</code></td>
        <td><code>XMLGregorianCalendar.setTime(int hour, int minute, int second, BigDecimal fractional)</code></td>
      </tr>
      <tr>
        <td>
          <code>(ZONE_OFFSET + DST_OFFSET) / (60*1000)</code><br>
          <em>(in minutes)</em>
        </td>
        <td><code>XMLGregorianCalendar.setTimezone(int offset)</code><sup><em>
 *</em></sup>       </td>
      </tr>
    </tbody>
  </table>
  <p><em>
 *</em>conversion loss of information. It is not possible to represent a <code>java.util.GregorianCalendar</code> daylight savings timezone id in the
  XML Schema 1.0 date/time datatype representation.</p>
  
 <p>To compute the return value's <code>TimeZone</code> field, 
 <ul>
  <li>when <code>this.getTimezone() != FIELD_UNDEFINED</code>,
  create a <code>java.util.TimeZone</code> with a custom timezone id
  using the <code>this.getTimezone()</code>.</li>
  <li>else use the <code>GregorianCalendar</code> default timezone value
  for the host is defined as specified by 
 <code>java.util.TimeZone.getDefault()</code>.</li></p>
 @param cal <code> java.util.GregorianCalendar </code>  used to create  <code> XMLGregorianCalendar </code>
 @return <code>XMLGregorianCalendar</code> created from <code>java.util.GregorianCalendar</code>
 @throw NullPointerExceptionIf <code>cal</code> is <code>null</code>.
 */
- (JavaxXmlDatatypeXMLGregorianCalendar *)newXMLGregorianCalendarWithJavaUtilGregorianCalendar:(JavaUtilGregorianCalendar *)cal OBJC_METHOD_FAMILY_NONE;

/*!
 @brief <p>Constructor of value spaces that a 
 <code>java.util.GregorianCalendar</code> instance would need to convert to an 
 <code>XMLGregorianCalendar</code> instance.
 </p>
  
 <p><code>XMLGregorianCalendar eon</code> and 
 <code>fractionalSecond</code> are set to <code>null</code></p>
  
 <p>A <code>DatatypeConstants.FIELD_UNDEFINED</code> value indicates that field is not set.</p>
 @param year of  <code> XMLGregorianCalendar </code>  to be created.
 @param month of  <code> XMLGregorianCalendar </code>  to be created.
 @param day of  <code> XMLGregorianCalendar </code>  to be created.
 @param hour of  <code> XMLGregorianCalendar </code>  to be created.
 @param minute of  <code> XMLGregorianCalendar </code>  to be created.
 @param second of  <code> XMLGregorianCalendar </code>  to be created.
 @param millisecond of  <code> XMLGregorianCalendar </code>  to be created.
 @param timezone of  <code> XMLGregorianCalendar </code>  to be created.
 @return <code>XMLGregorianCalendar</code> created from specified values.
 @throw IllegalArgumentExceptionIf any individual parameter's value is outside the maximum value constraint for the field
    as determined by the Date/Time Data Mapping table in <code>XMLGregorianCalendar</code>
    or if the composite values constitute an invalid <code>XMLGregorianCalendar</code> instance
    as determined by <code>XMLGregorianCalendar.isValid()</code>.
 */
- (JavaxXmlDatatypeXMLGregorianCalendar *)newXMLGregorianCalendarWithInt:(jint)year
                                                                 withInt:(jint)month
                                                                 withInt:(jint)day
                                                                 withInt:(jint)hour
                                                                 withInt:(jint)minute
                                                                 withInt:(jint)second
                                                                 withInt:(jint)millisecond
                                                                 withInt:(jint)timezone OBJC_METHOD_FAMILY_NONE;

/*!
 @brief <p>Create a new XMLGregorianCalendar by parsing the String as a lexical representation.
 </p>
  
 <p>Parsing the lexical string representation is defined in 
 <a href="http://www.w3.org/TR/xmlschema-2/#dateTime-order">XML Schema 1.0 Part 2, Section 3.2.[7-14].1, 
 <em>Lexical Representation</em>.</a></p>
  
 <p>The string representation may not have any leading and trailing whitespaces.</p>
  
 <p>The parsing is done field by field so that
  the following holds for any lexically correct String x:</p>
  @code

  newXMLGregorianCalendar(x).toXMLFormat().equals(x) 
  
@endcode
  <p>Except for the noted lexical/canonical representation mismatches
  listed in <a href="http://www.w3.org/2001/05/xmlschema-errata#e2-45">
  XML Schema 1.0 errata, Section 3.2.7.2</a>.</p>
 @param lexicalRepresentation Lexical representation of one the eight XML Schema date/time datatypes.
 @return <code>XMLGregorianCalendar</code> created from the <code>lexicalRepresentation</code>.
 @throw IllegalArgumentExceptionIf the <code>lexicalRepresentation</code> is not a valid <code>XMLGregorianCalendar</code>.
 @throw NullPointerExceptionIf <code>lexicalRepresentation</code> is <code>null</code>.
 */
- (JavaxXmlDatatypeXMLGregorianCalendar *)newXMLGregorianCalendarWithNSString:(NSString *)lexicalRepresentation OBJC_METHOD_FAMILY_NONE;

/*!
 @brief <p>Create a Java representation of XML Schema builtin datatype <code>date</code> or <code>g*</code>.
 </p>
  
 <p>For example, an instance of <code>gYear</code> can be created invoking this factory
  with <code>month</code> and <code>day</code> parameters set to 
 <code>DatatypeConstants.FIELD_UNDEFINED</code>.</p>
  
 <p>A <code>DatatypeConstants.FIELD_UNDEFINED</code> value indicates that field is not set.</p>
 @param year of  <code> XMLGregorianCalendar </code>  to be created.
 @param month of  <code> XMLGregorianCalendar </code>  to be created.
 @param day of  <code> XMLGregorianCalendar </code>  to be created.
 @param timezone offset in minutes. <code>DatatypeConstants.FIELD_UNDEFINED</code>  indicates optional field is not set.
 @return <code>XMLGregorianCalendar</code> created from parameter values.
 - seealso: DatatypeConstants#FIELD_UNDEFINED
 @throw IllegalArgumentExceptionIf any individual parameter's value is outside the maximum value constraint for the field
    as determined by the Date/Time Data Mapping table in <code>XMLGregorianCalendar</code>
    or if the composite values constitute an invalid <code>XMLGregorianCalendar</code> instance
    as determined by <code>XMLGregorianCalendar.isValid()</code>.
 */
- (JavaxXmlDatatypeXMLGregorianCalendar *)newXMLGregorianCalendarDateWithInt:(jint)year
                                                                     withInt:(jint)month
                                                                     withInt:(jint)day
                                                                     withInt:(jint)timezone OBJC_METHOD_FAMILY_NONE;

/*!
 @brief <p>Create a Java instance of XML Schema builtin datatype time.
 </p>
  
 <p>A <code>null</code> value indicates that field is not set.</p>
  <p>A <code>DatatypeConstants.FIELD_UNDEFINED</code> value indicates that field is not set.</p>
 @param hours number of hours
 @param minutes number of minutes
 @param seconds number of seconds
 @param fractionalSecond value of  <code> null </code>  indicates that this optional field is not set.
 @param timezone offset in minutes. <code>DatatypeConstants.FIELD_UNDEFINED</code>  indicates optional field is not set.
 @return <code>XMLGregorianCalendar</code> created from parameter values.
 - seealso: DatatypeConstants#FIELD_UNDEFINED
 @throw IllegalArgumentExceptionIf any individual parameter's value is outside the maximum value constraint for the field
    as determined by the Date/Time Data Mapping table in <code>XMLGregorianCalendar</code>
    or if the composite values constitute an invalid <code>XMLGregorianCalendar</code> instance
    as determined by <code>XMLGregorianCalendar.isValid()</code>.
 */
- (JavaxXmlDatatypeXMLGregorianCalendar *)newXMLGregorianCalendarTimeWithInt:(jint)hours
                                                                     withInt:(jint)minutes
                                                                     withInt:(jint)seconds
                                                      withJavaMathBigDecimal:(JavaMathBigDecimal *)fractionalSecond
                                                                     withInt:(jint)timezone OBJC_METHOD_FAMILY_NONE;

/*!
 @brief <p>Create a Java instance of XML Schema builtin datatype <code>time</code>.
 </p>
  
 <p>A <code>DatatypeConstants.FIELD_UNDEFINED</code> value indicates that field is not set.</p>
 @param hours number of hours
 @param minutes number of minutes
 @param seconds number of seconds
 @param timezone offset in minutes. <code>DatatypeConstants.FIELD_UNDEFINED</code>  indicates optional field is not set.
 @return <code>XMLGregorianCalendar</code> created from parameter values.
 @throw IllegalArgumentExceptionIf any individual parameter's value is outside the maximum value constraint for the field
    as determined by the Date/Time Data Mapping table in <code>XMLGregorianCalendar</code>
    or if the composite values constitute an invalid <code>XMLGregorianCalendar</code> instance
    as determined by <code>XMLGregorianCalendar.isValid()</code>.
 - seealso: DatatypeConstants#FIELD_UNDEFINED
 */
- (JavaxXmlDatatypeXMLGregorianCalendar *)newXMLGregorianCalendarTimeWithInt:(jint)hours
                                                                     withInt:(jint)minutes
                                                                     withInt:(jint)seconds
                                                                     withInt:(jint)timezone OBJC_METHOD_FAMILY_NONE;

/*!
 @brief <p>Create a Java instance of XML Schema builtin datatype time.
 </p>
  
 <p>A <code>DatatypeConstants.FIELD_UNDEFINED</code> value indicates that field is not set.</p>
 @param hours number of hours
 @param minutes number of minutes
 @param seconds number of seconds
 @param milliseconds number of milliseconds
 @param timezone offset in minutes. <code>DatatypeConstants.FIELD_UNDEFINED</code>  indicates optional field is not set.
 @return <code>XMLGregorianCalendar</code> created from parameter values.
 - seealso: DatatypeConstants#FIELD_UNDEFINED
 @throw IllegalArgumentExceptionIf any individual parameter's value is outside the maximum value constraint for the field
    as determined by the Date/Time Data Mapping table in <code>XMLGregorianCalendar</code>
    or if the composite values constitute an invalid <code>XMLGregorianCalendar</code> instance
    as determined by <code>XMLGregorianCalendar.isValid()</code>.
 */
- (JavaxXmlDatatypeXMLGregorianCalendar *)newXMLGregorianCalendarTimeWithInt:(jint)hours
                                                                     withInt:(jint)minutes
                                                                     withInt:(jint)seconds
                                                                     withInt:(jint)milliseconds
                                                                     withInt:(jint)timezone OBJC_METHOD_FAMILY_NONE;

#pragma mark Protected

/*!
 @brief <p>Protected constructor to prevent instantiation outside of package.
 </p>
  
 <p>Use <code>newInstance()</code> to create a <code>DatatypeFactory</code>.</p>
 */
- (instancetype __nonnull)init;

@end

J2OBJC_STATIC_INIT(JavaxXmlDatatypeDatatypeFactory)

/*!
 @brief <p>Default property name as defined in JSR 206: Java(TM) API for XML Processing (JAXP) 1.3.
 </p>
  
 <p>Default value is <code>javax.xml.datatype.DatatypeFactory</code>.</p>
 */
inline NSString *JavaxXmlDatatypeDatatypeFactory_get_DATATYPEFACTORY_PROPERTY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *JavaxXmlDatatypeDatatypeFactory_DATATYPEFACTORY_PROPERTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaxXmlDatatypeDatatypeFactory, DATATYPEFACTORY_PROPERTY, NSString *)

/*!
 @brief <p>Default implementation class name as defined in JSR 206: Java(TM) API for XML Processing (JAXP) 1.3.
 </p>
  
 <p>Default value is <code>org.apache.xerces.jaxp.datatype.DatatypeFactoryImpl</code>.</p>
 */
inline NSString *JavaxXmlDatatypeDatatypeFactory_get_DATATYPEFACTORY_IMPLEMENTATION_CLASS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *JavaxXmlDatatypeDatatypeFactory_DATATYPEFACTORY_IMPLEMENTATION_CLASS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaxXmlDatatypeDatatypeFactory, DATATYPEFACTORY_IMPLEMENTATION_CLASS, NSString *)

FOUNDATION_EXPORT void JavaxXmlDatatypeDatatypeFactory_init(JavaxXmlDatatypeDatatypeFactory *self);

FOUNDATION_EXPORT JavaxXmlDatatypeDatatypeFactory *JavaxXmlDatatypeDatatypeFactory_newInstance(void);

FOUNDATION_EXPORT JavaxXmlDatatypeDatatypeFactory *JavaxXmlDatatypeDatatypeFactory_newInstanceWithNSString_withJavaLangClassLoader_(NSString *factoryClassName, JavaLangClassLoader *classLoader);

J2OBJC_TYPE_LITERAL_HEADER(JavaxXmlDatatypeDatatypeFactory)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaxXmlDatatypeDatatypeFactory")
