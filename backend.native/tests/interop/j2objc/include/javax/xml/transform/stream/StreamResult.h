//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/luni/src/main/java/javax/xml/transform/stream/StreamResult.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxXmlTransformStreamStreamResult")
#ifdef RESTRICT_JavaxXmlTransformStreamStreamResult
#define INCLUDE_ALL_JavaxXmlTransformStreamStreamResult 0
#else
#define INCLUDE_ALL_JavaxXmlTransformStreamStreamResult 1
#endif
#undef RESTRICT_JavaxXmlTransformStreamStreamResult

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxXmlTransformStreamStreamResult_) && (INCLUDE_ALL_JavaxXmlTransformStreamStreamResult || defined(INCLUDE_JavaxXmlTransformStreamStreamResult))
#define JavaxXmlTransformStreamStreamResult_

#define RESTRICT_JavaxXmlTransformResult 1
#define INCLUDE_JavaxXmlTransformResult 1
#include "javax/xml/transform/Result.h"

@class JavaIoFile;
@class JavaIoOutputStream;
@class JavaIoWriter;

/*!
 @brief <p>Acts as an holder for a transformation result,
  which may be XML, plain Text, HTML, or some other form of markup.
 </p>
 @author <a href="Jeff.Suttor@@Sun.com">Jeff Suttor</a>
 */
@interface JavaxXmlTransformStreamStreamResult : NSObject < JavaxXmlTransformResult >
@property (readonly, copy, class) NSString *FEATURE NS_SWIFT_NAME(FEATURE);

+ (NSString *)FEATURE;

#pragma mark Public

/*!
 @brief Zero-argument default constructor.
 */
- (instancetype __nonnull)init;

/*!
 @brief Construct a StreamResult from a File.
 @param f Must a non-null File reference.
 */
- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)f;

/*!
 @brief Construct a StreamResult from a byte stream.Normally,
  a stream should be used rather than a reader, so that
  the transformer may use instructions contained in the
  transformation instructions to control the encoding.
 @param outputStream A valid OutputStream reference.
 */
- (instancetype __nonnull)initWithJavaIoOutputStream:(JavaIoOutputStream *)outputStream;

/*!
 @brief Construct a StreamResult from a URL.
 @param systemId Must be a String that conforms to the URI syntax.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)systemId;

/*!
 @brief Construct a StreamResult from a character stream.Normally,
  a stream should be used rather than a reader, so that
  the transformer may use instructions contained in the
  transformation instructions to control the encoding.
 However,
  there are times when it is useful to write to a character
  stream, such as when using a StringWriter.
 @param writer A valid Writer reference.
 */
- (instancetype __nonnull)initWithJavaIoWriter:(JavaIoWriter *)writer;

/*!
 @brief Get the byte stream that was set with setOutputStream.
 @return The byte stream that was set with setOutputStream, or null
  if setOutputStream or the ByteStream constructor was not called.
 */
- (JavaIoOutputStream *)getOutputStream;

/*!
 @brief Get the system identifier that was set with setSystemId.
 @return The system identifier that was set with setSystemId, or null
  if setSystemId was not called.
 */
- (NSString *)getSystemId;

/*!
 @brief Get the character stream that was set with setWriter.
 @return The character stream that was set with setWriter, or null
  if setWriter or the Writer constructor was not called.
 */
- (JavaIoWriter *)getWriter;

/*!
 @brief Set the ByteStream that is to be written to.Normally,
  a stream should be used rather than a reader, so that
  the transformer may use instructions contained in the
  transformation instructions to control the encoding.
 @param outputStream A valid OutputStream reference.
 */
- (void)setOutputStreamWithJavaIoOutputStream:(JavaIoOutputStream *)outputStream;

/*!
 @brief <p>Set the system ID from a <code>File</code> reference.
 </p>
  
 <p>Note the use of <code>File.toURI()</code> and <code>File.toURL()</code>.
  <code>toURI()</code> is preferred and used if possible.
  To allow JAXP 1.3 to run on J2SE 1.3, <code>toURL()</code>
  is used if a <code>NoSuchMethodException</code> is thrown by the attempt
  to use <code>toURI()</code>.</p>
 @param f Must a non-null File reference.
 */
- (void)setSystemIdWithJavaIoFile:(JavaIoFile *)f;

/*!
 @brief Set the systemID that may be used in association
  with the byte or character stream, or, if neither is set, use
  this value as a writeable URI (probably a file name).
 @param systemId The system identifier as a URI string.
 */
- (void)setSystemIdWithNSString:(NSString *)systemId;

/*!
 @brief Set the writer that is to receive the result.Normally,
  a stream should be used rather than a writer, so that
  the transformer may use instructions contained in the
  transformation instructions to control the encoding.
 However,
  there are times when it is useful to write to a writer,
  such as when using a StringWriter.
 @param writer A valid Writer reference.
 */
- (void)setWriterWithJavaIoWriter:(JavaIoWriter *)writer;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxXmlTransformStreamStreamResult)

/*!
 @brief If <code>javax.xml.transform.TransformerFactory.getFeature</code>
  returns true when passed this value as an argument,
  the Transformer supports Result output of this type.
 */
inline NSString *JavaxXmlTransformStreamStreamResult_get_FEATURE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *JavaxXmlTransformStreamStreamResult_FEATURE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaxXmlTransformStreamStreamResult, FEATURE, NSString *)

FOUNDATION_EXPORT void JavaxXmlTransformStreamStreamResult_init(JavaxXmlTransformStreamStreamResult *self);

FOUNDATION_EXPORT JavaxXmlTransformStreamStreamResult *new_JavaxXmlTransformStreamStreamResult_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxXmlTransformStreamStreamResult *create_JavaxXmlTransformStreamStreamResult_init(void);

FOUNDATION_EXPORT void JavaxXmlTransformStreamStreamResult_initWithJavaIoOutputStream_(JavaxXmlTransformStreamStreamResult *self, JavaIoOutputStream *outputStream);

FOUNDATION_EXPORT JavaxXmlTransformStreamStreamResult *new_JavaxXmlTransformStreamStreamResult_initWithJavaIoOutputStream_(JavaIoOutputStream *outputStream) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxXmlTransformStreamStreamResult *create_JavaxXmlTransformStreamStreamResult_initWithJavaIoOutputStream_(JavaIoOutputStream *outputStream);

FOUNDATION_EXPORT void JavaxXmlTransformStreamStreamResult_initWithJavaIoWriter_(JavaxXmlTransformStreamStreamResult *self, JavaIoWriter *writer);

FOUNDATION_EXPORT JavaxXmlTransformStreamStreamResult *new_JavaxXmlTransformStreamStreamResult_initWithJavaIoWriter_(JavaIoWriter *writer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxXmlTransformStreamStreamResult *create_JavaxXmlTransformStreamStreamResult_initWithJavaIoWriter_(JavaIoWriter *writer);

FOUNDATION_EXPORT void JavaxXmlTransformStreamStreamResult_initWithNSString_(JavaxXmlTransformStreamStreamResult *self, NSString *systemId);

FOUNDATION_EXPORT JavaxXmlTransformStreamStreamResult *new_JavaxXmlTransformStreamStreamResult_initWithNSString_(NSString *systemId) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxXmlTransformStreamStreamResult *create_JavaxXmlTransformStreamStreamResult_initWithNSString_(NSString *systemId);

FOUNDATION_EXPORT void JavaxXmlTransformStreamStreamResult_initWithJavaIoFile_(JavaxXmlTransformStreamStreamResult *self, JavaIoFile *f);

FOUNDATION_EXPORT JavaxXmlTransformStreamStreamResult *new_JavaxXmlTransformStreamStreamResult_initWithJavaIoFile_(JavaIoFile *f) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxXmlTransformStreamStreamResult *create_JavaxXmlTransformStreamStreamResult_initWithJavaIoFile_(JavaIoFile *f);

J2OBJC_TYPE_LITERAL_HEADER(JavaxXmlTransformStreamStreamResult)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaxXmlTransformStreamStreamResult")
