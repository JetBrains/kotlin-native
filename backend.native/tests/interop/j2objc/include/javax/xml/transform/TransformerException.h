//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/luni/src/main/java/javax/xml/transform/TransformerException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxXmlTransformTransformerException")
#ifdef RESTRICT_JavaxXmlTransformTransformerException
#define INCLUDE_ALL_JavaxXmlTransformTransformerException 0
#else
#define INCLUDE_ALL_JavaxXmlTransformTransformerException 1
#endif
#undef RESTRICT_JavaxXmlTransformTransformerException

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxXmlTransformTransformerException_) && (INCLUDE_ALL_JavaxXmlTransformTransformerException || defined(INCLUDE_JavaxXmlTransformTransformerException))
#define JavaxXmlTransformTransformerException_

#define RESTRICT_JavaLangException 1
#define INCLUDE_JavaLangException 1
#include "java/lang/Exception.h"

@class JavaIoPrintStream;
@class JavaIoPrintWriter;
@class JavaLangThrowable;
@protocol JavaxXmlTransformSourceLocator;

/*!
 @brief This class specifies an exceptional condition that occurred
  during the transformation process.
 */
@interface JavaxXmlTransformTransformerException : JavaLangException {
 @public
  /*!
   @brief Field locator specifies where the error occurred
   */
  id<JavaxXmlTransformSourceLocator> locator_;
  /*!
   @brief Field containedException specifies a wrapped exception.May be null.
   */
  JavaLangThrowable *containedException_;
}

#pragma mark Public

/*!
 @brief Create a new TransformerException.
 @param message The error or warning message.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)message;

/*!
 @brief Create a new TransformerException from a message and a Locator.
 <p>This constructor is especially useful when an application is
  creating its own exception from within a DocumentHandler
  callback.</p>
 @param message The error or warning message.
 @param locator The locator object for the error or warning.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)message
        withJavaxXmlTransformSourceLocator:(id<JavaxXmlTransformSourceLocator>)locator;

/*!
 @brief Wrap an existing exception in a TransformerException.
 @param message The error or warning message, or null to                 use the message from the embedded exception.
 @param locator The locator object for the error or warning.
 @param e Any exception
 */
- (instancetype __nonnull)initWithNSString:(NSString *)message
        withJavaxXmlTransformSourceLocator:(id<JavaxXmlTransformSourceLocator>)locator
                     withJavaLangThrowable:(JavaLangThrowable *)e;

/*!
 @brief Wrap an existing exception in a TransformerException.
 <p>This is used for throwing processor exceptions before
  the processing has started.</p>
 @param message The error or warning message, or null to                 use the message from the embedded exception.
 @param e Any exception
 */
- (instancetype __nonnull)initWithNSString:(NSString *)message
                     withJavaLangThrowable:(JavaLangThrowable *)e;

/*!
 @brief Create a new TransformerException wrapping an existing exception.
 @param e The exception to be wrapped.
 */
- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)e;

/*!
 @brief Returns the cause of this throwable or <code>null</code> if the
  cause is nonexistent or unknown.
 (The cause is the throwable that
  caused this throwable to get thrown.)
 */
- (JavaLangThrowable *)getCause;

/*!
 @brief This method retrieves an exception that this exception wraps.
 @return An Throwable object, or null.
 - seealso: #getCause
 */
- (JavaLangThrowable *)getException;

/*!
 @brief Get the location information as a string.
 @return A string with location info, or null
  if there is no location information.
 */
- (NSString *)getLocationAsString;

/*!
 @brief Method getLocator retrieves an instance of a SourceLocator
  object that specifies where an error occurred.
 @return A SourceLocator object, or null if none was specified.
 */
- (id<JavaxXmlTransformSourceLocator>)getLocator;

/*!
 @brief Get the error message with location information
  appended.
 @return A <code>String</code> representing the error message with
          location information appended.
 */
- (NSString *)getMessageAndLocation;

/*!
 @brief Initializes the <i>cause</i> of this throwable to the specified value.
 (The cause is the throwable that caused this throwable to get thrown.) 
 <p>This method can be called at most once.  It is generally called from
  within the constructor, or immediately after creating the
  throwable.  If this throwable was created
  with <code>TransformerException(Throwable)</code> or 
 <code>TransformerException(String,Throwable)</code>, this method cannot be called
  even once.
 @param cause the cause (which is saved for later retrieval by the          
 <code>getCause()</code>  method).  (A  <tt> null </tt>  value is          permitted, and indicates that the cause is nonexistent or
           unknown.)
 @return a reference to this <code>Throwable</code> instance.
 @throw IllegalArgumentExceptionif <code>cause</code> is this
          throwable.  (A throwable cannot
          be its own cause.)
 @throw IllegalStateExceptionif this throwable was
          created with <code>TransformerException(Throwable)</code> or
          <code>TransformerException(String,Throwable)</code>, or this method has already
          been called on this throwable.
 */
- (JavaLangThrowable *)initCauseWithJavaLangThrowable:(JavaLangThrowable *)cause OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Print the the trace of methods from where the error
  originated.This will trace all nested exception
  objects, as well as this object.
 */
- (void)printStackTrace;

/*!
 @brief Print the the trace of methods from where the error
  originated.This will trace all nested exception
  objects, as well as this object.
 @param s The stream where the dump will be sent to.
 */
- (void)printStackTraceWithJavaIoPrintStream:(JavaIoPrintStream *)s;

/*!
 @brief Print the the trace of methods from where the error
  originated.This will trace all nested exception
  objects, as well as this object.
 @param s The writer where the dump will be sent to.
 */
- (void)printStackTraceWithJavaIoPrintWriter:(JavaIoPrintWriter *)s;

/*!
 @brief Method setLocator sets an instance of a SourceLocator
  object that specifies where an error occurred.
 @param location A SourceLocator object, or null to clear the location.
 */
- (void)setLocatorWithJavaxXmlTransformSourceLocator:(id<JavaxXmlTransformSourceLocator>)location;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1
                               withBoolean:(jboolean)arg2
                               withBoolean:(jboolean)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxXmlTransformTransformerException)

J2OBJC_FIELD_SETTER(JavaxXmlTransformTransformerException, locator_, id<JavaxXmlTransformSourceLocator>)
J2OBJC_FIELD_SETTER(JavaxXmlTransformTransformerException, containedException_, JavaLangThrowable *)

FOUNDATION_EXPORT void JavaxXmlTransformTransformerException_initWithNSString_(JavaxXmlTransformTransformerException *self, NSString *message);

FOUNDATION_EXPORT JavaxXmlTransformTransformerException *new_JavaxXmlTransformTransformerException_initWithNSString_(NSString *message) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxXmlTransformTransformerException *create_JavaxXmlTransformTransformerException_initWithNSString_(NSString *message);

FOUNDATION_EXPORT void JavaxXmlTransformTransformerException_initWithJavaLangThrowable_(JavaxXmlTransformTransformerException *self, JavaLangThrowable *e);

FOUNDATION_EXPORT JavaxXmlTransformTransformerException *new_JavaxXmlTransformTransformerException_initWithJavaLangThrowable_(JavaLangThrowable *e) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxXmlTransformTransformerException *create_JavaxXmlTransformTransformerException_initWithJavaLangThrowable_(JavaLangThrowable *e);

FOUNDATION_EXPORT void JavaxXmlTransformTransformerException_initWithNSString_withJavaLangThrowable_(JavaxXmlTransformTransformerException *self, NSString *message, JavaLangThrowable *e);

FOUNDATION_EXPORT JavaxXmlTransformTransformerException *new_JavaxXmlTransformTransformerException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *e) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxXmlTransformTransformerException *create_JavaxXmlTransformTransformerException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *e);

FOUNDATION_EXPORT void JavaxXmlTransformTransformerException_initWithNSString_withJavaxXmlTransformSourceLocator_(JavaxXmlTransformTransformerException *self, NSString *message, id<JavaxXmlTransformSourceLocator> locator);

FOUNDATION_EXPORT JavaxXmlTransformTransformerException *new_JavaxXmlTransformTransformerException_initWithNSString_withJavaxXmlTransformSourceLocator_(NSString *message, id<JavaxXmlTransformSourceLocator> locator) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxXmlTransformTransformerException *create_JavaxXmlTransformTransformerException_initWithNSString_withJavaxXmlTransformSourceLocator_(NSString *message, id<JavaxXmlTransformSourceLocator> locator);

FOUNDATION_EXPORT void JavaxXmlTransformTransformerException_initWithNSString_withJavaxXmlTransformSourceLocator_withJavaLangThrowable_(JavaxXmlTransformTransformerException *self, NSString *message, id<JavaxXmlTransformSourceLocator> locator, JavaLangThrowable *e);

FOUNDATION_EXPORT JavaxXmlTransformTransformerException *new_JavaxXmlTransformTransformerException_initWithNSString_withJavaxXmlTransformSourceLocator_withJavaLangThrowable_(NSString *message, id<JavaxXmlTransformSourceLocator> locator, JavaLangThrowable *e) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxXmlTransformTransformerException *create_JavaxXmlTransformTransformerException_initWithNSString_withJavaxXmlTransformSourceLocator_withJavaLangThrowable_(NSString *message, id<JavaxXmlTransformSourceLocator> locator, JavaLangThrowable *e);

J2OBJC_TYPE_LITERAL_HEADER(JavaxXmlTransformTransformerException)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaxXmlTransformTransformerException")
