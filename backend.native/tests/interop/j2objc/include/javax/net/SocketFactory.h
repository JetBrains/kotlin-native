//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/javax/net/SocketFactory.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxNetSocketFactory")
#ifdef RESTRICT_JavaxNetSocketFactory
#define INCLUDE_ALL_JavaxNetSocketFactory 0
#else
#define INCLUDE_ALL_JavaxNetSocketFactory 1
#endif
#undef RESTRICT_JavaxNetSocketFactory
#ifdef INCLUDE_JavaxNetDefaultSocketFactory
#define INCLUDE_JavaxNetSocketFactory 1
#endif

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxNetSocketFactory_) && (INCLUDE_ALL_JavaxNetSocketFactory || defined(INCLUDE_JavaxNetSocketFactory))
#define JavaxNetSocketFactory_

@class JavaNetInetAddress;
@class JavaNetSocket;

/*!
 @brief This class creates sockets.It may be subclassed by other factories,
  which create particular subclasses of sockets and thus provide a general
  framework for the addition of public socket-level functionality.
 <P> Socket factories are a simple way to capture a variety of policies
  related to the sockets being constructed, producing such sockets in
  a way which does not require special configuration of the code which
  asks for the sockets:  <UL>
       <LI> Due to polymorphism of both factories and sockets, different
       kinds of sockets can be used by the same application code just
       by passing it different kinds of factories.      
 <LI> Factories can themselves be customized with parameters used
       in socket construction.  So for example, factories could be
       customized to return sockets with different networking timeouts
       or security parameters already configured.      
 <LI> The sockets returned to the application can be subclasses
       of java.net.Socket, so that they can directly expose new APIs
       for features such as compression, security, record marking,
       statistics collection, or firewall tunneling.      
 </UL>
  
 <P> Factory classes are specified by environment-specific configuration
  mechanisms.  For example, the <em>getDefault</em> method could return
  a factory that was appropriate for a particular user or applet, and a
  framework could use a factory customized to its own purposes.
 @since 1.4
 - seealso: ServerSocketFactory
 @author David Brownell
 */
@interface JavaxNetSocketFactory : NSObject

#pragma mark Public

/*!
 @brief Creates an unconnected socket.
 @return the unconnected socket
 @throw IOExceptionif the socket cannot be created
 - seealso: java.net.Socket#connect(java.net.SocketAddress)
 - seealso: java.net.Socket#connect(java.net.SocketAddress, int)
 - seealso: java.net.Socket#Socket()
 */
- (JavaNetSocket *)createSocket;

/*!
 @brief Creates a socket and connects it to the specified port number
  at the specified address.This socket is configured using
  the socket options established for this factory.
 <p>
  If there is a security manager, its <code>checkConnect</code>
  method is called with the host address and <code>port</code>
  as its arguments. This could result in a SecurityException.
 @param host the server host
 @param port the server port
 @return the <code>Socket</code>
 @throw IOExceptionif an I/O error occurs when creating the socket
 @throw SecurityExceptionif a security manager exists and its
          <code>checkConnect</code> method doesn't allow the operation.
 @throw IllegalArgumentExceptionif the port parameter is outside the
          specified range of valid port values, which is between 0 and
          65535, inclusive.
 @throw NullPointerExceptionif <code>host</code> is null.
 - seealso: SecurityManager#checkConnect
 - seealso: java.net.Socket#Socket(java.net.InetAddress, int)
 */
- (JavaNetSocket *)createSocketWithJavaNetInetAddress:(JavaNetInetAddress *)host
                                              withInt:(jint)port;

/*!
 @brief Creates a socket and connect it to the specified remote address
  on the specified remote port.The socket will also be bound
  to the local address and port suplied.
 The socket is configured using
  the socket options established for this factory. 
 <p>
  If there is a security manager, its <code>checkConnect</code>
  method is called with the host address and <code>port</code>
  as its arguments. This could result in a SecurityException.
 @param address the server network address
 @param port the server port
 @param localAddress the client network address
 @param localPort the client port
 @return the <code>Socket</code>
 @throw IOExceptionif an I/O error occurs when creating the socket
 @throw SecurityExceptionif a security manager exists and its
          <code>checkConnect</code> method doesn't allow the operation.
 @throw IllegalArgumentExceptionif the port parameter or localPort
          parameter is outside the specified range of valid port values,
          which is between 0 and 65535, inclusive.
 @throw NullPointerExceptionif <code>address</code> is null.
 - seealso: SecurityManager#checkConnect
 - seealso: java.net.Socket#Socket(java.net.InetAddress, int,
     java.net.InetAddress, int)
 */
- (JavaNetSocket *)createSocketWithJavaNetInetAddress:(JavaNetInetAddress *)address
                                              withInt:(jint)port
                               withJavaNetInetAddress:(JavaNetInetAddress *)localAddress
                                              withInt:(jint)localPort;

/*!
 @brief Creates a socket and connects it to the specified remote host
  at the specified remote port.This socket is configured using
  the socket options established for this factory.
 <p>
  If there is a security manager, its <code>checkConnect</code>
  method is called with the host address and <code>port</code>
  as its arguments. This could result in a SecurityException.
 @param host the server host name with which to connect, or         
  <code> null </code>  for the loopback address.
 @param port the server port
 @return the <code>Socket</code>
 @throw IOExceptionif an I/O error occurs when creating the socket
 @throw SecurityExceptionif a security manager exists and its
          <code>checkConnect</code> method doesn't allow the operation.
 @throw UnknownHostExceptionif the host is not known
 @throw IllegalArgumentExceptionif the port parameter is outside the
          specified range of valid port values, which is between 0 and
          65535, inclusive.
 - seealso: SecurityManager#checkConnect
 - seealso: java.net.Socket#Socket(String, int)
 */
- (JavaNetSocket *)createSocketWithNSString:(NSString *)host
                                    withInt:(jint)port;

/*!
 @brief Creates a socket and connects it to the specified remote host
  on the specified remote port.
 The socket will also be bound to the local address and port supplied.
  This socket is configured using
  the socket options established for this factory. 
 <p>
  If there is a security manager, its <code>checkConnect</code>
  method is called with the host address and <code>port</code>
  as its arguments. This could result in a SecurityException.
 @param host the server host name with which to connect, or         
  <code> null </code>  for the loopback address.
 @param port the server port
 @param localHost the local address the socket is bound to
 @param localPort the local port the socket is bound to
 @return the <code>Socket</code>
 @throw IOExceptionif an I/O error occurs when creating the socket
 @throw SecurityExceptionif a security manager exists and its
          <code>checkConnect</code> method doesn't allow the operation.
 @throw UnknownHostExceptionif the host is not known
 @throw IllegalArgumentExceptionif the port parameter or localPort
          parameter is outside the specified range of valid port values,
          which is between 0 and 65535, inclusive.
 - seealso: SecurityManager#checkConnect
 - seealso: java.net.Socket#Socket(String, int, java.net.InetAddress, int)
 */
- (JavaNetSocket *)createSocketWithNSString:(NSString *)host
                                    withInt:(jint)port
                     withJavaNetInetAddress:(JavaNetInetAddress *)localHost
                                    withInt:(jint)localPort;

/*!
 @brief Returns a copy of the environment's default socket factory.
 @return the default <code>SocketFactory</code>
 */
+ (JavaxNetSocketFactory *)getDefault;

/*!
 */
+ (void)setDefaultWithJavaxNetSocketFactory:(JavaxNetSocketFactory *)factory;

#pragma mark Protected

/*!
 @brief Creates a <code>SocketFactory</code>.
 */
- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxNetSocketFactory)

FOUNDATION_EXPORT void JavaxNetSocketFactory_init(JavaxNetSocketFactory *self);

FOUNDATION_EXPORT JavaxNetSocketFactory *JavaxNetSocketFactory_getDefault(void);

FOUNDATION_EXPORT void JavaxNetSocketFactory_setDefaultWithJavaxNetSocketFactory_(JavaxNetSocketFactory *factory);

J2OBJC_TYPE_LITERAL_HEADER(JavaxNetSocketFactory)

#endif

#if !defined (JavaxNetDefaultSocketFactory_) && (INCLUDE_ALL_JavaxNetSocketFactory || defined(INCLUDE_JavaxNetDefaultSocketFactory))
#define JavaxNetDefaultSocketFactory_

@class JavaNetInetAddress;
@class JavaNetSocket;

@interface JavaxNetDefaultSocketFactory : JavaxNetSocketFactory

#pragma mark Public

- (JavaNetSocket *)createSocket;

- (JavaNetSocket *)createSocketWithJavaNetInetAddress:(JavaNetInetAddress *)address
                                              withInt:(jint)port;

- (JavaNetSocket *)createSocketWithJavaNetInetAddress:(JavaNetInetAddress *)address
                                              withInt:(jint)port
                               withJavaNetInetAddress:(JavaNetInetAddress *)clientAddress
                                              withInt:(jint)clientPort;

- (JavaNetSocket *)createSocketWithNSString:(NSString *)host
                                    withInt:(jint)port;

- (JavaNetSocket *)createSocketWithNSString:(NSString *)host
                                    withInt:(jint)port
                     withJavaNetInetAddress:(JavaNetInetAddress *)clientAddress
                                    withInt:(jint)clientPort;

#pragma mark Package-Private

- (instancetype __nonnull)initPackagePrivate;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxNetDefaultSocketFactory)

FOUNDATION_EXPORT void JavaxNetDefaultSocketFactory_initPackagePrivate(JavaxNetDefaultSocketFactory *self);

FOUNDATION_EXPORT JavaxNetDefaultSocketFactory *new_JavaxNetDefaultSocketFactory_initPackagePrivate(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxNetDefaultSocketFactory *create_JavaxNetDefaultSocketFactory_initPackagePrivate(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaxNetDefaultSocketFactory)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaxNetSocketFactory")
