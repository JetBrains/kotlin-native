//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/javax/net/ssl/KeyManagerFactory.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxNetSslKeyManagerFactory")
#ifdef RESTRICT_JavaxNetSslKeyManagerFactory
#define INCLUDE_ALL_JavaxNetSslKeyManagerFactory 0
#else
#define INCLUDE_ALL_JavaxNetSslKeyManagerFactory 1
#endif
#undef RESTRICT_JavaxNetSslKeyManagerFactory

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxNetSslKeyManagerFactory_) && (INCLUDE_ALL_JavaxNetSslKeyManagerFactory || defined(INCLUDE_JavaxNetSslKeyManagerFactory))
#define JavaxNetSslKeyManagerFactory_

@class IOSCharArray;
@class IOSObjectArray;
@class JavaSecurityKeyStore;
@class JavaSecurityProvider;
@class JavaxNetSslKeyManagerFactorySpi;
@protocol JavaxNetSslManagerFactoryParameters;

/*!
 @brief This class acts as a factory for key managers based on a
  source of key material.Each key manager manages a specific
  type of key material for use by secure sockets.
 The key
  material is based on a KeyStore and/or provider specific sources. 
 <p> Android provides the following <code>KeyManagerFactory</code> algorithms: 
 <table>
    <thead>
      <tr>
        <th>Algorithm</th>
        <th>Supported API Levels</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>PKIX</td>
        <td>1+</td>
      </tr>
    </tbody>
  </table>
 @since 1.4
 - seealso: KeyManager
 */
@interface JavaxNetSslKeyManagerFactory : NSObject

#pragma mark Public

/*!
 @brief Returns the algorithm name of this <code>KeyManagerFactory</code> object.
 <p>This is the same name that was specified in one of the 
 <code>getInstance</code> calls that created this 
 <code>KeyManagerFactory</code> object.
 @return the algorithm name of this <code>KeyManagerFactory</code> object.
 */
- (NSString *)getAlgorithm;

/*!
 @brief Obtains the default KeyManagerFactory algorithm name.
 <p>The default algorithm can be changed at runtime by setting
  the value of the <code>ssl.KeyManagerFactory.algorithm</code>
  security property to the desired algorithm name.
 - seealso: java.security.Securitysecurity properties
 @return the default algorithm name as specified by the
           <code>ssl.KeyManagerFactory.algorithm</code> security property, or an
           implementation-specific default if no such property exists.
 */
+ (NSString *)getDefaultAlgorithm;

/*!
 @brief Returns a <code>KeyManagerFactory</code> object that acts as a
  factory for key managers.
 <p> This method traverses the list of registered security Providers,
  starting with the most preferred Provider.
  A new KeyManagerFactory object encapsulating the
  KeyManagerFactorySpi implementation from the first
  Provider that supports the specified algorithm is returned. 
 <p> Note that the list of registered providers may be retrieved via the 
 <code>Security.getProviders()</code> method.
 @param algorithm the standard name of the requested algorithm.           See the 
  <a href="{@@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/security/jsse/JSSERefGuide.html">
            Java Secure Socket Extension Reference Guide 
  </a>           for information about standard algorithm names.
 @return the new <code>KeyManagerFactory</code> object.
 @throw NoSuchAlgorithmExceptionif no Provider supports a
           KeyManagerFactorySpi implementation for the
           specified algorithm.
 @throw NullPointerExceptionif <code>algorithm</code> is null.
 - seealso: java.security.Provider
 */
+ (JavaxNetSslKeyManagerFactory *)getInstanceWithNSString:(NSString *)algorithm;

/*!
 @brief Returns a <code>KeyManagerFactory</code> object that acts as a
  factory for key managers.
 <p> A new KeyManagerFactory object encapsulating the
  KeyManagerFactorySpi implementation from the specified Provider
  object is returned.  Note that the specified Provider object
  does not have to be registered in the provider list.
 @param algorithm the standard name of the requested algorithm.           See the 
  <a href="{@@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/security/jsse/JSSERefGuide.html">
            Java Secure Socket Extension Reference Guide 
  </a>           for information about standard algorithm names.
 @param provider an instance of the provider.
 @return the new <code>KeyManagerFactory</code> object.
 @throw NoSuchAlgorithmExceptionif a KeyManagerFactorySpi
           implementation for the specified algorithm is not available
           from the specified Provider object.
 @throw IllegalArgumentExceptionif provider is null.
 @throw NullPointerExceptionif <code>algorithm</code> is null.
 - seealso: java.security.Provider
 */
+ (JavaxNetSslKeyManagerFactory *)getInstanceWithNSString:(NSString *)algorithm
                                 withJavaSecurityProvider:(JavaSecurityProvider *)provider;

/*!
 @brief Returns a <code>KeyManagerFactory</code> object that acts as a
  factory for key managers.
 <p> A new KeyManagerFactory object encapsulating the
  KeyManagerFactorySpi implementation from the specified provider
  is returned.  The specified provider must be registered
  in the security provider list. 
 <p> Note that the list of registered providers may be retrieved via the 
 <code>Security.getProviders()</code> method.
 @param algorithm the standard name of the requested algorithm.           See the 
  <a href="{@@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/security/jsse/JSSERefGuide.html">
            Java Secure Socket Extension Reference Guide 
  </a>           for information about standard algorithm names.
 @param provider the name of the provider.
 @return the new <code>KeyManagerFactory</code> object.
 @throw NoSuchAlgorithmExceptionif a KeyManagerFactorySpi
           implementation for the specified algorithm is not
           available from the specified provider.
 @throw NoSuchProviderExceptionif the specified provider is not
           registered in the security provider list.
 @throw IllegalArgumentExceptionif the provider name is null or empty.
 @throw NullPointerExceptionif <code>algorithm</code> is null.
 - seealso: java.security.Provider
 */
+ (JavaxNetSslKeyManagerFactory *)getInstanceWithNSString:(NSString *)algorithm
                                             withNSString:(NSString *)provider;

/*!
 @brief Returns one key manager for each type of key material.
 @return the key managers
 @throw IllegalStateExceptionif the KeyManagerFactory is not initialized
 */
- (IOSObjectArray *)getKeyManagers;

/*!
 @brief Returns the provider of this <code>KeyManagerFactory</code> object.
 @return the provider of this <code>KeyManagerFactory</code> object
 */
- (JavaSecurityProvider *)getProvider;

/*!
 @brief Initializes this factory with a source of key material.
 <P>
  The provider typically uses a KeyStore for obtaining
  key material for use during secure socket negotiations.
  The KeyStore is generally password-protected. 
 <P>
  For more flexible initialization, please see 
 <code>init(ManagerFactoryParameters)</code>.
  <P>
 @param ks the key store or null
 @param password the password for recovering keys in the KeyStore
 @throw KeyStoreExceptionif this operation fails
 @throw NoSuchAlgorithmExceptionif the specified algorithm is not
           available from the specified provider.
 @throw UnrecoverableKeyExceptionif the key cannot be recovered
           (e.g. the given password is wrong).
 */
- (void)init__WithJavaSecurityKeyStore:(JavaSecurityKeyStore *)ks
                         withCharArray:(IOSCharArray *)password OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Initializes this factory with a source of provider-specific
  key material.
 <P>
  In some cases, initialization parameters other than a keystore
  and password may be needed by a provider.  Users of that
  particular provider are expected to pass an implementation of
  the appropriate <CODE>ManagerFactoryParameters</CODE> as
  defined by the provider.  The provider can then call the
  specified methods in the <CODE>ManagerFactoryParameters</CODE>
  implementation to obtain the needed information.
 @param spec an implementation of a provider-specific parameter           specification
 @throw InvalidAlgorithmParameterExceptionif an error is encountered
 */
- (void)init__WithJavaxNetSslManagerFactoryParameters:(id<JavaxNetSslManagerFactoryParameters>)spec OBJC_METHOD_FAMILY_NONE;

#pragma mark Protected

/*!
 @brief Creates a KeyManagerFactory object.
 @param factorySpi the delegate
 @param provider the provider
 @param algorithm the algorithm
 */
- (instancetype __nonnull)initWithJavaxNetSslKeyManagerFactorySpi:(JavaxNetSslKeyManagerFactorySpi *)factorySpi
                                         withJavaSecurityProvider:(JavaSecurityProvider *)provider
                                                     withNSString:(NSString *)algorithm;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxNetSslKeyManagerFactory)

FOUNDATION_EXPORT NSString *JavaxNetSslKeyManagerFactory_getDefaultAlgorithm(void);

FOUNDATION_EXPORT void JavaxNetSslKeyManagerFactory_initWithJavaxNetSslKeyManagerFactorySpi_withJavaSecurityProvider_withNSString_(JavaxNetSslKeyManagerFactory *self, JavaxNetSslKeyManagerFactorySpi *factorySpi, JavaSecurityProvider *provider, NSString *algorithm);

FOUNDATION_EXPORT JavaxNetSslKeyManagerFactory *new_JavaxNetSslKeyManagerFactory_initWithJavaxNetSslKeyManagerFactorySpi_withJavaSecurityProvider_withNSString_(JavaxNetSslKeyManagerFactorySpi *factorySpi, JavaSecurityProvider *provider, NSString *algorithm) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxNetSslKeyManagerFactory *create_JavaxNetSslKeyManagerFactory_initWithJavaxNetSslKeyManagerFactorySpi_withJavaSecurityProvider_withNSString_(JavaxNetSslKeyManagerFactorySpi *factorySpi, JavaSecurityProvider *provider, NSString *algorithm);

FOUNDATION_EXPORT JavaxNetSslKeyManagerFactory *JavaxNetSslKeyManagerFactory_getInstanceWithNSString_(NSString *algorithm);

FOUNDATION_EXPORT JavaxNetSslKeyManagerFactory *JavaxNetSslKeyManagerFactory_getInstanceWithNSString_withNSString_(NSString *algorithm, NSString *provider);

FOUNDATION_EXPORT JavaxNetSslKeyManagerFactory *JavaxNetSslKeyManagerFactory_getInstanceWithNSString_withJavaSecurityProvider_(NSString *algorithm, JavaSecurityProvider *provider);

J2OBJC_TYPE_LITERAL_HEADER(JavaxNetSslKeyManagerFactory)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaxNetSslKeyManagerFactory")
