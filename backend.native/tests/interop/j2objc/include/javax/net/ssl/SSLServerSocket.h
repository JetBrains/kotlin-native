//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/javax/net/ssl/SSLServerSocket.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxNetSslSSLServerSocket")
#ifdef RESTRICT_JavaxNetSslSSLServerSocket
#define INCLUDE_ALL_JavaxNetSslSSLServerSocket 0
#else
#define INCLUDE_ALL_JavaxNetSslSSLServerSocket 1
#endif
#undef RESTRICT_JavaxNetSslSSLServerSocket

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxNetSslSSLServerSocket_) && (INCLUDE_ALL_JavaxNetSslSSLServerSocket || defined(INCLUDE_JavaxNetSslSSLServerSocket))
#define JavaxNetSslSSLServerSocket_

#define RESTRICT_JavaNetServerSocket 1
#define INCLUDE_JavaNetServerSocket 1
#include "java/net/ServerSocket.h"

@class IOSObjectArray;
@class JavaNetInetAddress;
@class JavaNetSocketImpl;
@class JavaxNetSslSSLParameters;

/*!
 @brief This class extends <code>ServerSocket</code>s and
  provides secure server sockets using protocols such as the Secure
  Sockets Layer (SSL) or Transport Layer Security (TLS) protocols.
 <P>
  Instances of this class are generally created using a 
 <code>SSLServerSocketFactory</code>.  The primary function
  of <code>SSLServerSocket</code>s
  is to create <code>SSLSocket</code>s by <code>accept</code>ing
  connections. 
 <P>
  <code>SSLServerSocket</code>s contain several pieces of state data
  which are inherited by the <code>SSLSocket</code> at
  socket creation.  These include the enabled cipher
  suites and protocols, whether client
  authentication is necessary, and whether created sockets should
  begin handshaking in client or server mode.  The state
  inherited by the created <code>SSLSocket</code> can be
  overriden by calling the appropriate methods.
 - seealso: java.net.ServerSocket
 - seealso: SSLSocket
 @since 1.4
 @author David Brownell
 */
@interface JavaxNetSslSSLServerSocket : JavaNetServerSocket

#pragma mark Public

/*!
 @brief Returns the list of cipher suites which are currently enabled
  for use by newly accepted connections.
 <P>
  If this list has not been explicitly modified, a system-provided
  default guarantees a minimum quality of service in all enabled
  cipher suites. 
 <P>
  There are several reasons why an enabled cipher suite might
  not actually be used.  For example:  the server socket might
  not have appropriate private keys available to it or the cipher
  suite might be anonymous, precluding the use of client authentication,
  while the server socket has been told to require that sort of
  authentication.
 @return an array of cipher suites enabled
 - seealso: #getSupportedCipherSuites()
 - seealso: #setEnabledCipherSuites(String [])
 */
- (IOSObjectArray *)getEnabledCipherSuites;

/*!
 @brief Returns the names of the protocols which are currently
  enabled for use by the newly accepted connections.
 @return an array of protocol names
 - seealso: #getSupportedProtocols()
 - seealso: #setEnabledProtocols(String [])
 */
- (IOSObjectArray *)getEnabledProtocols;

/*!
 @brief Returns true if new SSL sessions may be established by the
  sockets which are created from this server socket.
 @return true indicates that sessions may be created; this
           is the default.  false indicates that an existing
           session must be resumed
 - seealso: #setEnableSessionCreation(boolean)
 */
- (jboolean)getEnableSessionCreation;

/*!
 @brief Returns true if client authentication will be <i>required</i> on
  newly <code>accept</code>ed server-mode <code>SSLSocket</code>s.
 <P>
  The initial inherited setting may be overridden by calling 
 <code>SSLSocket.setNeedClientAuth(boolean)</code> or 
 <code>SSLSocket.setWantClientAuth(boolean)</code>.
 @return true if client authentication is required,
           or false if no client authentication is desired.
 - seealso: #setNeedClientAuth(boolean)
 - seealso: #setWantClientAuth(boolean)
 - seealso: #getWantClientAuth()
 - seealso: #setUseClientMode(boolean)
 */
- (jboolean)getNeedClientAuth;

/*!
 @brief Returns the SSLParameters in effect for newly accepted connections.
 The ciphersuites and protocols of the returned SSLParameters
  are always non-null.
 @return the SSLParameters in effect for newly accepted connections
 - seealso: #setSSLParameters(SSLParameters)
 @since 1.7
 */
- (JavaxNetSslSSLParameters *)getSSLParameters;

/*!
 @brief Returns the names of the cipher suites which could be enabled for use
  on an SSL connection.
 <P>
  Normally, only a subset of these will actually
  be enabled by default, since this list may include cipher suites which
  do not meet quality of service requirements for those defaults.  Such
  cipher suites are useful in specialized applications.
 @return an array of cipher suite names
 - seealso: #getEnabledCipherSuites()
 - seealso: #setEnabledCipherSuites(String [])
 */
- (IOSObjectArray *)getSupportedCipherSuites;

/*!
 @brief Returns the names of the protocols which could be enabled for use.
 @return an array of protocol names supported
 - seealso: #getEnabledProtocols()
 - seealso: #setEnabledProtocols(String [])
 */
- (IOSObjectArray *)getSupportedProtocols;

/*!
 @brief Returns true if accepted connections will be in SSL client mode.
 - seealso: #setUseClientMode(boolean)
 @return true if the connection should use SSL client mode.
 */
- (jboolean)getUseClientMode;

/*!
 @brief Returns true if client authentication will be <i>requested</i> on
  newly accepted server-mode connections.
 <P>
  The initial inherited setting may be overridden by calling 
 <code>SSLSocket.setNeedClientAuth(boolean)</code> or 
 <code>SSLSocket.setWantClientAuth(boolean)</code>.
 @return true if client authentication is requested,
           or false if no client authentication is desired.
 - seealso: #setWantClientAuth(boolean)
 - seealso: #setNeedClientAuth(boolean)
 - seealso: #getNeedClientAuth()
 - seealso: #setUseClientMode(boolean)
 */
- (jboolean)getWantClientAuth;

/*!
 @brief Sets the cipher suites enabled for use by accepted connections.
 <P>
  The cipher suites must have been listed by getSupportedCipherSuites()
  as being supported.  Following a successful call to this method,
  only suites listed in the <code>suites</code> parameter are enabled
  for use. 
 <P>
  Suites that require authentication information which is not available
  in this ServerSocket's authentication context will not be used
  in any case, even if they are enabled. 
 <P>
  <code>SSLSocket</code>s returned from <code>accept()</code>
  inherit this setting.
 @param suites Names of all the cipher suites to enable
 @throw IllegalArgumentExceptionwhen one or more of ciphers
           named by the parameter is not supported, or when
           the parameter is null.
 - seealso: #getSupportedCipherSuites()
 - seealso: #getEnabledCipherSuites()
 */
- (void)setEnabledCipherSuitesWithNSStringArray:(IOSObjectArray *)suites;

/*!
 @brief Controls which particular protocols are enabled for use by
  accepted connections.
 <P>
  The protocols must have been listed by
  getSupportedProtocols() as being supported.
  Following a successful call to this method, only protocols listed
  in the <code>protocols</code> parameter are enabled for use. 
 <P>
  <code>SSLSocket</code>s returned from <code>accept()</code>
  inherit this setting.
 @param protocols Names of all the protocols to enable.
 @throw IllegalArgumentExceptionwhen one or more of
             the protocols named by the parameter is not supported or
             when the protocols parameter is null.
 - seealso: #getEnabledProtocols()
 - seealso: #getSupportedProtocols()
 */
- (void)setEnabledProtocolsWithNSStringArray:(IOSObjectArray *)protocols;

/*!
 @brief Controls whether new SSL sessions may be established by the
  sockets which are created from this server socket.
 <P>
  <code>SSLSocket</code>s returned from <code>accept()</code>
  inherit this setting.
 @param flag true indicates that sessions may be created; this           is the default. false indicates that an existing session
            must be resumed.
 - seealso: #getEnableSessionCreation()
 */
- (void)setEnableSessionCreationWithBoolean:(jboolean)flag;

/*!
 @brief Controls whether <code>accept</code>ed server-mode 
 <code>SSLSockets</code> will be initially configured to 
 <i>require</i> client authentication.
 <P>
  A socket's client authentication setting is one of the following: 
 <ul>
  <li> client authentication required 
 <li> client authentication requested 
 <li> no client authentication desired 
 </ul>
  <P>
  Unlike <code>setWantClientAuth(boolean)</code>, if the accepted
  socket's option is set and the client chooses not to provide
  authentication information about itself, <i>the negotiations
  will stop and the connection will be dropped</i>.
  <P>
  Calling this method overrides any previous setting made by
  this method or <code>setWantClientAuth(boolean)</code>.
  <P>
  The initial inherited setting may be overridden by calling 
 <code>SSLSocket.setNeedClientAuth(boolean)</code> or 
 <code>SSLSocket.setWantClientAuth(boolean)</code>.
 @param need set to true if client authentication is required,           or false if no client authentication is desired.
 - seealso: #getNeedClientAuth()
 - seealso: #setWantClientAuth(boolean)
 - seealso: #getWantClientAuth()
 - seealso: #setUseClientMode(boolean)
 */
- (void)setNeedClientAuthWithBoolean:(jboolean)need;

/*!
 @brief Applies SSLParameters to newly accepted connections.
 <p>This means: 
 <ul>
  <li>If <code>params.getCipherSuites()</code> is non-null,
    <code>setEnabledCipherSuites()</code> is called with that value.</li>
  <li>If <code>params.getProtocols()</code> is non-null,
    <code>setEnabledProtocols()</code> is called with that value.</li>
  <li>If <code>params.getNeedClientAuth()</code> or
    <code>params.getWantClientAuth()</code> return <code>true</code>,
    <code>setNeedClientAuth(true)</code> and
    <code>setWantClientAuth(true)</code> are called, respectively;
    otherwise <code>setWantClientAuth(false)</code> is called.</li>
  <li>If <code>params.getServerNames()</code> is non-null, the socket will
    configure its server names with that value.</li>
  <li>If <code>params.getSNIMatchers()</code> is non-null, the socket will
    configure its SNI matchers with that value.</li>
  </ul>
 @param params the parameters
 @throw IllegalArgumentExceptionif the setEnabledCipherSuites() or
     the setEnabledProtocols() call fails
 - seealso: #getSSLParameters()
 @since 1.7
 */
- (void)setSSLParametersWithJavaxNetSslSSLParameters:(JavaxNetSslSSLParameters *)params;

/*!
 @brief Controls whether accepted connections are in the (default) SSL
  server mode, or the SSL client mode.
 <P>
  Servers normally authenticate themselves, and clients are not
  required to do so. 
 <P>
  In rare cases, TCP servers
  need to act in the SSL client mode on newly accepted
  connections. For example, FTP clients acquire server sockets
  and listen there for reverse connections from the server. An
  FTP client would use an SSLServerSocket in "client" mode to
  accept the reverse connection while the FTP server uses an
  SSLSocket with "client" mode disabled to initiate the
  connection. During the resulting handshake, existing SSL
  sessions may be reused. 
 <P>
  <code>SSLSocket</code>s returned from <code>accept()</code>
  inherit this setting.
 @param mode true if newly accepted connections should use SSL           client mode.
 - seealso: #getUseClientMode()
 */
- (void)setUseClientModeWithBoolean:(jboolean)mode;

/*!
 @brief Controls whether <code>accept</code>ed server-mode 
 <code>SSLSockets</code> will be initially configured to 
 <i>request</i> client authentication.
 <P>
  A socket's client authentication setting is one of the following: 
 <ul>
  <li> client authentication required 
 <li> client authentication requested 
 <li> no client authentication desired 
 </ul>
  <P>
  Unlike <code>setNeedClientAuth(boolean)</code>, if the accepted
  socket's option is set and the client chooses not to provide
  authentication information about itself, <i>the negotiations
  will continue</i>.
  <P>
  Calling this method overrides any previous setting made by
  this method or <code>setNeedClientAuth(boolean)</code>.
  <P>
  The initial inherited setting may be overridden by calling 
 <code>SSLSocket.setNeedClientAuth(boolean)</code> or 
 <code>SSLSocket.setWantClientAuth(boolean)</code>.
 @param want set to true if client authentication is requested,           or false if no client authentication is desired.
 - seealso: #getWantClientAuth()
 - seealso: #setNeedClientAuth(boolean)
 - seealso: #getNeedClientAuth()
 - seealso: #setUseClientMode(boolean)
 */
- (void)setWantClientAuthWithBoolean:(jboolean)want;

- (NSString *)description;

#pragma mark Protected

/*!
 @brief Used only by subclasses.
 <P>
  Create an unbound TCP server socket using the default authentication
  context.
 @throw IOExceptionif an I/O error occurs when creating the socket
 */
- (instancetype __nonnull)init;

/*!
 @brief Used only by subclasses.
 <P>
  Create a TCP server socket on a port, using the default
  authentication context.  The connection backlog defaults to
  fifty connections queued up before the system starts to
  reject new connection requests. 
 <P>
  A port number of <code>0</code> creates a socket on any free port. 
 <P>
  If there is a security manager, its <code>checkListen</code>
  method is called with the <code>port</code> argument as its
  argument to ensure the operation is allowed. This could result
  in a SecurityException.
 @param port the port on which to listen
 @throw IOExceptionif an I/O error occurs when creating the socket
 @throw SecurityExceptionif a security manager exists and its
          <code>checkListen</code> method doesn't allow the operation.
 @throw IllegalArgumentExceptionif the port parameter is outside the
          specified range of valid port values, which is between 0 and
          65535, inclusive.
 - seealso: SecurityManager#checkListen
 */
- (instancetype __nonnull)initWithInt:(jint)port;

/*!
 @brief Used only by subclasses.
 <P>
  Create a TCP server socket on a port, using the default
  authentication context and a specified backlog of connections. 
 <P>
  A port number of <code>0</code> creates a socket on any free port. 
 <P>
  The <code>backlog</code> argument is the requested maximum number of
  pending connections on the socket. Its exact semantics are implementation
  specific. In particular, an implementation may impose a maximum length
  or may choose to ignore the parameter altogther. The value provided
  should be greater than <code>0</code>. If it is less than or equal to 
 <code>0</code>, then an implementation specific default will be used. 
 <P>
  If there is a security manager, its <code>checkListen</code>
  method is called with the <code>port</code> argument as its
  argument to ensure the operation is allowed. This could result
  in a SecurityException.
 @param port the port on which to listen
 @param backlog requested maximum length of the queue of incoming                   connections.
 @throw IOExceptionif an I/O error occurs when creating the socket
 @throw SecurityExceptionif a security manager exists and its
          <code>checkListen</code> method doesn't allow the operation.
 @throw IllegalArgumentExceptionif the port parameter is outside the
          specified range of valid port values, which is between 0 and
          65535, inclusive.
 - seealso: SecurityManager#checkListen
 */
- (instancetype __nonnull)initWithInt:(jint)port
                              withInt:(jint)backlog;

/*!
 @brief Used only by subclasses.
 <P>
  Create a TCP server socket on a port, using the default
  authentication context and a specified backlog of connections
  as well as a particular specified network interface.  This
  constructor is used on multihomed hosts, such as those used
  for firewalls or as routers, to control through which interface
  a network service is provided. 
 <P>
  If there is a security manager, its <code>checkListen</code>
  method is called with the <code>port</code> argument as its
  argument to ensure the operation is allowed. This could result
  in a SecurityException. 
 <P>
  A port number of <code>0</code> creates a socket on any free port. 
 <P>
  The <code>backlog</code> argument is the requested maximum number of
  pending connections on the socket. Its exact semantics are implementation
  specific. In particular, an implementation may impose a maximum length
  or may choose to ignore the parameter altogther. The value provided
  should be greater than <code>0</code>. If it is less than or equal to 
 <code>0</code>, then an implementation specific default will be used. 
 <P>
  If <i>address</i> is null, it will default accepting connections
  on any/all local addresses.
 @param port the port on which to listen
 @param backlog requested maximum length of the queue of incoming                   connections.
 @param address the address of the network interface through           which connections will be accepted
 @throw IOExceptionif an I/O error occurs when creating the socket
 @throw SecurityExceptionif a security manager exists and its
          <code>checkListen</code> method doesn't allow the operation.
 @throw IllegalArgumentExceptionif the port parameter is outside the
          specified range of valid port values, which is between 0 and
          65535, inclusive.
 - seealso: SecurityManager#checkListen
 */
- (instancetype __nonnull)initWithInt:(jint)port
                              withInt:(jint)backlog
               withJavaNetInetAddress:(JavaNetInetAddress *)address;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaNetSocketImpl:(JavaNetSocketImpl *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxNetSslSSLServerSocket)

FOUNDATION_EXPORT void JavaxNetSslSSLServerSocket_init(JavaxNetSslSSLServerSocket *self);

FOUNDATION_EXPORT void JavaxNetSslSSLServerSocket_initWithInt_(JavaxNetSslSSLServerSocket *self, jint port);

FOUNDATION_EXPORT void JavaxNetSslSSLServerSocket_initWithInt_withInt_(JavaxNetSslSSLServerSocket *self, jint port, jint backlog);

FOUNDATION_EXPORT void JavaxNetSslSSLServerSocket_initWithInt_withInt_withJavaNetInetAddress_(JavaxNetSslSSLServerSocket *self, jint port, jint backlog, JavaNetInetAddress *address);

J2OBJC_TYPE_LITERAL_HEADER(JavaxNetSslSSLServerSocket)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaxNetSslSSLServerSocket")
