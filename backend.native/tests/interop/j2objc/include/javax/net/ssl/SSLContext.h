//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/javax/net/ssl/SSLContext.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxNetSslSSLContext")
#ifdef RESTRICT_JavaxNetSslSSLContext
#define INCLUDE_ALL_JavaxNetSslSSLContext 0
#else
#define INCLUDE_ALL_JavaxNetSslSSLContext 1
#endif
#undef RESTRICT_JavaxNetSslSSLContext

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxNetSslSSLContext_) && (INCLUDE_ALL_JavaxNetSslSSLContext || defined(INCLUDE_JavaxNetSslSSLContext))
#define JavaxNetSslSSLContext_

@class IOSObjectArray;
@class JavaSecurityProvider;
@class JavaSecuritySecureRandom;
@class JavaxNetSslSSLContextSpi;
@class JavaxNetSslSSLEngine;
@class JavaxNetSslSSLParameters;
@class JavaxNetSslSSLServerSocketFactory;
@class JavaxNetSslSSLSocketFactory;
@protocol JavaxNetSslSSLSessionContext;

/*!
 @brief Instances of this class represent a secure socket protocol
  implementation which acts as a factory for secure socket
  factories or <code>SSLEngine</code>s.This class is initialized
  with an optional set of key and trust managers and source of
  secure random bytes.
 <p> Android provides the following <code>SSLContext</code> protocols: 
 <table>
      <thead>
          <tr>
              <th>Name</th>
              <th>Supported (API Levels)</th>
          </tr>
      </thead>
      <tbody>
          <tr>
              <td>Default</td>
              <td>10+</td>
          </tr>
          <tr>
              <td>SSL</td>
              <td>10+</td>
          </tr>
          <tr>
              <td>SSLv3</td>
              <td>10+</td>
          </tr>
          <tr>
              <td>TLS</td>
              <td>1+</td>
          </tr>
          <tr>
              <td>TLSv1</td>
              <td>10+</td>
          </tr>
          <tr>
              <td>TLSv1.1</td>
              <td>16+</td>
          </tr>
          <tr>
              <td>TLSv1.2</td>
              <td>16+</td>
          </tr>
      </tbody>
  </table>
  This protocol is described in the <a href="{@@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/security/StandardNames.html#SSLContext">
  SSLContext section</a> of the
  Java Cryptography Architecture Standard Algorithm Name Documentation.
 @since 1.4
 */
@interface JavaxNetSslSSLContext : NSObject

#pragma mark Public

/*!
 @brief Creates a new <code>SSLEngine</code> using this context.
 <P>
  Applications using this factory method are providing no hints
  for an internal session reuse strategy. If hints are desired, 
 <code>createSSLEngine(String, int)</code> should be used
  instead. 
 <P>
  Some cipher suites (such as Kerberos) require remote hostname
  information, in which case this factory method should not be used.
 @return the <code>SSLEngine</code> object
 @throw UnsupportedOperationExceptionif the underlying provider
           does not implement the operation.
 @throw IllegalStateExceptionif the SSLContextImpl requires
           initialization and the <code>init()</code> has not been called
 @since 1.5
 */
- (JavaxNetSslSSLEngine *)createSSLEngine;

/*!
 @brief Creates a new <code>SSLEngine</code> using this context using
  advisory peer information.
 <P>
  Applications using this factory method are providing hints
  for an internal session reuse strategy. 
 <P>
  Some cipher suites (such as Kerberos) require remote hostname
  information, in which case peerHost needs to be specified.
 @param peerHost the non-authoritative name of the host
 @param peerPort the non-authoritative port
 @return the new <code>SSLEngine</code> object
 @throw UnsupportedOperationExceptionif the underlying provider
           does not implement the operation.
 @throw IllegalStateExceptionif the SSLContextImpl requires
           initialization and the <code>init()</code> has not been called
 @since 1.5
 */
- (JavaxNetSslSSLEngine *)createSSLEngineWithNSString:(NSString *)peerHost
                                              withInt:(jint)peerPort;

/*!
 @brief Returns the client session context, which represents the set of
  SSL sessions available for use during the handshake phase of
  client-side SSL sockets.
 <P>
  This context may be unavailable in some environments, in which
  case this method returns null. For example, when the underlying
  SSL provider does not provide an implementation of SSLSessionContext
  interface, this method returns null. A non-null session context
  is returned otherwise.
 @return client session context bound to this SSL context
 */
- (id<JavaxNetSslSSLSessionContext>)getClientSessionContext;

/*!
 @brief Returns the default SSL context.
 <p>If a default context was set using the <code>SSLContext.setDefault()</code>
  method, it is returned. Otherwise, the first
  call of this method triggers the call 
 <code>SSLContext.getInstance("Default")</code>.
  If successful, that object is made the default SSL context and returned. 
 <p>The default context is immediately
  usable and does not require initialization.
 @return the default SSL context
 @throw NoSuchAlgorithmExceptionif the
    <code>SSLContext.getInstance()</code> call fails
 @since 1.6
 */
+ (JavaxNetSslSSLContext *)getDefault;

/*!
 @brief Returns a copy of the SSLParameters indicating the default
  settings for this SSL context.
 <p>The parameters will always have the ciphersuites and protocols
  arrays set to non-null values.
 @return a copy of the SSLParameters object with the default settings
 @throw UnsupportedOperationExceptionif the default SSL parameters
    could not be obtained.
 @since 1.6
 */
- (JavaxNetSslSSLParameters *)getDefaultSSLParameters;

/*!
 @brief Returns a <code>SSLContext</code> object that implements the
  specified secure socket protocol.
 <p> This method traverses the list of registered security Providers,
  starting with the most preferred Provider.
  A new SSLContext object encapsulating the
  SSLContextSpi implementation from the first
  Provider that supports the specified protocol is returned. 
 <p> Note that the list of registered providers may be retrieved via the 
 <code>Security.getProviders()</code> method.
 @param protocol the standard name of the requested protocol.           See the SSLContext section in the 
  <a href="{@@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/security/StandardNames.html#SSLContext">
            Java Cryptography Architecture Standard Algorithm Name
            Documentation
  </a>           for information about standard protocol names.
 @return the new <code>SSLContext</code> object.
 @throw NoSuchAlgorithmExceptionif no Provider supports a
           TrustManagerFactorySpi implementation for the
           specified protocol.
 @throw NullPointerExceptionif protocol is null.
 - seealso: java.security.Provider
 */
+ (JavaxNetSslSSLContext *)getInstanceWithNSString:(NSString *)protocol;

/*!
 @brief Returns a <code>SSLContext</code> object that implements the
  specified secure socket protocol.
 <p> A new SSLContext object encapsulating the
  SSLContextSpi implementation from the specified Provider
  object is returned.  Note that the specified Provider object
  does not have to be registered in the provider list.
 @param protocol the standard name of the requested protocol.           See the SSLContext section in the 
  <a href="{@@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/security/StandardNames.html#SSLContext">
            Java Cryptography Architecture Standard Algorithm Name
            Documentation
  </a>           for information about standard protocol names.
 @param provider an instance of the provider.
 @return the new <code>SSLContext</code> object.
 @throw NoSuchAlgorithmExceptionif a KeyManagerFactorySpi
           implementation for the specified protocol is not available
           from the specified Provider object.
 @throw IllegalArgumentExceptionif the provider name is null.
 @throw NullPointerExceptionif protocol is null.
 - seealso: java.security.Provider
 */
+ (JavaxNetSslSSLContext *)getInstanceWithNSString:(NSString *)protocol
                          withJavaSecurityProvider:(JavaSecurityProvider *)provider;

/*!
 @brief Returns a <code>SSLContext</code> object that implements the
  specified secure socket protocol.
 <p> A new SSLContext object encapsulating the
  SSLContextSpi implementation from the specified provider
  is returned.  The specified provider must be registered
  in the security provider list. 
 <p> Note that the list of registered providers may be retrieved via the 
 <code>Security.getProviders()</code> method.
 @param protocol the standard name of the requested protocol.           See the SSLContext section in the 
  <a href="{@@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/security/StandardNames.html#SSLContext">
            Java Cryptography Architecture Standard Algorithm Name
            Documentation
  </a>           for information about standard protocol names.
 @param provider the name of the provider.
 @return the new <code>SSLContext</code> object.
 @throw NoSuchAlgorithmExceptionif a SSLContextSpi
           implementation for the specified protocol is not
           available from the specified provider.
 @throw NoSuchProviderExceptionif the specified provider is not
           registered in the security provider list.
 @throw IllegalArgumentExceptionif the provider name is null or empty.
 @throw NullPointerExceptionif protocol is null.
 - seealso: java.security.Provider
 */
+ (JavaxNetSslSSLContext *)getInstanceWithNSString:(NSString *)protocol
                                      withNSString:(NSString *)provider;

/*!
 @brief Returns the protocol name of this <code>SSLContext</code> object.
 <p>This is the same name that was specified in one of the 
 <code>getInstance</code> calls that created this 
 <code>SSLContext</code> object.
 @return the protocol name of this <code>SSLContext</code> object.
 */
- (NSString *)getProtocol;

/*!
 @brief Returns the provider of this <code>SSLContext</code> object.
 @return the provider of this <code>SSLContext</code> object
 */
- (JavaSecurityProvider *)getProvider;

/*!
 @brief Returns the server session context, which represents the set of
  SSL sessions available for use during the handshake phase of
  server-side SSL sockets.
 <P>
  This context may be unavailable in some environments, in which
  case this method returns null. For example, when the underlying
  SSL provider does not provide an implementation of SSLSessionContext
  interface, this method returns null. A non-null session context
  is returned otherwise.
 @return server session context bound to this SSL context
 */
- (id<JavaxNetSslSSLSessionContext>)getServerSessionContext;

/*!
 @brief Returns a <code>ServerSocketFactory</code> object for
  this context.
 @return the <code>ServerSocketFactory</code> object
 @throw IllegalStateExceptionif the SSLContextImpl requires
           initialization and the <code>init()</code> has not been called
 */
- (JavaxNetSslSSLServerSocketFactory *)getServerSocketFactory;

/*!
 @brief Returns a <code>SocketFactory</code> object for this
  context.
 @return the <code>SocketFactory</code> object
 @throw IllegalStateExceptionif the SSLContextImpl requires
           initialization and the <code>init()</code> has not been called
 */
- (JavaxNetSslSSLSocketFactory *)getSocketFactory;

/*!
 @brief Returns a copy of the SSLParameters indicating the supported
  settings for this SSL context.
 <p>The parameters will always have the ciphersuites and protocols
  arrays set to non-null values.
 @return a copy of the SSLParameters object with the supported
    settings
 @throw UnsupportedOperationExceptionif the supported SSL parameters
    could not be obtained.
 @since 1.6
 */
- (JavaxNetSslSSLParameters *)getSupportedSSLParameters;

/*!
 @brief Initializes this context.Either of the first two parameters
  may be null in which case the installed security providers will
  be searched for the highest priority implementation of the
  appropriate factory.
 Likewise, the secure random parameter may
  be null in which case the default implementation will be used. 
 <P>
  Only the first instance of a particular key and/or trust manager
  implementation type in the array is used.  (For example, only
  the first javax.net.ssl.X509KeyManager in the array will be used.)
 @param km the sources of authentication keys or null
 @param tm the sources of peer authentication trust decisions or null
 @param random the source of randomness for this generator or null
 @throw KeyManagementExceptionif this operation fails
 */
- (void)init__WithJavaxNetSslKeyManagerArray:(IOSObjectArray *)km
            withJavaxNetSslTrustManagerArray:(IOSObjectArray *)tm
                withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Sets the default SSL context.It will be returned by subsequent calls
  to <code>getDefault</code>.
 The default context must be immediately usable
  and not require initialization.
 @param context the SSLContext
 @throw NullPointerExceptionif context is null
 @throw SecurityExceptionif a security manager exists and its
           <code>checkPermission</code> method does not allow
           <code>SSLPermission("setDefaultSSLContext")</code>
 @since 1.6
 */
+ (void)setDefaultWithJavaxNetSslSSLContext:(JavaxNetSslSSLContext *)context;

#pragma mark Protected

/*!
 @brief Creates an SSLContext object.
 @param contextSpi the delegate
 @param provider the provider
 @param protocol the protocol
 */
- (instancetype __nonnull)initWithJavaxNetSslSSLContextSpi:(JavaxNetSslSSLContextSpi *)contextSpi
                                  withJavaSecurityProvider:(JavaSecurityProvider *)provider
                                              withNSString:(NSString *)protocol;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(JavaxNetSslSSLContext)

FOUNDATION_EXPORT void JavaxNetSslSSLContext_initWithJavaxNetSslSSLContextSpi_withJavaSecurityProvider_withNSString_(JavaxNetSslSSLContext *self, JavaxNetSslSSLContextSpi *contextSpi, JavaSecurityProvider *provider, NSString *protocol);

FOUNDATION_EXPORT JavaxNetSslSSLContext *new_JavaxNetSslSSLContext_initWithJavaxNetSslSSLContextSpi_withJavaSecurityProvider_withNSString_(JavaxNetSslSSLContextSpi *contextSpi, JavaSecurityProvider *provider, NSString *protocol) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxNetSslSSLContext *create_JavaxNetSslSSLContext_initWithJavaxNetSslSSLContextSpi_withJavaSecurityProvider_withNSString_(JavaxNetSslSSLContextSpi *contextSpi, JavaSecurityProvider *provider, NSString *protocol);

FOUNDATION_EXPORT JavaxNetSslSSLContext *JavaxNetSslSSLContext_getDefault(void);

FOUNDATION_EXPORT void JavaxNetSslSSLContext_setDefaultWithJavaxNetSslSSLContext_(JavaxNetSslSSLContext *context);

FOUNDATION_EXPORT JavaxNetSslSSLContext *JavaxNetSslSSLContext_getInstanceWithNSString_(NSString *protocol);

FOUNDATION_EXPORT JavaxNetSslSSLContext *JavaxNetSslSSLContext_getInstanceWithNSString_withNSString_(NSString *protocol, NSString *provider);

FOUNDATION_EXPORT JavaxNetSslSSLContext *JavaxNetSslSSLContext_getInstanceWithNSString_withJavaSecurityProvider_(NSString *protocol, JavaSecurityProvider *provider);

J2OBJC_TYPE_LITERAL_HEADER(JavaxNetSslSSLContext)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaxNetSslSSLContext")
