//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/javax/net/ssl/X509ExtendedTrustManager.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxNetSslX509ExtendedTrustManager")
#ifdef RESTRICT_JavaxNetSslX509ExtendedTrustManager
#define INCLUDE_ALL_JavaxNetSslX509ExtendedTrustManager 0
#else
#define INCLUDE_ALL_JavaxNetSslX509ExtendedTrustManager 1
#endif
#undef RESTRICT_JavaxNetSslX509ExtendedTrustManager

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxNetSslX509ExtendedTrustManager_) && (INCLUDE_ALL_JavaxNetSslX509ExtendedTrustManager || defined(INCLUDE_JavaxNetSslX509ExtendedTrustManager))
#define JavaxNetSslX509ExtendedTrustManager_

#define RESTRICT_JavaxNetSslX509TrustManager 1
#define INCLUDE_JavaxNetSslX509TrustManager 1
#include "javax/net/ssl/X509TrustManager.h"

@class IOSObjectArray;
@class JavaNetSocket;
@class JavaxNetSslSSLEngine;

/*!
 @brief Extensions to the <code>X509TrustManager</code> interface to support
  SSL/TLS connection sensitive trust management.
 <p>
  To prevent man-in-the-middle attacks, hostname checks can be done
  to verify that the hostname in an end-entity certificate matches the
  targeted hostname.  TLS does not require such checks, but some protocols
  over TLS (such as HTTPS) do.  In earlier versions of the JDK, the
  certificate chain checks were done at the SSL/TLS layer, and the hostname
  verification checks were done at the layer over TLS.  This class allows
  for the checking to be done during a single call to this class. 
 <p>
  RFC 2830 defines the server identification specification for the "LDAPS"
  algorithm. RFC 2818 defines both the server identification and the
  client identification specification for the "HTTPS" algorithm.
 - seealso: X509TrustManager
 - seealso: HostnameVerifier
 @since 1.7
 */
@interface JavaxNetSslX509ExtendedTrustManager : NSObject < JavaxNetSslX509TrustManager >

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Given the partial or complete certificate chain provided by the
  peer, build and validate the certificate path based on the
  authentication type and ssl parameters.
 <p>
  The authentication type is determined by the actual certificate
  used. For instance, if RSAPublicKey is used, the authType
  should be "RSA". Checking is case-sensitive. 
 <p>
  If the <code>socket</code> parameter is an instance of 
 <code>javax.net.ssl.SSLSocket</code>, and the endpoint identification
  algorithm of the <code>SSLParameters</code> is non-empty, to prevent
  man-in-the-middle attacks, the address that the <code>socket</code>
  connected to should be checked against the peer's identity presented
  in the end-entity X509 certificate, as specified in the endpoint
  identification algorithm. 
 <p>
  If the <code>socket</code> parameter is an instance of 
 <code>javax.net.ssl.SSLSocket</code>, and the algorithm constraints of the 
 <code>SSLParameters</code> is non-null, for every certificate in the
  certification path, fields such as subject public key, the signature
  algorithm, key usage, extended key usage, etc. need to conform to the
  algorithm constraints in place on this socket.
 @param chain the peer certificate chain
 @param authType the key exchange algorithm used
 @param socket the socket used for this connection. This parameter         can be null, which indicates that implementations need not check
          the ssl parameters
 @throw IllegalArgumentExceptionif null or zero-length array is passed
         in for the <code>chain</code> parameter or if null or zero-length
         string is passed in for the <code>authType</code> parameter
 @throw CertificateExceptionif the certificate chain is not trusted
         by this TrustManager
 - seealso: SSLParameters#getEndpointIdentificationAlgorithm
 - seealso: SSLParameters#setEndpointIdentificationAlgorithm(String)
 - seealso: SSLParameters#getAlgorithmConstraints
 - seealso: SSLParameters#setAlgorithmConstraints(AlgorithmConstraints)
 */
- (void)checkClientTrustedWithJavaSecurityCertX509CertificateArray:(IOSObjectArray *)chain
                                                      withNSString:(NSString *)authType
                                                 withJavaNetSocket:(JavaNetSocket *)socket;

/*!
 @brief Given the partial or complete certificate chain provided by the
  peer, build and validate the certificate path based on the
  authentication type and ssl parameters.
 <p>
  The authentication type is determined by the actual certificate
  used. For instance, if RSAPublicKey is used, the authType
  should be "RSA". Checking is case-sensitive. 
 <p>
  If the <code>engine</code> parameter is available, and the endpoint
  identification algorithm of the <code>SSLParameters</code> is
  non-empty, to prevent man-in-the-middle attacks, the address that the 
 <code>engine</code> connected to should be checked against
  the peer's identity presented in the end-entity X509 certificate,
  as specified in the endpoint identification algorithm. 
 <p>
  If the <code>engine</code> parameter is available, and the algorithm
  constraints of the <code>SSLParameters</code> is non-null, for every
  certificate in the certification path, fields such as subject public
  key, the signature algorithm, key usage, extended key usage, etc.
  need to conform to the algorithm constraints in place on this engine.
 @param chain the peer certificate chain
 @param authType the key exchange algorithm used
 @param engine the engine used for this connection. This parameter         can be null, which indicates that implementations need not check
          the ssl parameters
 @throw IllegalArgumentExceptionif null or zero-length array is passed
         in for the <code>chain</code> parameter or if null or zero-length
         string is passed in for the <code>authType</code> parameter
 @throw CertificateExceptionif the certificate chain is not trusted
         by this TrustManager
 - seealso: SSLParameters#getEndpointIdentificationAlgorithm
 - seealso: SSLParameters#setEndpointIdentificationAlgorithm(String)
 - seealso: SSLParameters#getAlgorithmConstraints
 - seealso: SSLParameters#setAlgorithmConstraints(AlgorithmConstraints)
 */
- (void)checkClientTrustedWithJavaSecurityCertX509CertificateArray:(IOSObjectArray *)chain
                                                      withNSString:(NSString *)authType
                                          withJavaxNetSslSSLEngine:(JavaxNetSslSSLEngine *)engine;

/*!
 @brief Given the partial or complete certificate chain provided by the
  peer, build and validate the certificate path based on the
  authentication type and ssl parameters.
 <p>
  The authentication type is the key exchange algorithm portion
  of the cipher suites represented as a String, such as "RSA",
  "DHE_DSS". Note: for some exportable cipher suites, the key
  exchange algorithm is determined at run time during the
  handshake. For instance, for TLS_RSA_EXPORT_WITH_RC4_40_MD5,
  the authType should be RSA_EXPORT when an ephemeral RSA key is
  used for the key exchange, and RSA when the key from the server
  certificate is used. Checking is case-sensitive. 
 <p>
  If the <code>socket</code> parameter is an instance of 
 <code>javax.net.ssl.SSLSocket</code>, and the endpoint identification
  algorithm of the <code>SSLParameters</code> is non-empty, to prevent
  man-in-the-middle attacks, the address that the <code>socket</code>
  connected to should be checked against the peer's identity presented
  in the end-entity X509 certificate, as specified in the endpoint
  identification algorithm. 
 <p>
  If the <code>socket</code> parameter is an instance of 
 <code>javax.net.ssl.SSLSocket</code>, and the algorithm constraints of the
   <code>SSLParameters</code> is non-null, for every certificate in the
  certification path, fields such as subject public key, the signature
  algorithm, key usage, extended key usage, etc. need to conform to the
  algorithm constraints in place on this socket.
 @param chain the peer certificate chain
 @param authType the key exchange algorithm used
 @param socket the socket used for this connection. This parameter         can be null, which indicates that implementations need not check
          the ssl parameters
 @throw IllegalArgumentExceptionif null or zero-length array is passed
         in for the <code>chain</code> parameter or if null or zero-length
         string is passed in for the <code>authType</code> parameter
 @throw CertificateExceptionif the certificate chain is not trusted
         by this TrustManager
 - seealso: SSLParameters#getEndpointIdentificationAlgorithm
 - seealso: SSLParameters#setEndpointIdentificationAlgorithm(String)
 - seealso: SSLParameters#getAlgorithmConstraints
 - seealso: SSLParameters#setAlgorithmConstraints(AlgorithmConstraints)
 */
- (void)checkServerTrustedWithJavaSecurityCertX509CertificateArray:(IOSObjectArray *)chain
                                                      withNSString:(NSString *)authType
                                                 withJavaNetSocket:(JavaNetSocket *)socket;

/*!
 @brief Given the partial or complete certificate chain provided by the
  peer, build and validate the certificate path based on the
  authentication type and ssl parameters.
 <p>
  The authentication type is the key exchange algorithm portion
  of the cipher suites represented as a String, such as "RSA",
  "DHE_DSS". Note: for some exportable cipher suites, the key
  exchange algorithm is determined at run time during the
  handshake. For instance, for TLS_RSA_EXPORT_WITH_RC4_40_MD5,
  the authType should be RSA_EXPORT when an ephemeral RSA key is
  used for the key exchange, and RSA when the key from the server
  certificate is used. Checking is case-sensitive. 
 <p>
  If the <code>engine</code> parameter is available, and the endpoint
  identification algorithm of the <code>SSLParameters</code> is
  non-empty, to prevent man-in-the-middle attacks, the address that the 
 <code>engine</code> connected to should be checked against
  the peer's identity presented in the end-entity X509 certificate,
  as specified in the endpoint identification algorithm. 
 <p>
  If the <code>engine</code> parameter is available, and the algorithm
  constraints of the <code>SSLParameters</code> is non-null, for every
  certificate in the certification path, fields such as subject public
  key, the signature algorithm, key usage, extended key usage, etc.
  need to conform to the algorithm constraints in place on this engine.
 @param chain the peer certificate chain
 @param authType the key exchange algorithm used
 @param engine the engine used for this connection. This parameter         can be null, which indicates that implementations need not check
          the ssl parameters
 @throw IllegalArgumentExceptionif null or zero-length array is passed
         in for the <code>chain</code> parameter or if null or zero-length
         string is passed in for the <code>authType</code> parameter
 @throw CertificateExceptionif the certificate chain is not trusted
         by this TrustManager
 - seealso: SSLParameters#getEndpointIdentificationAlgorithm
 - seealso: SSLParameters#setEndpointIdentificationAlgorithm(String)
 - seealso: SSLParameters#getAlgorithmConstraints
 - seealso: SSLParameters#setAlgorithmConstraints(AlgorithmConstraints)
 */
- (void)checkServerTrustedWithJavaSecurityCertX509CertificateArray:(IOSObjectArray *)chain
                                                      withNSString:(NSString *)authType
                                          withJavaxNetSslSSLEngine:(JavaxNetSslSSLEngine *)engine;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxNetSslX509ExtendedTrustManager)

FOUNDATION_EXPORT void JavaxNetSslX509ExtendedTrustManager_init(JavaxNetSslX509ExtendedTrustManager *self);

J2OBJC_TYPE_LITERAL_HEADER(JavaxNetSslX509ExtendedTrustManager)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaxNetSslX509ExtendedTrustManager")
