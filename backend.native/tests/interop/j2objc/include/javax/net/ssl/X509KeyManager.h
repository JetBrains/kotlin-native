//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/javax/net/ssl/X509KeyManager.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxNetSslX509KeyManager")
#ifdef RESTRICT_JavaxNetSslX509KeyManager
#define INCLUDE_ALL_JavaxNetSslX509KeyManager 0
#else
#define INCLUDE_ALL_JavaxNetSslX509KeyManager 1
#endif
#undef RESTRICT_JavaxNetSslX509KeyManager

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxNetSslX509KeyManager_) && (INCLUDE_ALL_JavaxNetSslX509KeyManager || defined(INCLUDE_JavaxNetSslX509KeyManager))
#define JavaxNetSslX509KeyManager_

#define RESTRICT_JavaxNetSslKeyManager 1
#define INCLUDE_JavaxNetSslKeyManager 1
#include "javax/net/ssl/KeyManager.h"

@class IOSObjectArray;
@class JavaNetSocket;
@protocol JavaSecurityPrivateKey;

/*!
 @brief Instances of this interface manage which X509 certificate-based
  key pairs are used to authenticate the local side of a secure
  socket.
 <P>
  During secure socket negotiations, implentations
  call methods in this interface to: 
 <UL>
  <LI> determine the set of aliases that are available for negotiations
       based on the criteria presented, 
 <LI> select the <i> best alias</i> based on
       the criteria presented, and 
 <LI> obtain the corresponding key material for given aliases. 
 </UL>
  <P>
  Note: the X509ExtendedKeyManager should be used in favor of this
  class.
 @since 1.4
 */
@protocol JavaxNetSslX509KeyManager < JavaxNetSslKeyManager, JavaObject >

/*!
 @brief Get the matching aliases for authenticating the client side of a secure
  socket given the public key type and the list of
  certificate issuer authorities recognized by the peer (if any).
 @param keyType the key algorithm type name
 @param issuers the list of acceptable CA issuer subject names,           or null if it does not matter which issuers are used.
 @return an array of the matching alias names, or null if there
           were no matches.
 */
- (IOSObjectArray *)getClientAliasesWithNSString:(NSString *)keyType
                  withJavaSecurityPrincipalArray:(IOSObjectArray *)issuers;

/*!
 @brief Choose an alias to authenticate the client side of a secure
  socket given the public key type and the list of
  certificate issuer authorities recognized by the peer (if any).
 @param keyType the key algorithm type name(s), ordered           with the most-preferred key type first.
 @param issuers the list of acceptable CA issuer subject names            or null if it does not matter which issuers are used.
 @param socket the socket to be used for this connection.  This           parameter can be null, which indicates that
            implementations are free to select an alias applicable
            to any socket.
 @return the alias name for the desired key, or null if there
           are no matches.
 */
- (NSString *)chooseClientAliasWithNSStringArray:(IOSObjectArray *)keyType
                  withJavaSecurityPrincipalArray:(IOSObjectArray *)issuers
                               withJavaNetSocket:(JavaNetSocket *)socket;

/*!
 @brief Get the matching aliases for authenticating the server side of a secure
  socket given the public key type and the list of
  certificate issuer authorities recognized by the peer (if any).
 @param keyType the key algorithm type name
 @param issuers the list of acceptable CA issuer subject names           or null if it does not matter which issuers are used.
 @return an array of the matching alias names, or null
           if there were no matches.
 */
- (IOSObjectArray *)getServerAliasesWithNSString:(NSString *)keyType
                  withJavaSecurityPrincipalArray:(IOSObjectArray *)issuers;

/*!
 @brief Choose an alias to authenticate the server side of a secure
  socket given the public key type and the list of
  certificate issuer authorities recognized by the peer (if any).
 @param keyType the key algorithm type name.
 @param issuers the list of acceptable CA issuer subject names           or null if it does not matter which issuers are used.
 @param socket the socket to be used for this connection.  This           parameter can be null, which indicates that
            implementations are free to select an alias applicable
            to any socket.
 @return the alias name for the desired key, or null if there
           are no matches.
 */
- (NSString *)chooseServerAliasWithNSString:(NSString *)keyType
             withJavaSecurityPrincipalArray:(IOSObjectArray *)issuers
                          withJavaNetSocket:(JavaNetSocket *)socket;

/*!
 @brief Returns the certificate chain associated with the given alias.
 @param alias the alias name
 @return the certificate chain (ordered with the user's certificate first
           and the root certificate authority last), or null
           if the alias can't be found.
 */
- (IOSObjectArray *)getCertificateChainWithNSString:(NSString *)alias;

/*!
 @brief Returns the key associated with the given alias.
 @param alias the alias name
 @return the requested key, or null if the alias can't be found.
 */
- (id<JavaSecurityPrivateKey>)getPrivateKeyWithNSString:(NSString *)alias;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxNetSslX509KeyManager)

J2OBJC_TYPE_LITERAL_HEADER(JavaxNetSslX509KeyManager)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaxNetSslX509KeyManager")
