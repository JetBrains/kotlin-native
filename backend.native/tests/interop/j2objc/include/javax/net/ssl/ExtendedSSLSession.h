//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/javax/net/ssl/ExtendedSSLSession.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxNetSslExtendedSSLSession")
#ifdef RESTRICT_JavaxNetSslExtendedSSLSession
#define INCLUDE_ALL_JavaxNetSslExtendedSSLSession 0
#else
#define INCLUDE_ALL_JavaxNetSslExtendedSSLSession 1
#endif
#undef RESTRICT_JavaxNetSslExtendedSSLSession

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxNetSslExtendedSSLSession_) && (INCLUDE_ALL_JavaxNetSslExtendedSSLSession || defined(INCLUDE_JavaxNetSslExtendedSSLSession))
#define JavaxNetSslExtendedSSLSession_

#define RESTRICT_JavaxNetSslSSLSession 1
#define INCLUDE_JavaxNetSslSSLSession 1
#include "javax/net/ssl/SSLSession.h"

@class IOSObjectArray;
@protocol JavaUtilList;

/*!
 @brief Extends the <code>SSLSession</code> interface to support additional
  session attributes.
 @since 1.7
 */
@interface JavaxNetSslExtendedSSLSession : NSObject < JavaxNetSslSSLSession >

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Obtains an array of supported signature algorithms that the local side
  is willing to use.
 <p>
  Note: this method is used to indicate to the peer which signature
  algorithms may be used for digital signatures in TLS 1.2. It is
  not meaningful for TLS versions prior to 1.2. 
 <p>
  The signature algorithm name must be a standard Java Security
  name (such as "SHA1withRSA", "SHA256withECDSA", and so on).
  See Appendix A in the <a href="{@@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/security/crypto/CryptoSpec.html#AppA">
  Java Cryptography Architecture API Specification &amp; Reference </a>
  for information about standard algorithm names. 
 <p>
  Note: the local supported signature algorithms should conform to
  the algorithm constraints specified by 
 <code>getAlgorithmConstraints()</code>
  method in <code>SSLParameters</code>.
 @return An array of supported signature algorithms, in descending
      order of preference.  The return value is an empty array if
      no signature algorithm is supported.
 - seealso: SSLParameters#getAlgorithmConstraints
 */
- (IOSObjectArray *)getLocalSupportedSignatureAlgorithms;

/*!
 @brief Obtains an array of supported signature algorithms that the peer is
  able to use.
 <p>
  Note: this method is used to indicate to the local side which signature
  algorithms may be used for digital signatures in TLS 1.2. It is
  not meaningful for TLS versions prior to 1.2. 
 <p>
  The signature algorithm name must be a standard Java Security
  name (such as "SHA1withRSA", "SHA256withECDSA", and so on).
  See Appendix A in the <a href="{@@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/security/crypto/CryptoSpec.html#AppA">
  Java Cryptography Architecture API Specification &amp; Reference </a>
  for information about standard algorithm names.
 @return An array of supported signature algorithms, in descending
      order of preference.  The return value is an empty array if
      the peer has not sent the supported signature algorithms.
 - seealso: X509KeyManager
 - seealso: X509ExtendedKeyManager
 */
- (IOSObjectArray *)getPeerSupportedSignatureAlgorithms;

/*!
 @brief Obtains a <code>List</code> containing all <code>SNIServerName</code>s
  of the requested Server Name Indication (SNI) extension.
 <P>
  In server mode, unless the return <code>List</code> is empty,
  the server should use the requested server names to guide its
  selection of an appropriate authentication certificate, and/or
  other aspects of security policy. 
 <P>
  In client mode, unless the return <code>List</code> is empty,
  the client should use the requested server names to guide its
  endpoint identification of the peer's identity, and/or
  other aspects of security policy.
 @return a non-null immutable list of <code>SNIServerName</code>s of the
          requested server name indications. The returned list may be
          empty if no server name indications were requested.
 @throw UnsupportedOperationExceptionif the underlying provider
          does not implement the operation
 - seealso: SNIServerName
 - seealso: X509ExtendedTrustManager
 - seealso: X509ExtendedKeyManager
 @since 1.8
 */
- (id<JavaUtilList>)getRequestedServerNames;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxNetSslExtendedSSLSession)

FOUNDATION_EXPORT void JavaxNetSslExtendedSSLSession_init(JavaxNetSslExtendedSSLSession *self);

J2OBJC_TYPE_LITERAL_HEADER(JavaxNetSslExtendedSSLSession)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaxNetSslExtendedSSLSession")
