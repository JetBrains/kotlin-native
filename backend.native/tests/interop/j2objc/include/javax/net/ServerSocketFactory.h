//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/javax/net/ServerSocketFactory.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxNetServerSocketFactory")
#ifdef RESTRICT_JavaxNetServerSocketFactory
#define INCLUDE_ALL_JavaxNetServerSocketFactory 0
#else
#define INCLUDE_ALL_JavaxNetServerSocketFactory 1
#endif
#undef RESTRICT_JavaxNetServerSocketFactory
#ifdef INCLUDE_JavaxNetDefaultServerSocketFactory
#define INCLUDE_JavaxNetServerSocketFactory 1
#endif

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxNetServerSocketFactory_) && (INCLUDE_ALL_JavaxNetServerSocketFactory || defined(INCLUDE_JavaxNetServerSocketFactory))
#define JavaxNetServerSocketFactory_

@class JavaNetInetAddress;
@class JavaNetServerSocket;

/*!
 @brief This class creates server sockets.It may be subclassed by other
  factories, which create particular types of server sockets.
 This
  provides a general framework for the addition of public socket-level
  functionality.  It is the server side analogue of a socket factory,
  and similarly provides a way to capture a variety of policies related
  to the sockets being constructed. 
 <P> Like socket factories, server Socket factory instances have
  methods used to create sockets. There is also an environment
  specific default server socket factory; frameworks will often use
  their own customized factory.
 @since 1.4
 - seealso: SocketFactory
 @author David Brownell
 */
@interface JavaxNetServerSocketFactory : NSObject

#pragma mark Public

/*!
 @brief Returns an unbound server socket.The socket is configured with
  the socket options (such as accept timeout) given to this factory.
 @return the unbound socket
 @throw IOExceptionif the socket cannot be created
 - seealso: java.net.ServerSocket#bind(java.net.SocketAddress)
 - seealso: java.net.ServerSocket#bind(java.net.SocketAddress, int)
 - seealso: java.net.ServerSocket#ServerSocket()
 */
- (JavaNetServerSocket *)createServerSocket;

/*!
 @brief Returns a server socket bound to the specified port.
 The socket is configured with the socket options
  (such as accept timeout) given to this factory. 
 <P>
  If there is a security manager, its <code>checkListen</code>
  method is called with the <code>port</code> argument as its
  argument to ensure the operation is allowed. This could result
  in a SecurityException.
 @param port the port to listen to
 @return the <code>ServerSocket</code>
 @throw IOExceptionfor networking errors
 @throw SecurityExceptionif a security manager exists and its
          <code>checkListen</code> method doesn't allow the operation.
 @throw IllegalArgumentExceptionif the port parameter is outside the
          specified range of valid port values, which is between 0 and
          65535, inclusive.
 - seealso: SecurityManager#checkListen
 - seealso: java.net.ServerSocket#ServerSocket(int)
 */
- (JavaNetServerSocket *)createServerSocketWithInt:(jint)port;

/*!
 @brief Returns a server socket bound to the specified port, and uses the
  specified connection backlog.The socket is configured with
  the socket options (such as accept timeout) given to this factory.
 <P>
  The <code>backlog</code> argument must be a positive
  value greater than 0. If the value passed if equal or less
  than 0, then the default value will be assumed. 
 <P>
  If there is a security manager, its <code>checkListen</code>
  method is called with the <code>port</code> argument as its
  argument to ensure the operation is allowed. This could result
  in a SecurityException.
 @param port the port to listen to
 @param backlog how many connections are queued
 @return the <code>ServerSocket</code>
 @throw IOExceptionfor networking errors
 @throw SecurityExceptionif a security manager exists and its
          <code>checkListen</code> method doesn't allow the operation.
 @throw IllegalArgumentExceptionif the port parameter is outside the
          specified range of valid port values, which is between 0 and
          65535, inclusive.
 - seealso: SecurityManager#checkListen
 - seealso: java.net.ServerSocket#ServerSocket(int, int)
 */
- (JavaNetServerSocket *)createServerSocketWithInt:(jint)port
                                           withInt:(jint)backlog;

/*!
 @brief Returns a server socket bound to the specified port,
  with a specified listen backlog and local IP.
 <P>
  The <code>ifAddress</code> argument can be used on a multi-homed
  host for a <code>ServerSocket</code> that will only accept connect
  requests to one of its addresses. If <code>ifAddress</code> is null,
  it will accept connections on all local addresses. The socket is
  configured with the socket options (such as accept timeout) given
  to this factory. 
 <P>
  The <code>backlog</code> argument must be a positive
  value greater than 0. If the value passed if equal or less
  than 0, then the default value will be assumed. 
 <P>
  If there is a security manager, its <code>checkListen</code>
  method is called with the <code>port</code> argument as its
  argument to ensure the operation is allowed. This could result
  in a SecurityException.
 @param port the port to listen to
 @param backlog how many connections are queued
 @param ifAddress the network interface address to use
 @return the <code>ServerSocket</code>
 @throw IOExceptionfor networking errors
 @throw SecurityExceptionif a security manager exists and its
          <code>checkListen</code> method doesn't allow the operation.
 @throw IllegalArgumentExceptionif the port parameter is outside the
          specified range of valid port values, which is between 0 and
          65535, inclusive.
 - seealso: SecurityManager#checkListen
 - seealso: java.net.ServerSocket#ServerSocket(int, int, java.net.InetAddress)
 */
- (JavaNetServerSocket *)createServerSocketWithInt:(jint)port
                                           withInt:(jint)backlog
                            withJavaNetInetAddress:(JavaNetInetAddress *)ifAddress;

/*!
 @brief Returns a copy of the environment's default socket factory.
 @return the <code>ServerSocketFactory</code>
 */
+ (JavaxNetServerSocketFactory *)getDefault;

#pragma mark Protected

/*!
 @brief Creates a server socket factory.
 */
- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxNetServerSocketFactory)

FOUNDATION_EXPORT void JavaxNetServerSocketFactory_init(JavaxNetServerSocketFactory *self);

FOUNDATION_EXPORT JavaxNetServerSocketFactory *JavaxNetServerSocketFactory_getDefault(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaxNetServerSocketFactory)

#endif

#if !defined (JavaxNetDefaultServerSocketFactory_) && (INCLUDE_ALL_JavaxNetServerSocketFactory || defined(INCLUDE_JavaxNetDefaultServerSocketFactory))
#define JavaxNetDefaultServerSocketFactory_

@class JavaNetInetAddress;
@class JavaNetServerSocket;

@interface JavaxNetDefaultServerSocketFactory : JavaxNetServerSocketFactory

#pragma mark Public

- (JavaNetServerSocket *)createServerSocket;

- (JavaNetServerSocket *)createServerSocketWithInt:(jint)port;

- (JavaNetServerSocket *)createServerSocketWithInt:(jint)port
                                           withInt:(jint)backlog;

- (JavaNetServerSocket *)createServerSocketWithInt:(jint)port
                                           withInt:(jint)backlog
                            withJavaNetInetAddress:(JavaNetInetAddress *)ifAddress;

#pragma mark Package-Private

- (instancetype __nonnull)initPackagePrivate;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxNetDefaultServerSocketFactory)

FOUNDATION_EXPORT void JavaxNetDefaultServerSocketFactory_initPackagePrivate(JavaxNetDefaultServerSocketFactory *self);

FOUNDATION_EXPORT JavaxNetDefaultServerSocketFactory *new_JavaxNetDefaultServerSocketFactory_initPackagePrivate(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxNetDefaultServerSocketFactory *create_JavaxNetDefaultServerSocketFactory_initPackagePrivate(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaxNetDefaultServerSocketFactory)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaxNetServerSocketFactory")
