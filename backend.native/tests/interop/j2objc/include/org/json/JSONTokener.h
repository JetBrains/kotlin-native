//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/json/src/main/java/org/json/JSONTokener.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJsonJSONTokener")
#ifdef RESTRICT_OrgJsonJSONTokener
#define INCLUDE_ALL_OrgJsonJSONTokener 0
#else
#define INCLUDE_ALL_OrgJsonJSONTokener 1
#endif
#undef RESTRICT_OrgJsonJSONTokener

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgJsonJSONTokener_) && (INCLUDE_ALL_OrgJsonJSONTokener || defined(INCLUDE_OrgJsonJSONTokener))
#define OrgJsonJSONTokener_

@class OrgJsonJSONException;

/*!
 @brief Parses a JSON (<a href="http://www.ietf.org/rfc/rfc4627.txt">RFC 4627</a>)
  encoded string into the corresponding object.Most clients of
  this class will use only need the <code>constructor</code>
  and <code>nextValue</code> method.
 Example usage: @code

  String json = "{"
          + "  \"query\": \"Pizza\", "
          + "  \"locations\": [ 94043, 90210 ] "
          + "}";
  JSONObject object = (JSONObject) new JSONTokener(json).nextValue();
  String query = object.getString("query");
  JSONArray locations = object.getJSONArray("locations");
@endcode
  
 <p>For best interoperability and performance use JSON that complies with
  RFC 4627, such as that generated by <code>JSONStringer</code>. For legacy reasons
  this parser is lenient, so a successful parse does not indicate that the
  input string was valid JSON. All of the following syntax errors will be
  ignored: 
 <ul>
    <li>End of line comments starting with <code>//</code> or <code>#</code> and ending
        with a newline character.   
 <li>C-style comments starting with <code>/\*</code> and ending with
        <code>*</code><code>/</code>. Such comments may not be nested.
    <li>Strings that are unquoted or <code>'single quoted'</code>.
    <li>Hexadecimal integers prefixed with <code>0x</code> or <code>0X</code>.
    <li>Octal integers prefixed with <code>0</code>.
    <li>Array elements separated by <code>;</code>.
    <li>Unnecessary array separators. These are interpreted as if null was the
        omitted value.   
 <li>Key-value pairs separated by <code>=</code> or <code>=></code>.
    <li>Key-value pairs separated by <code>;</code>.
  </ul>
  
 <p>Each tokener may be used to parse a single JSON string. Instances of this
  class are not thread safe. Although this class is nonfinal, it was not
  designed for inheritance and should not be subclassed. In particular,
  self-use by overrideable methods is not specified. See <i>Effective Java</i>
  Item 17, "Design and Document or inheritance or else prohibit it" for further
  information.
 */
@interface OrgJsonJSONTokener : NSObject

#pragma mark Public

/*!
 @param inArg JSON encoded string. Null is not permitted and will yield a      tokener that throws 
 <code>NullPointerExceptions</code>  when methods are      called.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)inArg;

/*!
 @brief Unreads the most recent character of input.If no input characters have
  been read, the input is unchanged.
 */
- (void)back;

/*!
 @brief Returns the integer [0..15] value for the given hex character, or -1
  for non-hex input.
 @param hex a character in the ranges [0-9], [A-F] or [a-f]. Any other      character will yield a -1 result.
 */
+ (jint)dehexcharWithChar:(jchar)hex;

/*!
 @brief Returns true until the input has been exhausted.
 */
- (jboolean)more;

/*!
 @brief Returns the next available character, or the null character '\0' if all
  input has been exhausted.The return value of this method is ambiguous
  for JSON strings that contain the character '\0'.
 */
- (jchar)next;

/*!
 @brief Returns the next available character if it equals <code>c</code>.Otherwise an
  exception is thrown.
 */
- (jchar)nextWithChar:(jchar)c;

/*!
 @brief Returns the next <code>length</code> characters of the input.
 <p>The returned string shares its backing character array with this
  tokener's input string. If a reference to the returned string may be held
  indefinitely, you should use <code>new String(result)</code> to copy it first
  to avoid memory leaks.
 @throw JSONExceptionif the remaining input is not long enough to
      satisfy this request.
 */
- (NSString *)nextWithInt:(jint)length;

/*!
 @brief Returns the next character that is not whitespace and does not belong to
  a comment.If the input is exhausted before such a character can be
  found, the null character '\0' is returned.
 The return value of this
  method is ambiguous for JSON strings that contain the character '\0'.
 */
- (jchar)nextClean;

/*!
 @brief Returns the string up to but not including <code>quote</code>, unescaping any
  character escape sequences encountered along the way.The opening quote
  should have already been read.
 This consumes the closing quote, but does
  not include it in the returned string.
 @param quote either ' or ".
 */
- (NSString *)nextStringWithChar:(jchar)quote;

/*!
 @brief Equivalent to <code>nextTo(String.valueOf(excluded))</code>.
 */
- (NSString *)nextToWithChar:(jchar)excluded;

/*!
 @brief Returns the <code>trimmed</code> string holding the characters up
  to but not including the first of: 
 <ul>
    <li>any character in <code>excluded</code>
    <li>a newline character '\n'
    <li>a carriage return '\r' 
 </ul>
 <p>The returned string shares its backing character array with this
  tokener's input string.
 If a reference to the returned string may be held
  indefinitely, you should use <code>new String(result)</code> to copy it first
  to avoid memory leaks.
 @return a possibly-empty string
 */
- (NSString *)nextToWithNSString:(NSString *)excluded;

/*!
 @brief Returns the next value from the input.
 @return a <code>JSONObject</code>, <code>JSONArray</code>, String, Boolean,
      Integer, Long, Double or <code>JSONObject.NULL</code>.
 @throw JSONExceptionif the input is malformed.
 */
- (id)nextValue;

/*!
 @brief Advances past all input up to and including the next occurrence of 
 <code>thru</code>.If the remaining input doesn't contain <code>thru</code>, the
  input is exhausted.
 */
- (void)skipPastWithNSString:(NSString *)thru;

/*!
 @brief Advances past all input up to but not including the next occurrence of 
 <code>to</code>.If the remaining input doesn't contain <code>to</code>, the input
  is unchanged.
 */
- (jchar)skipToWithChar:(jchar)to;

/*!
 @brief Returns an exception containing the given message plus the current
  position and the entire input string.
 */
- (OrgJsonJSONException *)syntaxErrorWithNSString:(NSString *)message;

/*!
 @brief Returns the current position and the entire input string.
 */
- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJsonJSONTokener)

FOUNDATION_EXPORT void OrgJsonJSONTokener_initWithNSString_(OrgJsonJSONTokener *self, NSString *inArg);

FOUNDATION_EXPORT OrgJsonJSONTokener *new_OrgJsonJSONTokener_initWithNSString_(NSString *inArg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJsonJSONTokener *create_OrgJsonJSONTokener_initWithNSString_(NSString *inArg);

FOUNDATION_EXPORT jint OrgJsonJSONTokener_dehexcharWithChar_(jchar hex);

J2OBJC_TYPE_LITERAL_HEADER(OrgJsonJSONTokener)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgJsonJSONTokener")
