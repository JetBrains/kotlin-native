//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/json/src/main/java/org/json/JSON.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJsonJSON")
#ifdef RESTRICT_OrgJsonJSON
#define INCLUDE_ALL_OrgJsonJSON 0
#else
#define INCLUDE_ALL_OrgJsonJSON 1
#endif
#undef RESTRICT_OrgJsonJSON

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgJsonJSON_) && (INCLUDE_ALL_OrgJsonJSON || defined(INCLUDE_OrgJsonJSON))
#define OrgJsonJSON_

@class JavaLangBoolean;
@class JavaLangDouble;
@class JavaLangInteger;
@class JavaLangLong;
@class OrgJsonJSONException;

@interface OrgJsonJSON : NSObject

#pragma mark Public

+ (OrgJsonJSONException *)typeMismatchWithId:(id)indexOrName
                                      withId:(id)actual
                                withNSString:(NSString *)requiredType;

+ (OrgJsonJSONException *)typeMismatchWithId:(id)actual
                                withNSString:(NSString *)requiredType;

#pragma mark Package-Private

- (instancetype __nonnull)initPackagePrivate;

/*!
 @brief Returns the input if it is a JSON-permissible value; throws otherwise.
 */
+ (jdouble)checkDoubleWithDouble:(jdouble)d;

+ (JavaLangBoolean *)toBooleanWithId:(id)value;

+ (JavaLangDouble *)toDoubleWithId:(id)value;

+ (JavaLangInteger *)toIntegerWithId:(id)value;

+ (JavaLangLong *)toLongWithId:(id)value;

+ (NSString *)toStringWithId:(id)value;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJsonJSON)

FOUNDATION_EXPORT void OrgJsonJSON_initPackagePrivate(OrgJsonJSON *self);

FOUNDATION_EXPORT OrgJsonJSON *new_OrgJsonJSON_initPackagePrivate(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJsonJSON *create_OrgJsonJSON_initPackagePrivate(void);

FOUNDATION_EXPORT jdouble OrgJsonJSON_checkDoubleWithDouble_(jdouble d);

FOUNDATION_EXPORT JavaLangBoolean *OrgJsonJSON_toBooleanWithId_(id value);

FOUNDATION_EXPORT JavaLangDouble *OrgJsonJSON_toDoubleWithId_(id value);

FOUNDATION_EXPORT JavaLangInteger *OrgJsonJSON_toIntegerWithId_(id value);

FOUNDATION_EXPORT JavaLangLong *OrgJsonJSON_toLongWithId_(id value);

FOUNDATION_EXPORT NSString *OrgJsonJSON_toStringWithId_(id value);

FOUNDATION_EXPORT OrgJsonJSONException *OrgJsonJSON_typeMismatchWithId_withId_withNSString_(id indexOrName, id actual, NSString *requiredType);

FOUNDATION_EXPORT OrgJsonJSONException *OrgJsonJSON_typeMismatchWithId_withNSString_(id actual, NSString *requiredType);

J2OBJC_TYPE_LITERAL_HEADER(OrgJsonJSON)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgJsonJSON")
