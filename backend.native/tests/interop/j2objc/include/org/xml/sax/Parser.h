//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/luni/src/main/java/org/xml/sax/Parser.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgXmlSaxParser")
#ifdef RESTRICT_OrgXmlSaxParser
#define INCLUDE_ALL_OrgXmlSaxParser 0
#else
#define INCLUDE_ALL_OrgXmlSaxParser 1
#endif
#undef RESTRICT_OrgXmlSaxParser

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgXmlSaxParser_) && (INCLUDE_ALL_OrgXmlSaxParser || defined(INCLUDE_OrgXmlSaxParser))
#define OrgXmlSaxParser_

@class JavaUtilLocale;
@class OrgXmlSaxInputSource;
@protocol OrgXmlSaxDTDHandler;
@protocol OrgXmlSaxDocumentHandler;
@protocol OrgXmlSaxEntityResolver;
@protocol OrgXmlSaxErrorHandler;

/*!
 @brief Basic interface for SAX (Simple API for XML) parsers.
 <blockquote>
  <em>This module, both source code and documentation, is in the
  Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
  See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>
  for further information. 
 </blockquote>
  
 <p>This was the main event supplier interface for SAX1; it has
  been replaced in SAX2 by <code>XMLReader</code>,
  which includes Namespace support and sophisticated configurability
  and extensibility.</p>
  
 <p>All SAX1 parsers must implement this basic interface: it allows
  applications to register handlers for different types of events
  and to initiate a parse from a URI, or a character stream.</p>
  
 <p>All SAX1 parsers must also implement a zero-argument constructor
  (though other constructors are also allowed).</p>
  
 <p>SAX1 parsers are reusable but not re-entrant: the application
  may reuse a parser object (possibly with a different input source)
  once the first parse has completed successfully, but it may not
  invoke the parse() methods recursively within a parse.</p>
 @since SAX 1.0
 @author David Megginson
 @version 2.0.1 (sax2r2)
 - seealso: org.xml.sax.EntityResolver
 - seealso: org.xml.sax.DTDHandler
 - seealso: org.xml.sax.DocumentHandler
 - seealso: org.xml.sax.ErrorHandler
 - seealso: org.xml.sax.HandlerBase
 - seealso: org.xml.sax.InputSource
 */
__attribute__((deprecated))
@protocol OrgXmlSaxParser < JavaObject >

/*!
 @brief Allow an application to request a locale for errors and warnings.
 <p>SAX parsers are not required to provide localisation for errors
  and warnings; if they cannot support the requested locale,
  however, they must throw a SAX exception.  Applications may
  not request a locale change in the middle of a parse.</p>
 @param locale A Java Locale object.
 @throw org.xml.sax.SAXExceptionThrows an exception
             (using the previous or default locale) if the
             requested locale is not supported.
 - seealso: org.xml.sax.SAXException
 - seealso: org.xml.sax.SAXParseException
 */
- (void)setLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Allow an application to register a custom entity resolver.
 <p>If the application does not register an entity resolver, the
  SAX parser will resolve system identifiers and open connections
  to entities itself (this is the default behaviour implemented in
  HandlerBase).</p>
  
 <p>Applications may register a new or different entity resolver
  in the middle of a parse, and the SAX parser must begin using
  the new resolver immediately.</p>
 @param resolver The object for resolving entities.
 - seealso: EntityResolver
 - seealso: HandlerBase
 */
- (void)setEntityResolverWithOrgXmlSaxEntityResolver:(id<OrgXmlSaxEntityResolver>)resolver;

/*!
 @brief Allow an application to register a DTD event handler.
 <p>If the application does not register a DTD handler, all DTD
  events reported by the SAX parser will be silently
  ignored (this is the default behaviour implemented by
  HandlerBase).</p>
  
 <p>Applications may register a new or different
  handler in the middle of a parse, and the SAX parser must
  begin using the new handler immediately.</p>
 @param handler The DTD handler.
 - seealso: DTDHandler
 - seealso: HandlerBase
 */
- (void)setDTDHandlerWithOrgXmlSaxDTDHandler:(id<OrgXmlSaxDTDHandler>)handler;

/*!
 @brief Allow an application to register a document event handler.
 <p>If the application does not register a document handler, all
  document events reported by the SAX parser will be silently
  ignored (this is the default behaviour implemented by
  HandlerBase).</p>
  
 <p>Applications may register a new or different handler in the
  middle of a parse, and the SAX parser must begin using the new
  handler immediately.</p>
 @param handler The document handler.
 - seealso: DocumentHandler
 - seealso: HandlerBase
 */
- (void)setDocumentHandlerWithOrgXmlSaxDocumentHandler:(id<OrgXmlSaxDocumentHandler>)handler;

/*!
 @brief Allow an application to register an error event handler.
 <p>If the application does not register an error event handler,
  all error events reported by the SAX parser will be silently
  ignored, except for fatalError, which will throw a SAXException
  (this is the default behaviour implemented by HandlerBase).</p>
  
 <p>Applications may register a new or different handler in the
  middle of a parse, and the SAX parser must begin using the new
  handler immediately.</p>
 @param handler The error handler.
 - seealso: ErrorHandler
 - seealso: SAXException
 - seealso: HandlerBase
 */
- (void)setErrorHandlerWithOrgXmlSaxErrorHandler:(id<OrgXmlSaxErrorHandler>)handler;

/*!
 @brief Parse an XML document.
 <p>The application can use this method to instruct the SAX parser
  to begin parsing an XML document from any valid input
  source (a character stream, a byte stream, or a URI).</p>
  
 <p>Applications may not invoke this method while a parse is in
  progress (they should create a new Parser instead for each
  additional XML document).  Once a parse is complete, an
  application may reuse the same Parser object, possibly with a
  different input source.</p>
 @param source The input source for the top-level of the         XML document.
 @throw org.xml.sax.SAXExceptionAny SAX exception, possibly
             wrapping another exception.
 @throw java.io.IOExceptionAn IO exception from the parser,
             possibly from a byte stream or character stream
             supplied by the application.
 - seealso: org.xml.sax.InputSource
 - seealso: #parse(java.lang.String)
 - seealso: #setEntityResolver
 - seealso: #setDTDHandler
 - seealso: #setDocumentHandler
 - seealso: #setErrorHandler
 */
- (void)parseWithOrgXmlSaxInputSource:(OrgXmlSaxInputSource *)source;

/*!
 @brief Parse an XML document from a system identifier (URI).
 <p>This method is a shortcut for the common case of reading a
  document from a system identifier.  It is the exact
  equivalent of the following:</p>
  
 @code

  parse(new InputSource(systemId)); 
  
@endcode
  
 <p>If the system identifier is a URL, it must be fully resolved
  by the application before it is passed to the parser.</p>
 @param systemId The system identifier (URI).
 @throw org.xml.sax.SAXExceptionAny SAX exception, possibly
             wrapping another exception.
 @throw java.io.IOExceptionAn IO exception from the parser,
             possibly from a byte stream or character stream
             supplied by the application.
 - seealso: #parse(org.xml.sax.InputSource)
 */
- (void)parseWithNSString:(NSString *)systemId;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgXmlSaxParser)

J2OBJC_TYPE_LITERAL_HEADER(OrgXmlSaxParser)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgXmlSaxParser")
