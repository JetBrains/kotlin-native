//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/luni/src/main/java/org/xml/sax/helpers/XMLFilterImpl.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgXmlSaxHelpersXMLFilterImpl")
#ifdef RESTRICT_OrgXmlSaxHelpersXMLFilterImpl
#define INCLUDE_ALL_OrgXmlSaxHelpersXMLFilterImpl 0
#else
#define INCLUDE_ALL_OrgXmlSaxHelpersXMLFilterImpl 1
#endif
#undef RESTRICT_OrgXmlSaxHelpersXMLFilterImpl

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgXmlSaxHelpersXMLFilterImpl_) && (INCLUDE_ALL_OrgXmlSaxHelpersXMLFilterImpl || defined(INCLUDE_OrgXmlSaxHelpersXMLFilterImpl))
#define OrgXmlSaxHelpersXMLFilterImpl_

#define RESTRICT_OrgXmlSaxXMLFilter 1
#define INCLUDE_OrgXmlSaxXMLFilter 1
#include "org/xml/sax/XMLFilter.h"

#define RESTRICT_OrgXmlSaxEntityResolver 1
#define INCLUDE_OrgXmlSaxEntityResolver 1
#include "org/xml/sax/EntityResolver.h"

#define RESTRICT_OrgXmlSaxDTDHandler 1
#define INCLUDE_OrgXmlSaxDTDHandler 1
#include "org/xml/sax/DTDHandler.h"

#define RESTRICT_OrgXmlSaxContentHandler 1
#define INCLUDE_OrgXmlSaxContentHandler 1
#include "org/xml/sax/ContentHandler.h"

#define RESTRICT_OrgXmlSaxErrorHandler 1
#define INCLUDE_OrgXmlSaxErrorHandler 1
#include "org/xml/sax/ErrorHandler.h"

@class IOSCharArray;
@class OrgXmlSaxInputSource;
@class OrgXmlSaxSAXParseException;
@protocol OrgXmlSaxAttributes;
@protocol OrgXmlSaxLocator;
@protocol OrgXmlSaxXMLReader;

/*!
 @brief Base class for deriving an XML filter.
 <blockquote>
  <em>This module, both source code and documentation, is in the
  Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
  See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>
  for further information. 
 </blockquote>
  
 <p>This class is designed to sit between an <code>XMLReader</code>
  and the client application's event handlers.  By default, it
  does nothing but pass requests up to the reader and events
  on to the handlers unmodified, but subclasses can override
  specific methods to modify the event stream or the configuration
  requests as they pass through.</p>
 @since SAX 2.0
 @author David Megginson
 @version 2.0.1 (sax2r2)
 - seealso: org.xml.sax.XMLFilter
 - seealso: org.xml.sax.XMLReader
 - seealso: org.xml.sax.EntityResolver
 - seealso: org.xml.sax.DTDHandler
 - seealso: org.xml.sax.ContentHandler
 - seealso: org.xml.sax.ErrorHandler
 */
@interface OrgXmlSaxHelpersXMLFilterImpl : NSObject < OrgXmlSaxXMLFilter, OrgXmlSaxEntityResolver, OrgXmlSaxDTDHandler, OrgXmlSaxContentHandler, OrgXmlSaxErrorHandler >

#pragma mark Public

/*!
 @brief Construct an empty XML filter, with no parent.
 <p>This filter will have no parent: you must assign a parent
  before you start a parse or do any configuration with
  setFeature or setProperty, unless you use this as a pure event
  consumer rather than as an <code>XMLReader</code>.</p>
 - seealso: org.xml.sax.XMLReader#setFeature
 - seealso: org.xml.sax.XMLReader#setProperty
 - seealso: #setParent
 */
- (instancetype __nonnull)init;

/*!
 @brief Construct an XML filter with the specified parent.
 @param parent the XML reader from which this filter receives its events.
 - seealso: #setParent
 - seealso: #getParent
 */
- (instancetype __nonnull)initWithOrgXmlSaxXMLReader:(id<OrgXmlSaxXMLReader>)parent;

/*!
 @brief Filter a character data event.
 @param ch An array of characters.
 @param start The starting position in the array.
 @param length The number of characters to use from the array.
 @throw org.xml.sax.SAXExceptionThe client may throw
             an exception during processing.
 */
- (void)charactersWithCharArray:(IOSCharArray *)ch
                        withInt:(jint)start
                        withInt:(jint)length;

/*!
 @brief Filter an end document event.
 @throw org.xml.sax.SAXExceptionThe client may throw
             an exception during processing.
 */
- (void)endDocument;

/*!
 @brief Filter an end element event.
 @param uri The element's Namespace URI, or the empty string.
 @param localName The element's local name, or the empty string.
 @param qName The element's qualified (prefixed) name, or the empty         string.
 @throw org.xml.sax.SAXExceptionThe client may throw
             an exception during processing.
 */
- (void)endElementWithNSString:(NSString *)uri
                  withNSString:(NSString *)localName
                  withNSString:(NSString *)qName;

/*!
 @brief Filter an end Namespace prefix mapping event.
 @param prefix The Namespace prefix.
 @throw org.xml.sax.SAXExceptionThe client may throw
             an exception during processing.
 */
- (void)endPrefixMappingWithNSString:(NSString *)prefix;

/*!
 @brief Filter an error event.
 @param e The error as an exception.
 @throw org.xml.sax.SAXExceptionThe client may throw
             an exception during processing.
 */
- (void)errorWithOrgXmlSaxSAXParseException:(OrgXmlSaxSAXParseException *)e;

/*!
 @brief Filter a fatal error event.
 @param e The error as an exception.
 @throw org.xml.sax.SAXExceptionThe client may throw
             an exception during processing.
 */
- (void)fatalErrorWithOrgXmlSaxSAXParseException:(OrgXmlSaxSAXParseException *)e;

/*!
 @brief Get the content event handler.
 @return The current content handler, or null if none was set.
 */
- (id<OrgXmlSaxContentHandler>)getContentHandler;

/*!
 @brief Get the current DTD event handler.
 @return The current DTD handler, or null if none was set.
 */
- (id<OrgXmlSaxDTDHandler>)getDTDHandler;

/*!
 @brief Get the current entity resolver.
 @return The current entity resolver, or null if none was set.
 */
- (id<OrgXmlSaxEntityResolver>)getEntityResolver;

/*!
 @brief Get the current error event handler.
 @return The current error handler, or null if none was set.
 */
- (id<OrgXmlSaxErrorHandler>)getErrorHandler;

/*!
 @brief Look up the value of a feature.
 <p>This will always fail if the parent is null.</p>
 @param name The feature name.
 @return The current value of the feature.
 @throw org.xml.sax.SAXNotRecognizedExceptionIf the feature
             value can't be assigned or retrieved from the parent.
 @throw org.xml.sax.SAXNotSupportedExceptionWhen the
             parent recognizes the feature name but
             cannot determine its value at this time.
 */
- (jboolean)getFeatureWithNSString:(NSString *)name;

/*!
 @brief Get the parent reader.
 @return The parent XML reader, or null if none is set.
 - seealso: #setParent
 */
- (id<OrgXmlSaxXMLReader>)getParent;

/*!
 @brief Look up the value of a property.
 @param name The property name.
 @return The current value of the property.
 @throw org.xml.sax.SAXNotRecognizedExceptionIf the property
             value can't be assigned or retrieved from the parent.
 @throw org.xml.sax.SAXNotSupportedExceptionWhen the
             parent recognizes the property name but
             cannot determine its value at this time.
 */
- (id)getPropertyWithNSString:(NSString *)name;

/*!
 @brief Filter an ignorable whitespace event.
 @param ch An array of characters.
 @param start The starting position in the array.
 @param length The number of characters to use from the array.
 @throw org.xml.sax.SAXExceptionThe client may throw
             an exception during processing.
 */
- (void)ignorableWhitespaceWithCharArray:(IOSCharArray *)ch
                                 withInt:(jint)start
                                 withInt:(jint)length;

/*!
 @brief Filter a notation declaration event.
 @param name The notation name.
 @param publicId The notation's public identifier, or null.
 @param systemId The notation's system identifier, or null.
 @throw org.xml.sax.SAXExceptionThe client may throw
             an exception during processing.
 */
- (void)notationDeclWithNSString:(NSString *)name
                    withNSString:(NSString *)publicId
                    withNSString:(NSString *)systemId;

/*!
 @brief Parse a document.
 @param input The input source for the document entity.
 @throw org.xml.sax.SAXExceptionAny SAX exception, possibly
             wrapping another exception.
 @throw java.io.IOExceptionAn IO exception from the parser,
             possibly from a byte stream or character stream
             supplied by the application.
 */
- (void)parseWithOrgXmlSaxInputSource:(OrgXmlSaxInputSource *)input;

/*!
 @brief Parse a document.
 @param systemId The system identifier as a fully-qualified URI.
 @throw org.xml.sax.SAXExceptionAny SAX exception, possibly
             wrapping another exception.
 @throw java.io.IOExceptionAn IO exception from the parser,
             possibly from a byte stream or character stream
             supplied by the application.
 */
- (void)parseWithNSString:(NSString *)systemId;

/*!
 @brief Filter a processing instruction event.
 @param target The processing instruction target.
 @param data The text following the target.
 @throw org.xml.sax.SAXExceptionThe client may throw
             an exception during processing.
 */
- (void)processingInstructionWithNSString:(NSString *)target
                             withNSString:(NSString *)data;

/*!
 @brief Filter an external entity resolution.
 @param publicId The entity's public identifier, or null.
 @param systemId The entity's system identifier.
 @return A new InputSource or null for the default.
 @throw org.xml.sax.SAXExceptionThe client may throw
             an exception during processing.
 @throw java.io.IOExceptionThe client may throw an
             I/O-related exception while obtaining the
             new InputSource.
 */
- (OrgXmlSaxInputSource *)resolveEntityWithNSString:(NSString *)publicId
                                       withNSString:(NSString *)systemId;

/*!
 @brief Set the content event handler.
 @param handler the new content handler
 */
- (void)setContentHandlerWithOrgXmlSaxContentHandler:(id<OrgXmlSaxContentHandler>)handler;

/*!
 @brief Filter a new document locator event.
 @param locator The document locator.
 */
- (void)setDocumentLocatorWithOrgXmlSaxLocator:(id<OrgXmlSaxLocator>)locator;

/*!
 @brief Set the DTD event handler.
 @param handler the new DTD handler
 */
- (void)setDTDHandlerWithOrgXmlSaxDTDHandler:(id<OrgXmlSaxDTDHandler>)handler;

/*!
 @brief Set the entity resolver.
 @param resolver The new entity resolver.
 */
- (void)setEntityResolverWithOrgXmlSaxEntityResolver:(id<OrgXmlSaxEntityResolver>)resolver;

/*!
 @brief Set the error event handler.
 @param handler the new error handler
 */
- (void)setErrorHandlerWithOrgXmlSaxErrorHandler:(id<OrgXmlSaxErrorHandler>)handler;

/*!
 @brief Set the value of a feature.
 <p>This will always fail if the parent is null.</p>
 @param name The feature name.
 @param value The requested feature value.
 @throw org.xml.sax.SAXNotRecognizedExceptionIf the feature
             value can't be assigned or retrieved from the parent.
 @throw org.xml.sax.SAXNotSupportedExceptionWhen the
             parent recognizes the feature name but
             cannot set the requested value.
 */
- (void)setFeatureWithNSString:(NSString *)name
                   withBoolean:(jboolean)value;

/*!
 @brief Set the parent reader.
 <p>This is the <code>XMLReader</code> from which
  this filter will obtain its events and to which it will pass its
  configuration requests.  The parent may itself be another filter.</p>
  
 <p>If there is no parent reader set, any attempt to parse
  or to set or get a feature or property will fail.</p>
 @param parent The parent XML reader.
 - seealso: #getParent
 */
- (void)setParentWithOrgXmlSaxXMLReader:(id<OrgXmlSaxXMLReader>)parent;

/*!
 @brief Set the value of a property.
 <p>This will always fail if the parent is null.</p>
 @param name The property name.
 @param value The requested property value.
 @throw org.xml.sax.SAXNotRecognizedExceptionIf the property
             value can't be assigned or retrieved from the parent.
 @throw org.xml.sax.SAXNotSupportedExceptionWhen the
             parent recognizes the property name but
             cannot set the requested value.
 */
- (void)setPropertyWithNSString:(NSString *)name
                         withId:(id)value;

/*!
 @brief Filter a skipped entity event.
 @param name The name of the skipped entity.
 @throw org.xml.sax.SAXExceptionThe client may throw
             an exception during processing.
 */
- (void)skippedEntityWithNSString:(NSString *)name;

/*!
 @brief Filter a start document event.
 @throw org.xml.sax.SAXExceptionThe client may throw
             an exception during processing.
 */
- (void)startDocument;

/*!
 @brief Filter a start element event.
 @param uri The element's Namespace URI, or the empty string.
 @param localName The element's local name, or the empty string.
 @param qName The element's qualified (prefixed) name, or the empty         string.
 @param atts The element's attributes.
 @throw org.xml.sax.SAXExceptionThe client may throw
             an exception during processing.
 */
- (void)startElementWithNSString:(NSString *)uri
                    withNSString:(NSString *)localName
                    withNSString:(NSString *)qName
         withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts;

/*!
 @brief Filter a start Namespace prefix mapping event.
 @param prefix The Namespace prefix.
 @param uri The Namespace URI.
 @throw org.xml.sax.SAXExceptionThe client may throw
             an exception during processing.
 */
- (void)startPrefixMappingWithNSString:(NSString *)prefix
                          withNSString:(NSString *)uri;

/*!
 @brief Filter an unparsed entity declaration event.
 @param name The entity name.
 @param publicId The entity's public identifier, or null.
 @param systemId The entity's system identifier, or null.
 @param notationName The name of the associated notation.
 @throw org.xml.sax.SAXExceptionThe client may throw
             an exception during processing.
 */
- (void)unparsedEntityDeclWithNSString:(NSString *)name
                          withNSString:(NSString *)publicId
                          withNSString:(NSString *)systemId
                          withNSString:(NSString *)notationName;

/*!
 @brief Filter a warning event.
 @param e The warning as an exception.
 @throw org.xml.sax.SAXExceptionThe client may throw
             an exception during processing.
 */
- (void)warningWithOrgXmlSaxSAXParseException:(OrgXmlSaxSAXParseException *)e;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgXmlSaxHelpersXMLFilterImpl)

FOUNDATION_EXPORT void OrgXmlSaxHelpersXMLFilterImpl_init(OrgXmlSaxHelpersXMLFilterImpl *self);

FOUNDATION_EXPORT OrgXmlSaxHelpersXMLFilterImpl *new_OrgXmlSaxHelpersXMLFilterImpl_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgXmlSaxHelpersXMLFilterImpl *create_OrgXmlSaxHelpersXMLFilterImpl_init(void);

FOUNDATION_EXPORT void OrgXmlSaxHelpersXMLFilterImpl_initWithOrgXmlSaxXMLReader_(OrgXmlSaxHelpersXMLFilterImpl *self, id<OrgXmlSaxXMLReader> parent);

FOUNDATION_EXPORT OrgXmlSaxHelpersXMLFilterImpl *new_OrgXmlSaxHelpersXMLFilterImpl_initWithOrgXmlSaxXMLReader_(id<OrgXmlSaxXMLReader> parent) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgXmlSaxHelpersXMLFilterImpl *create_OrgXmlSaxHelpersXMLFilterImpl_initWithOrgXmlSaxXMLReader_(id<OrgXmlSaxXMLReader> parent);

J2OBJC_TYPE_LITERAL_HEADER(OrgXmlSaxHelpersXMLFilterImpl)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgXmlSaxHelpersXMLFilterImpl")
