//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/luni/src/main/java/org/xml/sax/DocumentHandler.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgXmlSaxDocumentHandler")
#ifdef RESTRICT_OrgXmlSaxDocumentHandler
#define INCLUDE_ALL_OrgXmlSaxDocumentHandler 0
#else
#define INCLUDE_ALL_OrgXmlSaxDocumentHandler 1
#endif
#undef RESTRICT_OrgXmlSaxDocumentHandler

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgXmlSaxDocumentHandler_) && (INCLUDE_ALL_OrgXmlSaxDocumentHandler || defined(INCLUDE_OrgXmlSaxDocumentHandler))
#define OrgXmlSaxDocumentHandler_

@class IOSCharArray;
@protocol OrgXmlSaxAttributeList;
@protocol OrgXmlSaxLocator;

/*!
 @brief Receive notification of general document events.
 <blockquote>
  <em>This module, both source code and documentation, is in the
  Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
  See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>
  for further information. 
 </blockquote>
  
 <p>This was the main event-handling interface for SAX1; in
  SAX2, it has been replaced by <code>ContentHandler</code>
 , which provides Namespace support and reporting
  of skipped entities.  This interface is included in SAX2 only
  to support legacy SAX1 applications.</p>
  
 <p>The order of events in this interface is very important, and
  mirrors the order of information in the document itself.  For
  example, all of an element's content (character data, processing
  instructions, and/or subelements) will appear, in order, between
  the startElement event and the corresponding endElement event.</p>
  
 <p>Application writers who do not want to implement the entire
  interface can derive a class from HandlerBase, which implements
  the default functionality; parser writers can instantiate
  HandlerBase to obtain a default handler.  The application can find
  the location of any document event using the Locator interface
  supplied by the Parser through the setDocumentLocator method.</p>
 @since SAX 1.0
 @author David Megginson
 @version 2.0.1 (sax2r2)
 - seealso: org.xml.sax.Parser#setDocumentHandler
 - seealso: org.xml.sax.Locator
 - seealso: org.xml.sax.HandlerBase
 */
__attribute__((deprecated))
@protocol OrgXmlSaxDocumentHandler < JavaObject >

/*!
 @brief Receive an object for locating the origin of SAX document events.
 <p>SAX parsers are strongly encouraged (though not absolutely
  required) to supply a locator: if it does so, it must supply
  the locator to the application by invoking this method before
  invoking any of the other methods in the DocumentHandler
  interface.</p>
  
 <p>The locator allows the application to determine the end
  position of any document-related event, even if the parser is
  not reporting an error.  Typically, the application will
  use this information for reporting its own errors (such as
  character content that does not match an application's
  business rules).  The information returned by the locator
  is probably not sufficient for use with a search engine.</p>
  
 <p>Note that the locator will return correct information only
  during the invocation of the events in this interface.  The
  application should not attempt to use it at any other time.</p>
 @param locator An object that can return the location of                 any SAX document event.
 - seealso: org.xml.sax.Locator
 */
- (void)setDocumentLocatorWithOrgXmlSaxLocator:(id<OrgXmlSaxLocator>)locator;

/*!
 @brief Receive notification of the beginning of a document.
 <p>The SAX parser will invoke this method only once, before any
  other methods in this interface or in DTDHandler (except for
  setDocumentLocator).</p>
 @throw org.xml.sax.SAXExceptionAny SAX exception, possibly
             wrapping another exception.
 */
- (void)startDocument;

/*!
 @brief Receive notification of the end of a document.
 <p>The SAX parser will invoke this method only once, and it will
  be the last method invoked during the parse.  The parser shall
  not invoke this method until it has either abandoned parsing
  (because of an unrecoverable error) or reached the end of
  input.</p>
 @throw org.xml.sax.SAXExceptionAny SAX exception, possibly
             wrapping another exception.
 */
- (void)endDocument;

/*!
 @brief Receive notification of the beginning of an element.
 <p>The Parser will invoke this method at the beginning of every
  element in the XML document; there will be a corresponding
  endElement() event for every startElement() event (even when the
  element is empty). All of the element's content will be
  reported, in order, before the corresponding endElement()
  event.</p>
  
 <p>If the element name has a namespace prefix, the prefix will
  still be attached.  Note that the attribute list provided will
  contain only attributes with explicit values (specified or
  defaulted): #IMPLIED attributes will be omitted.</p>
 @param name The element type name.
 @param atts The attributes attached to the element, if any.
 @throw org.xml.sax.SAXExceptionAny SAX exception, possibly
             wrapping another exception.
 - seealso: #endElement
 - seealso: org.xml.sax.AttributeList
 */
- (void)startElementWithNSString:(NSString *)name
      withOrgXmlSaxAttributeList:(id<OrgXmlSaxAttributeList>)atts;

/*!
 @brief Receive notification of the end of an element.
 <p>The SAX parser will invoke this method at the end of every
  element in the XML document; there will be a corresponding
  startElement() event for every endElement() event (even when the
  element is empty).</p>
  
 <p>If the element name has a namespace prefix, the prefix will
  still be attached to the name.</p>
 @param name The element type name
 @throw org.xml.sax.SAXExceptionAny SAX exception, possibly
             wrapping another exception.
 */
- (void)endElementWithNSString:(NSString *)name;

/*!
 @brief Receive notification of character data.
 <p>The Parser will call this method to report each chunk of
  character data.  SAX parsers may return all contiguous character
  data in a single chunk, or they may split it into several
  chunks; however, all of the characters in any single event
  must come from the same external entity, so that the Locator
  provides useful information.</p>
  
 <p>The application must not attempt to read from the array
  outside of the specified range.</p>
  
 <p>Note that some parsers will report whitespace using the
  ignorableWhitespace() method rather than this one (validating
  parsers must do so).</p>
 @param ch The characters from the XML document.
 @param start The start position in the array.
 @param length The number of characters to read from the array.
 @throw org.xml.sax.SAXExceptionAny SAX exception, possibly
             wrapping another exception.
 - seealso: #ignorableWhitespace
 - seealso: org.xml.sax.Locator
 */
- (void)charactersWithCharArray:(IOSCharArray *)ch
                        withInt:(jint)start
                        withInt:(jint)length;

/*!
 @brief Receive notification of ignorable whitespace in element content.
 <p>Validating Parsers must use this method to report each chunk
  of ignorable whitespace (see the W3C XML 1.0 recommendation,
  section 2.10): non-validating parsers may also use this method
  if they are capable of parsing and using content models.</p>
  
 <p>SAX parsers may return all contiguous whitespace in a single
  chunk, or they may split it into several chunks; however, all of
  the characters in any single event must come from the same
  external entity, so that the Locator provides useful
  information.</p>
  
 <p>The application must not attempt to read from the array
  outside of the specified range.</p>
 @param ch The characters from the XML document.
 @param start The start position in the array.
 @param length The number of characters to read from the array.
 @throw org.xml.sax.SAXExceptionAny SAX exception, possibly
             wrapping another exception.
 - seealso: #characters
 */
- (void)ignorableWhitespaceWithCharArray:(IOSCharArray *)ch
                                 withInt:(jint)start
                                 withInt:(jint)length;

/*!
 @brief Receive notification of a processing instruction.
 <p>The Parser will invoke this method once for each processing
  instruction found: note that processing instructions may occur
  before or after the main document element.</p>
  
 <p>A SAX parser should never report an XML declaration (XML 1.0,
  section 2.8) or a text declaration (XML 1.0, section 4.3.1)
  using this method.</p>
 @param target The processing instruction target.
 @param data The processing instruction data, or null if         none was supplied.
 @throw org.xml.sax.SAXExceptionAny SAX exception, possibly
             wrapping another exception.
 */
- (void)processingInstructionWithNSString:(NSString *)target
                             withNSString:(NSString *)data;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgXmlSaxDocumentHandler)

J2OBJC_TYPE_LITERAL_HEADER(OrgXmlSaxDocumentHandler)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgXmlSaxDocumentHandler")
