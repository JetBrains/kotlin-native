//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/luni/src/main/java/org/xml/sax/Locator.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgXmlSaxLocator")
#ifdef RESTRICT_OrgXmlSaxLocator
#define INCLUDE_ALL_OrgXmlSaxLocator 0
#else
#define INCLUDE_ALL_OrgXmlSaxLocator 1
#endif
#undef RESTRICT_OrgXmlSaxLocator

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgXmlSaxLocator_) && (INCLUDE_ALL_OrgXmlSaxLocator || defined(INCLUDE_OrgXmlSaxLocator))
#define OrgXmlSaxLocator_

/*!
 @brief Interface for associating a SAX event with a document location.
 <blockquote>
  <em>This module, both source code and documentation, is in the
  Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
  See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>
  for further information. 
 </blockquote>
  
 <p>If a SAX parser provides location information to the SAX
  application, it does so by implementing this interface and then
  passing an instance to the application using the content
  handler's <code>setDocumentLocator</code>
  method.  The application can use the
  object to obtain the location of any other SAX event
  in the XML source document.</p>
  
 <p>Note that the results returned by the object will be valid only
  during the scope of each callback method: the application
  will receive unpredictable results if it attempts to use the
  locator at any other time, or after parsing completes.</p>
  
 <p>SAX parsers are not required to supply a locator, but they are
  very strongly encouraged to do so.  If the parser supplies a
  locator, it must do so before reporting any other document events.
  If no locator has been set by the time the application receives the 
 <code>startDocument</code>
  event, the application should assume that a locator is not
  available.</p>
 @since SAX 1.0
 @author David Megginson
 @version 2.0.1 (sax2r2)
 - seealso: org.xml.sax.ContentHandler#setDocumentLocator
 */
@protocol OrgXmlSaxLocator < JavaObject >

/*!
 @brief Return the public identifier for the current document event.
 <p>The return value is the public identifier of the document
  entity or of the external parsed entity in which the markup
  triggering the event appears.</p>
 @return A string containing the public identifier, or
          null if none is available.
 - seealso: #getSystemId
 */
- (NSString *)getPublicId;

/*!
 @brief Return the system identifier for the current document event.
 <p>The return value is the system identifier of the document
  entity or of the external parsed entity in which the markup
  triggering the event appears.</p>
  
 <p>If the system identifier is a URL, the parser must resolve it
  fully before passing it to the application.  For example, a file
  name must always be provided as a <em>file:...</em> URL, and other
  kinds of relative URI are also resolved against their bases.</p>
 @return A string containing the system identifier, or null
          if none is available.
 - seealso: #getPublicId
 */
- (NSString *)getSystemId;

/*!
 @brief Return the line number where the current document event ends.
 Lines are delimited by line ends, which are defined in
  the XML specification. 
 <p><strong>Warning:</strong> The return value from the method
  is intended only as an approximation for the sake of diagnostics;
  it is not intended to provide sufficient information
  to edit the character content of the original XML document.
  In some cases, these "line" numbers match what would be displayed
  as columns, and in others they may not match the source text
  due to internal entity expansion.  </p>
  
 <p>The return value is an approximation of the line number
  in the document entity or external parsed entity where the
  markup triggering the event appears.</p>
  
 <p>If possible, the SAX driver should provide the line position
  of the first character after the text associated with the document
  event.  The first line is line 1.</p>
 @return The line number, or -1 if none is available.
 - seealso: #getColumnNumber
 */
- (jint)getLineNumber;

/*!
 @brief Return the column number where the current document event ends.
 This is one-based number of Java <code>char</code> values since
  the last line end. 
 <p><strong>Warning:</strong> The return value from the method
  is intended only as an approximation for the sake of diagnostics;
  it is not intended to provide sufficient information
  to edit the character content of the original XML document.
  For example, when lines contain combining character sequences, wide
  characters, surrogate pairs, or bi-directional text, the value may
  not correspond to the column in a text editor's display. </p>
  
 <p>The return value is an approximation of the column number
  in the document entity or external parsed entity where the
  markup triggering the event appears.</p>
  
 <p>If possible, the SAX driver should provide the line position
  of the first character after the text associated with the document
  event.  The first column in each line is column 1.</p>
 @return The column number, or -1 if none is available.
 - seealso: #getLineNumber
 */
- (jint)getColumnNumber;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgXmlSaxLocator)

J2OBJC_TYPE_LITERAL_HEADER(OrgXmlSaxLocator)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgXmlSaxLocator")
