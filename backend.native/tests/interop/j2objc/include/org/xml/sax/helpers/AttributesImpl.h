//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/luni/src/main/java/org/xml/sax/helpers/AttributesImpl.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgXmlSaxHelpersAttributesImpl")
#ifdef RESTRICT_OrgXmlSaxHelpersAttributesImpl
#define INCLUDE_ALL_OrgXmlSaxHelpersAttributesImpl 0
#else
#define INCLUDE_ALL_OrgXmlSaxHelpersAttributesImpl 1
#endif
#undef RESTRICT_OrgXmlSaxHelpersAttributesImpl

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgXmlSaxHelpersAttributesImpl_) && (INCLUDE_ALL_OrgXmlSaxHelpersAttributesImpl || defined(INCLUDE_OrgXmlSaxHelpersAttributesImpl))
#define OrgXmlSaxHelpersAttributesImpl_

#define RESTRICT_OrgXmlSaxAttributes 1
#define INCLUDE_OrgXmlSaxAttributes 1
#include "org/xml/sax/Attributes.h"

@class IOSObjectArray;

/*!
 @brief Default implementation of the Attributes interface.
 <blockquote>
  <em>This module, both source code and documentation, is in the
  Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
  See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>
  for further information. 
 </blockquote>
  
 <p>This class provides a default implementation of the SAX2 
 <code>Attributes</code> interface, with the
  addition of manipulators so that the list can be modified or
  reused.</p>
  
 <p>There are two typical uses of this class:</p>
  
 <ol>
  <li>to take a persistent snapshot of an Attributes object
   in a <code>startElement</code> event; or</li>
  <li>to construct or modify an Attributes object in a SAX2 driver or filter.</li>
  </ol>
  
 <p>This class replaces the now-deprecated SAX1 <code>AttributeListImpl</code>
  class; in addition to supporting the updated Attributes
  interface rather than the deprecated <code>AttributeList</code>
  interface, it also includes a much more efficient
  implementation using a single array rather than a set of Vectors.</p>
 @since SAX 2.0
 @author David Megginson
 @version 2.0.1 (sax2r2)
 */
@interface OrgXmlSaxHelpersAttributesImpl : NSObject < OrgXmlSaxAttributes > {
 @public
  jint length_;
  IOSObjectArray *data_;
}

#pragma mark Public

/*!
 @brief Construct a new, empty AttributesImpl object.
 */
- (instancetype __nonnull)init;

/*!
 @brief Copy an existing Attributes object.
 <p>This constructor is especially useful inside a 
 <code>startElement</code> event.</p>
 @param atts The existing Attributes object.
 */
- (instancetype __nonnull)initWithOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts;

/*!
 @brief Add an attribute to the end of the list.
 <p>For the sake of speed, this method does no checking
  to see if the attribute is already in the list: that is
  the responsibility of the application.</p>
 @param uri The Namespace URI, or the empty string if         none is available or Namespace processing is not
          being performed.
 @param localName The local name, or the empty string if         Namespace processing is not being performed.
 @param qName The qualified (prefixed) name, or the empty string         if qualified names are not available.
 @param type The attribute type as a string.
 @param value The attribute value.
 */
- (void)addAttributeWithNSString:(NSString *)uri
                    withNSString:(NSString *)localName
                    withNSString:(NSString *)qName
                    withNSString:(NSString *)type
                    withNSString:(NSString *)value;

/*!
 @brief Clear the attribute list for reuse.
 <p>Note that little memory is freed by this call:
  the current array is kept so it can be
  reused.</p>
 */
- (void)clear;

/*!
 @brief Look up an attribute's index by qualified (prefixed) name.
 @param qName The qualified name.
 @return The attribute's index, or -1 if none matches.
 - seealso: org.xml.sax.Attributes#getIndex(java.lang.String)
 */
- (jint)getIndexWithNSString:(NSString *)qName;

/*!
 @brief Look up an attribute's index by Namespace name.
 <p>In many cases, it will be more efficient to look up the name once and
  use the index query methods rather than using the name query methods
  repeatedly.</p>
 @param uri The attribute's Namespace URI, or the empty         string if none is available.
 @param localName The attribute's local name.
 @return The attribute's index, or -1 if none matches.
 - seealso: org.xml.sax.Attributes#getIndex(java.lang.String,java.lang.String)
 */
- (jint)getIndexWithNSString:(NSString *)uri
                withNSString:(NSString *)localName;

/*!
 @brief Return the number of attributes in the list.
 @return The number of attributes in the list.
 - seealso: org.xml.sax.Attributes#getLength
 */
- (jint)getLength;

/*!
 @brief Return an attribute's local name.
 @param index The attribute's index (zero-based).
 @return The attribute's local name, the empty string if
          none is available, or null if the index if out of range.
 - seealso: org.xml.sax.Attributes#getLocalName
 */
- (NSString *)getLocalNameWithInt:(jint)index;

/*!
 @brief Return an attribute's qualified (prefixed) name.
 @param index The attribute's index (zero-based).
 @return The attribute's qualified name, the empty string if
          none is available, or null if the index is out of bounds.
 - seealso: org.xml.sax.Attributes#getQName
 */
- (NSString *)getQNameWithInt:(jint)index;

/*!
 @brief Return an attribute's type by index.
 @param index The attribute's index (zero-based).
 @return The attribute's type, "CDATA" if the type is unknown, or null
          if the index is out of bounds.
 - seealso: org.xml.sax.Attributes#getType(int)
 */
- (NSString *)getTypeWithInt:(jint)index;

/*!
 @brief Look up an attribute's type by qualified (prefixed) name.
 @param qName The qualified name.
 @return The attribute's type, or null if there is no
          matching attribute.
 - seealso: org.xml.sax.Attributes#getType(java.lang.String)
 */
- (NSString *)getTypeWithNSString:(NSString *)qName;

/*!
 @brief Look up an attribute's type by Namespace-qualified name.
 @param uri The Namespace URI, or the empty string for a name         with no explicit Namespace URI.
 @param localName The local name.
 @return The attribute's type, or null if there is no
          matching attribute.
 - seealso: org.xml.sax.Attributes#getType(java.lang.String,java.lang.String)
 */
- (NSString *)getTypeWithNSString:(NSString *)uri
                     withNSString:(NSString *)localName;

/*!
 @brief Return an attribute's Namespace URI.
 @param index The attribute's index (zero-based).
 @return The Namespace URI, the empty string if none is
          available, or null if the index is out of range.
 - seealso: org.xml.sax.Attributes#getURI
 */
- (NSString *)getURIWithInt:(jint)index;

/*!
 @brief Return an attribute's value by index.
 @param index The attribute's index (zero-based).
 @return The attribute's value or null if the index is out of bounds.
 - seealso: org.xml.sax.Attributes#getValue(int)
 */
- (NSString *)getValueWithInt:(jint)index;

/*!
 @brief Look up an attribute's value by qualified (prefixed) name.
 @param qName The qualified name.
 @return The attribute's value, or null if there is no
          matching attribute.
 - seealso: org.xml.sax.Attributes#getValue(java.lang.String)
 */
- (NSString *)getValueWithNSString:(NSString *)qName;

/*!
 @brief Look up an attribute's value by Namespace-qualified name.
 @param uri The Namespace URI, or the empty string for a name         with no explicit Namespace URI.
 @param localName The local name.
 @return The attribute's value, or null if there is no
          matching attribute.
 - seealso: org.xml.sax.Attributes#getValue(java.lang.String,java.lang.String)
 */
- (NSString *)getValueWithNSString:(NSString *)uri
                      withNSString:(NSString *)localName;

/*!
 @brief Remove an attribute from the list.
 @param index The index of the attribute (zero-based).
 @throw java.lang.ArrayIndexOutOfBoundsExceptionWhen the
             supplied index does not point to an attribute
             in the list.
 */
- (void)removeAttributeWithInt:(jint)index;

/*!
 @brief Set an attribute in the list.
 <p>For the sake of speed, this method does no checking
  for name conflicts or well-formedness: such checks are the
  responsibility of the application.</p>
 @param index The index of the attribute (zero-based).
 @param uri The Namespace URI, or the empty string if         none is available or Namespace processing is not
          being performed.
 @param localName The local name, or the empty string if         Namespace processing is not being performed.
 @param qName The qualified name, or the empty string         if qualified names are not available.
 @param type The attribute type as a string.
 @param value The attribute value.
 @throw java.lang.ArrayIndexOutOfBoundsExceptionWhen the
             supplied index does not point to an attribute
             in the list.
 */
- (void)setAttributeWithInt:(jint)index
               withNSString:(NSString *)uri
               withNSString:(NSString *)localName
               withNSString:(NSString *)qName
               withNSString:(NSString *)type
               withNSString:(NSString *)value;

/*!
 @brief Copy an entire Attributes object.
 <p>It may be more efficient to reuse an existing object
  rather than constantly allocating new ones.</p>
 @param atts The attributes to copy.
 */
- (void)setAttributesWithOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts;

/*!
 @brief Set the local name of a specific attribute.
 @param index The index of the attribute (zero-based).
 @param localName The attribute's local name, or the empty         string for none.
 @throw java.lang.ArrayIndexOutOfBoundsExceptionWhen the
             supplied index does not point to an attribute
             in the list.
 */
- (void)setLocalNameWithInt:(jint)index
               withNSString:(NSString *)localName;

/*!
 @brief Set the qualified name of a specific attribute.
 @param index The index of the attribute (zero-based).
 @param qName The attribute's qualified name, or the empty         string for none.
 @throw java.lang.ArrayIndexOutOfBoundsExceptionWhen the
             supplied index does not point to an attribute
             in the list.
 */
- (void)setQNameWithInt:(jint)index
           withNSString:(NSString *)qName;

/*!
 @brief Set the type of a specific attribute.
 @param index The index of the attribute (zero-based).
 @param type The attribute's type.
 @throw java.lang.ArrayIndexOutOfBoundsExceptionWhen the
             supplied index does not point to an attribute
             in the list.
 */
- (void)setTypeWithInt:(jint)index
          withNSString:(NSString *)type;

/*!
 @brief Set the Namespace URI of a specific attribute.
 @param index The index of the attribute (zero-based).
 @param uri The attribute's Namespace URI, or the empty         string for none.
 @throw java.lang.ArrayIndexOutOfBoundsExceptionWhen the
             supplied index does not point to an attribute
             in the list.
 */
- (void)setURIWithInt:(jint)index
         withNSString:(NSString *)uri;

/*!
 @brief Set the value of a specific attribute.
 @param index The index of the attribute (zero-based).
 @param value The attribute's value.
 @throw java.lang.ArrayIndexOutOfBoundsExceptionWhen the
             supplied index does not point to an attribute
             in the list.
 */
- (void)setValueWithInt:(jint)index
           withNSString:(NSString *)value;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgXmlSaxHelpersAttributesImpl)

J2OBJC_FIELD_SETTER(OrgXmlSaxHelpersAttributesImpl, data_, IOSObjectArray *)

FOUNDATION_EXPORT void OrgXmlSaxHelpersAttributesImpl_init(OrgXmlSaxHelpersAttributesImpl *self);

FOUNDATION_EXPORT OrgXmlSaxHelpersAttributesImpl *new_OrgXmlSaxHelpersAttributesImpl_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgXmlSaxHelpersAttributesImpl *create_OrgXmlSaxHelpersAttributesImpl_init(void);

FOUNDATION_EXPORT void OrgXmlSaxHelpersAttributesImpl_initWithOrgXmlSaxAttributes_(OrgXmlSaxHelpersAttributesImpl *self, id<OrgXmlSaxAttributes> atts);

FOUNDATION_EXPORT OrgXmlSaxHelpersAttributesImpl *new_OrgXmlSaxHelpersAttributesImpl_initWithOrgXmlSaxAttributes_(id<OrgXmlSaxAttributes> atts) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgXmlSaxHelpersAttributesImpl *create_OrgXmlSaxHelpersAttributesImpl_initWithOrgXmlSaxAttributes_(id<OrgXmlSaxAttributes> atts);

J2OBJC_TYPE_LITERAL_HEADER(OrgXmlSaxHelpersAttributesImpl)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgXmlSaxHelpersAttributesImpl")
