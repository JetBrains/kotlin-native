//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/junit/build_result/java/org/hamcrest/core/IsNot.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgHamcrestCoreIsNot")
#ifdef RESTRICT_OrgHamcrestCoreIsNot
#define INCLUDE_ALL_OrgHamcrestCoreIsNot 0
#else
#define INCLUDE_ALL_OrgHamcrestCoreIsNot 1
#endif
#undef RESTRICT_OrgHamcrestCoreIsNot

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgHamcrestCoreIsNot_) && (INCLUDE_ALL_OrgHamcrestCoreIsNot || defined(INCLUDE_OrgHamcrestCoreIsNot))
#define OrgHamcrestCoreIsNot_

#define RESTRICT_OrgHamcrestBaseMatcher 1
#define INCLUDE_OrgHamcrestBaseMatcher 1
#include "org/hamcrest/BaseMatcher.h"

@protocol OrgHamcrestDescription;
@protocol OrgHamcrestMatcher;

/*!
 @brief Calculates the logical negation of a matcher.
 */
@interface OrgHamcrestCoreIsNot : OrgHamcrestBaseMatcher

#pragma mark Public

- (instancetype __nonnull)initWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher;

- (void)describeToWithOrgHamcrestDescription:(id<OrgHamcrestDescription>)description_;

- (jboolean)matchesWithId:(id)arg;

/*!
 @brief Creates a matcher that wraps an existing matcher, but inverts the logic by which
  it will match.
 <p>
  For example: 
 @code
assertThat(cheese, is(not(equalTo(smelly))))
@endcode
 @param matcher the matcher whose sense should be inverted
 */
+ (id<OrgHamcrestMatcher>)not__WithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher;

/*!
 @brief A shortcut to the frequently used <code>not(equalTo(x))</code>.
 <p>
  For example: 
 @code
assertThat(cheese, is(not(smelly)))
@endcode
  instead of: 
 @code
assertThat(cheese, is(not(equalTo(smelly))))
@endcode
 @param value the value that any examined object should 
  <b> not </b>  equal
 */
+ (id<OrgHamcrestMatcher>)not__WithId:(id)value;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgHamcrestCoreIsNot)

FOUNDATION_EXPORT void OrgHamcrestCoreIsNot_initWithOrgHamcrestMatcher_(OrgHamcrestCoreIsNot *self, id<OrgHamcrestMatcher> matcher);

FOUNDATION_EXPORT OrgHamcrestCoreIsNot *new_OrgHamcrestCoreIsNot_initWithOrgHamcrestMatcher_(id<OrgHamcrestMatcher> matcher) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgHamcrestCoreIsNot *create_OrgHamcrestCoreIsNot_initWithOrgHamcrestMatcher_(id<OrgHamcrestMatcher> matcher);

FOUNDATION_EXPORT id<OrgHamcrestMatcher> OrgHamcrestCoreIsNot_not__WithOrgHamcrestMatcher_(id<OrgHamcrestMatcher> matcher);

FOUNDATION_EXPORT id<OrgHamcrestMatcher> OrgHamcrestCoreIsNot_not__WithId_(id value);

J2OBJC_TYPE_LITERAL_HEADER(OrgHamcrestCoreIsNot)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgHamcrestCoreIsNot")
