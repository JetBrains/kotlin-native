//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/luni/src/main/java/org/w3c/dom/traversal/NodeIterator.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgW3cDomTraversalNodeIterator")
#ifdef RESTRICT_OrgW3cDomTraversalNodeIterator
#define INCLUDE_ALL_OrgW3cDomTraversalNodeIterator 0
#else
#define INCLUDE_ALL_OrgW3cDomTraversalNodeIterator 1
#endif
#undef RESTRICT_OrgW3cDomTraversalNodeIterator

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgW3cDomTraversalNodeIterator_) && (INCLUDE_ALL_OrgW3cDomTraversalNodeIterator || defined(INCLUDE_OrgW3cDomTraversalNodeIterator))
#define OrgW3cDomTraversalNodeIterator_

@protocol OrgW3cDomNode;
@protocol OrgW3cDomTraversalNodeFilter;

/*!
 @brief <code>NodeIterators</code> are used to step through a set of nodes, e.g.
 the set of nodes in a <code>NodeList</code>, the document subtree
  governed by a particular <code>Node</code>, the results of a query, or
  any other set of nodes. The set of nodes to be iterated is determined by
  the implementation of the <code>NodeIterator</code>. DOM Level 2
  specifies a single <code>NodeIterator</code> implementation for
  document-order traversal of a document subtree. Instances of these 
 <code>NodeIterators</code> are created by calling 
 <code>DocumentTraversal</code><code>.createNodeIterator()</code>.
  <p>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Traversal-Range-20001113'>Document Object Model (DOM) Level 2 Traversal and Range Specification</a>.
 @since DOM Level 2
 */
@protocol OrgW3cDomTraversalNodeIterator < JavaObject >

/*!
 @brief The root node of the <code>NodeIterator</code>, as specified when it
  was created.
 */
- (id<OrgW3cDomNode>)getRoot;

/*!
 @brief This attribute determines which node types are presented via the 
 <code>NodeIterator</code>.The available set of constants is defined
  in the <code>NodeFilter</code> interface.
 Nodes not accepted by 
 <code>whatToShow</code> will be skipped, but their children may still
  be considered. Note that this skip takes precedence over the filter,
  if any.
 */
- (jint)getWhatToShow;

/*!
 @brief The <code>NodeFilter</code> used to screen nodes.
 */
- (id<OrgW3cDomTraversalNodeFilter>)getFilter;

/*!
 @brief The value of this flag determines whether the children of entity
  reference nodes are visible to the <code>NodeIterator</code>.If
  false, these children  and their descendants will be rejected.
 Note
  that this rejection takes precedence over <code>whatToShow</code> and
  the filter. Also note that this is currently the only situation where 
 <code>NodeIterators</code> may reject a complete subtree rather than
  skipping individual nodes. 
 <br>
  <br> To produce a view of the document that has entity references
  expanded and does not expose the entity reference node itself, use the 
 <code>whatToShow</code> flags to hide the entity reference node
  and set <code>expandEntityReferences</code> to true when creating the 
 <code>NodeIterator</code>. To produce a view of the document that has
  entity reference nodes but no entity expansion, use the 
 <code>whatToShow</code> flags to show the entity reference node and
  set <code>expandEntityReferences</code> to false.
 */
- (jboolean)getExpandEntityReferences;

/*!
 @brief Returns the next node in the set and advances the position of the 
 <code>NodeIterator</code> in the set.After a 
 <code>NodeIterator</code> is created, the first call to 
 <code>nextNode()</code> returns the first node in the set.
 @return The next <code>Node</code> in the set being iterated over, or
    <code>null</code> if there are no more members in that set.
 @throw DOMException
 INVALID_STATE_ERR: Raised if this method is called after the
    <code>detach</code> method was invoked.
 */
- (id<OrgW3cDomNode>)nextNode;

/*!
 @brief Returns the previous node in the set and moves the position of the 
 <code>NodeIterator</code> backwards in the set.
 @return The previous <code>Node</code> in the set being iterated over,
    or <code>null</code> if there are no more members in that set.
 @throw DOMException
 INVALID_STATE_ERR: Raised if this method is called after the
    <code>detach</code> method was invoked.
 */
- (id<OrgW3cDomNode>)previousNode;

/*!
 @brief Detaches the <code>NodeIterator</code> from the set which it iterated
  over, releasing any computational resources and placing the 
 <code>NodeIterator</code> in the INVALID state.After
  <code>detach</code> has been invoked, calls to <code>nextNode</code>
  or <code>previousNode</code> will raise the exception
  INVALID_STATE_ERR.
 */
- (void)detach;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgW3cDomTraversalNodeIterator)

J2OBJC_TYPE_LITERAL_HEADER(OrgW3cDomTraversalNodeIterator)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgW3cDomTraversalNodeIterator")
