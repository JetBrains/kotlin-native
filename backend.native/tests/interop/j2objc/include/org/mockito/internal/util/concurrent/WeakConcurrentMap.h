//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/testing/mockito/build_result/java/org/mockito/internal/util/concurrent/WeakConcurrentMap.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoInternalUtilConcurrentWeakConcurrentMap")
#ifdef RESTRICT_OrgMockitoInternalUtilConcurrentWeakConcurrentMap
#define INCLUDE_ALL_OrgMockitoInternalUtilConcurrentWeakConcurrentMap 0
#else
#define INCLUDE_ALL_OrgMockitoInternalUtilConcurrentWeakConcurrentMap 1
#endif
#undef RESTRICT_OrgMockitoInternalUtilConcurrentWeakConcurrentMap
#ifdef INCLUDE_OrgMockitoInternalUtilConcurrentWeakConcurrentMap_WithInlinedExpunction
#define INCLUDE_OrgMockitoInternalUtilConcurrentWeakConcurrentMap 1
#endif

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgMockitoInternalUtilConcurrentWeakConcurrentMap_) && (INCLUDE_ALL_OrgMockitoInternalUtilConcurrentWeakConcurrentMap || defined(INCLUDE_OrgMockitoInternalUtilConcurrentWeakConcurrentMap))
#define OrgMockitoInternalUtilConcurrentWeakConcurrentMap_

#define RESTRICT_JavaLangRefReferenceQueue 1
#define INCLUDE_JavaLangRefReferenceQueue 1
#include "java/lang/ref/ReferenceQueue.h"

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

#define RESTRICT_JavaLangIterable 1
#define INCLUDE_JavaLangIterable 1
#include "java/lang/Iterable.h"

@class JavaLangThread;
@protocol JavaUtilConcurrentConcurrentMap;
@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilIterator;
@protocol JavaUtilSpliterator;

/*!
 @brief <p>
  A thread-safe map with weak keys.
 Entries are based on a key's system hash code and keys are considered
  equal only by reference equality. 
 </p>
  This class does not implement the <code>java.util.Map</code> interface because this implementation is incompatible
  with the map contract. While iterating over a map's entries, any key that has not passed iteration is referenced non-weakly.
 */
@interface OrgMockitoInternalUtilConcurrentWeakConcurrentMap : JavaLangRefReferenceQueue < JavaLangRunnable, JavaLangIterable > {
 @public
  id<JavaUtilConcurrentConcurrentMap> target_;
}

#pragma mark Public

/*!
 @param cleanerThread<code>true</code>  if a thread should be started that removes stale entries.
 */
- (instancetype __nonnull)initWithBoolean:(jboolean)cleanerThread;

/*!
 @brief Returns the approximate size of this map where the returned number is at least as big as the actual number of entries.
 @return The minimum size of this map.
 */
- (jint)approximateSize;

/*!
 @brief Clears the entire map.
 */
- (void)clear;

/*!
 @param key The key of the entry.
 @return <code>true</code> if the key already defines a value.
 */
- (jboolean)containsKeyWithId:(id)key;

/*!
 @brief Cleans all unused references.
 */
- (void)expungeStaleEntries;

/*!
 @param key The key of the entry.
 @return The value of the entry or the default value if it did not exist.
 */
- (id)getWithId:(id)key;

/*!
 @return The cleaner thread or <code>null</code> if no such thread was set.
 */
- (JavaLangThread *)getCleanerThread;

- (id<JavaUtilIterator>)iterator;

/*!
 @param key The key of the entry.
 @param value The value of the entry.
 @return The previous entry or <code>null</code> if it does not exist.
 */
- (id)putWithId:(id)key
         withId:(id)value;

/*!
 @param key The key of the entry.
 @return The removed entry or <code>null</code> if it does not exist.
 */
- (id)removeWithId:(id)key;

- (void)run;

#pragma mark Protected

/*!
 @brief Creates a default value.There is no guarantee that the requested value will be set as a once it is created
  in case that another thread requests a value for a key concurrently.
 @param key The key for which to create a default value.
 @return The default value for a key without value or <code>null</code> for not defining a default value.
 */
- (id)defaultValueWithId:(id)key;

#pragma mark Package-Private

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgMockitoInternalUtilConcurrentWeakConcurrentMap)

J2OBJC_FIELD_SETTER(OrgMockitoInternalUtilConcurrentWeakConcurrentMap, target_, id<JavaUtilConcurrentConcurrentMap>)

FOUNDATION_EXPORT void OrgMockitoInternalUtilConcurrentWeakConcurrentMap_initWithBoolean_(OrgMockitoInternalUtilConcurrentWeakConcurrentMap *self, jboolean cleanerThread);

FOUNDATION_EXPORT OrgMockitoInternalUtilConcurrentWeakConcurrentMap *new_OrgMockitoInternalUtilConcurrentWeakConcurrentMap_initWithBoolean_(jboolean cleanerThread) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMockitoInternalUtilConcurrentWeakConcurrentMap *create_OrgMockitoInternalUtilConcurrentWeakConcurrentMap_initWithBoolean_(jboolean cleanerThread);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoInternalUtilConcurrentWeakConcurrentMap)

#endif

#if !defined (OrgMockitoInternalUtilConcurrentWeakConcurrentMap_WithInlinedExpunction_) && (INCLUDE_ALL_OrgMockitoInternalUtilConcurrentWeakConcurrentMap || defined(INCLUDE_OrgMockitoInternalUtilConcurrentWeakConcurrentMap_WithInlinedExpunction))
#define OrgMockitoInternalUtilConcurrentWeakConcurrentMap_WithInlinedExpunction_

@protocol JavaUtilIterator;

/*!
 @brief A <code>WeakConcurrentMap</code> where stale entries are removed as a side effect of interacting with this map.
 */
@interface OrgMockitoInternalUtilConcurrentWeakConcurrentMap_WithInlinedExpunction : OrgMockitoInternalUtilConcurrentWeakConcurrentMap

#pragma mark Public

- (instancetype __nonnull)init;

- (jint)approximateSize;

- (jboolean)containsKeyWithId:(id)key;

- (id)getWithId:(id)key;

- (id<JavaUtilIterator>)iterator;

- (id)putWithId:(id)key
         withId:(id)value;

- (id)removeWithId:(id)key;

#pragma mark Package-Private

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithBoolean:(jboolean)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoInternalUtilConcurrentWeakConcurrentMap_WithInlinedExpunction)

FOUNDATION_EXPORT void OrgMockitoInternalUtilConcurrentWeakConcurrentMap_WithInlinedExpunction_init(OrgMockitoInternalUtilConcurrentWeakConcurrentMap_WithInlinedExpunction *self);

FOUNDATION_EXPORT OrgMockitoInternalUtilConcurrentWeakConcurrentMap_WithInlinedExpunction *new_OrgMockitoInternalUtilConcurrentWeakConcurrentMap_WithInlinedExpunction_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMockitoInternalUtilConcurrentWeakConcurrentMap_WithInlinedExpunction *create_OrgMockitoInternalUtilConcurrentWeakConcurrentMap_WithInlinedExpunction_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoInternalUtilConcurrentWeakConcurrentMap_WithInlinedExpunction)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgMockitoInternalUtilConcurrentWeakConcurrentMap")
