//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/testing/mockito/build_result/java/org/mockito/internal/invocation/MatcherApplicationStrategy.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoInternalInvocationMatcherApplicationStrategy")
#ifdef RESTRICT_OrgMockitoInternalInvocationMatcherApplicationStrategy
#define INCLUDE_ALL_OrgMockitoInternalInvocationMatcherApplicationStrategy 0
#else
#define INCLUDE_ALL_OrgMockitoInternalInvocationMatcherApplicationStrategy 1
#endif
#undef RESTRICT_OrgMockitoInternalInvocationMatcherApplicationStrategy

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgMockitoInternalInvocationMatcherApplicationStrategy_) && (INCLUDE_ALL_OrgMockitoInternalInvocationMatcherApplicationStrategy || defined(INCLUDE_OrgMockitoInternalInvocationMatcherApplicationStrategy))
#define OrgMockitoInternalInvocationMatcherApplicationStrategy_

@protocol JavaUtilList;
@protocol OrgMockitoInternalInvocationArgumentMatcherAction;
@protocol OrgMockitoInvocationInvocation;

@interface OrgMockitoInternalInvocationMatcherApplicationStrategy : NSObject

#pragma mark Public

/*!
 @brief Applies the given <code>ArgumentMatcherAction</code> to all arguments and
  corresponding matchers
 @param action must not be 
  <code> null </code>
 @return <ul>
          <li><code>true</code> if the given <b>action</b> returned
          <code>true</code> for all arguments and matchers passed to it.
          <li><code>false</code> if the given <b>action</b> returned
          <code>false</code> for one of the passed arguments and matchers
          <li><code>false</code> if the given matchers don't fit to the given invocation
          because too many or to few matchers are available.         
 </ul>
 */
- (jboolean)forEachMatcherAndArgumentWithOrgMockitoInternalInvocationArgumentMatcherAction:(id<OrgMockitoInternalInvocationArgumentMatcherAction>)action;

/*!
 @brief Returns the <code>MatcherApplicationStrategy</code> that must be used to capture the
  arguments of the given <b>invocation</b> using the given <b>matchers</b>.
 @param invocation that contain the arguments to capture
 @param matchers that will be used to capture the arguments of the invocation,
              the passed 
 <code>List</code>  is not required to contain a             <code>CapturingMatcher</code>
 @return never <code>null</code>
 */
+ (OrgMockitoInternalInvocationMatcherApplicationStrategy *)getMatcherApplicationStrategyForWithOrgMockitoInvocationInvocation:(id<OrgMockitoInvocationInvocation>)invocation
                                                                                                              withJavaUtilList:(id<JavaUtilList>)matchers;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoInternalInvocationMatcherApplicationStrategy)

FOUNDATION_EXPORT OrgMockitoInternalInvocationMatcherApplicationStrategy *OrgMockitoInternalInvocationMatcherApplicationStrategy_getMatcherApplicationStrategyForWithOrgMockitoInvocationInvocation_withJavaUtilList_(id<OrgMockitoInvocationInvocation> invocation, id<JavaUtilList> matchers);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoInternalInvocationMatcherApplicationStrategy)

#endif

#if !defined (OrgMockitoInternalInvocationMatcherApplicationStrategy_MatcherApplicationType_) && (INCLUDE_ALL_OrgMockitoInternalInvocationMatcherApplicationStrategy || defined(INCLUDE_OrgMockitoInternalInvocationMatcherApplicationStrategy_MatcherApplicationType))
#define OrgMockitoInternalInvocationMatcherApplicationStrategy_MatcherApplicationType_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, OrgMockitoInternalInvocationMatcherApplicationStrategy_MatcherApplicationType_Enum) {
  OrgMockitoInternalInvocationMatcherApplicationStrategy_MatcherApplicationType_Enum_ONE_MATCHER_PER_ARGUMENT = 0,
  OrgMockitoInternalInvocationMatcherApplicationStrategy_MatcherApplicationType_Enum_MATCH_EACH_VARARGS_WITH_LAST_MATCHER = 1,
  OrgMockitoInternalInvocationMatcherApplicationStrategy_MatcherApplicationType_Enum_ERROR_UNSUPPORTED_NUMBER_OF_MATCHERS = 2,
};

@interface OrgMockitoInternalInvocationMatcherApplicationStrategy_MatcherApplicationType : JavaLangEnum

@property (readonly, class, nonnull) OrgMockitoInternalInvocationMatcherApplicationStrategy_MatcherApplicationType *ONE_MATCHER_PER_ARGUMENT NS_SWIFT_NAME(ONE_MATCHER_PER_ARGUMENT);
@property (readonly, class, nonnull) OrgMockitoInternalInvocationMatcherApplicationStrategy_MatcherApplicationType *MATCH_EACH_VARARGS_WITH_LAST_MATCHER NS_SWIFT_NAME(MATCH_EACH_VARARGS_WITH_LAST_MATCHER);
@property (readonly, class, nonnull) OrgMockitoInternalInvocationMatcherApplicationStrategy_MatcherApplicationType *ERROR_UNSUPPORTED_NUMBER_OF_MATCHERS NS_SWIFT_NAME(ERROR_UNSUPPORTED_NUMBER_OF_MATCHERS);
+ (OrgMockitoInternalInvocationMatcherApplicationStrategy_MatcherApplicationType * __nonnull)ONE_MATCHER_PER_ARGUMENT;

+ (OrgMockitoInternalInvocationMatcherApplicationStrategy_MatcherApplicationType * __nonnull)MATCH_EACH_VARARGS_WITH_LAST_MATCHER;

+ (OrgMockitoInternalInvocationMatcherApplicationStrategy_MatcherApplicationType * __nonnull)ERROR_UNSUPPORTED_NUMBER_OF_MATCHERS;

#pragma mark Public

+ (OrgMockitoInternalInvocationMatcherApplicationStrategy_MatcherApplicationType *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (OrgMockitoInternalInvocationMatcherApplicationStrategy_MatcherApplicationType_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(OrgMockitoInternalInvocationMatcherApplicationStrategy_MatcherApplicationType)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT OrgMockitoInternalInvocationMatcherApplicationStrategy_MatcherApplicationType *OrgMockitoInternalInvocationMatcherApplicationStrategy_MatcherApplicationType_values_[];

inline OrgMockitoInternalInvocationMatcherApplicationStrategy_MatcherApplicationType *OrgMockitoInternalInvocationMatcherApplicationStrategy_MatcherApplicationType_get_ONE_MATCHER_PER_ARGUMENT(void);
J2OBJC_ENUM_CONSTANT(OrgMockitoInternalInvocationMatcherApplicationStrategy_MatcherApplicationType, ONE_MATCHER_PER_ARGUMENT)

inline OrgMockitoInternalInvocationMatcherApplicationStrategy_MatcherApplicationType *OrgMockitoInternalInvocationMatcherApplicationStrategy_MatcherApplicationType_get_MATCH_EACH_VARARGS_WITH_LAST_MATCHER(void);
J2OBJC_ENUM_CONSTANT(OrgMockitoInternalInvocationMatcherApplicationStrategy_MatcherApplicationType, MATCH_EACH_VARARGS_WITH_LAST_MATCHER)

inline OrgMockitoInternalInvocationMatcherApplicationStrategy_MatcherApplicationType *OrgMockitoInternalInvocationMatcherApplicationStrategy_MatcherApplicationType_get_ERROR_UNSUPPORTED_NUMBER_OF_MATCHERS(void);
J2OBJC_ENUM_CONSTANT(OrgMockitoInternalInvocationMatcherApplicationStrategy_MatcherApplicationType, ERROR_UNSUPPORTED_NUMBER_OF_MATCHERS)

FOUNDATION_EXPORT IOSObjectArray *OrgMockitoInternalInvocationMatcherApplicationStrategy_MatcherApplicationType_values(void);

FOUNDATION_EXPORT OrgMockitoInternalInvocationMatcherApplicationStrategy_MatcherApplicationType *OrgMockitoInternalInvocationMatcherApplicationStrategy_MatcherApplicationType_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT OrgMockitoInternalInvocationMatcherApplicationStrategy_MatcherApplicationType *OrgMockitoInternalInvocationMatcherApplicationStrategy_MatcherApplicationType_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoInternalInvocationMatcherApplicationStrategy_MatcherApplicationType)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgMockitoInternalInvocationMatcherApplicationStrategy")
