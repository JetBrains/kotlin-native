//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/testing/mockito/build_result/java/org/mockito/internal/configuration/injection/MockInjectionStrategy.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoInternalConfigurationInjectionMockInjectionStrategy")
#ifdef RESTRICT_OrgMockitoInternalConfigurationInjectionMockInjectionStrategy
#define INCLUDE_ALL_OrgMockitoInternalConfigurationInjectionMockInjectionStrategy 0
#else
#define INCLUDE_ALL_OrgMockitoInternalConfigurationInjectionMockInjectionStrategy 1
#endif
#undef RESTRICT_OrgMockitoInternalConfigurationInjectionMockInjectionStrategy

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgMockitoInternalConfigurationInjectionMockInjectionStrategy_) && (INCLUDE_ALL_OrgMockitoInternalConfigurationInjectionMockInjectionStrategy || defined(INCLUDE_OrgMockitoInternalConfigurationInjectionMockInjectionStrategy))
#define OrgMockitoInternalConfigurationInjectionMockInjectionStrategy_

@class JavaLangReflectField;
@protocol JavaUtilSet;

/*!
 @brief Injector strategy contract
 */
@interface OrgMockitoInternalConfigurationInjectionMockInjectionStrategy : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief NOP Strategy that will always try the next strategy.
 */
+ (OrgMockitoInternalConfigurationInjectionMockInjectionStrategy *)nop;

/*!
 @brief Actually inject mockCandidates on field.
 <p>
  Actual algorithm is defined in the implementations of <code>processInjection(Field, Object, Set)</code>.
  However if injection occurred successfully, the process should return <code>true</code>,
  and <code>false</code> otherwise. 
 </p>
  
 <p>
  The code takes care of calling the next strategy if available and if of course if required 
 </p>
 @param onField Field needing injection.
 @param fieldOwnedBy The owning instance of the field.
 @param mockCandidates A set of mock candidate, that might be injected.
 @return <code>true</code> if successful, <code>false</code> otherwise.
 */
- (jboolean)processWithJavaLangReflectField:(JavaLangReflectField *)onField
                                     withId:(id)fieldOwnedBy
                            withJavaUtilSet:(id<JavaUtilSet>)mockCandidates;

/*!
 @brief Enqueue next injection strategy.
 <p>
  The implementation should take care of the actual calling if required. 
 </p>
 @param strategy Queued strategy.
 @return The passed strategy instance to allow chaining.
 */
- (OrgMockitoInternalConfigurationInjectionMockInjectionStrategy *)thenTryWithOrgMockitoInternalConfigurationInjectionMockInjectionStrategy:(OrgMockitoInternalConfigurationInjectionMockInjectionStrategy *)strategy;

#pragma mark Protected

/*!
 @brief Process actual injection.
 <p>
  Don't call this method directly, instead call <code>process(Field, Object, Set)</code>
  </p>
 @param field Field needing injection
 @param fieldOwner Field owner instance.
 @param mockCandidates Pool of mocks to inject.
 @return <code>true</code> if injection occurred, <code>false</code> otherwise
 */
- (jboolean)processInjectionWithJavaLangReflectField:(JavaLangReflectField *)field
                                              withId:(id)fieldOwner
                                     withJavaUtilSet:(id<JavaUtilSet>)mockCandidates;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoInternalConfigurationInjectionMockInjectionStrategy)

FOUNDATION_EXPORT void OrgMockitoInternalConfigurationInjectionMockInjectionStrategy_init(OrgMockitoInternalConfigurationInjectionMockInjectionStrategy *self);

FOUNDATION_EXPORT OrgMockitoInternalConfigurationInjectionMockInjectionStrategy *OrgMockitoInternalConfigurationInjectionMockInjectionStrategy_nop(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoInternalConfigurationInjectionMockInjectionStrategy)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgMockitoInternalConfigurationInjectionMockInjectionStrategy")
