//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/testing/mockito/build_result/java/org/mockito/internal/exceptions/Reporter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoInternalExceptionsReporter")
#ifdef RESTRICT_OrgMockitoInternalExceptionsReporter
#define INCLUDE_ALL_OrgMockitoInternalExceptionsReporter 0
#else
#define INCLUDE_ALL_OrgMockitoInternalExceptionsReporter 1
#endif
#undef RESTRICT_OrgMockitoInternalExceptionsReporter

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgMockitoInternalExceptionsReporter_) && (INCLUDE_ALL_OrgMockitoInternalExceptionsReporter || defined(INCLUDE_OrgMockitoInternalExceptionsReporter))
#define OrgMockitoInternalExceptionsReporter_

@class IOSClass;
@class JavaLangAssertionError;
@class JavaLangException;
@class JavaLangReflectField;
@class JavaLangReflectMethod;
@class JavaLangThrowable;
@class OrgMockitoExceptionsBaseMockitoAssertionError;
@class OrgMockitoExceptionsBaseMockitoException;
@class OrgMockitoExceptionsMisusingUnnecessaryStubbingException;
@class OrgMockitoExceptionsVerificationMoreThanAllowedActualInvocations;
@class OrgMockitoInternalReportingDiscrepancy;
@class OrgMockitoMockSerializableMode;
@protocol JavaUtilCollection;
@protocol JavaUtilList;
@protocol OrgMockitoInvocationDescribedInvocation;
@protocol OrgMockitoInvocationInvocation;
@protocol OrgMockitoInvocationInvocationOnMock;
@protocol OrgMockitoInvocationLocation;
@protocol OrgMockitoListenersInvocationListener;

/*!
 @brief Reports verification and misusing errors.
 <p>
  One of the key points of mocking library is proper verification/exception
  messages. All messages in one place makes it easier to tune and amend them. 
 <p>
  Reporter can be injected and therefore is easily testable. 
 <p>
  Generally, exception messages are full of line breaks to make them easy to
  read (xunit plugins take only fraction of screen on modern IDEs).
 */
@interface OrgMockitoInternalExceptionsReporter : NSObject

#pragma mark Public

+ (JavaLangAssertionError *)argumentsAreDifferentWithNSString:(NSString *)wanted
                                                 withNSString:(NSString *)actual
                             withOrgMockitoInvocationLocation:(id<OrgMockitoInvocationLocation>)actualLocation;

+ (OrgMockitoExceptionsBaseMockitoException *)atMostAndNeverShouldNotBeUsedWithTimeout;

+ (OrgMockitoExceptionsBaseMockitoException *)cannotCallAbstractRealMethod;

+ (OrgMockitoExceptionsBaseMockitoException *)cannotCreateTimerWithNegativeDurationTimeWithLong:(jlong)durationMillis;

+ (OrgMockitoExceptionsBaseMockitoException *)cannotInitializeForInjectMocksAnnotationWithNSString:(NSString *)fieldName
                                                                                      withNSString:(NSString *)causeMessage;

+ (OrgMockitoExceptionsBaseMockitoException *)cannotInitializeForSpyAnnotationWithNSString:(NSString *)fieldName
                                                                     withJavaLangException:(JavaLangException *)details;

+ (OrgMockitoExceptionsBaseMockitoException *)cannotInjectDependencyWithJavaLangReflectField:(JavaLangReflectField *)field
                                                                                      withId:(id)matchingMock
                                                                       withJavaLangException:(JavaLangException *)details;

+ (OrgMockitoExceptionsBaseMockitoException *)cannotMockClassWithIOSClass:(IOSClass *)clazz
                                                             withNSString:(NSString *)reason;

+ (OrgMockitoExceptionsBaseMockitoException *)cannotStubVoidMethodWithAReturnValueWithNSString:(NSString *)methodName;

+ (OrgMockitoExceptionsBaseMockitoException *)cannotStubWithNullThrowable;

+ (OrgMockitoExceptionsBaseMockitoException *)cannotVerifyToString;

+ (OrgMockitoExceptionsBaseMockitoException *)checkedExceptionInvalidWithJavaLangThrowable:(JavaLangThrowable *)t;

+ (OrgMockitoExceptionsBaseMockitoException *)defaultAnswerDoesNotAcceptNullParameter;

+ (OrgMockitoExceptionsBaseMockitoException *)delegatedMethodDoesNotExistOnDelegateWithJavaLangReflectMethod:(JavaLangReflectMethod *)mockMethod
                                                                                                      withId:(id)mock
                                                                                                      withId:(id)delegate;

+ (OrgMockitoExceptionsBaseMockitoException *)delegatedMethodHasWrongReturnTypeWithJavaLangReflectMethod:(JavaLangReflectMethod *)mockMethod
                                                                               withJavaLangReflectMethod:(JavaLangReflectMethod *)delegateMethod
                                                                                                  withId:(id)mock
                                                                                                  withId:(id)delegate;

+ (OrgMockitoExceptionsBaseMockitoException *)extraInterfacesAcceptsOnlyInterfacesWithIOSClass:(IOSClass *)wrongType;

+ (OrgMockitoExceptionsBaseMockitoException *)extraInterfacesCannotContainMockedTypeWithIOSClass:(IOSClass *)wrongType;

+ (OrgMockitoExceptionsBaseMockitoException *)extraInterfacesDoesNotAcceptNullParameters;

+ (OrgMockitoExceptionsBaseMockitoException *)extraInterfacesRequiresAtLeastOneInterface;

+ (OrgMockitoExceptionsBaseMockitoException *)fieldInitialisationThrewExceptionWithJavaLangReflectField:(JavaLangReflectField *)field
                                                                                  withJavaLangThrowable:(JavaLangThrowable *)details;

+ (OrgMockitoExceptionsMisusingUnnecessaryStubbingException *)formatUnncessaryStubbingExceptionWithIOSClass:(IOSClass *)testClass
                                                                                     withJavaUtilCollection:(id<JavaUtilCollection>)unnecessaryStubbings;

+ (OrgMockitoExceptionsBaseMockitoException *)incorrectUseOfAdditionalMatchersWithNSString:(NSString *)additionalMatcherName
                                                                                   withInt:(jint)expectedSubMatchersCount
                                                                    withJavaUtilCollection:(id<JavaUtilCollection>)matcherStack;

+ (OrgMockitoExceptionsBaseMockitoException *)incorrectUseOfApi;

+ (OrgMockitoExceptionsBaseMockitoException *)inOrderRequiresFamiliarMock;

+ (OrgMockitoExceptionsBaseMockitoException *)invalidArgumentPositionRangeAtInvocationTimeWithOrgMockitoInvocationInvocationOnMock:(id<OrgMockitoInvocationInvocationOnMock>)invocation
                                                                                                                       withBoolean:(jboolean)willReturnLastParameter
                                                                                                                           withInt:(jint)argumentIndex;

+ (OrgMockitoExceptionsBaseMockitoException *)invalidArgumentRangeAtIdentityAnswerCreationTime;

+ (OrgMockitoExceptionsBaseMockitoException *)invalidUseOfMatchersWithInt:(jint)expectedMatchersCount
                                                         withJavaUtilList:(id<JavaUtilList>)recordedMatchers;

+ (OrgMockitoExceptionsBaseMockitoException *)invocationListenersRequiresAtLeastOneListener;

+ (OrgMockitoExceptionsBaseMockitoException *)invocationListenerThrewExceptionWithOrgMockitoListenersInvocationListener:(id<OrgMockitoListenersInvocationListener>)listener
                                                                                                  withJavaLangThrowable:(JavaLangThrowable *)listenerThrowable;

+ (OrgMockitoExceptionsBaseMockitoException *)methodDoesNotAcceptParameterWithNSString:(NSString *)method
                                                                          withNSString:(NSString *)parameter;

+ (OrgMockitoExceptionsBaseMockitoException *)misplacedArgumentMatcherWithJavaUtilList:(id<JavaUtilList>)lastMatchers;

+ (OrgMockitoExceptionsBaseMockitoException *)missingMethodInvocation;

+ (OrgMockitoExceptionsBaseMockitoException *)mockedTypeIsInconsistentWithDelegatedInstanceTypeWithIOSClass:(IOSClass *)mockedType
                                                                                                     withId:(id)delegatedInstance;

+ (OrgMockitoExceptionsBaseMockitoException *)mockedTypeIsInconsistentWithSpiedInstanceTypeWithIOSClass:(IOSClass *)mockedType
                                                                                                 withId:(id)spiedInstance;

+ (OrgMockitoExceptionsBaseMockitoException *)mocksHaveToBePassedToVerifyNoMoreInteractions;

+ (OrgMockitoExceptionsBaseMockitoException *)mocksHaveToBePassedWhenCreatingInOrder;

+ (OrgMockitoExceptionsBaseMockitoException *)moreThanOneAnnotationNotAllowedWithNSString:(NSString *)fieldName;

+ (OrgMockitoExceptionsBaseMockitoAssertionError *)neverWantedButInvokedWithOrgMockitoInvocationDescribedInvocation:(id<OrgMockitoInvocationDescribedInvocation>)wanted
                                                                                                   withJavaUtilList:(id<JavaUtilList>)invocations;

+ (OrgMockitoExceptionsBaseMockitoException *)noArgumentValueWasCaptured;

+ (OrgMockitoExceptionsBaseMockitoAssertionError *)noMoreInteractionsWantedWithOrgMockitoInvocationInvocation:(id<OrgMockitoInvocationInvocation>)undesired
                                                                                             withJavaUtilList:(id<JavaUtilList>)invocations;

+ (OrgMockitoExceptionsBaseMockitoAssertionError *)noMoreInteractionsWantedInOrderWithOrgMockitoInvocationInvocation:(id<OrgMockitoInvocationInvocation>)undesired;

+ (OrgMockitoExceptionsBaseMockitoException *)notAMockPassedToVerifyWithIOSClass:(IOSClass *)type;

+ (OrgMockitoExceptionsBaseMockitoException *)notAMockPassedToVerifyNoMoreInteractions;

+ (OrgMockitoExceptionsBaseMockitoException *)notAMockPassedToWhenMethod;

+ (OrgMockitoExceptionsBaseMockitoException *)notAMockPassedWhenCreatingInOrder;

+ (OrgMockitoExceptionsBaseMockitoException *)notAnException;

+ (OrgMockitoExceptionsBaseMockitoException *)nullPassedToVerify;

+ (OrgMockitoExceptionsBaseMockitoException *)nullPassedToVerifyNoMoreInteractions;

+ (OrgMockitoExceptionsBaseMockitoException *)nullPassedToWhenMethod;

+ (OrgMockitoExceptionsBaseMockitoException *)nullPassedWhenCreatingInOrder;

+ (OrgMockitoExceptionsBaseMockitoException *)onlyVoidMethodsCanBeSetToDoNothing;

+ (void)potentialStubbingProblemWithOrgMockitoInvocationInvocation:(id<OrgMockitoInvocationInvocation>)actualInvocation
                                            withJavaUtilCollection:(id<JavaUtilCollection>)argMismatchStubbings;

+ (void)redundantMockitoListenerWithNSString:(NSString *)listenerType;

+ (OrgMockitoExceptionsBaseMockitoException *)reportNoSubMatchersFoundWithNSString:(NSString *)additionalMatcherName;

+ (OrgMockitoExceptionsBaseMockitoException *)serializableWontWorkForObjectsThatDontImplementSerializableWithIOSClass:(IOSClass *)classToMock;

+ (OrgMockitoExceptionsBaseMockitoException *)smartNullPointerExceptionWithNSString:(NSString *)invocation
                                                   withOrgMockitoInvocationLocation:(id<OrgMockitoInvocationLocation>)location;

+ (OrgMockitoExceptionsBaseMockitoException *)spyAndDelegateAreMutuallyExclusive;

+ (OrgMockitoExceptionsBaseMockitoException *)stubPassedToVerify;

+ (OrgMockitoExceptionsBaseMockitoAssertionError *)tooLittleActualInvocationsWithOrgMockitoInternalReportingDiscrepancy:(OrgMockitoInternalReportingDiscrepancy *)discrepancy
                                                                            withOrgMockitoInvocationDescribedInvocation:(id<OrgMockitoInvocationDescribedInvocation>)wanted
                                                                                                       withJavaUtilList:(id<JavaUtilList>)allLocations;

+ (OrgMockitoExceptionsBaseMockitoAssertionError *)tooLittleActualInvocationsInOrderWithOrgMockitoInternalReportingDiscrepancy:(OrgMockitoInternalReportingDiscrepancy *)discrepancy
                                                                                   withOrgMockitoInvocationDescribedInvocation:(id<OrgMockitoInvocationDescribedInvocation>)wanted
                                                                                                              withJavaUtilList:(id<JavaUtilList>)locations;

+ (OrgMockitoExceptionsBaseMockitoAssertionError *)tooManyActualInvocationsWithInt:(jint)wantedCount
                                                                           withInt:(jint)actualCount
                                       withOrgMockitoInvocationDescribedInvocation:(id<OrgMockitoInvocationDescribedInvocation>)wanted
                                                                  withJavaUtilList:(id<JavaUtilList>)locations;

+ (OrgMockitoExceptionsBaseMockitoAssertionError *)tooManyActualInvocationsInOrderWithInt:(jint)wantedCount
                                                                                  withInt:(jint)actualCount
                                              withOrgMockitoInvocationDescribedInvocation:(id<OrgMockitoInvocationDescribedInvocation>)wanted
                                                                         withJavaUtilList:(id<JavaUtilList>)invocations;

+ (void)unfinishedMockingSession;

+ (OrgMockitoExceptionsBaseMockitoException *)unfinishedStubbingWithOrgMockitoInvocationLocation:(id<OrgMockitoInvocationLocation>)location;

+ (OrgMockitoExceptionsBaseMockitoException *)unfinishedVerificationExceptionWithOrgMockitoInvocationLocation:(id<OrgMockitoInvocationLocation>)location;

+ (void)unncessaryStubbingExceptionWithJavaUtilList:(id<JavaUtilList>)unused;

+ (OrgMockitoExceptionsBaseMockitoException *)unsupportedCombinationOfAnnotationsWithNSString:(NSString *)undesiredAnnotationOne
                                                                                 withNSString:(NSString *)undesiredAnnotationTwo;

+ (OrgMockitoExceptionsBaseMockitoException *)usingConstructorWithFancySerializableWithOrgMockitoMockSerializableMode:(OrgMockitoMockSerializableMode *)mode;

+ (OrgMockitoExceptionsVerificationMoreThanAllowedActualInvocations *)wantedAtMostXWithInt:(jint)maxNumberOfInvocations
                                                                                   withInt:(jint)foundSize;

+ (OrgMockitoExceptionsBaseMockitoAssertionError *)wantedButNotInvokedWithOrgMockitoInvocationDescribedInvocation:(id<OrgMockitoInvocationDescribedInvocation>)wanted;

+ (OrgMockitoExceptionsBaseMockitoAssertionError *)wantedButNotInvokedWithOrgMockitoInvocationDescribedInvocation:(id<OrgMockitoInvocationDescribedInvocation>)wanted
                                                                                                 withJavaUtilList:(id<JavaUtilList>)invocations;

+ (OrgMockitoExceptionsBaseMockitoAssertionError *)wantedButNotInvokedInOrderWithOrgMockitoInvocationDescribedInvocation:(id<OrgMockitoInvocationDescribedInvocation>)wanted
                                                                             withOrgMockitoInvocationDescribedInvocation:(id<OrgMockitoInvocationDescribedInvocation>)previous;

+ (OrgMockitoExceptionsBaseMockitoException *)wrongTypeOfArgumentToReturnWithOrgMockitoInvocationInvocationOnMock:(id<OrgMockitoInvocationInvocationOnMock>)invocation
                                                                                                     withNSString:(NSString *)expectedType
                                                                                                     withIOSClass:(IOSClass *)actualType
                                                                                                          withInt:(jint)argumentIndex;

+ (OrgMockitoExceptionsBaseMockitoException *)wrongTypeOfReturnValueWithNSString:(NSString *)expectedType
                                                                    withNSString:(NSString *)actualType
                                                                    withNSString:(NSString *)methodName;

+ (OrgMockitoExceptionsBaseMockitoException *)wrongTypeReturnedByDefaultAnswerWithId:(id)mock
                                                                        withNSString:(NSString *)expectedType
                                                                        withNSString:(NSString *)actualType
                                                                        withNSString:(NSString *)methodName;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoInternalExceptionsReporter)

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_checkedExceptionInvalidWithJavaLangThrowable_(JavaLangThrowable *t);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_cannotStubWithNullThrowable(void);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_unfinishedStubbingWithOrgMockitoInvocationLocation_(id<OrgMockitoInvocationLocation> location);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_incorrectUseOfApi(void);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_missingMethodInvocation(void);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_unfinishedVerificationExceptionWithOrgMockitoInvocationLocation_(id<OrgMockitoInvocationLocation> location);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_notAMockPassedToVerifyWithIOSClass_(IOSClass *type);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_nullPassedToVerify(void);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_notAMockPassedToWhenMethod(void);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_nullPassedToWhenMethod(void);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_mocksHaveToBePassedToVerifyNoMoreInteractions(void);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_notAMockPassedToVerifyNoMoreInteractions(void);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_nullPassedToVerifyNoMoreInteractions(void);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_notAMockPassedWhenCreatingInOrder(void);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_nullPassedWhenCreatingInOrder(void);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_mocksHaveToBePassedWhenCreatingInOrder(void);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_inOrderRequiresFamiliarMock(void);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_invalidUseOfMatchersWithInt_withJavaUtilList_(jint expectedMatchersCount, id<JavaUtilList> recordedMatchers);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_incorrectUseOfAdditionalMatchersWithNSString_withInt_withJavaUtilCollection_(NSString *additionalMatcherName, jint expectedSubMatchersCount, id<JavaUtilCollection> matcherStack);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_stubPassedToVerify(void);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_reportNoSubMatchersFoundWithNSString_(NSString *additionalMatcherName);

FOUNDATION_EXPORT JavaLangAssertionError *OrgMockitoInternalExceptionsReporter_argumentsAreDifferentWithNSString_withNSString_withOrgMockitoInvocationLocation_(NSString *wanted, NSString *actual, id<OrgMockitoInvocationLocation> actualLocation);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoAssertionError *OrgMockitoInternalExceptionsReporter_wantedButNotInvokedWithOrgMockitoInvocationDescribedInvocation_(id<OrgMockitoInvocationDescribedInvocation> wanted);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoAssertionError *OrgMockitoInternalExceptionsReporter_wantedButNotInvokedWithOrgMockitoInvocationDescribedInvocation_withJavaUtilList_(id<OrgMockitoInvocationDescribedInvocation> wanted, id<JavaUtilList> invocations);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoAssertionError *OrgMockitoInternalExceptionsReporter_wantedButNotInvokedInOrderWithOrgMockitoInvocationDescribedInvocation_withOrgMockitoInvocationDescribedInvocation_(id<OrgMockitoInvocationDescribedInvocation> wanted, id<OrgMockitoInvocationDescribedInvocation> previous);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoAssertionError *OrgMockitoInternalExceptionsReporter_tooManyActualInvocationsWithInt_withInt_withOrgMockitoInvocationDescribedInvocation_withJavaUtilList_(jint wantedCount, jint actualCount, id<OrgMockitoInvocationDescribedInvocation> wanted, id<JavaUtilList> locations);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoAssertionError *OrgMockitoInternalExceptionsReporter_neverWantedButInvokedWithOrgMockitoInvocationDescribedInvocation_withJavaUtilList_(id<OrgMockitoInvocationDescribedInvocation> wanted, id<JavaUtilList> invocations);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoAssertionError *OrgMockitoInternalExceptionsReporter_tooManyActualInvocationsInOrderWithInt_withInt_withOrgMockitoInvocationDescribedInvocation_withJavaUtilList_(jint wantedCount, jint actualCount, id<OrgMockitoInvocationDescribedInvocation> wanted, id<JavaUtilList> invocations);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoAssertionError *OrgMockitoInternalExceptionsReporter_tooLittleActualInvocationsWithOrgMockitoInternalReportingDiscrepancy_withOrgMockitoInvocationDescribedInvocation_withJavaUtilList_(OrgMockitoInternalReportingDiscrepancy *discrepancy, id<OrgMockitoInvocationDescribedInvocation> wanted, id<JavaUtilList> allLocations);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoAssertionError *OrgMockitoInternalExceptionsReporter_tooLittleActualInvocationsInOrderWithOrgMockitoInternalReportingDiscrepancy_withOrgMockitoInvocationDescribedInvocation_withJavaUtilList_(OrgMockitoInternalReportingDiscrepancy *discrepancy, id<OrgMockitoInvocationDescribedInvocation> wanted, id<JavaUtilList> locations);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoAssertionError *OrgMockitoInternalExceptionsReporter_noMoreInteractionsWantedWithOrgMockitoInvocationInvocation_withJavaUtilList_(id<OrgMockitoInvocationInvocation> undesired, id<JavaUtilList> invocations);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoAssertionError *OrgMockitoInternalExceptionsReporter_noMoreInteractionsWantedInOrderWithOrgMockitoInvocationInvocation_(id<OrgMockitoInvocationInvocation> undesired);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_cannotMockClassWithIOSClass_withNSString_(IOSClass *clazz, NSString *reason);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_cannotStubVoidMethodWithAReturnValueWithNSString_(NSString *methodName);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_onlyVoidMethodsCanBeSetToDoNothing(void);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_wrongTypeOfReturnValueWithNSString_withNSString_withNSString_(NSString *expectedType, NSString *actualType, NSString *methodName);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_wrongTypeReturnedByDefaultAnswerWithId_withNSString_withNSString_withNSString_(id mock, NSString *expectedType, NSString *actualType, NSString *methodName);

FOUNDATION_EXPORT OrgMockitoExceptionsVerificationMoreThanAllowedActualInvocations *OrgMockitoInternalExceptionsReporter_wantedAtMostXWithInt_withInt_(jint maxNumberOfInvocations, jint foundSize);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_misplacedArgumentMatcherWithJavaUtilList_(id<JavaUtilList> lastMatchers);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_smartNullPointerExceptionWithNSString_withOrgMockitoInvocationLocation_(NSString *invocation, id<OrgMockitoInvocationLocation> location);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_noArgumentValueWasCaptured(void);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_extraInterfacesDoesNotAcceptNullParameters(void);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_extraInterfacesAcceptsOnlyInterfacesWithIOSClass_(IOSClass *wrongType);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_extraInterfacesCannotContainMockedTypeWithIOSClass_(IOSClass *wrongType);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_extraInterfacesRequiresAtLeastOneInterface(void);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_mockedTypeIsInconsistentWithSpiedInstanceTypeWithIOSClass_withId_(IOSClass *mockedType, id spiedInstance);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_cannotCallAbstractRealMethod(void);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_cannotVerifyToString(void);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_moreThanOneAnnotationNotAllowedWithNSString_(NSString *fieldName);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_unsupportedCombinationOfAnnotationsWithNSString_withNSString_(NSString *undesiredAnnotationOne, NSString *undesiredAnnotationTwo);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_cannotInitializeForSpyAnnotationWithNSString_withJavaLangException_(NSString *fieldName, JavaLangException *details);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_cannotInitializeForInjectMocksAnnotationWithNSString_withNSString_(NSString *fieldName, NSString *causeMessage);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_atMostAndNeverShouldNotBeUsedWithTimeout(void);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_fieldInitialisationThrewExceptionWithJavaLangReflectField_withJavaLangThrowable_(JavaLangReflectField *field, JavaLangThrowable *details);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_methodDoesNotAcceptParameterWithNSString_withNSString_(NSString *method, NSString *parameter);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_invocationListenersRequiresAtLeastOneListener(void);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_invocationListenerThrewExceptionWithOrgMockitoListenersInvocationListener_withJavaLangThrowable_(id<OrgMockitoListenersInvocationListener> listener, JavaLangThrowable *listenerThrowable);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_cannotInjectDependencyWithJavaLangReflectField_withId_withJavaLangException_(JavaLangReflectField *field, id matchingMock, JavaLangException *details);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_mockedTypeIsInconsistentWithDelegatedInstanceTypeWithIOSClass_withId_(IOSClass *mockedType, id delegatedInstance);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_spyAndDelegateAreMutuallyExclusive(void);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_invalidArgumentRangeAtIdentityAnswerCreationTime(void);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_invalidArgumentPositionRangeAtInvocationTimeWithOrgMockitoInvocationInvocationOnMock_withBoolean_withInt_(id<OrgMockitoInvocationInvocationOnMock> invocation, jboolean willReturnLastParameter, jint argumentIndex);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_wrongTypeOfArgumentToReturnWithOrgMockitoInvocationInvocationOnMock_withNSString_withIOSClass_withInt_(id<OrgMockitoInvocationInvocationOnMock> invocation, NSString *expectedType, IOSClass *actualType, jint argumentIndex);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_defaultAnswerDoesNotAcceptNullParameter(void);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_serializableWontWorkForObjectsThatDontImplementSerializableWithIOSClass_(IOSClass *classToMock);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_delegatedMethodHasWrongReturnTypeWithJavaLangReflectMethod_withJavaLangReflectMethod_withId_withId_(JavaLangReflectMethod *mockMethod, JavaLangReflectMethod *delegateMethod, id mock, id delegate);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_delegatedMethodDoesNotExistOnDelegateWithJavaLangReflectMethod_withId_withId_(JavaLangReflectMethod *mockMethod, id mock, id delegate);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_usingConstructorWithFancySerializableWithOrgMockitoMockSerializableMode_(OrgMockitoMockSerializableMode *mode);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_cannotCreateTimerWithNegativeDurationTimeWithLong_(jlong durationMillis);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoException *OrgMockitoInternalExceptionsReporter_notAnException(void);

FOUNDATION_EXPORT OrgMockitoExceptionsMisusingUnnecessaryStubbingException *OrgMockitoInternalExceptionsReporter_formatUnncessaryStubbingExceptionWithIOSClass_withJavaUtilCollection_(IOSClass *testClass, id<JavaUtilCollection> unnecessaryStubbings);

FOUNDATION_EXPORT void OrgMockitoInternalExceptionsReporter_unncessaryStubbingExceptionWithJavaUtilList_(id<JavaUtilList> unused);

FOUNDATION_EXPORT void OrgMockitoInternalExceptionsReporter_potentialStubbingProblemWithOrgMockitoInvocationInvocation_withJavaUtilCollection_(id<OrgMockitoInvocationInvocation> actualInvocation, id<JavaUtilCollection> argMismatchStubbings);

FOUNDATION_EXPORT void OrgMockitoInternalExceptionsReporter_redundantMockitoListenerWithNSString_(NSString *listenerType);

FOUNDATION_EXPORT void OrgMockitoInternalExceptionsReporter_unfinishedMockingSession(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoInternalExceptionsReporter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgMockitoInternalExceptionsReporter")
