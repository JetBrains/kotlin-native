//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/testing/mockito/build_result/java/org/mockito/internal/exceptions/ExceptionIncludingMockitoWarnings.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoInternalExceptionsExceptionIncludingMockitoWarnings")
#ifdef RESTRICT_OrgMockitoInternalExceptionsExceptionIncludingMockitoWarnings
#define INCLUDE_ALL_OrgMockitoInternalExceptionsExceptionIncludingMockitoWarnings 0
#else
#define INCLUDE_ALL_OrgMockitoInternalExceptionsExceptionIncludingMockitoWarnings 1
#endif
#undef RESTRICT_OrgMockitoInternalExceptionsExceptionIncludingMockitoWarnings

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgMockitoInternalExceptionsExceptionIncludingMockitoWarnings_) && (INCLUDE_ALL_OrgMockitoInternalExceptionsExceptionIncludingMockitoWarnings || defined(INCLUDE_OrgMockitoInternalExceptionsExceptionIncludingMockitoWarnings))
#define OrgMockitoInternalExceptionsExceptionIncludingMockitoWarnings_

#define RESTRICT_JavaLangRuntimeException 1
#define INCLUDE_JavaLangRuntimeException 1
#include "java/lang/RuntimeException.h"

@class JavaLangThrowable;

@interface OrgMockitoInternalExceptionsExceptionIncludingMockitoWarnings : JavaLangRuntimeException

#pragma mark Public

- (instancetype __nonnull)initWithNSString:(NSString *)message
                     withJavaLangThrowable:(JavaLangThrowable *)throwable;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1
                               withBoolean:(jboolean)arg2
                               withBoolean:(jboolean)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoInternalExceptionsExceptionIncludingMockitoWarnings)

FOUNDATION_EXPORT void OrgMockitoInternalExceptionsExceptionIncludingMockitoWarnings_initWithNSString_withJavaLangThrowable_(OrgMockitoInternalExceptionsExceptionIncludingMockitoWarnings *self, NSString *message, JavaLangThrowable *throwable);

FOUNDATION_EXPORT OrgMockitoInternalExceptionsExceptionIncludingMockitoWarnings *new_OrgMockitoInternalExceptionsExceptionIncludingMockitoWarnings_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *throwable) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMockitoInternalExceptionsExceptionIncludingMockitoWarnings *create_OrgMockitoInternalExceptionsExceptionIncludingMockitoWarnings_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *throwable);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoInternalExceptionsExceptionIncludingMockitoWarnings)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgMockitoInternalExceptionsExceptionIncludingMockitoWarnings")
