//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/testing/mockito/build_result/java/org/mockito/internal/util/Primitives.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoInternalUtilPrimitives")
#ifdef RESTRICT_OrgMockitoInternalUtilPrimitives
#define INCLUDE_ALL_OrgMockitoInternalUtilPrimitives 0
#else
#define INCLUDE_ALL_OrgMockitoInternalUtilPrimitives 1
#endif
#undef RESTRICT_OrgMockitoInternalUtilPrimitives

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgMockitoInternalUtilPrimitives_) && (INCLUDE_ALL_OrgMockitoInternalUtilPrimitives || defined(INCLUDE_OrgMockitoInternalUtilPrimitives))
#define OrgMockitoInternalUtilPrimitives_

@class IOSClass;

@interface OrgMockitoInternalUtilPrimitives : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Returns the boxed default value for a primitive or a primitive wrapper.
 @param primitiveOrWrapperType The type to lookup the default value
 @return The boxed default values as defined in Java Language Specification,
          <code>null</code> if the type is neither a primitive nor a wrapper
 */
+ (id)defaultValueWithIOSClass:(IOSClass *)primitiveOrWrapperType;

+ (jboolean)isAssignableFromWrapperWithIOSClass:(IOSClass *)valueClass
                                   withIOSClass:(IOSClass *)referenceType;

/*!
 @brief Indicates if the given class is primitive type or a primitive wrapper.
 @param type The type to check
 @return <code>true</code> if primitive or wrapper, <code>false</code> otherwise.
 */
+ (jboolean)isPrimitiveOrWrapperWithIOSClass:(IOSClass *)type;

/*!
 @brief Returns the primitive type of the given class.
 <p>
  The passed class can be any class : <code>boolean.class</code>, <code>Integer.class</code>
  in witch case this method will return <code>boolean.class</code>, even <code>SomeObject.class</code>
  in which case <code>null</code> will be returned.
 @param clazz The class from which primitive type has to be retrieved
 @return The primitive type if relevant, otherwise <code>null</code>
 */
+ (IOSClass *)primitiveTypeOfWithIOSClass:(IOSClass *)clazz;

@end

J2OBJC_STATIC_INIT(OrgMockitoInternalUtilPrimitives)

FOUNDATION_EXPORT void OrgMockitoInternalUtilPrimitives_init(OrgMockitoInternalUtilPrimitives *self);

FOUNDATION_EXPORT OrgMockitoInternalUtilPrimitives *new_OrgMockitoInternalUtilPrimitives_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMockitoInternalUtilPrimitives *create_OrgMockitoInternalUtilPrimitives_init(void);

FOUNDATION_EXPORT IOSClass *OrgMockitoInternalUtilPrimitives_primitiveTypeOfWithIOSClass_(IOSClass *clazz);

FOUNDATION_EXPORT jboolean OrgMockitoInternalUtilPrimitives_isPrimitiveOrWrapperWithIOSClass_(IOSClass *type);

FOUNDATION_EXPORT jboolean OrgMockitoInternalUtilPrimitives_isAssignableFromWrapperWithIOSClass_withIOSClass_(IOSClass *valueClass, IOSClass *referenceType);

FOUNDATION_EXPORT id OrgMockitoInternalUtilPrimitives_defaultValueWithIOSClass_(IOSClass *primitiveOrWrapperType);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoInternalUtilPrimitives)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgMockitoInternalUtilPrimitives")
