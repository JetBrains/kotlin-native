//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/testing/mockito/build_result/java/org/mockito/internal/util/concurrent/WeakConcurrentSet.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoInternalUtilConcurrentWeakConcurrentSet")
#ifdef RESTRICT_OrgMockitoInternalUtilConcurrentWeakConcurrentSet
#define INCLUDE_ALL_OrgMockitoInternalUtilConcurrentWeakConcurrentSet 0
#else
#define INCLUDE_ALL_OrgMockitoInternalUtilConcurrentWeakConcurrentSet 1
#endif
#undef RESTRICT_OrgMockitoInternalUtilConcurrentWeakConcurrentSet

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgMockitoInternalUtilConcurrentWeakConcurrentSet_) && (INCLUDE_ALL_OrgMockitoInternalUtilConcurrentWeakConcurrentSet || defined(INCLUDE_OrgMockitoInternalUtilConcurrentWeakConcurrentSet))
#define OrgMockitoInternalUtilConcurrentWeakConcurrentSet_

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

#define RESTRICT_JavaLangIterable 1
#define INCLUDE_JavaLangIterable 1
#include "java/lang/Iterable.h"

@class JavaLangThread;
@class OrgMockitoInternalUtilConcurrentWeakConcurrentMap;
@class OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner;
@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilIterator;
@protocol JavaUtilSpliterator;

/*!
 @brief <p>
  A thread-safe set with weak values.
 Entries are based on a key's system hash code and keys are considered equal only by reference equality. 
 </p>
  This class does not implement the <code>java.util.Set</code> interface because this implementation is incompatible
  with the set contract. While iterating over a set's entries, any value that has not passed iteration is referenced non-weakly.
 */
@interface OrgMockitoInternalUtilConcurrentWeakConcurrentSet : NSObject < JavaLangRunnable, JavaLangIterable > {
 @public
  OrgMockitoInternalUtilConcurrentWeakConcurrentMap *target_;
}

#pragma mark Public

- (instancetype __nonnull)initWithOrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner:(OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner *)cleaner;

/*!
 @param value The value to add to the set.
 @return <code>true</code> if the value was added to the set and was not contained before.
 */
- (jboolean)addWithId:(id)value;

/*!
 @brief Returns the approximate size of this set where the returned number is at least as big as the actual number of entries.
 @return The minimum size of this set.
 */
- (jint)approximateSize;

/*!
 @brief Clears the set.
 */
- (void)clear;

/*!
 @param value The value to check if it is contained in the set.
 @return <code>true</code> if the set contains the value.
 */
- (jboolean)containsWithId:(id)value;

/*!
 @brief Cleans all unused references.
 */
- (void)expungeStaleEntries;

/*!
 @return The cleaner thread or <code>null</code> if no such thread was set.
 */
- (JavaLangThread *)getCleanerThread;

- (id<JavaUtilIterator>)iterator;

/*!
 @param value The value to remove from the set.
 @return <code>true</code> if the value is contained in the set.
 */
- (jboolean)removeWithId:(id)value;

- (void)run;

#pragma mark Package-Private

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoInternalUtilConcurrentWeakConcurrentSet)

J2OBJC_FIELD_SETTER(OrgMockitoInternalUtilConcurrentWeakConcurrentSet, target_, OrgMockitoInternalUtilConcurrentWeakConcurrentMap *)

FOUNDATION_EXPORT void OrgMockitoInternalUtilConcurrentWeakConcurrentSet_initWithOrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner_(OrgMockitoInternalUtilConcurrentWeakConcurrentSet *self, OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner *cleaner);

FOUNDATION_EXPORT OrgMockitoInternalUtilConcurrentWeakConcurrentSet *new_OrgMockitoInternalUtilConcurrentWeakConcurrentSet_initWithOrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner_(OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner *cleaner) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMockitoInternalUtilConcurrentWeakConcurrentSet *create_OrgMockitoInternalUtilConcurrentWeakConcurrentSet_initWithOrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner_(OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner *cleaner);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoInternalUtilConcurrentWeakConcurrentSet)

#endif

#if !defined (OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner_) && (INCLUDE_ALL_OrgMockitoInternalUtilConcurrentWeakConcurrentSet || defined(INCLUDE_OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner))
#define OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner_Enum) {
  OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner_Enum_THREAD = 0,
  OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner_Enum_INLINE = 1,
  OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner_Enum_MANUAL = 2,
};

/*!
 @brief Determines the cleaning format.A reference is removed either by an explicitly started cleaner thread
  associated with this instance (<code>Cleaner.THREAD</code>), as a result of interacting with this thread local
  from any thread (<code>Cleaner.INLINE</code> or manually by submitting the detached thread local to a thread
  (<code>Cleaner.MANUAL</code>).
 */
@interface OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner : JavaLangEnum

@property (readonly, class, nonnull) OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner *THREAD NS_SWIFT_NAME(THREAD);
@property (readonly, class, nonnull) OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner *INLINE NS_SWIFT_NAME(INLINE);
@property (readonly, class, nonnull) OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner *MANUAL NS_SWIFT_NAME(MANUAL);
+ (OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner * __nonnull)THREAD;

+ (OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner * __nonnull)INLINE;

+ (OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner * __nonnull)MANUAL;

#pragma mark Public

+ (OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner *OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner_values_[];

inline OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner *OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner_get_THREAD(void);
J2OBJC_ENUM_CONSTANT(OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner, THREAD)

inline OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner *OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner_get_INLINE(void);
J2OBJC_ENUM_CONSTANT(OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner, INLINE)

inline OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner *OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner_get_MANUAL(void);
J2OBJC_ENUM_CONSTANT(OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner, MANUAL)

FOUNDATION_EXPORT IOSObjectArray *OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner_values(void);

FOUNDATION_EXPORT OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner *OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner *OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoInternalUtilConcurrentWeakConcurrentSet_Cleaner)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgMockitoInternalUtilConcurrentWeakConcurrentSet")
