//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/testing/mockito/build_result/java/org/mockito/internal/util/MockUtil.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoInternalUtilMockUtil")
#ifdef RESTRICT_OrgMockitoInternalUtilMockUtil
#define INCLUDE_ALL_OrgMockitoInternalUtilMockUtil 0
#else
#define INCLUDE_ALL_OrgMockitoInternalUtilMockUtil 1
#endif
#undef RESTRICT_OrgMockitoInternalUtilMockUtil

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgMockitoInternalUtilMockUtil_) && (INCLUDE_ALL_OrgMockitoInternalUtilMockUtil || defined(INCLUDE_OrgMockitoInternalUtilMockUtil))
#define OrgMockitoInternalUtilMockUtil_

@class IOSClass;
@class OrgMockitoInternalStubbingInvocationContainerImpl;
@protocol OrgMockitoInvocationMockHandler;
@protocol OrgMockitoMockMockCreationSettings;
@protocol OrgMockitoMockMockName;
@protocol OrgMockitoPluginsMockMaker_TypeMockability;

@interface OrgMockitoInternalUtilMockUtil : NSObject

#pragma mark Public

+ (id)createMockWithOrgMockitoMockMockCreationSettings:(id<OrgMockitoMockMockCreationSettings>)settings;

+ (OrgMockitoInternalStubbingInvocationContainerImpl *)getInvocationContainerWithId:(id)mock;

+ (id<OrgMockitoInvocationMockHandler>)getMockHandlerWithId:(id)mock;

+ (id<OrgMockitoMockMockName>)getMockNameWithId:(id)mock;

+ (id<OrgMockitoMockMockCreationSettings>)getMockSettingsWithId:(id)mock;

+ (jboolean)isMockWithId:(id)mock;

+ (jboolean)isSpyWithId:(id)mock;

+ (void)maybeRedefineMockNameWithId:(id)mock
                       withNSString:(NSString *)newName;

+ (void)resetMockWithId:(id)mock;

+ (id<OrgMockitoPluginsMockMaker_TypeMockability>)typeMockabilityOfWithIOSClass:(IOSClass *)type;

@end

J2OBJC_STATIC_INIT(OrgMockitoInternalUtilMockUtil)

FOUNDATION_EXPORT id<OrgMockitoPluginsMockMaker_TypeMockability> OrgMockitoInternalUtilMockUtil_typeMockabilityOfWithIOSClass_(IOSClass *type);

FOUNDATION_EXPORT id OrgMockitoInternalUtilMockUtil_createMockWithOrgMockitoMockMockCreationSettings_(id<OrgMockitoMockMockCreationSettings> settings);

FOUNDATION_EXPORT void OrgMockitoInternalUtilMockUtil_resetMockWithId_(id mock);

FOUNDATION_EXPORT id<OrgMockitoInvocationMockHandler> OrgMockitoInternalUtilMockUtil_getMockHandlerWithId_(id mock);

FOUNDATION_EXPORT OrgMockitoInternalStubbingInvocationContainerImpl *OrgMockitoInternalUtilMockUtil_getInvocationContainerWithId_(id mock);

FOUNDATION_EXPORT jboolean OrgMockitoInternalUtilMockUtil_isSpyWithId_(id mock);

FOUNDATION_EXPORT jboolean OrgMockitoInternalUtilMockUtil_isMockWithId_(id mock);

FOUNDATION_EXPORT id<OrgMockitoMockMockName> OrgMockitoInternalUtilMockUtil_getMockNameWithId_(id mock);

FOUNDATION_EXPORT void OrgMockitoInternalUtilMockUtil_maybeRedefineMockNameWithId_withNSString_(id mock, NSString *newName);

FOUNDATION_EXPORT id<OrgMockitoMockMockCreationSettings> OrgMockitoInternalUtilMockUtil_getMockSettingsWithId_(id mock);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoInternalUtilMockUtil)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgMockitoInternalUtilMockUtil")
