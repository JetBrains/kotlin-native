//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/testing/mockito/build_result/java/org/mockito/internal/util/reflection/BeanPropertySetter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoInternalUtilReflectionBeanPropertySetter")
#ifdef RESTRICT_OrgMockitoInternalUtilReflectionBeanPropertySetter
#define INCLUDE_ALL_OrgMockitoInternalUtilReflectionBeanPropertySetter 0
#else
#define INCLUDE_ALL_OrgMockitoInternalUtilReflectionBeanPropertySetter 1
#endif
#undef RESTRICT_OrgMockitoInternalUtilReflectionBeanPropertySetter

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgMockitoInternalUtilReflectionBeanPropertySetter_) && (INCLUDE_ALL_OrgMockitoInternalUtilReflectionBeanPropertySetter || defined(INCLUDE_OrgMockitoInternalUtilReflectionBeanPropertySetter))
#define OrgMockitoInternalUtilReflectionBeanPropertySetter_

@class JavaLangReflectField;

/*!
 @brief This utility class will call the setter of the property to inject a new value.
 */
@interface OrgMockitoInternalUtilReflectionBeanPropertySetter : NSObject

#pragma mark Public

/*!
 @brief New BeanPropertySetter that don't report failure
 @param target The target on which the setter must be invoked
 @param propertyField The propertyField that must be accessed through a setter
 */
- (instancetype __nonnull)initWithId:(id)target
            withJavaLangReflectField:(JavaLangReflectField *)propertyField;

/*!
 @brief New BeanPropertySetter
 @param target The target on which the setter must be invoked
 @param propertyField The field that should be accessed with the setter
 @param reportNoSetterFound Allow the set method to raise an Exception if the setter cannot be found
 */
- (instancetype __nonnull)initWithId:(id)target
            withJavaLangReflectField:(JavaLangReflectField *)propertyField
                         withBoolean:(jboolean)reportNoSetterFound;

/*!
 @brief Set the value to the property represented by this <code>BeanPropertySetter</code>
 @param value the new value to pass to the property setter
 @return <code>true</code> if the value has been injected, <code>false</code> otherwise
 @throw RuntimeExceptionCan be thrown if the setter threw an exception, if the setter is not accessible
           or, if <code>reportNoSetterFound</code> and setter could not be found.
 */
- (jboolean)setWithId:(id)value;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoInternalUtilReflectionBeanPropertySetter)

FOUNDATION_EXPORT void OrgMockitoInternalUtilReflectionBeanPropertySetter_initWithId_withJavaLangReflectField_withBoolean_(OrgMockitoInternalUtilReflectionBeanPropertySetter *self, id target, JavaLangReflectField *propertyField, jboolean reportNoSetterFound);

FOUNDATION_EXPORT OrgMockitoInternalUtilReflectionBeanPropertySetter *new_OrgMockitoInternalUtilReflectionBeanPropertySetter_initWithId_withJavaLangReflectField_withBoolean_(id target, JavaLangReflectField *propertyField, jboolean reportNoSetterFound) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMockitoInternalUtilReflectionBeanPropertySetter *create_OrgMockitoInternalUtilReflectionBeanPropertySetter_initWithId_withJavaLangReflectField_withBoolean_(id target, JavaLangReflectField *propertyField, jboolean reportNoSetterFound);

FOUNDATION_EXPORT void OrgMockitoInternalUtilReflectionBeanPropertySetter_initWithId_withJavaLangReflectField_(OrgMockitoInternalUtilReflectionBeanPropertySetter *self, id target, JavaLangReflectField *propertyField);

FOUNDATION_EXPORT OrgMockitoInternalUtilReflectionBeanPropertySetter *new_OrgMockitoInternalUtilReflectionBeanPropertySetter_initWithId_withJavaLangReflectField_(id target, JavaLangReflectField *propertyField) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMockitoInternalUtilReflectionBeanPropertySetter *create_OrgMockitoInternalUtilReflectionBeanPropertySetter_initWithId_withJavaLangReflectField_(id target, JavaLangReflectField *propertyField);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoInternalUtilReflectionBeanPropertySetter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgMockitoInternalUtilReflectionBeanPropertySetter")
