//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/testing/mockito/build_result/java/org/mockito/internal/util/reflection/GenericMetadataSupport.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoInternalUtilReflectionGenericMetadataSupport")
#ifdef RESTRICT_OrgMockitoInternalUtilReflectionGenericMetadataSupport
#define INCLUDE_ALL_OrgMockitoInternalUtilReflectionGenericMetadataSupport 0
#else
#define INCLUDE_ALL_OrgMockitoInternalUtilReflectionGenericMetadataSupport 1
#endif
#undef RESTRICT_OrgMockitoInternalUtilReflectionGenericMetadataSupport
#ifdef INCLUDE_OrgMockitoInternalUtilReflectionGenericMetadataSupport_WildCardBoundedType
#define INCLUDE_OrgMockitoInternalUtilReflectionGenericMetadataSupport_BoundedType 1
#endif
#ifdef INCLUDE_OrgMockitoInternalUtilReflectionGenericMetadataSupport_TypeVarBoundedType
#define INCLUDE_OrgMockitoInternalUtilReflectionGenericMetadataSupport_BoundedType 1
#endif

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgMockitoInternalUtilReflectionGenericMetadataSupport_) && (INCLUDE_ALL_OrgMockitoInternalUtilReflectionGenericMetadataSupport || defined(INCLUDE_OrgMockitoInternalUtilReflectionGenericMetadataSupport))
#define OrgMockitoInternalUtilReflectionGenericMetadataSupport_

@class IOSClass;
@class IOSObjectArray;
@class JavaLangReflectMethod;
@protocol JavaLangReflectType;
@protocol JavaLangReflectTypeVariable;
@protocol JavaUtilList;
@protocol JavaUtilMap;

/*!
 @brief This class can retrieve generic meta-data that the compiler stores on classes
  and accessible members.
 <p>
      The main idea of this code is to create a Map that will help to resolve return types.
      In order to actually work with nested generics, this map will have to be passed along new instances
      as a type context. 
 </p>
  
 <p>
      Hence :     
 <ul>
          <li>A new instance representing the metadata is created using the <code>inferFrom(Type)</code> method from a real
          <code>Class</code> or from a <code>ParameterizedType</code>, other types are not yet supported.</li>
          <li>Then from this metadata, we can extract meta-data for a generic return type of a method, using
          <code>resolveGenericReturnType(Method)</code>.</li>
      </ul>
  </p>
  
 <p>
  For now this code support the following kind of generic declarations : 
 <pre class="code"><code class="java">
  interface GenericsNest&lt;K extends Comparable&lt;K&gt; & Cloneable&gt; extends Map&lt;K, Set&lt;Number&gt;&gt; {
      Set&lt;Number&gt; remove(Object key); // override with fixed ParameterizedType
      List&lt;? super Integer&gt; returning_wildcard_with_class_lower_bound();
      List&lt;? super K&gt; returning_wildcard_with_typeVar_lower_bound();
      List&lt;? extends K&gt; returning_wildcard_with_typeVar_upper_bound();
      K returningK();     
 &lt;O extends K&gt; List&lt;O&gt; paramType_with_type_params();
      &lt;S, T extends S&gt; T two_type_params();
      &lt;O extends K&gt; O typeVar_with_type_params();
      Number returningNonGeneric();
  } 
 </code>
@endcode
 - seealso: #inferFrom(Type)
 - seealso: #resolveGenericReturnType(Method)
 - seealso: org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs
 */
@interface OrgMockitoInternalUtilReflectionGenericMetadataSupport : NSObject {
 @public
  /*!
   @brief Represents actual type variables resolved for current class.
   */
  id<JavaUtilMap> contextualActualTypeParameters_;
}

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @return Actual type arguments matching the type variables of the raw type represented by this <code>GenericMetadataSupport</code> instance.
 */
- (id<JavaUtilMap>)actualTypeArguments;

/*!
 @return Returns extra interfaces <strong>if relevant</strong>, otherwise empty List.
 */
- (id<JavaUtilList>)extraInterfaces;

/*!
 @return Returns true if metadata knows about extra-interfaces <code>extraInterfaces()</code> <strong>if relevant</strong>.
 */
- (jboolean)hasRawExtraInterfaces;

/*!
 @brief Create an new instance of <code>GenericMetadataSupport</code> inferred from a <code>Type</code>.
 <p>
      At the moment <code>type</code> can only be a <code>Class</code> or a <code>ParameterizedType</code>, otherwise
      it'll throw a <code>MockitoException</code>.
  </p>
 @param type The class from which the <code>GenericMetadataSupport</code>  should be built.
 @return The new <code>GenericMetadataSupport</code>.
 @throw MockitoExceptionRaised if type is not a <code>Class</code> or a <code>ParameterizedType</code>.
 */
+ (OrgMockitoInternalUtilReflectionGenericMetadataSupport *)inferFromWithJavaLangReflectType:(id<JavaLangReflectType>)type;

/*!
 @return Returns an array with the raw types of <code>extraInterfaces()</code> <strong>if relevant</strong>.
 */
- (IOSObjectArray *)rawExtraInterfaces;

/*!
 @return Raw type of the current instance.
 */
- (IOSClass *)rawType;

/*!
 @brief Resolve current method generic return type to a <code>GenericMetadataSupport</code>.
 @param method Method to resolve the return type.
 @return <code>GenericMetadataSupport</code> representing this generic return type.
 */
- (OrgMockitoInternalUtilReflectionGenericMetadataSupport *)resolveGenericReturnTypeWithJavaLangReflectMethod:(JavaLangReflectMethod *)method;

#pragma mark Protected

- (IOSClass *)extractRawTypeOfWithJavaLangReflectType:(id<JavaLangReflectType>)type;

- (id<JavaLangReflectType>)getActualTypeArgumentForWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)typeParameter;

/*!
 @brief Registers the type variables for the given type and all of its superclasses and superinterfaces.
 */
- (void)registerAllTypeVariablesWithJavaLangReflectType:(id<JavaLangReflectType>)classType;

- (void)registerTypeParametersOnWithJavaLangReflectTypeVariableArray:(IOSObjectArray *)typeParameters;

- (void)registerTypeVariablesOnWithJavaLangReflectType:(id<JavaLangReflectType>)classType;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoInternalUtilReflectionGenericMetadataSupport)

J2OBJC_FIELD_SETTER(OrgMockitoInternalUtilReflectionGenericMetadataSupport, contextualActualTypeParameters_, id<JavaUtilMap>)

FOUNDATION_EXPORT void OrgMockitoInternalUtilReflectionGenericMetadataSupport_init(OrgMockitoInternalUtilReflectionGenericMetadataSupport *self);

FOUNDATION_EXPORT OrgMockitoInternalUtilReflectionGenericMetadataSupport *OrgMockitoInternalUtilReflectionGenericMetadataSupport_inferFromWithJavaLangReflectType_(id<JavaLangReflectType> type);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoInternalUtilReflectionGenericMetadataSupport)

#endif

#if !defined (OrgMockitoInternalUtilReflectionGenericMetadataSupport_BoundedType_) && (INCLUDE_ALL_OrgMockitoInternalUtilReflectionGenericMetadataSupport || defined(INCLUDE_OrgMockitoInternalUtilReflectionGenericMetadataSupport_BoundedType))
#define OrgMockitoInternalUtilReflectionGenericMetadataSupport_BoundedType_

#define RESTRICT_JavaLangReflectType 1
#define INCLUDE_JavaLangReflectType 1
#include "java/lang/reflect/Type.h"

@class IOSObjectArray;

/*!
 @brief Type representing bounds of a type
 - seealso: TypeVarBoundedType
 - seealso: <a href="http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.4">http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.4</a>
 - seealso: WildCardBoundedType
 - seealso: <a href="http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.5.1">http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.5.1</a>
 */
@protocol OrgMockitoInternalUtilReflectionGenericMetadataSupport_BoundedType < JavaLangReflectType, JavaObject >

- (id<JavaLangReflectType>)firstBound;

- (IOSObjectArray *)interfaceBounds;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoInternalUtilReflectionGenericMetadataSupport_BoundedType)

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoInternalUtilReflectionGenericMetadataSupport_BoundedType)

#endif

#if !defined (OrgMockitoInternalUtilReflectionGenericMetadataSupport_TypeVarBoundedType_) && (INCLUDE_ALL_OrgMockitoInternalUtilReflectionGenericMetadataSupport || defined(INCLUDE_OrgMockitoInternalUtilReflectionGenericMetadataSupport_TypeVarBoundedType))
#define OrgMockitoInternalUtilReflectionGenericMetadataSupport_TypeVarBoundedType_

@class IOSObjectArray;
@protocol JavaLangReflectType;
@protocol JavaLangReflectTypeVariable;

/*!
 @brief Type representing bounds of a type variable, allows to keep all bounds information.
 <p>It uses the first bound in the array, as this array is never null and always contains at least
  one element (Object is always here if no bounds are declared).</p>
  
 <p>If upper bounds are declared with SomeClass and additional interfaces, then firstBound will be SomeClass and
  interfacesBound will be an array of the additional interfaces.
  i.e. <code>SomeClass</code>.
  <pre class="code"><code class="java">
      interface UpperBoundedTypeWithClass<E extends Comparable<E> & Cloneable> {
          E get();
      }
      // will return Comparable type 
 </code>
@endcode
  </p>
 - seealso: <a href="http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.4">http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.4</a>
 */
@interface OrgMockitoInternalUtilReflectionGenericMetadataSupport_TypeVarBoundedType : NSObject < OrgMockitoInternalUtilReflectionGenericMetadataSupport_BoundedType >

#pragma mark Public

- (instancetype __nonnull)initWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)typeVariable;

- (jboolean)isEqual:(id)o;

/*!
 @return either a class or an interface (parameterized or not), if no bounds declared Object is returned.
 */
- (id<JavaLangReflectType>)firstBound;

- (NSUInteger)hash;

/*!
 @brief On a Type Variable (typeVar extends C_0 & I_1 & I_2 & etc), will return an array
  containing I_1 and I_2.
 @return other bounds for this type, these bounds can only be only interfaces as the JLS says,
  empty array if no other bound declared.
 */
- (IOSObjectArray *)interfaceBounds;

- (NSString *)description;

- (id<JavaLangReflectTypeVariable>)typeVariable;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoInternalUtilReflectionGenericMetadataSupport_TypeVarBoundedType)

FOUNDATION_EXPORT void OrgMockitoInternalUtilReflectionGenericMetadataSupport_TypeVarBoundedType_initWithJavaLangReflectTypeVariable_(OrgMockitoInternalUtilReflectionGenericMetadataSupport_TypeVarBoundedType *self, id<JavaLangReflectTypeVariable> typeVariable);

FOUNDATION_EXPORT OrgMockitoInternalUtilReflectionGenericMetadataSupport_TypeVarBoundedType *new_OrgMockitoInternalUtilReflectionGenericMetadataSupport_TypeVarBoundedType_initWithJavaLangReflectTypeVariable_(id<JavaLangReflectTypeVariable> typeVariable) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMockitoInternalUtilReflectionGenericMetadataSupport_TypeVarBoundedType *create_OrgMockitoInternalUtilReflectionGenericMetadataSupport_TypeVarBoundedType_initWithJavaLangReflectTypeVariable_(id<JavaLangReflectTypeVariable> typeVariable);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoInternalUtilReflectionGenericMetadataSupport_TypeVarBoundedType)

#endif

#if !defined (OrgMockitoInternalUtilReflectionGenericMetadataSupport_WildCardBoundedType_) && (INCLUDE_ALL_OrgMockitoInternalUtilReflectionGenericMetadataSupport || defined(INCLUDE_OrgMockitoInternalUtilReflectionGenericMetadataSupport_WildCardBoundedType))
#define OrgMockitoInternalUtilReflectionGenericMetadataSupport_WildCardBoundedType_

@class IOSObjectArray;
@protocol JavaLangReflectType;
@protocol JavaLangReflectWildcardType;

/*!
 @brief Type representing bounds of a wildcard, allows to keep all bounds information.
 <p>The JLS says that lower bound and upper bound are mutually exclusive, and that multiple bounds
  are not allowed.
 - seealso: <a href="http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.4">http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.4</a>
 */
@interface OrgMockitoInternalUtilReflectionGenericMetadataSupport_WildCardBoundedType : NSObject < OrgMockitoInternalUtilReflectionGenericMetadataSupport_BoundedType >

#pragma mark Public

- (instancetype __nonnull)initWithJavaLangReflectWildcardType:(id<JavaLangReflectWildcardType>)wildcard;

- (jboolean)isEqual:(id)o;

/*!
 @return The first bound, either a type or a reference to a TypeVariable
 */
- (id<JavaLangReflectType>)firstBound;

- (NSUInteger)hash;

/*!
 @return An empty array as, wildcard don't support multiple bounds.
 */
- (IOSObjectArray *)interfaceBounds;

- (NSString *)description;

- (id<JavaLangReflectWildcardType>)wildCard;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoInternalUtilReflectionGenericMetadataSupport_WildCardBoundedType)

FOUNDATION_EXPORT void OrgMockitoInternalUtilReflectionGenericMetadataSupport_WildCardBoundedType_initWithJavaLangReflectWildcardType_(OrgMockitoInternalUtilReflectionGenericMetadataSupport_WildCardBoundedType *self, id<JavaLangReflectWildcardType> wildcard);

FOUNDATION_EXPORT OrgMockitoInternalUtilReflectionGenericMetadataSupport_WildCardBoundedType *new_OrgMockitoInternalUtilReflectionGenericMetadataSupport_WildCardBoundedType_initWithJavaLangReflectWildcardType_(id<JavaLangReflectWildcardType> wildcard) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMockitoInternalUtilReflectionGenericMetadataSupport_WildCardBoundedType *create_OrgMockitoInternalUtilReflectionGenericMetadataSupport_WildCardBoundedType_initWithJavaLangReflectWildcardType_(id<JavaLangReflectWildcardType> wildcard);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoInternalUtilReflectionGenericMetadataSupport_WildCardBoundedType)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgMockitoInternalUtilReflectionGenericMetadataSupport")
