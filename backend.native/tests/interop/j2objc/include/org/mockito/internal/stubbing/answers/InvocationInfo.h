//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/testing/mockito/build_result/java/org/mockito/internal/stubbing/answers/InvocationInfo.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoInternalStubbingAnswersInvocationInfo")
#ifdef RESTRICT_OrgMockitoInternalStubbingAnswersInvocationInfo
#define INCLUDE_ALL_OrgMockitoInternalStubbingAnswersInvocationInfo 0
#else
#define INCLUDE_ALL_OrgMockitoInternalStubbingAnswersInvocationInfo 1
#endif
#undef RESTRICT_OrgMockitoInternalStubbingAnswersInvocationInfo

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgMockitoInternalStubbingAnswersInvocationInfo_) && (INCLUDE_ALL_OrgMockitoInternalStubbingAnswersInvocationInfo || defined(INCLUDE_OrgMockitoInternalStubbingAnswersInvocationInfo))
#define OrgMockitoInternalStubbingAnswersInvocationInfo_

#define RESTRICT_OrgMockitoInternalInvocationAbstractAwareMethod 1
#define INCLUDE_OrgMockitoInternalInvocationAbstractAwareMethod 1
#include "org/mockito/internal/invocation/AbstractAwareMethod.h"

@class IOSClass;
@class JavaLangReflectMethod;
@class JavaLangThrowable;
@protocol OrgMockitoInvocationInvocationOnMock;

@interface OrgMockitoInternalStubbingAnswersInvocationInfo : NSObject < OrgMockitoInternalInvocationAbstractAwareMethod >

#pragma mark Public

- (instancetype __nonnull)initWithOrgMockitoInvocationInvocationOnMock:(id<OrgMockitoInvocationInvocationOnMock>)theInvocation;

- (JavaLangReflectMethod *)getMethod;

- (NSString *)getMethodName;

- (jboolean)isAbstract;

- (jboolean)isDeclaredOnInterface;

- (jboolean)isValidExceptionWithJavaLangThrowable:(JavaLangThrowable *)throwable;

- (jboolean)isValidReturnTypeWithIOSClass:(IOSClass *)clazz;

/*!
 @brief Returns <code>true</code> is the return type is <code>Void</code> or represents the pseudo-type to the keyword <code>void</code>.
 E.g:  <code>void foo()</code> or <code>Void bar()</code>
 */
- (jboolean)isVoid;

- (NSString *)printMethodReturnType;

- (jboolean)returnsPrimitive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoInternalStubbingAnswersInvocationInfo)

FOUNDATION_EXPORT void OrgMockitoInternalStubbingAnswersInvocationInfo_initWithOrgMockitoInvocationInvocationOnMock_(OrgMockitoInternalStubbingAnswersInvocationInfo *self, id<OrgMockitoInvocationInvocationOnMock> theInvocation);

FOUNDATION_EXPORT OrgMockitoInternalStubbingAnswersInvocationInfo *new_OrgMockitoInternalStubbingAnswersInvocationInfo_initWithOrgMockitoInvocationInvocationOnMock_(id<OrgMockitoInvocationInvocationOnMock> theInvocation) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMockitoInternalStubbingAnswersInvocationInfo *create_OrgMockitoInternalStubbingAnswersInvocationInfo_initWithOrgMockitoInvocationInvocationOnMock_(id<OrgMockitoInvocationInvocationOnMock> theInvocation);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoInternalStubbingAnswersInvocationInfo)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgMockitoInternalStubbingAnswersInvocationInfo")
