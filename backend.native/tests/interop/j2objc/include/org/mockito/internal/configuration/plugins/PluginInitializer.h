//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/testing/mockito/build_result/java/org/mockito/internal/configuration/plugins/PluginInitializer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoInternalConfigurationPluginsPluginInitializer")
#ifdef RESTRICT_OrgMockitoInternalConfigurationPluginsPluginInitializer
#define INCLUDE_ALL_OrgMockitoInternalConfigurationPluginsPluginInitializer 0
#else
#define INCLUDE_ALL_OrgMockitoInternalConfigurationPluginsPluginInitializer 1
#endif
#undef RESTRICT_OrgMockitoInternalConfigurationPluginsPluginInitializer

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgMockitoInternalConfigurationPluginsPluginInitializer_) && (INCLUDE_ALL_OrgMockitoInternalConfigurationPluginsPluginInitializer || defined(INCLUDE_OrgMockitoInternalConfigurationPluginsPluginInitializer))
#define OrgMockitoInternalConfigurationPluginsPluginInitializer_

@class IOSClass;
@class OrgMockitoInternalConfigurationPluginsDefaultMockitoPlugins;
@protocol OrgMockitoPluginsPluginSwitch;

@interface OrgMockitoInternalConfigurationPluginsPluginInitializer : NSObject

#pragma mark Public

/*!
 @brief Equivalent to <code>java.util.ServiceLoader.load</code> but without requiring
  Java 6 / Android 2.3 (Gingerbread).
 */
- (id)loadImplWithIOSClass:(IOSClass *)service;

#pragma mark Package-Private

- (instancetype __nonnull)initPackagePrivateWithOrgMockitoPluginsPluginSwitch:(id<OrgMockitoPluginsPluginSwitch>)pluginSwitch
                                                                 withNSString:(NSString *)alias
              withOrgMockitoInternalConfigurationPluginsDefaultMockitoPlugins:(OrgMockitoInternalConfigurationPluginsDefaultMockitoPlugins *)plugins;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoInternalConfigurationPluginsPluginInitializer)

FOUNDATION_EXPORT void OrgMockitoInternalConfigurationPluginsPluginInitializer_initPackagePrivateWithOrgMockitoPluginsPluginSwitch_withNSString_withOrgMockitoInternalConfigurationPluginsDefaultMockitoPlugins_(OrgMockitoInternalConfigurationPluginsPluginInitializer *self, id<OrgMockitoPluginsPluginSwitch> pluginSwitch, NSString *alias, OrgMockitoInternalConfigurationPluginsDefaultMockitoPlugins *plugins);

FOUNDATION_EXPORT OrgMockitoInternalConfigurationPluginsPluginInitializer *new_OrgMockitoInternalConfigurationPluginsPluginInitializer_initPackagePrivateWithOrgMockitoPluginsPluginSwitch_withNSString_withOrgMockitoInternalConfigurationPluginsDefaultMockitoPlugins_(id<OrgMockitoPluginsPluginSwitch> pluginSwitch, NSString *alias, OrgMockitoInternalConfigurationPluginsDefaultMockitoPlugins *plugins) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMockitoInternalConfigurationPluginsPluginInitializer *create_OrgMockitoInternalConfigurationPluginsPluginInitializer_initPackagePrivateWithOrgMockitoPluginsPluginSwitch_withNSString_withOrgMockitoInternalConfigurationPluginsDefaultMockitoPlugins_(id<OrgMockitoPluginsPluginSwitch> pluginSwitch, NSString *alias, OrgMockitoInternalConfigurationPluginsDefaultMockitoPlugins *plugins);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoInternalConfigurationPluginsPluginInitializer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgMockitoInternalConfigurationPluginsPluginInitializer")
