//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/testing/mockito/build_result/java/org/mockito/internal/invocation/InterceptedInvocation.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoInternalInvocationInterceptedInvocation")
#ifdef RESTRICT_OrgMockitoInternalInvocationInterceptedInvocation
#define INCLUDE_ALL_OrgMockitoInternalInvocationInterceptedInvocation 0
#else
#define INCLUDE_ALL_OrgMockitoInternalInvocationInterceptedInvocation 1
#endif
#undef RESTRICT_OrgMockitoInternalInvocationInterceptedInvocation

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgMockitoInternalInvocationInterceptedInvocation_) && (INCLUDE_ALL_OrgMockitoInternalInvocationInterceptedInvocation || defined(INCLUDE_OrgMockitoInternalInvocationInterceptedInvocation))
#define OrgMockitoInternalInvocationInterceptedInvocation_

#define RESTRICT_OrgMockitoInvocationInvocation 1
#define INCLUDE_OrgMockitoInvocationInvocation 1
#include "org/mockito/invocation/Invocation.h"

#define RESTRICT_OrgMockitoInternalExceptionsVerificationAwareInvocation 1
#define INCLUDE_OrgMockitoInternalExceptionsVerificationAwareInvocation 1
#include "org/mockito/internal/exceptions/VerificationAwareInvocation.h"

@class IOSClass;
@class IOSObjectArray;
@class JavaLangReflectMethod;
@protocol OrgMockitoInternalInvocationMockitoMethod;
@protocol OrgMockitoInternalInvocationMockrefMockReference;
@protocol OrgMockitoInternalInvocationRealMethod;
@protocol OrgMockitoInvocationLocation;
@protocol OrgMockitoInvocationStubInfo;

@interface OrgMockitoInternalInvocationInterceptedInvocation : NSObject < OrgMockitoInvocationInvocation, OrgMockitoInternalExceptionsVerificationAwareInvocation >
@property (readonly, class, strong) id<OrgMockitoInternalInvocationRealMethod> NO_OP NS_SWIFT_NAME(NO_OP);

+ (id<OrgMockitoInternalInvocationRealMethod>)NO_OP;

#pragma mark Public

- (instancetype __nonnull)initWithOrgMockitoInternalInvocationMockrefMockReference:(id<OrgMockitoInternalInvocationMockrefMockReference>)mockRef
                                     withOrgMockitoInternalInvocationMockitoMethod:(id<OrgMockitoInternalInvocationMockitoMethod>)mockitoMethod
                                                                 withNSObjectArray:(IOSObjectArray *)arguments
                                        withOrgMockitoInternalInvocationRealMethod:(id<OrgMockitoInternalInvocationRealMethod>)realMethod
                                                  withOrgMockitoInvocationLocation:(id<OrgMockitoInvocationLocation>)location
                                                                           withInt:(jint)sequenceNumber;

- (id)callRealMethod;

- (jboolean)isEqual:(id)o;

- (id)getArgumentWithInt:(jint)index;

- (IOSObjectArray *)getArguments;

- (id<OrgMockitoInvocationLocation>)getLocation;

- (JavaLangReflectMethod *)getMethod;

- (id)getMock;

- (IOSObjectArray *)getRawArguments;

- (IOSClass *)getRawReturnType;

- (jint)getSequenceNumber;

- (NSUInteger)hash;

- (void)ignoreForVerification;

- (jboolean)isIgnoredForVerification;

- (jboolean)isVerified;

- (void)markStubbedWithOrgMockitoInvocationStubInfo:(id<OrgMockitoInvocationStubInfo>)stubInfo;

- (void)markVerified;

- (id<OrgMockitoInvocationStubInfo>)stubInfo;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgMockitoInternalInvocationInterceptedInvocation)

inline id<OrgMockitoInternalInvocationRealMethod> OrgMockitoInternalInvocationInterceptedInvocation_get_NO_OP(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<OrgMockitoInternalInvocationRealMethod> OrgMockitoInternalInvocationInterceptedInvocation_NO_OP;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMockitoInternalInvocationInterceptedInvocation, NO_OP, id<OrgMockitoInternalInvocationRealMethod>)

FOUNDATION_EXPORT void OrgMockitoInternalInvocationInterceptedInvocation_initWithOrgMockitoInternalInvocationMockrefMockReference_withOrgMockitoInternalInvocationMockitoMethod_withNSObjectArray_withOrgMockitoInternalInvocationRealMethod_withOrgMockitoInvocationLocation_withInt_(OrgMockitoInternalInvocationInterceptedInvocation *self, id<OrgMockitoInternalInvocationMockrefMockReference> mockRef, id<OrgMockitoInternalInvocationMockitoMethod> mockitoMethod, IOSObjectArray *arguments, id<OrgMockitoInternalInvocationRealMethod> realMethod, id<OrgMockitoInvocationLocation> location, jint sequenceNumber);

FOUNDATION_EXPORT OrgMockitoInternalInvocationInterceptedInvocation *new_OrgMockitoInternalInvocationInterceptedInvocation_initWithOrgMockitoInternalInvocationMockrefMockReference_withOrgMockitoInternalInvocationMockitoMethod_withNSObjectArray_withOrgMockitoInternalInvocationRealMethod_withOrgMockitoInvocationLocation_withInt_(id<OrgMockitoInternalInvocationMockrefMockReference> mockRef, id<OrgMockitoInternalInvocationMockitoMethod> mockitoMethod, IOSObjectArray *arguments, id<OrgMockitoInternalInvocationRealMethod> realMethod, id<OrgMockitoInvocationLocation> location, jint sequenceNumber) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMockitoInternalInvocationInterceptedInvocation *create_OrgMockitoInternalInvocationInterceptedInvocation_initWithOrgMockitoInternalInvocationMockrefMockReference_withOrgMockitoInternalInvocationMockitoMethod_withNSObjectArray_withOrgMockitoInternalInvocationRealMethod_withOrgMockitoInvocationLocation_withInt_(id<OrgMockitoInternalInvocationMockrefMockReference> mockRef, id<OrgMockitoInternalInvocationMockitoMethod> mockitoMethod, IOSObjectArray *arguments, id<OrgMockitoInternalInvocationRealMethod> realMethod, id<OrgMockitoInvocationLocation> location, jint sequenceNumber);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoInternalInvocationInterceptedInvocation)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgMockitoInternalInvocationInterceptedInvocation")
