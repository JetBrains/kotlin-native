//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/testing/mockito/build_result/java/org/mockito/stubbing/Answer2.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoStubbingAnswer2")
#ifdef RESTRICT_OrgMockitoStubbingAnswer2
#define INCLUDE_ALL_OrgMockitoStubbingAnswer2 0
#else
#define INCLUDE_ALL_OrgMockitoStubbingAnswer2 1
#endif
#undef RESTRICT_OrgMockitoStubbingAnswer2

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgMockitoStubbingAnswer2_) && (INCLUDE_ALL_OrgMockitoStubbingAnswer2 || defined(INCLUDE_OrgMockitoStubbingAnswer2))
#define OrgMockitoStubbingAnswer2_

/*!
 @brief Generic interface to be used for configuring mock's answer for a two argument invocation.
 Answer specifies an action that is executed and a return value that is returned when you interact with the mock. 
 <p>
  Example of stubbing a mock with this custom answer: 
 <pre class="code"><code class="java">
  import static org.mockito.AdditionalAnswers.answer;
  when(mock.someMethod(anyString(), anyChar())).then(answer(
      new Answer2&lt;String, String, Character&gt;() {
          public String answer(String s, Character c) {
              return s.replace('f', c);
          }
  }));
  //Following will print "bar"
  System.out.println(mock.someMethod("far", 'b')); 
 </code>
@endcode
 - seealso: Answer
 */
@protocol OrgMockitoStubbingAnswer2 < JavaObject >

/*!
 @param argument0 the first argument.
 @param argument1 the second argument.
 @return the value to be returned.
 @throw Throwablethe throwable to be thrown
 */
- (id)answerWithId:(id)argument0
            withId:(id)argument1;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoStubbingAnswer2)

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoStubbingAnswer2)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgMockitoStubbingAnswer2")
