//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/testing/mockito/build_result/java/org/mockito/stubbing/BaseStubber.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoStubbingBaseStubber")
#ifdef RESTRICT_OrgMockitoStubbingBaseStubber
#define INCLUDE_ALL_OrgMockitoStubbingBaseStubber 0
#else
#define INCLUDE_ALL_OrgMockitoStubbingBaseStubber 1
#endif
#undef RESTRICT_OrgMockitoStubbingBaseStubber

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgMockitoStubbingBaseStubber_) && (INCLUDE_ALL_OrgMockitoStubbingBaseStubber || defined(INCLUDE_OrgMockitoStubbingBaseStubber))
#define OrgMockitoStubbingBaseStubber_

@class IOSClass;
@class IOSObjectArray;
@protocol OrgMockitoStubbingAnswer;
@protocol OrgMockitoStubbingStubber;

/*!
 @brief Base interface for stubbing consecutive method calls with <code>Mockito.doReturn(Object)</code> syntax.
 This interface is needed so that we can reuse the same hierarchy in subinterfaces.
 @since 2.20.0
 */
@protocol OrgMockitoStubbingBaseStubber < JavaObject >

/*!
 @brief Use it for stubbing consecutive calls in <code>Mockito.doThrow(Throwable[])</code> style:
 <pre class="code"><code class="java">
    doThrow(new RuntimeException("one")).
 doThrow(new RuntimeException("two"))
        .when(mock).someVoidMethod(); 
 </code>
@endcode
  See javadoc for <code>Mockito.doThrow(Throwable[])</code>
 @param toBeThrown to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing
 */
- (id<OrgMockitoStubbingStubber>)doThrowWithJavaLangThrowableArray:(IOSObjectArray *)toBeThrown;

/*!
 @brief Use it for stubbing consecutive calls in <code>Mockito.doThrow(Class)</code> style:
 <pre class="code"><code class="java">
    doThrow(RuntimeException.class).
 doThrow(IllegalArgumentException.class)
        .when(mock).someVoidMethod(); 
 </code>
@endcode
  See javadoc for <code>Mockito.doThrow(Class)</code>
 @param toBeThrown exception class to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing
 @since 2.1.0
 */
- (id<OrgMockitoStubbingStubber>)doThrowWithIOSClass:(IOSClass *)toBeThrown;

/*!
 @brief Use it for stubbing consecutive calls in <code>Mockito.doThrow(Class)</code> style:
 <pre class="code"><code class="java">
    doThrow(RuntimeException.class).
 doThrow(IllegalArgumentException.class)
        .when(mock).someVoidMethod(); 
 </code>
@endcode
  See javadoc for <code>Mockito.doThrow(Class)</code>
 @param toBeThrown exception class to be thrown when the stubbed method is called
 @param nextToBeThrown exception class next to be thrown when the stubbed method is called
 @return stubber - to select a method for stubbing
 @since 2.1.0
 */
- (id<OrgMockitoStubbingStubber>)doThrowWithIOSClass:(IOSClass *)toBeThrown
                                   withIOSClassArray:(IOSObjectArray *)nextToBeThrown;

/*!
 @brief Use it for stubbing consecutive calls in <code>Mockito.doAnswer(Answer)</code> style:
 <pre class="code"><code class="java">
    doAnswer(answerOne).
 doAnswer(answerTwo)
        .when(mock).someVoidMethod(); 
 </code>
@endcode
  See javadoc for <code>Mockito.doAnswer(Answer)</code>
 @param answer to answer when the stubbed method is called
 @return stubber - to select a method for stubbing
 */
- (id<OrgMockitoStubbingStubber>)doAnswerWithOrgMockitoStubbingAnswer:(id<OrgMockitoStubbingAnswer>)answer;

/*!
 @brief Use it for stubbing consecutive calls in <code>Mockito.doNothing()</code> style:
 <pre class="code"><code class="java">
    doNothing().
 doThrow(new RuntimeException("two"))
        .when(mock).someVoidMethod(); 
 </code>
@endcode
  See javadoc for <code>Mockito.doNothing()</code>
 @return stubber - to select a method for stubbing
 */
- (id<OrgMockitoStubbingStubber>)doNothing;

/*!
 @brief Use it for stubbing consecutive calls in <code>Mockito.doReturn(Object)</code> style.
 <p>
  See javadoc for <code>Mockito.doReturn(Object)</code>
 @param toBeReturned to be returned when the stubbed method is called
 @return stubber - to select a method for stubbing
 */
- (id<OrgMockitoStubbingStubber>)doReturnWithId:(id)toBeReturned;

/*!
 @brief Use it for stubbing consecutive calls in <code>Mockito.doReturn(Object)</code> style.
 <p>
  See javadoc for <code>Mockito.doReturn(Object, Object...)</code>
 @param toBeReturned to be returned when the stubbed method is called
 @param nextToBeReturned to be returned in consecutive calls when the stubbed method is called
 @return stubber - to select a method for stubbing
 */
- (id<OrgMockitoStubbingStubber>)doReturnWithId:(id)toBeReturned
                              withNSObjectArray:(IOSObjectArray *)nextToBeReturned;

/*!
 @brief Use it for stubbing consecutive calls in <code>Mockito.doCallRealMethod()</code> style.
 <p>
  See javadoc for <code>Mockito.doCallRealMethod()</code>
 @return stubber - to select a method for stubbing
 */
- (id<OrgMockitoStubbingStubber>)doCallRealMethod;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoStubbingBaseStubber)

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoStubbingBaseStubber)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgMockitoStubbingBaseStubber")
