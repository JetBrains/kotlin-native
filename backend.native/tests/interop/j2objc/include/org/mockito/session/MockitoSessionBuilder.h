//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/testing/mockito/build_result/java/org/mockito/session/MockitoSessionBuilder.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoSessionMockitoSessionBuilder")
#ifdef RESTRICT_OrgMockitoSessionMockitoSessionBuilder
#define INCLUDE_ALL_OrgMockitoSessionMockitoSessionBuilder 0
#else
#define INCLUDE_ALL_OrgMockitoSessionMockitoSessionBuilder 1
#endif
#undef RESTRICT_OrgMockitoSessionMockitoSessionBuilder

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgMockitoSessionMockitoSessionBuilder_) && (INCLUDE_ALL_OrgMockitoSessionMockitoSessionBuilder || defined(INCLUDE_OrgMockitoSessionMockitoSessionBuilder))
#define OrgMockitoSessionMockitoSessionBuilder_

@class IOSObjectArray;
@class OrgMockitoQualityStrictness;
@protocol OrgMockitoMockitoSession;
@protocol OrgMockitoSessionMockitoSessionLogger;

/*!
 @brief Fluent builder interface for <code>MockitoSession</code> objects.
 See the documentation and examples in Javadoc for <code>MockitoSession</code>.
 @since 2.7.0
 */
@protocol OrgMockitoSessionMockitoSessionBuilder < JavaObject >

/*!
 @brief Adds the test class instance for initialization of fields annotated with Mockito annotations
  like <code>org.mockito.Mock</code>.
 When this method is invoked it <strong>does not perform</strong> initialization of mocks on the spot!
  Only when <code>startMocking()</code> is invoked then annotated fields will be initialized.
  Traditional API to initialize mocks, the <code>MockitoAnnotations.initMocks(Object)</code> method
  has limited support for driving cleaner tests because it does not support configuring <code>Strictness</code>.
  Want cleaner tests and better productivity?
  Migrate from <code>MockitoAnnotations.initMocks(Object)</code>
  to <code>MockitoSession</code>!
  <p>
  This method may be called multiple times to add multiple, e.g. nested, test class instances. 
 <p>
  See code sample in <code>MockitoSession</code>.
 @param testClassInstance test class instance that contains fields with Mockito annotations to be initialized.   Passing 
 <code>null</code>  is permitted but will be ignored.
 @return the same builder instance for fluent configuration of <code>MockitoSession</code>.
 @since 2.7.0
 */
- (id<OrgMockitoSessionMockitoSessionBuilder>)initMocksWithId:(id)testClassInstance OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Adds the test class instances for initialization of fields annotated with Mockito annotations
  like <code>org.mockito.Mock</code>.
 <p>
  In most scenarios, you only need to init mocks on a single test class instance.
  This method is useful for advanced framework integrations (like JUnit Jupiter), when a test uses multiple, e.g. nested, test class instances. 
 <p>
  This method calls <code>initMocks(Object)</code> for each passed test class instance.
 @param testClassInstances test class instances that contains fields with Mockito annotations to be initialized.   Passing 
 <code>null</code>  or an empty array is permitted but will be ignored.
 @return the same builder instance for fluent configuration of <code>MockitoSession</code>.
 - seealso: #initMocks(Object)
 @since 2.15.0
 */
- (id<OrgMockitoSessionMockitoSessionBuilder>)initMocksWithNSObjectArray:(IOSObjectArray *)testClassInstances OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Configures the name of the <code>MockitoSession</code> instance.
 <p>
  The name is used to output hints when 
 finishing a session. 
 <p>
  This method is intended to be used by framework integrations, e.g. JUnit. When building
  a <code>MockitoSession</code> for direct use, users are not expected to call it.
 @param name of <code>MockitoSession</code>  instance.
    Passing <code>null</code>  is permitted and will make the session use a default value.   The current default is the name of the last test class instance passed to
    <code>initMocks(Object)</code>
   or <code>initMocks(Object...)</code> , if available;   otherwise, <code>"<Unnamed Session>"</code>
   is used.
 @return the same builder instance for fluent configuration of <code>MockitoSession</code>.
 - seealso: org.mockito.quality.MockitoHint
 @since 2.15.0
 */
- (id<OrgMockitoSessionMockitoSessionBuilder>)nameWithNSString:(NSString *)name;

/*!
 @brief Configures strictness of <code>MockitoSession</code> instance.
 See examples in <code>MockitoSession</code>.
 @param strictness for <code>MockitoSession</code>  instance.
    Passing <code>null</code>  is permitted and will make the session use a default value.   The current default is 
 <code>Strictness.STRICT_STUBS</code> .
 @return the same builder instance for fluent configuration of <code>MockitoSession</code>.
 @since 2.7.0
 */
- (id<OrgMockitoSessionMockitoSessionBuilder>)strictnessWithOrgMockitoQualityStrictness:(OrgMockitoQualityStrictness *)strictness;

/*!
 @brief Configures logger used by <code>MockitoSession</code> for emitting 
 warnings when finishing the session.
 <p>
  Please note that the use of strict stubs is
  recommended over emitting warnings because warnings are easily ignored and spoil the log output.
  Instead of using this method, please consider setting strictness with <code>strictness(Strictness)</code>.
 @param logger for warnings emitted when finishing <code>MockitoSession</code> .
    Passing <code>null</code>  is permitted and will make the session use a default value.   By default, warnings will be logged to the console.
 @return the same builder instance for fluent configuration of <code>MockitoSession</code>.
 - seealso: org.mockito.quality.MockitoHint
 @since 2.15.0
 */
- (id<OrgMockitoSessionMockitoSessionBuilder>)loggerWithOrgMockitoSessionMockitoSessionLogger:(id<OrgMockitoSessionMockitoSessionLogger>)logger;

/*!
 @brief Starts new mocking session!
 Creates new <code>MockitoSession</code> instance to initialize the session.
 At this point annotated fields are initialized per <code>initMocks(Object)</code> method.
  When you are done with the session it is required to invoke <code>MockitoSession.finishMocking()</code>.
  This will trigger stubbing validation, cleaning up the internal state like removal of internal listeners. 
 <p>
  Mockito tracks created sessions internally and prevents the user from creating new sessions without
  using <code>MockitoSession.finishMocking()</code>.
  When you run tests concurrently in multiple threads, it is legal for each thread to have single active Mockito session.
  When you attempt to start new session in a thread that already has an unfinished session 
 <code>UnfinishedMockingSessionException</code> will be triggered. 
 <p>
  See examples in <code>MockitoSession</code>.
 @return new <code>MockitoSession</code> instance
 @since 2.7.0
 @throw UnfinishedMockingSessionException
 when previous session was not concluded with <code>MockitoSession.finishMocking()</code>
 */
- (id<OrgMockitoMockitoSession>)startMocking;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoSessionMockitoSessionBuilder)

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoSessionMockitoSessionBuilder)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgMockitoSessionMockitoSessionBuilder")
