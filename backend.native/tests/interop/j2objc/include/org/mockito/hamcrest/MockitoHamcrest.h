//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/testing/mockito/build_result/java/org/mockito/hamcrest/MockitoHamcrest.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoHamcrestMockitoHamcrest")
#ifdef RESTRICT_OrgMockitoHamcrestMockitoHamcrest
#define INCLUDE_ALL_OrgMockitoHamcrestMockitoHamcrest 0
#else
#define INCLUDE_ALL_OrgMockitoHamcrestMockitoHamcrest 1
#endif
#undef RESTRICT_OrgMockitoHamcrestMockitoHamcrest

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgMockitoHamcrestMockitoHamcrest_) && (INCLUDE_ALL_OrgMockitoHamcrestMockitoHamcrest || defined(INCLUDE_OrgMockitoHamcrestMockitoHamcrest))
#define OrgMockitoHamcrestMockitoHamcrest_

@protocol OrgHamcrestMatcher;

/*!
 @brief Allows matching arguments with hamcrest matchers.
 <b>Requires</b> <a href="http://hamcrest.org/JavaHamcrest/">hamcrest</a> on classpath,
  Mockito <b>does not</b> depend on hamcrest!
  Note the <b>NullPointerException</b> auto-unboxing caveat described below. 
 <p>
  Before implementing or reusing an existing hamcrest matcher please read
  how to deal with sophisticated argument matching in <code>ArgumentMatcher</code>.
  <p>
  Mockito 2.1.0 was decoupled from Hamcrest to avoid version incompatibilities
  that have impacted our users in past. Mockito offers a dedicated API to match arguments
  via <code>ArgumentMatcher</code>.
  Hamcrest integration is provided so that users can take advantage of existing Hamcrest matchers. 
 <p>
  Example: 
 @code

      import static org.mockito.hamcrest.MockitoHamcrest.argThat;
      //stubbing
      when(mock.giveMe(argThat(new MyHamcrestMatcher())));
      //verification
      verify(mock).giveMe(argThat(new MyHamcrestMatcher())); 
  
@endcode
  <b>NullPointerException</b> auto-unboxing caveat.
  In rare cases when matching primitive parameter types you <b>*must*</b> use relevant intThat(), floatThat(), etc. method.
  This way you will avoid <code>NullPointerException</code> during auto-unboxing.
  Due to how java works we don't really have a clean way of detecting this scenario and protecting the user from this problem.
  Hopefully, the javadoc describes the problem and solution well.
  If you have an idea how to fix the problem, let us know via the mailing list or the issue tracker.
 @since 2.1.0
 */
@interface OrgMockitoHamcrestMockitoHamcrest : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Allows matching arguments with hamcrest matchers.
 <p>
  See examples in javadoc for <code>MockitoHamcrest</code> class
 @param matcher decides whether argument matches
 @return <code>null</code> or default value for primitive (0, false, etc.)
 @since 2.1.0
 */
+ (id)argThatWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher;

/*!
 @brief Enables integrating hamcrest matchers that match primitive <code>boolean</code> arguments.
 Note that <code>argThat</code> will not work with primitive <code>boolean</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat. 
 <p>
  See examples in javadoc for <code>MockitoHamcrest</code> class
 @param matcher decides whether argument matches
 @return <code>false</code>.
 */
+ (jboolean)booleanThatWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher;

/*!
 @brief Enables integrating hamcrest matchers that match primitive <code>byte</code> arguments.
 Note that <code>argThat</code> will not work with primitive <code>byte</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat. 
 <p>
  * See examples in javadoc for <code>MockitoHamcrest</code> class
 @param matcher decides whether argument matches
 @return <code>0</code>.
 */
+ (jbyte)byteThatWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher;

/*!
 @brief Enables integrating hamcrest matchers that match primitive <code>char</code> arguments.
 Note that <code>argThat</code> will not work with primitive <code>char</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat. 
 <p>
  See examples in javadoc for <code>MockitoHamcrest</code> class
 @param matcher decides whether argument matches
 @return <code>0</code>.
 */
+ (jchar)charThatWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher;

/*!
 @brief Enables integrating hamcrest matchers that match primitive <code>double</code> arguments.
 Note that <code>argThat</code> will not work with primitive <code>double</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat. 
 <p>
  * See examples in javadoc for <code>MockitoHamcrest</code> class
 @param matcher decides whether argument matches
 @return <code>0</code>.
 */
+ (jdouble)doubleThatWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher;

/*!
 @brief Enables integrating hamcrest matchers that match primitive <code>float</code> arguments.
 Note that <code>argThat</code> will not work with primitive <code>float</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat. 
 <p>
  * See examples in javadoc for <code>MockitoHamcrest</code> class
 @param matcher decides whether argument matches
 @return <code>0</code>.
 */
+ (jfloat)floatThatWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher;

/*!
 @brief Enables integrating hamcrest matchers that match primitive <code>int</code> arguments.
 Note that <code>argThat</code> will not work with primitive <code>int</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat. 
 <p>
  * See examples in javadoc for <code>MockitoHamcrest</code> class
 @param matcher decides whether argument matches
 @return <code>0</code>.
 */
+ (jint)intThatWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher;

/*!
 @brief Enables integrating hamcrest matchers that match primitive <code>long</code> arguments.
 Note that <code>argThat</code> will not work with primitive <code>long</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat. 
 <p>
  * See examples in javadoc for <code>MockitoHamcrest</code> class
 @param matcher decides whether argument matches
 @return <code>0</code>.
 */
+ (jlong)longThatWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher;

/*!
 @brief Enables integrating hamcrest matchers that match primitive <code>short</code> arguments.
 Note that <code>argThat</code> will not work with primitive <code>short</code> matchers due to <code>NullPointerException</code> auto-unboxing caveat. 
 <p>
  * See examples in javadoc for <code>MockitoHamcrest</code> class
 @param matcher decides whether argument matches
 @return <code>0</code>.
 */
+ (jshort)shortThatWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoHamcrestMockitoHamcrest)

FOUNDATION_EXPORT void OrgMockitoHamcrestMockitoHamcrest_init(OrgMockitoHamcrestMockitoHamcrest *self);

FOUNDATION_EXPORT OrgMockitoHamcrestMockitoHamcrest *new_OrgMockitoHamcrestMockitoHamcrest_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMockitoHamcrestMockitoHamcrest *create_OrgMockitoHamcrestMockitoHamcrest_init(void);

FOUNDATION_EXPORT id OrgMockitoHamcrestMockitoHamcrest_argThatWithOrgHamcrestMatcher_(id<OrgHamcrestMatcher> matcher);

FOUNDATION_EXPORT jchar OrgMockitoHamcrestMockitoHamcrest_charThatWithOrgHamcrestMatcher_(id<OrgHamcrestMatcher> matcher);

FOUNDATION_EXPORT jboolean OrgMockitoHamcrestMockitoHamcrest_booleanThatWithOrgHamcrestMatcher_(id<OrgHamcrestMatcher> matcher);

FOUNDATION_EXPORT jbyte OrgMockitoHamcrestMockitoHamcrest_byteThatWithOrgHamcrestMatcher_(id<OrgHamcrestMatcher> matcher);

FOUNDATION_EXPORT jshort OrgMockitoHamcrestMockitoHamcrest_shortThatWithOrgHamcrestMatcher_(id<OrgHamcrestMatcher> matcher);

FOUNDATION_EXPORT jint OrgMockitoHamcrestMockitoHamcrest_intThatWithOrgHamcrestMatcher_(id<OrgHamcrestMatcher> matcher);

FOUNDATION_EXPORT jlong OrgMockitoHamcrestMockitoHamcrest_longThatWithOrgHamcrestMatcher_(id<OrgHamcrestMatcher> matcher);

FOUNDATION_EXPORT jfloat OrgMockitoHamcrestMockitoHamcrest_floatThatWithOrgHamcrestMatcher_(id<OrgHamcrestMatcher> matcher);

FOUNDATION_EXPORT jdouble OrgMockitoHamcrestMockitoHamcrest_doubleThatWithOrgHamcrestMatcher_(id<OrgHamcrestMatcher> matcher);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoHamcrestMockitoHamcrest)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgMockitoHamcrestMockitoHamcrest")
