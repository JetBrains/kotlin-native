//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/testing/mockito/build_result/java/org/mockito/Answers.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoAnswers")
#ifdef RESTRICT_OrgMockitoAnswers
#define INCLUDE_ALL_OrgMockitoAnswers 0
#else
#define INCLUDE_ALL_OrgMockitoAnswers 1
#endif
#undef RESTRICT_OrgMockitoAnswers

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgMockitoAnswers_) && (INCLUDE_ALL_OrgMockitoAnswers || defined(INCLUDE_OrgMockitoAnswers))
#define OrgMockitoAnswers_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

#define RESTRICT_OrgMockitoStubbingAnswer 1
#define INCLUDE_OrgMockitoStubbingAnswer 1
#include "org/mockito/stubbing/Answer.h"

@class IOSObjectArray;
@protocol OrgMockitoInvocationInvocationOnMock;

typedef NS_ENUM(NSUInteger, OrgMockitoAnswers_Enum) {
  OrgMockitoAnswers_Enum_RETURNS_DEFAULTS = 0,
  OrgMockitoAnswers_Enum_RETURNS_SMART_NULLS = 1,
  OrgMockitoAnswers_Enum_RETURNS_MOCKS = 2,
  OrgMockitoAnswers_Enum_RETURNS_DEEP_STUBS = 3,
  OrgMockitoAnswers_Enum_CALLS_REAL_METHODS = 4,
  OrgMockitoAnswers_Enum_RETURNS_SELF = 5,
};

/*!
 @brief Enumeration of pre-configured mock answers
 <p>
  You can use it to pass extra parameters to &#064;Mock annotation, see more info here: <code>Mock</code>
  <p>
  Example: 
 <pre class="code"><code class="java">
    &#064;Mock(answer = RETURNS_DEEP_STUBS) UserProvider userProvider; 
 </code>
@endcode
  <b>This is not the full list</b> of Answers available in Mockito.
 Some interesting answers can be found in org.mockito.stubbing.answers package.
 */
@interface OrgMockitoAnswers : JavaLangEnum < OrgMockitoStubbingAnswer >

@property (readonly, class, nonnull) OrgMockitoAnswers *RETURNS_DEFAULTS NS_SWIFT_NAME(RETURNS_DEFAULTS);
@property (readonly, class, nonnull) OrgMockitoAnswers *RETURNS_SMART_NULLS NS_SWIFT_NAME(RETURNS_SMART_NULLS);
@property (readonly, class, nonnull) OrgMockitoAnswers *RETURNS_MOCKS NS_SWIFT_NAME(RETURNS_MOCKS);
@property (readonly, class, nonnull) OrgMockitoAnswers *RETURNS_DEEP_STUBS NS_SWIFT_NAME(RETURNS_DEEP_STUBS);
@property (readonly, class, nonnull) OrgMockitoAnswers *CALLS_REAL_METHODS NS_SWIFT_NAME(CALLS_REAL_METHODS);
@property (readonly, class, nonnull) OrgMockitoAnswers *RETURNS_SELF NS_SWIFT_NAME(RETURNS_SELF);
+ (OrgMockitoAnswers * __nonnull)RETURNS_DEFAULTS;

+ (OrgMockitoAnswers * __nonnull)RETURNS_SMART_NULLS;

+ (OrgMockitoAnswers * __nonnull)RETURNS_MOCKS;

+ (OrgMockitoAnswers * __nonnull)RETURNS_DEEP_STUBS;

+ (OrgMockitoAnswers * __nonnull)CALLS_REAL_METHODS;

+ (OrgMockitoAnswers * __nonnull)RETURNS_SELF;

#pragma mark Public

- (id)answerWithOrgMockitoInvocationInvocationOnMock:(id<OrgMockitoInvocationInvocationOnMock>)invocation;

/*!
 */
- (id<OrgMockitoStubbingAnswer>)get __attribute__((deprecated));

+ (OrgMockitoAnswers *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (OrgMockitoAnswers_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(OrgMockitoAnswers)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT OrgMockitoAnswers *OrgMockitoAnswers_values_[];

/*!
 @brief The default configured answer of every mock.
 <p>Please see the <code>org.mockito.Mockito.RETURNS_DEFAULTS</code> documentation for more details.</p>
 - seealso: org.mockito.Mockito#RETURNS_DEFAULTS
 */
inline OrgMockitoAnswers *OrgMockitoAnswers_get_RETURNS_DEFAULTS(void);
J2OBJC_ENUM_CONSTANT(OrgMockitoAnswers, RETURNS_DEFAULTS)

/*!
 @brief An answer that returns smart-nulls.
 <p>Please see the <code>org.mockito.Mockito.RETURNS_SMART_NULLS</code> documentation for more details.</p>
 - seealso: org.mockito.Mockito#RETURNS_SMART_NULLS
 */
inline OrgMockitoAnswers *OrgMockitoAnswers_get_RETURNS_SMART_NULLS(void);
J2OBJC_ENUM_CONSTANT(OrgMockitoAnswers, RETURNS_SMART_NULLS)

/*!
 @brief An answer that returns <strong>mocks</strong> (not stubs).
 <p>Please see the <code>org.mockito.Mockito.RETURNS_MOCKS</code> documentation for more details.</p>
 - seealso: org.mockito.Mockito#RETURNS_MOCKS
 */
inline OrgMockitoAnswers *OrgMockitoAnswers_get_RETURNS_MOCKS(void);
J2OBJC_ENUM_CONSTANT(OrgMockitoAnswers, RETURNS_MOCKS)

/*!
 @brief An answer that returns <strong>deep stubs</strong> (not mocks).
 <p>Please see the <code>org.mockito.Mockito.RETURNS_DEEP_STUBS</code> documentation for more details.</p>
 - seealso: org.mockito.Mockito#RETURNS_DEEP_STUBS
 */
inline OrgMockitoAnswers *OrgMockitoAnswers_get_RETURNS_DEEP_STUBS(void);
J2OBJC_ENUM_CONSTANT(OrgMockitoAnswers, RETURNS_DEEP_STUBS)

/*!
 @brief An answer that calls the real methods (used for partial mocks).
 <p>Please see the <code>org.mockito.Mockito.CALLS_REAL_METHODS</code> documentation for more details.</p>
 - seealso: org.mockito.Mockito#CALLS_REAL_METHODS
 */
inline OrgMockitoAnswers *OrgMockitoAnswers_get_CALLS_REAL_METHODS(void);
J2OBJC_ENUM_CONSTANT(OrgMockitoAnswers, CALLS_REAL_METHODS)

/*!
 @brief An answer that tries to return itself.This is useful for mocking <code>Builders</code>.
 <p>Please see the <code>org.mockito.Mockito.RETURNS_SELF</code> documentation for more details.</p>
 - seealso: org.mockito.Mockito#RETURNS_SELF
 */
inline OrgMockitoAnswers *OrgMockitoAnswers_get_RETURNS_SELF(void);
J2OBJC_ENUM_CONSTANT(OrgMockitoAnswers, RETURNS_SELF)

FOUNDATION_EXPORT IOSObjectArray *OrgMockitoAnswers_values(void);

FOUNDATION_EXPORT OrgMockitoAnswers *OrgMockitoAnswers_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT OrgMockitoAnswers *OrgMockitoAnswers_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoAnswers)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgMockitoAnswers")
