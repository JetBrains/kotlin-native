//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/testing/mockito/build_result/java/org/mockito/Incubating.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoIncubating")
#ifdef RESTRICT_OrgMockitoIncubating
#define INCLUDE_ALL_OrgMockitoIncubating 0
#else
#define INCLUDE_ALL_OrgMockitoIncubating 1
#endif
#undef RESTRICT_OrgMockitoIncubating

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgMockitoIncubating_) && (INCLUDE_ALL_OrgMockitoIncubating || defined(INCLUDE_OrgMockitoIncubating))
#define OrgMockitoIncubating_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

/*!
 @brief The annotation conveys following information: 
 <ul>
  <li>The API is fairly new and we would appreciate your feedback.For example, what are you missing from the API
  to solve your use case.
 </li>
  <li>The API might change.
  The chance for that is incredibly small because we care great deal for the initial design.
  The incubating API might change based on the feedback from the community in order to make the API most useful for the users. 
 </li>
  <li>
  For types or methods that are not yet released it means the API is <strong>work in progress</strong>
  and can change before release. 
 </li>
  </ul>
 */
@protocol OrgMockitoIncubating < JavaLangAnnotationAnnotation >

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface OrgMockitoIncubating : NSObject < OrgMockitoIncubating >

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoIncubating)

FOUNDATION_EXPORT id<OrgMockitoIncubating> create_OrgMockitoIncubating(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoIncubating)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgMockitoIncubating")
