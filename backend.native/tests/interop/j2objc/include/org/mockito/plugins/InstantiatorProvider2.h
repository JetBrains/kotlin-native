//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/testing/mockito/build_result/java/org/mockito/plugins/InstantiatorProvider2.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoPluginsInstantiatorProvider2")
#ifdef RESTRICT_OrgMockitoPluginsInstantiatorProvider2
#define INCLUDE_ALL_OrgMockitoPluginsInstantiatorProvider2 0
#else
#define INCLUDE_ALL_OrgMockitoPluginsInstantiatorProvider2 1
#endif
#undef RESTRICT_OrgMockitoPluginsInstantiatorProvider2

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgMockitoPluginsInstantiatorProvider2_) && (INCLUDE_ALL_OrgMockitoPluginsInstantiatorProvider2 || defined(INCLUDE_OrgMockitoPluginsInstantiatorProvider2))
#define OrgMockitoPluginsInstantiatorProvider2_

@protocol OrgMockitoCreationInstanceInstantiator;
@protocol OrgMockitoMockMockCreationSettings;

/*!
 @brief <p>
      Mockito will invoke this interface in order to fetch an instance instantiator provider.
 </p>
  
 <p>
      By default, an internal byte-buddy/asm/objenesis based implementation is used. 
 </p>
  
 <h3>Using the extension point</h3>
  
 <p>
      The plugin mechanism of mockito works in a similar way as the     
 <code>java.util.ServiceLoader</code>, however instead of looking in the <code>META-INF</code>
      directory, Mockito will look in <code>mockito-extensions</code> directory.
      <em>The reason for that is that Android SDK strips jar from the <code>META-INF</code>
      directory when creating an APK.</em>
  </p>
  
 <ol style="list-style-type: lower-alpha">
      <li>The implementation itself, for example
          <code>org.awesome.mockito.AwesomeInstantiatorProvider2</code> that implements the
          <code>InstantiatorProvider2</code>.</li>
      <li>A file "<code>mockito-extensions/org.mockito.plugins.InstantiatorProvider2</code>".
          The content of this file is exactly a <strong>one</strong> line with the qualified
          name: <code>org.awesome.mockito.AwesomeInstantiatorProvider</code>.</li>
  </ol></p>
  
 <p>
      Note that if several <code>mockito-extensions/org.mockito.plugins.InstantiatorProvider2</code>
      files exists in the classpath, Mockito will only use the first returned by the standard     
 <code>ClassLoader.getResource</code> mechanism. 
 <p>
      So just create a custom implementation of <code>InstantiatorProvider2</code> and place the
      qualified name in the following file     
 <code>mockito-extensions/org.mockito.plugins.InstantiatorProvider2</code>.
  </p>
 @since 2.15.4
 */
@protocol OrgMockitoPluginsInstantiatorProvider2 < JavaObject >

/*!
 @brief Returns an instantiator, used to create new class instances.
 @since 2.15.4
 */
- (id<OrgMockitoCreationInstanceInstantiator>)getInstantiatorWithOrgMockitoMockMockCreationSettings:(id<OrgMockitoMockMockCreationSettings>)settings;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoPluginsInstantiatorProvider2)

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoPluginsInstantiatorProvider2)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgMockitoPluginsInstantiatorProvider2")
