//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/testing/mockito/build_result/java/org/mockito/plugins/PluginSwitch.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoPluginsPluginSwitch")
#ifdef RESTRICT_OrgMockitoPluginsPluginSwitch
#define INCLUDE_ALL_OrgMockitoPluginsPluginSwitch 0
#else
#define INCLUDE_ALL_OrgMockitoPluginsPluginSwitch 1
#endif
#undef RESTRICT_OrgMockitoPluginsPluginSwitch

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgMockitoPluginsPluginSwitch_) && (INCLUDE_ALL_OrgMockitoPluginsPluginSwitch || defined(INCLUDE_OrgMockitoPluginsPluginSwitch))
#define OrgMockitoPluginsPluginSwitch_

/*!
 @brief Allows switching off the plugins that are discovered on classpath.
 <p>
      Mockito will invoke this interface in order to select whether a plugin is enabled or not. 
 </p>
  
 <p>
      When a particular plugin is switched off, the default Mockito behavior is used.
      For example, if Android's dexmaker MockMaker is switched off,
      Mockito default MockMaker implementation is used <code>org.mockito.plugins.MockMaker</code>
  </p>
  
 <h3>Using the extension point</h3>
  
 <p>
      The plugin mechanism of mockito works in a similar way as the <code>java.util.ServiceLoader</code>, however instead of
      looking in the <code>META-INF</code> directory, Mockito will look in <code>mockito-extensions</code> directory.
      <em>The reason for that is that Android SDK strips jar from the <code>META-INF</code> directory when creating an APK.</em>
  </p>
  
 <ol style="list-style-type: lower-alpha">
      <li>The implementation itself, for example <code>org.awesome.mockito.AwesomeMockMaker</code> that extends the <code>MockMaker</code>.</li>
      <li>A file "<code>mockito-extensions/org.mockito.plugins.MockMaker</code>". The content of this file is
      exactly a <strong>one</strong> line with the qualified name: <code>org.awesome.mockito.AwesomeMockMaker</code>.</li>
  </ol></p>
  
 <p>Note that if several <code>mockito-extensions/org.mockito.plugins.MockMaker</code> files exists in the classpath
  Mockito will only use the first returned by the standard <code>ClassLoader.getResource</code> mechanism. 
 <p>
      So just create a custom implementation of <code>PluginSwitch</code> and place the qualified name in the following file
      <code>mockito-extensions/org.mockito.plugins.PluginSwitch</code>.
  </p>
 @since 1.10.15
 */
@protocol OrgMockitoPluginsPluginSwitch < JavaObject >

/*!
 @brief Mockito invokes this method for every plugin found in the classpath
  (except from the <code>PluginSwitch</code> implementation itself).
 If no custom plugins are discovered this method is not invoked.
 @since 1.10.15
 */
- (jboolean)isEnabledWithNSString:(NSString *)pluginClassName;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoPluginsPluginSwitch)

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoPluginsPluginSwitch)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgMockitoPluginsPluginSwitch")
