//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/testing/mockito/build_result/java/org/mockito/plugins/MockitoPlugins.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoPluginsMockitoPlugins")
#ifdef RESTRICT_OrgMockitoPluginsMockitoPlugins
#define INCLUDE_ALL_OrgMockitoPluginsMockitoPlugins 0
#else
#define INCLUDE_ALL_OrgMockitoPluginsMockitoPlugins 1
#endif
#undef RESTRICT_OrgMockitoPluginsMockitoPlugins

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgMockitoPluginsMockitoPlugins_) && (INCLUDE_ALL_OrgMockitoPluginsMockitoPlugins || defined(INCLUDE_OrgMockitoPluginsMockitoPlugins))
#define OrgMockitoPluginsMockitoPlugins_

@class IOSClass;
@protocol OrgMockitoPluginsMockMaker;

/*!
 @brief Instance of this interface is available via <code>MockitoFramework.getPlugins()</code>.
 This object enables framework integrators to get access to default Mockito plugins. 
 <p>
  Example use case: one needs to implement custom <code>MockMaker</code>
  and delegate some behavior to the default Mockito implementation.
  The interface was introduced to help framework integrations.
 @since 2.10.0
 */
@protocol OrgMockitoPluginsMockitoPlugins < JavaObject >

/*!
 @brief Returns the default plugin implementation used by Mockito.
 Mockito plugins are stateless so it is recommended to keep hold of the returned plugin implementation
  rather than calling this method multiple times.
  Each time this method is called, new instance of the plugin is created.
 @param pluginType type of the plugin, for example <code>MockMaker</code> .
 @return the plugin instance
 @since 2.10.0
 */
- (id)getDefaultPluginWithIOSClass:(IOSClass *)pluginType;

/*!
 @brief Returns inline mock maker, an optional mock maker that is bundled with Mockito distribution.
 This method is needed because <code>getDefaultPlugin(Class)</code> does not provide an instance of inline mock maker.
  Creates new instance each time is called so it is recommended to keep hold of the resulting object for future invocations.
  For more information about inline mock maker see the javadoc for main <code>Mockito</code> class.
 @return instance of inline mock maker
 @since 2.10.0
 */
- (id<OrgMockitoPluginsMockMaker>)getInlineMockMaker;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoPluginsMockitoPlugins)

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoPluginsMockitoPlugins)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgMockitoPluginsMockitoPlugins")
