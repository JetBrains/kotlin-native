//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/testing/mockito/build_result/java/org/mockito/exceptions/base/MockitoInitializationException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoExceptionsBaseMockitoInitializationException")
#ifdef RESTRICT_OrgMockitoExceptionsBaseMockitoInitializationException
#define INCLUDE_ALL_OrgMockitoExceptionsBaseMockitoInitializationException 0
#else
#define INCLUDE_ALL_OrgMockitoExceptionsBaseMockitoInitializationException 1
#endif
#undef RESTRICT_OrgMockitoExceptionsBaseMockitoInitializationException

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgMockitoExceptionsBaseMockitoInitializationException_) && (INCLUDE_ALL_OrgMockitoExceptionsBaseMockitoInitializationException || defined(INCLUDE_OrgMockitoExceptionsBaseMockitoInitializationException))
#define OrgMockitoExceptionsBaseMockitoInitializationException_

#define RESTRICT_JavaLangRuntimeException 1
#define INCLUDE_JavaLangRuntimeException 1
#include "java/lang/RuntimeException.h"

@class JavaLangThrowable;

@interface OrgMockitoExceptionsBaseMockitoInitializationException : JavaLangRuntimeException

#pragma mark Public

- (instancetype __nonnull)initWithNSString:(NSString *)message;

- (instancetype __nonnull)initWithNSString:(NSString *)message
                     withJavaLangThrowable:(JavaLangThrowable *)cause;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1
                               withBoolean:(jboolean)arg2
                               withBoolean:(jboolean)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoExceptionsBaseMockitoInitializationException)

FOUNDATION_EXPORT void OrgMockitoExceptionsBaseMockitoInitializationException_initWithNSString_(OrgMockitoExceptionsBaseMockitoInitializationException *self, NSString *message);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoInitializationException *new_OrgMockitoExceptionsBaseMockitoInitializationException_initWithNSString_(NSString *message) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoInitializationException *create_OrgMockitoExceptionsBaseMockitoInitializationException_initWithNSString_(NSString *message);

FOUNDATION_EXPORT void OrgMockitoExceptionsBaseMockitoInitializationException_initWithNSString_withJavaLangThrowable_(OrgMockitoExceptionsBaseMockitoInitializationException *self, NSString *message, JavaLangThrowable *cause);

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoInitializationException *new_OrgMockitoExceptionsBaseMockitoInitializationException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMockitoExceptionsBaseMockitoInitializationException *create_OrgMockitoExceptionsBaseMockitoInitializationException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoExceptionsBaseMockitoInitializationException)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgMockitoExceptionsBaseMockitoInitializationException")
