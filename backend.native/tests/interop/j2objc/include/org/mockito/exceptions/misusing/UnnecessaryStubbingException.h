//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/testing/mockito/build_result/java/org/mockito/exceptions/misusing/UnnecessaryStubbingException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoExceptionsMisusingUnnecessaryStubbingException")
#ifdef RESTRICT_OrgMockitoExceptionsMisusingUnnecessaryStubbingException
#define INCLUDE_ALL_OrgMockitoExceptionsMisusingUnnecessaryStubbingException 0
#else
#define INCLUDE_ALL_OrgMockitoExceptionsMisusingUnnecessaryStubbingException 1
#endif
#undef RESTRICT_OrgMockitoExceptionsMisusingUnnecessaryStubbingException

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgMockitoExceptionsMisusingUnnecessaryStubbingException_) && (INCLUDE_ALL_OrgMockitoExceptionsMisusingUnnecessaryStubbingException || defined(INCLUDE_OrgMockitoExceptionsMisusingUnnecessaryStubbingException))
#define OrgMockitoExceptionsMisusingUnnecessaryStubbingException_

#define RESTRICT_OrgMockitoExceptionsBaseMockitoException 1
#define INCLUDE_OrgMockitoExceptionsBaseMockitoException 1
#include "org/mockito/exceptions/base/MockitoException.h"

@class JavaLangThrowable;

/*!
 @brief This exception indicates presence of unused stubbings.
 It is highly recommended to remove unused stubbings to keep the codebase clean.
  In a rare scenario that unused stubbing is a false negative you can opt out from the validation via
  (in order of ascending scope): 
 <ol>
      <li>Declaring specific stubbing as 'lenient' - <code>Mockito.lenient()</code></li>
      <li>Declaring specific mock as 'lenient' - <code>org.mockito.MockSettings.lenient()</code></li>
      <li>Declaring all mocks in given test class or test method mock as 'lenient' with
           our JUnit support (<code>org.mockito.junit.MockitoJUnit</code>) or Mockito session (<code>MockitoSession</code>)</li>
  </ol>
  
 <p>
  Unnecessary stubbings are stubbed method calls that were never realized during test execution. Example: 
 <pre class="code"><code class="java">
  //code under test:
  ...
  String result = translator.translate("one")
  ...
  //test:
  ...
  when(translator.translate("one")).thenReturn("jeden"); // <- stubbing realized during code execution
  when(translator.translate("two")).thenReturn("dwa"); // <- stubbing never realized
  ... 
 
@endcode
  Notice that one of the stubbed methods were never realized in the code under test, during test execution.
  The stray stubbing might be an oversight of the developer, the artifact of copy-paste
  or the effect not understanding the test/code.
  Either way, the developer ends up with unnecessary test code.
  In order to keep the codebase clean & maintainable it is necessary to remove unnecessary code.
  Otherwise tests are harder to read and reason about. 
 <p>
  Mockito JUnit Runner triggers <code>UnnecessaryStubbingException</code> only when none of the test methods use the stubbings.
  This means that it is ok to put default stubbing in a 'setup' method or in test class constructor.
  That default stubbing needs to be used at least once by one of the test methods.
 */
@interface OrgMockitoExceptionsMisusingUnnecessaryStubbingException : OrgMockitoExceptionsBaseMockitoException

#pragma mark Public

- (instancetype __nonnull)initWithNSString:(NSString *)message;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoExceptionsMisusingUnnecessaryStubbingException)

FOUNDATION_EXPORT void OrgMockitoExceptionsMisusingUnnecessaryStubbingException_initWithNSString_(OrgMockitoExceptionsMisusingUnnecessaryStubbingException *self, NSString *message);

FOUNDATION_EXPORT OrgMockitoExceptionsMisusingUnnecessaryStubbingException *new_OrgMockitoExceptionsMisusingUnnecessaryStubbingException_initWithNSString_(NSString *message) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMockitoExceptionsMisusingUnnecessaryStubbingException *create_OrgMockitoExceptionsMisusingUnnecessaryStubbingException_initWithNSString_(NSString *message);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoExceptionsMisusingUnnecessaryStubbingException)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgMockitoExceptionsMisusingUnnecessaryStubbingException")
