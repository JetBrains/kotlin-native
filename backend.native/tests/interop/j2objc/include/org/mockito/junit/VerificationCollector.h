//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/testing/mockito/build_result/java/org/mockito/junit/VerificationCollector.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoJunitVerificationCollector")
#ifdef RESTRICT_OrgMockitoJunitVerificationCollector
#define INCLUDE_ALL_OrgMockitoJunitVerificationCollector 0
#else
#define INCLUDE_ALL_OrgMockitoJunitVerificationCollector 1
#endif
#undef RESTRICT_OrgMockitoJunitVerificationCollector

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgMockitoJunitVerificationCollector_) && (INCLUDE_ALL_OrgMockitoJunitVerificationCollector || defined(INCLUDE_OrgMockitoJunitVerificationCollector))
#define OrgMockitoJunitVerificationCollector_

#define RESTRICT_OrgJunitRulesTestRule 1
#define INCLUDE_OrgJunitRulesTestRule 1
#include "org/junit/rules/TestRule.h"

/*!
 @brief Use this rule in order to collect multiple verification failures and report at once.
 This new API in incubating - let us know if you find this feature useful.
  Should it be turned on by default with Mockito JUnit Rule? 
 <p>
  Although <code>VerificationCollector</code> is a JUnit Rule, it does not necessarily have to be used as a Test Rule
  - see <code>collectAndReport()</code>.
  <p>
  In the example below, the verification failure thrown by <code>byteReturningMethod()</code> does not block
  verifying against the <code>simpleMethod()</code>. After the test is run, a report is generated stating all
  collect verification failures. 
 <pre class="code"><code class="java">
    &#064;Rule
    public VerificationCollector collector = MockitoJUnit.collector();   
 &#064;Test
    public void should_fail() {
        IMethods methods = mock(IMethods.class);
        verify(methods).byteReturningMethod();
        verify(methods).simpleMethod();
    } 
 </code>
@endcode
 - seealso: org.mockito.Mockito#verify(Object)
 - seealso: org.mockito.Mockito#verify(Object, org.mockito.verification.VerificationMode)
 @since 2.1.0
 */
@protocol OrgMockitoJunitVerificationCollector < OrgJunitRulesTestRule, JavaObject >

/*!
 @brief Collect all lazily verified behaviour.If there were failed verifications, it will
  throw a MockitoAssertionError containing all messages indicating the failed verifications.
 <p>
  Normally, users don't need to call this method because it is automatically invoked when test finishes
  (part of the JUnit Rule behavior).
  However, in some circumstances and edge cases, it might be useful to collect and report verification
  errors in the middle of the test (for example: some scenario tests or during debugging). 
 <pre class="code"><code class="java">
    &#064;Rule
    public VerificationCollector collector = MockitoJUnit.collector();   
 &#064;Test
    public void should_fail() {
        IMethods methods = mock(IMethods.class);
        verify(methods).byteReturningMethod();
        verify(methods).simpleMethod();
        //report all verification errors now:
        collector.collectAndReport();
        //some other test code
    } 
 </code>
@endcode
 @throw MockitoAssertionErrorIf there were failed verifications
 @since 2.1.0
 */
- (void)collectAndReport;

/*!
 @brief Enforce all verifications are performed lazily.This method is automatically called when
  used as JUnitRule and normally users don't need to use it.
 <p>
  You should only use this method if you are using a VerificationCollector
  inside a method where only this method should be verified lazily. The other methods can
  still be verified directly. 
 <pre class="code"><code class="java">
    &#064;Test
    public void should_verify_lazily() {
        VerificationCollector collector = MockitoJUnit.collector().assertLazily();
        verify(methods).byteReturningMethod();
        verify(methods).simpleMethod();
        collector.collectAndReport();
    } 
 </code>
@endcode
 @return this
 @since 2.1.0
 */
- (id<OrgMockitoJunitVerificationCollector>)assertLazily;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoJunitVerificationCollector)

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoJunitVerificationCollector)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgMockitoJunitVerificationCollector")
