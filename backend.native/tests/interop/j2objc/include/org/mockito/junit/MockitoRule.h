//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/testing/mockito/build_result/java/org/mockito/junit/MockitoRule.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoJunitMockitoRule")
#ifdef RESTRICT_OrgMockitoJunitMockitoRule
#define INCLUDE_ALL_OrgMockitoJunitMockitoRule 0
#else
#define INCLUDE_ALL_OrgMockitoJunitMockitoRule 1
#endif
#undef RESTRICT_OrgMockitoJunitMockitoRule

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgMockitoJunitMockitoRule_) && (INCLUDE_ALL_OrgMockitoJunitMockitoRule || defined(INCLUDE_OrgMockitoJunitMockitoRule))
#define OrgMockitoJunitMockitoRule_

#define RESTRICT_OrgJunitRulesMethodRule 1
#define INCLUDE_OrgJunitRulesMethodRule 1
#include "org/junit/rules/MethodRule.h"

@class OrgMockitoQualityStrictness;

/*!
 @brief Mockito JUnit Rule helps keeping tests clean.
 It initializes mocks, validates usage and detects incorrect stubbing.
  Make sure to configure your rule with <code>strictness(Strictness)</code> which automatically
  detects <strong>stubbing argument mismatches</strong> and is planned to be the default in Mockito v3. 
 <p>
  Since Mockito 2.1.0, JUnit rule emits stubbing warnings and hints to System output (see <code>MockitoHint</code>).
  The JUnit rule can be used instead of <code>MockitoJUnitRunner</code>.
  It requires JUnit at least 4.7. 
 <p>
  The rule adds following behavior: 
 <ul>
    <li>
       Since 2.1.0, stubbing warnings and hints are printed to System output.
       Hints contain clickable links that take you right to the line of code that contains a possible problem.      
 <strong>Please</strong> give us feedback about the stubbing warnings of JUnit rules in the issue tracker
       (<a href="https://github.com/mockito/mockito/issues/384">issue 384</a>).
       It's a new feature of Mockito 2.1.0. It aims to help debugging tests.
       If you wish the previous behavior, see <code>MockitoRule.silent()</code>.
       However, we would really like to know why do you wish to silence the warnings!
       See also <code>MockitoHint</code>.
    <li>
       Initializes mocks annotated with <code>org.mockito.Mock</code>,
       so that explicit usage of <code>MockitoAnnotations.initMocks(Object)</code> is not necessary.
       Mocks are initialized before each test method.   
 <li>
       Validates framework usage after each test method. See javadoc for <code>org.mockito.Mockito.validateMockitoUsage()</code>.
    <li>
       It is highly recommended to use the rule with <code>strictness(Strictness)</code> configured to <code>Strictness.STRICT_STUBS</code>.
       It drives cleaner tests and improves debugging experience.
       The only reason this feature is not turned on by default
       is because it would have been an incompatible change
       and Mockito strictly follows <a href="http://semver.org">semantic versioning</a>.
  
 </ul>
  Example use: 
 <pre class="code"><code class="java">
  public class ExampleTest {
      //Creating new rule with recommended Strictness setting     
 &#064;Rule public MockitoRule rule = MockitoJUnit.rule().strictness(Strictness.STRICT_STUBS);
      &#064;Mock
      private List list;     
 &#064;Test
      public void shouldDoSomething() {
          list.add(100);
      } } 
 </code>
@endcode
  If you would like to take advantage of Mockito JUnit rule features
  but you cannot use the rule because, for example, you use TestNG, there is a solution! 
 <code>MockitoSession</code> API is intended to offer cleaner tests and improved debuggability
  to users that cannot use Mockito's built-in JUnit support (runner or the rule).
 @since 1.10.17
 */
@protocol OrgMockitoJunitMockitoRule < OrgJunitRulesMethodRule, JavaObject >

/*!
 @brief Rule will not report stubbing warnings during test execution.
 By default, stubbing warnings are printed to Standard output to help debugging.
  Equivalent of configuring <code>strictness(Strictness)</code> with <code>Strictness.LENIENT</code>.
  <p>
  <strong>Please</strong> give us feedback about the stubbing warnings of JUnit rules
  by commenting on GitHub <a href="https://github.com/mockito/mockito/issues/769">issue 769</a>.
  It's a new feature of Mockito 2.1.0. It aims to help debugging tests.
  We want to make sure the feature is useful.
  We would really like to know why do you wish to silence the warnings!
  See also <code>MockitoHint</code>.
  <p>
  Example: 
 <pre class="code"><code class="java">
  public class ExampleTest {
      
 &#064;Rule
      public MockitoRule rule = MockitoJUnit.rule().silent();
  } 
 </code>
@endcode
 @since 2.1.0
 */
- (id<OrgMockitoJunitMockitoRule>)silent;

/*!
 @brief The strictness, especially "strict stubs" (<code>Strictness.STRICT_STUBS</code>)
  helps debugging and keeping tests clean.
 It's a new feature introduced in Mockito 2.3.
  Other levels of strictness - "warn" - (<code>Strictness.WARN</code>)
  and "lenient" (<code>MockitoRule.silent()</code>) strictness were already present in Mockito 2.1.0.
  Version 2.3.0 introduces "strict stubs" (<code>Strictness.STRICT_STUBS</code>).
  
 <pre class="code"><code class="java">
  public class ExampleTest {
      &#064;Rule
      public MockitoRule rule = MockitoJUnit.rule().strictness(Strictness.STRICT_STUBS);
  } 
 </code>
@endcode
  See Javadoc for <code>Strictness</code> to learn how strictness influences the behavior of the JUnit rule.
  See <code>Strictness.STRICT_STUBS</code> to learn why is it recommended to use "strict stubbing". 
 <p>
  It is possible to tweak the strictness per test method.
  Why would you need it? See the use cases in Javadoc for <code>PotentialStubbingProblem</code> class.
  In order to tweak strictness per stubbing see <code>Mockito.lenient()</code>, per mock see <code>MockSettings.lenient()</code>.
  
 <pre class="code"><code class="java">
  public class ExampleTest {
      &#064;Rule
      public MockitoRule rule = MockitoJUnit.rule().strictness(Strictness.STRICT_STUBS);     
 &#064;Test public void exampleTest() {
          //Change the strictness level only for this test method
          //Useful for edge cases (see Javadoc for PotentialStubbingProblem class)
          mockito.strictness(Strictness.LENIENT);
          //remaining test code
      } } 
 </code>
@endcode
  "Strict stubs" are planned to be the default for Mockito v3</li>
  We are very eager to hear feedback about "strict stubbing" feature, let us know by commenting on GitHub 
 <a href="https://github.com/mockito/mockito/issues/769">issue 769</a>.
  Strict stubbing is an attempt to improve testability and productivity with Mockito. Tell us what you think!
 @since 2.3.0
 */
- (id<OrgMockitoJunitMockitoRule>)strictnessWithOrgMockitoQualityStrictness:(OrgMockitoQualityStrictness *)strictness;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoJunitMockitoRule)

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoJunitMockitoRule)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgMockitoJunitMockitoRule")
