//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/testing/mockito/build_result/java/org/mockito/junit/MockitoJUnitRunner.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoJunitMockitoJUnitRunner")
#ifdef RESTRICT_OrgMockitoJunitMockitoJUnitRunner
#define INCLUDE_ALL_OrgMockitoJunitMockitoJUnitRunner 0
#else
#define INCLUDE_ALL_OrgMockitoJunitMockitoJUnitRunner 1
#endif
#undef RESTRICT_OrgMockitoJunitMockitoJUnitRunner
#ifdef INCLUDE_OrgMockitoJunitMockitoJUnitRunner_StrictStubs
#define INCLUDE_OrgMockitoJunitMockitoJUnitRunner 1
#endif
#ifdef INCLUDE_OrgMockitoJunitMockitoJUnitRunner_Strict
#define INCLUDE_OrgMockitoJunitMockitoJUnitRunner 1
#endif
#ifdef INCLUDE_OrgMockitoJunitMockitoJUnitRunner_Silent
#define INCLUDE_OrgMockitoJunitMockitoJUnitRunner 1
#endif

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgMockitoJunitMockitoJUnitRunner_) && (INCLUDE_ALL_OrgMockitoJunitMockitoJUnitRunner || defined(INCLUDE_OrgMockitoJunitMockitoJUnitRunner))
#define OrgMockitoJunitMockitoJUnitRunner_

#define RESTRICT_OrgJunitRunnerRunner 1
#define INCLUDE_OrgJunitRunnerRunner 1
#include "org/junit/runner/Runner.h"

#define RESTRICT_OrgJunitRunnerManipulationFilterable 1
#define INCLUDE_OrgJunitRunnerManipulationFilterable 1
#include "org/junit/runner/manipulation/Filterable.h"

@class IOSClass;
@class OrgJunitRunnerDescription;
@class OrgJunitRunnerManipulationFilter;
@class OrgJunitRunnerNotificationRunNotifier;
@protocol OrgMockitoInternalRunnersInternalRunner;

/*!
 @brief Mockito JUnit Runner keeps tests clean and improves debugging experience.
 Make sure to try out <code>MockitoJUnitRunner.StrictStubs</code> which automatically
  detects <strong>stubbing argument mismatches</strong> and is planned to be the default in Mockito v3.
  Runner is compatible with JUnit 4.4 and higher and adds following behavior: 
 <ul>
    <li>
        (new since Mockito 2.1.0) Detects unused stubs in the test code.
        See <code>UnnecessaryStubbingException</code>.
        Similar to JUnit rules, the runner also reports stubbing argument mismatches as console warnings
        (see <code>MockitoHint</code>).
        To opt-out from this feature, use <code></code>&#064;RunWith(MockitoJUnitRunner.Silent.class)<code></code>
    <li>
       Initializes mocks annotated with <code>Mock</code>,
       so that explicit usage of <code>MockitoAnnotations.initMocks(Object)</code> is not necessary.
       Mocks are initialized before each test method.   
 <li>
       Validates framework usage after each test method. See javadoc for <code>Mockito.validateMockitoUsage()</code>.
    <li>
       It is highly recommended to use <code>MockitoJUnitRunner.StrictStubs</code> variant of the runner.
       It drives cleaner tests and improves debugging experience.
       The only reason this feature is not turned on by default
       is because it would have been an incompatible change
       and Mockito strictly follows <a href="http://semver.org">semantic versioning</a>.
  </ul>
  Runner is completely optional - there are other ways you can get &#064;Mock working, for example by writing a base class.
  Explicitly validating framework usage is also optional because it is triggered automatically by Mockito every time you use the framework.
  See javadoc for <code>Mockito.validateMockitoUsage()</code>.
  <p>
  Read more about &#064;Mock annotation in javadoc for <code>MockitoAnnotations</code>
  <pre class="code"><code class="java">
  <b>&#064;RunWith(MockitoJUnitRunner.StrictStubs.class)</b>
  public class ExampleTest {
      &#064;Mock
      private List list;     
 &#064;Test
      public void shouldDoSomething() {
          list.add(100);
      } } 
 </code>
@endcode
  If you would like to take advantage of Mockito JUnit runner features
  but you cannot use the runner because, for example, you use TestNG, there is a solution! 
 <code>MockitoSession</code> API is intended to offer cleaner tests and improved debuggability
  to users that cannot use Mockito's built-in JUnit support (runner or the rule).
 */
@interface OrgMockitoJunitMockitoJUnitRunner : OrgJunitRunnerRunner < OrgJunitRunnerManipulationFilterable >

#pragma mark Public

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)klass;

- (void)filterWithOrgJunitRunnerManipulationFilter:(OrgJunitRunnerManipulationFilter *)filter;

- (OrgJunitRunnerDescription *)getDescription;

- (void)runWithOrgJunitRunnerNotificationRunNotifier:(OrgJunitRunnerNotificationRunNotifier *)notifier;

#pragma mark Package-Private

- (instancetype __nonnull)initWithOrgMockitoInternalRunnersInternalRunner:(id<OrgMockitoInternalRunnersInternalRunner>)runner;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoJunitMockitoJUnitRunner)

FOUNDATION_EXPORT void OrgMockitoJunitMockitoJUnitRunner_initWithIOSClass_(OrgMockitoJunitMockitoJUnitRunner *self, IOSClass *klass);

FOUNDATION_EXPORT OrgMockitoJunitMockitoJUnitRunner *new_OrgMockitoJunitMockitoJUnitRunner_initWithIOSClass_(IOSClass *klass) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMockitoJunitMockitoJUnitRunner *create_OrgMockitoJunitMockitoJUnitRunner_initWithIOSClass_(IOSClass *klass);

FOUNDATION_EXPORT void OrgMockitoJunitMockitoJUnitRunner_initWithOrgMockitoInternalRunnersInternalRunner_(OrgMockitoJunitMockitoJUnitRunner *self, id<OrgMockitoInternalRunnersInternalRunner> runner);

FOUNDATION_EXPORT OrgMockitoJunitMockitoJUnitRunner *new_OrgMockitoJunitMockitoJUnitRunner_initWithOrgMockitoInternalRunnersInternalRunner_(id<OrgMockitoInternalRunnersInternalRunner> runner) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMockitoJunitMockitoJUnitRunner *create_OrgMockitoJunitMockitoJUnitRunner_initWithOrgMockitoInternalRunnersInternalRunner_(id<OrgMockitoInternalRunnersInternalRunner> runner);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoJunitMockitoJUnitRunner)

#endif

#if !defined (OrgMockitoJunitMockitoJUnitRunner_Silent_) && (INCLUDE_ALL_OrgMockitoJunitMockitoJUnitRunner || defined(INCLUDE_OrgMockitoJunitMockitoJUnitRunner_Silent))
#define OrgMockitoJunitMockitoJUnitRunner_Silent_

@class IOSClass;
@protocol OrgMockitoInternalRunnersInternalRunner;

/*!
 @brief This Mockito JUnit Runner implementation *ignores*
  stubbing argument mismatches (<code>MockitoJUnitRunner.StrictStubs</code>)
  and *does not detect* unused stubbings.
 The runner remains 'silent' even if incorrect stubbing is present.
  It is an equivalent of <code>Strictness.LENIENT</code>.
  This was the behavior of Mockito JUnit runner in versions 1.x.
  Using this implementation of the runner is not recommended.
  Engineers should care for removing unused stubbings because they are dead code,
  they add unnecessary details, potentially making the test code harder to comprehend.
  If you have good reasons to use the silent runner, let us know at the mailing list
  or raise an issue in our issue tracker.
  The purpose of silent implementation is to satisfy edge/unanticipated use cases,
  and to offer users an opt-out.
  Mockito framework is opinionated to drive clean tests but it is not dogmatic. 
 <p>
  See also <code>UnnecessaryStubbingException</code>.
  <p>
  Usage: 
 <pre class="code"><code class="java">
  <b>&#064;RunWith(MockitoJUnitRunner.Silent.class)</b>
  public class ExampleTest {
    // ...
  } 
 </code>
@endcode
 @since 2.1.0
 */
@interface OrgMockitoJunitMockitoJUnitRunner_Silent : OrgMockitoJunitMockitoJUnitRunner

#pragma mark Public

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)klass;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgMockitoInternalRunnersInternalRunner:(id<OrgMockitoInternalRunnersInternalRunner>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoJunitMockitoJUnitRunner_Silent)

FOUNDATION_EXPORT void OrgMockitoJunitMockitoJUnitRunner_Silent_initWithIOSClass_(OrgMockitoJunitMockitoJUnitRunner_Silent *self, IOSClass *klass);

FOUNDATION_EXPORT OrgMockitoJunitMockitoJUnitRunner_Silent *new_OrgMockitoJunitMockitoJUnitRunner_Silent_initWithIOSClass_(IOSClass *klass) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMockitoJunitMockitoJUnitRunner_Silent *create_OrgMockitoJunitMockitoJUnitRunner_Silent_initWithIOSClass_(IOSClass *klass);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoJunitMockitoJUnitRunner_Silent)

#endif

#if !defined (OrgMockitoJunitMockitoJUnitRunner_Strict_) && (INCLUDE_ALL_OrgMockitoJunitMockitoJUnitRunner || defined(INCLUDE_OrgMockitoJunitMockitoJUnitRunner_Strict))
#define OrgMockitoJunitMockitoJUnitRunner_Strict_

@class IOSClass;
@protocol OrgMockitoInternalRunnersInternalRunner;

/*!
 @brief Detects unused stubs and reports them as failures.Default behavior in Mockito 2.x.
 To improve productivity and quality of tests please consider newer API, the <code>StrictStubs</code>.
  <p>
  For more information on detecting unusued stubs, see <code>UnnecessaryStubbingException</code>.
  For more information on stubbing argument mismatch warnings see <code>MockitoHint</code>.
 @since 2.1.0
 */
@interface OrgMockitoJunitMockitoJUnitRunner_Strict : OrgMockitoJunitMockitoJUnitRunner

#pragma mark Public

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)klass;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgMockitoInternalRunnersInternalRunner:(id<OrgMockitoInternalRunnersInternalRunner>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoJunitMockitoJUnitRunner_Strict)

FOUNDATION_EXPORT void OrgMockitoJunitMockitoJUnitRunner_Strict_initWithIOSClass_(OrgMockitoJunitMockitoJUnitRunner_Strict *self, IOSClass *klass);

FOUNDATION_EXPORT OrgMockitoJunitMockitoJUnitRunner_Strict *new_OrgMockitoJunitMockitoJUnitRunner_Strict_initWithIOSClass_(IOSClass *klass) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMockitoJunitMockitoJUnitRunner_Strict *create_OrgMockitoJunitMockitoJUnitRunner_Strict_initWithIOSClass_(IOSClass *klass);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoJunitMockitoJUnitRunner_Strict)

#endif

#if !defined (OrgMockitoJunitMockitoJUnitRunner_StrictStubs_) && (INCLUDE_ALL_OrgMockitoJunitMockitoJUnitRunner || defined(INCLUDE_OrgMockitoJunitMockitoJUnitRunner_StrictStubs))
#define OrgMockitoJunitMockitoJUnitRunner_StrictStubs_

@class IOSClass;
@protocol OrgMockitoInternalRunnersInternalRunner;

/*!
 @brief Improves debugging tests, helps keeping the tests clean.
 Highly recommended to improve productivity and quality of tests.
  Planned default behavior for Mockito v3.
  Adds behavior equivalent to <code>Strictness.STRICT_STUBS</code>.
  <p>
  Usage: 
 <pre class="code"><code class="java">
  <b>&#064;RunWith(MockitoJUnitRunner.StrictStubs.class)</b>
  public class ExampleTest {
    // ...
  } 
 </code>
@endcode
 @since 2.5.1
 */
@interface OrgMockitoJunitMockitoJUnitRunner_StrictStubs : OrgMockitoJunitMockitoJUnitRunner

#pragma mark Public

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)klass;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgMockitoInternalRunnersInternalRunner:(id<OrgMockitoInternalRunnersInternalRunner>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoJunitMockitoJUnitRunner_StrictStubs)

FOUNDATION_EXPORT void OrgMockitoJunitMockitoJUnitRunner_StrictStubs_initWithIOSClass_(OrgMockitoJunitMockitoJUnitRunner_StrictStubs *self, IOSClass *klass);

FOUNDATION_EXPORT OrgMockitoJunitMockitoJUnitRunner_StrictStubs *new_OrgMockitoJunitMockitoJUnitRunner_StrictStubs_initWithIOSClass_(IOSClass *klass) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMockitoJunitMockitoJUnitRunner_StrictStubs *create_OrgMockitoJunitMockitoJUnitRunner_StrictStubs_initWithIOSClass_(IOSClass *klass);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoJunitMockitoJUnitRunner_StrictStubs)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgMockitoJunitMockitoJUnitRunner")
