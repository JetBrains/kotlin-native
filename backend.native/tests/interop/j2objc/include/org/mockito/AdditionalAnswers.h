//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/testing/mockito/build_result/java/org/mockito/AdditionalAnswers.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoAdditionalAnswers")
#ifdef RESTRICT_OrgMockitoAdditionalAnswers
#define INCLUDE_ALL_OrgMockitoAdditionalAnswers 0
#else
#define INCLUDE_ALL_OrgMockitoAdditionalAnswers 1
#endif
#undef RESTRICT_OrgMockitoAdditionalAnswers

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgMockitoAdditionalAnswers_) && (INCLUDE_ALL_OrgMockitoAdditionalAnswers || defined(INCLUDE_OrgMockitoAdditionalAnswers))
#define OrgMockitoAdditionalAnswers_

@protocol JavaUtilCollection;
@protocol OrgMockitoStubbingAnswer1;
@protocol OrgMockitoStubbingAnswer2;
@protocol OrgMockitoStubbingAnswer3;
@protocol OrgMockitoStubbingAnswer4;
@protocol OrgMockitoStubbingAnswer5;
@protocol OrgMockitoStubbingAnswer;
@protocol OrgMockitoStubbingVoidAnswer1;
@protocol OrgMockitoStubbingVoidAnswer2;
@protocol OrgMockitoStubbingVoidAnswer3;
@protocol OrgMockitoStubbingVoidAnswer4;
@protocol OrgMockitoStubbingVoidAnswer5;

/*!
 @brief Additional answers provides factory methods for answers.
 <p>Currently offer answers that can return the parameter of an invocation at a certain position,
  along with answers that draw on a strongly typed interface to provide a neater way to write custom answers
  that either return a value or are void (see answer interfaces in <code>org.mockito.stubbing</code>).
  
 <p>See factory methods for more information : <code>returnsFirstArg</code>, <code>returnsSecondArg</code>,
  <code>returnsLastArg</code>, <code>returnsArgAt</code>, <code>answer</code> and <code>answerVoid</code>
 @since 1.9.5
 */
@interface OrgMockitoAdditionalAnswers : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Creates an answer from a functional interface - allows for a strongly typed answer to be created
  ideally in Java 8
 @param answer interface to the answer - which is expected to return something
 @return the answer object to use
 @since 2.1.0
 */
+ (id<OrgMockitoStubbingAnswer>)answerWithOrgMockitoStubbingAnswer1:(id<OrgMockitoStubbingAnswer1>)answer;

/*!
 @brief Creates an answer from a functional interface - allows for a strongly typed answer to be created
  ideally in Java 8
 @param answer interface to the answer - which is expected to return something
 @return the answer object to use
 @since 2.1.0
 */
+ (id<OrgMockitoStubbingAnswer>)answerWithOrgMockitoStubbingAnswer2:(id<OrgMockitoStubbingAnswer2>)answer;

/*!
 @brief Creates an answer from a functional interface - allows for a strongly typed answer to be created
  ideally in Java 8
 @param answer interface to the answer - which is expected to return something
 @return the answer object to use
 @since 2.1.0
 */
+ (id<OrgMockitoStubbingAnswer>)answerWithOrgMockitoStubbingAnswer3:(id<OrgMockitoStubbingAnswer3>)answer;

/*!
 @brief Creates an answer from a functional interface - allows for a strongly typed answer to be created
  ideally in Java 8
 @param answer interface to the answer - which is expected to return something
 @return the answer object to use
 @since 2.1.0
 */
+ (id<OrgMockitoStubbingAnswer>)answerWithOrgMockitoStubbingAnswer4:(id<OrgMockitoStubbingAnswer4>)answer;

/*!
 @brief Creates an answer from a functional interface - allows for a strongly typed answer to be created
  ideally in Java 8
 @param answer interface to the answer - which is expected to return something
 @return the answer object to use
 @since 2.1.0
 */
+ (id<OrgMockitoStubbingAnswer>)answerWithOrgMockitoStubbingAnswer5:(id<OrgMockitoStubbingAnswer5>)answer;

/*!
 @brief Returns an answer after a delay with a defined length.
 @param sleepyTime the delay in milliseconds
 @param answer interface to the answer which provides the intended return value.
 @return the answer object to use
 @since 2.8.44
 */
+ (id<OrgMockitoStubbingAnswer>)answersWithDelayWithLong:(jlong)sleepyTime
                            withOrgMockitoStubbingAnswer:(id<OrgMockitoStubbingAnswer>)answer;

/*!
 @brief Creates an answer from a functional interface - allows for a strongly typed answer to be created
  ideally in Java 8
 @param answer interface to the answer - a void method
 @return the answer object to use
 @since 2.1.0
 */
+ (id<OrgMockitoStubbingAnswer>)answerVoidWithOrgMockitoStubbingVoidAnswer1:(id<OrgMockitoStubbingVoidAnswer1>)answer;

/*!
 @brief Creates an answer from a functional interface - allows for a strongly typed answer to be created
  ideally in Java 8
 @param answer interface to the answer - a void method
 @return the answer object to use
 @since 2.1.0
 */
+ (id<OrgMockitoStubbingAnswer>)answerVoidWithOrgMockitoStubbingVoidAnswer2:(id<OrgMockitoStubbingVoidAnswer2>)answer;

/*!
 @brief Creates an answer from a functional interface - allows for a strongly typed answer to be created
  ideally in Java 8
 @param answer interface to the answer - a void method
 @return the answer object to use
 @since 2.1.0
 */
+ (id<OrgMockitoStubbingAnswer>)answerVoidWithOrgMockitoStubbingVoidAnswer3:(id<OrgMockitoStubbingVoidAnswer3>)answer;

/*!
 @brief Creates an answer from a functional interface - allows for a strongly typed answer to be created
  ideally in Java 8
 @param answer interface to the answer - a void method
 @return the answer object to use
 @since 2.1.0
 */
+ (id<OrgMockitoStubbingAnswer>)answerVoidWithOrgMockitoStubbingVoidAnswer4:(id<OrgMockitoStubbingVoidAnswer4>)answer;

/*!
 @brief Creates an answer from a functional interface - allows for a strongly typed answer to be created
  ideally in Java 8
 @param answer interface to the answer - a void method
 @return the answer object to use
 @since 2.1.0
 */
+ (id<OrgMockitoStubbingAnswer>)answerVoidWithOrgMockitoStubbingVoidAnswer5:(id<OrgMockitoStubbingVoidAnswer5>)answer;

/*!
 @brief An answer that directly forwards the calls to the delegate.The delegate may or may not be of the same type as the mock.
 If the type is different, a matching method needs to be found on delegate type otherwise an exception is thrown. 
 <p>
  Useful for spies or partial mocks of objects that are difficult to mock
  or spy using the usual spy API. Possible use cases: 
 <ul>
      <li>Final classes but with an interface</li>
      <li>Already custom proxied object</li>
      <li>Special objects with a finalize method, i.e. to avoid executing it 2 times</li>
  </ul>
  
 <p>
  The difference with the regular spy: 
 <ul>
    <li>
      The regular spy (<code>Mockito.spy(Object)</code>) contains <strong>all</strong> state from the spied instance
      and the methods are invoked on the spy. The spied instance is only used at mock creation to copy the state from.
      If you call a method on a regular spy and it internally calls other methods on this spy, those calls are remembered
      for verifications, and they can be effectively stubbed.   
 </li>
    <li>
      The mock that delegates simply delegates all methods to the delegate.
      The delegate is used all the time as methods are delegated onto it.
      If you call a method on a mock that delegates and it internally calls other methods on this mock,
      those calls are <strong>not</strong> remembered for verifications, stubbing does not have effect on them, too.
      Mock that delegates is less powerful than the regular spy but it is useful when the regular spy cannot be created.   
 </li>
  </ul>
  An example with a final class that we want to delegate to: 
 <p>
  <pre class="code"><code class="java">
    final class DontYouDareToMockMe implements list { ... }
    DontYouDareToMockMe awesomeList = new DontYouDareToMockMe();
    List mock = mock(List.class, delegatesTo(awesomeList)); 
 </code>
@endcode
  
 <p>
  This feature suffers from the same drawback as the spy.
  The mock will call the delegate if you use regular when().then() stubbing style.
  Since the real implementation is called this might have some side effects.
  Therefore you should to use the doReturn|Throw|Answer|CallRealMethod stubbing style. Example: 
 <pre class="code"><code class="java">
    List listWithDelegate = mock(List.class, AdditionalAnswers.delegatesTo(awesomeList));
    //Impossible: real method is called so listWithDelegate.get(0) throws IndexOutOfBoundsException (the list is yet empty)
    when(listWithDelegate.get(0)).thenReturn("foo");
    //You have to use doReturn() for stubbing
    doReturn("foo").when(listWithDelegate).get(0); 
 </code>
@endcode
 @param delegate The delegate to forward calls to. It does not have to be of the same type as the mock (although it usually is).                  The only requirement is that the instance should have compatible method signatures including the return values.
                   Only the methods that were actually executed on the mock need to be present on the delegate type.
 @return the answer
 @since 1.9.5
 */
+ (id<OrgMockitoStubbingAnswer>)delegatesToWithId:(id)delegate;

/*!
 @brief Returns the parameter of an invocation at the given position.
 <p>
  This additional answer could be used at stub time using the 
 <code>then|do|will<code>org.mockito.stubbing.Answer</code></code> methods. For example : 
 <pre class="code"><code class="java">
  given(person.remember(dream1, dream2, dream3, dream4)).will(returnsArgAt(3));
  doAnswer(returnsArgAt(3)).when(person).remember(dream1, dream2, dream3, dream4); 
 </code>
@endcode
  </p>
  
 <p>
  This methods works with varargs as well, mockito will expand the vararg to return the argument
  at the given position. Suppose the following signature : 
 <pre class="code"><code class="java">
  interface Person {
      Dream remember(Dream dream, Dream... otherDreams);
  }
  // returns dream 3
  given(person.remember(dream1, dream2, dream3, dream4)).will(returnsArgAt(2)); 
 </code>
@endcode
  Mockito will return the vararg array if the given <code>position</code> targets the vararg index in the method
  and if the return type has the same type as the vararg array. 
 <pre class="code"><code class="java">
  interface Person {
      Dream[] remember(Dream dream, Dream... otherDreams);
  }
  // returns otherDreams array (contains dream2, dream,3, dream4)
  given(person.remember(dream1, dream2, dream3, dream4)).will(returnsArgAt(1)); 
 </code>
@endcode
  </p>
 @param position index of the argument from the list of arguments.
 @return Answer that will return the argument from the given position in the argument's list
 @since 1.9.5
 */
+ (id<OrgMockitoStubbingAnswer>)returnsArgAtWithInt:(jint)position;

/*!
 @brief Returns elements of the collection.Keeps returning the last element forever.
 Might be useful on occasion when you have a collection of elements to return. 
 <p>
  <pre class="code"><code class="java">
    //this:
    when(mock.foo()).thenReturn(1, 2, 3);
    //is equivalent to:
    when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3))); 
 </code>
@endcode
 @param elements The collection of elements to return.
 @return the answer
 @since 1.9.5
 */
+ (id<OrgMockitoStubbingAnswer>)returnsElementsOfWithJavaUtilCollection:(id<JavaUtilCollection>)elements;

/*!
 @brief Returns the first parameter of an invocation.
 <p>
      This additional answer could be used at stub time using the     
 <code>then|do|will<code>org.mockito.stubbing.Answer</code></code> methods. For example : 
 <pre class="code"><code class="java">
  given(carKeyFob.authenticate(carKey)).will(returnsFirstArg());
  doAnswer(returnsFirstArg()).when(carKeyFob).authenticate(carKey); 
 </code>
@endcode
  </p>
  
 <p>
  This methods works with varargs as well, mockito will expand the vararg to return the argument
  at the given position. Suppose the following signature : 
 <pre class="code"><code class="java">
  interface Person {
      Dream remember(Dream... dreams);
  }
  // returns dream1
  given(person.remember(dream1, dream2, dream3, dream4)).will(returnsFirstArg()); 
 </code>
@endcode
  Mockito will return the vararg array if the first argument is a vararg in the method
  and if the return type has the same type as the vararg array. 
 <pre class="code"><code class="java">
  interface Person {
      Dream[] remember(Dream... otherDreams);
  }
  // returns otherDreams (happens to be a 4 elements array)
  given(person.remember(dream1, dream2, dream3, dream4)).will(returnsFirstArg()); 
 </code>
@endcode
  </p>
 @return Answer that will return the first argument of the invocation.
 @since 1.9.5
 */
+ (id<OrgMockitoStubbingAnswer>)returnsFirstArg;

/*!
 @brief Returns the last parameter of an invocation.
 <p>
      This additional answer could be used at stub time using the     
 <code>then|do|will<code>org.mockito.stubbing.Answer</code></code> methods. For example : 
 <pre class="code"><code class="java">
  given(person.remember(dream1, dream2, dream3, dream4)).will(returnsLastArg());
  doAnswer(returnsLastArg()).when(person).remember(dream1, dream2, dream3, dream4); 
 </code>
@endcode
  </p>
  
 <p>
  This methods works with varargs as well, mockito will expand the vararg to return the argument
  at the given position. Suppose the following signature : 
 <pre class="code"><code class="java">
  interface Person {
      Dream remember(Dream dream, Dream... otherDreams);
  }
  // returns dream4
  given(person.remember(dream1, dream2, dream3, dream4)).will(returnsLastArg()); 
 </code>
@endcode
  Mockito will return the vararg array if the given <code>position</code> targets the vararg index in the method
  and if the return type has the same type as the vararg array. 
 <pre class="code"><code class="java">
  interface Person {
      Dream[] remember(Dream dream1, Dream dream2, Dream dream3, Dream... otherDreams);
  }
  // returns otherDreams (happens to be a single element array)
  given(person.remember(dream1, dream2, dream3, dream4)).will(returnsLastArg()); 
 </code>
@endcode
  </p>
 @return Answer that will return the last argument of the invocation.
 @since 1.9.5
 */
+ (id<OrgMockitoStubbingAnswer>)returnsLastArg;

/*!
 @brief Returns the second parameter of an invocation.
 <p>
      This additional answer could be used at stub time using the     
 <code>then|do|will<code>org.mockito.stubbing.Answer</code></code> methods. For example : 
 <pre class="code"><code class="java">
  given(trader.apply(leesFormula, onCreditDefaultSwap)).will(returnsSecondArg());
  doAnswer(returnsSecondArg()).when(trader).apply(leesFormula, onCreditDefaultSwap); 
 </code>
@endcode
  </p>
  
 <p>
  This methods works with varargs as well, mockito will expand the vararg to return the argument
  at the given position. Suppose the following signature : 
 <pre class="code"><code class="java">
  interface Person {
      Dream remember(Dream dream, Dream... otherDreams);
  }
  // returns dream2
  given(person.remember(dream1, dream2, dream3, dream4)).will(returnsSecondArg()); 
 </code>
@endcode
  Mockito will return the vararg array if the second argument is a vararg in the method
  and if the return type has the same type as the vararg array. 
 <pre class="code"><code class="java">
  interface Person {
      Dream[] remember(Dream dream1, Dream... otherDreams);
  }
  // returns otherDreams (happens to be a 3 elements array)
  given(person.remember(dream1, dream2, dream3, dream4)).will(returnsSecondArg()); 
 </code>
@endcode
  </p>
 @return Answer that will return the second argument of the invocation.
 @since 1.9.5
 */
+ (id<OrgMockitoStubbingAnswer>)returnsSecondArg;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoAdditionalAnswers)

FOUNDATION_EXPORT void OrgMockitoAdditionalAnswers_init(OrgMockitoAdditionalAnswers *self);

FOUNDATION_EXPORT OrgMockitoAdditionalAnswers *new_OrgMockitoAdditionalAnswers_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMockitoAdditionalAnswers *create_OrgMockitoAdditionalAnswers_init(void);

FOUNDATION_EXPORT id<OrgMockitoStubbingAnswer> OrgMockitoAdditionalAnswers_returnsFirstArg(void);

FOUNDATION_EXPORT id<OrgMockitoStubbingAnswer> OrgMockitoAdditionalAnswers_returnsSecondArg(void);

FOUNDATION_EXPORT id<OrgMockitoStubbingAnswer> OrgMockitoAdditionalAnswers_returnsLastArg(void);

FOUNDATION_EXPORT id<OrgMockitoStubbingAnswer> OrgMockitoAdditionalAnswers_returnsArgAtWithInt_(jint position);

FOUNDATION_EXPORT id<OrgMockitoStubbingAnswer> OrgMockitoAdditionalAnswers_delegatesToWithId_(id delegate);

FOUNDATION_EXPORT id<OrgMockitoStubbingAnswer> OrgMockitoAdditionalAnswers_returnsElementsOfWithJavaUtilCollection_(id<JavaUtilCollection> elements);

FOUNDATION_EXPORT id<OrgMockitoStubbingAnswer> OrgMockitoAdditionalAnswers_answersWithDelayWithLong_withOrgMockitoStubbingAnswer_(jlong sleepyTime, id<OrgMockitoStubbingAnswer> answer);

FOUNDATION_EXPORT id<OrgMockitoStubbingAnswer> OrgMockitoAdditionalAnswers_answerWithOrgMockitoStubbingAnswer1_(id<OrgMockitoStubbingAnswer1> answer);

FOUNDATION_EXPORT id<OrgMockitoStubbingAnswer> OrgMockitoAdditionalAnswers_answerVoidWithOrgMockitoStubbingVoidAnswer1_(id<OrgMockitoStubbingVoidAnswer1> answer);

FOUNDATION_EXPORT id<OrgMockitoStubbingAnswer> OrgMockitoAdditionalAnswers_answerWithOrgMockitoStubbingAnswer2_(id<OrgMockitoStubbingAnswer2> answer);

FOUNDATION_EXPORT id<OrgMockitoStubbingAnswer> OrgMockitoAdditionalAnswers_answerVoidWithOrgMockitoStubbingVoidAnswer2_(id<OrgMockitoStubbingVoidAnswer2> answer);

FOUNDATION_EXPORT id<OrgMockitoStubbingAnswer> OrgMockitoAdditionalAnswers_answerWithOrgMockitoStubbingAnswer3_(id<OrgMockitoStubbingAnswer3> answer);

FOUNDATION_EXPORT id<OrgMockitoStubbingAnswer> OrgMockitoAdditionalAnswers_answerVoidWithOrgMockitoStubbingVoidAnswer3_(id<OrgMockitoStubbingVoidAnswer3> answer);

FOUNDATION_EXPORT id<OrgMockitoStubbingAnswer> OrgMockitoAdditionalAnswers_answerWithOrgMockitoStubbingAnswer4_(id<OrgMockitoStubbingAnswer4> answer);

FOUNDATION_EXPORT id<OrgMockitoStubbingAnswer> OrgMockitoAdditionalAnswers_answerVoidWithOrgMockitoStubbingVoidAnswer4_(id<OrgMockitoStubbingVoidAnswer4> answer);

FOUNDATION_EXPORT id<OrgMockitoStubbingAnswer> OrgMockitoAdditionalAnswers_answerWithOrgMockitoStubbingAnswer5_(id<OrgMockitoStubbingAnswer5> answer);

FOUNDATION_EXPORT id<OrgMockitoStubbingAnswer> OrgMockitoAdditionalAnswers_answerVoidWithOrgMockitoStubbingVoidAnswer5_(id<OrgMockitoStubbingVoidAnswer5> answer);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoAdditionalAnswers)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgMockitoAdditionalAnswers")
