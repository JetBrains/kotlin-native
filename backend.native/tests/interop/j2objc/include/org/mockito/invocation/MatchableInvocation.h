//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/testing/mockito/build_result/java/org/mockito/invocation/MatchableInvocation.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoInvocationMatchableInvocation")
#ifdef RESTRICT_OrgMockitoInvocationMatchableInvocation
#define INCLUDE_ALL_OrgMockitoInvocationMatchableInvocation 0
#else
#define INCLUDE_ALL_OrgMockitoInvocationMatchableInvocation 1
#endif
#undef RESTRICT_OrgMockitoInvocationMatchableInvocation

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgMockitoInvocationMatchableInvocation_) && (INCLUDE_ALL_OrgMockitoInvocationMatchableInvocation || defined(INCLUDE_OrgMockitoInvocationMatchableInvocation))
#define OrgMockitoInvocationMatchableInvocation_

#define RESTRICT_OrgMockitoInvocationDescribedInvocation 1
#define INCLUDE_OrgMockitoInvocationDescribedInvocation 1
#include "org/mockito/invocation/DescribedInvocation.h"

@protocol JavaUtilList;
@protocol OrgMockitoInvocationInvocation;

/*!
 @brief <code>MatchableInvocation</code> wraps <code>Invocation</code> instance
  and holds argument matchers associated with that invocation.
 It is used during verification process: 
 <pre class="code"><code class="java">
    mock.foo();   // <- invocation
    verify(mock).bar();  // <- matchable invocation 
 </code>
@endcode
 @since 2.2.12
 */
@protocol OrgMockitoInvocationMatchableInvocation < OrgMockitoInvocationDescribedInvocation, JavaObject >

/*!
 @brief The actual invocation Mockito will match against.
 @since 2.2.12
 */
- (id<OrgMockitoInvocationInvocation>)getInvocation;

/*!
 @brief The argument matchers of this invocation.
 When the invocation is declared without argument matchers (e.g. using plain arguments)
  Mockito still converts them into <code>ArgumentMatcher</code> instances
  that use 'eq' matching via <code>org.mockito.Mockito.eq(Object)</code>.
 @since 2.2.12
 */
- (id<JavaUtilList>)getMatchers;

/*!
 @brief Same method, mock and all arguments match.
 @since 2.2.12
 */
- (jboolean)matchesWithOrgMockitoInvocationInvocation:(id<OrgMockitoInvocationInvocation>)candidate;

/*!
 @brief Candidate invocation has the similar method.
 'Similar' means the same method name, same mock, unverified, not overloaded, but not necessarily matching arguments
 @since 2.2.12
 */
- (jboolean)hasSimilarMethodWithOrgMockitoInvocationInvocation:(id<OrgMockitoInvocationInvocation>)candidate;

/*!
 @brief Returns true if the candidate invocation has the same method (method name and parameter types)
 @since 2.2.12
 */
- (jboolean)hasSameMethodWithOrgMockitoInvocationInvocation:(id<OrgMockitoInvocationInvocation>)candidate;

/*!
 @brief This method is used by Mockito to implement argument captor functionality (see <code>org.mockito.ArgumentCaptor</code>.
 <p>
  Makes this instance of matchable invocation capture all arguments of provided invocation.
 @param invocation the invocation to capture the arguments from
 @since 2.2.12
 */
- (void)captureArgumentsFromWithOrgMockitoInvocationInvocation:(id<OrgMockitoInvocationInvocation>)invocation;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoInvocationMatchableInvocation)

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoInvocationMatchableInvocation)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgMockitoInvocationMatchableInvocation")
