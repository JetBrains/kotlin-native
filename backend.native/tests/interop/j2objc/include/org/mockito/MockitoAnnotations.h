//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/testing/mockito/build_result/java/org/mockito/MockitoAnnotations.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoMockitoAnnotations")
#ifdef RESTRICT_OrgMockitoMockitoAnnotations
#define INCLUDE_ALL_OrgMockitoMockitoAnnotations 0
#else
#define INCLUDE_ALL_OrgMockitoMockitoAnnotations 1
#endif
#undef RESTRICT_OrgMockitoMockitoAnnotations

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgMockitoMockitoAnnotations_) && (INCLUDE_ALL_OrgMockitoMockitoAnnotations || defined(INCLUDE_OrgMockitoMockitoAnnotations))
#define OrgMockitoMockitoAnnotations_

/*!
 @brief MockitoAnnotations.initMocks(this); initializes fields annotated with Mockito annotations.
 See also <code>MockitoSession</code> which not only initializes mocks
  but also adds extra validation for cleaner tests! 
 <p>
  <ul>
  <li>Allows shorthand creation of objects required for testing.</li>
  <li>Minimizes repetitive mock creation code.</li>
  <li>Makes the test class more readable.</li>
  <li>Makes the verification error easier to read because <b>field name</b> is used to identify the mock.</li>
  </ul>
  
 <pre class="code"><code class="java">
    public class ArticleManagerTest extends SampleBaseTestCase {
        &#064;Mock private ArticleCalculator calculator;
        &#064;Mock private ArticleDatabase database;
        &#064;Mock private UserProvider userProvider;
        private ArticleManager manager;       
 &#064;Before public void setup() {
            manager = new ArticleManager(userProvider, database, calculator);
        }   }
    public class SampleBaseTestCase {
        &#064;Before public void initMocks() {
            MockitoAnnotations.initMocks(this);
        }   } 
 </code>
@endcode
  <p>
  Read also about other annotations &#064;<code>Spy</code>, &#064;<code>Captor</code>, &#064;<code>InjectMocks</code>
  <p>
  <b><code>MockitoAnnotations.initMocks(this)</code></b> method has to called to initialize annotated fields. 
 <p>
  In above example, <code>initMocks()</code> is called in &#064;Before (JUnit4) method of test's base class.
  For JUnit3 <code>initMocks()</code> can go to <code>setup()</code> method of a base class.
  You can also put initMocks() in your JUnit runner (&#064;RunWith) or use built-in runner: <code>MockitoJUnitRunner</code>
 */
@interface OrgMockitoMockitoAnnotations : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Initializes objects annotated with Mockito annotations for given testClass:
   &#064;<code>org.mockito.Mock</code>, &#064;<code>Spy</code>, &#064;<code>Captor</code>, &#064;<code>InjectMocks</code>
 <p>
  See examples in javadoc for <code>MockitoAnnotations</code> class.
 */
+ (void)initMocksWithId:(id)testClass OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoMockitoAnnotations)

FOUNDATION_EXPORT void OrgMockitoMockitoAnnotations_init(OrgMockitoMockitoAnnotations *self);

FOUNDATION_EXPORT OrgMockitoMockitoAnnotations *new_OrgMockitoMockitoAnnotations_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMockitoMockitoAnnotations *create_OrgMockitoMockitoAnnotations_init(void);

FOUNDATION_EXPORT void OrgMockitoMockitoAnnotations_initMocksWithId_(id testClass);

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoMockitoAnnotations)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgMockitoMockitoAnnotations")
