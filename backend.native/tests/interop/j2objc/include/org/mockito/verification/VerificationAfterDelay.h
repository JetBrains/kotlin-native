//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/testing/mockito/build_result/java/org/mockito/verification/VerificationAfterDelay.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMockitoVerificationVerificationAfterDelay")
#ifdef RESTRICT_OrgMockitoVerificationVerificationAfterDelay
#define INCLUDE_ALL_OrgMockitoVerificationVerificationAfterDelay 0
#else
#define INCLUDE_ALL_OrgMockitoVerificationVerificationAfterDelay 1
#endif
#undef RESTRICT_OrgMockitoVerificationVerificationAfterDelay

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgMockitoVerificationVerificationAfterDelay_) && (INCLUDE_ALL_OrgMockitoVerificationVerificationAfterDelay || defined(INCLUDE_OrgMockitoVerificationVerificationAfterDelay))
#define OrgMockitoVerificationVerificationAfterDelay_

#define RESTRICT_OrgMockitoVerificationVerificationMode 1
#define INCLUDE_OrgMockitoVerificationVerificationMode 1
#include "org/mockito/verification/VerificationMode.h"

/*!
 @brief VerificationAfterDelay is a <code>VerificationMode</code> that allows combining existing verification modes with an initial delay, e.g.
 <pre class="code"><code class="java">
  verify(mock, after(100).atMost(5)).foo();
  verify(mock, after(100).never()).bar();
  verify(mock, after(200).atLeastOnce()).baz(); 
 </code>
@endcode
  This is similar to <code>timeout()</code> except the assertion will not terminate until either the condition is
  definitively failed, or the full time has elapsed (whereas timeout() will also stop if the conditions is true at any point, as is
  typically the case with never() etc initially). 
 <p>
  See examples in javadoc for <code>Mockito.verify(Object, VerificationMode)</code>
 */
@protocol OrgMockitoVerificationVerificationAfterDelay < OrgMockitoVerificationVerificationMode, JavaObject >

/*!
 @brief Verifies that there are exactly N invocations during the given period.This will wait the full period given.
 */
- (id<OrgMockitoVerificationVerificationMode>)timesWithInt:(jint)wantedNumberOfInvocations;

/*!
 @brief Allows verification that there are no invocations at any point during the given period.This will wait the
  full period given, unless an invocation occurs (in which case there will be immediate failure)
 */
- (id<OrgMockitoVerificationVerificationMode>)never;

/*!
 @brief Verifies that there is at least 1 invocation during the given period.This will wait the full period given.
 */
- (id<OrgMockitoVerificationVerificationMode>)atLeastOnce;

/*!
 @brief Verifies that there is are least N invocations during the given period.This will wait the full period given.
 */
- (id<OrgMockitoVerificationVerificationMode>)atLeastWithInt:(jint)minNumberOfInvocations;

/*!
 @brief Verifies that there is are most N invocations during the given period.This will wait the full period given,
  unless too many invocations occur (in which case there will be an immediate failure)
 */
- (id<OrgMockitoVerificationVerificationMode>)atMostWithInt:(jint)maxNumberOfInvocations;

/*!
 @brief Verifies that there the given method is invoked and is the only method invoked.This will wait the full
  period given, unless another method is invoked (in which case there will be an immediate failure)
 */
- (id<OrgMockitoVerificationVerificationMode>)only;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMockitoVerificationVerificationAfterDelay)

J2OBJC_TYPE_LITERAL_HEADER(OrgMockitoVerificationVerificationAfterDelay)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgMockitoVerificationVerificationAfterDelay")
