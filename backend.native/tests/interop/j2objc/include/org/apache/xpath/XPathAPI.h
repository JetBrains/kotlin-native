//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xpath/XPathAPI.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXpathXPathAPI")
#ifdef RESTRICT_OrgApacheXpathXPathAPI
#define INCLUDE_ALL_OrgApacheXpathXPathAPI 0
#else
#define INCLUDE_ALL_OrgApacheXpathXPathAPI 1
#endif
#undef RESTRICT_OrgApacheXpathXPathAPI

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheXpathXPathAPI_) && (INCLUDE_ALL_OrgApacheXpathXPathAPI || defined(INCLUDE_OrgApacheXpathXPathAPI))
#define OrgApacheXpathXPathAPI_

@class OrgApacheXpathObjectsXObject;
@protocol OrgApacheXmlUtilsPrefixResolver;
@protocol OrgW3cDomNode;
@protocol OrgW3cDomNodeList;
@protocol OrgW3cDomTraversalNodeIterator;

/*!
 @brief The methods in this class are convenience methods into the
  low-level XPath API.
 These functions tend to be a little slow, since a number of objects must be
  created for each evaluation.  A faster way is to precompile the
  XPaths using the low-level API, and then just use the XPaths
  over and over.
  NOTE: In particular, each call to this method will create a new
  XPathContext, a new DTMManager... and thus a new DTM. That's very
  safe, since it guarantees that you're always processing against a
  fully up-to-date view of your document. But it's also portentially
  very expensive, since you're rebuilding the DTM every time. You should
  consider using an instance of CachedXPathAPI rather than these static
  methods.
 - seealso: <a href="http://www.w3.org/TR/xpath">XPath Specification</a>
 */
@interface OrgApacheXpathXPathAPI : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Evaluate XPath string to an XObject.Using this method,
   XPath namespace prefixes will be resolved from the namespaceNode.
 @param contextNode The node to start searching from.
 @param str A valid XPath string.
 @return An XObject, which can be used to obtain a string, number, nodelist, etc, should never be null.
 - seealso: org.apache.xpath.objects.XObject
 - seealso: org.apache.xpath.objects.XNull
 - seealso: org.apache.xpath.objects.XBoolean
 - seealso: org.apache.xpath.objects.XNumber
 - seealso: org.apache.xpath.objects.XString
 - seealso: org.apache.xpath.objects.XRTreeFrag
 @throw TransformerException
 */
+ (OrgApacheXpathObjectsXObject *)evalWithOrgW3cDomNode:(id<OrgW3cDomNode>)contextNode
                                           withNSString:(NSString *)str;

/*!
 @brief Evaluate XPath string to an XObject.
 XPath namespace prefixes are resolved from the namespaceNode.
   The implementation of this is a little slow, since it creates
   a number of objects each time it is called.  This could be optimized
   to keep the same objects around, but then thread-safety issues would arise.
 @param contextNode The node to start searching from.
 @param str A valid XPath string.
 @param namespaceNode The node from which prefixes in the XPath will be resolved to namespaces.
 @return An XObject, which can be used to obtain a string, number, nodelist, etc, should never be null.
 - seealso: org.apache.xpath.objects.XObject
 - seealso: org.apache.xpath.objects.XNull
 - seealso: org.apache.xpath.objects.XBoolean
 - seealso: org.apache.xpath.objects.XNumber
 - seealso: org.apache.xpath.objects.XString
 - seealso: org.apache.xpath.objects.XRTreeFrag
 @throw TransformerException
 */
+ (OrgApacheXpathObjectsXObject *)evalWithOrgW3cDomNode:(id<OrgW3cDomNode>)contextNode
                                           withNSString:(NSString *)str
                                      withOrgW3cDomNode:(id<OrgW3cDomNode>)namespaceNode;

/*!
 @brief Evaluate XPath string to an XObject.
 XPath namespace prefixes are resolved from the namespaceNode.
    The implementation of this is a little slow, since it creates
    a number of objects each time it is called.  This could be optimized
    to keep the same objects around, but then thread-safety issues would arise.
 @param contextNode The node to start searching from.
 @param str A valid XPath string.
 @param prefixResolver Will be called if the parser encounters namespace                          prefixes, to resolve the prefixes to URLs.
 @return An XObject, which can be used to obtain a string, number, nodelist, etc, should never be null.
 - seealso: org.apache.xpath.objects.XObject
 - seealso: org.apache.xpath.objects.XNull
 - seealso: org.apache.xpath.objects.XBoolean
 - seealso: org.apache.xpath.objects.XNumber
 - seealso: org.apache.xpath.objects.XString
 - seealso: org.apache.xpath.objects.XRTreeFrag
 @throw TransformerException
 */
+ (OrgApacheXpathObjectsXObject *)evalWithOrgW3cDomNode:(id<OrgW3cDomNode>)contextNode
                                           withNSString:(NSString *)str
                    withOrgApacheXmlUtilsPrefixResolver:(id<OrgApacheXmlUtilsPrefixResolver>)prefixResolver;

/*!
 @brief Use an XPath string to select a nodelist.
 XPath namespace prefixes are resolved from the contextNode.
 @param contextNode The node to start searching from.
 @param str A valid XPath string.
 @return A NodeIterator, should never be null.
 @throw TransformerException
 */
+ (id<OrgW3cDomTraversalNodeIterator>)selectNodeIteratorWithOrgW3cDomNode:(id<OrgW3cDomNode>)contextNode
                                                             withNSString:(NSString *)str;

/*!
 @brief Use an XPath string to select a nodelist.
 XPath namespace prefixes are resolved from the namespaceNode.
 @param contextNode The node to start searching from.
 @param str A valid XPath string.
 @param namespaceNode The node from which prefixes in the XPath will be resolved to namespaces.
 @return A NodeIterator, should never be null.
 @throw TransformerException
 */
+ (id<OrgW3cDomTraversalNodeIterator>)selectNodeIteratorWithOrgW3cDomNode:(id<OrgW3cDomNode>)contextNode
                                                             withNSString:(NSString *)str
                                                        withOrgW3cDomNode:(id<OrgW3cDomNode>)namespaceNode;

/*!
 @brief Use an XPath string to select a nodelist.
 XPath namespace prefixes are resolved from the contextNode.
 @param contextNode The node to start searching from.
 @param str A valid XPath string.
 @return A NodeIterator, should never be null.
 @throw TransformerException
 */
+ (id<OrgW3cDomNodeList>)selectNodeListWithOrgW3cDomNode:(id<OrgW3cDomNode>)contextNode
                                            withNSString:(NSString *)str;

/*!
 @brief Use an XPath string to select a nodelist.
 XPath namespace prefixes are resolved from the namespaceNode.
 @param contextNode The node to start searching from.
 @param str A valid XPath string.
 @param namespaceNode The node from which prefixes in the XPath will be resolved to namespaces.
 @return A NodeIterator, should never be null.
 @throw TransformerException
 */
+ (id<OrgW3cDomNodeList>)selectNodeListWithOrgW3cDomNode:(id<OrgW3cDomNode>)contextNode
                                            withNSString:(NSString *)str
                                       withOrgW3cDomNode:(id<OrgW3cDomNode>)namespaceNode;

/*!
 @brief Use an XPath string to select a single node.XPath namespace
  prefixes are resolved from the context node, which may not
  be what you want (see the next method).
 @param contextNode The node to start searching from.
 @param str A valid XPath string.
 @return The first node found that matches the XPath, or null.
 @throw TransformerException
 */
+ (id<OrgW3cDomNode>)selectSingleNodeWithOrgW3cDomNode:(id<OrgW3cDomNode>)contextNode
                                          withNSString:(NSString *)str;

/*!
 @brief Use an XPath string to select a single node.
 XPath namespace prefixes are resolved from the namespaceNode.
 @param contextNode The node to start searching from.
 @param str A valid XPath string.
 @param namespaceNode The node from which prefixes in the XPath will be resolved to namespaces.
 @return The first node found that matches the XPath, or null.
 @throw TransformerException
 */
+ (id<OrgW3cDomNode>)selectSingleNodeWithOrgW3cDomNode:(id<OrgW3cDomNode>)contextNode
                                          withNSString:(NSString *)str
                                     withOrgW3cDomNode:(id<OrgW3cDomNode>)namespaceNode;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXpathXPathAPI)

FOUNDATION_EXPORT void OrgApacheXpathXPathAPI_init(OrgApacheXpathXPathAPI *self);

FOUNDATION_EXPORT OrgApacheXpathXPathAPI *new_OrgApacheXpathXPathAPI_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXpathXPathAPI *create_OrgApacheXpathXPathAPI_init(void);

FOUNDATION_EXPORT id<OrgW3cDomNode> OrgApacheXpathXPathAPI_selectSingleNodeWithOrgW3cDomNode_withNSString_(id<OrgW3cDomNode> contextNode, NSString *str);

FOUNDATION_EXPORT id<OrgW3cDomNode> OrgApacheXpathXPathAPI_selectSingleNodeWithOrgW3cDomNode_withNSString_withOrgW3cDomNode_(id<OrgW3cDomNode> contextNode, NSString *str, id<OrgW3cDomNode> namespaceNode);

FOUNDATION_EXPORT id<OrgW3cDomTraversalNodeIterator> OrgApacheXpathXPathAPI_selectNodeIteratorWithOrgW3cDomNode_withNSString_(id<OrgW3cDomNode> contextNode, NSString *str);

FOUNDATION_EXPORT id<OrgW3cDomTraversalNodeIterator> OrgApacheXpathXPathAPI_selectNodeIteratorWithOrgW3cDomNode_withNSString_withOrgW3cDomNode_(id<OrgW3cDomNode> contextNode, NSString *str, id<OrgW3cDomNode> namespaceNode);

FOUNDATION_EXPORT id<OrgW3cDomNodeList> OrgApacheXpathXPathAPI_selectNodeListWithOrgW3cDomNode_withNSString_(id<OrgW3cDomNode> contextNode, NSString *str);

FOUNDATION_EXPORT id<OrgW3cDomNodeList> OrgApacheXpathXPathAPI_selectNodeListWithOrgW3cDomNode_withNSString_withOrgW3cDomNode_(id<OrgW3cDomNode> contextNode, NSString *str, id<OrgW3cDomNode> namespaceNode);

FOUNDATION_EXPORT OrgApacheXpathObjectsXObject *OrgApacheXpathXPathAPI_evalWithOrgW3cDomNode_withNSString_(id<OrgW3cDomNode> contextNode, NSString *str);

FOUNDATION_EXPORT OrgApacheXpathObjectsXObject *OrgApacheXpathXPathAPI_evalWithOrgW3cDomNode_withNSString_withOrgW3cDomNode_(id<OrgW3cDomNode> contextNode, NSString *str, id<OrgW3cDomNode> namespaceNode);

FOUNDATION_EXPORT OrgApacheXpathObjectsXObject *OrgApacheXpathXPathAPI_evalWithOrgW3cDomNode_withNSString_withOrgApacheXmlUtilsPrefixResolver_(id<OrgW3cDomNode> contextNode, NSString *str, id<OrgApacheXmlUtilsPrefixResolver> prefixResolver);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXpathXPathAPI)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgApacheXpathXPathAPI")
