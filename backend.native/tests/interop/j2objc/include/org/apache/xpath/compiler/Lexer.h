//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xpath/compiler/Lexer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXpathCompilerLexer")
#ifdef RESTRICT_OrgApacheXpathCompilerLexer
#define INCLUDE_ALL_OrgApacheXpathCompilerLexer 0
#else
#define INCLUDE_ALL_OrgApacheXpathCompilerLexer 1
#endif
#undef RESTRICT_OrgApacheXpathCompilerLexer

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheXpathCompilerLexer_) && (INCLUDE_ALL_OrgApacheXpathCompilerLexer || defined(INCLUDE_OrgApacheXpathCompilerLexer))
#define OrgApacheXpathCompilerLexer_

@class JavaUtilVector;
@class OrgApacheXpathCompilerCompiler;
@class OrgApacheXpathCompilerXPathParser;
@protocol OrgApacheXmlUtilsPrefixResolver;

/*!
 @brief This class is in charge of lexical processing of the XPath
  expression into tokens.
 */
@interface OrgApacheXpathCompilerLexer : NSObject {
 @public
  /*!
   @brief The prefix resolver to map prefixes to namespaces in the XPath.
   */
  id<OrgApacheXmlUtilsPrefixResolver> m_namespaceContext_;
  /*!
   @brief The XPath processor object.
   */
  OrgApacheXpathCompilerXPathParser *m_processor_;
}
@property (readonly, class) jint TARGETEXTRA NS_SWIFT_NAME(TARGETEXTRA);

+ (jint)TARGETEXTRA;

#pragma mark Package-Private

/*!
 @brief Create a Lexer object.
 @param compiler The owning compiler for this lexer.
 @param resolver The prefix resolver for mapping qualified name prefixes                   to namespace URIs.
 @param xpathProcessor The parser that is processing strings to opcodes.
 */
- (instancetype __nonnull)initPackagePrivateWithOrgApacheXpathCompilerCompiler:(OrgApacheXpathCompilerCompiler *)compiler
                                           withOrgApacheXmlUtilsPrefixResolver:(id<OrgApacheXmlUtilsPrefixResolver>)resolver
                                         withOrgApacheXpathCompilerXPathParser:(OrgApacheXpathCompilerXPathParser *)xpathProcessor;

/*!
 @brief Given a string, return the corresponding keyword token.
 @param key The keyword.
 @return An opcode value.
 */
- (jint)getKeywordTokenWithNSString:(NSString *)key;

/*!
 @brief Walk through the expression and build a token queue, and a map of the top-level
  elements.
 @param pat XSLT Expression.
 @throw javax.xml.transform.TransformerException
 */
- (void)tokenizeWithNSString:(NSString *)pat;

/*!
 @brief Walk through the expression and build a token queue, and a map of the top-level
  elements.
 @param pat XSLT Expression.
 @param targetStrings Vector to hold Strings, may be null.
 @throw javax.xml.transform.TransformerException
 */
- (void)tokenizeWithNSString:(NSString *)pat
          withJavaUtilVector:(JavaUtilVector *)targetStrings;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXpathCompilerLexer)

J2OBJC_FIELD_SETTER(OrgApacheXpathCompilerLexer, m_namespaceContext_, id<OrgApacheXmlUtilsPrefixResolver>)
J2OBJC_FIELD_SETTER(OrgApacheXpathCompilerLexer, m_processor_, OrgApacheXpathCompilerXPathParser *)

/*!
 @brief This value is added to each element name in the TARGETEXTRA
  that is a 'target' (right-most top-level element name).
 */
inline jint OrgApacheXpathCompilerLexer_get_TARGETEXTRA(void);
#define OrgApacheXpathCompilerLexer_TARGETEXTRA 10000
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathCompilerLexer, TARGETEXTRA, jint)

FOUNDATION_EXPORT void OrgApacheXpathCompilerLexer_initPackagePrivateWithOrgApacheXpathCompilerCompiler_withOrgApacheXmlUtilsPrefixResolver_withOrgApacheXpathCompilerXPathParser_(OrgApacheXpathCompilerLexer *self, OrgApacheXpathCompilerCompiler *compiler, id<OrgApacheXmlUtilsPrefixResolver> resolver, OrgApacheXpathCompilerXPathParser *xpathProcessor);

FOUNDATION_EXPORT OrgApacheXpathCompilerLexer *new_OrgApacheXpathCompilerLexer_initPackagePrivateWithOrgApacheXpathCompilerCompiler_withOrgApacheXmlUtilsPrefixResolver_withOrgApacheXpathCompilerXPathParser_(OrgApacheXpathCompilerCompiler *compiler, id<OrgApacheXmlUtilsPrefixResolver> resolver, OrgApacheXpathCompilerXPathParser *xpathProcessor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXpathCompilerLexer *create_OrgApacheXpathCompilerLexer_initPackagePrivateWithOrgApacheXpathCompilerCompiler_withOrgApacheXmlUtilsPrefixResolver_withOrgApacheXpathCompilerXPathParser_(OrgApacheXpathCompilerCompiler *compiler, id<OrgApacheXmlUtilsPrefixResolver> resolver, OrgApacheXpathCompilerXPathParser *xpathProcessor);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXpathCompilerLexer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgApacheXpathCompilerLexer")
