//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xpath/jaxp/XPathExpressionImpl.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXpathJaxpXPathExpressionImpl")
#ifdef RESTRICT_OrgApacheXpathJaxpXPathExpressionImpl
#define INCLUDE_ALL_OrgApacheXpathJaxpXPathExpressionImpl 0
#else
#define INCLUDE_ALL_OrgApacheXpathJaxpXPathExpressionImpl 1
#endif
#undef RESTRICT_OrgApacheXpathJaxpXPathExpressionImpl

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheXpathJaxpXPathExpressionImpl_) && (INCLUDE_ALL_OrgApacheXpathJaxpXPathExpressionImpl || defined(INCLUDE_OrgApacheXpathJaxpXPathExpressionImpl))
#define OrgApacheXpathJaxpXPathExpressionImpl_

#define RESTRICT_JavaxXmlXpathXPathExpression 1
#define INCLUDE_JavaxXmlXpathXPathExpression 1
#include "javax/xml/xpath/XPathExpression.h"

@class JavaxXmlNamespaceQName;
@class JavaxXmlParsersDocumentBuilder;
@class JavaxXmlParsersDocumentBuilderFactory;
@class OrgApacheXpathJaxpJAXPPrefixResolver;
@class OrgApacheXpathXPath;
@class OrgXmlSaxInputSource;
@protocol JavaxXmlXpathXPathFunctionResolver;
@protocol JavaxXmlXpathXPathVariableResolver;
@protocol OrgW3cDomDocument;

/*!
 @brief The XPathExpression interface encapsulates a (compiled) XPath expression.
 @version $Revision: 524813 $
 @author Ramesh Mandava
 */
@interface OrgApacheXpathJaxpXPathExpressionImpl : NSObject < JavaxXmlXpathXPathExpression >
@property (class, strong) JavaxXmlParsersDocumentBuilderFactory *dbf NS_SWIFT_NAME(dbf);
@property (class, strong) JavaxXmlParsersDocumentBuilder *db NS_SWIFT_NAME(db);
@property (class, strong) id<OrgW3cDomDocument> d NS_SWIFT_NAME(d);

+ (JavaxXmlParsersDocumentBuilderFactory *)dbf;

+ (void)setDbf:(JavaxXmlParsersDocumentBuilderFactory *)value;

+ (JavaxXmlParsersDocumentBuilder *)db;

+ (void)setDb:(JavaxXmlParsersDocumentBuilder *)value;

+ (id<OrgW3cDomDocument>)d;

+ (void)setD:(id<OrgW3cDomDocument>)value;

#pragma mark Public

- (id)evalWithId:(id)item
withJavaxXmlNamespaceQName:(JavaxXmlNamespaceQName *)returnType;

/*!
 @brief <p>Evaluate the compiled XPath expression in the context of the specified <code>InputSource</code> and return the result as a 
 <code>String</code>.
 </p>
  
 <p>This method calls <code>evaluate(InputSource source, QName returnType)</code> with a <code>returnType</code> of 
 <code>XPathConstants.STRING</code>.</p>
  
 <p>See "Evaluation of XPath Expressions" section of JAXP 1.3 spec
  for context item evaluation,
  variable, function and QName resolution and return type conversion.</p>
  
 <p>If <code>source</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown.</p>
 @param source The  <code> InputSource </code>  of the document to evaluate over.
 @return The <code>String</code> that is the result of evaluating the expression and converting the result to a
    <code>String</code>.
 @throw XPathExpressionExceptionIf the expression cannot be evaluated.
 @throw NullPointerExceptionIf  <code>source</code> is <code>null</code>.
 */
- (NSString *)evaluateWithOrgXmlSaxInputSource:(OrgXmlSaxInputSource *)source;

/*!
 @brief <p>Evaluate the compiled XPath expression in the context of the 
  specified <code>InputSource</code> and return the result as the
   specified type.
 </p>
  
 <p>This method builds a data model for the <code>InputSource</code> and calls 
 <code>evaluate(Object item, QName returnType)</code> on the resulting 
  document object.</p>
  
 <p>See "Evaluation of XPath Expressions" section of JAXP 1.3 spec
   for context item evaluation,
  variable, function and QName resolution and return type conversion.</p>
  
 <p>If <code>returnType</code> is not one of the types defined in  
 <code>XPathConstants</code>,
  then an <code>IllegalArgumentException</code> is thrown.</p>
 <p>If <code>source</code> or <code>returnType</code> is <code>null</code>,
  then a <code>NullPointerException</code> is thrown.</p>
 @param source The  <code> InputSource </code>  of the document to evaluate
   over.
 @param returnType The desired return type.
 @return The <code>Object</code> that is the result of evaluating the
  expression and converting the result to
    <code>returnType</code>.
 @throw XPathExpressionExceptionIf the expression cannot be evaluated.
 @throw IllegalArgumentExceptionIf <code>returnType</code> is not one
  of the types defined in <code>XPathConstants</code>.
 @throw NullPointerExceptionIf  <code>source</code> or  
 <code>returnType</code> is <code>null</code>.
 */
- (id)evaluateWithOrgXmlSaxInputSource:(OrgXmlSaxInputSource *)source
            withJavaxXmlNamespaceQName:(JavaxXmlNamespaceQName *)returnType;

/*!
 @brief <p>Evaluate the compiled XPath expression in the specified context and
  return the result as a <code>String</code>.
 </p>
  
 <p>This method calls <code>evaluate(Object item, QName returnType)</code>
  with a <code>returnType</code> of 
 <code>XPathConstants.STRING</code>.</p>
  
 <p>See "Evaluation of XPath Expressions" section of JAXP 1.3 spec
   for context item evaluation,
  variable, function and QName resolution and return type conversion.</p>
  
 <p>If a <code>null</code> value is provided for 
 <code>item</code>, an empty document will be used for the
  context.
 @param item The starting context (node or node list, for example).
 @return The <code>String</code> that is the result of evaluating the
  expression and converting the result to a
    <code>String</code>.
 @throw XPathExpressionExceptionIf the expression cannot be evaluated.
 */
- (NSString *)evaluateWithId:(id)item;

/*!
 @brief <p>Evaluate the compiled XPath expression in the specified context and
   return the result as the specified type.
 </p>
  
 <p>See "Evaluation of XPath Expressions" section of JAXP 1.3 spec
  for context item evaluation,
  variable, function and QName resolution and return type conversion.</p>
  
 <p>If <code>returnType</code> is not one of the types defined 
  in <code>XPathConstants</code>,
  then an <code>IllegalArgumentException</code> is thrown.</p>
  
 <p>If a <code>null</code> value is provided for 
 <code>item</code>, an empty document will be used for the
  context.
  If <code>returnType</code> is <code>null</code>, then a  
 <code>NullPointerException</code> is thrown.</p>
 @param item The starting context (node or node list, for example).
 @param returnType The desired return type.
 @return The <code>Object</code> that is the result of evaluating the
  expression and converting the result to
    <code>returnType</code>.
 @throw XPathExpressionExceptionIf the expression cannot be evaluated.
 @throw IllegalArgumentExceptionIf <code>returnType</code> is not one
  of the types defined in <code>XPathConstants</code>.
 @throw NullPointerExceptionIf  <code>returnType</code> is 
 <code>null</code>.
 */
- (id)evaluateWithId:(id)item
withJavaxXmlNamespaceQName:(JavaxXmlNamespaceQName *)returnType;

- (void)setXPathWithOrgApacheXpathXPath:(OrgApacheXpathXPath *)xpath;

#pragma mark Protected

/*!
 @brief Protected constructor to prevent direct instantiation; use compile()
  from the context.
 */
- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithOrgApacheXpathXPath:(OrgApacheXpathXPath *)xpath
             withOrgApacheXpathJaxpJAXPPrefixResolver:(OrgApacheXpathJaxpJAXPPrefixResolver *)prefixResolver
               withJavaxXmlXpathXPathFunctionResolver:(id<JavaxXmlXpathXPathFunctionResolver>)functionResolver
               withJavaxXmlXpathXPathVariableResolver:(id<JavaxXmlXpathXPathVariableResolver>)variableResolver;

- (instancetype __nonnull)initWithOrgApacheXpathXPath:(OrgApacheXpathXPath *)xpath
             withOrgApacheXpathJaxpJAXPPrefixResolver:(OrgApacheXpathJaxpJAXPPrefixResolver *)prefixResolver
               withJavaxXmlXpathXPathFunctionResolver:(id<JavaxXmlXpathXPathFunctionResolver>)functionResolver
               withJavaxXmlXpathXPathVariableResolver:(id<JavaxXmlXpathXPathVariableResolver>)variableResolver
                                          withBoolean:(jboolean)featureSecureProcessing;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXpathJaxpXPathExpressionImpl)

inline JavaxXmlParsersDocumentBuilderFactory *OrgApacheXpathJaxpXPathExpressionImpl_get_dbf(void);
inline JavaxXmlParsersDocumentBuilderFactory *OrgApacheXpathJaxpXPathExpressionImpl_set_dbf(JavaxXmlParsersDocumentBuilderFactory *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaxXmlParsersDocumentBuilderFactory *OrgApacheXpathJaxpXPathExpressionImpl_dbf;
J2OBJC_STATIC_FIELD_OBJ(OrgApacheXpathJaxpXPathExpressionImpl, dbf, JavaxXmlParsersDocumentBuilderFactory *)

inline JavaxXmlParsersDocumentBuilder *OrgApacheXpathJaxpXPathExpressionImpl_get_db(void);
inline JavaxXmlParsersDocumentBuilder *OrgApacheXpathJaxpXPathExpressionImpl_set_db(JavaxXmlParsersDocumentBuilder *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaxXmlParsersDocumentBuilder *OrgApacheXpathJaxpXPathExpressionImpl_db;
J2OBJC_STATIC_FIELD_OBJ(OrgApacheXpathJaxpXPathExpressionImpl, db, JavaxXmlParsersDocumentBuilder *)

inline id<OrgW3cDomDocument> OrgApacheXpathJaxpXPathExpressionImpl_get_d(void);
inline id<OrgW3cDomDocument> OrgApacheXpathJaxpXPathExpressionImpl_set_d(id<OrgW3cDomDocument> value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<OrgW3cDomDocument> OrgApacheXpathJaxpXPathExpressionImpl_d;
J2OBJC_STATIC_FIELD_OBJ(OrgApacheXpathJaxpXPathExpressionImpl, d, id<OrgW3cDomDocument>)

FOUNDATION_EXPORT void OrgApacheXpathJaxpXPathExpressionImpl_init(OrgApacheXpathJaxpXPathExpressionImpl *self);

FOUNDATION_EXPORT OrgApacheXpathJaxpXPathExpressionImpl *new_OrgApacheXpathJaxpXPathExpressionImpl_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXpathJaxpXPathExpressionImpl *create_OrgApacheXpathJaxpXPathExpressionImpl_init(void);

FOUNDATION_EXPORT void OrgApacheXpathJaxpXPathExpressionImpl_initWithOrgApacheXpathXPath_withOrgApacheXpathJaxpJAXPPrefixResolver_withJavaxXmlXpathXPathFunctionResolver_withJavaxXmlXpathXPathVariableResolver_(OrgApacheXpathJaxpXPathExpressionImpl *self, OrgApacheXpathXPath *xpath, OrgApacheXpathJaxpJAXPPrefixResolver *prefixResolver, id<JavaxXmlXpathXPathFunctionResolver> functionResolver, id<JavaxXmlXpathXPathVariableResolver> variableResolver);

FOUNDATION_EXPORT OrgApacheXpathJaxpXPathExpressionImpl *new_OrgApacheXpathJaxpXPathExpressionImpl_initWithOrgApacheXpathXPath_withOrgApacheXpathJaxpJAXPPrefixResolver_withJavaxXmlXpathXPathFunctionResolver_withJavaxXmlXpathXPathVariableResolver_(OrgApacheXpathXPath *xpath, OrgApacheXpathJaxpJAXPPrefixResolver *prefixResolver, id<JavaxXmlXpathXPathFunctionResolver> functionResolver, id<JavaxXmlXpathXPathVariableResolver> variableResolver) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXpathJaxpXPathExpressionImpl *create_OrgApacheXpathJaxpXPathExpressionImpl_initWithOrgApacheXpathXPath_withOrgApacheXpathJaxpJAXPPrefixResolver_withJavaxXmlXpathXPathFunctionResolver_withJavaxXmlXpathXPathVariableResolver_(OrgApacheXpathXPath *xpath, OrgApacheXpathJaxpJAXPPrefixResolver *prefixResolver, id<JavaxXmlXpathXPathFunctionResolver> functionResolver, id<JavaxXmlXpathXPathVariableResolver> variableResolver);

FOUNDATION_EXPORT void OrgApacheXpathJaxpXPathExpressionImpl_initWithOrgApacheXpathXPath_withOrgApacheXpathJaxpJAXPPrefixResolver_withJavaxXmlXpathXPathFunctionResolver_withJavaxXmlXpathXPathVariableResolver_withBoolean_(OrgApacheXpathJaxpXPathExpressionImpl *self, OrgApacheXpathXPath *xpath, OrgApacheXpathJaxpJAXPPrefixResolver *prefixResolver, id<JavaxXmlXpathXPathFunctionResolver> functionResolver, id<JavaxXmlXpathXPathVariableResolver> variableResolver, jboolean featureSecureProcessing);

FOUNDATION_EXPORT OrgApacheXpathJaxpXPathExpressionImpl *new_OrgApacheXpathJaxpXPathExpressionImpl_initWithOrgApacheXpathXPath_withOrgApacheXpathJaxpJAXPPrefixResolver_withJavaxXmlXpathXPathFunctionResolver_withJavaxXmlXpathXPathVariableResolver_withBoolean_(OrgApacheXpathXPath *xpath, OrgApacheXpathJaxpJAXPPrefixResolver *prefixResolver, id<JavaxXmlXpathXPathFunctionResolver> functionResolver, id<JavaxXmlXpathXPathVariableResolver> variableResolver, jboolean featureSecureProcessing) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXpathJaxpXPathExpressionImpl *create_OrgApacheXpathJaxpXPathExpressionImpl_initWithOrgApacheXpathXPath_withOrgApacheXpathJaxpJAXPPrefixResolver_withJavaxXmlXpathXPathFunctionResolver_withJavaxXmlXpathXPathVariableResolver_withBoolean_(OrgApacheXpathXPath *xpath, OrgApacheXpathJaxpJAXPPrefixResolver *prefixResolver, id<JavaxXmlXpathXPathFunctionResolver> functionResolver, id<JavaxXmlXpathXPathVariableResolver> variableResolver, jboolean featureSecureProcessing);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXpathJaxpXPathExpressionImpl)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgApacheXpathJaxpXPathExpressionImpl")
