//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xpath/operations/Variable.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXpathOperationsVariable")
#ifdef RESTRICT_OrgApacheXpathOperationsVariable
#define INCLUDE_ALL_OrgApacheXpathOperationsVariable 0
#else
#define INCLUDE_ALL_OrgApacheXpathOperationsVariable 1
#endif
#undef RESTRICT_OrgApacheXpathOperationsVariable

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheXpathOperationsVariable_) && (INCLUDE_ALL_OrgApacheXpathOperationsVariable || defined(INCLUDE_OrgApacheXpathOperationsVariable))
#define OrgApacheXpathOperationsVariable_

#define RESTRICT_OrgApacheXpathExpression 1
#define INCLUDE_OrgApacheXpathExpression 1
#include "org/apache/xpath/Expression.h"

#define RESTRICT_OrgApacheXpathAxesPathComponent 1
#define INCLUDE_OrgApacheXpathAxesPathComponent 1
#include "org/apache/xpath/axes/PathComponent.h"

@class JavaUtilVector;
@class OrgApacheXalanTemplatesElemVariable;
@class OrgApacheXmlUtilsQName;
@class OrgApacheXpathObjectsXObject;
@class OrgApacheXpathXPathContext;
@class OrgApacheXpathXPathVisitor;
@protocol OrgApacheXpathExpressionOwner;

/*!
 @brief The variable reference expression executer.
 */
@interface OrgApacheXpathOperationsVariable : OrgApacheXpathExpression < OrgApacheXpathAxesPathComponent > {
 @public
  /*!
   @brief The qualified name of the variable.
   */
  OrgApacheXmlUtilsQName *m_qname_;
  /*!
   @brief The index of the variable, which is either an absolute index to a 
  global, or, if higher than the globals area, must be adjusted by adding 
  the offset to the current stack frame.
   */
  jint m_index_;
  jboolean m_isGlobal_;
}
@property (readonly, class) jlong serialVersionUID NS_SWIFT_NAME(serialVersionUID);
@property (readonly, copy, class) NSString *PSUEDOVARNAMESPACE NS_SWIFT_NAME(PSUEDOVARNAMESPACE);

+ (jlong)serialVersionUID;

+ (NSString *)PSUEDOVARNAMESPACE;

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 - seealso: org.apache.xpath.XPathVisitable#callVisitors(ExpressionOwner, XPathVisitor)
 */
- (void)callVisitorsWithOrgApacheXpathExpressionOwner:(id<OrgApacheXpathExpressionOwner>)owner
                       withOrgApacheXpathXPathVisitor:(OrgApacheXpathXPathVisitor *)visitor;

/*!
 - seealso: Expression#deepEquals(Expression)
 */
- (jboolean)deepEqualsWithOrgApacheXpathExpression:(OrgApacheXpathExpression *)expr;

/*!
 @brief Execute an expression in the XPath runtime context, and return the
  result of the expression.
 @param xctxt The XPath runtime context.
 @return The result of the expression in the form of a <code>XObject</code>.
 @throw javax.xml.transform.TransformerExceptionif a runtime exception
          occurs.
 */
- (OrgApacheXpathObjectsXObject *)executeWithOrgApacheXpathXPathContext:(OrgApacheXpathXPathContext *)xctxt;

/*!
 @brief Dereference the variable, and return the reference value.Note that lazy 
  evaluation will occur.
 If a variable within scope is not found, a warning 
  will be sent to the error listener, and an empty nodeset will be returned.
 @param xctxt The runtime execution context.
 @return The evaluated variable, or an empty nodeset if not found.
 @throw javax.xml.transform.TransformerException
 */
- (OrgApacheXpathObjectsXObject *)executeWithOrgApacheXpathXPathContext:(OrgApacheXpathXPathContext *)xctxt
                                                            withBoolean:(jboolean)destructiveOK;

/*!
 @brief This function is used to fixup variables from QNames to stack frame 
  indexes at stylesheet build time.
 @param vars List of QNames that correspond to variables.  This list   should be searched backwards for the first qualified name that 
   corresponds to the variable reference qname.  The position of the 
   QName in the vector from the start of the vector will be its position 
   in the stack frame (but variables above the globalsTop value will need 
   to be offset to the current stack frame).
 */
- (void)fixupVariablesWithJavaUtilVector:(JavaUtilVector *)vars
                                 withInt:(jint)globalsSize;

/*!
 @brief Get the analysis bits for this walker, as defined in the WalkerFactory.
 @return One of WalkerFactory#BIT_DESCENDANT, etc.
 */
- (jint)getAnalysisBits;

/*!
 @brief Get the XSLT ElemVariable that this sub-expression references.In order for 
  this to work, the SourceLocator must be the owning ElemTemplateElement.
 @return The dereference to the ElemVariable, or null if not found.
 */
- (OrgApacheXalanTemplatesElemVariable *)getElemVariable;

/*!
 @brief Set the index for the variable into the stack.For advanced use only.
 @return true if this should be a global variable reference.
 */
- (jboolean)getGlobal;

/*!
 @brief Set the index for the variable into the stack.For advanced use only.
 @return index a global or local index.
 */
- (jint)getIndex;

/*!
 @brief Get the qualified name of the variable.
 @return A non-null reference to a qualified name.
 */
- (OrgApacheXmlUtilsQName *)getQName;

/*!
 @brief Tell if this is a psuedo variable reference, declared by Xalan instead 
  of by the user.
 */
- (jboolean)isPsuedoVarRef;

/*!
 @brief Tell if this expression returns a stable number that will not change during 
  iterations within the expression.This is used to determine if a proximity 
  position predicate can indicate that no more searching has to occur.
 @return true if the expression represents a stable number.
 */
- (jboolean)isStableNumber;

/*!
 @brief Set the index for the variable into the stack.For advanced use only.
 You 
  must know what you are doing to use this.
 @param index a global or local index.
 */
- (void)setIndexWithInt:(jint)index;

/*!
 @brief Set whether or not this is a global reference.For advanced use only.
 @param isGlobal true if this should be a global variable reference.
 */
- (void)setIsGlobalWithBoolean:(jboolean)isGlobal;

/*!
 @brief Set the qualified name of the variable.
 @param qname Must be a non-null reference to a qualified name.
 */
- (void)setQNameWithOrgApacheXmlUtilsQName:(OrgApacheXmlUtilsQName *)qname;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXpathOperationsVariable)

J2OBJC_FIELD_SETTER(OrgApacheXpathOperationsVariable, m_qname_, OrgApacheXmlUtilsQName *)

inline jlong OrgApacheXpathOperationsVariable_get_serialVersionUID(void);
#define OrgApacheXpathOperationsVariable_serialVersionUID -4334975375609297049LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathOperationsVariable, serialVersionUID, jlong)

inline NSString *OrgApacheXpathOperationsVariable_get_PSUEDOVARNAMESPACE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXpathOperationsVariable_PSUEDOVARNAMESPACE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXpathOperationsVariable, PSUEDOVARNAMESPACE, NSString *)

FOUNDATION_EXPORT void OrgApacheXpathOperationsVariable_init(OrgApacheXpathOperationsVariable *self);

FOUNDATION_EXPORT OrgApacheXpathOperationsVariable *new_OrgApacheXpathOperationsVariable_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXpathOperationsVariable *create_OrgApacheXpathOperationsVariable_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXpathOperationsVariable)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgApacheXpathOperationsVariable")
