//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xpath/CachedXPathAPI.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXpathCachedXPathAPI")
#ifdef RESTRICT_OrgApacheXpathCachedXPathAPI
#define INCLUDE_ALL_OrgApacheXpathCachedXPathAPI 0
#else
#define INCLUDE_ALL_OrgApacheXpathCachedXPathAPI 1
#endif
#undef RESTRICT_OrgApacheXpathCachedXPathAPI

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheXpathCachedXPathAPI_) && (INCLUDE_ALL_OrgApacheXpathCachedXPathAPI || defined(INCLUDE_OrgApacheXpathCachedXPathAPI))
#define OrgApacheXpathCachedXPathAPI_

@class OrgApacheXpathObjectsXObject;
@class OrgApacheXpathXPathContext;
@protocol OrgApacheXmlUtilsPrefixResolver;
@protocol OrgW3cDomNode;
@protocol OrgW3cDomNodeList;
@protocol OrgW3cDomTraversalNodeIterator;

/*!
 @brief The methods in this class are convenience methods into the
  low-level XPath API.
 These functions tend to be a little slow, since a number of objects must be
  created for each evaluation.  A faster way is to precompile the
  XPaths using the low-level API, and then just use the XPaths
  over and over.
  This is an alternative for the old XPathAPI class, which provided
  static methods for the purpose but had the drawback of
  instantiating a new XPathContext (and thus building a new DTMManager,
  and new DTMs) each time it was called. XPathAPIObject instead retains
  its context as long as the object persists, reusing the DTMs. This
  does have a downside: if you've changed your source document, you should
  obtain a new XPathAPIObject to continue searching it, since trying to use
  the old DTMs will probably yield bad results or malfunction outright... and
  the cached DTMs may consume memory until this object and its context are
  returned to the heap. Essentially, it's the caller's responsibility to
  decide when to discard the cache.
 - seealso: <a href="http://www.w3.org/TR/xpath">XPath Specification</a>
 */
@interface OrgApacheXpathCachedXPathAPI : NSObject {
 @public
  /*!
   @brief XPathContext, and thus the document model system (DTMs), persists through multiple
       calls to this object.This is set in the constructor.
   */
  OrgApacheXpathXPathContext *xpathSupport_;
}

#pragma mark Public

/*!
 @brief <p>Default constructor.
 Establishes its own <code>XPathContext</code>, and hence
  its own <code>org.apache.xml.dtm.DTMManager</code>.
  Good choice for simple uses.</p>
  <p>Note that any particular instance of <code>CachedXPathAPI</code> must not be
  operated upon by multiple threads without synchronization; we do
  not currently support multithreaded access to a single 
 <code>org.apache.xml.dtm.DTM</code>.</p>
 */
- (instancetype __nonnull)init;

/*!
 @brief <p>This constructor shares its <code>XPathContext</code> with a pre-existing 
 <code>CachedXPathAPI</code>.
 That allows sharing document models
  (<code>org.apache.xml.dtm.DTM</code>) and previously established location
  state.</p>
  <p>Note that the original <code>CachedXPathAPI</code> and the new one should
  not be operated upon concurrently; we do not support multithreaded access
  to a single <code>org.apache.xml.dtm.DTM</code> at this time.  Similarly,
  any particular instance of <code>CachedXPathAPI</code> must not be operated
  upon by multiple threads without synchronization.</p>
  <p>%REVIEW% Should this instead do a clone-and-reset on the XPathSupport object?</p>
 */
- (instancetype __nonnull)initWithOrgApacheXpathCachedXPathAPI:(OrgApacheXpathCachedXPathAPI *)priorXPathAPI;

/*!
 @brief Evaluate XPath string to an XObject.Using this method,
   XPath namespace prefixes will be resolved from the namespaceNode.
 @param contextNode The node to start searching from.
 @param str A valid XPath string.
 @return An XObject, which can be used to obtain a string, number, nodelist, etc, should never be null.
 - seealso: org.apache.xpath.objects.XObject
 - seealso: org.apache.xpath.objects.XNull
 - seealso: org.apache.xpath.objects.XBoolean
 - seealso: org.apache.xpath.objects.XNumber
 - seealso: org.apache.xpath.objects.XString
 - seealso: org.apache.xpath.objects.XRTreeFrag
 @throw TransformerException
 */
- (OrgApacheXpathObjectsXObject *)evalWithOrgW3cDomNode:(id<OrgW3cDomNode>)contextNode
                                           withNSString:(NSString *)str;

/*!
 @brief Evaluate XPath string to an XObject.
 XPath namespace prefixes are resolved from the namespaceNode.
   The implementation of this is a little slow, since it creates
   a number of objects each time it is called.  This could be optimized
   to keep the same objects around, but then thread-safety issues would arise.
 @param contextNode The node to start searching from.
 @param str A valid XPath string.
 @param namespaceNode The node from which prefixes in the XPath will be resolved to namespaces.
 @return An XObject, which can be used to obtain a string, number, nodelist, etc, should never be null.
 - seealso: org.apache.xpath.objects.XObject
 - seealso: org.apache.xpath.objects.XNull
 - seealso: org.apache.xpath.objects.XBoolean
 - seealso: org.apache.xpath.objects.XNumber
 - seealso: org.apache.xpath.objects.XString
 - seealso: org.apache.xpath.objects.XRTreeFrag
 @throw TransformerException
 */
- (OrgApacheXpathObjectsXObject *)evalWithOrgW3cDomNode:(id<OrgW3cDomNode>)contextNode
                                           withNSString:(NSString *)str
                                      withOrgW3cDomNode:(id<OrgW3cDomNode>)namespaceNode;

/*!
 @brief Evaluate XPath string to an XObject.
 XPath namespace prefixes are resolved from the namespaceNode.
    The implementation of this is a little slow, since it creates
    a number of objects each time it is called.  This could be optimized
    to keep the same objects around, but then thread-safety issues would arise.
 @param contextNode The node to start searching from.
 @param str A valid XPath string.
 @param prefixResolver Will be called if the parser encounters namespace                          prefixes, to resolve the prefixes to URLs.
 @return An XObject, which can be used to obtain a string, number, nodelist, etc, should never be null.
 - seealso: org.apache.xpath.objects.XObject
 - seealso: org.apache.xpath.objects.XNull
 - seealso: org.apache.xpath.objects.XBoolean
 - seealso: org.apache.xpath.objects.XNumber
 - seealso: org.apache.xpath.objects.XString
 - seealso: org.apache.xpath.objects.XRTreeFrag
 @throw TransformerException
 */
- (OrgApacheXpathObjectsXObject *)evalWithOrgW3cDomNode:(id<OrgW3cDomNode>)contextNode
                                           withNSString:(NSString *)str
                    withOrgApacheXmlUtilsPrefixResolver:(id<OrgApacheXmlUtilsPrefixResolver>)prefixResolver;

/*!
 @brief Returns the XPathSupport object used in this CachedXPathAPI
  %REVIEW% I'm somewhat concerned about the loss of encapsulation
  this causes, but the xml-security folks say they need it.
 */
- (OrgApacheXpathXPathContext *)getXPathContext;

/*!
 @brief Use an XPath string to select a nodelist.
 XPath namespace prefixes are resolved from the contextNode.
 @param contextNode The node to start searching from.
 @param str A valid XPath string.
 @return A NodeIterator, should never be null.
 @throw TransformerException
 */
- (id<OrgW3cDomTraversalNodeIterator>)selectNodeIteratorWithOrgW3cDomNode:(id<OrgW3cDomNode>)contextNode
                                                             withNSString:(NSString *)str;

/*!
 @brief Use an XPath string to select a nodelist.
 XPath namespace prefixes are resolved from the namespaceNode.
 @param contextNode The node to start searching from.
 @param str A valid XPath string.
 @param namespaceNode The node from which prefixes in the XPath will be resolved to namespaces.
 @return A NodeIterator, should never be null.
 @throw TransformerException
 */
- (id<OrgW3cDomTraversalNodeIterator>)selectNodeIteratorWithOrgW3cDomNode:(id<OrgW3cDomNode>)contextNode
                                                             withNSString:(NSString *)str
                                                        withOrgW3cDomNode:(id<OrgW3cDomNode>)namespaceNode;

/*!
 @brief Use an XPath string to select a nodelist.
 XPath namespace prefixes are resolved from the contextNode.
 @param contextNode The node to start searching from.
 @param str A valid XPath string.
 @return A NodeIterator, should never be null.
 @throw TransformerException
 */
- (id<OrgW3cDomNodeList>)selectNodeListWithOrgW3cDomNode:(id<OrgW3cDomNode>)contextNode
                                            withNSString:(NSString *)str;

/*!
 @brief Use an XPath string to select a nodelist.
 XPath namespace prefixes are resolved from the namespaceNode.
 @param contextNode The node to start searching from.
 @param str A valid XPath string.
 @param namespaceNode The node from which prefixes in the XPath will be resolved to namespaces.
 @return A NodeIterator, should never be null.
 @throw TransformerException
 */
- (id<OrgW3cDomNodeList>)selectNodeListWithOrgW3cDomNode:(id<OrgW3cDomNode>)contextNode
                                            withNSString:(NSString *)str
                                       withOrgW3cDomNode:(id<OrgW3cDomNode>)namespaceNode;

/*!
 @brief Use an XPath string to select a single node.XPath namespace
  prefixes are resolved from the context node, which may not
  be what you want (see the next method).
 @param contextNode The node to start searching from.
 @param str A valid XPath string.
 @return The first node found that matches the XPath, or null.
 @throw TransformerException
 */
- (id<OrgW3cDomNode>)selectSingleNodeWithOrgW3cDomNode:(id<OrgW3cDomNode>)contextNode
                                          withNSString:(NSString *)str;

/*!
 @brief Use an XPath string to select a single node.
 XPath namespace prefixes are resolved from the namespaceNode.
 @param contextNode The node to start searching from.
 @param str A valid XPath string.
 @param namespaceNode The node from which prefixes in the XPath will be resolved to namespaces.
 @return The first node found that matches the XPath, or null.
 @throw TransformerException
 */
- (id<OrgW3cDomNode>)selectSingleNodeWithOrgW3cDomNode:(id<OrgW3cDomNode>)contextNode
                                          withNSString:(NSString *)str
                                     withOrgW3cDomNode:(id<OrgW3cDomNode>)namespaceNode;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXpathCachedXPathAPI)

J2OBJC_FIELD_SETTER(OrgApacheXpathCachedXPathAPI, xpathSupport_, OrgApacheXpathXPathContext *)

FOUNDATION_EXPORT void OrgApacheXpathCachedXPathAPI_init(OrgApacheXpathCachedXPathAPI *self);

FOUNDATION_EXPORT OrgApacheXpathCachedXPathAPI *new_OrgApacheXpathCachedXPathAPI_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXpathCachedXPathAPI *create_OrgApacheXpathCachedXPathAPI_init(void);

FOUNDATION_EXPORT void OrgApacheXpathCachedXPathAPI_initWithOrgApacheXpathCachedXPathAPI_(OrgApacheXpathCachedXPathAPI *self, OrgApacheXpathCachedXPathAPI *priorXPathAPI);

FOUNDATION_EXPORT OrgApacheXpathCachedXPathAPI *new_OrgApacheXpathCachedXPathAPI_initWithOrgApacheXpathCachedXPathAPI_(OrgApacheXpathCachedXPathAPI *priorXPathAPI) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXpathCachedXPathAPI *create_OrgApacheXpathCachedXPathAPI_initWithOrgApacheXpathCachedXPathAPI_(OrgApacheXpathCachedXPathAPI *priorXPathAPI);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXpathCachedXPathAPI)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgApacheXpathCachedXPathAPI")
