//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xpath/functions/FuncExtFunction.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXpathFunctionsFuncExtFunction")
#ifdef RESTRICT_OrgApacheXpathFunctionsFuncExtFunction
#define INCLUDE_ALL_OrgApacheXpathFunctionsFuncExtFunction 0
#else
#define INCLUDE_ALL_OrgApacheXpathFunctionsFuncExtFunction 1
#endif
#undef RESTRICT_OrgApacheXpathFunctionsFuncExtFunction

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheXpathFunctionsFuncExtFunction_) && (INCLUDE_ALL_OrgApacheXpathFunctionsFuncExtFunction || defined(INCLUDE_OrgApacheXpathFunctionsFuncExtFunction))
#define OrgApacheXpathFunctionsFuncExtFunction_

#define RESTRICT_OrgApacheXpathFunctionsFunction 1
#define INCLUDE_OrgApacheXpathFunctionsFunction 1
#include "org/apache/xpath/functions/Function.h"

@class JavaUtilVector;
@class OrgApacheXpathExpression;
@class OrgApacheXpathObjectsXObject;
@class OrgApacheXpathXPathContext;
@class OrgApacheXpathXPathVisitor;
@protocol OrgApacheXpathExpressionNode;

/*!
 @brief An object of this class represents an extension call expression.When
  the expression executes, it calls ExtensionsTable#extFunction, and then
  converts the result to the appropriate XObject.
 */
@interface OrgApacheXpathFunctionsFuncExtFunction : OrgApacheXpathFunctionsFunction {
 @public
  /*!
   @brief The namespace for the extension function, which should not normally
   be null or empty.
   */
  NSString *m_namespace_;
  /*!
   @brief The local name of the extension.
   */
  NSString *m_extensionName_;
  /*!
   @brief Unique method key, which is passed to ExtensionsTable#extFunction in
   order to allow caching of the method.
   */
  id m_methodKey_;
  /*!
   @brief Array of static expressions which represent the parameters to the
   function.
   */
  JavaUtilVector *m_argVec_;
}
@property (readonly, class) jlong serialVersionUID NS_SWIFT_NAME(serialVersionUID);

+ (jlong)serialVersionUID;

#pragma mark Public

/*!
 @brief Create a new FuncExtFunction based on the qualified name of the extension,
  and a unique method key.
 @param namespace_ The namespace for the extension function, which should                   not normally be null or empty.
 @param extensionName The local name of the extension.
 @param methodKey Unique method key, which is passed to                   ExtensionsTable#extFunction in order to allow caching
                    of the method.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)namespace_
                              withNSString:(NSString *)extensionName
                                    withId:(id)methodKey;

/*!
 @brief Call the visitors for the function arguments.
 */
- (void)callArgVisitorsWithOrgApacheXpathXPathVisitor:(OrgApacheXpathXPathVisitor *)visitor;

/*!
 @brief Check that the number of arguments passed to this function is correct.
 @param argNum The number of arguments that is being passed to the function.
 @throw WrongNumberArgsException
 */
- (void)checkNumberArgsWithInt:(jint)argNum;

/*!
 @brief Execute the function.The function must return
  a valid object.
 @param xctxt The current execution context.
 @return A valid XObject.
 @throw javax.xml.transform.TransformerException
 */
- (OrgApacheXpathObjectsXObject *)executeWithOrgApacheXpathXPathContext:(OrgApacheXpathXPathContext *)xctxt;

/*!
 @brief Set the parent node.
 For an extension function, we also need to set the parent
  node for all argument expressions.
 @param n The parent node
 */
- (void)exprSetParentWithOrgApacheXpathExpressionNode:(id<OrgApacheXpathExpressionNode>)n;

/*!
 @brief This function is used to fixup variables from QNames to stack frame
  indexes at stylesheet build time.
 @param vars List of QNames that correspond to variables.  This list  should be searched backwards for the first qualified name that
   corresponds to the variable reference qname.  The position of the
   QName in the vector from the start of the vector will be its position
   in the stack frame (but variables above the globalsTop value will need
   to be offset to the current stack frame).
   NEEDSDOC @@param globalsSize
 */
- (void)fixupVariablesWithJavaUtilVector:(JavaUtilVector *)vars
                                 withInt:(jint)globalsSize;

/*!
 @brief Return the nth argument passed to the extension function.
 @param n The argument number index.
 @return The Expression object at the given index.
 */
- (OrgApacheXpathExpression *)getArgWithInt:(jint)n;

/*!
 @brief Return the number of arguments that were passed
  into this extension function.
 @return The number of arguments.
 */
- (jint)getArgCount;

/*!
 @brief Return the name of the extension function.
 @return The name of the extension function.
 */
- (NSString *)getFunctionName;

/*!
 @brief Return the method key of the extension function.
 @return The method key of the extension function.
 */
- (id)getMethodKey;

/*!
 @brief Return the namespace of the extension function.
 @return The namespace of the extension function.
 */
- (NSString *)getNamespace;

/*!
 @brief Set an argument expression for a function.This method is called by the
  XPath compiler.
 @param arg non-null expression that represents the argument.
 @param argNum The argument number index.
 @throw WrongNumberArgsExceptionIf the argNum parameter is beyond what
  is specified for this function.
 */
- (void)setArgWithOrgApacheXpathExpression:(OrgApacheXpathExpression *)arg
                                   withInt:(jint)argNum;

/*!
 @brief Return the name of the extesion function in string format
 */
- (NSString *)description;

#pragma mark Protected

/*!
 @brief Constructs and throws a WrongNumberArgException with the appropriate
  message for this function object.This class supports an arbitrary
  number of arguments, so this method must never be called.
 @throw WrongNumberArgsException
 */
- (void)reportWrongNumberArgs;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXpathFunctionsFuncExtFunction)

J2OBJC_FIELD_SETTER(OrgApacheXpathFunctionsFuncExtFunction, m_namespace_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheXpathFunctionsFuncExtFunction, m_extensionName_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheXpathFunctionsFuncExtFunction, m_methodKey_, id)
J2OBJC_FIELD_SETTER(OrgApacheXpathFunctionsFuncExtFunction, m_argVec_, JavaUtilVector *)

inline jlong OrgApacheXpathFunctionsFuncExtFunction_get_serialVersionUID(void);
#define OrgApacheXpathFunctionsFuncExtFunction_serialVersionUID 5196115554693708718LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathFunctionsFuncExtFunction, serialVersionUID, jlong)

FOUNDATION_EXPORT void OrgApacheXpathFunctionsFuncExtFunction_initWithNSString_withNSString_withId_(OrgApacheXpathFunctionsFuncExtFunction *self, NSString *namespace_, NSString *extensionName, id methodKey);

FOUNDATION_EXPORT OrgApacheXpathFunctionsFuncExtFunction *new_OrgApacheXpathFunctionsFuncExtFunction_initWithNSString_withNSString_withId_(NSString *namespace_, NSString *extensionName, id methodKey) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXpathFunctionsFuncExtFunction *create_OrgApacheXpathFunctionsFuncExtFunction_initWithNSString_withNSString_withId_(NSString *namespace_, NSString *extensionName, id methodKey);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXpathFunctionsFuncExtFunction)

#endif

#if !defined (OrgApacheXpathFunctionsFuncExtFunction_ArgExtOwner_) && (INCLUDE_ALL_OrgApacheXpathFunctionsFuncExtFunction || defined(INCLUDE_OrgApacheXpathFunctionsFuncExtFunction_ArgExtOwner))
#define OrgApacheXpathFunctionsFuncExtFunction_ArgExtOwner_

#define RESTRICT_OrgApacheXpathExpressionOwner 1
#define INCLUDE_OrgApacheXpathExpressionOwner 1
#include "org/apache/xpath/ExpressionOwner.h"

@class OrgApacheXpathExpression;
@class OrgApacheXpathFunctionsFuncExtFunction;

@interface OrgApacheXpathFunctionsFuncExtFunction_ArgExtOwner : NSObject < OrgApacheXpathExpressionOwner > {
 @public
  OrgApacheXpathExpression *m_exp_;
}

#pragma mark Public

/*!
 - seealso: ExpressionOwner#getExpression()
 */
- (OrgApacheXpathExpression *)getExpression;

/*!
 - seealso: ExpressionOwner#setExpression(Expression)
 */
- (void)setExpressionWithOrgApacheXpathExpression:(OrgApacheXpathExpression *)exp;

#pragma mark Package-Private

- (instancetype __nonnull)initWithOrgApacheXpathFunctionsFuncExtFunction:(OrgApacheXpathFunctionsFuncExtFunction *)outer$
                                            withOrgApacheXpathExpression:(OrgApacheXpathExpression *)exp;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXpathFunctionsFuncExtFunction_ArgExtOwner)

J2OBJC_FIELD_SETTER(OrgApacheXpathFunctionsFuncExtFunction_ArgExtOwner, m_exp_, OrgApacheXpathExpression *)

FOUNDATION_EXPORT void OrgApacheXpathFunctionsFuncExtFunction_ArgExtOwner_initWithOrgApacheXpathFunctionsFuncExtFunction_withOrgApacheXpathExpression_(OrgApacheXpathFunctionsFuncExtFunction_ArgExtOwner *self, OrgApacheXpathFunctionsFuncExtFunction *outer$, OrgApacheXpathExpression *exp);

FOUNDATION_EXPORT OrgApacheXpathFunctionsFuncExtFunction_ArgExtOwner *new_OrgApacheXpathFunctionsFuncExtFunction_ArgExtOwner_initWithOrgApacheXpathFunctionsFuncExtFunction_withOrgApacheXpathExpression_(OrgApacheXpathFunctionsFuncExtFunction *outer$, OrgApacheXpathExpression *exp) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXpathFunctionsFuncExtFunction_ArgExtOwner *create_OrgApacheXpathFunctionsFuncExtFunction_ArgExtOwner_initWithOrgApacheXpathFunctionsFuncExtFunction_withOrgApacheXpathExpression_(OrgApacheXpathFunctionsFuncExtFunction *outer$, OrgApacheXpathExpression *exp);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXpathFunctionsFuncExtFunction_ArgExtOwner)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgApacheXpathFunctionsFuncExtFunction")
