//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xpath/axes/WalkingIterator.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXpathAxesWalkingIterator")
#ifdef RESTRICT_OrgApacheXpathAxesWalkingIterator
#define INCLUDE_ALL_OrgApacheXpathAxesWalkingIterator 0
#else
#define INCLUDE_ALL_OrgApacheXpathAxesWalkingIterator 1
#endif
#undef RESTRICT_OrgApacheXpathAxesWalkingIterator

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheXpathAxesWalkingIterator_) && (INCLUDE_ALL_OrgApacheXpathAxesWalkingIterator || defined(INCLUDE_OrgApacheXpathAxesWalkingIterator))
#define OrgApacheXpathAxesWalkingIterator_

#define RESTRICT_OrgApacheXpathAxesLocPathIterator 1
#define INCLUDE_OrgApacheXpathAxesLocPathIterator 1
#include "org/apache/xpath/axes/LocPathIterator.h"

#define RESTRICT_OrgApacheXpathExpressionOwner 1
#define INCLUDE_OrgApacheXpathExpressionOwner 1
#include "org/apache/xpath/ExpressionOwner.h"

@class JavaUtilVector;
@class OrgApacheXpathAxesAxesWalker;
@class OrgApacheXpathCompilerCompiler;
@class OrgApacheXpathExpression;
@class OrgApacheXpathXPathVisitor;
@protocol OrgApacheXmlUtilsPrefixResolver;

/*!
 @brief Location path iterator that uses Walkers.
 */
@interface OrgApacheXpathAxesWalkingIterator : OrgApacheXpathAxesLocPathIterator < OrgApacheXpathExpressionOwner > {
 @public
  /*!
   @brief The last used step walker in the walker list.
   */
  OrgApacheXpathAxesAxesWalker *m_lastUsedWalker_;
  /*!
   @brief The head of the step walker list.
   */
  OrgApacheXpathAxesAxesWalker *m_firstWalker_;
}
@property (readonly, class) jlong serialVersionUID NS_SWIFT_NAME(serialVersionUID);

+ (jlong)serialVersionUID;

#pragma mark Public

/*!
 @brief Create a WalkingIterator object.
 @param nscontext The namespace context for this iterator,  should be OK if null.
 */
- (instancetype __nonnull)initWithOrgApacheXmlUtilsPrefixResolver:(id<OrgApacheXmlUtilsPrefixResolver>)nscontext;

/*!
 - seealso: org.apache.xpath.XPathVisitable#callVisitors(ExpressionOwner, XPathVisitor)
 */
- (void)callVisitorsWithOrgApacheXpathExpressionOwner:(id<OrgApacheXpathExpressionOwner>)owner
                       withOrgApacheXpathXPathVisitor:(OrgApacheXpathXPathVisitor *)visitor;

/*!
 @brief Get a cloned WalkingIterator that holds the same
  position as this iterator.
 @return A clone of this iterator that holds the same node position.
 @throw CloneNotSupportedException
 */
- (id)java_clone;

/*!
 - seealso: Expression#deepEquals(Expression)
 */
- (jboolean)deepEqualsWithOrgApacheXpathExpression:(OrgApacheXpathExpression *)expr;

/*!
 @brief Detaches the iterator from the set which it iterated over, releasing
  any computational resources and placing the iterator in the INVALID
  state.After<code>detach</code> has been invoked, calls to 
 <code>nextNode</code> or<code>previousNode</code> will raise the
  exception INVALID_STATE_ERR.
 */
- (void)detach;

/*!
 @brief This function is used to fixup variables from QNames to stack frame 
  indexes at stylesheet build time.
 @param vars List of QNames that correspond to variables.  This list   should be searched backwards for the first qualified name that 
   corresponds to the variable reference qname.  The position of the 
   QName in the vector from the start of the vector will be its position 
   in the stack frame (but variables above the globalsTop value will need 
   to be offset to the current stack frame).
 */
- (void)fixupVariablesWithJavaUtilVector:(JavaUtilVector *)vars
                                 withInt:(jint)globalsSize;

/*!
 @brief Get the analysis bits for this walker, as defined in the WalkerFactory.
 @return One of WalkerFactory#BIT_DESCENDANT, etc.
 */
- (jint)getAnalysisBits;

/*!
 - seealso: ExpressionOwner#getExpression()
 */
- (OrgApacheXpathExpression *)getExpression;

/*!
 @brief Get the head of the walker list.
 @return The head of the walker list, or null
  if this iterator does not implement walkers.
 */
- (OrgApacheXpathAxesAxesWalker *)getFirstWalker;

/*!
 @brief Get the last used walker.
 @return The last used walker, or null.
 */
- (OrgApacheXpathAxesAxesWalker *)getLastUsedWalker;

/*!
 @brief Returns the next node in the set and advances the position of the
  iterator in the set.After a NodeIterator is created, the first call
  to nextNode() returns the first node in the set.
 @return The next <code>Node</code> in the set being iterated over, or
    <code>null</code> if there are no more members in that set.
 */
- (jint)nextNode;

/*!
 @brief Reset the iterator.
 */
- (void)reset;

/*!
 - seealso: ExpressionOwner#setExpression(Expression)
 */
- (void)setExpressionWithOrgApacheXpathExpression:(OrgApacheXpathExpression *)exp;

/*!
 @brief Set the head of the walker list.
 @param walker Should be a valid AxesWalker.
 */
- (void)setFirstWalkerWithOrgApacheXpathAxesAxesWalker:(OrgApacheXpathAxesAxesWalker *)walker;

/*!
 @brief Set the last used walker.
 @param walker The last used walker, or null.
 */
- (void)setLastUsedWalkerWithOrgApacheXpathAxesAxesWalker:(OrgApacheXpathAxesAxesWalker *)walker;

/*!
 @brief Initialize the context values for this expression
  after it is cloned.
 @param context The XPath runtime context for this  transformation.
 */
- (void)setRootWithInt:(jint)context
                withId:(id)environment;

#pragma mark Package-Private

/*!
 @brief Create a WalkingIterator iterator, including creation
  of step walkers from the opcode list, and call back
  into the Compiler to create predicate expressions.
 @param compiler The Compiler which is creating  this expression.
 @param opPos The position of this iterator in the  opcode list from the compiler.
 @param shouldLoadWalkers True if walkers should be  loaded, or false if this is a derived iterator and
   it doesn't wish to load child walkers.
 @throw javax.xml.transform.TransformerException
 */
- (instancetype __nonnull)initWithOrgApacheXpathCompilerCompiler:(OrgApacheXpathCompilerCompiler *)compiler
                                                         withInt:(jint)opPos
                                                         withInt:(jint)analysis
                                                     withBoolean:(jboolean)shouldLoadWalkers;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithOrgApacheXpathCompilerCompiler:(OrgApacheXpathCompilerCompiler *)arg0
                                                         withInt:(jint)arg1
                                                         withInt:(jint)arg2 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXpathAxesWalkingIterator)

J2OBJC_FIELD_SETTER(OrgApacheXpathAxesWalkingIterator, m_lastUsedWalker_, OrgApacheXpathAxesAxesWalker *)
J2OBJC_FIELD_SETTER(OrgApacheXpathAxesWalkingIterator, m_firstWalker_, OrgApacheXpathAxesAxesWalker *)

inline jlong OrgApacheXpathAxesWalkingIterator_get_serialVersionUID(void);
#define OrgApacheXpathAxesWalkingIterator_serialVersionUID 9110225941815665906LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXpathAxesWalkingIterator, serialVersionUID, jlong)

FOUNDATION_EXPORT void OrgApacheXpathAxesWalkingIterator_initWithOrgApacheXpathCompilerCompiler_withInt_withInt_withBoolean_(OrgApacheXpathAxesWalkingIterator *self, OrgApacheXpathCompilerCompiler *compiler, jint opPos, jint analysis, jboolean shouldLoadWalkers);

FOUNDATION_EXPORT OrgApacheXpathAxesWalkingIterator *new_OrgApacheXpathAxesWalkingIterator_initWithOrgApacheXpathCompilerCompiler_withInt_withInt_withBoolean_(OrgApacheXpathCompilerCompiler *compiler, jint opPos, jint analysis, jboolean shouldLoadWalkers) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXpathAxesWalkingIterator *create_OrgApacheXpathAxesWalkingIterator_initWithOrgApacheXpathCompilerCompiler_withInt_withInt_withBoolean_(OrgApacheXpathCompilerCompiler *compiler, jint opPos, jint analysis, jboolean shouldLoadWalkers);

FOUNDATION_EXPORT void OrgApacheXpathAxesWalkingIterator_initWithOrgApacheXmlUtilsPrefixResolver_(OrgApacheXpathAxesWalkingIterator *self, id<OrgApacheXmlUtilsPrefixResolver> nscontext);

FOUNDATION_EXPORT OrgApacheXpathAxesWalkingIterator *new_OrgApacheXpathAxesWalkingIterator_initWithOrgApacheXmlUtilsPrefixResolver_(id<OrgApacheXmlUtilsPrefixResolver> nscontext) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXpathAxesWalkingIterator *create_OrgApacheXpathAxesWalkingIterator_initWithOrgApacheXmlUtilsPrefixResolver_(id<OrgApacheXmlUtilsPrefixResolver> nscontext);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXpathAxesWalkingIterator)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgApacheXpathAxesWalkingIterator")
