//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xalan/processor/XSLTAttributeDef.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXalanProcessorXSLTAttributeDef")
#ifdef RESTRICT_OrgApacheXalanProcessorXSLTAttributeDef
#define INCLUDE_ALL_OrgApacheXalanProcessorXSLTAttributeDef 0
#else
#define INCLUDE_ALL_OrgApacheXalanProcessorXSLTAttributeDef 1
#endif
#undef RESTRICT_OrgApacheXalanProcessorXSLTAttributeDef

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheXalanProcessorXSLTAttributeDef_) && (INCLUDE_ALL_OrgApacheXalanProcessorXSLTAttributeDef || defined(INCLUDE_OrgApacheXalanProcessorXSLTAttributeDef))
#define OrgApacheXalanProcessorXSLTAttributeDef_

@class JavaUtilVector;
@class OrgApacheXalanProcessorStylesheetHandler;
@class OrgApacheXalanTemplatesAVT;
@class OrgApacheXalanTemplatesElemTemplateElement;
@class OrgApacheXmlUtilsStringVector;

/*!
 @brief This class defines an attribute for an element in a XSLT stylesheet,
  is meant to reflect the structure defined in http://www.w3.org/TR/xslt#dtd, and the
  mapping between Xalan classes and the markup attributes in the element.
 */
@interface OrgApacheXalanProcessorXSLTAttributeDef : NSObject {
 @public
  jint m_errorType_;
  /*!
   @brief String that should represent the setter method which which
  may be used on objects to set a value that represents this attribute
   */
  NSString *m_setterString_;
}
@property (readonly, class) jint FATAL NS_SWIFT_NAME(FATAL);
@property (readonly, class) jint ERROR NS_SWIFT_NAME(ERROR);
@property (readonly, class) jint WARNING NS_SWIFT_NAME(WARNING);
@property (readonly, class) jint T_CDATA NS_SWIFT_NAME(T_CDATA);
@property (readonly, class) jint T_URL NS_SWIFT_NAME(T_URL);
@property (readonly, class) jint T_AVT NS_SWIFT_NAME(T_AVT);
@property (readonly, class) jint T_PATTERN NS_SWIFT_NAME(T_PATTERN);
@property (readonly, class) jint T_EXPR NS_SWIFT_NAME(T_EXPR);
@property (readonly, class) jint T_CHAR NS_SWIFT_NAME(T_CHAR);
@property (readonly, class) jint T_NUMBER NS_SWIFT_NAME(T_NUMBER);
@property (readonly, class) jint T_YESNO NS_SWIFT_NAME(T_YESNO);
@property (readonly, class) jint T_QNAME NS_SWIFT_NAME(T_QNAME);
@property (readonly, class) jint T_QNAMES NS_SWIFT_NAME(T_QNAMES);
@property (readonly, class) jint T_ENUM NS_SWIFT_NAME(T_ENUM);
@property (readonly, class) jint T_SIMPLEPATTERNLIST NS_SWIFT_NAME(T_SIMPLEPATTERNLIST);
@property (readonly, class) jint T_NMTOKEN NS_SWIFT_NAME(T_NMTOKEN);
@property (readonly, class) jint T_STRINGLIST NS_SWIFT_NAME(T_STRINGLIST);
@property (readonly, class) jint T_PREFIX_URLLIST NS_SWIFT_NAME(T_PREFIX_URLLIST);
@property (readonly, class) jint T_ENUM_OR_PQNAME NS_SWIFT_NAME(T_ENUM_OR_PQNAME);
@property (readonly, class) jint T_NCNAME NS_SWIFT_NAME(T_NCNAME);
@property (readonly, class) jint T_AVT_QNAME NS_SWIFT_NAME(T_AVT_QNAME);
@property (readonly, class) jint T_QNAMES_RESOLVE_NULL NS_SWIFT_NAME(T_QNAMES_RESOLVE_NULL);
@property (readonly, class) jint T_PREFIXLIST NS_SWIFT_NAME(T_PREFIXLIST);
@property (readonly, class, strong) OrgApacheXalanProcessorXSLTAttributeDef *m_foreignAttr NS_SWIFT_NAME(m_foreignAttr);
@property (readonly, copy, class) NSString *S_FOREIGNATTR_SETTER NS_SWIFT_NAME(S_FOREIGNATTR_SETTER);

+ (jint)FATAL;

+ (jint)ERROR;

+ (jint)WARNING;

+ (jint)T_CDATA;

+ (jint)T_URL;

+ (jint)T_AVT;

+ (jint)T_PATTERN;

+ (jint)T_EXPR;

+ (jint)T_CHAR;

+ (jint)T_NUMBER;

+ (jint)T_YESNO;

+ (jint)T_QNAME;

+ (jint)T_QNAMES;

+ (jint)T_ENUM;

+ (jint)T_SIMPLEPATTERNLIST;

+ (jint)T_NMTOKEN;

+ (jint)T_STRINGLIST;

+ (jint)T_PREFIX_URLLIST;

+ (jint)T_ENUM_OR_PQNAME;

+ (jint)T_NCNAME;

+ (jint)T_AVT_QNAME;

+ (jint)T_QNAMES_RESOLVE_NULL;

+ (jint)T_PREFIXLIST;

+ (OrgApacheXalanProcessorXSLTAttributeDef *)m_foreignAttr;

+ (NSString *)S_FOREIGNATTR_SETTER;

#pragma mark Public

/*!
 @brief Return a string that should represent the setter method.
 The setter method name will be created algorithmically the
  first time this method is accessed, and then cached for return
  by subsequent invocations of this method.
 @return String that should represent the setter method which which
  may be used on objects to set a value that represents this attribute,
  of null if no setter method should be called.
 */
- (NSString *)getSetterMethodName;

#pragma mark Package-Private

/*!
 @brief Construct an instance of XSLTAttributeDef that uses two
  enumerated values.
 @param namespace_ The Namespace URI, or an empty string.
 @param name The local name (without prefix), or empty string if not namespace processing.
 @param required true if this attribute is required by the XSLT specification.
 @param supportsAVT true if this attribute supports AVT's.
 @param prefixedQNameValAllowed If true, the type is T_ENUM_OR_PQNAME
 @param errorType the type of error to issue if validation fails.  One of FATAL, ERROR, WARNING.
 @param k1 The XSLT name of the enumerated value.
 @param v1 An integer representation of k1.
 @param k2 The XSLT name of the enumerated value.
 @param v2 An integer representation of k2.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)namespace_
                              withNSString:(NSString *)name
                               withBoolean:(jboolean)required
                               withBoolean:(jboolean)supportsAVT
                               withBoolean:(jboolean)prefixedQNameValAllowed
                                   withInt:(jint)errorType
                              withNSString:(NSString *)k1
                                   withInt:(jint)v1
                              withNSString:(NSString *)k2
                                   withInt:(jint)v2;

/*!
 @brief Construct an instance of XSLTAttributeDef that uses three
  enumerated values.
 @param namespace_ The Namespace URI, or an empty string.
 @param name The local name (without prefix), or empty string if not namespace processing.
 @param required true if this attribute is required by the XSLT specification.
 @param supportsAVT true if this attribute supports AVT's.
 @param prefixedQNameValAllowed If true, the type is T_ENUM_OR_PQNAME
 @param errorType the type of error to issue if validation fails.  One of FATAL, ERROR, WARNING.    *
 @param k1 The XSLT name of the enumerated value.
 @param v1 An integer representation of k1.
 @param k2 The XSLT name of the enumerated value.
 @param v2 An integer representation of k2.
 @param k3 The XSLT name of the enumerated value.
 @param v3 An integer representation of k3.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)namespace_
                              withNSString:(NSString *)name
                               withBoolean:(jboolean)required
                               withBoolean:(jboolean)supportsAVT
                               withBoolean:(jboolean)prefixedQNameValAllowed
                                   withInt:(jint)errorType
                              withNSString:(NSString *)k1
                                   withInt:(jint)v1
                              withNSString:(NSString *)k2
                                   withInt:(jint)v2
                              withNSString:(NSString *)k3
                                   withInt:(jint)v3;

/*!
 @brief Construct an instance of XSLTAttributeDef that uses three
  enumerated values.
 @param namespace_ The Namespace URI, or an empty string.
 @param name The local name (without prefix), or empty string if not namespace processing.
 @param required true if this attribute is required by the XSLT specification.
 @param supportsAVT true if this attribute supports AVT's.
 @param prefixedQNameValAllowed If true, the type is T_ENUM_OR_PQNAME
 @param errorType the type of error to issue if validation fails.  One of FATAL, ERROR, WARNING.    * @@param k1 The XSLT name of the enumerated value.
 @param v1 An integer representation of k1.
 @param k2 The XSLT name of the enumerated value.
 @param v2 An integer representation of k2.
 @param k3 The XSLT name of the enumerated value.
 @param v3 An integer representation of k3.
 @param k4 The XSLT name of the enumerated value.
 @param v4 An integer representation of k4.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)namespace_
                              withNSString:(NSString *)name
                               withBoolean:(jboolean)required
                               withBoolean:(jboolean)supportsAVT
                               withBoolean:(jboolean)prefixedQNameValAllowed
                                   withInt:(jint)errorType
                              withNSString:(NSString *)k1
                                   withInt:(jint)v1
                              withNSString:(NSString *)k2
                                   withInt:(jint)v2
                              withNSString:(NSString *)k3
                                   withInt:(jint)v3
                              withNSString:(NSString *)k4
                                   withInt:(jint)v4;

/*!
 @brief Construct an instance of XSLTAttributeDef.
 @param namespace_ The Namespace URI, or an empty string.
 @param name The local name (without prefix), or empty string if not namespace processing.
 @param type One of T_CDATA, T_URL, T_AVT, T_PATTERN, T_EXPR, T_CHAR,  T_NUMBER, T_YESNO, T_QNAME, T_QNAMES, T_ENUM, T_SIMPLEPATTERNLIST,
   T_NMTOKEN, T_STRINGLIST, T_PREFIX_URLLIST, T_ENUM_OR_PQNAME, T_NCNAME.
 @param required true if this is attribute is required by the XSLT specification.
 @param supportsAVT true if this attribute supports AVT's.
 @param errorType the type of error to issue if validation fails.  One of FATAL, ERROR, WARNING.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)namespace_
                              withNSString:(NSString *)name
                                   withInt:(jint)type
                               withBoolean:(jboolean)required
                               withBoolean:(jboolean)supportsAVT
                                   withInt:(jint)errorType;

/*!
 @brief Construct an instance of XSLTAttributeDef.
 @param namespace_ The Namespace URI, or an empty string.
 @param name The local name (without prefix), or empty string if not namespace processing.
 @param type One of T_CDATA, T_URL, T_AVT, T_PATTERN, T_EXPR,  T_CHAR, T_NUMBER, T_YESNO, T_QNAME, T_QNAMES, T_ENUM,
   T_SIMPLEPATTERNLIST, T_NMTOKEN, T_STRINGLIST, T_PREFIX_URLLIST, 
   T_ENUM_OR_PQNAME, T_NCNAME.
 @param supportsAVT true if this attribute supports AVT's.
 @param errorType the type of error to issue if validation fails.  One of FATAL, ERROR, WARNING.
 @param defaultVal The default value for this attribute.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)namespace_
                              withNSString:(NSString *)name
                                   withInt:(jint)type
                               withBoolean:(jboolean)supportsAVT
                                   withInt:(jint)errorType
                              withNSString:(NSString *)defaultVal;

/*!
 @brief Get the default value for this attribute.
 @return The default value for this attribute, or null.
 */
- (NSString *)getDefault;

/*!
 @brief Get the type of error message to use if the attribute value is invalid.
 @return one of XSLAttributeDef.FATAL, XSLAttributeDef.ERROR, XSLAttributeDef.WARNING
 */
- (jint)getErrorType;

/*!
 @brief Get the name of this attribute.
 @return non-null reference to the name of this attribute, which may be "*".
 */
- (NSString *)getName;

/*!
 @brief Get the allowed namespace for this attribute.
 @return The allowed namespace for this attribute, which may be null, or may be "*".
 */
- (NSString *)getNamespace;

/*!
 @brief Get whether or not this is a required attribute.
 @return true if this is a required attribute.
 */
- (jboolean)getRequired;

/*!
 @brief Get whether or not this attribute supports AVT's.
 @return true if this attribute supports AVT's.
 */
- (jboolean)getSupportsAVT;

/*!
 @brief Get the type of this attribute value.
 @return One of T_CDATA, T_URL, T_AVT, T_PATTERN, T_EXPR, T_CHAR,
  T_NUMBER, T_YESNO, T_QNAME, T_QNAMES, T_ENUM, T_SIMPLEPATTERNLIST,
  T_NMTOKEN, T_STRINGLIST, T_PREFIX_URLLIST, T_ENUM_OR_PQNAME.
 */
- (jint)getType;

/*!
 @brief Process an attribute string of type T_AVT into
  a AVT value.
 @param handler non-null reference to current StylesheetHandler that is constructing the Templates.
 @param uri The Namespace URI, or an empty string.
 @param name The local name (without prefix), or empty string if not namespace processing.
 @param rawName The qualified name (with prefix).
 @param value Should be an Attribute Value Template string.
 @return An AVT object that may be used to evaluate the Attribute Value Template.
 @throw org.xml.sax.SAXExceptionwhich will wrap a 
 <code>javax.xml.transform.TransformerException</code>, if there is a syntax error
  in the attribute value template string.
 */
- (OrgApacheXalanTemplatesAVT *)processAVTWithOrgApacheXalanProcessorStylesheetHandler:(OrgApacheXalanProcessorStylesheetHandler *)handler
                                                                          withNSString:(NSString *)uri
                                                                          withNSString:(NSString *)name
                                                                          withNSString:(NSString *)rawName
                                                                          withNSString:(NSString *)value
                                        withOrgApacheXalanTemplatesElemTemplateElement:(OrgApacheXalanTemplatesElemTemplateElement *)owner;

/*!
 @brief Process an attribute string of type T_QNAME into a QName value.
 @param handler non-null reference to current StylesheetHandler that is constructing the Templates.
 @param uri The Namespace URI, or an empty string.
 @param name The local name (without prefix), or empty string if not namespace processing.
 @param rawName The qualified name (with prefix).
 @param value A string that represents a potentially prefix qualified name.
 @param owner
 @return An AVT is returned.
 @throw org.xml.sax.SAXExceptionif the string contains a prefix that can not be
  resolved, or the string contains syntax that is invalid for a qualified name.
 */
- (id)processAVT_QNAMEWithOrgApacheXalanProcessorStylesheetHandler:(OrgApacheXalanProcessorStylesheetHandler *)handler
                                                      withNSString:(NSString *)uri
                                                      withNSString:(NSString *)name
                                                      withNSString:(NSString *)rawName
                                                      withNSString:(NSString *)value
                    withOrgApacheXalanTemplatesElemTemplateElement:(OrgApacheXalanTemplatesElemTemplateElement *)owner;

/*!
 @brief Process an attribute string of type T_CDATA into
  a String value.
 @param handler non-null reference to current StylesheetHandler that is constructing the Templates.
 @param uri The Namespace URI, or an empty string.
 @param name The local name (without prefix), or empty string if not namespace processing.
 @param rawName The qualified name (with prefix).
 @param value non-null string reference.
 @return The value argument.
 */
- (id)processCDATAWithOrgApacheXalanProcessorStylesheetHandler:(OrgApacheXalanProcessorStylesheetHandler *)handler
                                                  withNSString:(NSString *)uri
                                                  withNSString:(NSString *)name
                                                  withNSString:(NSString *)rawName
                                                  withNSString:(NSString *)value
                withOrgApacheXalanTemplatesElemTemplateElement:(OrgApacheXalanTemplatesElemTemplateElement *)owner;

/*!
 @brief Process an attribute string of type T_CHAR into
  a Character value.
 @param handler non-null reference to current StylesheetHandler that is constructing the Templates.
 @param uri The Namespace URI, or an empty string.
 @param name The local name (without prefix), or empty string if not namespace processing.
 @param rawName The qualified name (with prefix).
 @param value Should be a string with a length of 1.
 @return Character object.
 @throw org.xml.sax.SAXExceptionif the string is not a length of 1.
 */
- (id)processCHARWithOrgApacheXalanProcessorStylesheetHandler:(OrgApacheXalanProcessorStylesheetHandler *)handler
                                                 withNSString:(NSString *)uri
                                                 withNSString:(NSString *)name
                                                 withNSString:(NSString *)rawName
                                                 withNSString:(NSString *)value
               withOrgApacheXalanTemplatesElemTemplateElement:(OrgApacheXalanTemplatesElemTemplateElement *)owner;

/*!
 @brief Process an attribute string of type T_ENUM into a int value.
 @param handler non-null reference to current StylesheetHandler that is constructing the Templates.
 @param uri The Namespace URI, or an empty string.
 @param name The local name (without prefix), or empty string if not namespace processing.
 @param rawName The qualified name (with prefix).
 @param value non-null string that represents an enumerated value that is  valid for this element.
 @param owner
 @return An Integer representation of the enumerated value if this attribute does not support
          AVT.  Otherwise, and AVT is returned.
 */
- (id)processENUMWithOrgApacheXalanProcessorStylesheetHandler:(OrgApacheXalanProcessorStylesheetHandler *)handler
                                                 withNSString:(NSString *)uri
                                                 withNSString:(NSString *)name
                                                 withNSString:(NSString *)rawName
                                                 withNSString:(NSString *)value
               withOrgApacheXalanTemplatesElemTemplateElement:(OrgApacheXalanTemplatesElemTemplateElement *)owner;

/*!
 @brief Process an attribute string of that is either an enumerated value or a qname-but-not-ncname.
 Returns an AVT, if this attribute support AVT; otherwise returns int or qname.
 @param handler non-null reference to current StylesheetHandler that is constructing the Templates.
 @param uri The Namespace URI, or an empty string.
 @param name The local name (without prefix), or empty string if not namespace processing.
 @param rawName The qualified name (with prefix).
 @param value non-null string that represents an enumerated value that is  valid for this element.
 @param owner
 @return AVT if attribute supports AVT. An Integer representation of the enumerated value if
          attribute does not support AVT and an enumerated value was used.  Otherwise a qname
          is returned.
 */
- (id)processENUM_OR_PQNAMEWithOrgApacheXalanProcessorStylesheetHandler:(OrgApacheXalanProcessorStylesheetHandler *)handler
                                                           withNSString:(NSString *)uri
                                                           withNSString:(NSString *)name
                                                           withNSString:(NSString *)rawName
                                                           withNSString:(NSString *)value
                         withOrgApacheXalanTemplatesElemTemplateElement:(OrgApacheXalanTemplatesElemTemplateElement *)owner;

/*!
 @brief Process an attribute string of type T_EXPR into
  an XPath value.
 @param handler non-null reference to current StylesheetHandler that is constructing the Templates.
 @param uri The Namespace URI, or an empty string.
 @param name The local name (without prefix), or empty string if not namespace processing.
 @param rawName The qualified name (with prefix).
 @param value An XSLT expression string.
 @return an XPath object that may be used for evaluation.
 @throw org.xml.sax.SAXExceptionthat wraps a 
 <code>javax.xml.transform.TransformerException</code> if the expression
  string contains a syntax error.
 */
- (id)processEXPRWithOrgApacheXalanProcessorStylesheetHandler:(OrgApacheXalanProcessorStylesheetHandler *)handler
                                                 withNSString:(NSString *)uri
                                                 withNSString:(NSString *)name
                                                 withNSString:(NSString *)rawName
                                                 withNSString:(NSString *)value
               withOrgApacheXalanTemplatesElemTemplateElement:(OrgApacheXalanTemplatesElemTemplateElement *)owner;

/*!
 @brief Process an attribute string of type NCName into a String
 @param handler non-null reference to current StylesheetHandler that is constructing the Templates.
 @param uri The Namespace URI, or an empty string.
 @param name The local name (without prefix), or empty string if not namespace processing.
 @param rawName The qualified name (with prefix).
 @param value A string that represents a potentially prefix qualified name.
 @param owner
 @return A String object if this attribute does not support AVT's.  Otherwise, an AVT
          is returned.
 @throw org.xml.sax.SAXExceptionif the string contains a prefix that can not be
  resolved, or the string contains syntax that is invalid for a NCName.
 */
- (id)processNCNAMEWithOrgApacheXalanProcessorStylesheetHandler:(OrgApacheXalanProcessorStylesheetHandler *)handler
                                                   withNSString:(NSString *)uri
                                                   withNSString:(NSString *)name
                                                   withNSString:(NSString *)rawName
                                                   withNSString:(NSString *)value
                 withOrgApacheXalanTemplatesElemTemplateElement:(OrgApacheXalanTemplatesElemTemplateElement *)owner;

/*!
 @brief Process an attribute string of type T_NMTOKEN into
  a String value.
 @param handler non-null reference to current StylesheetHandler that is constructing the Templates.
 @param uri The Namespace URI, or an empty string.
 @param name The local name (without prefix), or empty string if not namespace processing.
 @param rawName The qualified name (with prefix).
 @param value A NMTOKEN string.
 @return the value argument or an AVT if this attribute supports AVTs.
 @throw org.xml.sax.SAXExceptionif the value is not a valid nmtoken
 */
- (id)processNMTOKENWithOrgApacheXalanProcessorStylesheetHandler:(OrgApacheXalanProcessorStylesheetHandler *)handler
                                                    withNSString:(NSString *)uri
                                                    withNSString:(NSString *)name
                                                    withNSString:(NSString *)rawName
                                                    withNSString:(NSString *)value
                  withOrgApacheXalanTemplatesElemTemplateElement:(OrgApacheXalanTemplatesElemTemplateElement *)owner;

/*!
 @brief Process an attribute string of type T_NUMBER into
  a double value.
 @param handler non-null reference to current StylesheetHandler that is constructing the Templates.
 @param uri The Namespace URI, or an empty string.
 @param name The local name (without prefix), or empty string if not namespace processing.
 @param rawName The qualified name (with prefix).
 @param value A string that can be parsed into a double value.
 @param number
 @return A Double object.
 @throw org.xml.sax.SAXExceptionthat wraps a 
 <code>javax.xml.transform.TransformerException</code>
  if the string does not contain a parsable number.
 */
- (id)processNUMBERWithOrgApacheXalanProcessorStylesheetHandler:(OrgApacheXalanProcessorStylesheetHandler *)handler
                                                   withNSString:(NSString *)uri
                                                   withNSString:(NSString *)name
                                                   withNSString:(NSString *)rawName
                                                   withNSString:(NSString *)value
                 withOrgApacheXalanTemplatesElemTemplateElement:(OrgApacheXalanTemplatesElemTemplateElement *)owner;

/*!
 @brief Process an attribute string of type T_PATTERN into
  an XPath match pattern value.
 @param handler non-null reference to current StylesheetHandler that is constructing the Templates.
 @param uri The Namespace URI, or an empty string.
 @param name The local name (without prefix), or empty string if not namespace processing.
 @param rawName The qualified name (with prefix).
 @param value A match pattern string.
 @return An XPath pattern that may be used to evaluate the XPath.
 @throw org.xml.sax.SAXExceptionthat wraps a 
 <code>javax.xml.transform.TransformerException</code> if the match pattern
  string contains a syntax error.
 */
- (id)processPATTERNWithOrgApacheXalanProcessorStylesheetHandler:(OrgApacheXalanProcessorStylesheetHandler *)handler
                                                    withNSString:(NSString *)uri
                                                    withNSString:(NSString *)name
                                                    withNSString:(NSString *)rawName
                                                    withNSString:(NSString *)value
                  withOrgApacheXalanTemplatesElemTemplateElement:(OrgApacheXalanTemplatesElemTemplateElement *)owner;

/*!
 @brief Process an attribute string of type T_PREFIXLIST into
  a vector of prefixes that may be resolved to URLs.
 @param handler non-null reference to current StylesheetHandler that is constructing the Templates.
 @param uri The Namespace URI, or an empty string.
 @param name The local name (without prefix), or empty string if not namespace processing.
 @param rawName The qualified name (with prefix).
 @param value A list of whitespace delimited prefixes.
 @return A vector of strings that may be resolved to URLs.
 @throw org.xml.sax.SAXExceptionif one of the prefixes can not be resolved.
 */
- (OrgApacheXmlUtilsStringVector *)processPREFIX_LISTWithOrgApacheXalanProcessorStylesheetHandler:(OrgApacheXalanProcessorStylesheetHandler *)handler
                                                                                     withNSString:(NSString *)uri
                                                                                     withNSString:(NSString *)name
                                                                                     withNSString:(NSString *)rawName
                                                                                     withNSString:(NSString *)value;

/*!
 @brief Process an attribute string of type T_URLLIST into
  a vector of prefixes that may be resolved to URLs.
 @param handler non-null reference to current StylesheetHandler that is constructing the Templates.
 @param uri The Namespace URI, or an empty string.
 @param name The local name (without prefix), or empty string if not namespace processing.
 @param rawName The qualified name (with prefix).
 @param value A list of whitespace delimited prefixes.
 @return A vector of strings that may be resolved to URLs.
 @throw org.xml.sax.SAXExceptionif one of the prefixes can not be resolved.
 */
- (OrgApacheXmlUtilsStringVector *)processPREFIX_URLLISTWithOrgApacheXalanProcessorStylesheetHandler:(OrgApacheXalanProcessorStylesheetHandler *)handler
                                                                                        withNSString:(NSString *)uri
                                                                                        withNSString:(NSString *)name
                                                                                        withNSString:(NSString *)rawName
                                                                                        withNSString:(NSString *)value;

/*!
 @brief Process an attribute string of type T_QNAME into a QName value.
 @param handler non-null reference to current StylesheetHandler that is constructing the Templates.
 @param uri The Namespace URI, or an empty string.
 @param name The local name (without prefix), or empty string if not namespace processing.
 @param rawName The qualified name (with prefix).
 @param value A string that represents a potentially prefix qualified name.
 @param owner
 @return A QName object if this attribute does not support AVT's.  Otherwise, an AVT
          is returned.
 @throw org.xml.sax.SAXExceptionif the string contains a prefix that can not be
  resolved, or the string contains syntax that is invalid for a qualified name.
 */
- (id)processQNAMEWithOrgApacheXalanProcessorStylesheetHandler:(OrgApacheXalanProcessorStylesheetHandler *)handler
                                                  withNSString:(NSString *)uri
                                                  withNSString:(NSString *)name
                                                  withNSString:(NSString *)rawName
                                                  withNSString:(NSString *)value
                withOrgApacheXalanTemplatesElemTemplateElement:(OrgApacheXalanTemplatesElemTemplateElement *)owner;

/*!
 @brief Process an attribute string of type T_QNAMES into a vector of QNames where
  the specification requires that non-prefixed elements not be placed in a
  namespace.
 (See section 2.4 of XSLT 1.0.)
 @param handler non-null reference to current StylesheetHandler that is constructing the Templates.
 @param uri The Namespace URI, or an empty string.
 @param name The local name (without prefix), or empty string if not namespace processing.
 @param rawName The qualified name (with prefix).
 @param value A whitespace delimited list of qualified names.
 @return a Vector of QName objects.
 @throw org.xml.sax.SAXExceptionif the one of the qualified name strings
  contains a prefix that can not be
  resolved, or a qualified name contains syntax that is invalid for a qualified name.
 */
- (JavaUtilVector *)processQNAMESWithOrgApacheXalanProcessorStylesheetHandler:(OrgApacheXalanProcessorStylesheetHandler *)handler
                                                                 withNSString:(NSString *)uri
                                                                 withNSString:(NSString *)name
                                                                 withNSString:(NSString *)rawName
                                                                 withNSString:(NSString *)value;

/*!
 @brief Process an attribute string of type T_QNAMES_RESOLVE_NULL into a vector
  of QNames where the specification requires non-prefixed elements to be
  placed in the default namespace.
 (See section 16 of XSLT 1.0; the 
 <em>only</em> time that this will get called is for the 
 <code>cdata-section-elements</code> attribute on <code>xsl:output</code>.
 @param handler non-null reference to current StylesheetHandler that is constructing the Templates.
 @param uri The Namespace URI, or an empty string.
 @param name The local name (without prefix), or empty string if not namespace processing.
 @param rawName The qualified name (with prefix).
 @param value A whitespace delimited list of qualified names.
 @return a Vector of QName objects.
 @throw org.xml.sax.SAXExceptionif the one of the qualified name strings
  contains a prefix that can not be resolved, or a qualified name contains
  syntax that is invalid for a qualified name.
 */
- (JavaUtilVector *)processQNAMESRNUWithOrgApacheXalanProcessorStylesheetHandler:(OrgApacheXalanProcessorStylesheetHandler *)handler
                                                                    withNSString:(NSString *)uri
                                                                    withNSString:(NSString *)name
                                                                    withNSString:(NSString *)rawName
                                                                    withNSString:(NSString *)value;

/*!
 @brief Process an attribute string of type T_SIMPLEPATTERNLIST into
  a vector of XPath match patterns.
 @param handler non-null reference to current StylesheetHandler that is constructing the Templates.
 @param uri The Namespace URI, or an empty string.
 @param name The local name (without prefix), or empty string if not namespace processing.
 @param rawName The qualified name (with prefix).
 @param value A whitespace delimited list of simple match patterns.
 @return A Vector of XPath objects.
 @throw org.xml.sax.SAXExceptionthat wraps a 
 <code>javax.xml.transform.TransformerException</code> if one of the match pattern
  strings contains a syntax error.
 */
- (JavaUtilVector *)processSIMPLEPATTERNLISTWithOrgApacheXalanProcessorStylesheetHandler:(OrgApacheXalanProcessorStylesheetHandler *)handler
                                                                            withNSString:(NSString *)uri
                                                                            withNSString:(NSString *)name
                                                                            withNSString:(NSString *)rawName
                                                                            withNSString:(NSString *)value
                                          withOrgApacheXalanTemplatesElemTemplateElement:(OrgApacheXalanTemplatesElemTemplateElement *)owner;

/*!
 @brief Process an attribute string of type T_STRINGLIST into
  a vector of XPath match patterns.
 @param handler non-null reference to current StylesheetHandler that is constructing the Templates.
 @param uri The Namespace URI, or an empty string.
 @param name The local name (without prefix), or empty string if not namespace processing.
 @param rawName The qualified name (with prefix).
 @param value a whitespace delimited list of string values.
 @return A StringVector of the tokenized strings.
 */
- (OrgApacheXmlUtilsStringVector *)processSTRINGLISTWithOrgApacheXalanProcessorStylesheetHandler:(OrgApacheXalanProcessorStylesheetHandler *)handler
                                                                                    withNSString:(NSString *)uri
                                                                                    withNSString:(NSString *)name
                                                                                    withNSString:(NSString *)rawName
                                                                                    withNSString:(NSString *)value;

/*!
 @brief Process an attribute string of type T_URL into
  a URL value.
 @param handler non-null reference to current StylesheetHandler that is constructing the Templates.
 @param uri The Namespace URI, or an empty string.
 @param name The local name (without prefix), or empty string if not namespace processing.
 @param rawName The qualified name (with prefix).
 @param value non-null string that conforms to the URL syntax.
 @return The non-absolutized URL argument, in other words, the value argument.  If this 
          attribute supports AVT, an AVT is returned.
 @throw org.xml.sax.SAXExceptionif the URL does not conform to the URL syntax.
 */
- (id)processURLWithOrgApacheXalanProcessorStylesheetHandler:(OrgApacheXalanProcessorStylesheetHandler *)handler
                                                withNSString:(NSString *)uri
                                                withNSString:(NSString *)name
                                                withNSString:(NSString *)rawName
                                                withNSString:(NSString *)value
              withOrgApacheXalanTemplatesElemTemplateElement:(OrgApacheXalanTemplatesElemTemplateElement *)owner;

/*!
 @brief Process an attribute value.
 @param handler non-null reference to current StylesheetHandler that is constructing the Templates.
 @param uri The Namespace URI, or an empty string.
 @param name The local name (without prefix), or empty string if not namespace processing.
 @param rawName The qualified name (with prefix).
 @param value The unprocessed string value of the attribute.
 @return The processed Object representation of the attribute.
 @throw org.xml.sax.SAXExceptionif the attribute value can not be processed.
 */
- (id)processValueWithOrgApacheXalanProcessorStylesheetHandler:(OrgApacheXalanProcessorStylesheetHandler *)handler
                                                  withNSString:(NSString *)uri
                                                  withNSString:(NSString *)name
                                                  withNSString:(NSString *)rawName
                                                  withNSString:(NSString *)value
                withOrgApacheXalanTemplatesElemTemplateElement:(OrgApacheXalanTemplatesElemTemplateElement *)owner;

/*!
 @brief Set a value on an attribute.
 @param handler non-null reference to current StylesheetHandler that is constructing the Templates.
 @param attrUri The Namespace URI of the attribute, or an empty string.
 @param attrLocalName The local name (without prefix), or empty string if not namespace processing.
 @param attrRawName The raw name of the attribute, including possible prefix.
 @param attrValue The attribute's value.
 @param elem The object that should contain a property that represents the attribute.
 @throw org.xml.sax.SAXException
 */
- (jboolean)setAttrValueWithOrgApacheXalanProcessorStylesheetHandler:(OrgApacheXalanProcessorStylesheetHandler *)handler
                                                        withNSString:(NSString *)attrUri
                                                        withNSString:(NSString *)attrLocalName
                                                        withNSString:(NSString *)attrRawName
                                                        withNSString:(NSString *)attrValue
                      withOrgApacheXalanTemplatesElemTemplateElement:(OrgApacheXalanTemplatesElemTemplateElement *)elem;

/*!
 @brief Set the default value of an attribute.
 @param handler non-null reference to current StylesheetHandler that is constructing the Templates.
 @param elem The object on which the property will be set.
 @throw org.xml.sax.SAXExceptionwraps an invocation exception if the
  setter method can not be invoked on the object.
 */
- (void)setDefAttrValueWithOrgApacheXalanProcessorStylesheetHandler:(OrgApacheXalanProcessorStylesheetHandler *)handler
                     withOrgApacheXalanTemplatesElemTemplateElement:(OrgApacheXalanTemplatesElemTemplateElement *)elem;

/*!
 @brief Set the default value for this attribute.
 @param def String representation of the default value for this attribute.
 */
- (void)setDefaultWithNSString:(NSString *)def;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgApacheXalanProcessorXSLTAttributeDef)

J2OBJC_FIELD_SETTER(OrgApacheXalanProcessorXSLTAttributeDef, m_setterString_, NSString *)

inline jint OrgApacheXalanProcessorXSLTAttributeDef_get_FATAL(void);
#define OrgApacheXalanProcessorXSLTAttributeDef_FATAL 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanProcessorXSLTAttributeDef, FATAL, jint)

inline jint OrgApacheXalanProcessorXSLTAttributeDef_get_ERROR(void);
#define OrgApacheXalanProcessorXSLTAttributeDef_ERROR 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanProcessorXSLTAttributeDef, ERROR, jint)

inline jint OrgApacheXalanProcessorXSLTAttributeDef_get_WARNING(void);
#define OrgApacheXalanProcessorXSLTAttributeDef_WARNING 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanProcessorXSLTAttributeDef, WARNING, jint)

/*!
 @brief Type values that represent XSLT attribute types.
 */
inline jint OrgApacheXalanProcessorXSLTAttributeDef_get_T_CDATA(void);
#define OrgApacheXalanProcessorXSLTAttributeDef_T_CDATA 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanProcessorXSLTAttributeDef, T_CDATA, jint)

/*!
 @brief Type values that represent XSLT attribute types.
 */
inline jint OrgApacheXalanProcessorXSLTAttributeDef_get_T_URL(void);
#define OrgApacheXalanProcessorXSLTAttributeDef_T_URL 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanProcessorXSLTAttributeDef, T_URL, jint)

/*!
 @brief Type values that represent XSLT attribute types.
 */
inline jint OrgApacheXalanProcessorXSLTAttributeDef_get_T_AVT(void);
#define OrgApacheXalanProcessorXSLTAttributeDef_T_AVT 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanProcessorXSLTAttributeDef, T_AVT, jint)

/*!
 @brief Type values that represent XSLT attribute types.
 */
inline jint OrgApacheXalanProcessorXSLTAttributeDef_get_T_PATTERN(void);
#define OrgApacheXalanProcessorXSLTAttributeDef_T_PATTERN 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanProcessorXSLTAttributeDef, T_PATTERN, jint)

/*!
 @brief Type values that represent XSLT attribute types.
 */
inline jint OrgApacheXalanProcessorXSLTAttributeDef_get_T_EXPR(void);
#define OrgApacheXalanProcessorXSLTAttributeDef_T_EXPR 5
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanProcessorXSLTAttributeDef, T_EXPR, jint)

/*!
 @brief Type values that represent XSLT attribute types.
 */
inline jint OrgApacheXalanProcessorXSLTAttributeDef_get_T_CHAR(void);
#define OrgApacheXalanProcessorXSLTAttributeDef_T_CHAR 6
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanProcessorXSLTAttributeDef, T_CHAR, jint)

/*!
 @brief Type values that represent XSLT attribute types.
 */
inline jint OrgApacheXalanProcessorXSLTAttributeDef_get_T_NUMBER(void);
#define OrgApacheXalanProcessorXSLTAttributeDef_T_NUMBER 7
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanProcessorXSLTAttributeDef, T_NUMBER, jint)

/*!
 @brief Type values that represent XSLT attribute types.
 */
inline jint OrgApacheXalanProcessorXSLTAttributeDef_get_T_YESNO(void);
#define OrgApacheXalanProcessorXSLTAttributeDef_T_YESNO 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanProcessorXSLTAttributeDef, T_YESNO, jint)

/*!
 @brief Type values that represent XSLT attribute types.
 */
inline jint OrgApacheXalanProcessorXSLTAttributeDef_get_T_QNAME(void);
#define OrgApacheXalanProcessorXSLTAttributeDef_T_QNAME 9
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanProcessorXSLTAttributeDef, T_QNAME, jint)

/*!
 @brief Type values that represent XSLT attribute types.
 */
inline jint OrgApacheXalanProcessorXSLTAttributeDef_get_T_QNAMES(void);
#define OrgApacheXalanProcessorXSLTAttributeDef_T_QNAMES 10
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanProcessorXSLTAttributeDef, T_QNAMES, jint)

/*!
 @brief Type values that represent XSLT attribute types.
 */
inline jint OrgApacheXalanProcessorXSLTAttributeDef_get_T_ENUM(void);
#define OrgApacheXalanProcessorXSLTAttributeDef_T_ENUM 11
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanProcessorXSLTAttributeDef, T_ENUM, jint)

/*!
 @brief Type values that represent XSLT attribute types.
 */
inline jint OrgApacheXalanProcessorXSLTAttributeDef_get_T_SIMPLEPATTERNLIST(void);
#define OrgApacheXalanProcessorXSLTAttributeDef_T_SIMPLEPATTERNLIST 12
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanProcessorXSLTAttributeDef, T_SIMPLEPATTERNLIST, jint)

/*!
 @brief Type values that represent XSLT attribute types.
 */
inline jint OrgApacheXalanProcessorXSLTAttributeDef_get_T_NMTOKEN(void);
#define OrgApacheXalanProcessorXSLTAttributeDef_T_NMTOKEN 13
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanProcessorXSLTAttributeDef, T_NMTOKEN, jint)

/*!
 @brief Type values that represent XSLT attribute types.
 */
inline jint OrgApacheXalanProcessorXSLTAttributeDef_get_T_STRINGLIST(void);
#define OrgApacheXalanProcessorXSLTAttributeDef_T_STRINGLIST 14
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanProcessorXSLTAttributeDef, T_STRINGLIST, jint)

/*!
 @brief Type values that represent XSLT attribute types.
 */
inline jint OrgApacheXalanProcessorXSLTAttributeDef_get_T_PREFIX_URLLIST(void);
#define OrgApacheXalanProcessorXSLTAttributeDef_T_PREFIX_URLLIST 15
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanProcessorXSLTAttributeDef, T_PREFIX_URLLIST, jint)

/*!
 @brief Type values that represent XSLT attribute types.
 */
inline jint OrgApacheXalanProcessorXSLTAttributeDef_get_T_ENUM_OR_PQNAME(void);
#define OrgApacheXalanProcessorXSLTAttributeDef_T_ENUM_OR_PQNAME 16
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanProcessorXSLTAttributeDef, T_ENUM_OR_PQNAME, jint)

/*!
 @brief Type values that represent XSLT attribute types.
 */
inline jint OrgApacheXalanProcessorXSLTAttributeDef_get_T_NCNAME(void);
#define OrgApacheXalanProcessorXSLTAttributeDef_T_NCNAME 17
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanProcessorXSLTAttributeDef, T_NCNAME, jint)

/*!
 @brief Type values that represent XSLT attribute types.
 */
inline jint OrgApacheXalanProcessorXSLTAttributeDef_get_T_AVT_QNAME(void);
#define OrgApacheXalanProcessorXSLTAttributeDef_T_AVT_QNAME 18
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanProcessorXSLTAttributeDef, T_AVT_QNAME, jint)

/*!
 @brief Type values that represent XSLT attribute types.
 */
inline jint OrgApacheXalanProcessorXSLTAttributeDef_get_T_QNAMES_RESOLVE_NULL(void);
#define OrgApacheXalanProcessorXSLTAttributeDef_T_QNAMES_RESOLVE_NULL 19
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanProcessorXSLTAttributeDef, T_QNAMES_RESOLVE_NULL, jint)

/*!
 @brief Type values that represent XSLT attribute types.
 */
inline jint OrgApacheXalanProcessorXSLTAttributeDef_get_T_PREFIXLIST(void);
#define OrgApacheXalanProcessorXSLTAttributeDef_T_PREFIXLIST 20
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanProcessorXSLTAttributeDef, T_PREFIXLIST, jint)

/*!
 @brief Representation for an attribute in a foreign namespace.
 */
inline OrgApacheXalanProcessorXSLTAttributeDef *OrgApacheXalanProcessorXSLTAttributeDef_get_m_foreignAttr(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgApacheXalanProcessorXSLTAttributeDef *OrgApacheXalanProcessorXSLTAttributeDef_m_foreignAttr;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanProcessorXSLTAttributeDef, m_foreignAttr, OrgApacheXalanProcessorXSLTAttributeDef *)

/*!
 @brief Method name that objects may implement if they wish to have forein attributes set.
 */
inline NSString *OrgApacheXalanProcessorXSLTAttributeDef_get_S_FOREIGNATTR_SETTER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXalanProcessorXSLTAttributeDef_S_FOREIGNATTR_SETTER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXalanProcessorXSLTAttributeDef, S_FOREIGNATTR_SETTER, NSString *)

FOUNDATION_EXPORT void OrgApacheXalanProcessorXSLTAttributeDef_initWithNSString_withNSString_withInt_withBoolean_withBoolean_withInt_(OrgApacheXalanProcessorXSLTAttributeDef *self, NSString *namespace_, NSString *name, jint type, jboolean required, jboolean supportsAVT, jint errorType);

FOUNDATION_EXPORT OrgApacheXalanProcessorXSLTAttributeDef *new_OrgApacheXalanProcessorXSLTAttributeDef_initWithNSString_withNSString_withInt_withBoolean_withBoolean_withInt_(NSString *namespace_, NSString *name, jint type, jboolean required, jboolean supportsAVT, jint errorType) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXalanProcessorXSLTAttributeDef *create_OrgApacheXalanProcessorXSLTAttributeDef_initWithNSString_withNSString_withInt_withBoolean_withBoolean_withInt_(NSString *namespace_, NSString *name, jint type, jboolean required, jboolean supportsAVT, jint errorType);

FOUNDATION_EXPORT void OrgApacheXalanProcessorXSLTAttributeDef_initWithNSString_withNSString_withInt_withBoolean_withInt_withNSString_(OrgApacheXalanProcessorXSLTAttributeDef *self, NSString *namespace_, NSString *name, jint type, jboolean supportsAVT, jint errorType, NSString *defaultVal);

FOUNDATION_EXPORT OrgApacheXalanProcessorXSLTAttributeDef *new_OrgApacheXalanProcessorXSLTAttributeDef_initWithNSString_withNSString_withInt_withBoolean_withInt_withNSString_(NSString *namespace_, NSString *name, jint type, jboolean supportsAVT, jint errorType, NSString *defaultVal) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXalanProcessorXSLTAttributeDef *create_OrgApacheXalanProcessorXSLTAttributeDef_initWithNSString_withNSString_withInt_withBoolean_withInt_withNSString_(NSString *namespace_, NSString *name, jint type, jboolean supportsAVT, jint errorType, NSString *defaultVal);

FOUNDATION_EXPORT void OrgApacheXalanProcessorXSLTAttributeDef_initWithNSString_withNSString_withBoolean_withBoolean_withBoolean_withInt_withNSString_withInt_withNSString_withInt_(OrgApacheXalanProcessorXSLTAttributeDef *self, NSString *namespace_, NSString *name, jboolean required, jboolean supportsAVT, jboolean prefixedQNameValAllowed, jint errorType, NSString *k1, jint v1, NSString *k2, jint v2);

FOUNDATION_EXPORT OrgApacheXalanProcessorXSLTAttributeDef *new_OrgApacheXalanProcessorXSLTAttributeDef_initWithNSString_withNSString_withBoolean_withBoolean_withBoolean_withInt_withNSString_withInt_withNSString_withInt_(NSString *namespace_, NSString *name, jboolean required, jboolean supportsAVT, jboolean prefixedQNameValAllowed, jint errorType, NSString *k1, jint v1, NSString *k2, jint v2) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXalanProcessorXSLTAttributeDef *create_OrgApacheXalanProcessorXSLTAttributeDef_initWithNSString_withNSString_withBoolean_withBoolean_withBoolean_withInt_withNSString_withInt_withNSString_withInt_(NSString *namespace_, NSString *name, jboolean required, jboolean supportsAVT, jboolean prefixedQNameValAllowed, jint errorType, NSString *k1, jint v1, NSString *k2, jint v2);

FOUNDATION_EXPORT void OrgApacheXalanProcessorXSLTAttributeDef_initWithNSString_withNSString_withBoolean_withBoolean_withBoolean_withInt_withNSString_withInt_withNSString_withInt_withNSString_withInt_(OrgApacheXalanProcessorXSLTAttributeDef *self, NSString *namespace_, NSString *name, jboolean required, jboolean supportsAVT, jboolean prefixedQNameValAllowed, jint errorType, NSString *k1, jint v1, NSString *k2, jint v2, NSString *k3, jint v3);

FOUNDATION_EXPORT OrgApacheXalanProcessorXSLTAttributeDef *new_OrgApacheXalanProcessorXSLTAttributeDef_initWithNSString_withNSString_withBoolean_withBoolean_withBoolean_withInt_withNSString_withInt_withNSString_withInt_withNSString_withInt_(NSString *namespace_, NSString *name, jboolean required, jboolean supportsAVT, jboolean prefixedQNameValAllowed, jint errorType, NSString *k1, jint v1, NSString *k2, jint v2, NSString *k3, jint v3) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXalanProcessorXSLTAttributeDef *create_OrgApacheXalanProcessorXSLTAttributeDef_initWithNSString_withNSString_withBoolean_withBoolean_withBoolean_withInt_withNSString_withInt_withNSString_withInt_withNSString_withInt_(NSString *namespace_, NSString *name, jboolean required, jboolean supportsAVT, jboolean prefixedQNameValAllowed, jint errorType, NSString *k1, jint v1, NSString *k2, jint v2, NSString *k3, jint v3);

FOUNDATION_EXPORT void OrgApacheXalanProcessorXSLTAttributeDef_initWithNSString_withNSString_withBoolean_withBoolean_withBoolean_withInt_withNSString_withInt_withNSString_withInt_withNSString_withInt_withNSString_withInt_(OrgApacheXalanProcessorXSLTAttributeDef *self, NSString *namespace_, NSString *name, jboolean required, jboolean supportsAVT, jboolean prefixedQNameValAllowed, jint errorType, NSString *k1, jint v1, NSString *k2, jint v2, NSString *k3, jint v3, NSString *k4, jint v4);

FOUNDATION_EXPORT OrgApacheXalanProcessorXSLTAttributeDef *new_OrgApacheXalanProcessorXSLTAttributeDef_initWithNSString_withNSString_withBoolean_withBoolean_withBoolean_withInt_withNSString_withInt_withNSString_withInt_withNSString_withInt_withNSString_withInt_(NSString *namespace_, NSString *name, jboolean required, jboolean supportsAVT, jboolean prefixedQNameValAllowed, jint errorType, NSString *k1, jint v1, NSString *k2, jint v2, NSString *k3, jint v3, NSString *k4, jint v4) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXalanProcessorXSLTAttributeDef *create_OrgApacheXalanProcessorXSLTAttributeDef_initWithNSString_withNSString_withBoolean_withBoolean_withBoolean_withInt_withNSString_withInt_withNSString_withInt_withNSString_withInt_withNSString_withInt_(NSString *namespace_, NSString *name, jboolean required, jboolean supportsAVT, jboolean prefixedQNameValAllowed, jint errorType, NSString *k1, jint v1, NSString *k2, jint v2, NSString *k3, jint v3, NSString *k4, jint v4);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXalanProcessorXSLTAttributeDef)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgApacheXalanProcessorXSLTAttributeDef")
