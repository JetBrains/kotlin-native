//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xalan/templates/XSLTVisitor.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXalanTemplatesXSLTVisitor")
#ifdef RESTRICT_OrgApacheXalanTemplatesXSLTVisitor
#define INCLUDE_ALL_OrgApacheXalanTemplatesXSLTVisitor 0
#else
#define INCLUDE_ALL_OrgApacheXalanTemplatesXSLTVisitor 1
#endif
#undef RESTRICT_OrgApacheXalanTemplatesXSLTVisitor

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheXalanTemplatesXSLTVisitor_) && (INCLUDE_ALL_OrgApacheXalanTemplatesXSLTVisitor || defined(INCLUDE_OrgApacheXalanTemplatesXSLTVisitor))
#define OrgApacheXalanTemplatesXSLTVisitor_

#define RESTRICT_OrgApacheXpathXPathVisitor 1
#define INCLUDE_OrgApacheXpathXPathVisitor 1
#include "org/apache/xpath/XPathVisitor.h"

@class OrgApacheXalanTemplatesAVT;
@class OrgApacheXalanTemplatesElemExtensionCall;
@class OrgApacheXalanTemplatesElemLiteralResult;
@class OrgApacheXalanTemplatesElemTemplateElement;
@class OrgApacheXalanTemplatesElemVariable;

/*!
 @brief A derivation from this class can be passed to a class that implements 
  the XSLTVisitable interface, to have the appropriate method called 
  for each component of an XSLT stylesheet.Aside from possible other uses,
  the main intention is to provide a reasonable means to perform expression 
  rewriting.
 */
@interface OrgApacheXalanTemplatesXSLTVisitor : OrgApacheXpathXPathVisitor

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Visit an Attribute Value Template (at the top level).
 @param elem The attribute value template object.
 @return true if the sub expressions should be traversed.
 */
- (jboolean)visitAVTWithOrgApacheXalanTemplatesAVT:(OrgApacheXalanTemplatesAVT *)elem;

/*!
 @brief Visit an extension element.
 @param elem The extension object.
 @return true if the sub expressions should be traversed.
 */
- (jboolean)visitExtensionElementWithOrgApacheXalanTemplatesElemExtensionCall:(OrgApacheXalanTemplatesElemExtensionCall *)elem;

/*!
 @brief Visit an XSLT instruction.Any element that isn't called by one 
  of the other visit methods, will be called by this method.
 @param elem The xsl instruction element object.
 @return true if the sub expressions should be traversed.
 */
- (jboolean)visitInstructionWithOrgApacheXalanTemplatesElemTemplateElement:(OrgApacheXalanTemplatesElemTemplateElement *)elem;

/*!
 @brief Visit a LiteralResultElement.
 @param elem The literal result object.
 @return true if the sub expressions should be traversed.
 */
- (jboolean)visitLiteralResultElementWithOrgApacheXalanTemplatesElemLiteralResult:(OrgApacheXalanTemplatesElemLiteralResult *)elem;

/*!
 @brief Visit an XSLT stylesheet instruction.
 @param elem The xsl instruction element object.
 @return true if the sub expressions should be traversed.
 */
- (jboolean)visitStylesheetWithOrgApacheXalanTemplatesElemTemplateElement:(OrgApacheXalanTemplatesElemTemplateElement *)elem;

/*!
 @brief Visit an XSLT top-level instruction.
 @param elem The xsl instruction element object.
 @return true if the sub expressions should be traversed.
 */
- (jboolean)visitTopLevelInstructionWithOrgApacheXalanTemplatesElemTemplateElement:(OrgApacheXalanTemplatesElemTemplateElement *)elem;

/*!
 @brief Visit an XSLT top-level instruction.
 @param elem The xsl instruction element object.
 @return true if the sub expressions should be traversed.
 */
- (jboolean)visitTopLevelVariableOrParamDeclWithOrgApacheXalanTemplatesElemTemplateElement:(OrgApacheXalanTemplatesElemTemplateElement *)elem;

/*!
 @brief Visit an XSLT variable or parameter declaration.
 @param elem The xsl instruction element object.
 @return true if the sub expressions should be traversed.
 */
- (jboolean)visitVariableOrParamDeclWithOrgApacheXalanTemplatesElemVariable:(OrgApacheXalanTemplatesElemVariable *)elem;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXalanTemplatesXSLTVisitor)

FOUNDATION_EXPORT void OrgApacheXalanTemplatesXSLTVisitor_init(OrgApacheXalanTemplatesXSLTVisitor *self);

FOUNDATION_EXPORT OrgApacheXalanTemplatesXSLTVisitor *new_OrgApacheXalanTemplatesXSLTVisitor_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXalanTemplatesXSLTVisitor *create_OrgApacheXalanTemplatesXSLTVisitor_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXalanTemplatesXSLTVisitor)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgApacheXalanTemplatesXSLTVisitor")
