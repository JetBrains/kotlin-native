//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xalan/templates/AVT.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXalanTemplatesAVT")
#ifdef RESTRICT_OrgApacheXalanTemplatesAVT
#define INCLUDE_ALL_OrgApacheXalanTemplatesAVT 0
#else
#define INCLUDE_ALL_OrgApacheXalanTemplatesAVT 1
#endif
#undef RESTRICT_OrgApacheXalanTemplatesAVT

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheXalanTemplatesAVT_) && (INCLUDE_ALL_OrgApacheXalanTemplatesAVT || defined(INCLUDE_OrgApacheXalanTemplatesAVT))
#define OrgApacheXalanTemplatesAVT_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

#define RESTRICT_OrgApacheXalanTemplatesXSLTVisitable 1
#define INCLUDE_OrgApacheXalanTemplatesXSLTVisitable 1
#include "org/apache/xalan/templates/XSLTVisitable.h"

@class JavaUtilVector;
@class OrgApacheXalanProcessorStylesheetHandler;
@class OrgApacheXalanTemplatesElemTemplateElement;
@class OrgApacheXalanTemplatesXSLTVisitor;
@class OrgApacheXpathXPathContext;
@protocol OrgApacheXmlUtilsPrefixResolver;

/*!
 @brief Class to hold an Attribute Value Template.
 */
@interface OrgApacheXalanTemplatesAVT : NSObject < JavaIoSerializable, OrgApacheXalanTemplatesXSLTVisitable >
@property (readonly, class) jlong serialVersionUID NS_SWIFT_NAME(serialVersionUID);

+ (jlong)serialVersionUID;

#pragma mark Public

/*!
 @brief Construct an AVT by parsing the string, and either
  constructing a vector of AVTParts, or simply hold
  on to the string if the AVT is simple.
 @param handler non-null reference to StylesheetHandler that is constructing.
 @param uri non-null reference to URI, "" if null namespace.
 @param name non-null reference to name string.
 @param rawName prefixed name.
 @param stringedValue non-null raw string value.
 @throw javax.xml.transform.TransformerException
 */
- (instancetype __nonnull)initWithOrgApacheXalanProcessorStylesheetHandler:(OrgApacheXalanProcessorStylesheetHandler *)handler
                                                              withNSString:(NSString *)uri
                                                              withNSString:(NSString *)name
                                                              withNSString:(NSString *)rawName
                                                              withNSString:(NSString *)stringedValue
                            withOrgApacheXalanTemplatesElemTemplateElement:(OrgApacheXalanTemplatesElemTemplateElement *)owner;

/*!
 - seealso: XSLTVisitable#callVisitors(XSLTVisitor)
 */
- (void)callVisitorsWithOrgApacheXalanTemplatesXSLTVisitor:(OrgApacheXalanTemplatesXSLTVisitor *)visitor;

/*!
 @brief Tell if this expression or it's subexpressions can traverse outside
  the current subtree.
 @return true if traversal outside the context node's subtree can occur.
 */
- (jboolean)canTraverseOutsideSubtree;

/*!
 @brief Evaluate the AVT and return a String.
 @param xctxt Te XPathContext to use to evaluate this.
 @param context The current source tree context.
 @param nsNode The current namespace context (stylesheet tree context).
 @return The AVT evaluated as a string
 @throw javax.xml.transform.TransformerException
 */
- (NSString *)evaluateWithOrgApacheXpathXPathContext:(OrgApacheXpathXPathContext *)xctxt
                                             withInt:(jint)context
                 withOrgApacheXmlUtilsPrefixResolver:(id<OrgApacheXmlUtilsPrefixResolver>)nsNode;

/*!
 @brief This function is used to fixup variables from QNames to stack frame 
  indexes at stylesheet build time.
 @param vars List of QNames that correspond to variables.  This list   should be searched backwards for the first qualified name that 
   corresponds to the variable reference qname.  The position of the 
   QName in the vector from the start of the vector will be its position 
   in the stack frame (but variables above the globalsTop value will need 
   to be offset to the current stack frame).
 */
- (void)fixupVariablesWithJavaUtilVector:(JavaUtilVector *)vars
                                 withInt:(jint)globalsSize;

/*!
 @brief Get the local name of the attribute.
 @return non-null reference to name string.
 */
- (NSString *)getName;

/*!
 @brief Get the raw name of the attribute, with the prefix unprocessed.
 @return non-null reference to prefixed name.
 */
- (NSString *)getRawName;

/*!
 @brief Get the AVT as the original string.
 @return The AVT as the original string
 */
- (NSString *)getSimpleString;

/*!
 @brief Get the namespace URI of the attribute.
 @return non-null reference to URI, "" if null namespace.
 */
- (NSString *)getURI;

/*!
 @brief Test whether the AVT is insensitive to the context in which
   it is being evaluated.This is intended to facilitate
   compilation of templates, by allowing simple AVTs to be
   converted back into strings.
 Currently the only case we recognize is simple strings.
  ADDED 9/5/2000 to support compilation experiment
 @return True if the m_simpleString member of this AVT is not null
 */
- (jboolean)isContextInsensitive;

/*!
 @brief Returns true if this AVT is simple
 */
- (jboolean)isSimple;

/*!
 @brief Set the local name of the attribute.
 @param name non-null reference to name string.
 */
- (void)setNameWithNSString:(NSString *)name;

/*!
 @brief Get the raw name of the attribute, with the prefix unprocessed.
 @param rawName non-null reference to prefixed name.
 */
- (void)setRawNameWithNSString:(NSString *)rawName;

/*!
 @brief Get the namespace URI of the attribute.
 @param uri non-null reference to URI, "" if null namespace.
 */
- (void)setURIWithNSString:(NSString *)uri;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXalanTemplatesAVT)

inline jlong OrgApacheXalanTemplatesAVT_get_serialVersionUID(void);
#define OrgApacheXalanTemplatesAVT_serialVersionUID 5167607155517042691LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesAVT, serialVersionUID, jlong)

FOUNDATION_EXPORT void OrgApacheXalanTemplatesAVT_initWithOrgApacheXalanProcessorStylesheetHandler_withNSString_withNSString_withNSString_withNSString_withOrgApacheXalanTemplatesElemTemplateElement_(OrgApacheXalanTemplatesAVT *self, OrgApacheXalanProcessorStylesheetHandler *handler, NSString *uri, NSString *name, NSString *rawName, NSString *stringedValue, OrgApacheXalanTemplatesElemTemplateElement *owner);

FOUNDATION_EXPORT OrgApacheXalanTemplatesAVT *new_OrgApacheXalanTemplatesAVT_initWithOrgApacheXalanProcessorStylesheetHandler_withNSString_withNSString_withNSString_withNSString_withOrgApacheXalanTemplatesElemTemplateElement_(OrgApacheXalanProcessorStylesheetHandler *handler, NSString *uri, NSString *name, NSString *rawName, NSString *stringedValue, OrgApacheXalanTemplatesElemTemplateElement *owner) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXalanTemplatesAVT *create_OrgApacheXalanTemplatesAVT_initWithOrgApacheXalanProcessorStylesheetHandler_withNSString_withNSString_withNSString_withNSString_withOrgApacheXalanTemplatesElemTemplateElement_(OrgApacheXalanProcessorStylesheetHandler *handler, NSString *uri, NSString *name, NSString *rawName, NSString *stringedValue, OrgApacheXalanTemplatesElemTemplateElement *owner);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXalanTemplatesAVT)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgApacheXalanTemplatesAVT")
