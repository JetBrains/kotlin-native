//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xalan/transformer/KeyIterator.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXalanTransformerKeyIterator")
#ifdef RESTRICT_OrgApacheXalanTransformerKeyIterator
#define INCLUDE_ALL_OrgApacheXalanTransformerKeyIterator 0
#else
#define INCLUDE_ALL_OrgApacheXalanTransformerKeyIterator 1
#endif
#undef RESTRICT_OrgApacheXalanTransformerKeyIterator

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheXalanTransformerKeyIterator_) && (INCLUDE_ALL_OrgApacheXalanTransformerKeyIterator || defined(INCLUDE_OrgApacheXalanTransformerKeyIterator))
#define OrgApacheXalanTransformerKeyIterator_

#define RESTRICT_OrgApacheXpathAxesOneStepIteratorForward 1
#define INCLUDE_OrgApacheXpathAxesOneStepIteratorForward 1
#include "org/apache/xpath/axes/OneStepIteratorForward.h"

@class JavaUtilVector;
@class OrgApacheXmlUtilsQName;
@class OrgApacheXpathCompilerCompiler;

/*!
 @brief This class implements an optimized iterator for 
  "key()" patterns, matching each node to the 
  match attribute in one or more xsl:key declarations.
 */
@interface OrgApacheXalanTransformerKeyIterator : OrgApacheXpathAxesOneStepIteratorForward
@property (readonly, class) jlong serialVersionUID NS_SWIFT_NAME(serialVersionUID);

+ (jlong)serialVersionUID;

#pragma mark Public

/*!
 @brief Test whether a specified node is visible in the logical view of a
  TreeWalker or NodeIterator.This function will be called by the
  implementation of TreeWalker and NodeIterator; it is not intended to
  be called directly from user code.
 @param testNode The node to check to see if it passes the filter or not.
 @return a constant to determine whether the node is accepted,
    rejected, or skipped, as defined  above .
 */
- (jshort)acceptNodeWithInt:(jint)testNode;

/*!
 @brief Get the key declarations from the stylesheet
 @return Vector containing the key declarations from the stylesheet
 */
- (JavaUtilVector *)getKeyDeclarations;

/*!
 @brief Get the key name from a key declaration this iterator will process
 @return Key name
 */
- (OrgApacheXmlUtilsQName *)getName;

#pragma mark Package-Private

/*!
 @brief Create a KeyIterator object.
 @throw javax.xml.transform.TransformerException
 */
- (instancetype __nonnull)initWithOrgApacheXmlUtilsQName:(OrgApacheXmlUtilsQName *)name
                                      withJavaUtilVector:(JavaUtilVector *)keyDeclarations;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithInt:(jint)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithOrgApacheXpathCompilerCompiler:(OrgApacheXpathCompilerCompiler *)arg0
                                                         withInt:(jint)arg1
                                                         withInt:(jint)arg2 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXalanTransformerKeyIterator)

inline jlong OrgApacheXalanTransformerKeyIterator_get_serialVersionUID(void);
#define OrgApacheXalanTransformerKeyIterator_serialVersionUID -1349109910100249661LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTransformerKeyIterator, serialVersionUID, jlong)

FOUNDATION_EXPORT void OrgApacheXalanTransformerKeyIterator_initWithOrgApacheXmlUtilsQName_withJavaUtilVector_(OrgApacheXalanTransformerKeyIterator *self, OrgApacheXmlUtilsQName *name, JavaUtilVector *keyDeclarations);

FOUNDATION_EXPORT OrgApacheXalanTransformerKeyIterator *new_OrgApacheXalanTransformerKeyIterator_initWithOrgApacheXmlUtilsQName_withJavaUtilVector_(OrgApacheXmlUtilsQName *name, JavaUtilVector *keyDeclarations) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXalanTransformerKeyIterator *create_OrgApacheXalanTransformerKeyIterator_initWithOrgApacheXmlUtilsQName_withJavaUtilVector_(OrgApacheXmlUtilsQName *name, JavaUtilVector *keyDeclarations);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXalanTransformerKeyIterator)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgApacheXalanTransformerKeyIterator")
