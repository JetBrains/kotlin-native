//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xalan/serialize/SerializerUtils.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXalanSerializeSerializerUtils")
#ifdef RESTRICT_OrgApacheXalanSerializeSerializerUtils
#define INCLUDE_ALL_OrgApacheXalanSerializeSerializerUtils 0
#else
#define INCLUDE_ALL_OrgApacheXalanSerializeSerializerUtils 1
#endif
#undef RESTRICT_OrgApacheXalanSerializeSerializerUtils

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheXalanSerializeSerializerUtils_) && (INCLUDE_ALL_OrgApacheXalanSerializeSerializerUtils || defined(INCLUDE_OrgApacheXalanSerializeSerializerUtils))
#define OrgApacheXalanSerializeSerializerUtils_

@class OrgApacheXpathObjectsXObject;
@class OrgApacheXpathXPathContext;
@protocol OrgApacheXmlDtmDTM;
@protocol OrgApacheXmlSerializerSerializationHandler;

/*!
 @brief Class that contains only static methods that are used to "serialize",
  these methods are used by Xalan and are not in org.apache.xml.serializer
  because they have dependancies on the packages org.apache.xpath or org.
 apache.xml.dtm or org.apache.xalan.transformer. The package org.apache.xml.
  serializer should not depend on Xalan or XSLTC.
 */
@interface OrgApacheXalanSerializeSerializerUtils : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Copy an DOM attribute to the created output element, executing
  attribute templates as need be, and processing the xsl:use
  attribute.
 @param handler SerializationHandler to which the attributes are added.
 @param attr Attribute node to add to SerializationHandler.
 @throw TransformerException
 */
+ (void)addAttributeWithOrgApacheXmlSerializerSerializationHandler:(id<OrgApacheXmlSerializerSerializationHandler>)handler
                                                           withInt:(jint)attr;

/*!
 @brief Copy DOM attributes to the result element.
 @param src Source node with the attributes
 @throw TransformerException
 */
+ (void)addAttributesWithOrgApacheXmlSerializerSerializationHandler:(id<OrgApacheXmlSerializerSerializationHandler>)handler
                                                            withInt:(jint)src;

/*!
 @brief This function checks to make sure a given prefix is really
  declared.It might not be, because it may be an excluded prefix.
 If it's not, it still needs to be declared at this point.
  TODO: This needs to be done at an earlier stage in the game... -sb
  NEEDSDOC @@param dtm
  NEEDSDOC @@param namespace
 @throw org.xml.sax.SAXException
 */
+ (void)ensureNamespaceDeclDeclaredWithOrgApacheXmlSerializerSerializationHandler:(id<OrgApacheXmlSerializerSerializationHandler>)handler
                                                           withOrgApacheXmlDtmDTM:(id<OrgApacheXmlDtmDTM>)dtm
                                                                          withInt:(jint)namespace_;

/*!
 @brief Returns whether a namespace is defined
 @param attr Namespace attribute node
 @param dtm The DTM that owns attr.
 @return True if the namespace is already defined in
  list of namespaces
 */
+ (jboolean)isDefinedNSDeclWithOrgApacheXmlSerializerSerializationHandler:(id<OrgApacheXmlSerializerSerializationHandler>)serializer
                                                                  withInt:(jint)attr
                                                   withOrgApacheXmlDtmDTM:(id<OrgApacheXmlDtmDTM>)dtm;

/*!
 @brief Given a result tree fragment, walk the tree and
  output it to the SerializationHandler.
 @param obj Result tree fragment object
 @param support XPath context for the result tree fragment
 @throw org.xml.sax.SAXException
 */
+ (void)outputResultTreeFragmentWithOrgApacheXmlSerializerSerializationHandler:(id<OrgApacheXmlSerializerSerializationHandler>)handler
                                              withOrgApacheXpathObjectsXObject:(OrgApacheXpathObjectsXObject *)obj
                                                withOrgApacheXpathXPathContext:(OrgApacheXpathXPathContext *)support;

/*!
 @brief Copy <KBD>xmlns:</KBD> attributes in if not already in scope.
 As a quick hack to support ClonerToResultTree, this can also be used
  to copy an individual namespace node.
 @param src Source Node  NEEDSDOC @@param type
   NEEDSDOC @@param dtm
 @throw TransformerException
 */
+ (void)processNSDeclsWithOrgApacheXmlSerializerSerializationHandler:(id<OrgApacheXmlSerializerSerializationHandler>)handler
                                                             withInt:(jint)src
                                                             withInt:(jint)type
                                              withOrgApacheXmlDtmDTM:(id<OrgApacheXmlDtmDTM>)dtm;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXalanSerializeSerializerUtils)

FOUNDATION_EXPORT void OrgApacheXalanSerializeSerializerUtils_init(OrgApacheXalanSerializeSerializerUtils *self);

FOUNDATION_EXPORT OrgApacheXalanSerializeSerializerUtils *new_OrgApacheXalanSerializeSerializerUtils_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXalanSerializeSerializerUtils *create_OrgApacheXalanSerializeSerializerUtils_init(void);

FOUNDATION_EXPORT void OrgApacheXalanSerializeSerializerUtils_addAttributeWithOrgApacheXmlSerializerSerializationHandler_withInt_(id<OrgApacheXmlSerializerSerializationHandler> handler, jint attr);

FOUNDATION_EXPORT void OrgApacheXalanSerializeSerializerUtils_addAttributesWithOrgApacheXmlSerializerSerializationHandler_withInt_(id<OrgApacheXmlSerializerSerializationHandler> handler, jint src);

FOUNDATION_EXPORT void OrgApacheXalanSerializeSerializerUtils_outputResultTreeFragmentWithOrgApacheXmlSerializerSerializationHandler_withOrgApacheXpathObjectsXObject_withOrgApacheXpathXPathContext_(id<OrgApacheXmlSerializerSerializationHandler> handler, OrgApacheXpathObjectsXObject *obj, OrgApacheXpathXPathContext *support);

FOUNDATION_EXPORT void OrgApacheXalanSerializeSerializerUtils_processNSDeclsWithOrgApacheXmlSerializerSerializationHandler_withInt_withInt_withOrgApacheXmlDtmDTM_(id<OrgApacheXmlSerializerSerializationHandler> handler, jint src, jint type, id<OrgApacheXmlDtmDTM> dtm);

FOUNDATION_EXPORT jboolean OrgApacheXalanSerializeSerializerUtils_isDefinedNSDeclWithOrgApacheXmlSerializerSerializationHandler_withInt_withOrgApacheXmlDtmDTM_(id<OrgApacheXmlSerializerSerializationHandler> serializer, jint attr, id<OrgApacheXmlDtmDTM> dtm);

FOUNDATION_EXPORT void OrgApacheXalanSerializeSerializerUtils_ensureNamespaceDeclDeclaredWithOrgApacheXmlSerializerSerializationHandler_withOrgApacheXmlDtmDTM_withInt_(id<OrgApacheXmlSerializerSerializationHandler> handler, id<OrgApacheXmlDtmDTM> dtm, jint namespace_);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXalanSerializeSerializerUtils)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgApacheXalanSerializeSerializerUtils")
