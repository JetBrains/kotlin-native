//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xalan/templates/ElemCopy.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXalanTemplatesElemCopy")
#ifdef RESTRICT_OrgApacheXalanTemplatesElemCopy
#define INCLUDE_ALL_OrgApacheXalanTemplatesElemCopy 0
#else
#define INCLUDE_ALL_OrgApacheXalanTemplatesElemCopy 1
#endif
#undef RESTRICT_OrgApacheXalanTemplatesElemCopy

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheXalanTemplatesElemCopy_) && (INCLUDE_ALL_OrgApacheXalanTemplatesElemCopy || defined(INCLUDE_OrgApacheXalanTemplatesElemCopy))
#define OrgApacheXalanTemplatesElemCopy_

#define RESTRICT_OrgApacheXalanTemplatesElemUse 1
#define INCLUDE_OrgApacheXalanTemplatesElemUse 1
#include "org/apache/xalan/templates/ElemUse.h"

@class OrgApacheXalanTransformerTransformerImpl;

/*!
 @brief Implement xsl:copy.
 @code

   <!ELEMENT xsl:copy %template;>
   <!ATTLIST xsl:copy
    %space-att;
    use-attribute-sets %qnames; #IMPLIED 
  >
   
@endcode
 - seealso: <a href="http://www.w3.org/TR/xslt#copying">copying in XSLT Specification</a>
 */
@interface OrgApacheXalanTemplatesElemCopy : OrgApacheXalanTemplatesElemUse
@property (readonly, class) jlong serialVersionUID NS_SWIFT_NAME(serialVersionUID);

+ (jlong)serialVersionUID;

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief The xsl:copy element provides an easy way of copying the current node.
 Executing this function creates a copy of the current node into the
  result tree. 
 <p>The namespace nodes of the current node are automatically
  copied as well, but the attributes and children of the node are not
  automatically copied. The content of the xsl:copy element is a
  template for the attributes and children of the created node;
  the content is instantiated only for nodes of types that can have
  attributes or children (i.e. root nodes and element nodes).</p>
  <p>The root node is treated specially because the root node of the
  result tree is created implicitly. When the current node is the
  root node, xsl:copy will not create a root node, but will just use
  the content template.</p>
 @param transformer non-null reference to the the current transform-time state.
 @throw TransformerException
 */
- (void)executeWithOrgApacheXalanTransformerTransformerImpl:(OrgApacheXalanTransformerTransformerImpl *)transformer;

/*!
 @brief Return the node name.
 @return This element's name
 */
- (NSString *)getNodeName;

/*!
 @brief Get an int constant identifying the type of element.
 - seealso: org.apache.xalan.templates.Constants
 @return The token ID for this element
 */
- (jint)getXSLToken;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXalanTemplatesElemCopy)

inline jlong OrgApacheXalanTemplatesElemCopy_get_serialVersionUID(void);
#define OrgApacheXalanTemplatesElemCopy_serialVersionUID 5478580783896941384LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXalanTemplatesElemCopy, serialVersionUID, jlong)

FOUNDATION_EXPORT void OrgApacheXalanTemplatesElemCopy_init(OrgApacheXalanTemplatesElemCopy *self);

FOUNDATION_EXPORT OrgApacheXalanTemplatesElemCopy *new_OrgApacheXalanTemplatesElemCopy_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXalanTemplatesElemCopy *create_OrgApacheXalanTemplatesElemCopy_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXalanTemplatesElemCopy)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgApacheXalanTemplatesElemCopy")
