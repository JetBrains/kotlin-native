//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xml/utils/DOM2Helper.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXmlUtilsDOM2Helper")
#ifdef RESTRICT_OrgApacheXmlUtilsDOM2Helper
#define INCLUDE_ALL_OrgApacheXmlUtilsDOM2Helper 0
#else
#define INCLUDE_ALL_OrgApacheXmlUtilsDOM2Helper 1
#endif
#undef RESTRICT_OrgApacheXmlUtilsDOM2Helper

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheXmlUtilsDOM2Helper_) && (INCLUDE_ALL_OrgApacheXmlUtilsDOM2Helper || defined(INCLUDE_OrgApacheXmlUtilsDOM2Helper))
#define OrgApacheXmlUtilsDOM2Helper_

#define RESTRICT_OrgApacheXmlUtilsDOMHelper 1
#define INCLUDE_OrgApacheXmlUtilsDOMHelper 1
#include "org/apache/xml/utils/DOMHelper.h"

@class OrgXmlSaxInputSource;
@protocol OrgW3cDomDocument;
@protocol OrgW3cDomElement;
@protocol OrgW3cDomNode;

/*!
 */
@interface OrgApacheXmlUtilsDOM2Helper : OrgApacheXmlUtilsDOMHelper

#pragma mark Public

/*!
 @brief Construct an instance.
 */
- (instancetype __nonnull)init;

/*!
 @brief Check node to see if it was created by a DOM implementation
  that this helper is intended to support.This is currently
  disabled, and assumes all nodes are acceptable rather than checking
  that they implement org.apache.xerces.dom.NodeImpl.
 @param node The node to be tested.
 @throw TransformerExceptionif the node is not one which this
  DOM2Helper can support. If we return without throwing the exception,
  the node is compatable.
 */
- (void)checkNodeWithOrgW3cDomNode:(id<OrgW3cDomNode>)node;

/*!
 @brief Query which document this helper is currently operating on.
 @return The DOM Document node for this document.
 - seealso: #setDocument
 */
- (id<OrgW3cDomDocument>)getDocument;

/*!
 @brief Given an XML ID, return the element.This requires assistance from the
  DOM and parser, and is meaningful only in the context of a DTD 
  or schema which declares attributes as being of type ID.
 This
  information may or may not be available in all parsers, may or
  may not be available for specific documents, and may or may not
  be available when validation is not turned on.
 @param id_ The ID to search for, as a String.
 @param doc The document to search within, as a DOM Document node.
 @return DOM Element node with an attribute of type ID whose value
  uniquely matches the requested id string, or null if there isn't
  such an element or if the DOM can't answer the question for other
  reasons.
 */
- (id<OrgW3cDomElement>)getElementByIDWithNSString:(NSString *)id_
                             withOrgW3cDomDocument:(id<OrgW3cDomDocument>)doc;

/*!
 @brief Returns the local name of the given node, as defined by the
  XML Namespaces specification.This is prepared to handle documents
  built using DOM Level 1 methods by falling back upon explicitly
  parsing the node name.
 @param n Node to be examined
 @return String containing the local name, or null if the node
  was not assigned a Namespace.
 */
- (NSString *)getLocalNameOfNodeWithOrgW3cDomNode:(id<OrgW3cDomNode>)n;

/*!
 @brief Returns the Namespace Name (Namespace URI) for the given node.
 In a Level 2 DOM, you can ask the node itself. Note, however, that
  doing so conflicts with our decision in getLocalNameOfNode not
  to trust the that the DOM was indeed created using the Level 2
  methods. If Level 1 methods were used, these two functions will
  disagree with each other. 
 <p>
  TODO: Reconcile with getLocalNameOfNode.
 @param n Node to be examined
 @return String containing the Namespace URI bound to this DOM node
  at the time the Node was created.
 */
- (NSString *)getNamespaceOfNodeWithOrgW3cDomNode:(id<OrgW3cDomNode>)n;

/*!
 @brief Get the XPath-model parent of a node.This version takes advantage
  of the DOM Level 2 Attr.ownerElement() method; the base version we
  would otherwise inherit is prepared to fall back on exhaustively
  walking the document to find an Attr's parent.
 @param node Node to be examined
 @return the DOM parent of the input node, if there is one, or the
  ownerElement if the input node is an Attr, or null if the node is
  a Document, a DocumentFragment, or an orphan.
 */
+ (id<OrgW3cDomNode>)getParentOfNodeWithOrgW3cDomNode:(id<OrgW3cDomNode>)node;

/*!
 @brief Figure out whether node2 should be considered as being later
  in the document than node1, in Document Order as defined
  by the XPath model.This may not agree with the ordering defined
  by other XML applications.
 <p>
  There are some cases where ordering isn't defined, and neither are
  the results of this function -- though we'll generally return true. 
 <p>
  TODO: Make sure this does the right thing with attribute nodes!!!
 @param node1 DOM Node to perform position comparison on.
 @param node2 DOM Node to perform position comparison on .
 @return false if node2 comes before node1, otherwise return true.
  You can think of this as  
 <code>(node1.documentOrderPosition &lt;= node2.documentOrderPosition)</code>.
 */
+ (jboolean)isNodeAfterWithOrgW3cDomNode:(id<OrgW3cDomNode>)node1
                       withOrgW3cDomNode:(id<OrgW3cDomNode>)node2;

/*!
 @brief Parse an XML document.
 <p>Right now the Xerces DOMParser class is used.  This needs
  fixing, either via jaxp, or via some other, standard method.</p>
  
 <p>The application can use this method to instruct the SAX parser
  to begin parsing an XML document from any valid input
  source (a character stream, a byte stream, or a URI).</p>
  
 <p>Applications may not invoke this method while a parse is in
  progress (they should create a new Parser instead for each
  additional XML document).  Once a parse is complete, an
  application may reuse the same Parser object, possibly with a
  different input source.</p>
 @param source The input source for the top-level of the         XML document.
 @throw TransformerExceptionif any checked exception is thrown.
 */
- (void)parseWithOrgXmlSaxInputSource:(OrgXmlSaxInputSource *)source;

/*!
 @brief Specify which document this helper is currently operating on.
 @param doc The DOM Document node for this document.
 - seealso: #getDocument
 */
- (void)setDocumentWithOrgW3cDomDocument:(id<OrgW3cDomDocument>)doc;

/*!
 @brief Returns true if the DOM implementation handled by this helper
  supports the SAX ContentHandler interface.
 @return true (since Xerces does).
 */
- (jboolean)supportsSAX;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXmlUtilsDOM2Helper)

FOUNDATION_EXPORT void OrgApacheXmlUtilsDOM2Helper_init(OrgApacheXmlUtilsDOM2Helper *self);

FOUNDATION_EXPORT OrgApacheXmlUtilsDOM2Helper *new_OrgApacheXmlUtilsDOM2Helper_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlUtilsDOM2Helper *create_OrgApacheXmlUtilsDOM2Helper_init(void);

FOUNDATION_EXPORT jboolean OrgApacheXmlUtilsDOM2Helper_isNodeAfterWithOrgW3cDomNode_withOrgW3cDomNode_(id<OrgW3cDomNode> node1, id<OrgW3cDomNode> node2);

FOUNDATION_EXPORT id<OrgW3cDomNode> OrgApacheXmlUtilsDOM2Helper_getParentOfNodeWithOrgW3cDomNode_(id<OrgW3cDomNode> node);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlUtilsDOM2Helper)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgApacheXmlUtilsDOM2Helper")
