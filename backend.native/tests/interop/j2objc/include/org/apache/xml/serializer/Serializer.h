//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xml/serializer/Serializer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXmlSerializerSerializer")
#ifdef RESTRICT_OrgApacheXmlSerializerSerializer
#define INCLUDE_ALL_OrgApacheXmlSerializerSerializer 0
#else
#define INCLUDE_ALL_OrgApacheXmlSerializerSerializer 1
#endif
#undef RESTRICT_OrgApacheXmlSerializerSerializer

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheXmlSerializerSerializer_) && (INCLUDE_ALL_OrgApacheXmlSerializerSerializer || defined(INCLUDE_OrgApacheXmlSerializerSerializer))
#define OrgApacheXmlSerializerSerializer_

@class JavaIoOutputStream;
@class JavaIoWriter;
@class JavaUtilProperties;
@protocol OrgApacheXmlSerializerDOMSerializer;
@protocol OrgXmlSaxContentHandler;

/*!
 @brief The Serializer interface is implemented by a serializer to enable users to: 
 <ul>
  <li>get and set streams or writers 
 <li>configure the serializer with key/value properties 
 <li>get an org.xml.sax.ContentHandler or a DOMSerializer to provide input to 
 </ul>
 <p>
  Here is an example using the asContentHandler() method: 
 @code

  java.util.Properties props = 
    OutputPropertiesFactory.getDefaultMethodProperties(Method.TEXT);
  Serializer ser = SerializerFactory.getSerializer(props);
  java.io.PrintStream ostream = System.out; 
  ser.setOutputStream(ostream); 
  // Provide the SAX input events
  ContentHandler handler = ser.asContentHandler();
  handler.startDocument();
  char[] chars = { 'a', 'b', 'c' };
  handler.characters(chars, 0, chars.length);
  handler.endDocument(); 
  ser.reset(); // get ready to use the serializer for another document
               // of the same output method (TEXT).
 @endcode
   
 <p>
  As an alternate to supplying a series of SAX events as input through the 
  ContentHandler interface, the input to serialize may be given as a DOM.  
 <p>
  For example: 
 @code

  org.w3c.dom.Document     inputDoc;
  org.apache.xml.serializer.Serializer   ser;
  java.io.Writer owriter; 
  java.util.Properties props = 
    OutputPropertiesFactory.getDefaultMethodProperties(Method.XML);
  Serializer ser = SerializerFactory.getSerializer(props);
  owriter = ...;  // create a writer to serialize the document to
  ser.setWriter( owriter ); 
  inputDoc = ...; // create the DOM document to be serialized
  DOMSerializer dser = ser.asDOMSerializer(); // a DOM will be serialized
  dser.serialize(inputDoc); // serialize the DOM, sending output to owriter 
  ser.reset(); // get ready to use the serializer for another document
               // of the same output method. 
  
@endcode
  
  This interface is a public API.
 - seealso: Method
 - seealso: OutputPropertiesFactory
 - seealso: SerializerFactory
 - seealso: DOMSerializer
 - seealso: ContentHandler
 */
@protocol OrgApacheXmlSerializerSerializer < JavaObject >

/*!
 @brief Specifies an output stream to which the document should be
  serialized.This method should not be called while the
  serializer is in the process of serializing a document.
 <p>
  The encoding specified in the output <code>Properties</code> is used, or
  if no encoding was specified, the default for the selected
  output method. 
 <p>
  Only one of setWriter() or setOutputStream() should be called.
 @param output The output stream
 */
- (void)setOutputStreamWithJavaIoOutputStream:(JavaIoOutputStream *)output;

/*!
 @brief Get the output stream where the events will be serialized to.
 @return reference to the result stream, or null if only a writer was
  set.
 */
- (JavaIoOutputStream *)getOutputStream;

/*!
 @brief Specifies a writer to which the document should be serialized.
 This method should not be called while the serializer is in
  the process of serializing a document. 
 <p>
  The encoding specified for the output <code>Properties</code> must be
  identical to the output format used with the writer.  
 <p>
  Only one of setWriter() or setOutputStream() should be called.
 @param writer The output writer stream
 */
- (void)setWriterWithJavaIoWriter:(JavaIoWriter *)writer;

/*!
 @brief Get the character stream where the events will be serialized to.
 @return Reference to the result Writer, or null.
 */
- (JavaIoWriter *)getWriter;

/*!
 @brief Specifies an output format for this serializer.It the
  serializer has already been associated with an output format,
  it will switch to the new format.
 This method should not be
  called while the serializer is in the process of serializing
  a document. 
 <p>
  The standard property keys supported are: "method", "version", "encoding",
  "omit-xml-declaration", "standalone", doctype-public",
  "doctype-system", "cdata-section-elements", "indent", "media-type". 
  These property keys and their values are described in the XSLT recommendation,
  see {@@link <a href="http://www.w3.org/TR/1999/REC-xslt-19991116"> XSLT 1.0 recommendation</a>}
  <p>
  The non-standard property keys supported are defined in <code>OutputPropertiesFactory</code>.
  
 <p>
  This method can be called multiple times before a document is serialized. Each 
  time it is called more, or over-riding property values, can be specified. One 
  property value that can not be changed is that of the "method" property key. 
 <p>
  The value of the "cdata-section-elements" property key is a whitespace
  separated list of elements. If the element is in a namespace then 
  value is passed in this format: {uri}localName  
 <p>
  If the "cdata-section-elements" key is specified on multiple calls
  to this method the set of elements specified in the value
  is not replaced from one call to the
  next, but it is cumulative across the calls.
 @param format The output format to use, as a set of key/value pairs.
 */
- (void)setOutputFormatWithJavaUtilProperties:(JavaUtilProperties *)format;

/*!
 @brief Returns the output format properties for this serializer.
 @return The output format key/value pairs in use.
 */
- (JavaUtilProperties *)getOutputFormat;

/*!
 @brief Return a <code>ContentHandler</code> interface to provide SAX input to.
 Through the returned object the document to be serailized,
  as a series of SAX events, can be provided to the serialzier.
  If the serializer does not support the <code>ContentHandler</code>
  interface, it will return null. 
 <p>
  In principle only one of asDOMSerializer() or asContentHander() 
  should be called.
 @return A <code>ContentHandler</code> interface into this serializer,
   or null if the serializer is not SAX 2 capable
 @throw IOExceptionAn I/O exception occured
 */
- (id<OrgXmlSaxContentHandler>)asContentHandler;

/*!
 @brief Return a <code>DOMSerializer</code> interface into this serializer.
 Through the returned object the document to be serialized,
  a DOM, can be provided to the serializer.
  If the serializer does not support the <code>DOMSerializer</code>
  interface, it should return null. 
 <p>
  In principle only one of asDOMSerializer() or asContentHander() 
  should be called.
 @return A <code>DOMSerializer</code> interface into this serializer,
   or null if the serializer is not DOM capable
 @throw IOExceptionAn I/O exception occured
 */
- (id<OrgApacheXmlSerializerDOMSerializer>)asDOMSerializer;

/*!
 @brief This method resets the serializer.
 If this method returns true, the
  serializer may be used for subsequent serialization of new
  documents. It is possible to change the output format and
  output stream prior to serializing, or to reuse the existing
  output format and output stream or writer.
 @return True if serializer has been reset and can be reused
 */
- (jboolean)reset;

/*!
 @brief Return an Object into this serializer to be cast to a DOM3Serializer.
 Through the returned object the document to be serialized,
  a DOM (Level 3), can be provided to the serializer.
  If the serializer does not support casting to a <code>DOM3Serializer</code>
  interface, it should return null. 
 <p>
  In principle only one of asDOM3Serializer() or asContentHander() 
  should be called.
 @return An Object to be cast to a DOM3Serializer interface into this serializer,
   or null if the serializer is not DOM capable
 @throw IOExceptionAn I/O exception occured
 */
- (id)asDOM3Serializer;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXmlSerializerSerializer)

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlSerializerSerializer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgApacheXmlSerializerSerializer")
