//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xml/dtm/ref/DTMManagerDefault.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXmlDtmRefDTMManagerDefault")
#ifdef RESTRICT_OrgApacheXmlDtmRefDTMManagerDefault
#define INCLUDE_ALL_OrgApacheXmlDtmRefDTMManagerDefault 0
#else
#define INCLUDE_ALL_OrgApacheXmlDtmRefDTMManagerDefault 1
#endif
#undef RESTRICT_OrgApacheXmlDtmRefDTMManagerDefault

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheXmlDtmRefDTMManagerDefault_) && (INCLUDE_ALL_OrgApacheXmlDtmRefDTMManagerDefault || defined(INCLUDE_OrgApacheXmlDtmRefDTMManagerDefault))
#define OrgApacheXmlDtmRefDTMManagerDefault_

#define RESTRICT_OrgApacheXmlDtmDTMManager 1
#define INCLUDE_OrgApacheXmlDtmDTMManager 1
#include "org/apache/xml/dtm/DTMManager.h"

@class IOSIntArray;
@class IOSObjectArray;
@class OrgApacheXmlDtmRefExpandedNameTable;
@class OrgApacheXmlUtilsXMLReaderManager;
@class OrgXmlSaxHelpersDefaultHandler;
@protocol JavaxXmlTransformSource;
@protocol OrgApacheXmlDtmDTM;
@protocol OrgApacheXmlDtmDTMFilter;
@protocol OrgApacheXmlDtmDTMIterator;
@protocol OrgApacheXmlDtmDTMWSFilter;
@protocol OrgApacheXmlUtilsPrefixResolver;
@protocol OrgW3cDomNode;
@protocol OrgXmlSaxXMLReader;

/*!
 @brief The default implementation for the DTMManager.
 %REVIEW% There is currently a reentrancy issue, since the finalizer
  for XRTreeFrag (which runs in the GC thread) wants to call
  DTMManager.release(), and may do so at the same time that the main
  transformation thread is accessing the manager. Our current solution is
  to make most of the manager's methods <code>synchronized</code>.
  Early tests suggest that doing so is not causing a significant
  performance hit in Xalan. However, it should be noted that there
  is a possible alternative solution: rewrite release() so it merely
  posts a request for release onto a threadsafe queue, and explicitly
  process that queue on an infrequent basis during main-thread
  activity (eg, when getDTM() is invoked). The downside of that solution
  would be a greater delay before the DTM's storage is actually released
  for reuse.
 */
@interface OrgApacheXmlDtmRefDTMManagerDefault : OrgApacheXmlDtmDTMManager {
 @public
  /*!
   @brief Map from DTM identifier numbers to DTM objects that this manager manages.
   One DTM may have several prefix numbers, if extended node indexing
  is in use; in that case, m_dtm_offsets[] will used to control which
  prefix maps to which section of the DTM. 
  This array grows as necessary; see addDTM(). 
  This array grows as necessary; see addDTM(). Growth is uncommon... but
  access needs to be blindingly fast since it's used in node addressing.
   */
  IOSObjectArray *m_dtms_;
  /*!
   @brief Map from DTM identifier numbers to offsets.For small DTMs with a 
  single identifier, this will always be 0.
   In overflow addressing, where
  additional identifiers are allocated to access nodes beyond the range of
  a single Node Handle, this table is used to map the handle's node field
  into the actual node identifier. 
  This array grows as necessary; see addDTM(). 
  This array grows as necessary; see addDTM(). Growth is uncommon... but
  access needs to be blindingly fast since it's used in node addressing.
  (And at the moment, that includes accessing it from DTMDefaultBase,
  which is why this is not Protected or Private.)
   */
  IOSIntArray *m_dtm_offsets_;
  /*!
   @brief The cache for XMLReader objects to be used if the user did not
  supply an XMLReader for a SAXSource or supplied a StreamSource.
   */
  OrgApacheXmlUtilsXMLReaderManager *m_readerManager_;
  /*!
   @brief The default implementation of ContentHandler, DTDHandler and ErrorHandler.
   */
  OrgXmlSaxHelpersDefaultHandler *m_defaultHandler_;
}

#pragma mark Public

/*!
 @brief Constructor DTMManagerDefault
 */
- (instancetype __nonnull)init;

/*!
 @brief Add a DTM to the DTM table.This convenience call adds it as the 
  "base DTM ID", with offset 0.
 The other version of addDTM should 
  be used if you want to add "extended" DTM IDs with nonzero offsets.
 @param dtm Should be a valid reference to a DTM.
 @param id_ Integer DTM ID to be bound to this DTM
 */
- (void)addDTMWithOrgApacheXmlDtmDTM:(id<OrgApacheXmlDtmDTM>)dtm
                             withInt:(jint)id_;

/*!
 @brief Add a DTM to the DTM table.
 @param dtm Should be a valid reference to a DTM.
 @param id_ Integer DTM ID to be bound to this DTM.
 @param offset Integer addressing offset. The internal DTM Node ID is  obtained by adding this offset to the node-number field of the 
   public DTM Handle. For the first DTM ID accessing each DTM, this is 0;
   for overflow addressing it will be a multiple of 1
  < < IDENT_DTM_NODE_BITS.
 */
- (void)addDTMWithOrgApacheXmlDtmDTM:(id<OrgApacheXmlDtmDTM>)dtm
                             withInt:(jint)id_
                             withInt:(jint)offset;

/*!
 @brief Method createDocumentFragment
  NEEDSDOC (createDocumentFragment) @@return
 */
- (id<OrgApacheXmlDtmDTM>)createDocumentFragment;

/*!
 @brief NEEDSDOC Method createDTMIterator
  NEEDSDOC @@param node
  NEEDSDOC (createDTMIterator) @@return
 */
- (id<OrgApacheXmlDtmDTMIterator>)createDTMIteratorWithInt:(jint)node;

/*!
 @brief NEEDSDOC Method createDTMIterator
  NEEDSDOC @@param whatToShow
  NEEDSDOC @@param filter
  NEEDSDOC @@param entityReferenceExpansion
  NEEDSDOC (createDTMIterator) @@return
 */
- (id<OrgApacheXmlDtmDTMIterator>)createDTMIteratorWithInt:(jint)whatToShow
                              withOrgApacheXmlDtmDTMFilter:(id<OrgApacheXmlDtmDTMFilter>)filter
                                               withBoolean:(jboolean)entityReferenceExpansion;

/*!
 @brief NEEDSDOC Method createDTMIterator
  NEEDSDOC @@param xpathCompiler
  NEEDSDOC @@param pos
  NEEDSDOC (createDTMIterator) @@return
 */
- (id<OrgApacheXmlDtmDTMIterator>)createDTMIteratorWithId:(id)xpathCompiler
                                                  withInt:(jint)pos;

/*!
 @brief NEEDSDOC Method createDTMIterator
  NEEDSDOC @@param xpathString
  NEEDSDOC @@param presolver
  NEEDSDOC (createDTMIterator) @@return
 */
- (id<OrgApacheXmlDtmDTMIterator>)createDTMIteratorWithNSString:(NSString *)xpathString
                            withOrgApacheXmlUtilsPrefixResolver:(id<OrgApacheXmlUtilsPrefixResolver>)presolver;

/*!
 @brief Return the DTM object containing a representation of this node.
 @param nodeHandle DTM Handle indicating which node to retrieve
 @return a reference to the DTM object containing this node.
 */
- (id<OrgApacheXmlDtmDTM>)getDTMWithInt:(jint)nodeHandle;

/*!
 @brief Get an instance of a DTM, loaded with the content from the
  specified source.If the unique flag is true, a new instance will
  always be returned.
 Otherwise it is up to the DTMManager to return a
  new instance or an instance that it already created and may be being used
  by someone else. 
  A bit of magic in this implementation: If the source is null, unique is true,
  and incremental and doIndexing are both false, we return an instance of
  SAX2RTFDTM, which see. 
  (I think more parameters will need to be added for error handling, and entity
  resolution, and more explicit control of the RTF situation).
 @param source the specification of the source object.
 @param unique true if the returned DTM must be unique, probably because it  is going to be mutated.
 @param whiteSpaceFilter Enables filtering of whitespace nodes, and may                          be null.
 @param incremental true if the DTM should be built incrementally, if                     possible.
 @param doIndexing true if the caller considers it worth it to use                    indexing schemes.
 @return a non-null DTM reference.
 */
- (id<OrgApacheXmlDtmDTM>)getDTMWithJavaxXmlTransformSource:(id<JavaxXmlTransformSource>)source
                                                withBoolean:(jboolean)unique
                             withOrgApacheXmlDtmDTMWSFilter:(id<OrgApacheXmlDtmDTMWSFilter>)whiteSpaceFilter
                                                withBoolean:(jboolean)incremental
                                                withBoolean:(jboolean)doIndexing;

/*!
 @brief Given a W3C DOM node, try and return a DTM handle.
 Note: calling this may be non-optimal, and there is no guarantee that
  the node will be found in any particular DTM.
 @param node Non-null reference to a DOM node.
 @return a valid DTM handle.
 */
- (jint)getDTMHandleFromNodeWithOrgW3cDomNode:(id<OrgW3cDomNode>)node;

/*!
 @brief Given a DTM, find the ID number in the DTM tables which addresses
  the start of the document.If overflow addressing is in use, other
  DTM IDs may also be assigned to this DTM.
 @param dtm The DTM which (hopefully) contains this node.
 @return The DTM ID (as the high bits of a NodeHandle, not as our
  internal index), or -1 if the DTM doesn't belong to this manager.
 */
- (jint)getDTMIdentityWithOrgApacheXmlDtmDTM:(id<OrgApacheXmlDtmDTM>)dtm;

/*!
 @brief return the expanded name table.
 NEEDSDOC @@param dtm
  NEEDSDOC ($objectName$) @@return
 */
- (OrgApacheXmlDtmRefExpandedNameTable *)getExpandedNameTableWithOrgApacheXmlDtmDTM:(id<OrgApacheXmlDtmDTM>)dtm;

/*!
 @brief Get the first free DTM ID available.
 %OPT% Linear search is inefficient!
 */
- (jint)getFirstFreeDTMID;

/*!
 @brief This method returns the SAX2 parser to use with the InputSource
  obtained from this URI.
 It may return null if any SAX2-conformant XML parser can be used,
  or if getInputSource() will also return null. The parser must
  be free for use (i.e., not currently in use for another parse().
  After use of the parser is completed, the releaseXMLReader(XMLReader)
  must be called.
 @param inputSource The value returned from the URIResolver.
 @return a SAX2 XMLReader to use to resolve the inputSource argument.
 @return non-null XMLReader reference ready to parse.
 */
- (id<OrgXmlSaxXMLReader>)getXMLReaderWithJavaxXmlTransformSource:(id<JavaxXmlTransformSource>)inputSource;

/*!
 @brief Release the DTMManager's reference(s) to a DTM, making it unmanaged.
 This is typically done as part of returning the DTM to the heap after
  we're done with it.
 @param dtm the DTM to be released.
 @param shouldHardDelete If false, this call is a suggestion rather than an  order, and we may not actually release the DTM. This is intended to 
   support intelligent caching of documents... which is not implemented
   in this version of the DTM manager.
 @return true if the DTM was released, false if shouldHardDelete was set
  and we decided not to.
 */
- (jboolean)release__WithOrgApacheXmlDtmDTM:(id<OrgApacheXmlDtmDTM>)dtm
                                withBoolean:(jboolean)shouldHardDelete;

/*!
 @brief Indicates that the XMLReader object is no longer in use for the transform.
 Note that the getXMLReader method may return an XMLReader that was
  specified on the SAXSource object by the application code.  Such a
  reader should still be passed to releaseXMLReader, but the reader manager
  will only re-use XMLReaders that it created.
 @param reader The XMLReader to be released.
 */
- (void)releaseXMLReaderWithOrgXmlSaxXMLReader:(id<OrgXmlSaxXMLReader>)reader;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXmlDtmRefDTMManagerDefault)

J2OBJC_FIELD_SETTER(OrgApacheXmlDtmRefDTMManagerDefault, m_dtms_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheXmlDtmRefDTMManagerDefault, m_dtm_offsets_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheXmlDtmRefDTMManagerDefault, m_readerManager_, OrgApacheXmlUtilsXMLReaderManager *)
J2OBJC_FIELD_SETTER(OrgApacheXmlDtmRefDTMManagerDefault, m_defaultHandler_, OrgXmlSaxHelpersDefaultHandler *)

FOUNDATION_EXPORT void OrgApacheXmlDtmRefDTMManagerDefault_init(OrgApacheXmlDtmRefDTMManagerDefault *self);

FOUNDATION_EXPORT OrgApacheXmlDtmRefDTMManagerDefault *new_OrgApacheXmlDtmRefDTMManagerDefault_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlDtmRefDTMManagerDefault *create_OrgApacheXmlDtmRefDTMManagerDefault_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlDtmRefDTMManagerDefault)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgApacheXmlDtmRefDTMManagerDefault")
