//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xml/utils/XMLChar.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXmlUtilsXMLChar")
#ifdef RESTRICT_OrgApacheXmlUtilsXMLChar
#define INCLUDE_ALL_OrgApacheXmlUtilsXMLChar 0
#else
#define INCLUDE_ALL_OrgApacheXmlUtilsXMLChar 1
#endif
#undef RESTRICT_OrgApacheXmlUtilsXMLChar

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheXmlUtilsXMLChar_) && (INCLUDE_ALL_OrgApacheXmlUtilsXMLChar || defined(INCLUDE_OrgApacheXmlUtilsXMLChar))
#define OrgApacheXmlUtilsXMLChar_

/*!
 @brief This class defines the basic XML character properties.The data
  in this class can be used to verify that a character is a valid
  XML character or if the character is a space, name start, or name
  character.
 <p>
  A series of convenience methods are supplied to ease the burden
  of the developer. Because inlining the checks can improve per
  character performance, the tables of character properties are
  public. Using the character as an index into the <code>CHARS</code>
  array and applying the appropriate mask flag (e.g. 
 <code>MASK_VALID</code>), yields the same results as calling the
  convenience methods. There is one exception: check the comments
  for the <code>isValid</code> method for details.
 @author Glenn Marcy, IBM
 @author Andy Clark, IBM
 @author Eric Ye, IBM
 @author Arnaud  Le Hors, IBM
 @author Rahul Srivastava, Sun Microsystems Inc.
 @version $Id: XMLChar.java,v 1.7 2002/01/29 01:15:18 lehors Exp $
 */
@interface OrgApacheXmlUtilsXMLChar : NSObject
@property (readonly, class) jint MASK_VALID NS_SWIFT_NAME(MASK_VALID);
@property (readonly, class) jint MASK_SPACE NS_SWIFT_NAME(MASK_SPACE);
@property (readonly, class) jint MASK_NAME_START NS_SWIFT_NAME(MASK_NAME_START);
@property (readonly, class) jint MASK_NAME NS_SWIFT_NAME(MASK_NAME);
@property (readonly, class) jint MASK_PUBID NS_SWIFT_NAME(MASK_PUBID);
@property (readonly, class) jint MASK_CONTENT NS_SWIFT_NAME(MASK_CONTENT);
@property (readonly, class) jint MASK_NCNAME_START NS_SWIFT_NAME(MASK_NCNAME_START);
@property (readonly, class) jint MASK_NCNAME NS_SWIFT_NAME(MASK_NCNAME);

+ (jint)MASK_VALID;

+ (jint)MASK_SPACE;

+ (jint)MASK_NAME_START;

+ (jint)MASK_NAME;

+ (jint)MASK_PUBID;

+ (jint)MASK_CONTENT;

+ (jint)MASK_NCNAME_START;

+ (jint)MASK_NCNAME;

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Returns the high surrogate of a supplemental character
 @param c The supplemental character to "split".
 */
+ (jchar)highSurrogateWithInt:(jint)c;

/*!
 @brief Returns true if the specified character can be considered content.
 @param c The character to check.
 */
+ (jboolean)isContentWithInt:(jint)c;

/*!
 @brief Returns whether the given character is a high surrogate
 @param c The character to check.
 */
+ (jboolean)isHighSurrogateWithInt:(jint)c;

/*!
 @brief Returns true if the specified character is invalid.
 @param c The character to check.
 */
+ (jboolean)isInvalidWithInt:(jint)c;

/*!
 @brief Returns whether the given character is a low surrogate
 @param c The character to check.
 */
+ (jboolean)isLowSurrogateWithInt:(jint)c;

/*!
 @brief Returns true if the specified character can be considered markup.
 Markup characters include '&lt;', '&amp;', and '%'.
 @param c The character to check.
 */
+ (jboolean)isMarkupWithInt:(jint)c;

/*!
 @brief Returns true if the specified character is a valid name
  character as defined by production [4] in the XML 1.0
  specification.
 @param c The character to check.
 */
+ (jboolean)isNameWithInt:(jint)c;

/*!
 @brief Returns true if the specified character is a valid name start
  character as defined by production [5] in the XML 1.0
  specification.
 @param c The character to check.
 */
+ (jboolean)isNameStartWithInt:(jint)c;

/*!
 @brief Returns true if the specified character is a valid NCName
  character as defined by production [5] in Namespaces in XML
  recommendation.
 @param c The character to check.
 */
+ (jboolean)isNCNameWithInt:(jint)c;

/*!
 @brief Returns true if the specified character is a valid NCName start
  character as defined by production [4] in Namespaces in XML
  recommendation.
 @param c The character to check.
 */
+ (jboolean)isNCNameStartWithInt:(jint)c;

/*!
 @brief Returns true if the specified character is a valid Pubid
  character as defined by production [13] in the XML 1.0
  specification.
 @param c The character to check.
 */
+ (jboolean)isPubidWithInt:(jint)c;

/*!
 @brief Returns true if the specified character is a space character
  as defined by production [3] in the XML 1.0 specification.
 @param c The character to check.
 */
+ (jboolean)isSpaceWithInt:(jint)c;

/*!
 @brief Returns true if the specified character is a supplemental character.
 @param c The character to check.
 */
+ (jboolean)isSupplementalWithInt:(jint)c;

/*!
 @brief Returns true if the specified character is valid.This method
  also checks the surrogate character range from 0x10000 to 0x10FFFF.
 <p>
  If the program chooses to apply the mask directly to the 
 <code>CHARS</code> array, then they are responsible for checking
  the surrogate character range.
 @param c The character to check.
 */
+ (jboolean)isValidWithInt:(jint)c;

/*!
 @brief Returns true if the encoding name is a valid IANA encoding.
 This method does not verify that there is a decoder available
  for this encoding, only that the characters are valid for an
  IANA encoding name.
 @param ianaEncoding The IANA encoding name.
 */
+ (jboolean)isValidIANAEncodingWithNSString:(NSString *)ianaEncoding;

/*!
 @brief Returns true if the encoding name is a valid Java encoding.
 This method does not verify that there is a decoder available
  for this encoding, only that the characters are valid for an
  Java encoding name.
 @param javaEncoding The Java encoding name.
 */
+ (jboolean)isValidJavaEncodingWithNSString:(NSString *)javaEncoding;

/*!
 @brief Check to see if a string is a valid Name according to [5]
  in the XML 1.0 Recommendation
 @param name string to check
 @return true if name is a valid Name
 */
+ (jboolean)isValidNameWithNSString:(NSString *)name;

/*!
 @brief Check to see if a string is a valid NCName according to [4]
  from the XML Namespaces 1.0 Recommendation
 @param ncName string to check
 @return true if name is a valid NCName
 */
+ (jboolean)isValidNCNameWithNSString:(NSString *)ncName;

/*!
 @brief Check to see if a string is a valid Nmtoken according to [7]
  in the XML 1.0 Recommendation
 @param nmtoken string to check
 @return true if nmtoken is a valid Nmtoken
 */
+ (jboolean)isValidNmtokenWithNSString:(NSString *)nmtoken;

/*!
 @brief Simple check to determine if qname is legal.If it returns false
  then <param>str</param> is illegal; if it returns true then  
 <param>str</param> is legal.
 */
+ (jboolean)isValidQNameWithNSString:(NSString *)str;

/*!
 @brief Returns the low surrogate of a supplemental character
 @param c The supplemental character to "split".
 */
+ (jchar)lowSurrogateWithInt:(jint)c;

/*!
 @brief Returns true the supplemental character corresponding to the given
  surrogates.
 @param h The high surrogate.
 @param l The low surrogate.
 */
+ (jint)supplementalWithChar:(jchar)h
                    withChar:(jchar)l;

@end

J2OBJC_STATIC_INIT(OrgApacheXmlUtilsXMLChar)

/*!
 @brief Valid character mask.
 */
inline jint OrgApacheXmlUtilsXMLChar_get_MASK_VALID(void);
#define OrgApacheXmlUtilsXMLChar_MASK_VALID 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlUtilsXMLChar, MASK_VALID, jint)

/*!
 @brief Space character mask.
 */
inline jint OrgApacheXmlUtilsXMLChar_get_MASK_SPACE(void);
#define OrgApacheXmlUtilsXMLChar_MASK_SPACE 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlUtilsXMLChar, MASK_SPACE, jint)

/*!
 @brief Name start character mask.
 */
inline jint OrgApacheXmlUtilsXMLChar_get_MASK_NAME_START(void);
#define OrgApacheXmlUtilsXMLChar_MASK_NAME_START 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlUtilsXMLChar, MASK_NAME_START, jint)

/*!
 @brief Name character mask.
 */
inline jint OrgApacheXmlUtilsXMLChar_get_MASK_NAME(void);
#define OrgApacheXmlUtilsXMLChar_MASK_NAME 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlUtilsXMLChar, MASK_NAME, jint)

/*!
 @brief Pubid character mask.
 */
inline jint OrgApacheXmlUtilsXMLChar_get_MASK_PUBID(void);
#define OrgApacheXmlUtilsXMLChar_MASK_PUBID 16
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlUtilsXMLChar, MASK_PUBID, jint)

/*!
 @brief Content character mask.Special characters are those that can
  be considered the start of markup, such as '&lt;' and '&amp;'.
 The various newline characters are considered special as well.
  All other valid XML characters can be considered content. 
 <p>
  This is an optimization for the inner loop of character scanning.
 */
inline jint OrgApacheXmlUtilsXMLChar_get_MASK_CONTENT(void);
#define OrgApacheXmlUtilsXMLChar_MASK_CONTENT 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlUtilsXMLChar, MASK_CONTENT, jint)

/*!
 @brief NCName start character mask.
 */
inline jint OrgApacheXmlUtilsXMLChar_get_MASK_NCNAME_START(void);
#define OrgApacheXmlUtilsXMLChar_MASK_NCNAME_START 64
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlUtilsXMLChar, MASK_NCNAME_START, jint)

/*!
 @brief NCName character mask.
 */
inline jint OrgApacheXmlUtilsXMLChar_get_MASK_NCNAME(void);
#define OrgApacheXmlUtilsXMLChar_MASK_NCNAME 128
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlUtilsXMLChar, MASK_NCNAME, jint)

FOUNDATION_EXPORT void OrgApacheXmlUtilsXMLChar_init(OrgApacheXmlUtilsXMLChar *self);

FOUNDATION_EXPORT OrgApacheXmlUtilsXMLChar *new_OrgApacheXmlUtilsXMLChar_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlUtilsXMLChar *create_OrgApacheXmlUtilsXMLChar_init(void);

FOUNDATION_EXPORT jboolean OrgApacheXmlUtilsXMLChar_isSupplementalWithInt_(jint c);

FOUNDATION_EXPORT jint OrgApacheXmlUtilsXMLChar_supplementalWithChar_withChar_(jchar h, jchar l);

FOUNDATION_EXPORT jchar OrgApacheXmlUtilsXMLChar_highSurrogateWithInt_(jint c);

FOUNDATION_EXPORT jchar OrgApacheXmlUtilsXMLChar_lowSurrogateWithInt_(jint c);

FOUNDATION_EXPORT jboolean OrgApacheXmlUtilsXMLChar_isHighSurrogateWithInt_(jint c);

FOUNDATION_EXPORT jboolean OrgApacheXmlUtilsXMLChar_isLowSurrogateWithInt_(jint c);

FOUNDATION_EXPORT jboolean OrgApacheXmlUtilsXMLChar_isValidWithInt_(jint c);

FOUNDATION_EXPORT jboolean OrgApacheXmlUtilsXMLChar_isInvalidWithInt_(jint c);

FOUNDATION_EXPORT jboolean OrgApacheXmlUtilsXMLChar_isContentWithInt_(jint c);

FOUNDATION_EXPORT jboolean OrgApacheXmlUtilsXMLChar_isMarkupWithInt_(jint c);

FOUNDATION_EXPORT jboolean OrgApacheXmlUtilsXMLChar_isSpaceWithInt_(jint c);

FOUNDATION_EXPORT jboolean OrgApacheXmlUtilsXMLChar_isNameStartWithInt_(jint c);

FOUNDATION_EXPORT jboolean OrgApacheXmlUtilsXMLChar_isNameWithInt_(jint c);

FOUNDATION_EXPORT jboolean OrgApacheXmlUtilsXMLChar_isNCNameStartWithInt_(jint c);

FOUNDATION_EXPORT jboolean OrgApacheXmlUtilsXMLChar_isNCNameWithInt_(jint c);

FOUNDATION_EXPORT jboolean OrgApacheXmlUtilsXMLChar_isPubidWithInt_(jint c);

FOUNDATION_EXPORT jboolean OrgApacheXmlUtilsXMLChar_isValidNameWithNSString_(NSString *name);

FOUNDATION_EXPORT jboolean OrgApacheXmlUtilsXMLChar_isValidNCNameWithNSString_(NSString *ncName);

FOUNDATION_EXPORT jboolean OrgApacheXmlUtilsXMLChar_isValidNmtokenWithNSString_(NSString *nmtoken);

FOUNDATION_EXPORT jboolean OrgApacheXmlUtilsXMLChar_isValidIANAEncodingWithNSString_(NSString *ianaEncoding);

FOUNDATION_EXPORT jboolean OrgApacheXmlUtilsXMLChar_isValidJavaEncodingWithNSString_(NSString *javaEncoding);

FOUNDATION_EXPORT jboolean OrgApacheXmlUtilsXMLChar_isValidQNameWithNSString_(NSString *str);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlUtilsXMLChar)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgApacheXmlUtilsXMLChar")
