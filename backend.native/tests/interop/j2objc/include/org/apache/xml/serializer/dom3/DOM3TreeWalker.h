//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xml/serializer/dom3/DOM3TreeWalker.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXmlSerializerDom3DOM3TreeWalker")
#ifdef RESTRICT_OrgApacheXmlSerializerDom3DOM3TreeWalker
#define INCLUDE_ALL_OrgApacheXmlSerializerDom3DOM3TreeWalker 0
#else
#define INCLUDE_ALL_OrgApacheXmlSerializerDom3DOM3TreeWalker 1
#endif
#undef RESTRICT_OrgApacheXmlSerializerDom3DOM3TreeWalker

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheXmlSerializerDom3DOM3TreeWalker_) && (INCLUDE_ALL_OrgApacheXmlSerializerDom3DOM3TreeWalker || defined(INCLUDE_OrgApacheXmlSerializerDom3DOM3TreeWalker))
#define OrgApacheXmlSerializerDom3DOM3TreeWalker_

@class JavaLangCharacter;
@class JavaUtilProperties;
@class OrgApacheXmlSerializerDom3NamespaceSupport;
@protocol OrgApacheXmlSerializerSerializationHandler;
@protocol OrgW3cDomCDATASection;
@protocol OrgW3cDomComment;
@protocol OrgW3cDomDOMErrorHandler;
@protocol OrgW3cDomDocumentType;
@protocol OrgW3cDomElement;
@protocol OrgW3cDomEntityReference;
@protocol OrgW3cDomLsLSSerializerFilter;
@protocol OrgW3cDomNode;
@protocol OrgW3cDomProcessingInstruction;
@protocol OrgW3cDomText;

/*!
 @brief Built on org.apache.xml.serializer.TreeWalker and adds functionality to
  traverse and serialize a DOM Node (Level 2 or Level 3) as specified in 
  the DOM Level 3 LS Recommedation by evaluating and applying DOMConfiguration 
  parameters and filters if any during serialization.
 */
@interface OrgApacheXmlSerializerDom3DOM3TreeWalker : NSObject {
 @public
  /*!
   @brief Flag indicating whether following text to be processed is raw text
   */
  jboolean fNextIsRaw_;
  /*!
   @brief stores namespaces in scope
   */
  OrgApacheXmlSerializerDom3NamespaceSupport *fNSBinder_;
  /*!
   @brief stores all namespace bindings on the current element
   */
  OrgApacheXmlSerializerDom3NamespaceSupport *fLocalNSBinder_;
}

#pragma mark Public

/*!
 @brief Perform a pre-order traversal non-recursive style.
 Note that TreeWalker assumes that the subtree is intended to represent 
  a complete (though not necessarily well-formed) document and, during a 
  traversal, startDocument and endDocument will always be issued to the 
  SAX listener.
 @param pos Node in the tree where to start traversal
 @throw TransformerException
 */
- (void)traverseWithOrgW3cDomNode:(id<OrgW3cDomNode>)pos;

/*!
 @brief Perform a pre-order traversal non-recursive style.
 Note that TreeWalker assumes that the subtree is intended to represent 
  a complete (though not necessarily well-formed) document and, during a 
  traversal, startDocument and endDocument will always be issued to the 
  SAX listener.
 @param pos Node in the tree where to start traversal
 @param top Node in the tree where to end traversal
 @throw TransformerException
 */
- (void)traverseWithOrgW3cDomNode:(id<OrgW3cDomNode>)pos
                withOrgW3cDomNode:(id<OrgW3cDomNode>)top;

#pragma mark Protected

/*!
 @brief Applies a filter on the node to serialize
 @param node The Node to serialize
 @return True if the node is to be serialized else false if the node 
          is to be rejected or skipped.
 */
- (jboolean)applyFilterWithOrgW3cDomNode:(id<OrgW3cDomNode>)node
                                 withInt:(jint)nodeType;

/*!
 @brief If the configuration parameter "namespaces" is set to true, this methods
  checks if an entity whose replacement text contains unbound namespace 
  prefixes is referenced in a location where there are no bindings for 
  the namespace prefixes and if so raises a LSException with the error-type
  "unbound-prefix-in-entity-reference"
 @param Node , The EntityReference nodes whose children are to be checked
 */
- (void)checkUnboundPrefixInEntRefWithOrgW3cDomNode:(id<OrgW3cDomNode>)node;

/*!
 @brief End processing of given node
 @param node Node we just finished processing
 @throw org.xml.sax.SAXException
 */
- (void)endNodeWithOrgW3cDomNode:(id<OrgW3cDomNode>)node;

/*!
 @brief Fixes an element's namespace
 @param Node , The element node, whose namespace is to be fixed
 */
- (void)fixupElementNSWithOrgW3cDomNode:(id<OrgW3cDomNode>)node;

/*!
 @brief Initializes fFeatures based on the DOMConfiguration Parameters set.
 @param properties DOMConfiguraiton properties that were set and which are  to be used while serializing the DOM.
 */
- (void)initPropertiesWithJavaUtilProperties:(JavaUtilProperties *)properties OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Checks if an attr node is well-formed, by checking it's Name and value
  for well-formedness.
 @param data The contents of the comment node
 @return a boolean indiacating if the comment is well-formed or not.
 */
- (void)isAttributeWellFormedWithOrgW3cDomNode:(id<OrgW3cDomNode>)node;

/*!
 @brief Checks if an CDATASection node is well-formed, by checking it's data
  for well-formedness.Note that the presence of a CDATA termination mark
  in the contents of a CDATASection is handled by the parameter 
  spli-cdata-sections
 @param data The contents of the comment node
 */
- (void)isCDATASectionWellFormedWithOrgW3cDomCDATASection:(id<OrgW3cDomCDATASection>)node;

/*!
 @brief Checks if a comment node is well-formed
 @param data The contents of the comment node
 @return a boolean indiacating if the comment is well-formed or not.
 */
- (void)isCommentWellFormedWithNSString:(NSString *)data;

/*!
 @brief Checks if an element node is well-formed, by checking its Name for well-formedness.
 @param data The contents of the comment node
 @return a boolean indiacating if the comment is well-formed or not.
 */
- (void)isElementWellFormedWithOrgW3cDomNode:(id<OrgW3cDomNode>)node;

/*!
 @brief Checks if an EntityRefernece node is well-formed, by checking it's node name.Then depending
  on whether it is referenced in Element content or in an Attr Node, checks if the EntityReference
  references an unparsed entity or a external entity and if so throws raises the 
  appropriate well-formedness error.
 @param data The contents of the comment node
 */
- (void)isEntityReferneceWellFormedWithOrgW3cDomEntityReference:(id<OrgW3cDomEntityReference>)node;

/*!
 @brief Checks if a PI node is well-formed, by checking it's Name and data
  for well-formedness.
 @param data The contents of the comment node
 */
- (void)isPIWellFormedWithOrgW3cDomProcessingInstruction:(id<OrgW3cDomProcessingInstruction>)node;

/*!
 @brief Checks if an Text node is well-formed, by checking if it contains invalid
  XML characters.
 @param data The contents of the comment node
 */
- (void)isTextWellFormedWithOrgW3cDomText:(id<OrgW3cDomText>)node;

/*!
 @brief Taken from org.apache.xerces.dom.CoreDocumentImpl
   
  Checks if the given qualified name is legal with respect
  to the version of XML to which this document must conform.
 @param prefix prefix of qualified name
 @param local local part of qualified name
 */
- (jboolean)isValidQNameWithNSString:(NSString *)prefix
                        withNSString:(NSString *)local
                         withBoolean:(jboolean)xml11Version;

/*!
 @brief Checks if a XML character is well-formed.If there is a problem with
  the character a non-null Character is returned else null is returned.
 @param characters A String of characters to be checked for Well-Formedness
 @return Character A reference to the character to be returned that was determined invalid.
 */
- (JavaLangCharacter *)isWFXMLCharWithNSString:(NSString *)chardata;

/*!
 @brief Checks if a XML character is well-formed
 @param characters A String of characters to be checked for Well-Formedness
 @param refInvalidChar A reference to the character to be returned that was determined invalid.
 */
- (jboolean)isWFXMLCharWithNSString:(NSString *)chardata
              withJavaLangCharacter:(JavaLangCharacter *)refInvalidChar;

/*!
 @brief Taken from org.apache.xerces.dom.CoreDocumentImpl 
  Check the string against XML's definition of acceptable names for
  elements and attributes and so on using the XMLCharacterProperties
  utility class
 */
- (jboolean)isXMLNameWithNSString:(NSString *)s
                      withBoolean:(jboolean)xml11Version;

/*!
 @brief Records local namespace declarations, to be used for normalization later
 @param Node , The element node, whose namespace declarations are to be recorded
 */
- (void)recordLocalNSDeclWithOrgW3cDomNode:(id<OrgW3cDomNode>)node;

/*!
 @brief Serializes the Attr Nodes of an Element.
 @param node The OwnerElement whose Attr Nodes are to be serialized.
 */
- (void)serializeAttListWithOrgW3cDomElement:(id<OrgW3cDomElement>)node;

/*!
 @brief Serializes an CDATASection Node.
 @param node The CDATASection Node to serialize
 */
- (void)serializeCDATASectionWithOrgW3cDomCDATASection:(id<OrgW3cDomCDATASection>)node;

/*!
 @brief Serializes a Comment Node.
 @param node The Comment Node to serialize
 */
- (void)serializeCommentWithOrgW3cDomComment:(id<OrgW3cDomComment>)node;

/*!
 @brief Serializes a Document Type Node.
 @param node The Docuemnt Type Node to serialize
 @param bStart Invoked at the start or end of node.  Default true.
 */
- (void)serializeDocTypeWithOrgW3cDomDocumentType:(id<OrgW3cDomDocumentType>)node
                                      withBoolean:(jboolean)bStart;

/*!
 @brief Serializes an Element Node.
 @param node The Element Node to serialize
 @param bStart Invoked at the start or end of node.
 */
- (void)serializeElementWithOrgW3cDomElement:(id<OrgW3cDomElement>)node
                                 withBoolean:(jboolean)bStart;

/*!
 @brief Serializes an EntityReference Node.
 @param node The EntityReference Node to serialize
 @param bStart Inicates if called from start or endNode
 */
- (void)serializeEntityReferenceWithOrgW3cDomEntityReference:(id<OrgW3cDomEntityReference>)node
                                                 withBoolean:(jboolean)bStart;

/*!
 @brief Serializes an ProcessingInstruction Node.
 @param node The ProcessingInstruction Node to serialize
 */
- (void)serializePIWithOrgW3cDomProcessingInstruction:(id<OrgW3cDomProcessingInstruction>)node;

/*!
 @brief Serializes an Text Node.
 @param node The Text Node to serialize
 */
- (void)serializeTextWithOrgW3cDomText:(id<OrgW3cDomText>)node;

/*!
 @brief Start processing given node
 @param node Node to process
 @throw org.xml.sax.SAXException
 */
- (void)startNodeWithOrgW3cDomNode:(id<OrgW3cDomNode>)node;

#pragma mark Package-Private

/*!
 @brief Constructor.
 @param contentHandler serialHandler The implemention of the SerializationHandler interface
 */
- (instancetype __nonnull)initPackagePrivateWithOrgApacheXmlSerializerSerializationHandler:(id<OrgApacheXmlSerializerSerializationHandler>)serialHandler
                                                              withOrgW3cDomDOMErrorHandler:(id<OrgW3cDomDOMErrorHandler>)errHandler
                                                         withOrgW3cDomLsLSSerializerFilter:(id<OrgW3cDomLsLSSerializerFilter>)filter
                                                                              withNSString:(NSString *)newLine;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgApacheXmlSerializerDom3DOM3TreeWalker)

J2OBJC_FIELD_SETTER(OrgApacheXmlSerializerDom3DOM3TreeWalker, fNSBinder_, OrgApacheXmlSerializerDom3NamespaceSupport *)
J2OBJC_FIELD_SETTER(OrgApacheXmlSerializerDom3DOM3TreeWalker, fLocalNSBinder_, OrgApacheXmlSerializerDom3NamespaceSupport *)

FOUNDATION_EXPORT void OrgApacheXmlSerializerDom3DOM3TreeWalker_initPackagePrivateWithOrgApacheXmlSerializerSerializationHandler_withOrgW3cDomDOMErrorHandler_withOrgW3cDomLsLSSerializerFilter_withNSString_(OrgApacheXmlSerializerDom3DOM3TreeWalker *self, id<OrgApacheXmlSerializerSerializationHandler> serialHandler, id<OrgW3cDomDOMErrorHandler> errHandler, id<OrgW3cDomLsLSSerializerFilter> filter, NSString *newLine);

FOUNDATION_EXPORT OrgApacheXmlSerializerDom3DOM3TreeWalker *new_OrgApacheXmlSerializerDom3DOM3TreeWalker_initPackagePrivateWithOrgApacheXmlSerializerSerializationHandler_withOrgW3cDomDOMErrorHandler_withOrgW3cDomLsLSSerializerFilter_withNSString_(id<OrgApacheXmlSerializerSerializationHandler> serialHandler, id<OrgW3cDomDOMErrorHandler> errHandler, id<OrgW3cDomLsLSSerializerFilter> filter, NSString *newLine) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlSerializerDom3DOM3TreeWalker *create_OrgApacheXmlSerializerDom3DOM3TreeWalker_initPackagePrivateWithOrgApacheXmlSerializerSerializationHandler_withOrgW3cDomDOMErrorHandler_withOrgW3cDomLsLSSerializerFilter_withNSString_(id<OrgApacheXmlSerializerSerializationHandler> serialHandler, id<OrgW3cDomDOMErrorHandler> errHandler, id<OrgW3cDomLsLSSerializerFilter> filter, NSString *newLine);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlSerializerDom3DOM3TreeWalker)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgApacheXmlSerializerDom3DOM3TreeWalker")
