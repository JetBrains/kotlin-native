//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xml/dtm/ref/DTMStringPool.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXmlDtmRefDTMStringPool")
#ifdef RESTRICT_OrgApacheXmlDtmRefDTMStringPool
#define INCLUDE_ALL_OrgApacheXmlDtmRefDTMStringPool 0
#else
#define INCLUDE_ALL_OrgApacheXmlDtmRefDTMStringPool 1
#endif
#undef RESTRICT_OrgApacheXmlDtmRefDTMStringPool

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheXmlDtmRefDTMStringPool_) && (INCLUDE_ALL_OrgApacheXmlDtmRefDTMStringPool || defined(INCLUDE_OrgApacheXmlDtmRefDTMStringPool))
#define OrgApacheXmlDtmRefDTMStringPool_

@class IOSIntArray;
@class IOSObjectArray;
@class JavaUtilVector;
@class OrgApacheXmlUtilsIntVector;

/*!
 @brief <p>DTMStringPool is an "interning" mechanism for strings.
 It will
  create a stable 1:1 mapping between a set of string values and a set of
  integer index values, so the integers can be used to reliably and
  uniquely identify (and when necessary retrieve) the strings.</p>
  
 <p>Design Priorities: 
 <ul>
  <li>String-to-index lookup speed is critical.</li>
  <li>Index-to-String lookup speed is slightly less so.</li>
  <li>Threadsafety is not guaranteed at this level.
  Enforce that in the application if needed.</li>
  <li>Storage efficiency is an issue but not a huge one.
  It is expected that string pools won't exceed about 2000 entries.</li>
  </ul>
  </p>
  
 <p>Implementation detail: A standard Hashtable is relatively
  inefficient when looking up primitive int values, especially when
  we're already maintaining an int-to-string vector.  So I'm
  maintaining a simple hash chain within this class.</p>
  
 <p>NOTE: There is nothing in the code that has a real dependency upon
  String. It would work with any object type that implements reliable
  .hashCode() and .equals() operations. The API enforces Strings because
  it's safer that way, but this could trivially be turned into a general
  ObjectPool if one was needed.</p>
  
 <p>Status: Passed basic test in main().</p>
 */
@interface OrgApacheXmlDtmRefDTMStringPool : NSObject {
 @public
  JavaUtilVector *m_intToString_;
  IOSIntArray *m_hashStart_;
  OrgApacheXmlUtilsIntVector *m_hashChain_;
}
@property (readonly, class) jint HASHPRIME NS_SWIFT_NAME(HASHPRIME);
@property (readonly, class) jint NULL_ NS_SWIFT_NAME(NULL_);

+ (jint)HASHPRIME;

+ (jint)NULL_;

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Create a DTMStringPool using the given chain size
 @param chainSize The size of the hash chain vector
 */
- (instancetype __nonnull)initWithInt:(jint)chainSize;

/*!
 @return string whose value is uniquely identified by this integer index.
 @throw java.lang.ArrayIndexOutOfBoundsException
 if index doesn't map to a string.
 */
- (NSString *)indexToStringWithInt:(jint)i;

/*!
 @brief Command-line unit test driver.This test relies on the fact that
  this version of the pool assigns indices consecutively, starting
  from zero, as new unique strings are encountered.
 */
+ (void)mainWithNSStringArray:(IOSObjectArray *)args;

- (void)removeAllElements;

/*!
 @return integer index uniquely identifying the value of this string.
 */
- (jint)stringToIndexWithNSString:(NSString *)s;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXmlDtmRefDTMStringPool)

J2OBJC_FIELD_SETTER(OrgApacheXmlDtmRefDTMStringPool, m_intToString_, JavaUtilVector *)
J2OBJC_FIELD_SETTER(OrgApacheXmlDtmRefDTMStringPool, m_hashStart_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheXmlDtmRefDTMStringPool, m_hashChain_, OrgApacheXmlUtilsIntVector *)

inline jint OrgApacheXmlDtmRefDTMStringPool_get_HASHPRIME(void);
#define OrgApacheXmlDtmRefDTMStringPool_HASHPRIME 101
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlDtmRefDTMStringPool, HASHPRIME, jint)

inline jint OrgApacheXmlDtmRefDTMStringPool_get_NULL(void);
#define OrgApacheXmlDtmRefDTMStringPool_NULL -1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlDtmRefDTMStringPool, NULL, jint)

FOUNDATION_EXPORT void OrgApacheXmlDtmRefDTMStringPool_initWithInt_(OrgApacheXmlDtmRefDTMStringPool *self, jint chainSize);

FOUNDATION_EXPORT OrgApacheXmlDtmRefDTMStringPool *new_OrgApacheXmlDtmRefDTMStringPool_initWithInt_(jint chainSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlDtmRefDTMStringPool *create_OrgApacheXmlDtmRefDTMStringPool_initWithInt_(jint chainSize);

FOUNDATION_EXPORT void OrgApacheXmlDtmRefDTMStringPool_init(OrgApacheXmlDtmRefDTMStringPool *self);

FOUNDATION_EXPORT OrgApacheXmlDtmRefDTMStringPool *new_OrgApacheXmlDtmRefDTMStringPool_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlDtmRefDTMStringPool *create_OrgApacheXmlDtmRefDTMStringPool_init(void);

FOUNDATION_EXPORT void OrgApacheXmlDtmRefDTMStringPool_mainWithNSStringArray_(IOSObjectArray *args);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlDtmRefDTMStringPool)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgApacheXmlDtmRefDTMStringPool")
