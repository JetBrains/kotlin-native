//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xml/utils/DOMBuilder.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXmlUtilsDOMBuilder")
#ifdef RESTRICT_OrgApacheXmlUtilsDOMBuilder
#define INCLUDE_ALL_OrgApacheXmlUtilsDOMBuilder 0
#else
#define INCLUDE_ALL_OrgApacheXmlUtilsDOMBuilder 1
#endif
#undef RESTRICT_OrgApacheXmlUtilsDOMBuilder

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheXmlUtilsDOMBuilder_) && (INCLUDE_ALL_OrgApacheXmlUtilsDOMBuilder || defined(INCLUDE_OrgApacheXmlUtilsDOMBuilder))
#define OrgApacheXmlUtilsDOMBuilder_

#define RESTRICT_OrgXmlSaxContentHandler 1
#define INCLUDE_OrgXmlSaxContentHandler 1
#include "org/xml/sax/ContentHandler.h"

#define RESTRICT_OrgXmlSaxExtLexicalHandler 1
#define INCLUDE_OrgXmlSaxExtLexicalHandler 1
#include "org/xml/sax/ext/LexicalHandler.h"

@class IOSCharArray;
@class JavaIoWriter;
@class JavaUtilStack;
@class JavaUtilVector;
@protocol OrgW3cDomDocument;
@protocol OrgW3cDomDocumentFragment;
@protocol OrgW3cDomElement;
@protocol OrgW3cDomNode;
@protocol OrgXmlSaxAttributes;
@protocol OrgXmlSaxLocator;

/*!
 @brief This class takes SAX events (in addition to some extra events
  that SAX doesn't handle yet) and adds the result to a document
  or document fragment.
 */
@interface OrgApacheXmlUtilsDOMBuilder : NSObject < OrgXmlSaxContentHandler, OrgXmlSaxExtLexicalHandler > {
 @public
  /*!
   @brief Root document
   */
  id<OrgW3cDomDocument> m_doc_;
  /*!
   @brief Current node
   */
  id<OrgW3cDomNode> m_currentNode_;
  /*!
   @brief The root node
   */
  id<OrgW3cDomNode> m_root_;
  /*!
   @brief The next sibling node
   */
  id<OrgW3cDomNode> m_nextSibling_;
  /*!
   @brief First node of document fragment or null if not a DocumentFragment
   */
  id<OrgW3cDomDocumentFragment> m_docFrag_;
  /*!
   @brief Vector of element nodes
   */
  JavaUtilStack *m_elemStack_;
  /*!
   @brief Namespace support
   */
  JavaUtilVector *m_prefixMappings_;
  /*!
   @brief Flag indicating that we are processing a CData section
   */
  jboolean m_inCData_;
}

#pragma mark Public

/*!
 @brief DOMBuilder instance constructor...it will add the DOM nodes
  to the document.
 @param doc Root document
 */
- (instancetype __nonnull)initWithOrgW3cDomDocument:(id<OrgW3cDomDocument>)doc;

/*!
 @brief DOMBuilder instance constructor...it will add the DOM nodes
  to the document fragment.
 @param doc Root document
 @param docFrag Document fragment
 */
- (instancetype __nonnull)initWithOrgW3cDomDocument:(id<OrgW3cDomDocument>)doc
                      withOrgW3cDomDocumentFragment:(id<OrgW3cDomDocumentFragment>)docFrag;

/*!
 @brief DOMBuilder instance constructor...it will add the DOM nodes
  to the document fragment.
 @param doc Root document
 @param node Current node
 */
- (instancetype __nonnull)initWithOrgW3cDomDocument:(id<OrgW3cDomDocument>)doc
                                  withOrgW3cDomNode:(id<OrgW3cDomNode>)node;

/*!
 @brief Receive notification of cdata.
 <p>The Parser will call this method to report each chunk of
  character data.  SAX parsers may return all contiguous character
  data in a single chunk, or they may split it into several
  chunks; however, all of the characters in any single event
  must come from the same external entity, so that the Locator
  provides useful information.</p>
  
 <p>The application must not attempt to read from the array
  outside of the specified range.</p>
  
 <p>Note that some parsers will report whitespace using the
  ignorableWhitespace() method rather than this one (validating
  parsers must do so).</p>
 @param ch The characters from the XML document.
 @param start The start position in the array.
 @param length The number of characters to read from the array.
 - seealso: #ignorableWhitespace
 - seealso: org.xml.sax.Locator
 */
- (void)cdataWithCharArray:(IOSCharArray *)ch
                   withInt:(jint)start
                   withInt:(jint)length;

/*!
 @brief Receive notification of character data.
 <p>The Parser will call this method to report each chunk of
  character data.  SAX parsers may return all contiguous character
  data in a single chunk, or they may split it into several
  chunks; however, all of the characters in any single event
  must come from the same external entity, so that the Locator
  provides useful information.</p>
  
 <p>The application must not attempt to read from the array
  outside of the specified range.</p>
  
 <p>Note that some parsers will report whitespace using the
  ignorableWhitespace() method rather than this one (validating
  parsers must do so).</p>
 @param ch The characters from the XML document.
 @param start The start position in the array.
 @param length The number of characters to read from the array.
 - seealso: #ignorableWhitespace
 - seealso: org.xml.sax.Locator
 */
- (void)charactersWithCharArray:(IOSCharArray *)ch
                        withInt:(jint)start
                        withInt:(jint)length;

/*!
 @brief If available, when the disable-output-escaping attribute is used,
  output raw text without escaping.A PI will be inserted in front
  of the node with the name "lotusxsl-next-is-raw" and a value of
  "formatter-to-dom".
 @param ch Array containing the characters
 @param start Index to start of characters in the array
 @param length Number of characters in the array
 */
- (void)charactersRawWithCharArray:(IOSCharArray *)ch
                           withInt:(jint)start
                           withInt:(jint)length;

/*!
 @brief Report an XML comment anywhere in the document.
 This callback will be used for comments inside or outside the
  document element, including comments in the external DTD
  subset (if read).
 @param ch An array holding the characters in the comment.
 @param start The starting position in the array.
 @param length The number of characters to use from the array.
 */
- (void)commentWithCharArray:(IOSCharArray *)ch
                     withInt:(jint)start
                     withInt:(jint)length;

/*!
 @brief Report the end of a CDATA section.
 - seealso: #startCDATA
 */
- (void)endCDATA;

/*!
 @brief Receive notification of the end of a document.
 <p>The SAX parser will invoke this method only once, and it will
  be the last method invoked during the parse.  The parser shall
  not invoke this method until it has either abandoned parsing
  (because of an unrecoverable error) or reached the end of
  input.</p>
 */
- (void)endDocument;

/*!
 @brief Report the end of DTD declarations.
 - seealso: #startDTD
 */
- (void)endDTD;

/*!
 @brief Receive notification of the end of an element.
 <p>The SAX parser will invoke this method at the end of every
  element in the XML document; there will be a corresponding
  startElement() event for every endElement() event (even when the
  element is empty).</p>
  
 <p>If the element name has a namespace prefix, the prefix will
  still be attached to the name.</p>
 @param ns the namespace of the element
 @param localName The local part of the qualified name of the element
 @param name The element name
 */
- (void)endElementWithNSString:(NSString *)ns
                  withNSString:(NSString *)localName
                  withNSString:(NSString *)name;

/*!
 @brief Report the end of an entity.
 @param name The name of the entity that is ending.
 - seealso: #startEntity
 */
- (void)endEntityWithNSString:(NSString *)name;

/*!
 @brief End the scope of a prefix-URI mapping.
 <p>See startPrefixMapping for details.  This event will
  always occur after the corresponding endElement event,
  but the order of endPrefixMapping events is not otherwise
  guaranteed.</p>
 @param prefix The prefix that was being mapping.
 - seealso: #startPrefixMapping
 - seealso: #endElement
 */
- (void)endPrefixMappingWithNSString:(NSString *)prefix;

/*!
 @brief Receive notivication of a entityReference.
 @param name name of the entity reference
 */
- (void)entityReferenceWithNSString:(NSString *)name;

/*!
 @brief Get the node currently being processed.
 @return the current node being processed
 */
- (id<OrgW3cDomNode>)getCurrentNode;

/*!
 @brief Return the next sibling node.
 @return the next sibling node.
 */
- (id<OrgW3cDomNode>)getNextSibling;

/*!
 @brief Get the root document or DocumentFragment of the DOM being created.
 @return The root document or document fragment if not null
 */
- (id<OrgW3cDomNode>)getRootDocument;

/*!
 @brief Get the root node of the DOM tree.
 */
- (id<OrgW3cDomNode>)getRootNode;

/*!
 @brief Return null since there is no Writer for this class.
 @return null
 */
- (JavaIoWriter *)getWriter;

/*!
 @brief Receive notification of ignorable whitespace in element content.
 <p>Validating Parsers must use this method to report each chunk
  of ignorable whitespace (see the W3C XML 1.0 recommendation,
  section 2.10): non-validating parsers may also use this method
  if they are capable of parsing and using content models.</p>
  
 <p>SAX parsers may return all contiguous whitespace in a single
  chunk, or they may split it into several chunks; however, all of
  the characters in any single event must come from the same
  external entity, so that the Locator provides useful
  information.</p>
  
 <p>The application must not attempt to read from the array
  outside of the specified range.</p>
 @param ch The characters from the XML document.
 @param start The start position in the array.
 @param length The number of characters to read from the array.
 - seealso: #characters
 */
- (void)ignorableWhitespaceWithCharArray:(IOSCharArray *)ch
                                 withInt:(jint)start
                                 withInt:(jint)length;

/*!
 @brief Receive notification of a processing instruction.
 <p>The Parser will invoke this method once for each processing
  instruction found: note that processing instructions may occur
  before or after the main document element.</p>
  
 <p>A SAX parser should never report an XML declaration (XML 1.0,
  section 2.8) or a text declaration (XML 1.0, section 4.3.1)
  using this method.</p>
 @param target The processing instruction target.
 @param data The processing instruction data, or null if         none was supplied.
 */
- (void)processingInstructionWithNSString:(NSString *)target
                             withNSString:(NSString *)data;

/*!
 @brief Receive an object for locating the origin of SAX document events.
 <p>SAX parsers are strongly encouraged (though not absolutely
  required) to supply a locator: if it does so, it must supply
  the locator to the application by invoking this method before
  invoking any of the other methods in the ContentHandler
  interface.</p>
  
 <p>The locator allows the application to determine the end
  position of any document-related event, even if the parser is
  not reporting an error.  Typically, the application will
  use this information for reporting its own errors (such as
  character content that does not match an application's
  business rules).  The information returned by the locator
  is probably not sufficient for use with a search engine.</p>
  
 <p>Note that the locator will return correct information only
  during the invocation of the events in this interface.  The
  application should not attempt to use it at any other time.</p>
 @param locator An object that can return the location of                 any SAX document event.
 - seealso: org.xml.sax.Locator
 */
- (void)setDocumentLocatorWithOrgXmlSaxLocator:(id<OrgXmlSaxLocator>)locator;

/*!
 @brief Set an ID string to node association in the ID table.
 @param id_ The ID string.
 @param elem The associated ID.
 */
- (void)setIDAttributeWithNSString:(NSString *)id_
              withOrgW3cDomElement:(id<OrgW3cDomElement>)elem;

/*!
 @brief Set the next sibling node, which is where the result nodes 
  should be inserted before.
 @param nextSibling the next sibling node.
 */
- (void)setNextSiblingWithOrgW3cDomNode:(id<OrgW3cDomNode>)nextSibling;

/*!
 @brief Receive notification of a skipped entity.
 <p>The Parser will invoke this method once for each entity
  skipped.  Non-validating processors may skip entities if they
  have not seen the declarations (because, for example, the
  entity was declared in an external DTD subset).  All processors
  may skip external entities, depending on the values of the
  http://xml.org/sax/features/external-general-entities and the
  http://xml.org/sax/features/external-parameter-entities
  properties.</p>
 @param name The name of the skipped entity.  If it is a         parameter entity, the name will begin with '%'.
 */
- (void)skippedEntityWithNSString:(NSString *)name;

/*!
 @brief Report the start of a CDATA section.
 - seealso: #endCDATA
 */
- (void)startCDATA;

/*!
 @brief Receive notification of the beginning of a document.
 <p>The SAX parser will invoke this method only once, before any
  other methods in this interface or in DTDHandler (except for
  setDocumentLocator).</p>
 */
- (void)startDocument;

/*!
 @brief Report the start of DTD declarations, if any.
 Any declarations are assumed to be in the internal subset
  unless otherwise indicated.
 @param name The document type name.
 @param publicId The declared public identifier for the         external DTD subset, or null if none was declared.
 @param systemId The declared system identifier for the         external DTD subset, or null if none was declared.
 - seealso: #endDTD
 - seealso: #startEntity
 */
- (void)startDTDWithNSString:(NSString *)name
                withNSString:(NSString *)publicId
                withNSString:(NSString *)systemId;

/*!
 @brief Receive notification of the beginning of an element.
 <p>The Parser will invoke this method at the beginning of every
  element in the XML document; there will be a corresponding
  endElement() event for every startElement() event (even when the
  element is empty). All of the element's content will be
  reported, in order, before the corresponding endElement()
  event.</p>
  
 <p>If the element name has a namespace prefix, the prefix will
  still be attached.  Note that the attribute list provided will
  contain only attributes with explicit values (specified or
  defaulted): #IMPLIED attributes will be omitted.</p>
 @param ns The namespace of the node
 @param localName The local part of the qualified name
 @param name The element name.
 @param atts The attributes attached to the element, if any.
 - seealso: #endElement
 - seealso: org.xml.sax.Attributes
 */
- (void)startElementWithNSString:(NSString *)ns
                    withNSString:(NSString *)localName
                    withNSString:(NSString *)name
         withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts;

/*!
 @brief Report the beginning of an entity.
 The start and end of the document entity are not reported.
  The start and end of the external DTD subset are reported
  using the pseudo-name "[dtd]".  All other events must be
  properly nested within start/end entity events.
 @param name The name of the entity.  If it is a parameter         entity, the name will begin with '%'.
 - seealso: #endEntity
 - seealso: org.xml.sax.ext.DeclHandler#internalEntityDecl
 - seealso: org.xml.sax.ext.DeclHandler#externalEntityDecl
 */
- (void)startEntityWithNSString:(NSString *)name;

/*!
 @brief Begin the scope of a prefix-URI Namespace mapping.
 <p>The information from this event is not necessary for
  normal Namespace processing: the SAX XML reader will
  automatically replace prefixes for element and attribute
  names when the http://xml.org/sax/features/namespaces
  feature is true (the default).</p>
  
 <p>There are cases, however, when applications need to
  use prefixes in character data or in attribute values,
  where they cannot safely be expanded automatically; the
  start/endPrefixMapping event supplies the information
  to the application to expand prefixes in those contexts
  itself, if necessary.</p>
  
 <p>Note that start/endPrefixMapping events are not
  guaranteed to be properly nested relative to each-other:
  all startPrefixMapping events will occur before the
  corresponding startElement event, and all endPrefixMapping
  events will occur after the corresponding endElement event,
  but their order is not guaranteed.</p>
 @param prefix The Namespace prefix being declared.
 @param uri The Namespace URI the prefix is mapped to.
 - seealso: #endPrefixMapping
 - seealso: #startElement
 */
- (void)startPrefixMappingWithNSString:(NSString *)prefix
                          withNSString:(NSString *)uri;

#pragma mark Protected

/*!
 @brief Append a node to the current container.
 @param newNode New node to append
 */
- (void)appendWithOrgW3cDomNode:(id<OrgW3cDomNode>)newNode;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXmlUtilsDOMBuilder)

J2OBJC_FIELD_SETTER(OrgApacheXmlUtilsDOMBuilder, m_doc_, id<OrgW3cDomDocument>)
J2OBJC_FIELD_SETTER(OrgApacheXmlUtilsDOMBuilder, m_currentNode_, id<OrgW3cDomNode>)
J2OBJC_FIELD_SETTER(OrgApacheXmlUtilsDOMBuilder, m_root_, id<OrgW3cDomNode>)
J2OBJC_FIELD_SETTER(OrgApacheXmlUtilsDOMBuilder, m_nextSibling_, id<OrgW3cDomNode>)
J2OBJC_FIELD_SETTER(OrgApacheXmlUtilsDOMBuilder, m_docFrag_, id<OrgW3cDomDocumentFragment>)
J2OBJC_FIELD_SETTER(OrgApacheXmlUtilsDOMBuilder, m_elemStack_, JavaUtilStack *)
J2OBJC_FIELD_SETTER(OrgApacheXmlUtilsDOMBuilder, m_prefixMappings_, JavaUtilVector *)

FOUNDATION_EXPORT void OrgApacheXmlUtilsDOMBuilder_initWithOrgW3cDomDocument_withOrgW3cDomNode_(OrgApacheXmlUtilsDOMBuilder *self, id<OrgW3cDomDocument> doc, id<OrgW3cDomNode> node);

FOUNDATION_EXPORT OrgApacheXmlUtilsDOMBuilder *new_OrgApacheXmlUtilsDOMBuilder_initWithOrgW3cDomDocument_withOrgW3cDomNode_(id<OrgW3cDomDocument> doc, id<OrgW3cDomNode> node) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlUtilsDOMBuilder *create_OrgApacheXmlUtilsDOMBuilder_initWithOrgW3cDomDocument_withOrgW3cDomNode_(id<OrgW3cDomDocument> doc, id<OrgW3cDomNode> node);

FOUNDATION_EXPORT void OrgApacheXmlUtilsDOMBuilder_initWithOrgW3cDomDocument_withOrgW3cDomDocumentFragment_(OrgApacheXmlUtilsDOMBuilder *self, id<OrgW3cDomDocument> doc, id<OrgW3cDomDocumentFragment> docFrag);

FOUNDATION_EXPORT OrgApacheXmlUtilsDOMBuilder *new_OrgApacheXmlUtilsDOMBuilder_initWithOrgW3cDomDocument_withOrgW3cDomDocumentFragment_(id<OrgW3cDomDocument> doc, id<OrgW3cDomDocumentFragment> docFrag) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlUtilsDOMBuilder *create_OrgApacheXmlUtilsDOMBuilder_initWithOrgW3cDomDocument_withOrgW3cDomDocumentFragment_(id<OrgW3cDomDocument> doc, id<OrgW3cDomDocumentFragment> docFrag);

FOUNDATION_EXPORT void OrgApacheXmlUtilsDOMBuilder_initWithOrgW3cDomDocument_(OrgApacheXmlUtilsDOMBuilder *self, id<OrgW3cDomDocument> doc);

FOUNDATION_EXPORT OrgApacheXmlUtilsDOMBuilder *new_OrgApacheXmlUtilsDOMBuilder_initWithOrgW3cDomDocument_(id<OrgW3cDomDocument> doc) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlUtilsDOMBuilder *create_OrgApacheXmlUtilsDOMBuilder_initWithOrgW3cDomDocument_(id<OrgW3cDomDocument> doc);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlUtilsDOMBuilder)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgApacheXmlUtilsDOMBuilder")
