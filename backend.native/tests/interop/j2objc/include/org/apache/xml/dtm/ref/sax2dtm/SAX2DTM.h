//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xml/dtm/ref/sax2dtm/SAX2DTM.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXmlDtmRefSax2dtmSAX2DTM")
#ifdef RESTRICT_OrgApacheXmlDtmRefSax2dtmSAX2DTM
#define INCLUDE_ALL_OrgApacheXmlDtmRefSax2dtmSAX2DTM 0
#else
#define INCLUDE_ALL_OrgApacheXmlDtmRefSax2dtmSAX2DTM 1
#endif
#undef RESTRICT_OrgApacheXmlDtmRefSax2dtmSAX2DTM

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheXmlDtmRefSax2dtmSAX2DTM_) && (INCLUDE_ALL_OrgApacheXmlDtmRefSax2dtmSAX2DTM || defined(INCLUDE_OrgApacheXmlDtmRefSax2dtmSAX2DTM))
#define OrgApacheXmlDtmRefSax2dtmSAX2DTM_

#define RESTRICT_OrgApacheXmlDtmRefDTMDefaultBaseIterators 1
#define INCLUDE_OrgApacheXmlDtmRefDTMDefaultBaseIterators 1
#include "org/apache/xml/dtm/ref/DTMDefaultBaseIterators.h"

#define RESTRICT_OrgXmlSaxEntityResolver 1
#define INCLUDE_OrgXmlSaxEntityResolver 1
#include "org/xml/sax/EntityResolver.h"

#define RESTRICT_OrgXmlSaxDTDHandler 1
#define INCLUDE_OrgXmlSaxDTDHandler 1
#include "org/xml/sax/DTDHandler.h"

#define RESTRICT_OrgXmlSaxContentHandler 1
#define INCLUDE_OrgXmlSaxContentHandler 1
#include "org/xml/sax/ContentHandler.h"

#define RESTRICT_OrgXmlSaxErrorHandler 1
#define INCLUDE_OrgXmlSaxErrorHandler 1
#include "org/xml/sax/ErrorHandler.h"

#define RESTRICT_OrgXmlSaxExtDeclHandler 1
#define INCLUDE_OrgXmlSaxExtDeclHandler 1
#include "org/xml/sax/ext/DeclHandler.h"

#define RESTRICT_OrgXmlSaxExtLexicalHandler 1
#define INCLUDE_OrgXmlSaxExtLexicalHandler 1
#include "org/xml/sax/ext/LexicalHandler.h"

@class IOSCharArray;
@class JavaUtilHashtable;
@class JavaUtilVector;
@class OrgApacheXmlDtmDTMManager;
@class OrgApacheXmlDtmRefDTMStringPool;
@class OrgApacheXmlDtmRefDTMTreeWalker;
@class OrgApacheXmlUtilsFastStringBuffer;
@class OrgApacheXmlUtilsIntStack;
@class OrgApacheXmlUtilsIntVector;
@class OrgApacheXmlUtilsStringVector;
@class OrgApacheXmlUtilsSuballocatedIntVector;
@class OrgApacheXmlUtilsXMLStringFactory;
@class OrgXmlSaxInputSource;
@class OrgXmlSaxSAXParseException;
@protocol JavaxXmlTransformSource;
@protocol JavaxXmlTransformSourceLocator;
@protocol OrgApacheXmlDtmDTMWSFilter;
@protocol OrgApacheXmlDtmRefIncrementalSAXSource;
@protocol OrgApacheXmlUtilsXMLString;
@protocol OrgXmlSaxAttributes;
@protocol OrgXmlSaxLocator;

/*!
 @brief This class implements a DTM that tends to be optimized more for speed than
  for compactness, that is constructed via SAX2 ContentHandler events.
 */
@interface OrgApacheXmlDtmRefSax2dtmSAX2DTM : OrgApacheXmlDtmRefDTMDefaultBaseIterators < OrgXmlSaxEntityResolver, OrgXmlSaxDTDHandler, OrgXmlSaxContentHandler, OrgXmlSaxErrorHandler, OrgXmlSaxExtDeclHandler, OrgXmlSaxExtLexicalHandler > {
 @public
  /*!
   @brief All the character content, including attribute values, are stored in
  this buffer.
   %REVIEW% Should this have an option of being shared across DTMs?
  Sequentially only; not threadsafe... Currently, I think not.
  %REVIEW% Initial size was pushed way down to reduce weight of RTFs.
  pending reduction in number of RTF DTMs. Now that we're sharing a DTM
  between RTFs, and tail-pruning... consider going back to the larger/faster.
  Made protected rather than private so SAX2RTFDTM can access it.
   */
  OrgApacheXmlUtilsFastStringBuffer *m_chars_;
  /*!
   @brief This vector holds offset and length data.
   */
  OrgApacheXmlUtilsSuballocatedIntVector *m_data_;
  /*!
   @brief The parent stack, needed only for construction.
   Made protected rather than private so SAX2RTFDTM can access it.
   */
  OrgApacheXmlUtilsIntStack *m_parents_;
  /*!
   @brief The current previous node, needed only for construction time.
   Made protected rather than private so SAX2RTFDTM can access it.
   */
  jint m_previous_;
  /*!
   @brief Namespace support, only relevent at construction time.
   Made protected rather than private so SAX2RTFDTM can access it.
   */
  JavaUtilVector *m_prefixMappings_;
  /*!
   @brief Namespace support, only relevent at construction time.
   Made protected rather than private so SAX2RTFDTM can access it.
   */
  OrgApacheXmlUtilsIntStack *m_contextIndexes_;
  /*!
   @brief Type of next characters() event within text block in prgress.
   */
  jint m_textType_;
  /*!
   @brief Type of coalesced text block.See logic in the characters()
  method.
   */
  jint m_coalescedTextType_;
  /*!
   @brief The SAX Document locator
   */
  id<OrgXmlSaxLocator> m_locator_;
  /*!
   @brief We are inside the DTD.This is used for ignoring comments.
   */
  jboolean m_insideDTD_;
  /*!
   @brief Tree Walker for dispatchToEvents.
   */
  OrgApacheXmlDtmRefDTMTreeWalker *m_walker_;
  /*!
   @brief pool of string values that come as strings.
   */
  OrgApacheXmlDtmRefDTMStringPool *m_valuesOrPrefixes_;
  /*!
   @brief End document has been reached.
   Made protected rather than private so SAX2RTFDTM can access it.
   */
  jboolean m_endDocumentOccured_;
  /*!
   @brief Data or qualified name values, one array element for each node.
   */
  OrgApacheXmlUtilsSuballocatedIntVector *m_dataOrQName_;
  /*!
   @brief This table holds the ID string to node associations, for
  XML IDs.
   */
  JavaUtilHashtable *m_idAttributes_;
  /*!
   @brief The starting offset within m_chars for the text or
  CDATA_SECTION node currently being acumulated,
  or -1 if there is no text node in progress
   */
  jint m_textPendingStart_;
  /*!
   @brief Describes whether information about document source location
  should be maintained or not.
   Made protected for access by SAX2RTFDTM.
   */
  jboolean m_useSourceLocationProperty_;
  /*!
   @brief Made protected for access by SAX2RTFDTM.
   */
  OrgApacheXmlUtilsStringVector *m_sourceSystemId_;
  /*!
   @brief Made protected for access by SAX2RTFDTM.
   */
  OrgApacheXmlUtilsIntVector *m_sourceLine_;
  /*!
   @brief Made protected for access by SAX2RTFDTM.
   */
  OrgApacheXmlUtilsIntVector *m_sourceColumn_;
  jboolean m_pastFirstElement_;
}

#pragma mark Public

/*!
 @brief Construct a SAX2DTM object using the default block size.
 @param mgr The DTMManager who owns this DTM.
 @param source the JAXP 1.1 Source object for this DTM.
 @param dtmIdentity The DTM identity ID for this DTM.
 @param whiteSpaceFilter The white space filter for this DTM, which may                          be null.
 @param xstringfactory XMLString factory for creating character content.
 @param doIndexing true if the caller considers it worth it to use                    indexing schemes.
 */
- (instancetype __nonnull)initWithOrgApacheXmlDtmDTMManager:(OrgApacheXmlDtmDTMManager *)mgr
                                withJavaxXmlTransformSource:(id<JavaxXmlTransformSource>)source
                                                    withInt:(jint)dtmIdentity
                             withOrgApacheXmlDtmDTMWSFilter:(id<OrgApacheXmlDtmDTMWSFilter>)whiteSpaceFilter
                      withOrgApacheXmlUtilsXMLStringFactory:(OrgApacheXmlUtilsXMLStringFactory *)xstringfactory
                                                withBoolean:(jboolean)doIndexing;

/*!
 @brief Construct a SAX2DTM object ready to be constructed from SAX2
  ContentHandler events.
 @param mgr The DTMManager who owns this DTM.
 @param source the JAXP 1.1 Source object for this DTM.
 @param dtmIdentity The DTM identity ID for this DTM.
 @param whiteSpaceFilter The white space filter for this DTM, which may                          be null.
 @param xstringfactory XMLString factory for creating character content.
 @param doIndexing true if the caller considers it worth it to use                    indexing schemes.
 @param blocksize The block size of the DTM.
 @param usePrevsib true if we want to build the previous sibling node array.
 @param newNameTable true if we want to use a new ExpandedNameTable for this DTM.
 */
- (instancetype __nonnull)initWithOrgApacheXmlDtmDTMManager:(OrgApacheXmlDtmDTMManager *)mgr
                                withJavaxXmlTransformSource:(id<JavaxXmlTransformSource>)source
                                                    withInt:(jint)dtmIdentity
                             withOrgApacheXmlDtmDTMWSFilter:(id<OrgApacheXmlDtmDTMWSFilter>)whiteSpaceFilter
                      withOrgApacheXmlUtilsXMLStringFactory:(OrgApacheXmlUtilsXMLStringFactory *)xstringfactory
                                                withBoolean:(jboolean)doIndexing
                                                    withInt:(jint)blocksize
                                                withBoolean:(jboolean)usePrevsib
                                                withBoolean:(jboolean)newNameTable;

/*!
 @brief Report an attribute type declaration.
 <p>Only the effective (first) declaration for an attribute will
  be reported.  The type will be one of the strings "CDATA",
  "ID", "IDREF", "IDREFS", "NMTOKEN", "NMTOKENS", "ENTITY",
  "ENTITIES", or "NOTATION", or a parenthesized token group with
  the separator "|" and all whitespace removed.</p>
 @param eName The name of the associated element.
 @param aName The name of the attribute.
 @param type A string representing the attribute type.
 @param valueDefault A string representing the attribute default         ("#IMPLIED", "#REQUIRED", or "#FIXED") or null if
          none of these applies.
 @param value A string representing the attribute's default value,         or null if there is none.
 @throw SAXExceptionThe application may raise an exception.
 */
- (void)attributeDeclWithNSString:(NSString *)eName
                     withNSString:(NSString *)aName
                     withNSString:(NSString *)type
                     withNSString:(NSString *)valueDefault
                     withNSString:(NSString *)value;

/*!
 @brief Receive notification of character data inside an element.
 <p>By default, do nothing.  Application writers may override this
  method to take specific actions for each chunk of character data
  (such as adding the data to a node or buffer, or printing it to
  a file).</p>
 @param ch The characters.
 @param start The start position in the character array.
 @param length The number of characters to use from the                character array.
 @throw SAXExceptionAny SAX exception, possibly
             wrapping another exception.
 - seealso: org.xml.sax.ContentHandler#characters
 */
- (void)charactersWithCharArray:(IOSCharArray *)ch
                        withInt:(jint)start
                        withInt:(jint)length;

/*!
 @brief Ask the CoRoutine parser to doTerminate and clear the reference.
 */
- (void)clearCoRoutine;

/*!
 @brief Ask the CoRoutine parser to doTerminate and clear the reference.If
  the CoRoutine parser has already been cleared, this will have no effect.
 @param callDoTerminate true of doTerminate should be called on the  coRoutine parser.
 */
- (void)clearCoRoutineWithBoolean:(jboolean)callDoTerminate;

/*!
 @brief Report an XML comment anywhere in the document.
 <p>This callback will be used for comments inside or outside the
  document element, including comments in the external DTD
  subset (if read).</p>
 @param ch An array holding the characters in the comment.
 @param start The starting position in the array.
 @param length The number of characters to use from the array.
 @throw SAXExceptionThe application may raise an exception.
 */
- (void)commentWithCharArray:(IOSCharArray *)ch
                     withInt:(jint)start
                     withInt:(jint)length;

/*!
 @brief Directly call the
  characters method on the passed ContentHandler for the
  string-value of the given node (see http://www.w3.org/TR/xpath#data-model
  for the definition of a node's string-value).Multiple calls to the
  ContentHandler's characters methods may well occur for a single call to
  this method.
 @param nodeHandle The node ID.
 @param ch A non-null reference to a ContentHandler.
 @param normalize true if the content should be normalized according to  the rules for the XPath
    <a href="http://www.w3.org/TR/xpath#function-normalize-space">
  normalize-space </a>  function.
 @throw SAXException
 */
- (void)dispatchCharactersEventsWithInt:(jint)nodeHandle
            withOrgXmlSaxContentHandler:(id<OrgXmlSaxContentHandler>)ch
                            withBoolean:(jboolean)normalize;

/*!
 @brief Directly create SAX parser events from a subtree.
 @param nodeHandle The node ID.
 @param ch A non-null reference to a ContentHandler.
 @throw org.xml.sax.SAXException
 */
- (void)dispatchToEventsWithInt:(jint)nodeHandle
    withOrgXmlSaxContentHandler:(id<OrgXmlSaxContentHandler>)ch;

/*!
 @brief Report an element type declaration.
 <p>The content model will consist of the string "EMPTY", the
  string "ANY", or a parenthesised group, optionally followed
  by an occurrence indicator.  The model will be normalized so
  that all whitespace is removed,and will include the enclosing
  parentheses.</p>
 @param name The element type name.
 @param model The content model as a normalized string.
 @throw SAXExceptionThe application may raise an exception.
 */
- (void)elementDeclWithNSString:(NSString *)name
                   withNSString:(NSString *)model;

/*!
 @brief Report the end of a CDATA section.
 @throw SAXExceptionThe application may raise an exception.
 - seealso: #startCDATA
 */
- (void)endCDATA;

/*!
 @brief Receive notification of the end of the document.
 @throw SAXExceptionAny SAX exception, possibly
             wrapping another exception.
 - seealso: org.xml.sax.ContentHandler#endDocument
 */
- (void)endDocument;

/*!
 @brief Report the end of DTD declarations.
 @throw SAXExceptionThe application may raise an exception.
 - seealso: #startDTD
 */
- (void)endDTD;

/*!
 @brief Receive notification of the end of an element.
 <p>By default, do nothing.  Application writers may override this
  method in a subclass to take specific actions at the end of
  each element (such as finalising a tree node or writing
  output to a file).</p>
 @param uri The Namespace URI, or the empty string if the         element has no Namespace URI or if Namespace
          processing is not being performed.
 @param localName The local name (without prefix), or the         empty string if Namespace processing is not being
          performed.
 @param qName The qualified XML 1.0 name (with prefix), or the         empty string if qualified names are not available.
 @throw SAXExceptionAny SAX exception, possibly
             wrapping another exception.
 - seealso: org.xml.sax.ContentHandler#endElement
 */
- (void)endElementWithNSString:(NSString *)uri
                  withNSString:(NSString *)localName
                  withNSString:(NSString *)qName;

/*!
 @brief Report the end of an entity.
 @param name The name of the entity that is ending.
 @throw SAXExceptionThe application may raise an exception.
 - seealso: #startEntity
 */
- (void)endEntityWithNSString:(NSString *)name;

/*!
 @brief Receive notification of the end of a Namespace mapping.
 <p>By default, do nothing.  Application writers may override this
  method in a subclass to take specific actions at the end of
  each prefix mapping.</p>
 @param prefix The Namespace prefix being declared.
 @throw SAXExceptionAny SAX exception, possibly
             wrapping another exception.
 - seealso: org.xml.sax.ContentHandler#endPrefixMapping
 */
- (void)endPrefixMappingWithNSString:(NSString *)prefix;

/*!
 @brief Receive notification of a recoverable parser error.
 <p>The default implementation does nothing.  Application writers
  may override this method in a subclass to take specific actions
  for each error, such as inserting the message in a log file or
  printing it to the console.</p>
 @param e The warning information encoded as an exception.
 @throw SAXExceptionAny SAX exception, possibly
             wrapping another exception.
 - seealso: org.xml.sax.ErrorHandler#warning
 - seealso: org.xml.sax.SAXParseException
 */
- (void)errorWithOrgXmlSaxSAXParseException:(OrgXmlSaxSAXParseException *)e;

/*!
 @brief Report a parsed external entity declaration.
 <p>Only the effective (first) declaration for each entity
  will be reported.</p>
 @param name The name of the entity.  If it is a parameter         entity, the name will begin with '%'.
 @param publicId The declared public identifier of the entity, or         null if none was declared.
 @param systemId The declared system identifier of the entity.
 @throw SAXExceptionThe application may raise an exception.
 - seealso: #internalEntityDecl
 - seealso: org.xml.sax.DTDHandler#unparsedEntityDecl
 */
- (void)externalEntityDeclWithNSString:(NSString *)name
                          withNSString:(NSString *)publicId
                          withNSString:(NSString *)systemId;

/*!
 @brief Report a fatal XML parsing error.
 <p>The default implementation throws a SAXParseException.
  Application writers may override this method in a subclass if
  they need to take specific actions for each fatal error (such as
  collecting all of the errors into a single report): in any case,
  the application must stop all regular processing when this
  method is invoked, since the document is no longer reliable, and
  the parser may no longer report parsing events.</p>
 @param e The error information encoded as an exception.
 @throw SAXExceptionAny SAX exception, possibly
             wrapping another exception.
 - seealso: org.xml.sax.ErrorHandler#fatalError
 - seealso: org.xml.sax.SAXParseException
 */
- (void)fatalErrorWithOrgXmlSaxSAXParseException:(OrgXmlSaxSAXParseException *)e;

/*!
 @brief Retrieves an attribute node by by qualified name and namespace URI.
 @param nodeHandle int Handle of the node upon which to look up this attribute..
 @param namespaceURI The namespace URI of the attribute to    retrieve, or null.
 @param name The local name of the attribute to    retrieve.
 @return The attribute node handle with the specified name (
    <code>nodeName</code>) or <code>DTM.NULL</code> if there is no such
    attribute.
 */
- (jint)getAttributeNodeWithInt:(jint)nodeHandle
                   withNSString:(NSString *)namespaceURI
                   withNSString:(NSString *)name;

/*!
 @brief getContentHandler returns "our SAX builder" -- the thing that
  someone else should send SAX events to in order to extend this
  DTM model.
 %REVIEW% Should this return null if constrution already done/begun?
 @return null if this model doesn't respond to SAX events,
  "this" if the DTM object has a built-in SAX ContentHandler,
  the IncrementalSAXSource if we're bound to one and should receive
  the SAX stream via it for incremental build purposes...
 */
- (id<OrgXmlSaxContentHandler>)getContentHandler;

/*!
 @brief Return this DTM's DeclHandler.
 @return null if this model doesn't respond to SAX Decl events.
 */
- (id<OrgXmlSaxExtDeclHandler>)getDeclHandler;

/*!
 @brief Return the public identifier of the external subset,
  normalized as described in 4.2.2 External Entities [XML].If there is
  no external subset or if it has no public identifier, this property
  has no value.
 @return the public identifier String object, or null if there is none.
 */
- (NSString *)getDocumentTypeDeclarationPublicIdentifier;

/*!
 @brief A document type declaration information item has the following properties:
      1.
 [system identifier] The system identifier of the external subset, if
         it exists. Otherwise this property has no value.
 @return the system identifier String object, or null if there is none.
 */
- (NSString *)getDocumentTypeDeclarationSystemIdentifier;

/*!
 @brief Return this DTM's DTDHandler.
 @return null if this model doesn't respond to SAX dtd events.
 */
- (id<OrgXmlSaxDTDHandler>)getDTDHandler;

/*!
 @brief Returns the <code>Element</code> whose <code>ID</code> is given by 
 <code>elementId</code>.If no such element exists, returns 
 <code>DTM.NULL</code>.
 Behavior is not defined if more than one element
  has this <code>ID</code>. Attributes (including those
  with the name "ID") are not of type ID unless so defined by DTD/Schema
  information available to the DTM implementation.
  Implementations that do not know whether attributes are of type ID or
  not are expected to return <code>DTM.NULL</code>.
  
 <p>%REVIEW% Presumably IDs are still scoped to a single document,
  and this operation searches only within a single document, right?
  Wouldn't want collisions between DTMs in the same process.</p>
 @param elementId The unique  <code> id </code>  value for an element.
 @return The handle of the matching element.
 */
- (jint)getElementByIdWithNSString:(NSString *)elementId;

/*!
 @brief Return this DTM's EntityResolver.
 @return null if this model doesn't respond to SAX entity ref events.
 */
- (id<OrgXmlSaxEntityResolver>)getEntityResolver;

/*!
 @brief Return this DTM's ErrorHandler.
 @return null if this model doesn't respond to SAX error events.
 */
- (id<OrgXmlSaxErrorHandler>)getErrorHandler;

- (NSString *)getFixedNamesWithInt:(jint)type;

/*!
 @brief Get a prefix either from the uri mapping, or just make
  one up!
 @param uri The namespace URI, which may be null.
 @return The prefix if there is one, or null.
 */
- (jint)getIdForNamespaceWithNSString:(NSString *)uri;

/*!
 @brief Return this DTM's lexical handler.
 %REVIEW% Should this return null if constrution already done/begun?
 @return null if this model doesn't respond to lexical SAX events,
  "this" if the DTM object has a built-in SAX ContentHandler,
  the IncrementalSAXSource if we're bound to one and should receive
  the SAX stream via it for incremental build purposes...
 */
- (id<OrgXmlSaxExtLexicalHandler>)getLexicalHandler;

/*!
 @brief Given a node handle, return its XPath-style localname.
 (As defined in Namespaces, this is the portion of the name after any
  colon character).
 @param nodeHandle the id of the node.
 @return String Local name of this node.
 */
- (NSString *)getLocalNameWithInt:(jint)nodeHandle;

/*!
 @brief Given a node handle, return its DOM-style namespace URI
  (As defined in Namespaces, this is the declared URI which this node's
  prefix -- or default in lieu thereof -- was mapped to.)
 <p>%REVIEW% Null or ""? -sb</p>
 @param nodeHandle the id of the node.
 @return String URI value of this node's namespace, or null if no
  namespace was resolved.
 */
- (NSString *)getNamespaceURIWithInt:(jint)nodeHandle;

/*!
 @brief Get a prefix either from the qname or from the uri mapping, or just make
  one up!
 @return The prefix if there is one, or null.
 */
- (NSString *)getNamespaceURIWithNSString:(NSString *)prefix;

/*!
 @brief Given a node handle, return its DOM-style node name.This will
  include names such as #text or #document.
 @param nodeHandle the id of the node.
 @return String Name of this node, which may be an empty string.
  %REVIEW% Document when empty string is possible...
  %REVIEW-COMMENT% It should never be empty, should it?
 */
- (NSString *)getNodeNameWithInt:(jint)nodeHandle;

/*!
 @brief Given a node handle, return the XPath node name.This should be
  the name as described by the XPath data model, NOT the DOM-style
  name.
 @param nodeHandle the id of the node.
 @return String Name of this node, which may be an empty string.
 */
- (NSString *)getNodeNameXWithInt:(jint)nodeHandle;

/*!
 @brief Given a node handle, return its node value.This is mostly
  as defined by the DOM, but may ignore some conveniences.
 <p>
 @param nodeHandle The node id.
 @return String Value of this node, or null if not
  meaningful for this node type.
 */
- (NSString *)getNodeValueWithInt:(jint)nodeHandle;

/*!
 @brief Get the number of nodes that have been added.
 @return The number of that are currently in the tree.
 */
- (jint)getNumberOfNodes;

/*!
 @brief Given a namespace handle, return the prefix that the namespace decl is
  mapping.
 Given a node handle, return the prefix used to map to the namespace. 
 <p> %REVIEW% Are you sure you want "" for no prefix?  </p>
  <p> %REVIEW-COMMENT% I think so... not totally sure. -sb  </p>
 @param nodeHandle the id of the node.
 @return String prefix of this node's name, or "" if no explicit
  namespace prefix was given.
 */
- (NSString *)getPrefixWithInt:(jint)nodeHandle;

/*!
 @brief Get a prefix either from the qname or from the uri mapping, or just make
  one up!
 @param qname The qualified name, which may be null.
 @param uri The namespace URI, which may be null.
 @return The prefix if there is one, or null.
 */
- (NSString *)getPrefixWithNSString:(NSString *)qname
                       withNSString:(NSString *)uri;

/*!
 @brief Retrieve the SourceLocator associated with a specific node.
 This is only meaningful if the XalanProperties.SOURCE_LOCATION flag was
  set True using setProperty; if it was never set, or was set false, we
  will return null.  
  (We _could_ return a locator with the document's base URI and bogus 
  line/column information. Trying that; see the else clause.)
 */
- (id<JavaxXmlTransformSourceLocator>)getSourceLocatorForWithInt:(jint)node;

/*!
 @brief Get the string-value of a node as a String object
  (see http://www.w3.org/TR/xpath#data-model
  for the definition of a node's string-value).
 @param nodeHandle The node ID.
 @return A string object that represents the string-value of the given node.
 */
- (id<OrgApacheXmlUtilsXMLString>)getStringValueWithInt:(jint)nodeHandle;

/*!
 @brief The getUnparsedEntityURI function returns the URI of the unparsed
  entity with the specified name in the same document as the context
  node (see [3.3 Unparsed Entities]).It returns the empty string if
  there is no such entity.
 <p>
  XML processors may choose to use the System Identifier (if one
  is provided) to resolve the entity, rather than the URI in the
  Public Identifier. The details are dependent on the processor, and
  we would have to support some form of plug-in resolver to handle
  this properly. Currently, we simply return the System Identifier if
  present, and hope that it a usable URI or that our caller can
  map it to one.
  TODO: Resolve Public Identifiers... or consider changing function name. 
 <p>
  If we find a relative URI
  reference, XML expects it to be resolved in terms of the base URI
  of the document. The DOM doesn't do that for us, and it isn't
  entirely clear whether that should be done here; currently that's
  pushed up to a higher level of our application. (Note that DOM Level
  1 didn't store the document's base URI.)
  TODO: Consider resolving Relative URIs. 
 <p>
  (The DOM's statement that "An XML processor may choose to
  completely expand entities before the structure model is passed
  to the DOM" refers only to parsed entities, not unparsed, and hence
  doesn't affect this function.)
 @param name A string containing the Entity Name of the unparsed  entity.
 @return String containing the URI of the Unparsed Entity, or an
  empty string if no such entity exists.
 */
- (NSString *)getUnparsedEntityURIWithNSString:(NSString *)name;

/*!
 @brief Receive notification of ignorable whitespace in element content.
 <p>By default, do nothing.  Application writers may override this
  method to take specific actions for each chunk of ignorable
  whitespace (such as adding data to a node or buffer, or printing
  it to a file).</p>
 @param ch The whitespace characters.
 @param start The start position in the character array.
 @param length The number of characters to use from the                character array.
 @throw SAXExceptionAny SAX exception, possibly
             wrapping another exception.
 - seealso: org.xml.sax.ContentHandler#ignorableWhitespace
 */
- (void)ignorableWhitespaceWithCharArray:(IOSCharArray *)ch
                                 withInt:(jint)start
                                 withInt:(jint)length;

/*!
 @brief Report an internal entity declaration.
 <p>Only the effective (first) declaration for each entity
  will be reported.</p>
 @param name The name of the entity.  If it is a parameter         entity, the name will begin with '%'.
 @param value The replacement text of the entity.
 @throw SAXExceptionThe application may raise an exception.
 - seealso: #externalEntityDecl
 - seealso: org.xml.sax.DTDHandler#unparsedEntityDecl
 */
- (void)internalEntityDeclWithNSString:(NSString *)name
                          withNSString:(NSString *)value;

/*!
 @brief 5.
 [specified] A flag indicating whether this attribute was actually
         specified in the start-tag of its element, or was defaulted from the
         DTD.
 @param attributeHandle Must be a valid handle to an attribute node.
 @return <code>true</code> if the attribute was specified;
          <code>false</code> if it was defaulted.
 */
- (jboolean)isAttributeSpecifiedWithInt:(jint)attributeHandle;

/*!
 @brief Determine if the string-value of a node is whitespace
 @param nodeHandle The node Handle.
 @return Return true if the given node is whitespace.
 */
- (jboolean)isWhitespaceWithInt:(jint)nodeHandle;

/*!
 @brief Migrate a DTM built with an old DTMManager to a new DTMManager.
 After the migration, the new DTMManager will treat the DTM as
  one that is built by itself.
  This is used to support DTM sharing between multiple transformations.
 @param manager the DTMManager
 */
- (void)migrateToWithOrgApacheXmlDtmDTMManager:(OrgApacheXmlDtmDTMManager *)manager;

/*!
 @return true iff we're building this model incrementally (eg
  we're partnered with a IncrementalSAXSource) and thus require that the
  transformation and the parse run simultaneously. Guidance to the
  DTMManager.
 */
- (jboolean)needsTwoThreads;

/*!
 @brief Receive notification of a notation declaration.
 <p>By default, do nothing.  Application writers may override this
  method in a subclass if they wish to keep track of the notations
  declared in a document.</p>
 @param name The notation name.
 @param publicId The notation public identifier, or null if not                  available.
 @param systemId The notation system identifier.
 @throw SAXExceptionAny SAX exception, possibly
             wrapping another exception.
 - seealso: org.xml.sax.DTDHandler#notationDecl
 @throw SAXException
 */
- (void)notationDeclWithNSString:(NSString *)name
                    withNSString:(NSString *)publicId
                    withNSString:(NSString *)systemId;

/*!
 @brief Receive notification of a processing instruction.
 <p>By default, do nothing.  Application writers may override this
  method in a subclass to take specific actions for each
  processing instruction, such as setting status variables or
  invoking other methods.</p>
 @param target The processing instruction target.
 @param data The processing instruction data, or null if              none is supplied.
 @throw SAXExceptionAny SAX exception, possibly
             wrapping another exception.
 - seealso: org.xml.sax.ContentHandler#processingInstruction
 */
- (void)processingInstructionWithNSString:(NSString *)target
                             withNSString:(NSString *)data;

/*!
 @brief Resolve an external entity.
 <p>Always return null, so that the parser will use the system
  identifier provided in the XML document.  This method implements
  the SAX default behaviour: application writers can override it
  in a subclass to do special translations such as catalog lookups
  or URI redirection.</p>
 @param publicId The public identifer, or null if none is                  available.
 @param systemId The system identifier provided in the XML                  document.
 @return The new input source, or null to require the
          default behaviour.
 @throw SAXExceptionAny SAX exception, possibly
             wrapping another exception.
 - seealso: org.xml.sax.EntityResolver#resolveEntity
 @throw SAXException
 */
- (OrgXmlSaxInputSource *)resolveEntityWithNSString:(NSString *)publicId
                                       withNSString:(NSString *)systemId;

/*!
 @brief Receive a Locator object for document events.
 <p>By default, do nothing.  Application writers may override this
  method in a subclass if they wish to store the locator for use
  with other document events.</p>
 @param locator A locator for all SAX document events.
 - seealso: org.xml.sax.ContentHandler#setDocumentLocator
 - seealso: org.xml.sax.Locator
 */
- (void)setDocumentLocatorWithOrgXmlSaxLocator:(id<OrgXmlSaxLocator>)locator;

/*!
 @brief Set an ID string to node association in the ID table.
 @param id_ The ID string.
 @param elem The associated element handle.
 */
- (void)setIDAttributeWithNSString:(NSString *)id_
                           withInt:(jint)elem;

/*!
 @brief Bind a IncrementalSAXSource to this DTM.If we discover we need nodes
  that have not yet been built, we will ask this object to send us more
  events, and it will manage interactions with its data sources.
 Note that we do not actually build the IncrementalSAXSource, since we don't
  know what source it's reading from, what thread that source will run in,
  or when it will run.
 @param incrementalSAXSource The parser that we want to recieve events from  on demand.
 */
- (void)setIncrementalSAXSourceWithOrgApacheXmlDtmRefIncrementalSAXSource:(id<OrgApacheXmlDtmRefIncrementalSAXSource>)incrementalSAXSource;

/*!
 @brief Set a run time property for this DTM instance.
 %REVIEW% Now that we no longer use this method to support
  getSourceLocatorFor, can we remove it?
 @param property a  <code> String </code>  value
 @param value an  <code> Object </code>  value
 */
- (void)setPropertyWithNSString:(NSString *)property
                         withId:(id)value;

/*!
 @brief Set whether information about document source location
  should be maintained or not.
 */
- (void)setUseSourceLocationWithBoolean:(jboolean)useSourceLocation;

/*!
 @brief Receive notification of a skipped entity.
 <p>By default, do nothing.  Application writers may override this
  method in a subclass to take specific actions for each
  processing instruction, such as setting status variables or
  invoking other methods.</p>
 @param name The name of the skipped entity.
 @throw SAXExceptionAny SAX exception, possibly
             wrapping another exception.
 - seealso: org.xml.sax.ContentHandler#processingInstruction
 */
- (void)skippedEntityWithNSString:(NSString *)name;

/*!
 @brief Report the start of a CDATA section.
 <p>The contents of the CDATA section will be reported through
  the regular <code>characters</code>
  event.</p>
 @throw SAXExceptionThe application may raise an exception.
 - seealso: #endCDATA
 */
- (void)startCDATA;

/*!
 @brief Receive notification of the beginning of the document.
 @throw SAXExceptionAny SAX exception, possibly
             wrapping another exception.
 - seealso: org.xml.sax.ContentHandler#startDocument
 */
- (void)startDocument;

/*!
 @brief Report the start of DTD declarations, if any.
 <p>Any declarations are assumed to be in the internal subset
  unless otherwise indicated by a <code>startEntity</code>
  event.</p>
  
 <p>Note that the start/endDTD events will appear within
  the start/endDocument events from ContentHandler and
  before the first startElement event.</p>
 @param name The document type name.
 @param publicId The declared public identifier for the         external DTD subset, or null if none was declared.
 @param systemId The declared system identifier for the         external DTD subset, or null if none was declared.
 @throw SAXExceptionThe application may raise an
             exception.
 - seealso: #endDTD
 - seealso: #startEntity
 */
- (void)startDTDWithNSString:(NSString *)name
                withNSString:(NSString *)publicId
                withNSString:(NSString *)systemId;

/*!
 @brief Receive notification of the start of an element.
 <p>By default, do nothing.  Application writers may override this
  method in a subclass to take specific actions at the start of
  each element (such as allocating a new tree node or writing
  output to a file).</p>
 @param uri The Namespace URI, or the empty string if the         element has no Namespace URI or if Namespace
          processing is not being performed.
 @param localName The local name (without prefix), or the         empty string if Namespace processing is not being
          performed.
 @param qName The qualified name (with prefix), or the         empty string if qualified names are not available.
 @param attributes The specified or defaulted attributes.
 @throw SAXExceptionAny SAX exception, possibly
             wrapping another exception.
 - seealso: org.xml.sax.ContentHandler#startElement
 */
- (void)startElementWithNSString:(NSString *)uri
                    withNSString:(NSString *)localName
                    withNSString:(NSString *)qName
         withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)attributes;

/*!
 @brief Report the beginning of an entity in content.
 <p><strong>NOTE:</entity> entity references in attribute
  values -- and the start and end of the document entity --
  are never reported.</p>
  
 <p>The start and end of the external DTD subset are reported
  using the pseudo-name "[dtd]".  All other events must be
  properly nested within start/end entity events.</p>
  
 <p>Note that skipped entities will be reported through the 
 <code>skippedEntity</code>
  event, which is part of the ContentHandler interface.</p>
 @param name The name of the entity.  If it is a parameter         entity, the name will begin with '%'.
 @throw SAXExceptionThe application may raise an exception.
 - seealso: #endEntity
 - seealso: org.xml.sax.ext.DeclHandler#internalEntityDecl
 - seealso: org.xml.sax.ext.DeclHandler#externalEntityDecl
 */
- (void)startEntityWithNSString:(NSString *)name;

/*!
 @brief Receive notification of the start of a Namespace mapping.
 <p>By default, do nothing.  Application writers may override this
  method in a subclass to take specific actions at the start of
  each Namespace prefix scope (such as storing the prefix mapping).</p>
 @param prefix The Namespace prefix being declared.
 @param uri The Namespace URI mapped to the prefix.
 @throw SAXExceptionAny SAX exception, possibly
             wrapping another exception.
 - seealso: org.xml.sax.ContentHandler#startPrefixMapping
 */
- (void)startPrefixMappingWithNSString:(NSString *)prefix
                          withNSString:(NSString *)uri;

/*!
 @brief Receive notification of an unparsed entity declaration.
 <p>By default, do nothing.  Application writers may override this
  method in a subclass to keep track of the unparsed entities
  declared in a document.</p>
 @param name The entity name.
 @param publicId The entity public identifier, or null if not                  available.
 @param systemId The entity system identifier.
 @param notationName The name of the associated notation.
 @throw SAXExceptionAny SAX exception, possibly
             wrapping another exception.
 - seealso: org.xml.sax.DTDHandler#unparsedEntityDecl
 @throw SAXException
 */
- (void)unparsedEntityDeclWithNSString:(NSString *)name
                          withNSString:(NSString *)publicId
                          withNSString:(NSString *)systemId
                          withNSString:(NSString *)notationName;

/*!
 @brief Receive notification of a parser warning.
 <p>The default implementation does nothing.  Application writers
  may override this method in a subclass to take specific actions
  for each warning, such as inserting the message in a log file or
  printing it to the console.</p>
 @param e The warning information encoded as an exception.
 @throw SAXExceptionAny SAX exception, possibly
             wrapping another exception.
 - seealso: org.xml.sax.ErrorHandler#warning
 - seealso: org.xml.sax.SAXParseException
 */
- (void)warningWithOrgXmlSaxSAXParseException:(OrgXmlSaxSAXParseException *)e;

#pragma mark Protected

/*!
 @brief Get the data or qualified name for the given node identity.
 @param identity The node identity.
 @return The data or qualified name, or DTM.NULL.
 */
- (jint)_dataOrQNameWithInt:(jint)identity;

/*!
 @brief Get a new DTM ID beginning at the specified node index.
 @param nodeIndex The node identity at which the new DTM ID will begin  addressing.
 */
- (void)addNewDTMIDWithInt:(jint)nodeIndex;

/*!
 @brief Construct the node map from the node.
 @param type raw type ID, one of DTM.XXX_NODE.
 @param expandedTypeID The expended type ID.
 @param parentIndex The current parent index.
 @param previousSibling The previous sibling index.
 @param dataOrPrefix index into m_data table, or string handle.
 @param canHaveFirstChild true if the node can have a first child, false                           if it is atomic.
 @return The index identity of the node that was added.
 */
- (jint)addNodeWithInt:(jint)type
               withInt:(jint)expandedTypeID
               withInt:(jint)parentIndex
               withInt:(jint)previousSibling
               withInt:(jint)dataOrPrefix
           withBoolean:(jboolean)canHaveFirstChild;

/*!
 @brief Check whether accumulated text should be stripped; if not,
  append the appropriate flavor of text/cdata node.
 */
- (void)charactersFlush;

/*!
 @brief Check if a declaration has already been made for a given prefix.
 @param prefix non-null prefix string.
 @return true if the declaration has already been declared in the
          current context.
 */
- (jboolean)declAlreadyDeclaredWithNSString:(NSString *)prefix;

/*!
 @brief Get the next node identity value in the list, and call the iterator
  if it hasn't been added yet.
 @param identity The node identity (index).
 @return identity+1, or DTM.NULL.
 */
- (jint)getNextNodeIdentityWithInt:(jint)identity;

/*!
 @brief This method should try and build one or more nodes in the table.
 @return The true if a next node is found or false if
          there are no more nodes.
 */
- (jboolean)nextNode;

/*!
 @brief Store the source location of the current node.This method must be called
  as every node is added to the DTM or for no node.
 */
- (void)setSourceLocation;

@end

J2OBJC_STATIC_INIT(OrgApacheXmlDtmRefSax2dtmSAX2DTM)

J2OBJC_FIELD_SETTER(OrgApacheXmlDtmRefSax2dtmSAX2DTM, m_chars_, OrgApacheXmlUtilsFastStringBuffer *)
J2OBJC_FIELD_SETTER(OrgApacheXmlDtmRefSax2dtmSAX2DTM, m_data_, OrgApacheXmlUtilsSuballocatedIntVector *)
J2OBJC_FIELD_SETTER(OrgApacheXmlDtmRefSax2dtmSAX2DTM, m_parents_, OrgApacheXmlUtilsIntStack *)
J2OBJC_FIELD_SETTER(OrgApacheXmlDtmRefSax2dtmSAX2DTM, m_prefixMappings_, JavaUtilVector *)
J2OBJC_FIELD_SETTER(OrgApacheXmlDtmRefSax2dtmSAX2DTM, m_contextIndexes_, OrgApacheXmlUtilsIntStack *)
J2OBJC_FIELD_SETTER(OrgApacheXmlDtmRefSax2dtmSAX2DTM, m_locator_, id<OrgXmlSaxLocator>)
J2OBJC_FIELD_SETTER(OrgApacheXmlDtmRefSax2dtmSAX2DTM, m_walker_, OrgApacheXmlDtmRefDTMTreeWalker *)
J2OBJC_FIELD_SETTER(OrgApacheXmlDtmRefSax2dtmSAX2DTM, m_valuesOrPrefixes_, OrgApacheXmlDtmRefDTMStringPool *)
J2OBJC_FIELD_SETTER(OrgApacheXmlDtmRefSax2dtmSAX2DTM, m_dataOrQName_, OrgApacheXmlUtilsSuballocatedIntVector *)
J2OBJC_FIELD_SETTER(OrgApacheXmlDtmRefSax2dtmSAX2DTM, m_idAttributes_, JavaUtilHashtable *)
J2OBJC_FIELD_SETTER(OrgApacheXmlDtmRefSax2dtmSAX2DTM, m_sourceSystemId_, OrgApacheXmlUtilsStringVector *)
J2OBJC_FIELD_SETTER(OrgApacheXmlDtmRefSax2dtmSAX2DTM, m_sourceLine_, OrgApacheXmlUtilsIntVector *)
J2OBJC_FIELD_SETTER(OrgApacheXmlDtmRefSax2dtmSAX2DTM, m_sourceColumn_, OrgApacheXmlUtilsIntVector *)

FOUNDATION_EXPORT void OrgApacheXmlDtmRefSax2dtmSAX2DTM_initWithOrgApacheXmlDtmDTMManager_withJavaxXmlTransformSource_withInt_withOrgApacheXmlDtmDTMWSFilter_withOrgApacheXmlUtilsXMLStringFactory_withBoolean_(OrgApacheXmlDtmRefSax2dtmSAX2DTM *self, OrgApacheXmlDtmDTMManager *mgr, id<JavaxXmlTransformSource> source, jint dtmIdentity, id<OrgApacheXmlDtmDTMWSFilter> whiteSpaceFilter, OrgApacheXmlUtilsXMLStringFactory *xstringfactory, jboolean doIndexing);

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM *new_OrgApacheXmlDtmRefSax2dtmSAX2DTM_initWithOrgApacheXmlDtmDTMManager_withJavaxXmlTransformSource_withInt_withOrgApacheXmlDtmDTMWSFilter_withOrgApacheXmlUtilsXMLStringFactory_withBoolean_(OrgApacheXmlDtmDTMManager *mgr, id<JavaxXmlTransformSource> source, jint dtmIdentity, id<OrgApacheXmlDtmDTMWSFilter> whiteSpaceFilter, OrgApacheXmlUtilsXMLStringFactory *xstringfactory, jboolean doIndexing) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM *create_OrgApacheXmlDtmRefSax2dtmSAX2DTM_initWithOrgApacheXmlDtmDTMManager_withJavaxXmlTransformSource_withInt_withOrgApacheXmlDtmDTMWSFilter_withOrgApacheXmlUtilsXMLStringFactory_withBoolean_(OrgApacheXmlDtmDTMManager *mgr, id<JavaxXmlTransformSource> source, jint dtmIdentity, id<OrgApacheXmlDtmDTMWSFilter> whiteSpaceFilter, OrgApacheXmlUtilsXMLStringFactory *xstringfactory, jboolean doIndexing);

FOUNDATION_EXPORT void OrgApacheXmlDtmRefSax2dtmSAX2DTM_initWithOrgApacheXmlDtmDTMManager_withJavaxXmlTransformSource_withInt_withOrgApacheXmlDtmDTMWSFilter_withOrgApacheXmlUtilsXMLStringFactory_withBoolean_withInt_withBoolean_withBoolean_(OrgApacheXmlDtmRefSax2dtmSAX2DTM *self, OrgApacheXmlDtmDTMManager *mgr, id<JavaxXmlTransformSource> source, jint dtmIdentity, id<OrgApacheXmlDtmDTMWSFilter> whiteSpaceFilter, OrgApacheXmlUtilsXMLStringFactory *xstringfactory, jboolean doIndexing, jint blocksize, jboolean usePrevsib, jboolean newNameTable);

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM *new_OrgApacheXmlDtmRefSax2dtmSAX2DTM_initWithOrgApacheXmlDtmDTMManager_withJavaxXmlTransformSource_withInt_withOrgApacheXmlDtmDTMWSFilter_withOrgApacheXmlUtilsXMLStringFactory_withBoolean_withInt_withBoolean_withBoolean_(OrgApacheXmlDtmDTMManager *mgr, id<JavaxXmlTransformSource> source, jint dtmIdentity, id<OrgApacheXmlDtmDTMWSFilter> whiteSpaceFilter, OrgApacheXmlUtilsXMLStringFactory *xstringfactory, jboolean doIndexing, jint blocksize, jboolean usePrevsib, jboolean newNameTable) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM *create_OrgApacheXmlDtmRefSax2dtmSAX2DTM_initWithOrgApacheXmlDtmDTMManager_withJavaxXmlTransformSource_withInt_withOrgApacheXmlDtmDTMWSFilter_withOrgApacheXmlUtilsXMLStringFactory_withBoolean_withInt_withBoolean_withBoolean_(OrgApacheXmlDtmDTMManager *mgr, id<JavaxXmlTransformSource> source, jint dtmIdentity, id<OrgApacheXmlDtmDTMWSFilter> whiteSpaceFilter, OrgApacheXmlUtilsXMLStringFactory *xstringfactory, jboolean doIndexing, jint blocksize, jboolean usePrevsib, jboolean newNameTable);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlDtmRefSax2dtmSAX2DTM)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgApacheXmlDtmRefSax2dtmSAX2DTM")
