//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xml/utils/NSInfo.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXmlUtilsNSInfo")
#ifdef RESTRICT_OrgApacheXmlUtilsNSInfo
#define INCLUDE_ALL_OrgApacheXmlUtilsNSInfo 0
#else
#define INCLUDE_ALL_OrgApacheXmlUtilsNSInfo 1
#endif
#undef RESTRICT_OrgApacheXmlUtilsNSInfo

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheXmlUtilsNSInfo_) && (INCLUDE_ALL_OrgApacheXmlUtilsNSInfo || defined(INCLUDE_OrgApacheXmlUtilsNSInfo))
#define OrgApacheXmlUtilsNSInfo_

/*!
 @brief This class holds information about the namespace info
  of a node.It is used to optimize namespace lookup in
  a generic DOM.
 */
@interface OrgApacheXmlUtilsNSInfo : NSObject {
 @public
  /*!
   @brief The namespace URI
   */
  NSString *m_namespace_;
  /*!
   @brief Flag indicating whether this node has an XMLNS attribute
   */
  jboolean m_hasXMLNSAttrs_;
  /*!
   @brief Flag indicating whether namespaces have been processed for this node
   */
  jboolean m_hasProcessedNS_;
  /*!
   @brief Flag indicating whether one of this node's ancestor has an XMLNS attribute
   */
  jint m_ancestorHasXMLNSAttrs_;
}
@property (readonly, class) jint ANCESTORXMLNSUNPROCESSED NS_SWIFT_NAME(ANCESTORXMLNSUNPROCESSED);
@property (readonly, class) jint ANCESTORHASXMLNS NS_SWIFT_NAME(ANCESTORHASXMLNS);
@property (readonly, class) jint ANCESTORNOXMLNS NS_SWIFT_NAME(ANCESTORNOXMLNS);

+ (jint)ANCESTORXMLNSUNPROCESSED;

+ (jint)ANCESTORHASXMLNS;

+ (jint)ANCESTORNOXMLNS;

#pragma mark Public

/*!
 @brief Constructor NSInfo
 @param hasProcessedNS Flag indicating whether namespaces  have been processed for this node
 @param hasXMLNSAttrs Flag indicating whether this node  has XMLNS attributes.
 */
- (instancetype __nonnull)initWithBoolean:(jboolean)hasProcessedNS
                              withBoolean:(jboolean)hasXMLNSAttrs;

/*!
 @brief Constructor NSInfo
 @param hasProcessedNS Flag indicating whether namespaces  have been processed for this node
 @param hasXMLNSAttrs Flag indicating whether this node  has XMLNS attributes.
 @param ancestorHasXMLNSAttrs Flag indicating whether one of this node's  ancestor has XMLNS attributes.
 */
- (instancetype __nonnull)initWithBoolean:(jboolean)hasProcessedNS
                              withBoolean:(jboolean)hasXMLNSAttrs
                                  withInt:(jint)ancestorHasXMLNSAttrs;

/*!
 @brief Constructor NSInfo
 @param namespace_ The namespace URI
 @param hasXMLNSAttrs Flag indicating whether this node  has XMLNS attributes.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)namespace_
                               withBoolean:(jboolean)hasXMLNSAttrs;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXmlUtilsNSInfo)

J2OBJC_FIELD_SETTER(OrgApacheXmlUtilsNSInfo, m_namespace_, NSString *)

/*!
 @brief Constant for ancestors XMLNS atributes not processed
 */
inline jint OrgApacheXmlUtilsNSInfo_get_ANCESTORXMLNSUNPROCESSED(void);
#define OrgApacheXmlUtilsNSInfo_ANCESTORXMLNSUNPROCESSED 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlUtilsNSInfo, ANCESTORXMLNSUNPROCESSED, jint)

/*!
 @brief Constant indicating an ancestor has an XMLNS attribute
 */
inline jint OrgApacheXmlUtilsNSInfo_get_ANCESTORHASXMLNS(void);
#define OrgApacheXmlUtilsNSInfo_ANCESTORHASXMLNS 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlUtilsNSInfo, ANCESTORHASXMLNS, jint)

/*!
 @brief Constant indicating ancestors don't have an XMLNS attribute
 */
inline jint OrgApacheXmlUtilsNSInfo_get_ANCESTORNOXMLNS(void);
#define OrgApacheXmlUtilsNSInfo_ANCESTORNOXMLNS 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlUtilsNSInfo, ANCESTORNOXMLNS, jint)

FOUNDATION_EXPORT void OrgApacheXmlUtilsNSInfo_initWithBoolean_withBoolean_(OrgApacheXmlUtilsNSInfo *self, jboolean hasProcessedNS, jboolean hasXMLNSAttrs);

FOUNDATION_EXPORT OrgApacheXmlUtilsNSInfo *new_OrgApacheXmlUtilsNSInfo_initWithBoolean_withBoolean_(jboolean hasProcessedNS, jboolean hasXMLNSAttrs) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlUtilsNSInfo *create_OrgApacheXmlUtilsNSInfo_initWithBoolean_withBoolean_(jboolean hasProcessedNS, jboolean hasXMLNSAttrs);

FOUNDATION_EXPORT void OrgApacheXmlUtilsNSInfo_initWithBoolean_withBoolean_withInt_(OrgApacheXmlUtilsNSInfo *self, jboolean hasProcessedNS, jboolean hasXMLNSAttrs, jint ancestorHasXMLNSAttrs);

FOUNDATION_EXPORT OrgApacheXmlUtilsNSInfo *new_OrgApacheXmlUtilsNSInfo_initWithBoolean_withBoolean_withInt_(jboolean hasProcessedNS, jboolean hasXMLNSAttrs, jint ancestorHasXMLNSAttrs) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlUtilsNSInfo *create_OrgApacheXmlUtilsNSInfo_initWithBoolean_withBoolean_withInt_(jboolean hasProcessedNS, jboolean hasXMLNSAttrs, jint ancestorHasXMLNSAttrs);

FOUNDATION_EXPORT void OrgApacheXmlUtilsNSInfo_initWithNSString_withBoolean_(OrgApacheXmlUtilsNSInfo *self, NSString *namespace_, jboolean hasXMLNSAttrs);

FOUNDATION_EXPORT OrgApacheXmlUtilsNSInfo *new_OrgApacheXmlUtilsNSInfo_initWithNSString_withBoolean_(NSString *namespace_, jboolean hasXMLNSAttrs) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlUtilsNSInfo *create_OrgApacheXmlUtilsNSInfo_initWithNSString_withBoolean_(NSString *namespace_, jboolean hasXMLNSAttrs);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlUtilsNSInfo)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgApacheXmlUtilsNSInfo")
