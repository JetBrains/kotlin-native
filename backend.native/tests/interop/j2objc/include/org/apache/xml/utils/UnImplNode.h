//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xml/utils/UnImplNode.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXmlUtilsUnImplNode")
#ifdef RESTRICT_OrgApacheXmlUtilsUnImplNode
#define INCLUDE_ALL_OrgApacheXmlUtilsUnImplNode 0
#else
#define INCLUDE_ALL_OrgApacheXmlUtilsUnImplNode 1
#endif
#undef RESTRICT_OrgApacheXmlUtilsUnImplNode

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheXmlUtilsUnImplNode_) && (INCLUDE_ALL_OrgApacheXmlUtilsUnImplNode || defined(INCLUDE_OrgApacheXmlUtilsUnImplNode))
#define OrgApacheXmlUtilsUnImplNode_

#define RESTRICT_OrgW3cDomNode 1
#define INCLUDE_OrgW3cDomNode 1
#include "org/w3c/dom/Node.h"

#define RESTRICT_OrgW3cDomElement 1
#define INCLUDE_OrgW3cDomElement 1
#include "org/w3c/dom/Element.h"

#define RESTRICT_OrgW3cDomNodeList 1
#define INCLUDE_OrgW3cDomNodeList 1
#include "org/w3c/dom/NodeList.h"

#define RESTRICT_OrgW3cDomDocument 1
#define INCLUDE_OrgW3cDomDocument 1
#include "org/w3c/dom/Document.h"

@class IOSObjectArray;
@protocol OrgW3cDomAttr;
@protocol OrgW3cDomCDATASection;
@protocol OrgW3cDomComment;
@protocol OrgW3cDomDOMConfiguration;
@protocol OrgW3cDomDOMImplementation;
@protocol OrgW3cDomDocumentFragment;
@protocol OrgW3cDomDocumentType;
@protocol OrgW3cDomEntityReference;
@protocol OrgW3cDomNamedNodeMap;
@protocol OrgW3cDomProcessingInstruction;
@protocol OrgW3cDomText;
@protocol OrgW3cDomTypeInfo;
@protocol OrgW3cDomUserDataHandler;

/*!
 @brief To be subclassed by classes that wish to fake being nodes.
 */
@interface OrgApacheXmlUtilsUnImplNode : NSObject < OrgW3cDomNode, OrgW3cDomElement, OrgW3cDomNodeList, OrgW3cDomDocument > {
 @public
  /*!
   @brief DOM Level 3 feature: documentURI
   */
  NSString *fDocumentURI_;
  /*!
   @brief DOM Level 3 feature: Document actualEncoding
   */
  NSString *actualEncoding_;
}

#pragma mark Public

/*!
 @brief Constructor UnImplNode
 */
- (instancetype __nonnull)init;

/*!
 @brief NEEDSDOC Method adoptNode 
  NEEDSDOC @@param source
  NEEDSDOC (adoptNode) @@return
 @throw DOMException
 */
- (id<OrgW3cDomNode>)adoptNodeWithOrgW3cDomNode:(id<OrgW3cDomNode>)source;

/*!
 @brief Unimplemented.See org.w3c.dom.Node
 @param newChild New node to append to the list of this node's children
 @return null
 @throw DOMException
 */
- (id<OrgW3cDomNode>)appendChildWithOrgW3cDomNode:(id<OrgW3cDomNode>)newChild;

/*!
 @brief Unimplemented.
 @param arg String data to append
 @throw DOMException
 */
- (void)appendDataWithNSString:(NSString *)arg;

/*!
 @brief Unimplemented.See org.w3c.dom.Node
 @param deep Flag indicating whether to clone deep (clone member variables)
 @return null
 */
- (id<OrgW3cDomNode>)cloneNodeWithBoolean:(jboolean)deep;

/*!
 @brief Compares a node with this node with regard to their position in the
  document.
 @param other The node to compare against this node.
 @return Returns how the given node is positioned relatively to this
    node.
 @since DOM Level 3
 */
- (jshort)compareDocumentPositionWithOrgW3cDomNode:(id<OrgW3cDomNode>)other;

/*!
 @brief Unimplemented.See org.w3c.dom.Document
 @param name Attribute name
 @return null
 @throw DOMException
 */
- (id<OrgW3cDomAttr>)createAttributeWithNSString:(NSString *)name;

/*!
 @brief Unimplemented.See org.w3c.dom.Document
 @param namespaceURI Namespace URI of the attribute
 @param qualifiedName Qualified name of the attribute
 @return null
 @throw DOMException
 */
- (id<OrgW3cDomAttr>)createAttributeNSWithNSString:(NSString *)namespaceURI
                                      withNSString:(NSString *)qualifiedName;

/*!
 @brief Unimplemented.See org.w3c.dom.Document
 @param data Data for CDATA section
 @return null
 @throw DOMException
 */
- (id<OrgW3cDomCDATASection>)createCDATASectionWithNSString:(NSString *)data;

/*!
 @brief Unimplemented.See org.w3c.dom.Document
 @param data Data for comment
 @return null
 */
- (id<OrgW3cDomComment>)createCommentWithNSString:(NSString *)data;

/*!
 @brief Unimplemented.See org.w3c.dom.Document
 @return null
 */
- (id<OrgW3cDomDocumentFragment>)createDocumentFragment;

/*!
 @brief Unimplemented.See org.w3c.dom.Document
 @param tagName Element tag name
 @return null
 @throw DOMException
 */
- (id<OrgW3cDomElement>)createElementWithNSString:(NSString *)tagName;

/*!
 @brief Unimplemented.See org.w3c.dom.Document
 @param namespaceURI Namespace URI for the element
 @param qualifiedName Qualified name of the element
 @return null
 @throw DOMException
 */
- (id<OrgW3cDomElement>)createElementNSWithNSString:(NSString *)namespaceURI
                                       withNSString:(NSString *)qualifiedName;

/*!
 @brief Unimplemented.See org.w3c.dom.Document
 @param name Entity Reference name
 @return null
 @throw DOMException
 */
- (id<OrgW3cDomEntityReference>)createEntityReferenceWithNSString:(NSString *)name;

/*!
 @brief Unimplemented.See org.w3c.dom.Document
 @param target Target for Processing instruction
 @param data Data for Processing instruction
 @return null
 @throw DOMException
 */
- (id<OrgW3cDomProcessingInstruction>)createProcessingInstructionWithNSString:(NSString *)target
                                                                 withNSString:(NSString *)data;

/*!
 @brief Unimplemented.See org.w3c.dom.Document
 @param data Data for text node
 @return null
 */
- (id<OrgW3cDomText>)createTextNodeWithNSString:(NSString *)data;

/*!
 @brief Unimplemented.
 @param offset Start offset of substring to delete.
 @param count The length of the substring to delete.
 @throw DOMException
 */
- (void)deleteDataWithInt:(jint)offset
                  withInt:(jint)count;

/*!
 @brief Throw an error.
 @param msg Message Key for the error
 */
- (void)errorWithNSString:(NSString *)msg;

/*!
 @brief Throw an error.
 @param msg Message Key for the error
 @param args Array of arguments to be used in the error message
 */
- (void)errorWithNSString:(NSString *)msg
        withNSObjectArray:(IOSObjectArray *)args;

/*!
 @brief DOM Level 3
  An attribute specifying the actual encoding of this document.This is 
 <code>null</code> otherwise.
 <br> This attribute represents the property [character encoding scheme]
  defined in .
 @since DOM Level 3
 */
- (NSString *)getActualEncoding;

/*!
 @brief Unimplemented.See org.w3c.dom.Element
 @param name Name of attribute to get
 @return null
 */
- (NSString *)getAttributeWithNSString:(NSString *)name;

/*!
 @brief Unimplemented.See org.w3c.dom.Element
 @param name Attribute node name
 @return null
 */
- (id<OrgW3cDomAttr>)getAttributeNodeWithNSString:(NSString *)name;

/*!
 @brief Unimplemented.See org.w3c.dom.Element
 @param namespaceURI Namespace URI of attribute node to get
 @param localName Local part of qualified name of attribute node to get
 @return null
 */
- (id<OrgW3cDomAttr>)getAttributeNodeNSWithNSString:(NSString *)namespaceURI
                                       withNSString:(NSString *)localName;

/*!
 @brief Unimplemented.See org.w3c.dom.Element
 @param namespaceURI Namespace URI of attribute node to get
 @param localName Local part of qualified name of attribute node to get
 @return null
 */
- (NSString *)getAttributeNSWithNSString:(NSString *)namespaceURI
                            withNSString:(NSString *)localName;

/*!
 @brief Unimplemented.See org.w3c.dom.Node
 @return null
 */
- (id<OrgW3cDomNamedNodeMap>)getAttributes;

/*!
 @brief The absolute base URI of this node or <code>null</code> if undefined.
 This value is computed according to . However, when the 
 <code>Document</code> supports the feature "HTML" , the base URI is
  computed using first the value of the href attribute of the HTML BASE
  element if any, and the value of the <code>documentURI</code>
  attribute from the <code>Document</code> interface otherwise. 
 <br> When the node is an <code>Element</code>, a <code>Document</code>
  or a a <code>ProcessingInstruction</code>, this attribute represents
  the properties [base URI] defined in . When the node is a 
 <code>Notation</code>, an <code>Entity</code>, or an 
 <code>EntityReference</code>, this attribute represents the
  properties [declaration base URI] in the . How will this be affected
  by resolution of relative namespace URIs issue?It's not.Should this
  only be on Document, Element, ProcessingInstruction, Entity, and
  Notation nodes, according to the infoset? If not, what is it equal to
  on other nodes? Null? An empty string? I think it should be the
  parent's.No.Should this be read-only and computed or and actual
  read-write attribute?Read-only and computed (F2F 19 Jun 2000 and
  teleconference 30 May 2001).If the base HTML element is not yet
  attached to a document, does the insert change the Document.baseURI?
  Yes. (F2F 26 Sep 2001)
 @since DOM Level 3
 */
- (NSString *)getBaseURI;

/*!
 @brief Unimplemented.See org.w3c.dom.Node
 @return null
 */
- (id<OrgW3cDomNodeList>)getChildNodes;

/*!
 @brief Unimplemented.See org.w3c.dom.Document
 @return null
 */
- (id<OrgW3cDomDocumentType>)getDoctype;

/*!
 @brief Unimplemented.See org.w3c.dom.Document
 @return null
 */
- (id<OrgW3cDomElement>)getDocumentElement;

/*!
 @brief DOM Level 3
  The location of the document or <code>null</code> if undefined.
 <br>Beware that when the <code>Document</code> supports the feature
  "HTML" , the href attribute of the HTML BASE element takes precedence
  over this attribute.
 @since DOM Level 3
 */
- (NSString *)getDocumentURI;

/*!
 @brief The configuration used when <code>Document.normalizeDocument</code> is
  invoked.
 @since DOM Level 3
 */
- (id<OrgW3cDomDOMConfiguration>)getDomConfig;

/*!
 @brief Unimplemented.See org.w3c.dom.Document
 @param elementId ID of the element to get
 @return null
 */
- (id<OrgW3cDomElement>)getElementByIdWithNSString:(NSString *)elementId;

/*!
 @brief Unimplemented.See org.w3c.dom.Element
 @param name Name of the element
 @return null
 */
- (id<OrgW3cDomNodeList>)getElementsByTagNameWithNSString:(NSString *)name;

/*!
 @brief Unimplemented.See org.w3c.dom.Element
 @param namespaceURI Namespace URI of the element
 @param localName Local part of qualified name of the element
 @return null
 */
- (id<OrgW3cDomNodeList>)getElementsByTagNameNSWithNSString:(NSString *)namespaceURI
                                               withNSString:(NSString *)localName;

/*!
 @brief This method returns a specialized object which implements the
  specialized APIs of the specified feature and version.The
  specialized object may also be obtained by using binding-specific
  casting methods but is not necessarily expected to, as discussed in Mixed DOM implementations.
 @param feature The name of the feature requested (case-insensitive).
 @param version_ This is the version number of the feature to test. If    the version is 
  <code> null </code>  or the empty string, supporting    any version of the feature will cause the method to return an
     object that supports at least one version of the feature.
 @return Returns an object which implements the specialized APIs of
    the specified feature and version, if any, or <code>null</code> if
    there is no object which implements interfaces associated with that
    feature. If the <code>DOMObject</code> returned by this method
    implements the <code>Node</code> interface, it must delegate to the
    primary core <code>Node</code> and not return results inconsistent
    with the primary core <code>Node</code> such as attributes,
    childNodes, etc.
 @since DOM Level 3
 */
- (id)getFeatureWithNSString:(NSString *)feature
                withNSString:(NSString *)version_;

/*!
 @brief Unimplemented.See org.w3c.dom.Node
 @return null
 */
- (id<OrgW3cDomNode>)getFirstChild;

/*!
 @brief Unimplemented.See org.w3c.dom.Document
 @return null
 */
- (id<OrgW3cDomDOMImplementation>)getImplementation;

/*!
 @brief <p>Based on the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>
 Document
  Object Model (DOM) Level 3 Core Specification of 07 April 2004.
 </a>.
  <p>
  An attribute specifying, as part of the XML declaration, the encoding
  of this document. This is <code>null</code> when unspecified.
 @since DOM Level 3
  NEEDSDOC ($objectName$) @@return
 */
- (NSString *)getInputEncoding;

/*!
 @brief Unimplemented.See org.w3c.dom.Node
 @return null
 */
- (id<OrgW3cDomNode>)getLastChild;

/*!
 @brief Unimplemented.See org.w3c.dom.NodeList
 @return 0
 */
- (jint)getLength;

/*!
 @brief Unimplemented.See org.w3c.dom.Node
 @return null
 */
- (NSString *)getLocalName;

/*!
 @brief Unimplemented.See org.w3c.dom.Node
 @return null
 */
- (NSString *)getNamespaceURI;

/*!
 @brief Unimplemented.See org.w3c.dom.Node
 @return null
 */
- (id<OrgW3cDomNode>)getNextSibling;

/*!
 @brief Unimplemented.See org.w3c.dom.Node
 @return null
 */
- (NSString *)getNodeName;

/*!
 @brief Unimplemented.See org.w3c.dom.Node
 @return 0
 */
- (jshort)getNodeType;

/*!
 @brief Unimplemented.See org.w3c.dom.Node
 @return null
 @throw DOMException
 */
- (NSString *)getNodeValue;

/*!
 @brief Unimplemented.See org.w3c.dom.Node
 @return null
 */
- (id<OrgW3cDomDocument>)getOwnerDocument;

/*!
 @brief Unimplemented.See org.w3c.dom.Node
 @return null
 */
- (id<OrgW3cDomElement>)getOwnerElement;

/*!
 @brief Unimplemented.See org.w3c.dom.Node
 @return null
 */
- (id<OrgW3cDomNode>)getParentNode;

/*!
 @brief Unimplemented.See org.w3c.dom.Node
 @return null
 */
- (NSString *)getPrefix;

/*!
 @brief Unimplemented.See org.w3c.dom.Node
 @return null
 */
- (id<OrgW3cDomNode>)getPreviousSibling;

/*!
 @brief Method getSchemaTypeInfo.
 @return TypeInfo
 */
- (id<OrgW3cDomTypeInfo>)getSchemaTypeInfo;

/*!
 @brief Unimplemented.See org.w3c.dom.Node
 @return False
 */
- (jboolean)getSpecified;

/*!
 @brief <p>Based on the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>
 Document
  Object Model (DOM) Level 3 Core Specification of 07 April 2004.
 </a>.
  <p>
  An attribute specifying whether errors checking is enforced or not.
  When set to <code>false</code>, the implementation is free to not
  test every possible error case normally defined on DOM operations,
  and not raise any <code>DOMException</code>. In case of error, the
  behavior is undefined. This attribute is <code>true</code> by
  defaults.
 @since DOM Level 3
  NEEDSDOC ($objectName$) @@return
 */
- (jboolean)getStrictErrorChecking;

/*!
 @brief Unimplemented.See org.w3c.dom.Node
 @return null
 */
- (NSString *)getTagName;

/*!
 @brief This attribute returns the text content of this node and its
  descendants.When it is defined to be null, setting it has no effect.
 When set, any possible children this node may have are removed and
  replaced by a single <code>Text</code> node containing the string
  this attribute is set to. On getting, no serialization is performed,
  the returned string does not contain any markup. No whitespace
  normalization is performed, the returned string does not contain the
  element content whitespaces . Similarly, on setting, no parsing is
  performed either, the input string is taken as pure textual content. 
 <br>The string returned is made of the text content of this node
  depending on its type, as defined below: 
 <table border='1'>
  <tr>
  <th>Node type</th>
  <th>Content</th>
  </tr>
  <tr>
  <td valign='top' rowspan='1' colspan='1'>
  ELEMENT_NODE, ENTITY_NODE, ENTITY_REFERENCE_NODE,
  DOCUMENT_FRAGMENT_NODE</td>
  <td valign='top' rowspan='1' colspan='1'>concatenation of the <code>textContent</code>
  attribute value of every child node, excluding COMMENT_NODE and
  PROCESSING_INSTRUCTION_NODE nodes</td>
  </tr>
  <tr>
  <td valign='top' rowspan='1' colspan='1'>ATTRIBUTE_NODE, TEXT_NODE,
  CDATA_SECTION_NODE, COMMENT_NODE, PROCESSING_INSTRUCTION_NODE</td>
  <td valign='top' rowspan='1' colspan='1'>
  <code>nodeValue</code></td>
  </tr>
  <tr>
  <td valign='top' rowspan='1' colspan='1'>DOCUMENT_NODE, DOCUMENT_TYPE_NODE, NOTATION_NODE</td>
  <td valign='top' rowspan='1' colspan='1'>
  null</td>
  </tr>
  </table>
 @throw DOMException
 NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly.
 @throw DOMException
 DOMSTRING_SIZE_ERR: Raised when it would return more characters than
    fit in a <code>DOMString</code> variable on the implementation
    platform.
 @since DOM Level 3
 */
- (NSString *)getTextContent;

/*!
 @brief Retrieves the object associated to a key on a this node.The object
  must first have been set to this node by calling 
 <code>setUserData</code> with the same key.
 @param key The key the object is associated to.
 @return Returns the <code>DOMObject</code> associated to the given key
    on this node, or <code>null</code> if there was none.
 @since DOM Level 3
 */
- (id)getUserDataWithNSString:(NSString *)key;

/*!
 @brief DOM Level 3
  Returns all text of <code>Text</code> nodes logically-adjacent text
  nodes to this node, concatenated in document order.
 @since DOM Level 3
 */
- (NSString *)getWholeText;

- (NSString *)getXmlEncoding;

- (jboolean)getXmlStandalone;

- (NSString *)getXmlVersion;

/*!
 @brief Unimplemented.See org.w3c.dom.Element
 @param name Name of an attribute
 @return false
 */
- (jboolean)hasAttributeWithNSString:(NSString *)name;

/*!
 @brief Unimplemented.See org.w3c.dom.Element
 @param name
 @param x
 @return false
 */
- (jboolean)hasAttributeNSWithNSString:(NSString *)name
                          withNSString:(NSString *)x;

/*!
 @brief Unimplemented.Introduced in DOM Level 2.
 @return false
 */
- (jboolean)hasAttributes;

/*!
 @brief Unimplemented.See org.w3c.dom.Node
 @return false
 */
- (jboolean)hasChildNodes;

/*!
 @brief Unimplemented.See org.w3c.dom.Document
 @param importedNode The node to import.
 @param deep If  <code> true </code> , recursively import the subtree under    the specified node; if 
  <code> false </code> , import only the node    itself, as explained above. This has no effect on 
  <code> Attr </code>    , 
  <code> EntityReference </code> , and  <code> Notation </code>  nodes.
 @return null
 @throw DOMException
 */
- (id<OrgW3cDomNode>)importNodeWithOrgW3cDomNode:(id<OrgW3cDomNode>)importedNode
                                     withBoolean:(jboolean)deep;

/*!
 @brief Unimplemented.See org.w3c.dom.Node
 @param newChild New child node to insert
 @param refChild Insert in front of this child
 @return null
 @throw DOMException
 */
- (id<OrgW3cDomNode>)insertBeforeWithOrgW3cDomNode:(id<OrgW3cDomNode>)newChild
                                 withOrgW3cDomNode:(id<OrgW3cDomNode>)refChild;

/*!
 @brief Unimplemented.
 @param offset Start offset of substring to insert.  NEEDSDOC @@param arg
 @throw DOMException
 */
- (void)insertDataWithInt:(jint)offset
             withNSString:(NSString *)arg;

/*!
 @brief DOM Level 3:
   This method checks if the specified <code>namespaceURI</code> is the
   default namespace or not.
 @param namespaceURI The namespace URI to look for.
 @return <code>true</code> if the specified <code>namespaceURI</code>
    is the default namespace, <code>false</code> otherwise.
 @since DOM Level 3
 */
- (jboolean)isDefaultNamespaceWithNSString:(NSString *)namespaceURI;

/*!
 @brief Tests whether two nodes are equal.
 <br>This method tests for equality of nodes, not sameness (i.e.,
  whether the two nodes are references to the same object) which can be
  tested with <code>Node.isSameNode</code>. All nodes that are the same
  will also be equal, though the reverse may not be true. 
 <br>Two nodes are equal if and only if the following conditions are
  satisfied: The two nodes are of the same type.The following string
  attributes are equal: <code>nodeName</code>, <code>localName</code>,
  <code>namespaceURI</code>, <code>prefix</code>, <code>nodeValue</code>
  , <code>baseURI</code>. This is: they are both <code>null</code>, or
  they have the same length and are character for character identical.
  The <code>attributes</code> <code>NamedNodeMaps</code> are equal.
  This is: they are both <code>null</code>, or they have the same
  length and for each node that exists in one map there is a node that
  exists in the other map and is equal, although not necessarily at the
  same index.The <code>childNodes</code> <code>NodeLists</code> are
  equal. This is: they are both <code>null</code>, or they have the
  same length and contain equal nodes at the same index. This is true
  for <code>Attr</code> nodes as for any other type of node. Note that
  normalization can affect equality; to avoid this, nodes should be
  normalized before being compared. 
 <br>For two <code>DocumentType</code> nodes to be equal, the following
  conditions must also be satisfied: The following string attributes
  are equal: <code>publicId</code>, <code>systemId</code>,
  <code>internalSubset</code>.The <code>entities</code>
  <code>NamedNodeMaps</code> are equal.The <code>notations</code>
  <code>NamedNodeMaps</code> are equal. 
 <br>On the other hand, the following do not affect equality: the 
 <code>ownerDocument</code> attribute, the <code>specified</code>
  attribute for <code>Attr</code> nodes, the 
 <code>isWhitespaceInElementContent</code> attribute for 
 <code>Text</code> nodes, as well as any user data or event listeners
  registered on the nodes.
 @param arg The node to compare equality with.
 @param deep If  <code> true </code> , recursively compare the subtrees; if
      <code> false </code> , compare only the nodes themselves (and its
     attributes, if it is an  <code> Element </code> ).
 @return If the nodes, and possibly subtrees are equal,
    <code>true</code> otherwise <code>false</code>.
 @since DOM Level 3
 */
- (jboolean)isEqualNodeWithOrgW3cDomNode:(id<OrgW3cDomNode>)arg;

- (jboolean)isId;

/*!
 @brief Returns whether this node is the same node as the given one.
 <br>This method provides a way to determine whether two 
 <code>Node</code> references returned by the implementation reference
  the same object. When two <code>Node</code> references are references
  to the same object, even if through a proxy, the references may be
  used completely interchangably, such that all attributes have the
  same values and calling the same DOM method on either reference
  always has exactly the same effect.
 @param other The node to test against.
 @return Returns <code>true</code> if the nodes are the same,
    <code>false</code> otherwise.
 @since DOM Level 3
 */
- (jboolean)isSameNodeWithOrgW3cDomNode:(id<OrgW3cDomNode>)other;

/*!
 @brief Tests whether the DOM implementation implements a specific feature and
  that feature is supported by this node.
 @param feature The name of the feature to test. This is the same name    which can be passed to the method 
  <code> hasFeature </code>  on    
  <code> DOMImplementation </code> .
 @param version_ This is the version number of the feature to test. In    Level 2, version 1, this is the string "2.0". If the version is not
     specified, supporting any version of the feature will cause the
     method to return 
  <code> true </code> .
 @return Returns <code>false</code>
 @since DOM Level 2
 */
- (jboolean)isSupportedWithNSString:(NSString *)feature
                       withNSString:(NSString *)version_;

/*!
 @brief DOM Level 3
  Returns whether this text node contains whitespace in element content,
  often abusively called "ignorable whitespace".
 */
- (jboolean)isWhitespaceInElementContent;

/*!
 @brief Unimplemented.See org.w3c.dom.NodeList
 @param index index of a child of this node in its list of children
 @return null
 */
- (id<OrgW3cDomNode>)itemWithInt:(jint)index;

/*!
 @brief DOM Level 3:
  Look up the namespace URI associated to the given prefix, starting from this node.
 Use lookupNamespaceURI(null) to lookup the default namespace
 @param namespaceURI
 @return th URI for the namespace
 @since DOM Level 3
 */
- (NSString *)lookupNamespaceURIWithNSString:(NSString *)specifiedPrefix;

/*!
 @brief DOM Level 3:
  Look up the prefix associated to the given namespace URI, starting from this node.
 @param namespaceURI
 @return the prefix for the namespace
 */
- (NSString *)lookupPrefixWithNSString:(NSString *)namespaceURI;

/*!
 @brief Unimplemented.See org.w3c.dom.Node
 */
- (void)normalize;

/*!
 @brief DOM Level 3
   Normalize document.
 */
- (void)normalizeDocument;

/*!
 @brief Unimplemented.See org.w3c.dom.Element
 @param name Attribute node name to remove from list of attributes
 @throw DOMException
 */
- (void)removeAttributeWithNSString:(NSString *)name;

/*!
 @brief Unimplemented.See org.w3c.dom.Element
 @param oldAttr Attribute to be removed from this node's list of attributes
 @return null
 @throw DOMException
 */
- (id<OrgW3cDomAttr>)removeAttributeNodeWithOrgW3cDomAttr:(id<OrgW3cDomAttr>)oldAttr;

/*!
 @brief Unimplemented.See org.w3c.dom.Element
 @param namespaceURI Namespace URI of attribute node to remove
 @param localName Local part of qualified name of attribute node to remove
 @throw DOMException
 */
- (void)removeAttributeNSWithNSString:(NSString *)namespaceURI
                         withNSString:(NSString *)localName;

/*!
 @brief Unimplemented.See org.w3c.dom.Node
 @param oldChild Child to be removed
 @return null
 @throw DOMException
 */
- (id<OrgW3cDomNode>)removeChildWithOrgW3cDomNode:(id<OrgW3cDomNode>)oldChild;

/*!
 @brief DOM Level 3
  Renaming node
 */
- (id<OrgW3cDomNode>)renameNodeWithOrgW3cDomNode:(id<OrgW3cDomNode>)n
                                    withNSString:(NSString *)namespaceURI
                                    withNSString:(NSString *)name;

/*!
 @brief Unimplemented.See org.w3c.dom.Node
 @param newChild Replace existing child with this one
 @param oldChild Existing child to be replaced
 @return null
 @throw DOMException
 */
- (id<OrgW3cDomNode>)replaceChildWithOrgW3cDomNode:(id<OrgW3cDomNode>)newChild
                                 withOrgW3cDomNode:(id<OrgW3cDomNode>)oldChild;

/*!
 @brief Unimplemented.
 @param offset Start offset of substring to replace.
 @param count The length of the substring to replace.
 @param arg substring to replace with
 @throw DOMException
 */
- (void)replaceDataWithInt:(jint)offset
                   withInt:(jint)count
              withNSString:(NSString *)arg;

/*!
 @brief DOM Level 3
 */
- (id<OrgW3cDomText>)replaceWholeTextWithNSString:(NSString *)content;

/*!
 @brief DOM Level 3
  An attribute specifying the actual encoding of this document.This is 
 <code>null</code> otherwise.
 <br> This attribute represents the property [character encoding scheme]
  defined in .
 @since DOM Level 3
 */
- (void)setActualEncodingWithNSString:(NSString *)value;

/*!
 @brief Unimplemented.See org.w3c.dom.Element
 @param name Name of attribute to set
 @param value Value of attribute
 @throw DOMException
 */
- (void)setAttributeWithNSString:(NSString *)name
                    withNSString:(NSString *)value;

/*!
 @brief Unimplemented.See org.w3c.dom.Element
 @param newAttr Attribute node to be added to this node's list of attributes
 @return null
 @throw DOMException
 */
- (id<OrgW3cDomAttr>)setAttributeNodeWithOrgW3cDomAttr:(id<OrgW3cDomAttr>)newAttr;

/*!
 @brief Unimplemented.See org.w3c.dom.Element
 @param newAttr Attribute to set
 @return null
 @throw DOMException
 */
- (id<OrgW3cDomAttr>)setAttributeNodeNSWithOrgW3cDomAttr:(id<OrgW3cDomAttr>)newAttr;

/*!
 @brief Unimplemented.See org.w3c.dom.Element
 @param namespaceURI Namespace URI of attribute node to set  NEEDSDOC @@param qualifiedName
 @param value value of attribute
 @throw DOMException
 */
- (void)setAttributeNSWithNSString:(NSString *)namespaceURI
                      withNSString:(NSString *)qualifiedName
                      withNSString:(NSString *)value;

/*!
 @brief Set Node data
 @param data data to set for this node
 @throw DOMException
 */
- (void)setDataWithNSString:(NSString *)data;

/*!
 @brief DOM Level 3
 */
- (void)setDocumentURIWithNSString:(NSString *)documentURI;

/*!
 @brief NON-DOM: set the type of this attribute to be ID type.
 @param id_
 */
- (void)setIdAttributeWithBoolean:(jboolean)id_;

/*!
 @brief DOM Level 3: register the given attribute node as an ID attribute
 */
- (void)setIdAttributeWithNSString:(NSString *)name
                       withBoolean:(jboolean)makeId;

/*!
 @brief DOM Level 3: register the given attribute node as an ID attribute
 */
- (void)setIdAttributeNodeWithOrgW3cDomAttr:(id<OrgW3cDomAttr>)at
                                withBoolean:(jboolean)makeId;

/*!
 @brief DOM Level 3: register the given attribute node as an ID attribute
 */
- (void)setIdAttributeNSWithNSString:(NSString *)namespaceURI
                        withNSString:(NSString *)localName
                         withBoolean:(jboolean)makeId;

/*!
 @brief <p>Based on the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>
 Document
  Object Model (DOM) Level 3 Core Specification of 07 April 2004.
 </a>.
  <p>
  An attribute specifying, as part of the XML declaration, the encoding
  of this document. This is <code>null</code> when unspecified.
 @since DOM Level 3
  NEEDSDOC @@param encoding
 */
- (void)setInputEncodingWithNSString:(NSString *)encoding;

/*!
 @brief Unimplemented.See org.w3c.dom.Node
 @param nodeValue Value to set this node to
 @throw DOMException
 */
- (void)setNodeValueWithNSString:(NSString *)nodeValue;

/*!
 @brief Unimplemented.See org.w3c.dom.Node
 @param prefix Prefix to set for this node
 @throw DOMException
 */
- (void)setPrefixWithNSString:(NSString *)prefix;

/*!
 @brief <p>Based on the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>
 Document
  Object Model (DOM) Level 3 Core Specification of 07 April 2004.
 </a>.
  <p>
  An attribute specifying whether errors checking is enforced or not.
  When set to <code>false</code>, the implementation is free to not
  test every possible error case normally defined on DOM operations,
  and not raise any <code>DOMException</code>. In case of error, the
  behavior is undefined. This attribute is <code>true</code> by
  defaults.
 @since DOM Level 3
  NEEDSDOC @@param strictErrorChecking
 */
- (void)setStrictErrorCheckingWithBoolean:(jboolean)strictErrorChecking;

/*!
 @brief This attribute returns the text content of this node and its
  descendants.When it is defined to be null, setting it has no effect.
 When set, any possible children this node may have are removed and
  replaced by a single <code>Text</code> node containing the string
  this attribute is set to. On getting, no serialization is performed,
  the returned string does not contain any markup. No whitespace
  normalization is performed, the returned string does not contain the
  element content whitespaces . Similarly, on setting, no parsing is
  performed either, the input string is taken as pure textual content. 
 <br>The string returned is made of the text content of this node
  depending on its type, as defined below: 
 <table border='1'>
  <tr>
  <th>Node type</th>
  <th>Content</th>
  </tr>
  <tr>
  <td valign='top' rowspan='1' colspan='1'>
  ELEMENT_NODE, ENTITY_NODE, ENTITY_REFERENCE_NODE,
  DOCUMENT_FRAGMENT_NODE</td>
  <td valign='top' rowspan='1' colspan='1'>concatenation of the <code>textContent</code>
  attribute value of every child node, excluding COMMENT_NODE and
  PROCESSING_INSTRUCTION_NODE nodes</td>
  </tr>
  <tr>
  <td valign='top' rowspan='1' colspan='1'>ATTRIBUTE_NODE, TEXT_NODE,
  CDATA_SECTION_NODE, COMMENT_NODE, PROCESSING_INSTRUCTION_NODE</td>
  <td valign='top' rowspan='1' colspan='1'>
  <code>nodeValue</code></td>
  </tr>
  <tr>
  <td valign='top' rowspan='1' colspan='1'>DOCUMENT_NODE, DOCUMENT_TYPE_NODE, NOTATION_NODE</td>
  <td valign='top' rowspan='1' colspan='1'>
  null</td>
  </tr>
  </table>
 @throw DOMException
 NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly.
 @throw DOMException
 DOMSTRING_SIZE_ERR: Raised when it would return more characters than
    fit in a <code>DOMString</code> variable on the implementation
    platform.
 @since DOM Level 3
 */
- (void)setTextContentWithNSString:(NSString *)textContent;

- (id)setUserDataWithNSString:(NSString *)key
                       withId:(id)data
 withOrgW3cDomUserDataHandler:(id<OrgW3cDomUserDataHandler>)handler;

/*!
 @brief Unimplemented.See org.w3c.dom.Node
 @param value Value to set this node to
 @throw DOMException
 */
- (void)setValueWithNSString:(NSString *)value;

- (void)setXmlEncodingWithNSString:(NSString *)xmlEncoding;

- (void)setXmlStandaloneWithBoolean:(jboolean)xmlStandalone;

- (void)setXmlVersionWithNSString:(NSString *)xmlVersion;

/*!
 @brief Unimplemented.
 @param offset Offset into text to split
 @return null, unimplemented
 @throw DOMException
 */
- (id<OrgW3cDomText>)splitTextWithInt:(jint)offset;

/*!
 @brief Unimplemented.
 @param offset Start offset of substring to extract.
 @param count The length of the substring to extract.
 @return null
 @throw DOMException
 */
- (NSString *)substringDataWithInt:(jint)offset
                           withInt:(jint)count;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXmlUtilsUnImplNode)

J2OBJC_FIELD_SETTER(OrgApacheXmlUtilsUnImplNode, fDocumentURI_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheXmlUtilsUnImplNode, actualEncoding_, NSString *)

FOUNDATION_EXPORT void OrgApacheXmlUtilsUnImplNode_init(OrgApacheXmlUtilsUnImplNode *self);

FOUNDATION_EXPORT OrgApacheXmlUtilsUnImplNode *new_OrgApacheXmlUtilsUnImplNode_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlUtilsUnImplNode *create_OrgApacheXmlUtilsUnImplNode_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlUtilsUnImplNode)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgApacheXmlUtilsUnImplNode")
