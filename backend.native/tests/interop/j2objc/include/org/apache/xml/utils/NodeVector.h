//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xml/utils/NodeVector.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXmlUtilsNodeVector")
#ifdef RESTRICT_OrgApacheXmlUtilsNodeVector
#define INCLUDE_ALL_OrgApacheXmlUtilsNodeVector 0
#else
#define INCLUDE_ALL_OrgApacheXmlUtilsNodeVector 1
#endif
#undef RESTRICT_OrgApacheXmlUtilsNodeVector

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheXmlUtilsNodeVector_) && (INCLUDE_ALL_OrgApacheXmlUtilsNodeVector || defined(INCLUDE_OrgApacheXmlUtilsNodeVector))
#define OrgApacheXmlUtilsNodeVector_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class IOSIntArray;

/*!
 @brief A very simple table that stores a list of Nodes.
 */
@interface OrgApacheXmlUtilsNodeVector : NSObject < JavaIoSerializable, NSCopying > {
 @public
  /*!
   @brief Number of nodes in this NodeVector.
   */
  jint m_firstFree_;
}
@property (readonly, class) jlong serialVersionUID NS_SWIFT_NAME(serialVersionUID);

+ (jlong)serialVersionUID;

#pragma mark Public

/*!
 @brief Default constructor.
 */
- (instancetype __nonnull)init;

/*!
 @brief Construct a NodeVector, using the given block size.
 @param blocksize Size of blocks to allocate
 */
- (instancetype __nonnull)initWithInt:(jint)blocksize;

/*!
 @brief Append a Node onto the vector.
 @param value Node to add to the vector
 */
- (void)addElementWithInt:(jint)value;

/*!
 @brief Append the nodes to the list.
 @param nodes NodeVector to append to this list
 */
- (void)appendNodesWithOrgApacheXmlUtilsNodeVector:(OrgApacheXmlUtilsNodeVector *)nodes;

/*!
 @brief Get a cloned LocPathIterator.
 @return A clone of this
 @throw CloneNotSupportedException
 */
- (id)java_clone;

/*!
 @brief Tell if the table contains the given node.
 @param s Node to look for
 @return True if the given node was found.
 */
- (jboolean)containsWithInt:(jint)s;

/*!
 @brief Get the nth element.
 @param i Index of node to get
 @return Node at specified index
 */
- (jint)elementAtWithInt:(jint)i;

/*!
 @brief Searches for the first occurence of the given argument,
  beginning the search at index, and testing for equality
  using the equals method.
 @param elem Node to look for
 @return the index of the first occurrence of the object
  argument in this vector at position index or later in the
  vector; returns -1 if the object is not found.
 */
- (jint)indexOfWithInt:(jint)elem;

/*!
 @brief Searches for the first occurence of the given argument,
  beginning the search at index, and testing for equality
  using the equals method.
 @param elem Node to look for
 @param index Index of where to start the search
 @return the index of the first occurrence of the object
  argument in this vector at position index or later in the
  vector; returns -1 if the object is not found.
 */
- (jint)indexOfWithInt:(jint)elem
               withInt:(jint)index;

/*!
 @brief Inserts the specified node in this vector at the specified index.
 Each component in this vector with an index greater or equal to
  the specified index is shifted upward to have an index one greater
  than the value it had previously.
 @param value Node to insert
 @param at Position where to insert
 */
- (void)insertElementAtWithInt:(jint)value
                       withInt:(jint)at;

/*!
 @brief Insert a node in order in the list.
 @param value Node to insert
 */
- (void)insertInOrderWithInt:(jint)value;

/*!
 @brief Return the node at the top of the stack without popping the stack.
 Special purpose method for TransformerImpl, pushElemTemplateElement.
  Performance critical.
 @return Node at the top of the stack or null if stack is empty.
 */
- (jint)peepOrNull;

/*!
 @brief Return the node at the tail of the vector without popping
  Special purpose method for TransformerImpl, pushElemTemplateElement.
 Performance critical.
 @return Node at the tail of the vector
 */
- (jint)peepTail;

/*!
 @brief Return the node one position from the tail without popping.
 Special purpose method for TransformerImpl, pushElemTemplateElement.
  Performance critical.
 @return Node one away from the tail
 */
- (jint)peepTailSub1;

/*!
 @brief Pop a node from the tail of the vector and return the result.
 @return the node at the tail of the vector
 */
- (jint)pop;

/*!
 @brief Pop a node from the tail of the vector and return the
  top of the stack after the pop.
 @return The top of the stack after it's been popped
 */
- (jint)popAndTop;

/*!
 @brief Pop a pair of nodes from the tail of the stack.
 Special purpose method for TransformerImpl, pushElemTemplateElement.
  Performance critical.
 */
- (void)popPair;

/*!
 @brief Pop a node from the tail of the vector.
 */
- (void)popQuick;

/*!
 @brief Append a Node onto the vector.
 @param value Node to add to the vector
 */
- (void)pushWithInt:(jint)value;

/*!
 @brief Push a pair of nodes into the stack.
 Special purpose method for TransformerImpl, pushElemTemplateElement.
  Performance critical.
 @param v1 First node to add to vector
 @param v2 Second node to add to vector
 */
- (void)pushPairWithInt:(jint)v1
                withInt:(jint)v2;

/*!
 @brief Inserts the specified node in this vector at the specified index.
 Each component in this vector with an index greater or equal to
  the specified index is shifted upward to have an index one greater
  than the value it had previously.
 */
- (void)removeAllElements;

/*!
 @brief Set the length to zero, but don't clear the array.
 */
- (void)RemoveAllNoClear;

/*!
 @brief Removes the first occurrence of the argument from this vector.
 If the object is found in this vector, each component in the vector
  with an index greater or equal to the object's index is shifted
  downward to have an index one smaller than the value it had
  previously.
 @param s Node to remove from the list
 @return True if the node was successfully removed
 */
- (jboolean)removeElementWithInt:(jint)s;

/*!
 @brief Deletes the component at the specified index.Each component in
  this vector with an index greater or equal to the specified
  index is shifted downward to have an index one smaller than
  the value it had previously.
 @param i Index of node to remove
 */
- (void)removeElementAtWithInt:(jint)i;

/*!
 @brief Sets the component at the specified index of this vector to be the
  specified object.The previous component at that position is discarded.
 The index must be a value greater than or equal to 0 and less
  than the current size of the vector.
 @param node Node to set
 @param index Index of where to set the node
 */
- (void)setElementAtWithInt:(jint)node
                    withInt:(jint)index;

/*!
 @brief Set the tail of the stack to the given node.
 Special purpose method for TransformerImpl, pushElemTemplateElement.
  Performance critical.
 @param n Node to set at the tail of vector
 */
- (void)setTailWithInt:(jint)n;

/*!
 @brief Set the given node one position from the tail.
 Special purpose method for TransformerImpl, pushElemTemplateElement.
  Performance critical.
 @param n Node to set
 */
- (void)setTailSub1WithInt:(jint)n;

/*!
 @brief Get the length of the list.
 @return Number of nodes in this NodeVector
 */
- (jint)size;

/*!
 @brief Sort an array using a quicksort algorithm.
 @throw Exception
 */
- (void)sort;

/*!
 @brief Sort an array using a quicksort algorithm.
 @param a The array to be sorted.
 @param lo0 The low index.
 @param hi0 The high index.
 @throw Exception
 */
- (void)sortWithIntArray:(IOSIntArray *)a
                 withInt:(jint)lo0
                 withInt:(jint)hi0;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXmlUtilsNodeVector)

inline jlong OrgApacheXmlUtilsNodeVector_get_serialVersionUID(void);
#define OrgApacheXmlUtilsNodeVector_serialVersionUID -713473092200731870LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlUtilsNodeVector, serialVersionUID, jlong)

FOUNDATION_EXPORT void OrgApacheXmlUtilsNodeVector_init(OrgApacheXmlUtilsNodeVector *self);

FOUNDATION_EXPORT OrgApacheXmlUtilsNodeVector *new_OrgApacheXmlUtilsNodeVector_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlUtilsNodeVector *create_OrgApacheXmlUtilsNodeVector_init(void);

FOUNDATION_EXPORT void OrgApacheXmlUtilsNodeVector_initWithInt_(OrgApacheXmlUtilsNodeVector *self, jint blocksize);

FOUNDATION_EXPORT OrgApacheXmlUtilsNodeVector *new_OrgApacheXmlUtilsNodeVector_initWithInt_(jint blocksize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlUtilsNodeVector *create_OrgApacheXmlUtilsNodeVector_initWithInt_(jint blocksize);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlUtilsNodeVector)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgApacheXmlUtilsNodeVector")
