//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xml/utils/PrefixResolverDefault.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXmlUtilsPrefixResolverDefault")
#ifdef RESTRICT_OrgApacheXmlUtilsPrefixResolverDefault
#define INCLUDE_ALL_OrgApacheXmlUtilsPrefixResolverDefault 0
#else
#define INCLUDE_ALL_OrgApacheXmlUtilsPrefixResolverDefault 1
#endif
#undef RESTRICT_OrgApacheXmlUtilsPrefixResolverDefault

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheXmlUtilsPrefixResolverDefault_) && (INCLUDE_ALL_OrgApacheXmlUtilsPrefixResolverDefault || defined(INCLUDE_OrgApacheXmlUtilsPrefixResolverDefault))
#define OrgApacheXmlUtilsPrefixResolverDefault_

#define RESTRICT_OrgApacheXmlUtilsPrefixResolver 1
#define INCLUDE_OrgApacheXmlUtilsPrefixResolver 1
#include "org/apache/xml/utils/PrefixResolver.h"

@protocol OrgW3cDomNode;

/*!
 @brief This class implements a generic PrefixResolver that
  can be used to perform prefix-to-namespace lookup
  for the XPath object.
 */
@interface OrgApacheXmlUtilsPrefixResolverDefault : NSObject < OrgApacheXmlUtilsPrefixResolver > {
 @public
  /*!
   @brief The context to resolve the prefix from, if the context
  is not given.
   */
  id<OrgW3cDomNode> m_context_;
}

#pragma mark Public

/*!
 @brief Construct a PrefixResolverDefault object.
 @param xpathExpressionContext The context from  which XPath expression prefixes will be resolved.
   Warning: This will not work correctly if xpathExpressionContext
   is an attribute node.
 */
- (instancetype __nonnull)initWithOrgW3cDomNode:(id<OrgW3cDomNode>)xpathExpressionContext;

/*!
 @brief Return the base identifier.
 @return null
 */
- (NSString *)getBaseIdentifier;

/*!
 @brief Given a namespace, get the corrisponding prefix.This assumes that
  the PrevixResolver hold's it's own namespace context, or is a namespace
  context itself.
 @param prefix Prefix to resolve.
 @return Namespace that prefix resolves to, or null if prefix
  is not bound.
 */
- (NSString *)getNamespaceForPrefixWithNSString:(NSString *)prefix;

/*!
 @brief Given a namespace, get the corrisponding prefix.
 Warning: This will not work correctly if namespaceContext
  is an attribute node.
 @param prefix Prefix to resolve.
 @param namespaceContext Node from which to start searching for a  xmlns attribute that binds a prefix to a namespace.
 @return Namespace that prefix resolves to, or null if prefix
  is not bound.
 */
- (NSString *)getNamespaceForPrefixWithNSString:(NSString *)prefix
                              withOrgW3cDomNode:(id<OrgW3cDomNode>)namespaceContext;

/*!
 - seealso: PrefixResolver#handlesNullPrefixes()
 */
- (jboolean)handlesNullPrefixes;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXmlUtilsPrefixResolverDefault)

J2OBJC_FIELD_SETTER(OrgApacheXmlUtilsPrefixResolverDefault, m_context_, id<OrgW3cDomNode>)

FOUNDATION_EXPORT void OrgApacheXmlUtilsPrefixResolverDefault_initWithOrgW3cDomNode_(OrgApacheXmlUtilsPrefixResolverDefault *self, id<OrgW3cDomNode> xpathExpressionContext);

FOUNDATION_EXPORT OrgApacheXmlUtilsPrefixResolverDefault *new_OrgApacheXmlUtilsPrefixResolverDefault_initWithOrgW3cDomNode_(id<OrgW3cDomNode> xpathExpressionContext) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlUtilsPrefixResolverDefault *create_OrgApacheXmlUtilsPrefixResolverDefault_initWithOrgW3cDomNode_(id<OrgW3cDomNode> xpathExpressionContext);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlUtilsPrefixResolverDefault)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgApacheXmlUtilsPrefixResolverDefault")
