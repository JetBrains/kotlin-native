//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xml/dtm/ref/sax2dtm/SAX2DTM2.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXmlDtmRefSax2dtmSAX2DTM2")
#ifdef RESTRICT_OrgApacheXmlDtmRefSax2dtmSAX2DTM2
#define INCLUDE_ALL_OrgApacheXmlDtmRefSax2dtmSAX2DTM2 0
#else
#define INCLUDE_ALL_OrgApacheXmlDtmRefSax2dtmSAX2DTM2 1
#endif
#undef RESTRICT_OrgApacheXmlDtmRefSax2dtmSAX2DTM2
#ifdef INCLUDE_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedDescendantIterator
#define INCLUDE_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_DescendantIterator 1
#endif
#ifdef INCLUDE_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedAncestorIterator
#define INCLUDE_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_AncestorIterator 1
#endif
#ifdef INCLUDE_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedFollowingIterator
#define INCLUDE_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_FollowingIterator 1
#endif
#ifdef INCLUDE_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedPrecedingIterator
#define INCLUDE_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_PrecedingIterator 1
#endif
#ifdef INCLUDE_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedPrecedingSiblingIterator
#define INCLUDE_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_PrecedingSiblingIterator 1
#endif
#ifdef INCLUDE_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedFollowingSiblingIterator
#define INCLUDE_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_FollowingSiblingIterator 1
#endif

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheXmlDtmRefSax2dtmSAX2DTM2_) && (INCLUDE_ALL_OrgApacheXmlDtmRefSax2dtmSAX2DTM2 || defined(INCLUDE_OrgApacheXmlDtmRefSax2dtmSAX2DTM2))
#define OrgApacheXmlDtmRefSax2dtmSAX2DTM2_

#define RESTRICT_OrgApacheXmlDtmRefSax2dtmSAX2DTM 1
#define INCLUDE_OrgApacheXmlDtmRefSax2dtmSAX2DTM 1
#include "org/apache/xml/dtm/ref/sax2dtm/SAX2DTM.h"

@class IOSCharArray;
@class IOSObjectArray;
@class JavaUtilVector;
@class OrgApacheXmlDtmDTMManager;
@class OrgApacheXmlUtilsXMLStringFactory;
@protocol JavaxXmlTransformSource;
@protocol OrgApacheXmlDtmDTMWSFilter;
@protocol OrgApacheXmlSerializerSerializationHandler;
@protocol OrgApacheXmlUtilsXMLString;
@protocol OrgXmlSaxAttributes;
@protocol OrgXmlSaxContentHandler;

/*!
 @brief SAX2DTM2 is an optimized version of SAX2DTM which is used in non-incremental situation.
 It is used as the super class of the XSLTC SAXImpl. Many of the interfaces in SAX2DTM
  and DTMDefaultBase are overridden in SAX2DTM2 in order to allow fast, efficient
  access to the DTM model. Some nested iterators in DTMDefaultBaseIterators
  are also overridden in SAX2DTM2 for performance reasons. 
 <p>
  Performance is the biggest consideration in the design of SAX2DTM2. To make the code most
  efficient, the incremental support is dropped in SAX2DTM2, which means that you should not
  use it in incremental situation. To reduce the overhead of pulling data from the DTM model,
  a few core interfaces in SAX2DTM2 have direct access to the internal arrays of the
  SuballocatedIntVectors. 
 <p>
  The design of SAX2DTM2 may limit its extensibilty. If you have a reason to extend the
  SAX2DTM model, please extend from SAX2DTM instead of this class. 
 <p>
  TODO: This class is currently only used by XSLTC. We need to investigate the possibility
  of also using it in Xalan-J Interpretive. Xalan's performance is likely to get an instant
  boost if we use SAX2DTM2 instead of SAX2DTM in non-incremental case. 
 <p>
  %MK% The code in this class is critical to the XSLTC_DTM performance. Be very careful
  when making changes here!
 */
@interface OrgApacheXmlDtmRefSax2dtmSAX2DTM2 : OrgApacheXmlDtmRefSax2dtmSAX2DTM {
 @public
  IOSObjectArray *m_extendedTypes_;
  JavaUtilVector *m_values_;
  jint m_SHIFT_;
  jint m_MASK_;
  jint m_blocksize_;
  jboolean m_buildIdIndex_;
}
@property (readonly, class) jint TEXT_LENGTH_BITS NS_SWIFT_NAME(TEXT_LENGTH_BITS);
@property (readonly, class) jint TEXT_OFFSET_BITS NS_SWIFT_NAME(TEXT_OFFSET_BITS);
@property (readonly, class) jint TEXT_LENGTH_MAX NS_SWIFT_NAME(TEXT_LENGTH_MAX);
@property (readonly, class) jint TEXT_OFFSET_MAX NS_SWIFT_NAME(TEXT_OFFSET_MAX);

+ (jint)TEXT_LENGTH_BITS;

+ (jint)TEXT_OFFSET_BITS;

+ (jint)TEXT_LENGTH_MAX;

+ (jint)TEXT_OFFSET_MAX;

#pragma mark Public

/*!
 @brief Construct a SAX2DTM2 object using the default block size.
 */
- (instancetype __nonnull)initWithOrgApacheXmlDtmDTMManager:(OrgApacheXmlDtmDTMManager *)mgr
                                withJavaxXmlTransformSource:(id<JavaxXmlTransformSource>)source
                                                    withInt:(jint)dtmIdentity
                             withOrgApacheXmlDtmDTMWSFilter:(id<OrgApacheXmlDtmDTMWSFilter>)whiteSpaceFilter
                      withOrgApacheXmlUtilsXMLStringFactory:(OrgApacheXmlUtilsXMLStringFactory *)xstringfactory
                                                withBoolean:(jboolean)doIndexing;

/*!
 @brief Construct a SAX2DTM2 object using the given block size.
 */
- (instancetype __nonnull)initWithOrgApacheXmlDtmDTMManager:(OrgApacheXmlDtmDTMManager *)mgr
                                withJavaxXmlTransformSource:(id<JavaxXmlTransformSource>)source
                                                    withInt:(jint)dtmIdentity
                             withOrgApacheXmlDtmDTMWSFilter:(id<OrgApacheXmlDtmDTMWSFilter>)whiteSpaceFilter
                      withOrgApacheXmlUtilsXMLStringFactory:(OrgApacheXmlUtilsXMLStringFactory *)xstringfactory
                                                withBoolean:(jboolean)doIndexing
                                                    withInt:(jint)blocksize
                                                withBoolean:(jboolean)usePrevsib
                                                withBoolean:(jboolean)buildIdIndex
                                                withBoolean:(jboolean)newNameTable;

/*!
 @brief Override DTMDefaultBase.
 _exptype() by dropping the incremental code.
 <p>This one is less efficient than _exptype2. It is only used during
  DTM building. _exptype2 is used after the document is fully built.
 */
- (jint)_exptypeWithInt:(jint)identity;

/*!
 @brief The optimized version of DTMDefaultBase.
 _exptype().
 @param identity A node identity, which  <em> must not </em>  be equal to
           <code> DTM.NULL </code>
 */
- (jint)_exptype2WithInt:(jint)identity;

/*!
 @brief Return the node type from the expanded type
 */
- (jint)_exptype2TypeWithInt:(jint)exptype;

/*!
 @brief The optimized version of DTMDefaultBase.
 _firstch().
 @param identity A node identity, which  <em> must not </em>  be equal to
           <code> DTM.NULL </code>
 */
- (jint)_firstch2WithInt:(jint)identity;

/*!
 @brief The optimized version of DTMDefaultBase.
 _nextsib().
 @param identity A node identity, which  <em> must not </em>  be equal to
           <code> DTM.NULL </code>
 */
- (jint)_nextsib2WithInt:(jint)identity;

/*!
 @brief The optimized version of DTMDefaultBase.
 _parent().
 @param identity A node identity, which  <em> must not </em>  be equal to
           <code> DTM.NULL </code>
 */
- (jint)_parent2WithInt:(jint)identity;

/*!
 @brief The optimized version of DTMDefaultBase.
 _type().
 @param identity A node identity, which  <em> must not </em>  be equal to
           <code> DTM.NULL </code>
 */
- (jint)_type2WithInt:(jint)identity;

/*!
 @brief Report an XML comment anywhere in the document.
 <p>This callback will be used for comments inside or outside the
  document element, including comments in the external DTD
  subset (if read).</p>
 @param ch An array holding the characters in the comment.
 @param start The starting position in the array.
 @param length The number of characters to use from the array.
 @throw SAXExceptionThe application may raise an exception.
 */
- (void)commentWithCharArray:(IOSCharArray *)ch
                     withInt:(jint)start
                     withInt:(jint)length;

/*!
 @brief The optimized version of SAX2DTM.dispatchCharactersEvents(int, ContentHandler, boolean).
 <p>
  Directly call the
  characters method on the passed ContentHandler for the
  string-value of the given node (see http://www.w3.org/TR/xpath#data-model
  for the definition of a node's string-value). Multiple calls to the
  ContentHandler's characters methods may well occur for a single call to
  this method.
 @param nodeHandle The node ID.
 @param ch A non-null reference to a ContentHandler.
 @param normalize true if the content should be normalized according to  the rules for the XPath
    <a href="http://www.w3.org/TR/xpath#function-normalize-space">
  normalize-space </a>  function.
 @throw SAXException
 */
- (void)dispatchCharactersEventsWithInt:(jint)nodeHandle
            withOrgXmlSaxContentHandler:(id<OrgXmlSaxContentHandler>)ch
                            withBoolean:(jboolean)normalize;

/*!
 @brief Receive notification of the end of the document.
 @throw SAXExceptionAny SAX exception, possibly
             wrapping another exception.
 - seealso: org.xml.sax.ContentHandler#endDocument
 */
- (void)endDocument;

/*!
 @brief Receive notification of the end of an element.
 <p>By default, do nothing.  Application writers may override this
  method in a subclass to take specific actions at the end of
  each element (such as finalising a tree node or writing
  output to a file).</p>
 @param uri The Namespace URI, or the empty string if the         element has no Namespace URI or if Namespace
          processing is not being performed.
 @param localName The local name (without prefix), or the         empty string if Namespace processing is not being
          performed.
 @param qName The qualified XML 1.0 name (with prefix), or the         empty string if qualified names are not available.
 @throw SAXExceptionAny SAX exception, possibly
             wrapping another exception.
 - seealso: org.xml.sax.ContentHandler#endElement
 */
- (void)endElementWithNSString:(NSString *)uri
                  withNSString:(NSString *)localName
                  withNSString:(NSString *)qName;

/*!
 @brief The optimized version of DTMDefaultBase.getExpandedTypeID(int).
 <p>This one is only used by DOMAdapter.getExpandedTypeID(int), which
  is mostly called from the compiled translets.
 */
- (jint)getExpandedTypeID2WithInt:(jint)nodeHandle;

/*!
 @brief The optimized version of DTMDefaultBase.getFirstAttribute().
 <p>
  Given a node handle, get the index of the node's first attribute.
 @param nodeHandle int Handle of the node.
 @return Handle of first attribute, or DTM.NULL to indicate none exists.
 */
- (jint)getFirstAttributeWithInt:(jint)nodeHandle;

/*!
 @brief Get a prefix either from the uri mapping, or just make
  one up!
 @param uri The namespace URI, which may be null.
 @return The prefix if there is one, or null.
 */
- (jint)getIdForNamespaceWithNSString:(NSString *)uri;

/*!
 @brief Override SAX2DTM.getLocalName() in SAX2DTM2.
 <p>Processing for PIs is different.
  Given a node handle, return its XPath- style localname. (As defined in
  Namespaces, this is the portion of the name after any colon character).
 @param nodeHandle the id of the node.
 @return String Local name of this node.
 */
- (NSString *)getLocalNameWithInt:(jint)nodeHandle;

/*!
 @brief The optimized version of SAX2DTM.getNodeName().
 <p>
  Given a node handle, return its DOM-style node name. This will include
  names such as #text or #document.
 @param nodeHandle the id of the node.
 @return String Name of this node, which may be an empty string.
  %REVIEW% Document when empty string is possible...
  %REVIEW-COMMENT% It should never be empty, should it?
 */
- (NSString *)getNodeNameWithInt:(jint)nodeHandle;

/*!
 @brief The optimized version of SAX2DTM.getNodeNameX().
 <p>
  Given a node handle, return the XPath node name. This should be the name
  as described by the XPath data model, NOT the DOM- style name.
 @param nodeHandle the id of the node.
 @return String Name of this node, which may be an empty string.
 */
- (NSString *)getNodeNameXWithInt:(jint)nodeHandle;

/*!
 @brief Given a node handle, return its node value.This is mostly
  as defined by the DOM, but may ignore some conveniences.
 <p>
 @param nodeHandle The node id.
 @return String Value of this node, or null if not
  meaningful for this node type.
 */
- (NSString *)getNodeValueWithInt:(jint)nodeHandle;

/*!
 @brief Returns the string value of the entire tree
 */
- (NSString *)getStringValue;

/*!
 @brief Override SAX2DTM.getStringValue(int)
 <p>
  This method is only used by Xalan-J Interpretive.
 It is not used by XSLTC. 
 <p>
  If the caller supplies an XMLStringFactory, the getStringValue() interface
  in SAX2DTM will be called. Otherwise just calls getStringValueX() and
  wraps the returned String in an XMLString.
  Get the string-value of a node as a String object
  (see http://www.w3.org/TR/xpath#data-model
  for the definition of a node's string-value).
 @param nodeHandle The node ID.
 @return A string object that represents the string-value of the given node.
 */
- (id<OrgApacheXmlUtilsXMLString>)getStringValueWithInt:(jint)nodeHandle;

/*!
 @brief The optimized version of SAX2DTM.getStringValue(int).
 <p>
  %OPT% This is one of the most often used interfaces. Performance is
  critical here. This one is different from SAX2DTM.getStringValue(int) in
  that it returns a String instead of a XMLString.
  Get the string- value of a node as a String object (see http: //www. w3.
  org/TR/xpath#data- model for the definition of a node's string- value).
 @param nodeHandle The node ID.
 @return A string object that represents the string-value of the given node.
 */
- (NSString *)getStringValueXWithInt:(jint)nodeHandle;

/*!
 @brief Override the processingInstruction() interface in SAX2DTM2.
 <p>
  %OPT% This one is different from SAX2DTM.processingInstruction()
  in that we do not use extended types for PI nodes. The name of
  the PI is saved in the DTMStringPool.
  Receive notification of a processing instruction.
 @param target The processing instruction target.
 @param data The processing instruction data, or null if              none is supplied.
 @throw SAXExceptionAny SAX exception, possibly
             wrapping another exception.
 - seealso: org.xml.sax.ContentHandler#processingInstruction
 */
- (void)processingInstructionWithNSString:(NSString *)target
                             withNSString:(NSString *)data;

/*!
 @brief Receive notification of the beginning of the document.
 @throw SAXExceptionAny SAX exception, possibly
             wrapping another exception.
 - seealso: org.xml.sax.ContentHandler#startDocument
 */
- (void)startDocument;

/*!
 @brief Override SAX2DTM.startElement()
 <p>Receive notification of the start of an element.
 <p>By default, do nothing.  Application writers may override this
  method in a subclass to take specific actions at the start of
  each element (such as allocating a new tree node or writing
  output to a file).</p>
 @param uri The Namespace URI, or the empty string if the         element has no Namespace URI or if Namespace
          processing is not being performed.
 @param localName The local name (without prefix), or the         empty string if Namespace processing is not being
          performed.
 @param qName The qualified name (with prefix), or the         empty string if qualified names are not available.
 @param attributes The specified or defaulted attributes.
 @throw SAXExceptionAny SAX exception, possibly
             wrapping another exception.
 - seealso: org.xml.sax.ContentHandler#startElement
 */
- (void)startElementWithNSString:(NSString *)uri
                    withNSString:(NSString *)localName
                    withNSString:(NSString *)qName
         withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)attributes;

#pragma mark Protected

/*!
 @brief Construct the node map from the node.
 @param type raw type ID, one of DTM.XXX_NODE.
 @param expandedTypeID The expended type ID.
 @param parentIndex The current parent index.
 @param previousSibling The previous sibling index.
 @param dataOrPrefix index into m_data table, or string handle.
 @param canHaveFirstChild true if the node can have a first child, false                           if it is atomic.
 @return The index identity of the node that was added.
 */
- (jint)addNodeWithInt:(jint)type
               withInt:(jint)expandedTypeID
               withInt:(jint)parentIndex
               withInt:(jint)previousSibling
               withInt:(jint)dataOrPrefix
           withBoolean:(jboolean)canHaveFirstChild;

/*!
 @brief Check whether accumulated text should be stripped; if not,
  append the appropriate flavor of text/cdata node.
 */
- (void)charactersFlush;

/*!
 @brief Copy an Attribute node to a SerializationHandler
 @param nodeID The node identity
 @param exptype The expanded type of the Element node
 @param handler The SerializationHandler
 */
- (void)copyAttributeWithInt:(jint)nodeID
                     withInt:(jint)exptype
withOrgApacheXmlSerializerSerializationHandler:(id<OrgApacheXmlSerializerSerializationHandler>)handler OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copy  attribute nodes from an element .
 @param nodeID The Element node identity
 @param handler The SerializationHandler
 */
- (void)copyAttributesWithInt:(jint)nodeID
withOrgApacheXmlSerializerSerializationHandler:(id<OrgApacheXmlSerializerSerializationHandler>)handler OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copy an Element node to a SerializationHandler.
 @param nodeID The node identity
 @param exptype The expanded type of the Element node
 @param handler The SerializationHandler
 @return The qualified name of the Element node.
 */
- (NSString *)copyElementWithInt:(jint)nodeID
                         withInt:(jint)exptype
withOrgApacheXmlSerializerSerializationHandler:(id<OrgApacheXmlSerializerSerializationHandler>)handler OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copy  namespace nodes.
 @param nodeID The Element node identity
 @param handler The SerializationHandler
 @param inScope true if all namespaces in scope should be copied,   false if only the namespace declarations should be copied.
 */
- (void)copyNSWithInt:(jint)nodeID
withOrgApacheXmlSerializerSerializationHandler:(id<OrgApacheXmlSerializerSerializationHandler>)handler
          withBoolean:(jboolean)inScope OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copy the String value of a Text node to a SerializationHandler
 */
- (void)copyTextNodeWithInt:(jint)nodeID
withOrgApacheXmlSerializerSerializationHandler:(id<OrgApacheXmlSerializerSerializationHandler>)handler OBJC_METHOD_FAMILY_NONE;

/*!
 @brief The optimized version of DTMDefaultBase.getFirstAttributeIdentity(int).
 <p>
  Given a node identity, get the index of the node's first attribute.
 @param identity int identity of the node.
 @return Identity of first attribute, or DTM.NULL to indicate none exists.
 */
- (jint)getFirstAttributeIdentityWithInt:(jint)identity;

/*!
 @brief The optimized version of DTMDefaultBase.getNextAttributeIdentity(int).
 <p>
  Given a node identity for an attribute, advance to the next attribute.
 @param identity int identity of the attribute node.  This  
  <strong> must </strong>  be an attribute node.
 @return int DTM node-identity of the resolved attr,
  or DTM.NULL to indicate none exists.
 */
- (jint)getNextAttributeIdentityWithInt:(jint)identity;

/*!
 @brief Return the next namespace node following the given base node.
 @return The namespace node immediately following the base node.
 */
- (jint)getNextNamespaceNode2WithInt:(jint)baseID;

/*!
 @brief The optimized version of DTMDefaultBase.getTypedAttribute(int, int).
 <p>
  Given a node handle and an expanded type ID, get the index of the node's
  attribute of that type, if any.
 @param nodeHandle int Handle of the node.
 @param attType int expanded type ID of the required attribute.
 @return Handle of attribute of the required type, or DTM.NULL to indicate
  none exists.
 */
- (jint)getTypedAttributeWithInt:(jint)nodeHandle
                         withInt:(jint)attType;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheXmlDtmDTMManager:(OrgApacheXmlDtmDTMManager *)arg0
                                withJavaxXmlTransformSource:(id<JavaxXmlTransformSource>)arg1
                                                    withInt:(jint)arg2
                             withOrgApacheXmlDtmDTMWSFilter:(id<OrgApacheXmlDtmDTMWSFilter>)arg3
                      withOrgApacheXmlUtilsXMLStringFactory:(OrgApacheXmlUtilsXMLStringFactory *)arg4
                                                withBoolean:(jboolean)arg5
                                                    withInt:(jint)arg6
                                                withBoolean:(jboolean)arg7
                                                withBoolean:(jboolean)arg8 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgApacheXmlDtmRefSax2dtmSAX2DTM2)

J2OBJC_FIELD_SETTER(OrgApacheXmlDtmRefSax2dtmSAX2DTM2, m_extendedTypes_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheXmlDtmRefSax2dtmSAX2DTM2, m_values_, JavaUtilVector *)

/*!
 @brief %OPT% If the offset and length of a Text node are within certain limits,
  we store a bitwise encoded value into an int, using 10 bits (max.1024)
  for length and 21 bits for offset.
 We can save two SuballocatedIntVector
  calls for each getStringValueX() and dispatchCharacterEvents() call by
  doing this.
 */
inline jint OrgApacheXmlDtmRefSax2dtmSAX2DTM2_get_TEXT_LENGTH_BITS(void);
#define OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TEXT_LENGTH_BITS 10
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlDtmRefSax2dtmSAX2DTM2, TEXT_LENGTH_BITS, jint)

inline jint OrgApacheXmlDtmRefSax2dtmSAX2DTM2_get_TEXT_OFFSET_BITS(void);
#define OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TEXT_OFFSET_BITS 21
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlDtmRefSax2dtmSAX2DTM2, TEXT_OFFSET_BITS, jint)

inline jint OrgApacheXmlDtmRefSax2dtmSAX2DTM2_get_TEXT_LENGTH_MAX(void);
#define OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TEXT_LENGTH_MAX 1023
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlDtmRefSax2dtmSAX2DTM2, TEXT_LENGTH_MAX, jint)

inline jint OrgApacheXmlDtmRefSax2dtmSAX2DTM2_get_TEXT_OFFSET_MAX(void);
#define OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TEXT_OFFSET_MAX 2097151
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheXmlDtmRefSax2dtmSAX2DTM2, TEXT_OFFSET_MAX, jint)

FOUNDATION_EXPORT void OrgApacheXmlDtmRefSax2dtmSAX2DTM2_initWithOrgApacheXmlDtmDTMManager_withJavaxXmlTransformSource_withInt_withOrgApacheXmlDtmDTMWSFilter_withOrgApacheXmlUtilsXMLStringFactory_withBoolean_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *self, OrgApacheXmlDtmDTMManager *mgr, id<JavaxXmlTransformSource> source, jint dtmIdentity, id<OrgApacheXmlDtmDTMWSFilter> whiteSpaceFilter, OrgApacheXmlUtilsXMLStringFactory *xstringfactory, jboolean doIndexing);

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *new_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_initWithOrgApacheXmlDtmDTMManager_withJavaxXmlTransformSource_withInt_withOrgApacheXmlDtmDTMWSFilter_withOrgApacheXmlUtilsXMLStringFactory_withBoolean_(OrgApacheXmlDtmDTMManager *mgr, id<JavaxXmlTransformSource> source, jint dtmIdentity, id<OrgApacheXmlDtmDTMWSFilter> whiteSpaceFilter, OrgApacheXmlUtilsXMLStringFactory *xstringfactory, jboolean doIndexing) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *create_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_initWithOrgApacheXmlDtmDTMManager_withJavaxXmlTransformSource_withInt_withOrgApacheXmlDtmDTMWSFilter_withOrgApacheXmlUtilsXMLStringFactory_withBoolean_(OrgApacheXmlDtmDTMManager *mgr, id<JavaxXmlTransformSource> source, jint dtmIdentity, id<OrgApacheXmlDtmDTMWSFilter> whiteSpaceFilter, OrgApacheXmlUtilsXMLStringFactory *xstringfactory, jboolean doIndexing);

FOUNDATION_EXPORT void OrgApacheXmlDtmRefSax2dtmSAX2DTM2_initWithOrgApacheXmlDtmDTMManager_withJavaxXmlTransformSource_withInt_withOrgApacheXmlDtmDTMWSFilter_withOrgApacheXmlUtilsXMLStringFactory_withBoolean_withInt_withBoolean_withBoolean_withBoolean_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *self, OrgApacheXmlDtmDTMManager *mgr, id<JavaxXmlTransformSource> source, jint dtmIdentity, id<OrgApacheXmlDtmDTMWSFilter> whiteSpaceFilter, OrgApacheXmlUtilsXMLStringFactory *xstringfactory, jboolean doIndexing, jint blocksize, jboolean usePrevsib, jboolean buildIdIndex, jboolean newNameTable);

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *new_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_initWithOrgApacheXmlDtmDTMManager_withJavaxXmlTransformSource_withInt_withOrgApacheXmlDtmDTMWSFilter_withOrgApacheXmlUtilsXMLStringFactory_withBoolean_withInt_withBoolean_withBoolean_withBoolean_(OrgApacheXmlDtmDTMManager *mgr, id<JavaxXmlTransformSource> source, jint dtmIdentity, id<OrgApacheXmlDtmDTMWSFilter> whiteSpaceFilter, OrgApacheXmlUtilsXMLStringFactory *xstringfactory, jboolean doIndexing, jint blocksize, jboolean usePrevsib, jboolean buildIdIndex, jboolean newNameTable) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *create_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_initWithOrgApacheXmlDtmDTMManager_withJavaxXmlTransformSource_withInt_withOrgApacheXmlDtmDTMWSFilter_withOrgApacheXmlUtilsXMLStringFactory_withBoolean_withInt_withBoolean_withBoolean_withBoolean_(OrgApacheXmlDtmDTMManager *mgr, id<JavaxXmlTransformSource> source, jint dtmIdentity, id<OrgApacheXmlDtmDTMWSFilter> whiteSpaceFilter, OrgApacheXmlUtilsXMLStringFactory *xstringfactory, jboolean doIndexing, jint blocksize, jboolean usePrevsib, jboolean buildIdIndex, jboolean newNameTable);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlDtmRefSax2dtmSAX2DTM2)

#endif

#if !defined (OrgApacheXmlDtmRefSax2dtmSAX2DTM2_ChildrenIterator_) && (INCLUDE_ALL_OrgApacheXmlDtmRefSax2dtmSAX2DTM2 || defined(INCLUDE_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_ChildrenIterator))
#define OrgApacheXmlDtmRefSax2dtmSAX2DTM2_ChildrenIterator_

#define RESTRICT_OrgApacheXmlDtmRefDTMDefaultBaseIterators 1
#define INCLUDE_OrgApacheXmlDtmRefDTMDefaultBaseIterators_InternalAxisIteratorBase 1
#include "org/apache/xml/dtm/ref/DTMDefaultBaseIterators.h"

@class OrgApacheXmlDtmRefSax2dtmSAX2DTM2;
@protocol OrgApacheXmlDtmDTMAxisIterator;

/*!
 @brief Iterator that returns all immediate children of a given node
 */
@interface OrgApacheXmlDtmRefSax2dtmSAX2DTM2_ChildrenIterator : OrgApacheXmlDtmRefDTMDefaultBaseIterators_InternalAxisIteratorBase

#pragma mark Public

- (instancetype __nonnull)initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2:(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *)outer$;

/*!
 @brief Get the next node in the iteration.
 @return The next node handle in the iteration, or END if no more
  are available.
 */
- (jint)next;

/*!
 @brief Setting start to END should 'close' the iterator,
  i.e.subsequent call to next() should return END.
 <p>
  If the iterator is not restartable, this has no effect.
  %REVIEW% Should it return/throw something in that case,
  or set current node to END, to indicate request-not-honored?
 @param node Sets the root of the iteration.
 @return A DTMAxisIterator set to the start of the iteration.
 */
- (id<OrgApacheXmlDtmDTMAxisIterator>)setStartNodeWithInt:(jint)node;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheXmlDtmRefDTMDefaultBaseIterators:(OrgApacheXmlDtmRefDTMDefaultBaseIterators *)outer$ NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_ChildrenIterator)

FOUNDATION_EXPORT void OrgApacheXmlDtmRefSax2dtmSAX2DTM2_ChildrenIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_ChildrenIterator *self, OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$);

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2_ChildrenIterator *new_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_ChildrenIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2_ChildrenIterator *create_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_ChildrenIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_ChildrenIterator)

#endif

#if !defined (OrgApacheXmlDtmRefSax2dtmSAX2DTM2_ParentIterator_) && (INCLUDE_ALL_OrgApacheXmlDtmRefSax2dtmSAX2DTM2 || defined(INCLUDE_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_ParentIterator))
#define OrgApacheXmlDtmRefSax2dtmSAX2DTM2_ParentIterator_

#define RESTRICT_OrgApacheXmlDtmRefDTMDefaultBaseIterators 1
#define INCLUDE_OrgApacheXmlDtmRefDTMDefaultBaseIterators_InternalAxisIteratorBase 1
#include "org/apache/xml/dtm/ref/DTMDefaultBaseIterators.h"

@class OrgApacheXmlDtmRefSax2dtmSAX2DTM2;
@protocol OrgApacheXmlDtmDTMAxisIterator;

/*!
 @brief Iterator that returns the parent of a given node.Note that
  this delivers only a single node; if you want all the ancestors,
  see AncestorIterator.
 */
@interface OrgApacheXmlDtmRefSax2dtmSAX2DTM2_ParentIterator : OrgApacheXmlDtmRefDTMDefaultBaseIterators_InternalAxisIteratorBase

#pragma mark Public

- (instancetype __nonnull)initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2:(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *)outer$;

/*!
 @brief Get the next node in the iteration.In this case, we return
  only the immediate parent, _if_ it matches the requested nodeType.
 @return The next node handle in the iteration, or END.
 */
- (jint)next;

/*!
 @brief Set the node type of the parent that we're looking for.
 Note that this does _not_ mean "find the nearest ancestor of
  this type", but "yield the parent if it is of this type".
 @param type extended type ID.
 @return ParentIterator configured with the type filter set.
 */
- (id<OrgApacheXmlDtmDTMAxisIterator>)setNodeTypeWithInt:(jint)type;

/*!
 @brief Set start to END should 'close' the iterator,
  i.e.subsequent call to next() should return END.
 @param node Sets the root of the iteration.
 @return A DTMAxisIterator set to the start of the iteration.
 */
- (id<OrgApacheXmlDtmDTMAxisIterator>)setStartNodeWithInt:(jint)node;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheXmlDtmRefDTMDefaultBaseIterators:(OrgApacheXmlDtmRefDTMDefaultBaseIterators *)outer$ NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_ParentIterator)

FOUNDATION_EXPORT void OrgApacheXmlDtmRefSax2dtmSAX2DTM2_ParentIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_ParentIterator *self, OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$);

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2_ParentIterator *new_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_ParentIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2_ParentIterator *create_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_ParentIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_ParentIterator)

#endif

#if !defined (OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedChildrenIterator_) && (INCLUDE_ALL_OrgApacheXmlDtmRefSax2dtmSAX2DTM2 || defined(INCLUDE_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedChildrenIterator))
#define OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedChildrenIterator_

#define RESTRICT_OrgApacheXmlDtmRefDTMDefaultBaseIterators 1
#define INCLUDE_OrgApacheXmlDtmRefDTMDefaultBaseIterators_InternalAxisIteratorBase 1
#include "org/apache/xml/dtm/ref/DTMDefaultBaseIterators.h"

@class OrgApacheXmlDtmRefSax2dtmSAX2DTM2;
@protocol OrgApacheXmlDtmDTMAxisIterator;

/*!
 @brief Iterator that returns children of a given type for a given node.
 The functionality chould be achieved by putting a filter on top
  of a basic child iterator, but a specialised iterator is used
  for efficiency (both speed and size of translet).
 */
@interface OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedChildrenIterator : OrgApacheXmlDtmRefDTMDefaultBaseIterators_InternalAxisIteratorBase

#pragma mark Public

/*!
 @brief Constructor TypedChildrenIterator
 @param nodeType The extended type ID being requested.
 */
- (instancetype __nonnull)initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2:(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *)outer$
                                                            withInt:(jint)nodeType;

/*!
 @brief Return the node at the given position.
 */
- (jint)getNodeByPositionWithInt:(jint)position;

/*!
 @brief Get the next node in the iteration.
 @return The next node handle in the iteration, or END.
 */
- (jint)next;

/*!
 @brief Set start to END should 'close' the iterator,
  i.e.subsequent call to next() should return END.
 @param node Sets the root of the iteration.
 @return A DTMAxisIterator set to the start of the iteration.
 */
- (id<OrgApacheXmlDtmDTMAxisIterator>)setStartNodeWithInt:(jint)node;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheXmlDtmRefDTMDefaultBaseIterators:(OrgApacheXmlDtmRefDTMDefaultBaseIterators *)outer$ NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedChildrenIterator)

FOUNDATION_EXPORT void OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedChildrenIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_withInt_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedChildrenIterator *self, OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$, jint nodeType);

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedChildrenIterator *new_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedChildrenIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_withInt_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$, jint nodeType) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedChildrenIterator *create_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedChildrenIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_withInt_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$, jint nodeType);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedChildrenIterator)

#endif

#if !defined (OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedRootIterator_) && (INCLUDE_ALL_OrgApacheXmlDtmRefSax2dtmSAX2DTM2 || defined(INCLUDE_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedRootIterator))
#define OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedRootIterator_

#define RESTRICT_OrgApacheXmlDtmRefDTMDefaultBaseIterators 1
#define INCLUDE_OrgApacheXmlDtmRefDTMDefaultBaseIterators_RootIterator 1
#include "org/apache/xml/dtm/ref/DTMDefaultBaseIterators.h"

@class OrgApacheXmlDtmRefSax2dtmSAX2DTM2;

/*!
 @brief Iterator that returns the namespace nodes as defined by the XPath data model
  for a given node, filtered by extended type ID.
 */
@interface OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedRootIterator : OrgApacheXmlDtmRefDTMDefaultBaseIterators_RootIterator

#pragma mark Public

/*!
 @brief Constructor TypedRootIterator
 @param nodeType The extended type ID being requested.
 */
- (instancetype __nonnull)initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2:(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *)outer$
                                                            withInt:(jint)nodeType;

/*!
 @brief Get the next node in the iteration.
 @return The next node handle in the iteration, or END.
 */
- (jint)next;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheXmlDtmRefDTMDefaultBaseIterators:(OrgApacheXmlDtmRefDTMDefaultBaseIterators *)outer$ NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedRootIterator)

FOUNDATION_EXPORT void OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedRootIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_withInt_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedRootIterator *self, OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$, jint nodeType);

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedRootIterator *new_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedRootIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_withInt_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$, jint nodeType) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedRootIterator *create_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedRootIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_withInt_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$, jint nodeType);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedRootIterator)

#endif

#if !defined (OrgApacheXmlDtmRefSax2dtmSAX2DTM2_FollowingSiblingIterator_) && (INCLUDE_ALL_OrgApacheXmlDtmRefSax2dtmSAX2DTM2 || defined(INCLUDE_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_FollowingSiblingIterator))
#define OrgApacheXmlDtmRefSax2dtmSAX2DTM2_FollowingSiblingIterator_

#define RESTRICT_OrgApacheXmlDtmRefDTMDefaultBaseIterators 1
#define INCLUDE_OrgApacheXmlDtmRefDTMDefaultBaseIterators_InternalAxisIteratorBase 1
#include "org/apache/xml/dtm/ref/DTMDefaultBaseIterators.h"

@class OrgApacheXmlDtmRefSax2dtmSAX2DTM2;
@protocol OrgApacheXmlDtmDTMAxisIterator;

/*!
 @brief Iterator that returns all siblings of a given node.
 */
@interface OrgApacheXmlDtmRefSax2dtmSAX2DTM2_FollowingSiblingIterator : OrgApacheXmlDtmRefDTMDefaultBaseIterators_InternalAxisIteratorBase

#pragma mark Public

- (instancetype __nonnull)initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2:(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *)outer$;

/*!
 @brief Get the next node in the iteration.
 @return The next node handle in the iteration, or END.
 */
- (jint)next;

/*!
 @brief Set start to END should 'close' the iterator,
  i.e.subsequent call to next() should return END.
 @param node Sets the root of the iteration.
 @return A DTMAxisIterator set to the start of the iteration.
 */
- (id<OrgApacheXmlDtmDTMAxisIterator>)setStartNodeWithInt:(jint)node;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheXmlDtmRefDTMDefaultBaseIterators:(OrgApacheXmlDtmRefDTMDefaultBaseIterators *)outer$ NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_FollowingSiblingIterator)

FOUNDATION_EXPORT void OrgApacheXmlDtmRefSax2dtmSAX2DTM2_FollowingSiblingIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_FollowingSiblingIterator *self, OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$);

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2_FollowingSiblingIterator *new_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_FollowingSiblingIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2_FollowingSiblingIterator *create_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_FollowingSiblingIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_FollowingSiblingIterator)

#endif

#if !defined (OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedFollowingSiblingIterator_) && (INCLUDE_ALL_OrgApacheXmlDtmRefSax2dtmSAX2DTM2 || defined(INCLUDE_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedFollowingSiblingIterator))
#define OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedFollowingSiblingIterator_

@class OrgApacheXmlDtmRefSax2dtmSAX2DTM2;

/*!
 @brief Iterator that returns all following siblings of a given node.
 */
@interface OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedFollowingSiblingIterator : OrgApacheXmlDtmRefSax2dtmSAX2DTM2_FollowingSiblingIterator

#pragma mark Public

/*!
 @brief Constructor TypedFollowingSiblingIterator
 @param type The extended type ID being requested.
 */
- (instancetype __nonnull)initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2:(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *)outer$
                                                            withInt:(jint)type;

/*!
 @brief Get the next node in the iteration.
 @return The next node handle in the iteration, or END.
 */
- (jint)next;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2:(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *)outer$ NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedFollowingSiblingIterator)

FOUNDATION_EXPORT void OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedFollowingSiblingIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_withInt_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedFollowingSiblingIterator *self, OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$, jint type);

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedFollowingSiblingIterator *new_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedFollowingSiblingIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_withInt_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$, jint type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedFollowingSiblingIterator *create_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedFollowingSiblingIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_withInt_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$, jint type);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedFollowingSiblingIterator)

#endif

#if !defined (OrgApacheXmlDtmRefSax2dtmSAX2DTM2_AttributeIterator_) && (INCLUDE_ALL_OrgApacheXmlDtmRefSax2dtmSAX2DTM2 || defined(INCLUDE_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_AttributeIterator))
#define OrgApacheXmlDtmRefSax2dtmSAX2DTM2_AttributeIterator_

#define RESTRICT_OrgApacheXmlDtmRefDTMDefaultBaseIterators 1
#define INCLUDE_OrgApacheXmlDtmRefDTMDefaultBaseIterators_InternalAxisIteratorBase 1
#include "org/apache/xml/dtm/ref/DTMDefaultBaseIterators.h"

@class OrgApacheXmlDtmRefSax2dtmSAX2DTM2;
@protocol OrgApacheXmlDtmDTMAxisIterator;

/*!
 @brief Iterator that returns attribute nodes (of what nodes?)
 */
@interface OrgApacheXmlDtmRefSax2dtmSAX2DTM2_AttributeIterator : OrgApacheXmlDtmRefDTMDefaultBaseIterators_InternalAxisIteratorBase

#pragma mark Public

- (instancetype __nonnull)initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2:(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *)outer$;

/*!
 @brief Get the next node in the iteration.
 @return The next node handle in the iteration, or END.
 */
- (jint)next;

/*!
 @brief Set start to END should 'close' the iterator,
  i.e.subsequent call to next() should return END.
 @param node Sets the root of the iteration.
 @return A DTMAxisIterator set to the start of the iteration.
 */
- (id<OrgApacheXmlDtmDTMAxisIterator>)setStartNodeWithInt:(jint)node;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheXmlDtmRefDTMDefaultBaseIterators:(OrgApacheXmlDtmRefDTMDefaultBaseIterators *)outer$ NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_AttributeIterator)

FOUNDATION_EXPORT void OrgApacheXmlDtmRefSax2dtmSAX2DTM2_AttributeIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_AttributeIterator *self, OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$);

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2_AttributeIterator *new_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_AttributeIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2_AttributeIterator *create_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_AttributeIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_AttributeIterator)

#endif

#if !defined (OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedAttributeIterator_) && (INCLUDE_ALL_OrgApacheXmlDtmRefSax2dtmSAX2DTM2 || defined(INCLUDE_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedAttributeIterator))
#define OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedAttributeIterator_

#define RESTRICT_OrgApacheXmlDtmRefDTMDefaultBaseIterators 1
#define INCLUDE_OrgApacheXmlDtmRefDTMDefaultBaseIterators_InternalAxisIteratorBase 1
#include "org/apache/xml/dtm/ref/DTMDefaultBaseIterators.h"

@class OrgApacheXmlDtmRefSax2dtmSAX2DTM2;
@protocol OrgApacheXmlDtmDTMAxisIterator;

/*!
 @brief Iterator that returns attribute nodes of a given type
 */
@interface OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedAttributeIterator : OrgApacheXmlDtmRefDTMDefaultBaseIterators_InternalAxisIteratorBase

#pragma mark Public

/*!
 @brief Constructor TypedAttributeIterator
 @param nodeType The extended type ID that is requested.
 */
- (instancetype __nonnull)initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2:(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *)outer$
                                                            withInt:(jint)nodeType;

/*!
 @brief Get the next node in the iteration.
 @return The next node handle in the iteration, or END.
 */
- (jint)next;

/*!
 @brief Set start to END should 'close' the iterator,
  i.e.subsequent call to next() should return END.
 @param node Sets the root of the iteration.
 @return A DTMAxisIterator set to the start of the iteration.
 */
- (id<OrgApacheXmlDtmDTMAxisIterator>)setStartNodeWithInt:(jint)node;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheXmlDtmRefDTMDefaultBaseIterators:(OrgApacheXmlDtmRefDTMDefaultBaseIterators *)outer$ NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedAttributeIterator)

FOUNDATION_EXPORT void OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedAttributeIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_withInt_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedAttributeIterator *self, OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$, jint nodeType);

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedAttributeIterator *new_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedAttributeIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_withInt_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$, jint nodeType) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedAttributeIterator *create_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedAttributeIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_withInt_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$, jint nodeType);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedAttributeIterator)

#endif

#if !defined (OrgApacheXmlDtmRefSax2dtmSAX2DTM2_PrecedingSiblingIterator_) && (INCLUDE_ALL_OrgApacheXmlDtmRefSax2dtmSAX2DTM2 || defined(INCLUDE_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_PrecedingSiblingIterator))
#define OrgApacheXmlDtmRefSax2dtmSAX2DTM2_PrecedingSiblingIterator_

#define RESTRICT_OrgApacheXmlDtmRefDTMDefaultBaseIterators 1
#define INCLUDE_OrgApacheXmlDtmRefDTMDefaultBaseIterators_InternalAxisIteratorBase 1
#include "org/apache/xml/dtm/ref/DTMDefaultBaseIterators.h"

@class OrgApacheXmlDtmRefSax2dtmSAX2DTM2;
@protocol OrgApacheXmlDtmDTMAxisIterator;

/*!
 @brief Iterator that returns preceding siblings of a given node
 */
@interface OrgApacheXmlDtmRefSax2dtmSAX2DTM2_PrecedingSiblingIterator : OrgApacheXmlDtmRefDTMDefaultBaseIterators_InternalAxisIteratorBase {
 @public
  /*!
   @brief The node identity of _startNode for this iterator
   */
  jint _startNodeID_;
}

#pragma mark Public

- (instancetype __nonnull)initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2:(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *)outer$;

/*!
 @brief True if this iterator has a reversed axis.
 @return true.
 */
- (jboolean)isReverse;

/*!
 @brief Get the next node in the iteration.
 @return The next node handle in the iteration, or END.
 */
- (jint)next;

/*!
 @brief Set start to END should 'close' the iterator,
  i.e.subsequent call to next() should return END.
 @param node Sets the root of the iteration.
 @return A DTMAxisIterator set to the start of the iteration.
 */
- (id<OrgApacheXmlDtmDTMAxisIterator>)setStartNodeWithInt:(jint)node;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheXmlDtmRefDTMDefaultBaseIterators:(OrgApacheXmlDtmRefDTMDefaultBaseIterators *)outer$ NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_PrecedingSiblingIterator)

FOUNDATION_EXPORT void OrgApacheXmlDtmRefSax2dtmSAX2DTM2_PrecedingSiblingIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_PrecedingSiblingIterator *self, OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$);

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2_PrecedingSiblingIterator *new_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_PrecedingSiblingIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2_PrecedingSiblingIterator *create_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_PrecedingSiblingIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_PrecedingSiblingIterator)

#endif

#if !defined (OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedPrecedingSiblingIterator_) && (INCLUDE_ALL_OrgApacheXmlDtmRefSax2dtmSAX2DTM2 || defined(INCLUDE_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedPrecedingSiblingIterator))
#define OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedPrecedingSiblingIterator_

@class OrgApacheXmlDtmRefSax2dtmSAX2DTM2;

/*!
 @brief Iterator that returns preceding siblings of a given type for
  a given node
 */
@interface OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedPrecedingSiblingIterator : OrgApacheXmlDtmRefSax2dtmSAX2DTM2_PrecedingSiblingIterator

#pragma mark Public

/*!
 @brief Constructor TypedPrecedingSiblingIterator
 @param type The extended type ID being requested.
 */
- (instancetype __nonnull)initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2:(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *)outer$
                                                            withInt:(jint)type;

/*!
 @brief Return the index of the last node in this iterator.
 */
- (jint)getLast;

/*!
 @brief Get the next node in the iteration.
 @return The next node handle in the iteration, or END.
 */
- (jint)next;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2:(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *)outer$ NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedPrecedingSiblingIterator)

FOUNDATION_EXPORT void OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedPrecedingSiblingIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_withInt_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedPrecedingSiblingIterator *self, OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$, jint type);

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedPrecedingSiblingIterator *new_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedPrecedingSiblingIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_withInt_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$, jint type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedPrecedingSiblingIterator *create_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedPrecedingSiblingIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_withInt_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$, jint type);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedPrecedingSiblingIterator)

#endif

#if !defined (OrgApacheXmlDtmRefSax2dtmSAX2DTM2_PrecedingIterator_) && (INCLUDE_ALL_OrgApacheXmlDtmRefSax2dtmSAX2DTM2 || defined(INCLUDE_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_PrecedingIterator))
#define OrgApacheXmlDtmRefSax2dtmSAX2DTM2_PrecedingIterator_

#define RESTRICT_OrgApacheXmlDtmRefDTMDefaultBaseIterators 1
#define INCLUDE_OrgApacheXmlDtmRefDTMDefaultBaseIterators_InternalAxisIteratorBase 1
#include "org/apache/xml/dtm/ref/DTMDefaultBaseIterators.h"

@class IOSIntArray;
@class OrgApacheXmlDtmRefSax2dtmSAX2DTM2;
@protocol OrgApacheXmlDtmDTMAxisIterator;

/*!
 @brief Iterator that returns preceding nodes of a given node.
 This includes the node set {root+1, start-1}, but excludes
  all ancestors, attributes, and namespace nodes.
 */
@interface OrgApacheXmlDtmRefSax2dtmSAX2DTM2_PrecedingIterator : OrgApacheXmlDtmRefDTMDefaultBaseIterators_InternalAxisIteratorBase {
 @public
  /*!
   @brief The stack of start node + ancestors up to the root of the tree,
   which we must avoid.
   */
  IOSIntArray *_stack_;
  /*!
   @brief (not sure yet...
   -sb)
   */
  jint _sp_;
  /*!
   @brief (not sure yet...
   -sb)
   */
  jint _oldsp_;
  jint _markedsp_;
  jint _markedNode_PrecedingIterator_;
  jint _markedDescendant_;
}

#pragma mark Public

- (instancetype __nonnull)initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2:(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *)outer$;

/*!
 @brief Returns a deep copy of this iterator.The cloned iterator is not reset.
 @return a deep copy of this iterator.
 */
- (id<OrgApacheXmlDtmDTMAxisIterator>)cloneIterator;

- (void)gotoMark;

/*!
 @brief True if this iterator has a reversed axis.
 @return true since this iterator is a reversed axis.
 */
- (jboolean)isReverse;

/*!
 @brief Get the next node in the iteration.
 @return The next node handle in the iteration, or END.
 */
- (jint)next;

/*!
 @brief Resets the iterator to the last start node.
 @return A DTMAxisIterator, which may or may not be the same as this
          iterator.
 */
- (id<OrgApacheXmlDtmDTMAxisIterator>)reset;

- (void)setMark;

/*!
 @brief Set start to END should 'close' the iterator,
  i.e.subsequent call to next() should return END.
 @param node Sets the root of the iteration.
 @return A DTMAxisIterator set to the start of the iteration.
 */
- (id<OrgApacheXmlDtmDTMAxisIterator>)setStartNodeWithInt:(jint)node;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheXmlDtmRefDTMDefaultBaseIterators:(OrgApacheXmlDtmRefDTMDefaultBaseIterators *)outer$ NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_PrecedingIterator)

J2OBJC_FIELD_SETTER(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_PrecedingIterator, _stack_, IOSIntArray *)

FOUNDATION_EXPORT void OrgApacheXmlDtmRefSax2dtmSAX2DTM2_PrecedingIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_PrecedingIterator *self, OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$);

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2_PrecedingIterator *new_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_PrecedingIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2_PrecedingIterator *create_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_PrecedingIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_PrecedingIterator)

#endif

#if !defined (OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedPrecedingIterator_) && (INCLUDE_ALL_OrgApacheXmlDtmRefSax2dtmSAX2DTM2 || defined(INCLUDE_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedPrecedingIterator))
#define OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedPrecedingIterator_

@class OrgApacheXmlDtmRefSax2dtmSAX2DTM2;

/*!
 @brief Iterator that returns preceding nodes of agiven type for a
  given node.This includes the node set {root+1, start-1}, but
  excludes all ancestors.
 */
@interface OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedPrecedingIterator : OrgApacheXmlDtmRefSax2dtmSAX2DTM2_PrecedingIterator

#pragma mark Public

/*!
 @brief Constructor TypedPrecedingIterator
 @param type The extended type ID being requested.
 */
- (instancetype __nonnull)initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2:(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *)outer$
                                                            withInt:(jint)type;

/*!
 @brief Get the next node in the iteration.
 @return The next node handle in the iteration, or END.
 */
- (jint)next;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2:(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *)outer$ NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedPrecedingIterator)

FOUNDATION_EXPORT void OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedPrecedingIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_withInt_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedPrecedingIterator *self, OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$, jint type);

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedPrecedingIterator *new_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedPrecedingIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_withInt_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$, jint type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedPrecedingIterator *create_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedPrecedingIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_withInt_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$, jint type);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedPrecedingIterator)

#endif

#if !defined (OrgApacheXmlDtmRefSax2dtmSAX2DTM2_FollowingIterator_) && (INCLUDE_ALL_OrgApacheXmlDtmRefSax2dtmSAX2DTM2 || defined(INCLUDE_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_FollowingIterator))
#define OrgApacheXmlDtmRefSax2dtmSAX2DTM2_FollowingIterator_

#define RESTRICT_OrgApacheXmlDtmRefDTMDefaultBaseIterators 1
#define INCLUDE_OrgApacheXmlDtmRefDTMDefaultBaseIterators_InternalAxisIteratorBase 1
#include "org/apache/xml/dtm/ref/DTMDefaultBaseIterators.h"

@class OrgApacheXmlDtmRefSax2dtmSAX2DTM2;
@protocol OrgApacheXmlDtmDTMAxisIterator;

/*!
 @brief Iterator that returns following nodes of for a given node.
 */
@interface OrgApacheXmlDtmRefSax2dtmSAX2DTM2_FollowingIterator : OrgApacheXmlDtmRefDTMDefaultBaseIterators_InternalAxisIteratorBase

#pragma mark Public

- (instancetype __nonnull)initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2:(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *)outer$;

/*!
 @brief Get the next node in the iteration.
 @return The next node handle in the iteration, or END.
 */
- (jint)next;

/*!
 @brief Set start to END should 'close' the iterator,
  i.e.subsequent call to next() should return END.
 @param node Sets the root of the iteration.
 @return A DTMAxisIterator set to the start of the iteration.
 */
- (id<OrgApacheXmlDtmDTMAxisIterator>)setStartNodeWithInt:(jint)node;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheXmlDtmRefDTMDefaultBaseIterators:(OrgApacheXmlDtmRefDTMDefaultBaseIterators *)outer$ NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_FollowingIterator)

FOUNDATION_EXPORT void OrgApacheXmlDtmRefSax2dtmSAX2DTM2_FollowingIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_FollowingIterator *self, OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$);

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2_FollowingIterator *new_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_FollowingIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2_FollowingIterator *create_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_FollowingIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_FollowingIterator)

#endif

#if !defined (OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedFollowingIterator_) && (INCLUDE_ALL_OrgApacheXmlDtmRefSax2dtmSAX2DTM2 || defined(INCLUDE_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedFollowingIterator))
#define OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedFollowingIterator_

@class OrgApacheXmlDtmRefSax2dtmSAX2DTM2;

/*!
 @brief Iterator that returns following nodes of a given type for a given node.
 */
@interface OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedFollowingIterator : OrgApacheXmlDtmRefSax2dtmSAX2DTM2_FollowingIterator

#pragma mark Public

/*!
 @brief Constructor TypedFollowingIterator
 @param type The extended type ID being requested.
 */
- (instancetype __nonnull)initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2:(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *)outer$
                                                            withInt:(jint)type;

/*!
 @brief Get the next node in the iteration.
 @return The next node handle in the iteration, or END.
 */
- (jint)next;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2:(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *)outer$ NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedFollowingIterator)

FOUNDATION_EXPORT void OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedFollowingIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_withInt_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedFollowingIterator *self, OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$, jint type);

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedFollowingIterator *new_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedFollowingIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_withInt_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$, jint type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedFollowingIterator *create_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedFollowingIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_withInt_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$, jint type);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedFollowingIterator)

#endif

#if !defined (OrgApacheXmlDtmRefSax2dtmSAX2DTM2_AncestorIterator_) && (INCLUDE_ALL_OrgApacheXmlDtmRefSax2dtmSAX2DTM2 || defined(INCLUDE_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_AncestorIterator))
#define OrgApacheXmlDtmRefSax2dtmSAX2DTM2_AncestorIterator_

#define RESTRICT_OrgApacheXmlDtmRefDTMDefaultBaseIterators 1
#define INCLUDE_OrgApacheXmlDtmRefDTMDefaultBaseIterators_InternalAxisIteratorBase 1
#include "org/apache/xml/dtm/ref/DTMDefaultBaseIterators.h"

@class IOSIntArray;
@class OrgApacheXmlDtmRefSax2dtmSAX2DTM2;
@protocol OrgApacheXmlDtmDTMAxisIterator;

/*!
 @brief Iterator that returns the ancestors of a given node in document
  order.
 (NOTE!  This was changed from the XSLTC code!)
 */
@interface OrgApacheXmlDtmRefSax2dtmSAX2DTM2_AncestorIterator : OrgApacheXmlDtmRefDTMDefaultBaseIterators_InternalAxisIteratorBase {
 @public
  IOSIntArray *m_ancestors_;
  jint m_size_;
  jint m_ancestorsPos_;
  jint m_markedPos_;
  /*!
   @brief The real start node for this axes, since _startNode will be adjusted.
   */
  jint m_realStartNode_;
}

#pragma mark Public

- (instancetype __nonnull)initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2:(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *)outer$;

/*!
 @brief Returns a deep copy of this iterator.The cloned iterator is not reset.
 @return a deep copy of this iterator.
 */
- (id<OrgApacheXmlDtmDTMAxisIterator>)cloneIterator;

/*!
 @brief Get start to END should 'close' the iterator,
  i.e.subsequent call to next() should return END.
 @return The root node of the iteration.
 */
- (jint)getStartNode;

- (void)gotoMark;

/*!
 @brief True if this iterator has a reversed axis.
 @return true since this iterator is a reversed axis.
 */
- (jboolean)isReverse;

/*!
 @brief Get the next node in the iteration.
 @return The next node handle in the iteration, or END.
 */
- (jint)next;

/*!
 @brief Resets the iterator to the last start node.
 @return A DTMAxisIterator, which may or may not be the same as this
          iterator.
 */
- (id<OrgApacheXmlDtmDTMAxisIterator>)reset;

- (void)setMark;

/*!
 @brief Set start to END should 'close' the iterator,
  i.e.subsequent call to next() should return END.
 @param node Sets the root of the iteration.
 @return A DTMAxisIterator set to the start of the iteration.
 */
- (id<OrgApacheXmlDtmDTMAxisIterator>)setStartNodeWithInt:(jint)node;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheXmlDtmRefDTMDefaultBaseIterators:(OrgApacheXmlDtmRefDTMDefaultBaseIterators *)outer$ NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_AncestorIterator)

J2OBJC_FIELD_SETTER(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_AncestorIterator, m_ancestors_, IOSIntArray *)

FOUNDATION_EXPORT void OrgApacheXmlDtmRefSax2dtmSAX2DTM2_AncestorIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_AncestorIterator *self, OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$);

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2_AncestorIterator *new_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_AncestorIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2_AncestorIterator *create_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_AncestorIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_AncestorIterator)

#endif

#if !defined (OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedAncestorIterator_) && (INCLUDE_ALL_OrgApacheXmlDtmRefSax2dtmSAX2DTM2 || defined(INCLUDE_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedAncestorIterator))
#define OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedAncestorIterator_

@class OrgApacheXmlDtmRefSax2dtmSAX2DTM2;
@protocol OrgApacheXmlDtmDTMAxisIterator;

/*!
 @brief Typed iterator that returns the ancestors of a given node.
 */
@interface OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedAncestorIterator : OrgApacheXmlDtmRefSax2dtmSAX2DTM2_AncestorIterator

#pragma mark Public

/*!
 @brief Constructor TypedAncestorIterator
 @param type The extended type ID being requested.
 */
- (instancetype __nonnull)initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2:(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *)outer$
                                                            withInt:(jint)type;

/*!
 @brief Returns the position of the last node within the iteration, as
  defined by XPath.
 */
- (jint)getLast;

/*!
 @brief Return the node at the given position.
 */
- (jint)getNodeByPositionWithInt:(jint)position;

/*!
 @brief Set start to END should 'close' the iterator,
  i.e.subsequent call to next() should return END.
 @param node Sets the root of the iteration.
 @return A DTMAxisIterator set to the start of the iteration.
 */
- (id<OrgApacheXmlDtmDTMAxisIterator>)setStartNodeWithInt:(jint)node;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2:(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *)outer$ NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedAncestorIterator)

FOUNDATION_EXPORT void OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedAncestorIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_withInt_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedAncestorIterator *self, OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$, jint type);

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedAncestorIterator *new_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedAncestorIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_withInt_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$, jint type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedAncestorIterator *create_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedAncestorIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_withInt_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$, jint type);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedAncestorIterator)

#endif

#if !defined (OrgApacheXmlDtmRefSax2dtmSAX2DTM2_DescendantIterator_) && (INCLUDE_ALL_OrgApacheXmlDtmRefSax2dtmSAX2DTM2 || defined(INCLUDE_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_DescendantIterator))
#define OrgApacheXmlDtmRefSax2dtmSAX2DTM2_DescendantIterator_

#define RESTRICT_OrgApacheXmlDtmRefDTMDefaultBaseIterators 1
#define INCLUDE_OrgApacheXmlDtmRefDTMDefaultBaseIterators_InternalAxisIteratorBase 1
#include "org/apache/xml/dtm/ref/DTMDefaultBaseIterators.h"

@class OrgApacheXmlDtmRefSax2dtmSAX2DTM2;
@protocol OrgApacheXmlDtmDTMAxisIterator;

/*!
 @brief Iterator that returns the descendants of a given node.
 */
@interface OrgApacheXmlDtmRefSax2dtmSAX2DTM2_DescendantIterator : OrgApacheXmlDtmRefDTMDefaultBaseIterators_InternalAxisIteratorBase

#pragma mark Public

- (instancetype __nonnull)initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2:(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *)outer$;

/*!
 @brief Get the next node in the iteration.
 @return The next node handle in the iteration, or END.
 */
- (jint)next;

/*!
 @brief Reset.
 */
- (id<OrgApacheXmlDtmDTMAxisIterator>)reset;

/*!
 @brief Set start to END should 'close' the iterator,
  i.e.subsequent call to next() should return END.
 @param node Sets the root of the iteration.
 @return A DTMAxisIterator set to the start of the iteration.
 */
- (id<OrgApacheXmlDtmDTMAxisIterator>)setStartNodeWithInt:(jint)node;

#pragma mark Protected

/*!
 @brief Tell if this node identity is a descendant.Assumes that
  the node info for the element has already been obtained.
 This one-sided test works only if the parent has been
  previously tested and is known to be a descendent. It fails if
  the parent is the _startNode's next sibling, or indeed any node
  that follows _startNode in document order.  That may suffice
  for this iterator, but it's not really an isDescendent() test.
  %REVIEW% rename?
 @param identity The index number of the node in question.
 @return true if the index is a descendant of _startNode.
 */
- (jboolean)isDescendantWithInt:(jint)identity;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheXmlDtmRefDTMDefaultBaseIterators:(OrgApacheXmlDtmRefDTMDefaultBaseIterators *)outer$ NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_DescendantIterator)

FOUNDATION_EXPORT void OrgApacheXmlDtmRefSax2dtmSAX2DTM2_DescendantIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_DescendantIterator *self, OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$);

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2_DescendantIterator *new_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_DescendantIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2_DescendantIterator *create_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_DescendantIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_DescendantIterator)

#endif

#if !defined (OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedDescendantIterator_) && (INCLUDE_ALL_OrgApacheXmlDtmRefSax2dtmSAX2DTM2 || defined(INCLUDE_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedDescendantIterator))
#define OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedDescendantIterator_

@class OrgApacheXmlDtmRefSax2dtmSAX2DTM2;

/*!
 @brief Typed iterator that returns the descendants of a given node.
 */
@interface OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedDescendantIterator : OrgApacheXmlDtmRefSax2dtmSAX2DTM2_DescendantIterator

#pragma mark Public

/*!
 @brief Constructor TypedDescendantIterator
 @param nodeType Extended type ID being requested.
 */
- (instancetype __nonnull)initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2:(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *)outer$
                                                            withInt:(jint)nodeType;

/*!
 @brief Get the next node in the iteration.
 @return The next node handle in the iteration, or END.
 */
- (jint)next;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2:(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *)outer$ NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedDescendantIterator)

FOUNDATION_EXPORT void OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedDescendantIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_withInt_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedDescendantIterator *self, OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$, jint nodeType);

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedDescendantIterator *new_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedDescendantIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_withInt_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$, jint nodeType) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedDescendantIterator *create_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedDescendantIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_withInt_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$, jint nodeType);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedDescendantIterator)

#endif

#if !defined (OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedSingletonIterator_) && (INCLUDE_ALL_OrgApacheXmlDtmRefSax2dtmSAX2DTM2 || defined(INCLUDE_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedSingletonIterator))
#define OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedSingletonIterator_

#define RESTRICT_OrgApacheXmlDtmRefDTMDefaultBaseIterators 1
#define INCLUDE_OrgApacheXmlDtmRefDTMDefaultBaseIterators_SingletonIterator 1
#include "org/apache/xml/dtm/ref/DTMDefaultBaseIterators.h"

@class OrgApacheXmlDtmRefSax2dtmSAX2DTM2;

/*!
 @brief Iterator that returns a given node only if it is of a given type.
 */
@interface OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedSingletonIterator : OrgApacheXmlDtmRefDTMDefaultBaseIterators_SingletonIterator

#pragma mark Public

/*!
 @brief Constructor TypedSingletonIterator
 @param nodeType The extended type ID being requested.
 */
- (instancetype __nonnull)initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2:(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *)outer$
                                                            withInt:(jint)nodeType;

/*!
 @brief Get the next node in the iteration.
 @return The next node handle in the iteration, or END.
 */
- (jint)next;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheXmlDtmRefDTMDefaultBaseIterators:(OrgApacheXmlDtmRefDTMDefaultBaseIterators *)outer$ NS_UNAVAILABLE;

- (instancetype __nonnull)initWithOrgApacheXmlDtmRefDTMDefaultBaseIterators:(OrgApacheXmlDtmRefDTMDefaultBaseIterators *)outer$
                                                                    withInt:(jint)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithOrgApacheXmlDtmRefDTMDefaultBaseIterators:(OrgApacheXmlDtmRefDTMDefaultBaseIterators *)outer$
                                                                    withInt:(jint)arg0
                                                                withBoolean:(jboolean)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedSingletonIterator)

FOUNDATION_EXPORT void OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedSingletonIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_withInt_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedSingletonIterator *self, OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$, jint nodeType);

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedSingletonIterator *new_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedSingletonIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_withInt_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$, jint nodeType) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedSingletonIterator *create_OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedSingletonIterator_initWithOrgApacheXmlDtmRefSax2dtmSAX2DTM2_withInt_(OrgApacheXmlDtmRefSax2dtmSAX2DTM2 *outer$, jint nodeType);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlDtmRefSax2dtmSAX2DTM2_TypedSingletonIterator)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgApacheXmlDtmRefSax2dtmSAX2DTM2")
