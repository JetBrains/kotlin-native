//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/xalan/third_party/android/platform/external/apache-xml/src/main/java/org/apache/xml/serializer/Encodings.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheXmlSerializerEncodings")
#ifdef RESTRICT_OrgApacheXmlSerializerEncodings
#define INCLUDE_ALL_OrgApacheXmlSerializerEncodings 0
#else
#define INCLUDE_ALL_OrgApacheXmlSerializerEncodings 1
#endif
#undef RESTRICT_OrgApacheXmlSerializerEncodings

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheXmlSerializerEncodings_) && (INCLUDE_ALL_OrgApacheXmlSerializerEncodings || defined(INCLUDE_OrgApacheXmlSerializerEncodings))
#define OrgApacheXmlSerializerEncodings_

@class JavaIoOutputStream;
@class JavaIoWriter;
@class OrgApacheXmlSerializerEncodingInfo;

/*!
 @brief Provides information about encodings.Depends on the Java runtime
  to provides writers for the different encodings.
 <p>
  This class is not a public API. It is only public because it
  is used outside of this package.
 */
@interface OrgApacheXmlSerializerEncodings : NSObject
@property (readonly, copy, class) NSString *DEFAULT_MIME_ENCODING NS_SWIFT_NAME(DEFAULT_MIME_ENCODING);

+ (NSString *)DEFAULT_MIME_ENCODING;

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Try the best we can to convert a Java encoding to a XML-style encoding.
 <p>
  This is not a public API.
 @param encoding non-null reference to encoding string, java style.
 @return ISO-style encoding string. 
 <p>
  This method is not a public API.
 */
+ (NSString *)convertMime2JavaEncodingWithNSString:(NSString *)encoding;

/*!
 @brief Characters with values at or below the high code point are
  in the encoding.Code point values above this one may or may
  not be in the encoding, but lower ones certainly are.
 <p>
  This is for performance.
 @param encoding The encoding
 @return The code point for which characters at or below this code point
  are in the encoding. Characters with higher code point may or may not be
  in the encoding. A value of zero is returned if the high code point is unknown. 
 <p>
  This method is not a public API.
 */
+ (jchar)getHighCharWithNSString:(NSString *)encoding;

/*!
 @brief Determines if the encoding specified was recognized by the
  serializer or not.
 @param encoding The encoding
 @return boolean - true if the encoding was recognized else false
 */
+ (jboolean)isRecognizedEncodingWithNSString:(NSString *)encoding;

#pragma mark Package-Private

/*!
 @brief Returns the EncodingInfo object for the specified
  encoding, never null, although the encoding name 
  inside the returned EncodingInfo object will be if
  we can't find a "real" EncodingInfo for the encoding.
 <p>
  This is not a public API.
 @param encoding The encoding
 @return The object that is used to determine if 
  characters are in the given encoding.
 */
+ (OrgApacheXmlSerializerEncodingInfo *)getEncodingInfoWithNSString:(NSString *)encoding;

/*!
 @brief Get the proper mime encoding.From the XSLT recommendation: "The encoding
  attribute specifies the preferred encoding to use for outputting the result
  tree.
 XSLT processors are required to respect values of UTF-8 and UTF-16.
  For other values, if the XSLT processor does not support the specified
  encoding it may signal an error; if it does not signal an error it should
  use UTF-8 or UTF-16 instead. The XSLT processor must not use an encoding
  whose name does not match the EncName production of the XML Recommendation
  [XML]. If no encoding attribute is specified, then the XSLT processor should
  use either UTF-8 or UTF-16." 
 <p>
  This is not a public API.
 @param encoding Reference to java-style encoding string, which may be null,  in which case a default will be found.
 @return The ISO-style encoding string, or null if failure.
 */
+ (NSString *)getMimeEncodingWithNSString:(NSString *)encoding;

/*!
 @brief Returns a writer for the specified encoding based on
  an output stream.
 <p>
  This is not a public API.
 @param output The output stream
 @param encoding The encoding MIME name, not a Java name for the encoding.
 @return A suitable writer
 @throw UnsupportedEncodingExceptionThere is no convertor
   to support this encoding
 */
+ (JavaIoWriter *)getWriterWithJavaIoOutputStream:(JavaIoOutputStream *)output
                                     withNSString:(NSString *)encoding;

/*!
 @brief Return true if the character is the high member of a surrogate pair.
 <p>
  This is not a public API.
 @param ch the character to test
 */
+ (jboolean)isHighUTF16SurrogateWithChar:(jchar)ch;

/*!
 @brief Return true if the character is the low member of a surrogate pair.
 <p>
  This is not a public API.
 @param ch the character to test
 */
+ (jboolean)isLowUTF16SurrogateWithChar:(jchar)ch;

/*!
 @brief Return the unicode code point represented by the char.
 A bit of a dummy method, since all it does is return the char,
  but as an int value. 
 <p>
  This is not a public API.
 @param ch the char.
 */
+ (jint)toCodePointWithChar:(jchar)ch;

/*!
 @brief Return the unicode code point represented by the high/low surrogate pair.
 <p>
  This is not a public API.
 @param highSurrogate the high char of the high/low pair
 @param lowSurrogate the low char of the high/low pair
 */
+ (jint)toCodePointWithChar:(jchar)highSurrogate
                   withChar:(jchar)lowSurrogate;

@end

J2OBJC_STATIC_INIT(OrgApacheXmlSerializerEncodings)

/*!
 @brief The default encoding, ISO style, ISO style.
 */
inline NSString *OrgApacheXmlSerializerEncodings_get_DEFAULT_MIME_ENCODING(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheXmlSerializerEncodings_DEFAULT_MIME_ENCODING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheXmlSerializerEncodings, DEFAULT_MIME_ENCODING, NSString *)

FOUNDATION_EXPORT void OrgApacheXmlSerializerEncodings_init(OrgApacheXmlSerializerEncodings *self);

FOUNDATION_EXPORT OrgApacheXmlSerializerEncodings *new_OrgApacheXmlSerializerEncodings_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheXmlSerializerEncodings *create_OrgApacheXmlSerializerEncodings_init(void);

FOUNDATION_EXPORT JavaIoWriter *OrgApacheXmlSerializerEncodings_getWriterWithJavaIoOutputStream_withNSString_(JavaIoOutputStream *output, NSString *encoding);

FOUNDATION_EXPORT OrgApacheXmlSerializerEncodingInfo *OrgApacheXmlSerializerEncodings_getEncodingInfoWithNSString_(NSString *encoding);

FOUNDATION_EXPORT jboolean OrgApacheXmlSerializerEncodings_isRecognizedEncodingWithNSString_(NSString *encoding);

FOUNDATION_EXPORT NSString *OrgApacheXmlSerializerEncodings_getMimeEncodingWithNSString_(NSString *encoding);

FOUNDATION_EXPORT NSString *OrgApacheXmlSerializerEncodings_convertMime2JavaEncodingWithNSString_(NSString *encoding);

FOUNDATION_EXPORT jboolean OrgApacheXmlSerializerEncodings_isHighUTF16SurrogateWithChar_(jchar ch);

FOUNDATION_EXPORT jboolean OrgApacheXmlSerializerEncodings_isLowUTF16SurrogateWithChar_(jchar ch);

FOUNDATION_EXPORT jint OrgApacheXmlSerializerEncodings_toCodePointWithChar_withChar_(jchar highSurrogate, jchar lowSurrogate);

FOUNDATION_EXPORT jint OrgApacheXmlSerializerEncodings_toCodePointWithChar_(jchar ch);

FOUNDATION_EXPORT jchar OrgApacheXmlSerializerEncodings_getHighCharWithNSString_(NSString *encoding);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheXmlSerializerEncodings)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgApacheXmlSerializerEncodings")
