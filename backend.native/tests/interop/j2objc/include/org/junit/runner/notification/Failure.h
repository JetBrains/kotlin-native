//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/junit/build_result/java/org/junit/runner/notification/Failure.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJunitRunnerNotificationFailure")
#ifdef RESTRICT_OrgJunitRunnerNotificationFailure
#define INCLUDE_ALL_OrgJunitRunnerNotificationFailure 0
#else
#define INCLUDE_ALL_OrgJunitRunnerNotificationFailure 1
#endif
#undef RESTRICT_OrgJunitRunnerNotificationFailure

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgJunitRunnerNotificationFailure_) && (INCLUDE_ALL_OrgJunitRunnerNotificationFailure || defined(INCLUDE_OrgJunitRunnerNotificationFailure))
#define OrgJunitRunnerNotificationFailure_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class JavaLangThrowable;
@class OrgJunitRunnerDescription;

/*!
 @brief A <code>Failure</code> holds a description of the failed test and the
  exception that was thrown while running it.In most cases the <code>org.junit.runner.Description</code>
  will be of a single test.
 However, if problems are encountered while constructing the
  test (for example, if a <code>org.junit.BeforeClass</code> method is not static), it may describe
  something other than a single test.
 @since 4.0
 */
@interface OrgJunitRunnerNotificationFailure : NSObject < JavaIoSerializable >

#pragma mark Public

/*!
 @brief Constructs a <code>Failure</code> with the given description and exception.
 @param description_ a <code>org.junit.runner.Description</code>  of the test that failed
 @param thrownException the exception that was thrown while running the test
 */
- (instancetype __nonnull)initWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_
                                      withJavaLangThrowable:(JavaLangThrowable *)thrownException;

/*!
 @return the raw description of the context of the failure.
 */
- (OrgJunitRunnerDescription *)getDescription;

/*!
 @return the exception thrown
 */
- (JavaLangThrowable *)getException;

/*!
 @brief Convenience method
 @return the message of the thrown exception
 */
- (NSString *)getMessage;

/*!
 @return a user-understandable label for the test
 */
- (NSString *)getTestHeader;

/*!
 @brief Convenience method
 @return the printed form of the exception
 */
- (NSString *)getTrace;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJunitRunnerNotificationFailure)

FOUNDATION_EXPORT void OrgJunitRunnerNotificationFailure_initWithOrgJunitRunnerDescription_withJavaLangThrowable_(OrgJunitRunnerNotificationFailure *self, OrgJunitRunnerDescription *description_, JavaLangThrowable *thrownException);

FOUNDATION_EXPORT OrgJunitRunnerNotificationFailure *new_OrgJunitRunnerNotificationFailure_initWithOrgJunitRunnerDescription_withJavaLangThrowable_(OrgJunitRunnerDescription *description_, JavaLangThrowable *thrownException) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJunitRunnerNotificationFailure *create_OrgJunitRunnerNotificationFailure_initWithOrgJunitRunnerDescription_withJavaLangThrowable_(OrgJunitRunnerDescription *description_, JavaLangThrowable *thrownException);

J2OBJC_TYPE_LITERAL_HEADER(OrgJunitRunnerNotificationFailure)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgJunitRunnerNotificationFailure")
