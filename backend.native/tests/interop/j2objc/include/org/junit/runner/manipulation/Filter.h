//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/junit/build_result/java/org/junit/runner/manipulation/Filter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJunitRunnerManipulationFilter")
#ifdef RESTRICT_OrgJunitRunnerManipulationFilter
#define INCLUDE_ALL_OrgJunitRunnerManipulationFilter 0
#else
#define INCLUDE_ALL_OrgJunitRunnerManipulationFilter 1
#endif
#undef RESTRICT_OrgJunitRunnerManipulationFilter

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgJunitRunnerManipulationFilter_) && (INCLUDE_ALL_OrgJunitRunnerManipulationFilter || defined(INCLUDE_OrgJunitRunnerManipulationFilter))
#define OrgJunitRunnerManipulationFilter_

@class OrgJunitRunnerDescription;

/*!
 @brief The canonical case of filtering is when you want to run a single test method in a class.Rather
  than introduce runner API just for that one case, JUnit provides a general filtering mechanism.
 If you want to filter the tests to be run, extend <code>Filter</code> and apply an instance of
  your filter to the <code>org.junit.runner.Request</code> before running it (see 
 <code>org.junit.runner.JUnitCore.run(Request)</code>. Alternatively, apply a <code>Filter</code> to
  a <code>org.junit.runner.Runner</code> before running tests (for example, in conjunction with 
 <code>org.junit.runner.RunWith</code>.
 @since 4.0
 */
@interface OrgJunitRunnerManipulationFilter : NSObject
@property (class, strong) OrgJunitRunnerManipulationFilter *ALL NS_SWIFT_NAME(ALL);

+ (OrgJunitRunnerManipulationFilter *)ALL;

+ (void)setALL:(OrgJunitRunnerManipulationFilter *)value;

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Invoke with a <code>org.junit.runner.Runner</code> to cause all tests it intends to run
  to first be checked with the filter.Only those that pass the filter will be run.
 @param child the runner to be filtered by the receiver
 @throw NoTestsRemainExceptionif the receiver removes all tests
 */
- (void)applyWithId:(id)child;

/*!
 @brief Returns a textual description of this Filter
 @return a textual description of this Filter
 */
- (NSString *)describe;

/*!
 @brief Returns a new Filter that accepts the intersection of the tests accepted
  by this Filter and <code>second</code>
 */
- (OrgJunitRunnerManipulationFilter *)intersectWithOrgJunitRunnerManipulationFilter:(OrgJunitRunnerManipulationFilter *)second;

/*!
 @brief Returns a <code>Filter</code> that only runs the single method described by 
 <code>desiredDescription</code>
 */
+ (OrgJunitRunnerManipulationFilter *)matchMethodDescriptionWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)desiredDescription;

/*!
 @param description_ the description of the test to be run
 @return <code>true</code> if the test should be run
 */
- (jboolean)shouldRunWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_;

@end

J2OBJC_STATIC_INIT(OrgJunitRunnerManipulationFilter)

/*!
 @brief A null <code>Filter</code> that passes all tests through.
 */
inline OrgJunitRunnerManipulationFilter *OrgJunitRunnerManipulationFilter_get_ALL(void);
inline OrgJunitRunnerManipulationFilter *OrgJunitRunnerManipulationFilter_set_ALL(OrgJunitRunnerManipulationFilter *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgJunitRunnerManipulationFilter *OrgJunitRunnerManipulationFilter_ALL;
J2OBJC_STATIC_FIELD_OBJ(OrgJunitRunnerManipulationFilter, ALL, OrgJunitRunnerManipulationFilter *)

FOUNDATION_EXPORT void OrgJunitRunnerManipulationFilter_init(OrgJunitRunnerManipulationFilter *self);

FOUNDATION_EXPORT OrgJunitRunnerManipulationFilter *OrgJunitRunnerManipulationFilter_matchMethodDescriptionWithOrgJunitRunnerDescription_(OrgJunitRunnerDescription *desiredDescription);

J2OBJC_TYPE_LITERAL_HEADER(OrgJunitRunnerManipulationFilter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgJunitRunnerManipulationFilter")
