//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/junit/build_result/java/org/junit/runner/Request.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJunitRunnerRequest")
#ifdef RESTRICT_OrgJunitRunnerRequest
#define INCLUDE_ALL_OrgJunitRunnerRequest 0
#else
#define INCLUDE_ALL_OrgJunitRunnerRequest 1
#endif
#undef RESTRICT_OrgJunitRunnerRequest

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgJunitRunnerRequest_) && (INCLUDE_ALL_OrgJunitRunnerRequest || defined(INCLUDE_OrgJunitRunnerRequest))
#define OrgJunitRunnerRequest_

@class IOSClass;
@class IOSObjectArray;
@class JavaLangThrowable;
@class OrgJunitRunnerComputer;
@class OrgJunitRunnerDescription;
@class OrgJunitRunnerManipulationFilter;
@class OrgJunitRunnerRunner;
@protocol JavaUtilComparator;

/*!
 @brief <p>A <code>Request</code> is an abstract description of tests to be run.
 Older versions of
  JUnit did not need such a concept--tests to be run were described either by classes containing
  tests or a tree of <code>org.junit.Test</code>s. However, we want to support filtering and sorting,
  so we need a more abstract specification than the tests themselves and a richer
  specification than just the classes.</p>
  
 <p>The flow when JUnit runs tests is that a <code>Request</code> specifies some tests to be run ->
  a <code>org.junit.runner.Runner</code> is created for each class implied by the <code>Request</code> ->
  the <code>org.junit.runner.Runner</code> returns a detailed <code>org.junit.runner.Description</code>
  which is a tree structure of the tests to be run.</p>
 @since 4.0
 */
@interface OrgJunitRunnerRequest : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Create a <code>Request</code> that, when processed, will run all the tests
  in a class.The odd name is necessary because <code>class</code> is a reserved word.
 @param clazz the class containing the tests
 @return a <code>Request</code> that will cause all tests in the class to be run
 */
+ (OrgJunitRunnerRequest *)aClassWithIOSClass:(IOSClass *)clazz;

/*!
 @brief Create a <code>Request</code> that, when processed, will run all the tests
  in a set of classes with the default <code>Computer</code>.
 @param classes the classes containing the tests
 @return a <code>Request</code> that will cause all tests in the classes to be run
 */
+ (OrgJunitRunnerRequest *)classesWithIOSClassArray:(IOSObjectArray *)classes;

/*!
 @brief Create a <code>Request</code> that, when processed, will run all the tests
  in a set of classes.
 @param computer Helps construct Runners from classes
 @param classes the classes containing the tests
 @return a <code>Request</code> that will cause all tests in the classes to be run
 */
+ (OrgJunitRunnerRequest *)classesWithOrgJunitRunnerComputer:(OrgJunitRunnerComputer *)computer
                                           withIOSClassArray:(IOSObjectArray *)classes;

/*!
 @brief Create a <code>Request</code> that, when processed, will run all the tests
  in a class.If the class has a suite() method, it will be ignored.
 @param clazz the class containing the tests
 @return a <code>Request</code> that will cause all tests in the class to be run
 */
+ (OrgJunitRunnerRequest *)classWithoutSuiteMethodWithIOSClass:(IOSClass *)clazz;

/*!
 @brief Not used within JUnit.Clients should simply instantiate ErrorReportingRunner themselves
 */
+ (OrgJunitRunnerRequest *)errorReportWithIOSClass:(IOSClass *)klass
                             withJavaLangThrowable:(JavaLangThrowable *)cause __attribute__((deprecated));

/*!
 @brief Returns a Request that only runs contains tests whose <code>Description</code>
  equals <code>desiredDescription</code>
 @param desiredDescription<code>Description</code>  of those tests that should be run
 @return the filtered Request
 */
- (OrgJunitRunnerRequest *)filterWithWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)desiredDescription;

/*!
 @brief Returns a Request that only contains those tests that should run when 
 <code>filter</code> is applied
 @param filter The <code>Filter</code>  to apply to this Request
 @return the filtered Request
 */
- (OrgJunitRunnerRequest *)filterWithWithOrgJunitRunnerManipulationFilter:(OrgJunitRunnerManipulationFilter *)filter;

/*!
 @brief Returns a <code>Runner</code> for this Request
 @return corresponding <code>Runner</code> for this Request
 */
- (OrgJunitRunnerRunner *)getRunner;

/*!
 @brief Create a <code>Request</code> that, when processed, will run a single test.
 This is done by filtering out all other tests. This method is used to support rerunning
  single tests.
 @param clazz the class of the test
 @param methodName the name of the test
 @return a <code>Request</code> that will cause a single test be run
 */
+ (OrgJunitRunnerRequest *)methodWithIOSClass:(IOSClass *)clazz
                                 withNSString:(NSString *)methodName;

/*!
 @param runner the runner to return
 @return a <code>Request</code> that will run the given runner when invoked
 */
+ (OrgJunitRunnerRequest *)runnerWithOrgJunitRunnerRunner:(OrgJunitRunnerRunner *)runner;

/*!
 @brief Returns a Request whose Tests can be run in a certain order, defined by 
 <code>comparator</code>
  For example, here is code to run a test suite in alphabetical order:
 @code

  private static Comparator<Description> forward() {
  return new Comparator<Description>() {
  public int compare(Description o1, Description o2) {
  return o1.getDisplayName().compareTo(o2.getDisplayName());
  }
  }; }
  public static main() {
  new JUnitCore().run(Request.aClass(AllTests.class).sortWith(forward()));
  } 
  
@endcode
 @param comparator definition of the order of the tests in this Request
 @return a Request with ordered Tests
 */
- (OrgJunitRunnerRequest *)sortWithWithJavaUtilComparator:(id<JavaUtilComparator>)comparator;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJunitRunnerRequest)

FOUNDATION_EXPORT void OrgJunitRunnerRequest_init(OrgJunitRunnerRequest *self);

FOUNDATION_EXPORT OrgJunitRunnerRequest *OrgJunitRunnerRequest_methodWithIOSClass_withNSString_(IOSClass *clazz, NSString *methodName);

FOUNDATION_EXPORT OrgJunitRunnerRequest *OrgJunitRunnerRequest_aClassWithIOSClass_(IOSClass *clazz);

FOUNDATION_EXPORT OrgJunitRunnerRequest *OrgJunitRunnerRequest_classWithoutSuiteMethodWithIOSClass_(IOSClass *clazz);

FOUNDATION_EXPORT OrgJunitRunnerRequest *OrgJunitRunnerRequest_classesWithOrgJunitRunnerComputer_withIOSClassArray_(OrgJunitRunnerComputer *computer, IOSObjectArray *classes);

FOUNDATION_EXPORT OrgJunitRunnerRequest *OrgJunitRunnerRequest_classesWithIOSClassArray_(IOSObjectArray *classes);

FOUNDATION_EXPORT OrgJunitRunnerRequest *OrgJunitRunnerRequest_errorReportWithIOSClass_withJavaLangThrowable_(IOSClass *klass, JavaLangThrowable *cause);

FOUNDATION_EXPORT OrgJunitRunnerRequest *OrgJunitRunnerRequest_runnerWithOrgJunitRunnerRunner_(OrgJunitRunnerRunner *runner);

J2OBJC_TYPE_LITERAL_HEADER(OrgJunitRunnerRequest)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgJunitRunnerRequest")
