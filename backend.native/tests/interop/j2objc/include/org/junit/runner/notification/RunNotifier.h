//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/junit/build_result/java/org/junit/runner/notification/RunNotifier.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJunitRunnerNotificationRunNotifier")
#ifdef RESTRICT_OrgJunitRunnerNotificationRunNotifier
#define INCLUDE_ALL_OrgJunitRunnerNotificationRunNotifier 0
#else
#define INCLUDE_ALL_OrgJunitRunnerNotificationRunNotifier 1
#endif
#undef RESTRICT_OrgJunitRunnerNotificationRunNotifier

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgJunitRunnerNotificationRunNotifier_) && (INCLUDE_ALL_OrgJunitRunnerNotificationRunNotifier || defined(INCLUDE_OrgJunitRunnerNotificationRunNotifier))
#define OrgJunitRunnerNotificationRunNotifier_

@class OrgJunitRunnerDescription;
@class OrgJunitRunnerNotificationFailure;
@class OrgJunitRunnerNotificationRunListener;
@class OrgJunitRunnerResult;

/*!
 @brief If you write custom runners, you may need to notify JUnit of your progress running tests.
 Do this by invoking the <code>RunNotifier</code> passed to your implementation of 
 <code>org.junit.runner.Runner.run(RunNotifier)</code>. Future evolution of this class is likely to
  move <code>fireTestRunStarted(Description)</code> and <code>fireTestRunFinished(Result)</code>
  to a separate class since they should only be called once per run.
 @since 4.0
 */
@interface OrgJunitRunnerNotificationRunNotifier : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Internal use only.The Result's listener must be first.
 */
- (void)addFirstListenerWithOrgJunitRunnerNotificationRunListener:(OrgJunitRunnerNotificationRunListener *)listener;

/*!
 @brief Internal use only
 */
- (void)addListenerWithOrgJunitRunnerNotificationRunListener:(OrgJunitRunnerNotificationRunListener *)listener;

/*!
 @brief Invoke to tell listeners that an atomic test flagged that it assumed
  something false.
 @param failure the description of the test that failed and the  
 <code>AssumptionViolatedException</code>  thrown
 */
- (void)fireTestAssumptionFailedWithOrgJunitRunnerNotificationFailure:(OrgJunitRunnerNotificationFailure *)failure;

/*!
 @brief Invoke to tell listeners that an atomic test failed.
 @param failure the description of the test that failed and the exception thrown
 */
- (void)fireTestFailureWithOrgJunitRunnerNotificationFailure:(OrgJunitRunnerNotificationFailure *)failure;

/*!
 @brief Invoke to tell listeners that an atomic test finished.Always invoke 
 <code>fireTestFinished(Description)</code> if you invoke <code>fireTestStarted(Description)</code>
  as listeners are likely to expect them to come in pairs.
 @param description_ the description of the test that finished
 */
- (void)fireTestFinishedWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_;

/*!
 @brief Invoke to tell listeners that an atomic test was ignored.
 @param description_ the description of the ignored test
 */
- (void)fireTestIgnoredWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_;

/*!
 @brief Do not invoke.
 */
- (void)fireTestRunFinishedWithOrgJunitRunnerResult:(OrgJunitRunnerResult *)result;

/*!
 @brief Do not invoke.
 */
- (void)fireTestRunStartedWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_;

/*!
 @brief Invoke to tell listeners that an atomic test is about to start.
 @param description_ the description of the atomic test (generally a class and method name)
 @throw StoppedByUserExceptionthrown if a user has requested that the test run stop
 */
- (void)fireTestStartedWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_;

/*!
 @brief Ask that the tests run stop before starting the next test.Phrased politely because
  the test currently running will not be interrupted.
 It seems a little odd to put this
  functionality here, but the <code>RunNotifier</code> is the only object guaranteed
  to be shared amongst the many runners involved.
 */
- (void)pleaseStop;

/*!
 @brief Internal use only
 */
- (void)removeListenerWithOrgJunitRunnerNotificationRunListener:(OrgJunitRunnerNotificationRunListener *)listener;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJunitRunnerNotificationRunNotifier)

FOUNDATION_EXPORT void OrgJunitRunnerNotificationRunNotifier_init(OrgJunitRunnerNotificationRunNotifier *self);

FOUNDATION_EXPORT OrgJunitRunnerNotificationRunNotifier *new_OrgJunitRunnerNotificationRunNotifier_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJunitRunnerNotificationRunNotifier *create_OrgJunitRunnerNotificationRunNotifier_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgJunitRunnerNotificationRunNotifier)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgJunitRunnerNotificationRunNotifier")
