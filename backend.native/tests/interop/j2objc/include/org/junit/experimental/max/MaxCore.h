//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/junit/build_result/java/org/junit/experimental/max/MaxCore.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJunitExperimentalMaxMaxCore")
#ifdef RESTRICT_OrgJunitExperimentalMaxMaxCore
#define INCLUDE_ALL_OrgJunitExperimentalMaxMaxCore 0
#else
#define INCLUDE_ALL_OrgJunitExperimentalMaxMaxCore 1
#endif
#undef RESTRICT_OrgJunitExperimentalMaxMaxCore

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgJunitExperimentalMaxMaxCore_) && (INCLUDE_ALL_OrgJunitExperimentalMaxMaxCore || defined(INCLUDE_OrgJunitExperimentalMaxMaxCore))
#define OrgJunitExperimentalMaxMaxCore_

@class IOSClass;
@class JavaIoFile;
@class OrgJunitRunnerJUnitCore;
@class OrgJunitRunnerRequest;
@class OrgJunitRunnerResult;
@protocol JavaUtilList;

/*!
 @brief A replacement for JUnitCore, which keeps track of runtime and failure history, and reorders tests
  to maximize the chances that a failing test occurs early in the test run.
 The rules for sorting are: 
 <ol>
  <li> Never-run tests first, in arbitrary order 
 <li> Group remaining tests by the date at which they most recently failed. 
 <li> Sort groups such that the most recent failure date is first, and never-failing tests are at the end. 
 <li> Within a group, run the fastest tests first. 
 </ol>
 */
@interface OrgJunitExperimentalMaxMaxCore : NSObject

#pragma mark Public

/*!
 @brief Create a new MaxCore from a serialized file stored at storedResults
 */
+ (OrgJunitExperimentalMaxMaxCore *)forFolderWithNSString:(NSString *)folderName __attribute__((deprecated));

/*!
 @brief Run all the tests in <code>class</code>.
 @return a <code>Result</code> describing the details of the test run and the failed tests.
 */
- (OrgJunitRunnerResult *)runWithIOSClass:(IOSClass *)testClass;

/*!
 @brief Run all the tests contained in <code>request</code>.
 @param request the request describing tests
 @return a <code>Result</code> describing the details of the test run and the failed tests.
 */
- (OrgJunitRunnerResult *)runWithOrgJunitRunnerRequest:(OrgJunitRunnerRequest *)request;

/*!
 @brief Run all the tests contained in <code>request</code>.
 This variant should be used if <code>core</code> has attached listeners that this
  run should notify.
 @param request the request describing tests
 @param core a JUnitCore to delegate to.
 @return a <code>Result</code> describing the details of the test run and the failed tests.
 */
- (OrgJunitRunnerResult *)runWithOrgJunitRunnerRequest:(OrgJunitRunnerRequest *)request
                           withOrgJunitRunnerJUnitCore:(OrgJunitRunnerJUnitCore *)core;

/*!
 @param request a request to run
 @return a list of method-level tests to run, sorted in the order
          specified in the class comment.
 */
- (id<JavaUtilList>)sortedLeavesForTestWithOrgJunitRunnerRequest:(OrgJunitRunnerRequest *)request;

/*!
 @return a new Request, which contains all of the same tests, but in a new order.
 */
- (OrgJunitRunnerRequest *)sortRequestWithOrgJunitRunnerRequest:(OrgJunitRunnerRequest *)request;

/*!
 @brief Create a new MaxCore from a serialized file stored at storedResults
 */
+ (OrgJunitExperimentalMaxMaxCore *)storedLocallyWithJavaIoFile:(JavaIoFile *)storedResults;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJunitExperimentalMaxMaxCore)

FOUNDATION_EXPORT OrgJunitExperimentalMaxMaxCore *OrgJunitExperimentalMaxMaxCore_forFolderWithNSString_(NSString *folderName);

FOUNDATION_EXPORT OrgJunitExperimentalMaxMaxCore *OrgJunitExperimentalMaxMaxCore_storedLocallyWithJavaIoFile_(JavaIoFile *storedResults);

J2OBJC_TYPE_LITERAL_HEADER(OrgJunitExperimentalMaxMaxCore)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgJunitExperimentalMaxMaxCore")
