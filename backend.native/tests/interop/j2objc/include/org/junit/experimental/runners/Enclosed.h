//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/junit/build_result/java/org/junit/experimental/runners/Enclosed.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJunitExperimentalRunnersEnclosed")
#ifdef RESTRICT_OrgJunitExperimentalRunnersEnclosed
#define INCLUDE_ALL_OrgJunitExperimentalRunnersEnclosed 0
#else
#define INCLUDE_ALL_OrgJunitExperimentalRunnersEnclosed 1
#endif
#undef RESTRICT_OrgJunitExperimentalRunnersEnclosed

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgJunitExperimentalRunnersEnclosed_) && (INCLUDE_ALL_OrgJunitExperimentalRunnersEnclosed || defined(INCLUDE_OrgJunitExperimentalRunnersEnclosed))
#define OrgJunitExperimentalRunnersEnclosed_

#define RESTRICT_OrgJunitRunnersSuite 1
#define INCLUDE_OrgJunitRunnersSuite 1
#include "org/junit/runners/Suite.h"

@class IOSClass;
@class IOSObjectArray;
@class OrgJunitRunnersModelRunnerBuilder;
@protocol JavaUtilList;

/*!
 @brief If you put tests in inner classes, Ant, for example, won't find them.By running the outer class
  with Enclosed, the tests in the inner classes will be run.
 You might put tests in inner classes
  to group them for convenience or to share constants.
  So, for example: 
 @code

   \@@RunWith(Enclosed.class)
   public class ListTests {
       ...useful shared stuff...
       public static class OneKindOfListTest {...}
       public static class AnotherKind {...}
   }  
  
@endcode
  For a real example, @@see org.junit.tests.manipulation.SortableTest.
 */
@interface OrgJunitExperimentalRunnersEnclosed : OrgJunitRunnersSuite

#pragma mark Public

/*!
 @brief Only called reflectively.Do not use programmatically.
 */
- (instancetype __nonnull)initWithIOSClass:(IOSClass *)klass
     withOrgJunitRunnersModelRunnerBuilder:(OrgJunitRunnersModelRunnerBuilder *)builder;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)arg0
                         withIOSClassArray:(IOSObjectArray *)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)arg0
                          withJavaUtilList:(id<JavaUtilList>)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithOrgJunitRunnersModelRunnerBuilder:(OrgJunitRunnersModelRunnerBuilder *)arg0
                                                       withIOSClass:(IOSClass *)arg1
                                                  withIOSClassArray:(IOSObjectArray *)arg2 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithOrgJunitRunnersModelRunnerBuilder:(OrgJunitRunnersModelRunnerBuilder *)arg0
                                                  withIOSClassArray:(IOSObjectArray *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJunitExperimentalRunnersEnclosed)

FOUNDATION_EXPORT void OrgJunitExperimentalRunnersEnclosed_initWithIOSClass_withOrgJunitRunnersModelRunnerBuilder_(OrgJunitExperimentalRunnersEnclosed *self, IOSClass *klass, OrgJunitRunnersModelRunnerBuilder *builder);

FOUNDATION_EXPORT OrgJunitExperimentalRunnersEnclosed *new_OrgJunitExperimentalRunnersEnclosed_initWithIOSClass_withOrgJunitRunnersModelRunnerBuilder_(IOSClass *klass, OrgJunitRunnersModelRunnerBuilder *builder) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJunitExperimentalRunnersEnclosed *create_OrgJunitExperimentalRunnersEnclosed_initWithIOSClass_withOrgJunitRunnersModelRunnerBuilder_(IOSClass *klass, OrgJunitRunnersModelRunnerBuilder *builder);

J2OBJC_TYPE_LITERAL_HEADER(OrgJunitExperimentalRunnersEnclosed)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgJunitExperimentalRunnersEnclosed")
