//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/junit/build_result/java/org/junit/rules/TemporaryFolder.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJunitRulesTemporaryFolder")
#ifdef RESTRICT_OrgJunitRulesTemporaryFolder
#define INCLUDE_ALL_OrgJunitRulesTemporaryFolder 0
#else
#define INCLUDE_ALL_OrgJunitRulesTemporaryFolder 1
#endif
#undef RESTRICT_OrgJunitRulesTemporaryFolder

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgJunitRulesTemporaryFolder_) && (INCLUDE_ALL_OrgJunitRulesTemporaryFolder || defined(INCLUDE_OrgJunitRulesTemporaryFolder))
#define OrgJunitRulesTemporaryFolder_

#define RESTRICT_OrgJunitRulesExternalResource 1
#define INCLUDE_OrgJunitRulesExternalResource 1
#include "org/junit/rules/ExternalResource.h"

@class IOSObjectArray;
@class JavaIoFile;

/*!
 @brief The TemporaryFolder Rule allows creation of files and folders that are
  guaranteed to be deleted when the test method finishes (whether it passes or
  fails):
 @code

  public static class HasTempFolder {
    &#064;Rule
   public TemporaryFolder folder= new TemporaryFolder();  
  &#064;Test
   public void testUsingTempFolder() throws IOException {
       File createdFile= folder.newFile(&quot;myfile.txt&quot;);
       File createdFolder= folder.newFolder(&quot;subfolder&quot;);
       // ...
      }    }    
  
@endcode
 @since 4.7
 */
@interface OrgJunitRulesTemporaryFolder : OrgJunitRulesExternalResource

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)parentFolder;

/*!
 @brief for testing purposes only.Do not use.
 */
- (void)create;

/*!
 @brief Delete all files and folders under the temporary folder.Usually not
  called directly, since it is automatically applied by the <code>Rule</code>
 */
- (void)delete__;

/*!
 @return the location of this temporary folder.
 */
- (JavaIoFile *)getRoot;

/*!
 @brief Returns a new fresh file with a random name under the temporary folder.
 */
- (JavaIoFile *)newFile OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns a new fresh file with the given name under the temporary folder.
 */
- (JavaIoFile *)newFileWithNSString:(NSString *)fileName OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns a new fresh folder with a random name under the temporary folder.
 */
- (JavaIoFile *)newFolder OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns a new fresh folder with the given name under the temporary
  folder.
 */
- (JavaIoFile *)newFolderWithNSString:(NSString *)folder OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns a new fresh folder with the given name(s) under the temporary
  folder.
 */
- (JavaIoFile *)newFolderWithNSStringArray:(IOSObjectArray *)folderNames OBJC_METHOD_FAMILY_NONE;

#pragma mark Protected

- (void)after;

- (void)before;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJunitRulesTemporaryFolder)

FOUNDATION_EXPORT void OrgJunitRulesTemporaryFolder_init(OrgJunitRulesTemporaryFolder *self);

FOUNDATION_EXPORT OrgJunitRulesTemporaryFolder *new_OrgJunitRulesTemporaryFolder_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJunitRulesTemporaryFolder *create_OrgJunitRulesTemporaryFolder_init(void);

FOUNDATION_EXPORT void OrgJunitRulesTemporaryFolder_initWithJavaIoFile_(OrgJunitRulesTemporaryFolder *self, JavaIoFile *parentFolder);

FOUNDATION_EXPORT OrgJunitRulesTemporaryFolder *new_OrgJunitRulesTemporaryFolder_initWithJavaIoFile_(JavaIoFile *parentFolder) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJunitRulesTemporaryFolder *create_OrgJunitRulesTemporaryFolder_initWithJavaIoFile_(JavaIoFile *parentFolder);

J2OBJC_TYPE_LITERAL_HEADER(OrgJunitRulesTemporaryFolder)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgJunitRulesTemporaryFolder")
