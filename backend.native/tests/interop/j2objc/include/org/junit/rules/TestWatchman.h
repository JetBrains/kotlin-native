//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/junit/build_result/java/org/junit/rules/TestWatchman.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJunitRulesTestWatchman")
#ifdef RESTRICT_OrgJunitRulesTestWatchman
#define INCLUDE_ALL_OrgJunitRulesTestWatchman 0
#else
#define INCLUDE_ALL_OrgJunitRulesTestWatchman 1
#endif
#undef RESTRICT_OrgJunitRulesTestWatchman

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgJunitRulesTestWatchman_) && (INCLUDE_ALL_OrgJunitRulesTestWatchman || defined(INCLUDE_OrgJunitRulesTestWatchman))
#define OrgJunitRulesTestWatchman_

#define RESTRICT_OrgJunitRulesMethodRule 1
#define INCLUDE_OrgJunitRulesMethodRule 1
#include "org/junit/rules/MethodRule.h"

@class JavaLangThrowable;
@class OrgJunitRunnersModelFrameworkMethod;
@class OrgJunitRunnersModelStatement;

/*!
 @brief TestWatchman is a base class for Rules that take note of the testing
  action, without modifying it.For example, this class will keep a log of each
  passing and failing test: 
 @code

  public static class WatchmanTest {
   private static String watchedLog;  
  &#064;Rule
   public MethodRule watchman= new TestWatchman() {
            &#064;Override
       public void failed(Throwable e, FrameworkMethod method) {
           watchedLog+= method.getName() + &quot; &quot; + e.getClass().getSimpleName()
                   + &quot;\n&quot;;
          }      
      &#064;Override
       public void succeeded(FrameworkMethod method) {
           watchedLog+= method.getName() + &quot; &quot; + &quot;success!
 \n&quot;;
          }
      };  
  &#064;Test
   public void fails() {
       fail();
      }  
  &#064;Test
   public void succeeds() {
      }    }    
  
@endcode
 @since 4.7
 */
__attribute__((deprecated))
@interface OrgJunitRulesTestWatchman : NSObject < OrgJunitRulesMethodRule >

#pragma mark Public

- (instancetype __nonnull)init;

- (OrgJunitRunnersModelStatement *)applyWithOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)base
                                  withOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)method
                                                                   withId:(id)target;

/*!
 @brief Invoked when a test method fails
 */
- (void)failedWithJavaLangThrowable:(JavaLangThrowable *)e
withOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)method;

/*!
 @brief Invoked when a test method finishes (whether passing or failing)
 */
- (void)finishedWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)method;

/*!
 @brief Invoked when a test method is about to start
 */
- (void)startingWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)method;

/*!
 @brief Invoked when a test method succeeds
 */
- (void)succeededWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)method;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJunitRulesTestWatchman)

FOUNDATION_EXPORT void OrgJunitRulesTestWatchman_init(OrgJunitRulesTestWatchman *self);

FOUNDATION_EXPORT OrgJunitRulesTestWatchman *new_OrgJunitRulesTestWatchman_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJunitRulesTestWatchman *create_OrgJunitRulesTestWatchman_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgJunitRulesTestWatchman)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgJunitRulesTestWatchman")
