//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/junit/build_result/java/org/junit/Assert.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJunitAssert")
#ifdef RESTRICT_OrgJunitAssert
#define INCLUDE_ALL_OrgJunitAssert 0
#else
#define INCLUDE_ALL_OrgJunitAssert 1
#endif
#undef RESTRICT_OrgJunitAssert

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgJunitAssert_) && (INCLUDE_ALL_OrgJunitAssert || defined(INCLUDE_OrgJunitAssert))
#define OrgJunitAssert_

@class IOSByteArray;
@class IOSCharArray;
@class IOSDoubleArray;
@class IOSFloatArray;
@class IOSIntArray;
@class IOSLongArray;
@class IOSObjectArray;
@class IOSShortArray;
@protocol OrgHamcrestMatcher;

/*!
 @brief A set of assertion methods useful for writing tests.Only failed assertions
  are recorded.
 These methods can be used directly: 
 <code>Assert.assertEquals(...)</code>, however, they read better if they
  are referenced through static import:<br>
  
 @code

  import static org.junit.Assert.*;
     ...
     assertEquals(...); 
  
@endcode
 - seealso: AssertionError
 @since 4.0
 */
@interface OrgJunitAssert : NSObject

#pragma mark Public

/*!
 @brief Asserts that two byte arrays are equal.If they are not, an 
 <code>AssertionError</code> is thrown.
 @param expecteds byte array with expected values.
 @param actuals byte array with actual values
 */
+ (void)assertArrayEqualsWithByteArray:(IOSByteArray *)expecteds
                         withByteArray:(IOSByteArray *)actuals;

/*!
 @brief Asserts that two char arrays are equal.If they are not, an 
 <code>AssertionError</code> is thrown.
 @param expecteds char array with expected values.
 @param actuals char array with actual values
 */
+ (void)assertArrayEqualsWithCharArray:(IOSCharArray *)expecteds
                         withCharArray:(IOSCharArray *)actuals;

/*!
 @brief Asserts that two double arrays are equal.If they are not, an 
 <code>AssertionError</code> is thrown.
 @param expecteds double array with expected values.
 @param actuals double array with actual values
 */
+ (void)assertArrayEqualsWithDoubleArray:(IOSDoubleArray *)expecteds
                         withDoubleArray:(IOSDoubleArray *)actuals
                              withDouble:(jdouble)delta;

/*!
 @brief Asserts that two float arrays are equal.If they are not, an 
 <code>AssertionError</code> is thrown.
 @param expecteds float array with expected values.
 @param actuals float array with actual values
 */
+ (void)assertArrayEqualsWithFloatArray:(IOSFloatArray *)expecteds
                         withFloatArray:(IOSFloatArray *)actuals
                              withFloat:(jfloat)delta;

/*!
 @brief Asserts that two int arrays are equal.If they are not, an 
 <code>AssertionError</code> is thrown.
 @param expecteds int array with expected values.
 @param actuals int array with actual values
 */
+ (void)assertArrayEqualsWithIntArray:(IOSIntArray *)expecteds
                         withIntArray:(IOSIntArray *)actuals;

/*!
 @brief Asserts that two long arrays are equal.If they are not, an 
 <code>AssertionError</code> is thrown.
 @param expecteds long array with expected values.
 @param actuals long array with actual values
 */
+ (void)assertArrayEqualsWithLongArray:(IOSLongArray *)expecteds
                         withLongArray:(IOSLongArray *)actuals;

/*!
 @brief Asserts that two object arrays are equal.If they are not, an 
 <code>AssertionError</code> is thrown.
 If <code>expected</code> and 
 <code>actual</code> are <code>null</code>, they are considered
  equal.
 @param expecteds Object array or array of arrays (multi-dimensional array) with  expected values
 @param actuals Object array or array of arrays (multi-dimensional array) with  actual values
 */
+ (void)assertArrayEqualsWithNSObjectArray:(IOSObjectArray *)expecteds
                         withNSObjectArray:(IOSObjectArray *)actuals;

/*!
 @brief Asserts that two short arrays are equal.If they are not, an 
 <code>AssertionError</code> is thrown.
 @param expecteds short array with expected values.
 @param actuals short array with actual values
 */
+ (void)assertArrayEqualsWithShortArray:(IOSShortArray *)expecteds
                         withShortArray:(IOSShortArray *)actuals;

/*!
 @brief Asserts that two byte arrays are equal.If they are not, an 
 <code>AssertionError</code> is thrown with the given message.
 @param message the identifying message for the <code>AssertionError</code>  ( <code> null </code>
   okay)
 @param expecteds byte array with expected values.
 @param actuals byte array with actual values
 */
+ (void)assertArrayEqualsWithNSString:(NSString *)message
                        withByteArray:(IOSByteArray *)expecteds
                        withByteArray:(IOSByteArray *)actuals;

/*!
 @brief Asserts that two char arrays are equal.If they are not, an 
 <code>AssertionError</code> is thrown with the given message.
 @param message the identifying message for the <code>AssertionError</code>  ( <code> null </code>
   okay)
 @param expecteds char array with expected values.
 @param actuals char array with actual values
 */
+ (void)assertArrayEqualsWithNSString:(NSString *)message
                        withCharArray:(IOSCharArray *)expecteds
                        withCharArray:(IOSCharArray *)actuals;

/*!
 @brief Asserts that two double arrays are equal.If they are not, an 
 <code>AssertionError</code> is thrown with the given message.
 @param message the identifying message for the <code>AssertionError</code>  ( <code> null </code>
   okay)
 @param expecteds double array with expected values.
 @param actuals double array with actual values
 */
+ (void)assertArrayEqualsWithNSString:(NSString *)message
                      withDoubleArray:(IOSDoubleArray *)expecteds
                      withDoubleArray:(IOSDoubleArray *)actuals
                           withDouble:(jdouble)delta;

/*!
 @brief Asserts that two float arrays are equal.If they are not, an 
 <code>AssertionError</code> is thrown with the given message.
 @param message the identifying message for the <code>AssertionError</code>  ( <code> null </code>
   okay)
 @param expecteds float array with expected values.
 @param actuals float array with actual values
 */
+ (void)assertArrayEqualsWithNSString:(NSString *)message
                       withFloatArray:(IOSFloatArray *)expecteds
                       withFloatArray:(IOSFloatArray *)actuals
                            withFloat:(jfloat)delta;

/*!
 @brief Asserts that two int arrays are equal.If they are not, an 
 <code>AssertionError</code> is thrown with the given message.
 @param message the identifying message for the <code>AssertionError</code>  ( <code> null </code>
   okay)
 @param expecteds int array with expected values.
 @param actuals int array with actual values
 */
+ (void)assertArrayEqualsWithNSString:(NSString *)message
                         withIntArray:(IOSIntArray *)expecteds
                         withIntArray:(IOSIntArray *)actuals;

/*!
 @brief Asserts that two long arrays are equal.If they are not, an 
 <code>AssertionError</code> is thrown with the given message.
 @param message the identifying message for the <code>AssertionError</code>  ( <code> null </code>
   okay)
 @param expecteds long array with expected values.
 @param actuals long array with actual values
 */
+ (void)assertArrayEqualsWithNSString:(NSString *)message
                        withLongArray:(IOSLongArray *)expecteds
                        withLongArray:(IOSLongArray *)actuals;

/*!
 @brief Asserts that two object arrays are equal.If they are not, an 
 <code>AssertionError</code> is thrown with the given message.
 If 
 <code>expecteds</code> and <code>actuals</code> are <code>null</code>,
  they are considered equal.
 @param message the identifying message for the <code>AssertionError</code>  ( <code> null </code>
   okay)
 @param expecteds Object array or array of arrays (multi-dimensional array) with  expected values.
 @param actuals Object array or array of arrays (multi-dimensional array) with  actual values
 */
+ (void)assertArrayEqualsWithNSString:(NSString *)message
                    withNSObjectArray:(IOSObjectArray *)expecteds
                    withNSObjectArray:(IOSObjectArray *)actuals;

/*!
 @brief Asserts that two short arrays are equal.If they are not, an 
 <code>AssertionError</code> is thrown with the given message.
 @param message the identifying message for the <code>AssertionError</code>  ( <code> null </code>
   okay)
 @param expecteds short array with expected values.
 @param actuals short array with actual values
 */
+ (void)assertArrayEqualsWithNSString:(NSString *)message
                       withShortArray:(IOSShortArray *)expecteds
                       withShortArray:(IOSShortArray *)actuals;

/*!
 */
+ (void)assertEqualsWithDouble:(jdouble)expected
                    withDouble:(jdouble)actual __attribute__((deprecated));

/*!
 @brief Asserts that two doubles are equal to within a positive delta.
 If they are not, an <code>AssertionError</code> is thrown. If the expected
  value is infinity then the delta value is ignored.NaNs are considered
  equal: <code>assertEquals(Double.NaN, Double.NaN, *)</code> passes
 @param expected expected value
 @param actual the value to check against  <code> expected </code>
 @param delta the maximum delta between  <code> expected </code>  and
    <code> actual </code>  for which both numbers are still
   considered equal.
 */
+ (void)assertEqualsWithDouble:(jdouble)expected
                    withDouble:(jdouble)actual
                    withDouble:(jdouble)delta;

/*!
 @brief Asserts that two floats are equal to within a positive delta.
 If they are not, an <code>AssertionError</code> is thrown. If the expected
  value is infinity then the delta value is ignored. NaNs are considered
  equal: <code>assertEquals(Float.NaN, Float.NaN, *)</code> passes
 @param expected expected value
 @param actual the value to check against  <code> expected </code>
 @param delta the maximum delta between  <code> expected </code>  and
    <code> actual </code>  for which both numbers are still
   considered equal.
 */
+ (void)assertEqualsWithFloat:(jfloat)expected
                    withFloat:(jfloat)actual
                    withFloat:(jfloat)delta;

/*!
 @brief Asserts that two longs are equal.If they are not, an 
 <code>AssertionError</code> is thrown.
 @param expected expected long value.
 @param actual actual long value
 */
+ (void)assertEqualsWithLong:(jlong)expected
                    withLong:(jlong)actual;

/*!
 @brief Asserts that two objects are equal.If they are not, an 
 <code>AssertionError</code> without a message is thrown.
 If 
 <code>expected</code> and <code>actual</code> are <code>null</code>,
  they are considered equal.
 @param expected expected value
 @param actual the value to check against  <code> expected </code>
 */
+ (void)assertEqualsWithId:(id)expected
                    withId:(id)actual;

/*!
 @brief Asserts that two object arrays are equal.If they are not, an 
 <code>AssertionError</code> is thrown.
 If <code>expected</code> and 
 <code>actual</code> are <code>null</code>, they are considered
  equal.
 @param expecteds Object array or array of arrays (multi-dimensional array) with  expected values
 @param actuals Object array or array of arrays (multi-dimensional array) with  actual values
 */
+ (void)assertEqualsWithNSObjectArray:(IOSObjectArray *)expecteds
                    withNSObjectArray:(IOSObjectArray *)actuals __attribute__((deprecated));

/*!
 */
+ (void)assertEqualsWithNSString:(NSString *)message
                      withDouble:(jdouble)expected
                      withDouble:(jdouble)actual __attribute__((deprecated));

/*!
 @brief Asserts that two doubles are equal to within a positive delta.
 If they are not, an <code>AssertionError</code> is thrown with the given
  message. If the expected value is infinity then the delta value is
  ignored. NaNs are considered equal: 
 <code>assertEquals(Double.NaN, Double.NaN, *)</code> passes
 @param message the identifying message for the <code>AssertionError</code>  ( <code> null </code>
   okay)
 @param expected expected value
 @param actual the value to check against  <code> expected </code>
 @param delta the maximum delta between  <code> expected </code>  and
    <code> actual </code>  for which both numbers are still
   considered equal.
 */
+ (void)assertEqualsWithNSString:(NSString *)message
                      withDouble:(jdouble)expected
                      withDouble:(jdouble)actual
                      withDouble:(jdouble)delta;

/*!
 @brief Asserts that two floats are equal to within a positive delta.
 If they are not, an <code>AssertionError</code> is thrown with the given
  message. If the expected value is infinity then the delta value is
  ignored. NaNs are considered equal: 
 <code>assertEquals(Float.NaN, Float.NaN, *)</code> passes
 @param message the identifying message for the <code>AssertionError</code>  ( <code> null </code>
   okay)
 @param expected expected value
 @param actual the value to check against  <code> expected </code>
 @param delta the maximum delta between  <code> expected </code>  and
    <code> actual </code>  for which both numbers are still
   considered equal.
 */
+ (void)assertEqualsWithNSString:(NSString *)message
                       withFloat:(jfloat)expected
                       withFloat:(jfloat)actual
                       withFloat:(jfloat)delta;

/*!
 @brief Asserts that two longs are equal.If they are not, an 
 <code>AssertionError</code> is thrown with the given message.
 @param message the identifying message for the <code>AssertionError</code>  ( <code> null </code>
   okay)
 @param expected long expected value.
 @param actual long actual value
 */
+ (void)assertEqualsWithNSString:(NSString *)message
                        withLong:(jlong)expected
                        withLong:(jlong)actual;

/*!
 @brief Asserts that two objects are equal.If they are not, an 
 <code>AssertionError</code> is thrown with the given message.
 If 
 <code>expected</code> and <code>actual</code> are <code>null</code>,
  they are considered equal.
 @param message the identifying message for the <code>AssertionError</code>  ( <code> null </code>
   okay)
 @param expected expected value
 @param actual actual value
 */
+ (void)assertEqualsWithNSString:(NSString *)message
                          withId:(id)expected
                          withId:(id)actual;

/*!
 @brief Asserts that two object arrays are equal.If they are not, an 
 <code>AssertionError</code> is thrown with the given message.
 If 
 <code>expecteds</code> and <code>actuals</code> are <code>null</code>,
  they are considered equal.
 @param message the identifying message for the <code>AssertionError</code>  ( <code> null </code>
   okay)
 @param expecteds Object array or array of arrays (multi-dimensional array) with  expected values.
 @param actuals Object array or array of arrays (multi-dimensional array) with  actual values
 */
+ (void)assertEqualsWithNSString:(NSString *)message
               withNSObjectArray:(IOSObjectArray *)expecteds
               withNSObjectArray:(IOSObjectArray *)actuals __attribute__((deprecated));

/*!
 @brief Asserts that a condition is false.If it isn't it throws an 
 <code>AssertionError</code> without a message.
 @param condition condition to be checked
 */
+ (void)assertFalseWithBoolean:(jboolean)condition;

/*!
 @brief Asserts that a condition is false.If it isn't it throws an 
 <code>AssertionError</code> with the given message.
 @param message the identifying message for the <code>AssertionError</code>  ( <code> null </code>
   okay)
 @param condition condition to be checked
 */
+ (void)assertFalseWithNSString:(NSString *)message
                    withBoolean:(jboolean)condition;

/*!
 @brief Asserts that two doubles or floats are <b>not</b> equal to within a positive delta.
 If they are, an <code>AssertionError</code> is thrown. If the expected
  value is infinity then the delta value is ignored.NaNs are considered
  equal: <code>assertNotEquals(Double.NaN, Double.NaN, *)</code> fails
 @param first first value to check
 @param second the value to check against  <code> first </code>
 @param delta the maximum delta between  <code> expected </code>  and
    <code> actual </code>  for which both numbers are still
   considered equal.
 */
+ (void)assertNotEqualsWithDouble:(jdouble)first
                       withDouble:(jdouble)second
                       withDouble:(jdouble)delta;

/*!
 @brief Asserts that two longs are <b>not</b> equals.If they are, an 
 <code>AssertionError</code> without a message is thrown.
 @param first first value to check
 @param second the value to check against  <code> first </code>
 */
+ (void)assertNotEqualsWithLong:(jlong)first
                       withLong:(jlong)second;

/*!
 @brief Asserts that two objects are <b>not</b> equals.If they are, an 
 <code>AssertionError</code> without a message is thrown.
 If 
 <code>first</code> and <code>second</code> are <code>null</code>,
  they are considered equal.
 @param first first value to check
 @param second the value to check against  <code> first </code>
 */
+ (void)assertNotEqualsWithId:(id)first
                       withId:(id)second;

/*!
 @brief Asserts that two doubles or floats are <b>not</b> equal to within a positive delta.
 If they are, an <code>AssertionError</code> is thrown with the given
  message. If the expected value is infinity then the delta value is
  ignored. NaNs are considered equal: 
 <code>assertNotEquals(Double.NaN, Double.NaN, *)</code> fails
 @param message the identifying message for the <code>AssertionError</code>  ( <code> null </code>
   okay)
 @param first first value to check
 @param second the value to check against  <code> first </code>
 @param delta the maximum delta between  <code> expected </code>  and
    <code> actual </code>  for which both numbers are still
   considered equal.
 */
+ (void)assertNotEqualsWithNSString:(NSString *)message
                         withDouble:(jdouble)first
                         withDouble:(jdouble)second
                         withDouble:(jdouble)delta;

/*!
 @brief Asserts that two longs are <b>not</b> equals.If they are, an 
 <code>AssertionError</code> is thrown with the given message.
 @param message the identifying message for the <code>AssertionError</code>  ( <code> null </code>
   okay)
 @param first first value to check
 @param second the value to check against  <code> first </code>
 */
+ (void)assertNotEqualsWithNSString:(NSString *)message
                           withLong:(jlong)first
                           withLong:(jlong)second;

/*!
 @brief Asserts that two objects are <b>not</b> equals.If they are, an 
 <code>AssertionError</code> is thrown with the given message.
 If 
 <code>first</code> and <code>second</code> are <code>null</code>,
  they are considered equal.
 @param message the identifying message for the <code>AssertionError</code>  ( <code> null </code>
   okay)
 @param first first value to check
 @param second the value to check against  <code> first </code>
 */
+ (void)assertNotEqualsWithNSString:(NSString *)message
                             withId:(id)first
                             withId:(id)second;

/*!
 @brief Asserts that an object isn't null.If it is an <code>AssertionError</code> is
  thrown.
 @param object Object to check or  <code> null </code>
 */
+ (void)assertNotNullWithId:(id)object;

/*!
 @brief Asserts that an object isn't null.If it is an <code>AssertionError</code> is
  thrown with the given message.
 @param message the identifying message for the <code>AssertionError</code>  ( <code> null </code>
   okay)
 @param object Object to check or  <code> null </code>
 */
+ (void)assertNotNullWithNSString:(NSString *)message
                           withId:(id)object;

/*!
 @brief Asserts that two objects do not refer to the same object.If they do
  refer to the same object, an <code>AssertionError</code> without a message is
  thrown.
 @param unexpected the object you don't expect
 @param actual the object to compare to  <code> unexpected </code>
 */
+ (void)assertNotSameWithId:(id)unexpected
                     withId:(id)actual;

/*!
 @brief Asserts that two objects do not refer to the same object.If they do
  refer to the same object, an <code>AssertionError</code> is thrown with the
  given message.
 @param message the identifying message for the <code>AssertionError</code>  ( <code> null </code>
   okay)
 @param unexpected the object you don't expect
 @param actual the object to compare to  <code> unexpected </code>
 */
+ (void)assertNotSameWithNSString:(NSString *)message
                           withId:(id)unexpected
                           withId:(id)actual;

/*!
 @brief Asserts that an object is null.If it isn't an <code>AssertionError</code> is
  thrown.
 @param object Object to check or  <code> null </code>
 */
+ (void)assertNullWithId:(id)object;

/*!
 @brief Asserts that an object is null.If it is not, an <code>AssertionError</code>
  is thrown with the given message.
 @param message the identifying message for the <code>AssertionError</code>  ( <code> null </code>
   okay)
 @param object Object to check or  <code> null </code>
 */
+ (void)assertNullWithNSString:(NSString *)message
                        withId:(id)object;

/*!
 @brief Asserts that two objects refer to the same object.If they are not the
  same, an <code>AssertionError</code> without a message is thrown.
 @param expected the expected object
 @param actual the object to compare to  <code> expected </code>
 */
+ (void)assertSameWithId:(id)expected
                  withId:(id)actual;

/*!
 @brief Asserts that two objects refer to the same object.If they are not, an 
 <code>AssertionError</code> is thrown with the given message.
 @param message the identifying message for the <code>AssertionError</code>  ( <code> null </code>
   okay)
 @param expected the expected object
 @param actual the object to compare to  <code> expected </code>
 */
+ (void)assertSameWithNSString:(NSString *)message
                        withId:(id)expected
                        withId:(id)actual;

/*!
 @brief Asserts that <code>actual</code> satisfies the condition specified by 
 <code>matcher</code>.If not, an <code>AssertionError</code> is thrown with
  the reason and information about the matcher and failing value.
 Example: 
 @code

    assertThat(&quot;Help! Integers don't work&quot;, 0, is(1)); // fails:
      // failure message:
      // Help! Integers don't work
      // expected: is &lt;1&gt;
      // got value: &lt;0&gt;
    assertThat(&quot;Zero is one&quot;, 0, is(not(1))) // passes 
  
@endcode
  
 <code>org.hamcrest.Matcher</code> does not currently document the meaning
  of its type parameter <code>T</code>.  This method assumes that a matcher
  typed as <code>Matcher&lt;T&gt;</code> can be meaningfully applied only
  to values that could be assigned to a variable of type <code>T</code>.
 @param reason additional information about the error
 @param actual the computed value being compared
 @param matcher an expression, built of <code>Matcher</code> s, specifying allowed
   values
 - seealso: org.hamcrest.CoreMatchers
 - seealso: org.hamcrest.MatcherAssert
 */
+ (void)assertThatWithNSString:(NSString *)reason
                        withId:(id)actual
        withOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher;

/*!
 @brief Asserts that <code>actual</code> satisfies the condition specified by 
 <code>matcher</code>.If not, an <code>AssertionError</code> is thrown with
  information about the matcher and failing value.
 Example: 
 @code

    assertThat(0, is(1)); // fails:
      // failure message:
      // expected: is &lt;1&gt;
      // got value: &lt;0&gt;
    assertThat(0, is(not(1))) // passes 
  
@endcode
  
 <code>org.hamcrest.Matcher</code> does not currently document the meaning
  of its type parameter <code>T</code>.  This method assumes that a matcher
  typed as <code>Matcher&lt;T&gt;</code> can be meaningfully applied only
  to values that could be assigned to a variable of type <code>T</code>.
 @param actual the computed value being compared
 @param matcher an expression, built of <code>Matcher</code> s, specifying allowed
   values
 - seealso: org.hamcrest.CoreMatchers
 - seealso: org.hamcrest.MatcherAssert
 */
+ (void)assertThatWithId:(id)actual
  withOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher;

/*!
 @brief Asserts that a condition is true.If it isn't it throws an 
 <code>AssertionError</code> without a message.
 @param condition condition to be checked
 */
+ (void)assertTrueWithBoolean:(jboolean)condition;

/*!
 @brief Asserts that a condition is true.If it isn't it throws an 
 <code>AssertionError</code> with the given message.
 @param message the identifying message for the <code>AssertionError</code>  ( <code> null </code>
   okay)
 @param condition condition to be checked
 */
+ (void)assertTrueWithNSString:(NSString *)message
                   withBoolean:(jboolean)condition;

/*!
 @brief Fails a test with no message.
 */
+ (void)fail;

/*!
 @brief Fails a test with the given message.
 @param message the identifying message for the <code>AssertionError</code>  ( <code> null </code>
   okay)
 - seealso: AssertionError
 */
+ (void)failWithNSString:(NSString *)message;

#pragma mark Protected

/*!
 @brief Protect constructor since it is a static only class
 */
- (instancetype __nonnull)init;

#pragma mark Package-Private

+ (NSString *)formatWithNSString:(NSString *)message
                          withId:(id)expected
                          withId:(id)actual;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJunitAssert)

FOUNDATION_EXPORT void OrgJunitAssert_init(OrgJunitAssert *self);

FOUNDATION_EXPORT OrgJunitAssert *new_OrgJunitAssert_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJunitAssert *create_OrgJunitAssert_init(void);

FOUNDATION_EXPORT void OrgJunitAssert_assertTrueWithNSString_withBoolean_(NSString *message, jboolean condition);

FOUNDATION_EXPORT void OrgJunitAssert_assertTrueWithBoolean_(jboolean condition);

FOUNDATION_EXPORT void OrgJunitAssert_assertFalseWithNSString_withBoolean_(NSString *message, jboolean condition);

FOUNDATION_EXPORT void OrgJunitAssert_assertFalseWithBoolean_(jboolean condition);

FOUNDATION_EXPORT void OrgJunitAssert_failWithNSString_(NSString *message);

FOUNDATION_EXPORT void OrgJunitAssert_fail(void);

FOUNDATION_EXPORT void OrgJunitAssert_assertEqualsWithNSString_withId_withId_(NSString *message, id expected, id actual);

FOUNDATION_EXPORT void OrgJunitAssert_assertEqualsWithId_withId_(id expected, id actual);

FOUNDATION_EXPORT void OrgJunitAssert_assertNotEqualsWithNSString_withId_withId_(NSString *message, id first, id second);

FOUNDATION_EXPORT void OrgJunitAssert_assertNotEqualsWithId_withId_(id first, id second);

FOUNDATION_EXPORT void OrgJunitAssert_assertNotEqualsWithNSString_withLong_withLong_(NSString *message, jlong first, jlong second);

FOUNDATION_EXPORT void OrgJunitAssert_assertNotEqualsWithLong_withLong_(jlong first, jlong second);

FOUNDATION_EXPORT void OrgJunitAssert_assertNotEqualsWithNSString_withDouble_withDouble_withDouble_(NSString *message, jdouble first, jdouble second, jdouble delta);

FOUNDATION_EXPORT void OrgJunitAssert_assertNotEqualsWithDouble_withDouble_withDouble_(jdouble first, jdouble second, jdouble delta);

FOUNDATION_EXPORT void OrgJunitAssert_assertArrayEqualsWithNSString_withNSObjectArray_withNSObjectArray_(NSString *message, IOSObjectArray *expecteds, IOSObjectArray *actuals);

FOUNDATION_EXPORT void OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_(IOSObjectArray *expecteds, IOSObjectArray *actuals);

FOUNDATION_EXPORT void OrgJunitAssert_assertArrayEqualsWithNSString_withByteArray_withByteArray_(NSString *message, IOSByteArray *expecteds, IOSByteArray *actuals);

FOUNDATION_EXPORT void OrgJunitAssert_assertArrayEqualsWithByteArray_withByteArray_(IOSByteArray *expecteds, IOSByteArray *actuals);

FOUNDATION_EXPORT void OrgJunitAssert_assertArrayEqualsWithNSString_withCharArray_withCharArray_(NSString *message, IOSCharArray *expecteds, IOSCharArray *actuals);

FOUNDATION_EXPORT void OrgJunitAssert_assertArrayEqualsWithCharArray_withCharArray_(IOSCharArray *expecteds, IOSCharArray *actuals);

FOUNDATION_EXPORT void OrgJunitAssert_assertArrayEqualsWithNSString_withShortArray_withShortArray_(NSString *message, IOSShortArray *expecteds, IOSShortArray *actuals);

FOUNDATION_EXPORT void OrgJunitAssert_assertArrayEqualsWithShortArray_withShortArray_(IOSShortArray *expecteds, IOSShortArray *actuals);

FOUNDATION_EXPORT void OrgJunitAssert_assertArrayEqualsWithNSString_withIntArray_withIntArray_(NSString *message, IOSIntArray *expecteds, IOSIntArray *actuals);

FOUNDATION_EXPORT void OrgJunitAssert_assertArrayEqualsWithIntArray_withIntArray_(IOSIntArray *expecteds, IOSIntArray *actuals);

FOUNDATION_EXPORT void OrgJunitAssert_assertArrayEqualsWithNSString_withLongArray_withLongArray_(NSString *message, IOSLongArray *expecteds, IOSLongArray *actuals);

FOUNDATION_EXPORT void OrgJunitAssert_assertArrayEqualsWithLongArray_withLongArray_(IOSLongArray *expecteds, IOSLongArray *actuals);

FOUNDATION_EXPORT void OrgJunitAssert_assertArrayEqualsWithNSString_withDoubleArray_withDoubleArray_withDouble_(NSString *message, IOSDoubleArray *expecteds, IOSDoubleArray *actuals, jdouble delta);

FOUNDATION_EXPORT void OrgJunitAssert_assertArrayEqualsWithDoubleArray_withDoubleArray_withDouble_(IOSDoubleArray *expecteds, IOSDoubleArray *actuals, jdouble delta);

FOUNDATION_EXPORT void OrgJunitAssert_assertArrayEqualsWithNSString_withFloatArray_withFloatArray_withFloat_(NSString *message, IOSFloatArray *expecteds, IOSFloatArray *actuals, jfloat delta);

FOUNDATION_EXPORT void OrgJunitAssert_assertArrayEqualsWithFloatArray_withFloatArray_withFloat_(IOSFloatArray *expecteds, IOSFloatArray *actuals, jfloat delta);

FOUNDATION_EXPORT void OrgJunitAssert_assertEqualsWithNSString_withDouble_withDouble_withDouble_(NSString *message, jdouble expected, jdouble actual, jdouble delta);

FOUNDATION_EXPORT void OrgJunitAssert_assertEqualsWithNSString_withFloat_withFloat_withFloat_(NSString *message, jfloat expected, jfloat actual, jfloat delta);

FOUNDATION_EXPORT void OrgJunitAssert_assertEqualsWithLong_withLong_(jlong expected, jlong actual);

FOUNDATION_EXPORT void OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(NSString *message, jlong expected, jlong actual);

FOUNDATION_EXPORT void OrgJunitAssert_assertEqualsWithDouble_withDouble_(jdouble expected, jdouble actual);

FOUNDATION_EXPORT void OrgJunitAssert_assertEqualsWithNSString_withDouble_withDouble_(NSString *message, jdouble expected, jdouble actual);

FOUNDATION_EXPORT void OrgJunitAssert_assertEqualsWithDouble_withDouble_withDouble_(jdouble expected, jdouble actual, jdouble delta);

FOUNDATION_EXPORT void OrgJunitAssert_assertEqualsWithFloat_withFloat_withFloat_(jfloat expected, jfloat actual, jfloat delta);

FOUNDATION_EXPORT void OrgJunitAssert_assertNotNullWithNSString_withId_(NSString *message, id object);

FOUNDATION_EXPORT void OrgJunitAssert_assertNotNullWithId_(id object);

FOUNDATION_EXPORT void OrgJunitAssert_assertNullWithNSString_withId_(NSString *message, id object);

FOUNDATION_EXPORT void OrgJunitAssert_assertNullWithId_(id object);

FOUNDATION_EXPORT void OrgJunitAssert_assertSameWithNSString_withId_withId_(NSString *message, id expected, id actual);

FOUNDATION_EXPORT void OrgJunitAssert_assertSameWithId_withId_(id expected, id actual);

FOUNDATION_EXPORT void OrgJunitAssert_assertNotSameWithNSString_withId_withId_(NSString *message, id unexpected, id actual);

FOUNDATION_EXPORT void OrgJunitAssert_assertNotSameWithId_withId_(id unexpected, id actual);

FOUNDATION_EXPORT NSString *OrgJunitAssert_formatWithNSString_withId_withId_(NSString *message, id expected, id actual);

FOUNDATION_EXPORT void OrgJunitAssert_assertEqualsWithNSString_withNSObjectArray_withNSObjectArray_(NSString *message, IOSObjectArray *expecteds, IOSObjectArray *actuals);

FOUNDATION_EXPORT void OrgJunitAssert_assertEqualsWithNSObjectArray_withNSObjectArray_(IOSObjectArray *expecteds, IOSObjectArray *actuals);

FOUNDATION_EXPORT void OrgJunitAssert_assertThatWithId_withOrgHamcrestMatcher_(id actual, id<OrgHamcrestMatcher> matcher);

FOUNDATION_EXPORT void OrgJunitAssert_assertThatWithNSString_withId_withOrgHamcrestMatcher_(NSString *reason, id actual, id<OrgHamcrestMatcher> matcher);

J2OBJC_TYPE_LITERAL_HEADER(OrgJunitAssert)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgJunitAssert")
