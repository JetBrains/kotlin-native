//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/junit/build_result/java/org/junit/runners/BlockJUnit4ClassRunner.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJunitRunnersBlockJUnit4ClassRunner")
#ifdef RESTRICT_OrgJunitRunnersBlockJUnit4ClassRunner
#define INCLUDE_ALL_OrgJunitRunnersBlockJUnit4ClassRunner 0
#else
#define INCLUDE_ALL_OrgJunitRunnersBlockJUnit4ClassRunner 1
#endif
#undef RESTRICT_OrgJunitRunnersBlockJUnit4ClassRunner

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgJunitRunnersBlockJUnit4ClassRunner_) && (INCLUDE_ALL_OrgJunitRunnersBlockJUnit4ClassRunner || defined(INCLUDE_OrgJunitRunnersBlockJUnit4ClassRunner))
#define OrgJunitRunnersBlockJUnit4ClassRunner_

#define RESTRICT_OrgJunitRunnersParentRunner 1
#define INCLUDE_OrgJunitRunnersParentRunner 1
#include "org/junit/runners/ParentRunner.h"

@class IOSClass;
@class OrgJunitRunnerDescription;
@class OrgJunitRunnerNotificationRunNotifier;
@class OrgJunitRunnersModelFrameworkMethod;
@class OrgJunitRunnersModelStatement;
@protocol JavaUtilList;

/*!
 @brief Implements the JUnit 4 standard test case class model, as defined by the
  annotations in the org.junit package.Many users will never notice this
  class: it is now the default test class runner, but it should have exactly
  the same behavior as the old test class runner (<code>JUnit4ClassRunner</code>).
 BlockJUnit4ClassRunner has advantages for writers of custom JUnit runners
  that are slight changes to the default behavior, however: 
 <ul>
  <li>It has a much simpler implementation based on <code>Statement</code>s,
  allowing new operations to be inserted into the appropriate point in the
  execution flow. 
 <li>It is published, and extension and reuse are encouraged, whereas <code>JUnit4ClassRunner</code>
  was in an internal package, and is now deprecated. 
 </ul>
 @since 4.5
 */
@interface OrgJunitRunnersBlockJUnit4ClassRunner : OrgJunitRunnersParentRunner

#pragma mark Public

/*!
 @brief Creates a BlockJUnit4ClassRunner to run <code>klass</code>
 @throw InitializationErrorif the test class is malformed.
 */
- (instancetype __nonnull)initWithIOSClass:(IOSClass *)klass;

#pragma mark Protected

- (void)collectInitializationErrorsWithJavaUtilList:(id<JavaUtilList>)errors;

/*!
 @brief Returns the methods that run tests.Default implementation returns all
  methods annotated with <code>@@Test</code> on this class and superclasses that
  are not overridden.
 */
- (id<JavaUtilList>)computeTestMethods;

/*!
 @brief Returns a new fixture for running a test.Default implementation executes
  the test class's no-argument constructor (validation should have ensured
  one exists).
 */
- (id)createTest;

- (OrgJunitRunnerDescription *)describeChildWithId:(OrgJunitRunnersModelFrameworkMethod *)method;

- (id<JavaUtilList>)getChildren;

/*!
 @param target the test case instance
 @return a list of TestRules that should be applied when executing this
          test
 */
- (id<JavaUtilList>)getTestRulesWithId:(id)target;

/*!
 @brief Returns a Statement that, when executed, either returns normally if 
 <code>method</code> passes, or throws an exception if <code>method</code> fails.
 Here is an outline of the default implementation: 
 <ul>
  <li>Invoke <code>method</code> on the result of <code>createTest()</code>, and
  throw any exceptions thrown by either operation. 
 <li>HOWEVER, if <code>method</code>'s <code>@@Test</code> annotation has the <code>expecting</code>
  attribute, return normally only if the previous step threw an
  exception of the correct type, and throw an exception otherwise. 
 <li>HOWEVER, if <code>method</code>'s <code>@@Test</code> annotation has the <code>timeout</code>
  attribute, throw an exception if the previous step takes more
  than the specified number of milliseconds. 
 <li>ALWAYS run all non-overridden <code>@@Before</code> methods on this class
  and superclasses before any of the previous steps; if any throws an
  Exception, stop execution and pass the exception on. 
 <li>ALWAYS run all non-overridden <code>@@After</code> methods on this class
  and superclasses after any of the previous steps; all After methods are
  always executed: exceptions thrown by previous steps are combined, if
  necessary, with exceptions from After methods into a 
 <code>MultipleFailureException</code>.
  <li>ALWAYS allow <code>@@Rule</code> fields to modify the execution of the
  above steps. A <code>Rule</code> may prevent all execution of the above steps,
  or add additional behavior before and after, or modify thrown exceptions.
  For more information, see <code>TestRule</code>
  </ul>
  This can be overridden in subclasses, either by overriding this method,
  or the implementations creating each sub-statement.
 */
- (OrgJunitRunnersModelStatement *)methodBlockWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)method;

/*!
 @brief Returns a <code>Statement</code> that invokes <code>method</code> on <code>test</code>
 */
- (OrgJunitRunnersModelStatement *)methodInvokerWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)method
                                                                                 withId:(id)test;

/*!
 @brief Returns a <code>Statement</code>: if <code>method</code>'s <code>@@Test</code> annotation
  has the <code>expecting</code> attribute, return normally only if <code>next</code>
  throws an exception of the correct type, and throw an exception
  otherwise.
 */
- (OrgJunitRunnersModelStatement *)possiblyExpectingExceptionsWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)method
                                                                                               withId:(id)test
                                                                    withOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)next __attribute__((deprecated));

/*!
 @param target the test case instance
 @return a list of MethodRules that should be applied when executing this
          test
 */
- (id<JavaUtilList>)rulesWithId:(id)target;

- (void)runChildWithId:(OrgJunitRunnersModelFrameworkMethod *)method
withOrgJunitRunnerNotificationRunNotifier:(OrgJunitRunnerNotificationRunNotifier *)notifier;

/*!
 @brief Returns the name that describes <code>method</code> for <code>Description</code>s.
 Default implementation is the method's name
 */
- (NSString *)testNameWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)method;

/*!
 @brief Adds to <code>errors</code> if the test class has more than one constructor,
  or if the constructor takes parameters.Override if a subclass requires
  different validation rules.
 */
- (void)validateConstructorWithJavaUtilList:(id<JavaUtilList>)errors;

- (void)validateFieldsWithJavaUtilList:(id<JavaUtilList>)errors;

/*!
 @brief Adds to <code>errors</code> for each method annotated with <code>@@Test</code>,
  <code>@@Before</code>, or <code>@@After</code> that is not a public, void instance
  method with no arguments.
 */
- (void)validateInstanceMethodsWithJavaUtilList:(id<JavaUtilList>)errors __attribute__((deprecated));

- (void)validateNoNonStaticInnerClassWithJavaUtilList:(id<JavaUtilList>)errors;

/*!
 @brief Adds to <code>errors</code> if the test class has more than one constructor
  (do not override)
 */
- (void)validateOnlyOneConstructorWithJavaUtilList:(id<JavaUtilList>)errors;

/*!
 @brief Adds to <code>errors</code> for each method annotated with <code>@@Test</code>that
  is not a public, void instance method with no arguments.
 */
- (void)validateTestMethodsWithJavaUtilList:(id<JavaUtilList>)errors;

/*!
 @brief Adds to <code>errors</code> if the test class's single constructor takes
  parameters (do not override)
 */
- (void)validateZeroArgConstructorWithJavaUtilList:(id<JavaUtilList>)errors;

/*!
 @brief Returns a <code>Statement</code>: run all non-overridden <code>@@After</code>
  methods on this class and superclasses before running <code>next</code>; all
  After methods are always executed: exceptions thrown by previous steps
  are combined, if necessary, with exceptions from After methods into a 
 <code>MultipleFailureException</code>.
 */
- (OrgJunitRunnersModelStatement *)withAftersWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)method
                                                                              withId:(id)target
                                                   withOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)statement __attribute__((deprecated));

/*!
 @brief Returns a <code>Statement</code>: run all non-overridden <code>@@Before</code>
  methods on this class and superclasses before running <code>next</code>; if
  any throws an Exception, stop execution and pass the exception on.
 */
- (OrgJunitRunnersModelStatement *)withBeforesWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)method
                                                                               withId:(id)target
                                                    withOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)statement __attribute__((deprecated));

/*!
 @brief Returns a <code>Statement</code>: if <code>method</code>'s <code>@@Test</code> annotation
  has the <code>timeout</code> attribute, throw an exception if <code>next</code>
  takes more than the specified number of milliseconds.
 */
- (OrgJunitRunnersModelStatement *)withPotentialTimeoutWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)method
                                                                                        withId:(id)test
                                                             withOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)next __attribute__((deprecated));

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJunitRunnersBlockJUnit4ClassRunner)

FOUNDATION_EXPORT void OrgJunitRunnersBlockJUnit4ClassRunner_initWithIOSClass_(OrgJunitRunnersBlockJUnit4ClassRunner *self, IOSClass *klass);

FOUNDATION_EXPORT OrgJunitRunnersBlockJUnit4ClassRunner *new_OrgJunitRunnersBlockJUnit4ClassRunner_initWithIOSClass_(IOSClass *klass) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJunitRunnersBlockJUnit4ClassRunner *create_OrgJunitRunnersBlockJUnit4ClassRunner_initWithIOSClass_(IOSClass *klass);

J2OBJC_TYPE_LITERAL_HEADER(OrgJunitRunnersBlockJUnit4ClassRunner)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgJunitRunnersBlockJUnit4ClassRunner")
