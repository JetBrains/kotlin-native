//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/collect/TreeMultimap.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCollectTreeMultimap")
#ifdef RESTRICT_ComGoogleCommonCollectTreeMultimap
#define INCLUDE_ALL_ComGoogleCommonCollectTreeMultimap 0
#else
#define INCLUDE_ALL_ComGoogleCommonCollectTreeMultimap 1
#endif
#undef RESTRICT_ComGoogleCommonCollectTreeMultimap

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCollectTreeMultimap_) && (INCLUDE_ALL_ComGoogleCommonCollectTreeMultimap || defined(INCLUDE_ComGoogleCommonCollectTreeMultimap))
#define ComGoogleCommonCollectTreeMultimap_

#define RESTRICT_ComGoogleCommonCollectAbstractSortedKeySortedSetMultimap 1
#define INCLUDE_ComGoogleCommonCollectAbstractSortedKeySortedSetMultimap 1
#include "com/google/common/collect/AbstractSortedKeySortedSetMultimap.h"

@protocol ComGoogleCommonCollectMultimap;
@protocol JavaUtilCollection;
@protocol JavaUtilComparator;
@protocol JavaUtilMap;
@protocol JavaUtilNavigableMap;
@protocol JavaUtilNavigableSet;
@protocol JavaUtilSortedMap;
@protocol JavaUtilSortedSet;

/*!
 @brief Implementation of <code>Multimap</code> whose keys and values are ordered by their natural ordering or
  by supplied comparators.In all cases, this implementation uses <code>Comparable.compareTo</code> or 
 <code>Comparator.compare</code> instead of <code>Object.equals</code> to determine equivalence of
  instances.
 <p><b>Warning:</b> The comparators or comparables used must be <i>consistent with equals</i> as
  explained by the <code>Comparable</code> class specification. Otherwise, the resulting multiset will
  violate the general contract of <code>SetMultimap</code>, which it is specified in terms of <code>Object.equals</code>
 .
  
 <p>The collections returned by <code>keySet</code> and <code>asMap</code> iterate through the keys
  according to the key comparator ordering or the natural ordering of the keys. Similarly, <code>get</code>
 , <code>removeAll</code>, and <code>replaceValues</code> return collections that iterate through the
  values according to the value comparator ordering or the natural ordering of the values. The
  collections generated by <code>entries</code>, <code>keys</code>, and <code>values</code> iterate across the
  keys according to the above key ordering, and for each key they iterate across the values
  according to the value ordering. 
 <p>The multimap does not store duplicate key-value pairs. Adding a new key-value pair equal to an
  existing key-value pair has no effect. 
 <p>Null keys and values are permitted (provided, of course, that the respective comparators
  support them). All optional multimap methods are supported, and all returned views are
  modifiable. 
 <p>This class is not threadsafe when any concurrent operations update the multimap. Concurrent
  read operations will work correctly. To allow concurrent update operations, wrap your multimap
  with a call to <code>Multimaps.synchronizedSortedSetMultimap</code>.
  
 <p>See the Guava User Guide article on <a href="https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap">
  <code>Multimap</code>
 </a>.
 @author Jared Levy
 @author Louis Wasserman
 @since 2.0
 */
@interface ComGoogleCommonCollectTreeMultimap : ComGoogleCommonCollectAbstractSortedKeySortedSetMultimap

#pragma mark Public

/*!
 @brief <p>Because a <code>TreeMultimap</code> has unique sorted keys, this method returns a <code>NavigableMap</code>
 , instead of the <code>java.util.Map</code> specified in the <code>Multimap</code>
  interface.
 @since 14.0 (present with return type <code>SortedMap</code> since 2.0)
 */
- (id<JavaUtilNavigableMap>)asMap;

/*!
 @brief Creates an empty <code>TreeMultimap</code> ordered by the natural ordering of its keys and values.
 */
+ (ComGoogleCommonCollectTreeMultimap *)create;

/*!
 @brief Creates an empty <code>TreeMultimap</code> instance using explicit comparators.Neither comparator
  may be null; use <code>Ordering.natural()</code> to specify natural order.
 @param keyComparator the comparator that determines the key ordering
 @param valueComparator the comparator that determines the value ordering
 */
+ (ComGoogleCommonCollectTreeMultimap *)createWithJavaUtilComparator:(id<JavaUtilComparator> __nonnull)keyComparator
                                              withJavaUtilComparator:(id<JavaUtilComparator> __nonnull)valueComparator;

/*!
 @brief Constructs a <code>TreeMultimap</code>, ordered by the natural ordering of its keys and values, with
  the same mappings as the specified multimap.
 @param multimap the multimap whose contents are copied to this multimap
 */
+ (ComGoogleCommonCollectTreeMultimap *)createWithComGoogleCommonCollectMultimap:(id<ComGoogleCommonCollectMultimap> __nonnull)multimap;

/*!
 @since 14.0 (present with return type <code>SortedSet</code> since 2.0)
 */
- (id<JavaUtilNavigableSet>)getWithId:(id __nullable)key;

/*!
 @brief Returns the comparator that orders the multimap keys.
 */
- (id<JavaUtilComparator>)keyComparator __attribute__((deprecated));

/*!
 @brief <p>Because a <code>TreeMultimap</code> has unique sorted keys, this method returns a <code>NavigableSet</code>
 , instead of the <code>java.util.Set</code> specified in the <code>Multimap</code>
  interface.
 @since 14.0 (present with return type <code>SortedSet</code> since 2.0)
 */
- (id<JavaUtilNavigableSet>)keySet;

- (id<JavaUtilComparator>)valueComparator;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilComparator:(id<JavaUtilComparator> __nonnull)keyComparator
                              withJavaUtilComparator:(id<JavaUtilComparator> __nonnull)valueComparator;

- (id<JavaUtilMap>)createAsMap;

/*!
 @brief <p>Creates an empty <code>TreeSet</code> for a collection of values for one key.
 @return a new <code>TreeSet</code> containing a collection of values for one key
 */
- (id<JavaUtilSortedSet>)createCollection;

- (id<JavaUtilCollection>)createCollectionWithId:(id __nullable)key;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initPackagePrivateWithJavaUtilSortedMap:(id<JavaUtilSortedMap> __nonnull)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectTreeMultimap)

FOUNDATION_EXPORT ComGoogleCommonCollectTreeMultimap *ComGoogleCommonCollectTreeMultimap_create(void);

FOUNDATION_EXPORT ComGoogleCommonCollectTreeMultimap *ComGoogleCommonCollectTreeMultimap_createWithJavaUtilComparator_withJavaUtilComparator_(id<JavaUtilComparator> keyComparator, id<JavaUtilComparator> valueComparator);

FOUNDATION_EXPORT ComGoogleCommonCollectTreeMultimap *ComGoogleCommonCollectTreeMultimap_createWithComGoogleCommonCollectMultimap_(id<ComGoogleCommonCollectMultimap> multimap);

FOUNDATION_EXPORT void ComGoogleCommonCollectTreeMultimap_initWithJavaUtilComparator_withJavaUtilComparator_(ComGoogleCommonCollectTreeMultimap *self, id<JavaUtilComparator> keyComparator, id<JavaUtilComparator> valueComparator);

FOUNDATION_EXPORT ComGoogleCommonCollectTreeMultimap *new_ComGoogleCommonCollectTreeMultimap_initWithJavaUtilComparator_withJavaUtilComparator_(id<JavaUtilComparator> keyComparator, id<JavaUtilComparator> valueComparator) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectTreeMultimap *create_ComGoogleCommonCollectTreeMultimap_initWithJavaUtilComparator_withJavaUtilComparator_(id<JavaUtilComparator> keyComparator, id<JavaUtilComparator> valueComparator);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectTreeMultimap)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCollectTreeMultimap")
