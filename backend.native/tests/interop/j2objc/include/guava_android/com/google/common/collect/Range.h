//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/collect/Range.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCollectRange")
#ifdef RESTRICT_ComGoogleCommonCollectRange
#define INCLUDE_ALL_ComGoogleCommonCollectRange 0
#else
#define INCLUDE_ALL_ComGoogleCommonCollectRange 1
#endif
#undef RESTRICT_ComGoogleCommonCollectRange

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCollectRange_) && (INCLUDE_ALL_ComGoogleCommonCollectRange || defined(INCLUDE_ComGoogleCommonCollectRange))
#define ComGoogleCommonCollectRange_

#define RESTRICT_ComGoogleCommonCollectRangeGwtSerializationDependencies 1
#define INCLUDE_ComGoogleCommonCollectRangeGwtSerializationDependencies 1
#include "com/google/common/collect/RangeGwtSerializationDependencies.h"

#define RESTRICT_ComGoogleCommonBasePredicate 1
#define INCLUDE_ComGoogleCommonBasePredicate 1
#include "com/google/common/base/Predicate.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComGoogleCommonCollectBoundType;
@class ComGoogleCommonCollectCut;
@class ComGoogleCommonCollectDiscreteDomain;
@class ComGoogleCommonCollectOrdering;
@protocol ComGoogleCommonBaseFunction;
@protocol JavaLangComparable;
@protocol JavaLangIterable;

/*!
 @brief A range (or "interval") defines the <i>boundaries</i> around a contiguous span of values of some 
 <code>Comparable</code> type; for example, "integers from 1 to 100 inclusive."
 Note that it is not
  possible to <i>iterate</i> over these contained values.To do so, pass this range instance and an
  appropriate <code>DiscreteDomain</code> to <code>ContiguousSet.create</code>.
  
 <h3>Types of ranges</h3>
  
 <p>Each end of the range may be bounded or unbounded. If bounded, there is an associated 
 <i>endpoint</i> value, and the range is considered to be either <i>open</i> (does not include the
  endpoint) or <i>closed</i> (includes the endpoint) on that side. With three possibilities on each
  side, this yields nine basic types of ranges, enumerated below. (Notation: a square bracket (
 <code>[ ]</code>) indicates that the range is closed on that side; a parenthesis (<code>( )</code>) means
  it is either open or unbounded. The construct <code>{x | statement}</code> is read "the set of all 
 <i>x</i> such that <i>statement</i>.")
  
 <blockquote>
  
 <table>
  <caption>Range Types</caption>
  <tr><th>Notation        <th>Definition               <th>Factory method 
 <tr><td><code>(a..b)</code>  <td><code>{x | a < x < b}</code>  <td><code>open</code>
  <tr><td><code>[a..b]</code>  <td><code>{x | a <= x <= b}</code><td><code>closed</code>
  <tr><td><code>(a..b]</code>  <td><code>{x | a < x <= b}</code> <td><code>openClosed</code>
  <tr><td><code>[a..b)</code>  <td><code>{x | a <= x < b}</code> <td><code>closedOpen</code>
  <tr><td><code>(a..+∞)</code> <td><code>{x | x > a}</code>      <td><code>greaterThan</code>
  <tr><td><code>[a..+∞)</code> <td><code>{x | x >= a}</code>     <td><code>atLeast</code>
  <tr><td><code>(-∞..b)</code> <td><code>{x | x < b}</code>      <td><code>lessThan</code>
  <tr><td><code>(-∞..b]</code> <td><code>{x | x <= b}</code>     <td><code>atMost</code>
  <tr><td><code>(-∞..+∞)</code><td><code>{x}</code>              <td><code>all</code>
  </table>
  
 </blockquote>
  
 <p>When both endpoints exist, the upper endpoint may not be less than the lower. The endpoints
  may be equal only if at least one of the bounds is closed: 
 <ul>
    <li><code>[a..a]</code> : a singleton range
    <li><code>[a..a); (a..a]</code> : empty ranges; also valid
    <li><code>(a..a)</code> : <b>invalid</b>; an exception will be thrown 
 </ul>
  
 <h3>Warnings</h3>
  
 <ul>
    <li>Use immutable value types only, if at all possible. If you must use a mutable type, <b>do
        not</b> allow the endpoint instances to mutate after the range is created!
    <li>Your value type's comparison method should be consistent with
        equals
  if at all possible. Otherwise, be aware that concepts used throughout this
        documentation such as "equal", "same", "unique" and so on actually refer to whether <code>compareTo</code>
  returns zero, not whether <code>equals</code>
        returns <code>true</code>.
    <li>A class which implements <code>Comparable<UnrelatedType></code> is very broken, and will cause
        undefined horrible things to happen in <code>Range</code>. For now, the Range API does not
        prevent its use, because this would also rule out all ungenerified (pre-JDK1.5) data types.       
 <b>This may change in the future.</b>
  </ul>
  
 <h3>Other notes</h3>
  
 <ul>
    <li>Instances of this type are obtained using the static factory methods in this class.
    <li>Ranges are <i>convex</i>: whenever two values are contained, all values in between them
        must also be contained. More formally, for any <code>c1 <= c2 <= c3</code> of type <code>C</code>,
        <code>r.contains(c1) && r.contains(c3)</code> implies <code>r.contains(c2)</code>). This means that a
        <code>Range<Integer></code> can never be used to represent, say, "all <i>prime</i> numbers from
        1 to 100."   
 <li>When evaluated as a <code>Predicate</code>, a range yields the same result as invoking <code>contains</code>
 .
    <li>Terminology note: a range <code>a</code> is said to be the <i>maximal</i> range having property
        <i>P</i> if, for all ranges <code>b</code> also having property <i>P</i>, <code>a.encloses(b)</code>.
        Likewise, <code>a</code> is <i>minimal</i> when <code>b.encloses(a)</code> for all <code>b</code> having
        property <i>P</i>. See, for example, the definition of <code>intersection</code>.
  </ul>
  
 <h3>Further reading</h3>
  
 <p>See the Guava User Guide article on <a href="https://github.com/google/guava/wiki/RangesExplained">
 <code>Range</code></a>.
 @author Kevin Bourrillion
 @author Gregory Kick
 @since 10.0
 */
@interface ComGoogleCommonCollectRange : ComGoogleCommonCollectRangeGwtSerializationDependencies < ComGoogleCommonBasePredicate, JavaIoSerializable > {
 @public
  ComGoogleCommonCollectCut *lowerBound_;
  ComGoogleCommonCollectCut *upperBound_;
}

#pragma mark Public

/*!
 @brief Returns a range that contains every value of type <code>C</code>.
 @since 14.0
 */
+ (ComGoogleCommonCollectRange *)all;

/*!
 */
- (jboolean)applyWithId:(id<JavaLangComparable> __nonnull)input __attribute__((deprecated));

/*!
 @brief Returns a range that contains all values greater than or equal to <code>endpoint</code>.
 @since 14.0
 */
+ (ComGoogleCommonCollectRange *)atLeastWithJavaLangComparable:(id<JavaLangComparable> __nonnull)endpoint;

/*!
 @brief Returns a range that contains all values less than or equal to <code>endpoint</code>.
 @since 14.0
 */
+ (ComGoogleCommonCollectRange *)atMostWithJavaLangComparable:(id<JavaLangComparable> __nonnull)endpoint;

/*!
 @brief Returns the canonical form of this range in the given domain.The canonical form has the
  following properties: 
 <ul>
    <li>equivalence: <code>a.canonical().contains(v) == a.contains(v)</code> for all <code>v</code> (in
        other words, <code>ContiguousSet.create(a.canonical(domain), domain).equals(
        ContiguousSet.create(a, domain))</code>
    <li>uniqueness: unless <code>a.isEmpty()</code>, <code>ContiguousSet.create(a,
        domain).equals(ContiguousSet.create(b, domain))</code>
  implies <code>a.canonical(domain).equals(b.canonical(domain))</code>
    <li>idempotence: <code>a.canonical(domain).canonical(domain).equals(a.canonical(domain))</code>
  </ul>
  
 <p>Furthermore, this method guarantees that the range returned will be one of the following
  canonical forms: 
 <ul>
    <li>[start..end)
    <li>[start..+∞)
    <li>(-∞..end) (only if type <code>C</code> is unbounded below)
    <li>(-∞..+∞) (only if type <code>C</code> is unbounded below) 
 </ul>
 */
- (ComGoogleCommonCollectRange *)canonicalWithComGoogleCommonCollectDiscreteDomain:(ComGoogleCommonCollectDiscreteDomain * __nonnull)domain;

/*!
 @brief Returns a range that contains all values greater than or equal to <code>lower</code> and less than
  or equal to <code>upper</code>.
 @throw IllegalArgumentExceptionif <code>lower</code> is greater than <code>upper</code>
 @since 14.0
 */
+ (ComGoogleCommonCollectRange *)closedWithJavaLangComparable:(id<JavaLangComparable> __nonnull)lower
                                       withJavaLangComparable:(id<JavaLangComparable> __nonnull)upper;

/*!
 @brief Returns a range that contains all values greater than or equal to <code>lower</code> and strictly
  less than <code>upper</code>.
 @throw IllegalArgumentExceptionif <code>lower</code> is greater than <code>upper</code>
 @since 14.0
 */
+ (ComGoogleCommonCollectRange *)closedOpenWithJavaLangComparable:(id<JavaLangComparable> __nonnull)lower
                                           withJavaLangComparable:(id<JavaLangComparable> __nonnull)upper;

/*!
 @brief Returns <code>true</code> if <code>value</code> is within the bounds of this range.For example, on the
  range <code>[0..2)</code>, <code>contains(1)</code> returns <code>true</code>, while <code>contains(2)</code>
  returns <code>false</code>.
 */
- (jboolean)containsWithJavaLangComparable:(id<JavaLangComparable> __nonnull)value;

/*!
 @brief Returns <code>true</code> if every element in <code>values</code> is contained in
  this range.
 */
- (jboolean)containsAllWithJavaLangIterable:(id<JavaLangIterable> __nonnull)values;

/*!
 @brief Returns a range from the given endpoint, which may be either inclusive (closed) or exclusive
  (open), with no upper bound.
 @since 14.0
 */
+ (ComGoogleCommonCollectRange *)downToWithJavaLangComparable:(id<JavaLangComparable> __nonnull)endpoint
                          withComGoogleCommonCollectBoundType:(ComGoogleCommonCollectBoundType * __nonnull)boundType;

/*!
 @brief Returns the minimal range that contains all of the
  given values.The returned range is closed on both ends.
 @throw ClassCastExceptionif the parameters are not <i>mutually comparable</i>
 @throw NoSuchElementExceptionif <code>values</code> is empty
 @throw NullPointerExceptionif any of <code>values</code> is null
 @since 14.0
 */
+ (ComGoogleCommonCollectRange *)encloseAllWithJavaLangIterable:(id<JavaLangIterable> __nonnull)values;

/*!
 @brief Returns <code>true</code> if the bounds of <code>other</code> do not extend outside the bounds of this
  range.Examples:
  
 <ul>
    <li><code>[3..6]</code> encloses <code>[4..5]</code>
    <li><code>(3..6)</code> encloses <code>(3..6)</code>
    <li><code>[3..6]</code> encloses <code>[4..4)</code> (even though the latter is empty)
    <li><code>(3..6]</code> does not enclose <code>[3..6]</code>
    <li><code>[4..5]</code> does not enclose <code>(3..6)</code> (even though it contains every value
        contained by the latter range)   
 <li><code>[3..6]</code> does not enclose <code>(1..1]</code> (even though it contains every value
        contained by the latter range) 
 </ul>
  
 <p>Note that if <code>a.encloses(b)</code>, then <code>b.contains(v)</code> implies <code>a.contains(v)</code>
 , but as the last two examples illustrate, the converse is not always true.
 <p>Being reflexive, antisymmetric and transitive, the <code>encloses</code> relation defines a 
 <i>partial order</i> over ranges. There exists a unique maximal range
  according to this relation, and also numerous minimal ranges. Enclosure
  also implies connectedness.
 */
- (jboolean)enclosesWithComGoogleCommonCollectRange:(ComGoogleCommonCollectRange * __nonnull)other;

/*!
 @brief Returns <code>true</code> if <code>object</code> is a range having the same endpoints and bound types as
  this range.Note that discrete ranges such as <code>(1..4)</code> and <code>[2..3]</code> are <b>not</b>
  equal to one another, despite the fact that they each contain precisely the same set of values.
 Similarly, empty ranges are not equal unless they have exactly the same representation, so 
 <code>[3..3)</code>, <code>(3..3]</code>, <code>(4..4]</code> are all unequal.
 */
- (jboolean)isEqual:(id __nullable)object;

/*!
 @brief Returns a range that contains all values strictly greater than <code>endpoint</code>.
 @since 14.0
 */
+ (ComGoogleCommonCollectRange *)greaterThanWithJavaLangComparable:(id<JavaLangComparable> __nonnull)endpoint;

/*!
 @brief Returns a hash code for this range.
 */
- (NSUInteger)hash;

/*!
 @brief Returns <code>true</code> if this range has a lower endpoint.
 */
- (jboolean)hasLowerBound;

/*!
 @brief Returns <code>true</code> if this range has an upper endpoint.
 */
- (jboolean)hasUpperBound;

/*!
 @brief Returns the maximal range enclosed by both this range and <code>connectedRange</code>
 , if such a range exists.
 <p>For example, the intersection of <code>[1..5]</code> and <code>(3..7)</code> is <code>(3..5]</code>. The
  resulting range may be empty; for example, <code>[1..5)</code> intersected with <code>[5..7)</code>
  yields the empty range <code>[5..5)</code>.
  
 <p>The intersection exists if and only if the two ranges are connected
 .
  
 <p>The intersection operation is commutative, associative and idempotent, and its identity
  element is <code>Range.all</code>).
 @throw IllegalArgumentExceptionif <code>isConnected(connectedRange)</code> is <code>false</code>
 */
- (ComGoogleCommonCollectRange *)intersectionWithComGoogleCommonCollectRange:(ComGoogleCommonCollectRange * __nonnull)connectedRange;

/*!
 @brief Returns <code>true</code> if there exists a (possibly empty) range which is enclosed
  by both this range and <code>other</code>.
 <p>For example, 
 <ul>
    <li><code>[2, 4)</code> and <code>[5, 7)</code> are not connected
    <li><code>[2, 4)</code> and <code>[3, 5)</code> are connected, because both enclose <code>[3, 4)</code>
    <li><code>[2, 4)</code> and <code>[4, 6)</code> are connected, because both enclose the empty range
        <code>[4, 4)</code>
  </ul>
  
 <p>Note that this range and <code>other</code> have a well-defined union and 
 intersection (as a single, possibly-empty range) if and only if this
  method returns <code>true</code>.
  
 <p>The connectedness relation is both reflexive and symmetric, but does not form an equivalence relation
  as it is not transitive. 
 <p>Note that certain discrete ranges are not considered connected, even though there are no
  elements "between them." For example, <code>[3, 5]</code> is not considered connected to <code>[6,
  10]</code>
 . In these cases, it may be desirable for both input ranges to be preprocessed with <code>canonical(DiscreteDomain)</code>
  before testing for connectedness.
 */
- (jboolean)isConnectedWithComGoogleCommonCollectRange:(ComGoogleCommonCollectRange * __nonnull)other;

/*!
 @brief Returns <code>true</code> if this range is of the form <code>[v..v)</code> or <code>(v..v]</code>.
 (This does
  not encompass ranges of the form <code>(v..v)</code>, because such ranges are <i>invalid</i> and
  can't be constructed at all.) 
 <p>Note that certain discrete ranges such as the integer range <code>(3..4)</code> are <b>not</b>
  considered empty, even though they contain no actual values. In these cases, it may be helpful
  to preprocess ranges with <code>canonical(DiscreteDomain)</code>.
 */
- (jboolean)isEmpty;

/*!
 @brief Returns a range that contains all values strictly less than <code>endpoint</code>.
 @since 14.0
 */
+ (ComGoogleCommonCollectRange *)lessThanWithJavaLangComparable:(id<JavaLangComparable> __nonnull)endpoint;

/*!
 @brief Returns the type of this range's lower bound: <code>BoundType.CLOSED</code> if the range includes
  its lower endpoint, <code>BoundType.OPEN</code> if it does not.
 @throw IllegalStateExceptionif this range is unbounded below (that is, <code>hasLowerBound()</code>
  returns <code>false</code>)
 */
- (ComGoogleCommonCollectBoundType *)lowerBoundType;

/*!
 @brief Returns the lower endpoint of this range.
 @throw IllegalStateExceptionif this range is unbounded below (that is, <code>hasLowerBound()</code>
  returns <code>false</code>)
 */
- (id<JavaLangComparable>)lowerEndpoint;

/*!
 @brief Returns a range that contains all values strictly greater than <code>lower</code> and strictly less
  than <code>upper</code>.
 @throw IllegalArgumentExceptionif <code>lower</code> is greater than <i>or equal to</i> <code>upper</code>
 @since 14.0
 */
+ (ComGoogleCommonCollectRange *)openWithJavaLangComparable:(id<JavaLangComparable> __nonnull)lower
                                     withJavaLangComparable:(id<JavaLangComparable> __nonnull)upper;

/*!
 @brief Returns a range that contains all values strictly greater than <code>lower</code> and less than or
  equal to <code>upper</code>.
 @throw IllegalArgumentExceptionif <code>lower</code> is greater than <code>upper</code>
 @since 14.0
 */
+ (ComGoogleCommonCollectRange *)openClosedWithJavaLangComparable:(id<JavaLangComparable> __nonnull)lower
                                           withJavaLangComparable:(id<JavaLangComparable> __nonnull)upper;

/*!
 @brief Returns a range that contains any value from <code>lower</code> to <code>upper</code>, where each
  endpoint may be either inclusive (closed) or exclusive (open).
 @throw IllegalArgumentExceptionif <code>lower</code> is greater than <code>upper</code>
 @since 14.0
 */
+ (ComGoogleCommonCollectRange *)rangeWithJavaLangComparable:(id<JavaLangComparable> __nonnull)lower
                         withComGoogleCommonCollectBoundType:(ComGoogleCommonCollectBoundType * __nonnull)lowerType
                                      withJavaLangComparable:(id<JavaLangComparable> __nonnull)upper
                         withComGoogleCommonCollectBoundType:(ComGoogleCommonCollectBoundType * __nonnull)upperType;

/*!
 @brief Returns a range that contains only the given value.The
  returned range is closed on both ends.
 @since 14.0
 */
+ (ComGoogleCommonCollectRange *)singletonWithJavaLangComparable:(id<JavaLangComparable> __nonnull)value;

/*!
 @brief Returns the minimal range that encloses both this range and <code>other</code>
 .For example, the span of <code>[1..3]</code> and <code>(5..7)</code> is <code>[1..7)</code>.
 <p><i>If</i> the input ranges are connected, the returned range can
  also be called their <i>union</i>. If they are not, note that the span might contain values
  that are not contained in either input range. 
 <p>Like <code>intersection</code>, this operation is commutative, associative
  and idempotent. Unlike it, it is always well-defined for any two input ranges.
 */
- (ComGoogleCommonCollectRange *)spanWithComGoogleCommonCollectRange:(ComGoogleCommonCollectRange * __nonnull)other;

/*!
 @brief Returns a string representation of this range, such as <code>"[3..5)"</code> (other examples are
  listed in the class documentation).
 */
- (NSString *)description;

/*!
 @brief Returns the type of this range's upper bound: <code>BoundType.CLOSED</code> if the range includes
  its upper endpoint, <code>BoundType.OPEN</code> if it does not.
 @throw IllegalStateExceptionif this range is unbounded above (that is, <code>hasUpperBound()</code>
  returns <code>false</code>)
 */
- (ComGoogleCommonCollectBoundType *)upperBoundType;

/*!
 @brief Returns the upper endpoint of this range.
 @throw IllegalStateExceptionif this range is unbounded above (that is, <code>hasUpperBound()</code>
  returns <code>false</code>)
 */
- (id<JavaLangComparable>)upperEndpoint;

/*!
 @brief Returns a range with no lower bound up to the given endpoint, which may be either inclusive
  (closed) or exclusive (open).
 @since 14.0
 */
+ (ComGoogleCommonCollectRange *)upToWithJavaLangComparable:(id<JavaLangComparable> __nonnull)endpoint
                        withComGoogleCommonCollectBoundType:(ComGoogleCommonCollectBoundType * __nonnull)boundType;

#pragma mark Package-Private

+ (jint)compareOrThrowWithJavaLangComparable:(id<JavaLangComparable> __nonnull)left
                      withJavaLangComparable:(id<JavaLangComparable> __nonnull)right;

+ (ComGoogleCommonCollectRange *)createWithComGoogleCommonCollectCut:(ComGoogleCommonCollectCut * __nonnull)lowerBound
                                       withComGoogleCommonCollectCut:(ComGoogleCommonCollectCut * __nonnull)upperBound;

+ (id<ComGoogleCommonBaseFunction>)lowerBoundFn;

+ (ComGoogleCommonCollectOrdering *)rangeLexOrdering;

- (id)readResolve;

+ (id<ComGoogleCommonBaseFunction>)upperBoundFn;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initPackagePrivate NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonCollectRange)

J2OBJC_FIELD_SETTER(ComGoogleCommonCollectRange, lowerBound_, ComGoogleCommonCollectCut *)
J2OBJC_FIELD_SETTER(ComGoogleCommonCollectRange, upperBound_, ComGoogleCommonCollectCut *)

FOUNDATION_EXPORT id<ComGoogleCommonBaseFunction> ComGoogleCommonCollectRange_lowerBoundFn(void);

FOUNDATION_EXPORT id<ComGoogleCommonBaseFunction> ComGoogleCommonCollectRange_upperBoundFn(void);

FOUNDATION_EXPORT ComGoogleCommonCollectOrdering *ComGoogleCommonCollectRange_rangeLexOrdering(void);

FOUNDATION_EXPORT ComGoogleCommonCollectRange *ComGoogleCommonCollectRange_createWithComGoogleCommonCollectCut_withComGoogleCommonCollectCut_(ComGoogleCommonCollectCut *lowerBound, ComGoogleCommonCollectCut *upperBound);

FOUNDATION_EXPORT ComGoogleCommonCollectRange *ComGoogleCommonCollectRange_openWithJavaLangComparable_withJavaLangComparable_(id<JavaLangComparable> lower, id<JavaLangComparable> upper);

FOUNDATION_EXPORT ComGoogleCommonCollectRange *ComGoogleCommonCollectRange_closedWithJavaLangComparable_withJavaLangComparable_(id<JavaLangComparable> lower, id<JavaLangComparable> upper);

FOUNDATION_EXPORT ComGoogleCommonCollectRange *ComGoogleCommonCollectRange_closedOpenWithJavaLangComparable_withJavaLangComparable_(id<JavaLangComparable> lower, id<JavaLangComparable> upper);

FOUNDATION_EXPORT ComGoogleCommonCollectRange *ComGoogleCommonCollectRange_openClosedWithJavaLangComparable_withJavaLangComparable_(id<JavaLangComparable> lower, id<JavaLangComparable> upper);

FOUNDATION_EXPORT ComGoogleCommonCollectRange *ComGoogleCommonCollectRange_rangeWithJavaLangComparable_withComGoogleCommonCollectBoundType_withJavaLangComparable_withComGoogleCommonCollectBoundType_(id<JavaLangComparable> lower, ComGoogleCommonCollectBoundType *lowerType, id<JavaLangComparable> upper, ComGoogleCommonCollectBoundType *upperType);

FOUNDATION_EXPORT ComGoogleCommonCollectRange *ComGoogleCommonCollectRange_lessThanWithJavaLangComparable_(id<JavaLangComparable> endpoint);

FOUNDATION_EXPORT ComGoogleCommonCollectRange *ComGoogleCommonCollectRange_atMostWithJavaLangComparable_(id<JavaLangComparable> endpoint);

FOUNDATION_EXPORT ComGoogleCommonCollectRange *ComGoogleCommonCollectRange_upToWithJavaLangComparable_withComGoogleCommonCollectBoundType_(id<JavaLangComparable> endpoint, ComGoogleCommonCollectBoundType *boundType);

FOUNDATION_EXPORT ComGoogleCommonCollectRange *ComGoogleCommonCollectRange_greaterThanWithJavaLangComparable_(id<JavaLangComparable> endpoint);

FOUNDATION_EXPORT ComGoogleCommonCollectRange *ComGoogleCommonCollectRange_atLeastWithJavaLangComparable_(id<JavaLangComparable> endpoint);

FOUNDATION_EXPORT ComGoogleCommonCollectRange *ComGoogleCommonCollectRange_downToWithJavaLangComparable_withComGoogleCommonCollectBoundType_(id<JavaLangComparable> endpoint, ComGoogleCommonCollectBoundType *boundType);

FOUNDATION_EXPORT ComGoogleCommonCollectRange *ComGoogleCommonCollectRange_all(void);

FOUNDATION_EXPORT ComGoogleCommonCollectRange *ComGoogleCommonCollectRange_singletonWithJavaLangComparable_(id<JavaLangComparable> value);

FOUNDATION_EXPORT ComGoogleCommonCollectRange *ComGoogleCommonCollectRange_encloseAllWithJavaLangIterable_(id<JavaLangIterable> values);

FOUNDATION_EXPORT jint ComGoogleCommonCollectRange_compareOrThrowWithJavaLangComparable_withJavaLangComparable_(id<JavaLangComparable> left, id<JavaLangComparable> right);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectRange)

#endif

#if !defined (ComGoogleCommonCollectRange_LowerBoundFn_) && (INCLUDE_ALL_ComGoogleCommonCollectRange || defined(INCLUDE_ComGoogleCommonCollectRange_LowerBoundFn))
#define ComGoogleCommonCollectRange_LowerBoundFn_

#define RESTRICT_ComGoogleCommonBaseFunction 1
#define INCLUDE_ComGoogleCommonBaseFunction 1
#include "com/google/common/base/Function.h"

@class ComGoogleCommonCollectCut;
@class ComGoogleCommonCollectRange;

@interface ComGoogleCommonCollectRange_LowerBoundFn : NSObject < ComGoogleCommonBaseFunction >
@property (readonly, class, strong) ComGoogleCommonCollectRange_LowerBoundFn *INSTANCE NS_SWIFT_NAME(INSTANCE);

+ (ComGoogleCommonCollectRange_LowerBoundFn *)INSTANCE;

#pragma mark Public

- (ComGoogleCommonCollectCut *)applyWithId:(ComGoogleCommonCollectRange * __nonnull)range;

#pragma mark Package-Private

- (instancetype __nonnull)init;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonCollectRange_LowerBoundFn)

inline ComGoogleCommonCollectRange_LowerBoundFn *ComGoogleCommonCollectRange_LowerBoundFn_get_INSTANCE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComGoogleCommonCollectRange_LowerBoundFn *ComGoogleCommonCollectRange_LowerBoundFn_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonCollectRange_LowerBoundFn, INSTANCE, ComGoogleCommonCollectRange_LowerBoundFn *)

FOUNDATION_EXPORT void ComGoogleCommonCollectRange_LowerBoundFn_init(ComGoogleCommonCollectRange_LowerBoundFn *self);

FOUNDATION_EXPORT ComGoogleCommonCollectRange_LowerBoundFn *new_ComGoogleCommonCollectRange_LowerBoundFn_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectRange_LowerBoundFn *create_ComGoogleCommonCollectRange_LowerBoundFn_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectRange_LowerBoundFn)

#endif

#if !defined (ComGoogleCommonCollectRange_UpperBoundFn_) && (INCLUDE_ALL_ComGoogleCommonCollectRange || defined(INCLUDE_ComGoogleCommonCollectRange_UpperBoundFn))
#define ComGoogleCommonCollectRange_UpperBoundFn_

#define RESTRICT_ComGoogleCommonBaseFunction 1
#define INCLUDE_ComGoogleCommonBaseFunction 1
#include "com/google/common/base/Function.h"

@class ComGoogleCommonCollectCut;
@class ComGoogleCommonCollectRange;

@interface ComGoogleCommonCollectRange_UpperBoundFn : NSObject < ComGoogleCommonBaseFunction >
@property (readonly, class, strong) ComGoogleCommonCollectRange_UpperBoundFn *INSTANCE NS_SWIFT_NAME(INSTANCE);

+ (ComGoogleCommonCollectRange_UpperBoundFn *)INSTANCE;

#pragma mark Public

- (ComGoogleCommonCollectCut *)applyWithId:(ComGoogleCommonCollectRange * __nonnull)range;

#pragma mark Package-Private

- (instancetype __nonnull)init;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonCollectRange_UpperBoundFn)

inline ComGoogleCommonCollectRange_UpperBoundFn *ComGoogleCommonCollectRange_UpperBoundFn_get_INSTANCE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComGoogleCommonCollectRange_UpperBoundFn *ComGoogleCommonCollectRange_UpperBoundFn_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonCollectRange_UpperBoundFn, INSTANCE, ComGoogleCommonCollectRange_UpperBoundFn *)

FOUNDATION_EXPORT void ComGoogleCommonCollectRange_UpperBoundFn_init(ComGoogleCommonCollectRange_UpperBoundFn *self);

FOUNDATION_EXPORT ComGoogleCommonCollectRange_UpperBoundFn *new_ComGoogleCommonCollectRange_UpperBoundFn_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectRange_UpperBoundFn *create_ComGoogleCommonCollectRange_UpperBoundFn_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectRange_UpperBoundFn)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCollectRange")
