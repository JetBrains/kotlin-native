//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/util/concurrent/ThreadFactoryBuilder.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonUtilConcurrentThreadFactoryBuilder")
#ifdef RESTRICT_ComGoogleCommonUtilConcurrentThreadFactoryBuilder
#define INCLUDE_ALL_ComGoogleCommonUtilConcurrentThreadFactoryBuilder 0
#else
#define INCLUDE_ALL_ComGoogleCommonUtilConcurrentThreadFactoryBuilder 1
#endif
#undef RESTRICT_ComGoogleCommonUtilConcurrentThreadFactoryBuilder

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonUtilConcurrentThreadFactoryBuilder_) && (INCLUDE_ALL_ComGoogleCommonUtilConcurrentThreadFactoryBuilder || defined(INCLUDE_ComGoogleCommonUtilConcurrentThreadFactoryBuilder))
#define ComGoogleCommonUtilConcurrentThreadFactoryBuilder_

@protocol JavaLangThread_UncaughtExceptionHandler;
@protocol JavaUtilConcurrentThreadFactory;

/*!
 @brief A ThreadFactory builder, providing any combination of these features: 
 <ul>
    <li>whether threads should be marked as daemon threads
    <li>a naming format
    <li>a thread priority
    <li>an uncaught exception handler
    <li>a backing thread factory
  </ul>
 <p>If no backing thread factory is provided, a default backing thread factory is used as if by
  calling <code>setThreadFactory(</code><code>Executors.defaultThreadFactory()</code><code>)</code>.
 @author Kurt Alfred Kluever
 @since 4.0
 */
@interface ComGoogleCommonUtilConcurrentThreadFactoryBuilder : NSObject

#pragma mark Public

/*!
 @brief Creates a new <code>ThreadFactory</code> builder.
 */
- (instancetype __nonnull)init;

/*!
 @brief Returns a new thread factory using the options supplied during the building process.After
  building, it is still possible to change the options used to build the ThreadFactory and/or
  build again.
 State is not shared amongst built instances.
 @return the fully constructed <code>ThreadFactory</code>
 */
- (id<JavaUtilConcurrentThreadFactory>)build;

/*!
 @brief Sets daemon or not for new threads created with this ThreadFactory.
 @param daemon whether or not new Threads created with this ThreadFactory will be daemon threads
 @return this for the builder pattern
 */
- (ComGoogleCommonUtilConcurrentThreadFactoryBuilder *)setDaemonWithBoolean:(jboolean)daemon;

/*!
 @brief Sets the naming format to use when naming threads (<code>Thread.setName</code>) which are created
  with this ThreadFactory.
 @param nameFormat a <code>String.format(String, Object...)</code> -compatible format String, to which
       a unique integer (0, 1, etc.) will be supplied as the single parameter. This integer will      be unique to the built instance of the ThreadFactory and will be assigned sequentially. For
       example, 
 <code>"rpc-pool-%d"</code>  will generate thread names like <code>"rpc-pool-0"</code> , <code>"rpc-pool-1"</code>
  , <code>"rpc-pool-2"</code> , etc.
 @return this for the builder pattern
 */
- (ComGoogleCommonUtilConcurrentThreadFactoryBuilder *)setNameFormatWithNSString:(NSString * __nonnull)nameFormat;

/*!
 @brief Sets the priority for new threads created with this ThreadFactory.
 @param priority the priority for new Threads created with this ThreadFactory
 @return this for the builder pattern
 */
- (ComGoogleCommonUtilConcurrentThreadFactoryBuilder *)setPriorityWithInt:(jint)priority;

/*!
 @brief Sets the backing <code>ThreadFactory</code> for new threads created with this ThreadFactory.Threads
  will be created by invoking #newThread(Runnable) on this backing <code>ThreadFactory</code>.
 @param backingThreadFactory the backing <code>ThreadFactory</code>  which will be delegated to during
       thread creation.
 @return this for the builder pattern
 - seealso: MoreExecutors
 */
- (ComGoogleCommonUtilConcurrentThreadFactoryBuilder *)setThreadFactoryWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory> __nonnull)backingThreadFactory;

/*!
 @brief Sets the <code>UncaughtExceptionHandler</code> for new threads created with this ThreadFactory.
 @param uncaughtExceptionHandler the uncaught exception handler for new Threads created with      this ThreadFactory
 @return this for the builder pattern
 */
- (ComGoogleCommonUtilConcurrentThreadFactoryBuilder *)setUncaughtExceptionHandlerWithJavaLangThread_UncaughtExceptionHandler:(id<JavaLangThread_UncaughtExceptionHandler> __nonnull)uncaughtExceptionHandler;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentThreadFactoryBuilder)

FOUNDATION_EXPORT void ComGoogleCommonUtilConcurrentThreadFactoryBuilder_init(ComGoogleCommonUtilConcurrentThreadFactoryBuilder *self);

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentThreadFactoryBuilder *new_ComGoogleCommonUtilConcurrentThreadFactoryBuilder_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentThreadFactoryBuilder *create_ComGoogleCommonUtilConcurrentThreadFactoryBuilder_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentThreadFactoryBuilder)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonUtilConcurrentThreadFactoryBuilder")
