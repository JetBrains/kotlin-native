//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/collect/ImmutableSet.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCollectImmutableSet")
#ifdef RESTRICT_ComGoogleCommonCollectImmutableSet
#define INCLUDE_ALL_ComGoogleCommonCollectImmutableSet 0
#else
#define INCLUDE_ALL_ComGoogleCommonCollectImmutableSet 1
#endif
#undef RESTRICT_ComGoogleCommonCollectImmutableSet

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCollectImmutableSet_) && (INCLUDE_ALL_ComGoogleCommonCollectImmutableSet || defined(INCLUDE_ComGoogleCommonCollectImmutableSet))
#define ComGoogleCommonCollectImmutableSet_

#define RESTRICT_ComGoogleCommonCollectImmutableCollection 1
#define INCLUDE_ComGoogleCommonCollectImmutableCollection 1
#include "com/google/common/collect/ImmutableCollection.h"

#define RESTRICT_JavaUtilSet 1
#define INCLUDE_JavaUtilSet 1
#include "java/util/Set.h"

@class ComGoogleCommonCollectImmutableList;
@class ComGoogleCommonCollectImmutableSet_Builder;
@class ComGoogleCommonCollectUnmodifiableIterator;
@class IOSObjectArray;
@protocol JavaLangIterable;
@protocol JavaUtilCollection;
@protocol JavaUtilIterator;
@protocol JavaUtilSpliterator;

/*!
 @brief A <code>Set</code> whose contents will never change, with many other important properties detailed at 
 <code>ImmutableCollection</code>.
 @since 2.0
 */
@interface ComGoogleCommonCollectImmutableSet : ComGoogleCommonCollectImmutableCollection < JavaUtilSet >
@property (readonly, class) jint MAX_TABLE_SIZE NS_SWIFT_NAME(MAX_TABLE_SIZE);

+ (jint)MAX_TABLE_SIZE;

#pragma mark Public

- (ComGoogleCommonCollectImmutableList *)asList;

/*!
 @brief Returns a new builder.The generated builder is equivalent to the builder created by the <code>Builder</code>
  constructor.
 */
+ (ComGoogleCommonCollectImmutableSet_Builder *)builder;

/*!
 @brief Returns a new builder, expecting the specified number of distinct elements to be added.
 <p>If <code>expectedSize</code> is exactly the number of distinct elements added to the builder
  before <code>Builder.build</code> is called, the builder is likely to perform better than an unsized 
 <code>builder()</code> would have. 
 <p>It is not specified if any performance benefits apply if <code>expectedSize</code> is close to,
  but not exactly, the number of distinct elements added to the builder.
 @since 23.1
 */
+ (ComGoogleCommonCollectImmutableSet_Builder *)builderWithExpectedSizeWithInt:(jint)expectedSize;

/*!
 @brief Returns an immutable set containing each of <code>elements</code>, minus duplicates, in the order
  each appears first in the source collection.
 <p><b>Performance note:</b> This method will sometimes recognize that the actual copy operation
  is unnecessary; for example, <code>copyOf(copyOf(anArrayList))</code> will copy the data only once.
  This reduces the expense of habitually making defensive copies at API boundaries. However, the
  precise conditions for skipping the copy operation are undefined.
 @throw NullPointerExceptionif any of <code>elements</code> is null
 @since 7.0 (source-compatible since 2.0)
 */
+ (ComGoogleCommonCollectImmutableSet *)copyOfWithJavaUtilCollection:(id<JavaUtilCollection> __nonnull)elements OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns an immutable set containing each of <code>elements</code>, minus duplicates, in the order
  each appears first in the source array.
 @throw NullPointerExceptionif any of <code>elements</code> is null
 @since 3.0
 */
+ (ComGoogleCommonCollectImmutableSet *)copyOfWithNSObjectArray:(IOSObjectArray * __nonnull)elements OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns an immutable set containing each of <code>elements</code>, minus duplicates, in the order
  each appears first in the source iterable.This method iterates over <code>elements</code> only
  once.
 <p><b>Performance note:</b> This method will sometimes recognize that the actual copy operation
  is unnecessary; for example, <code>copyOf(copyOf(anArrayList))</code> should copy the data only
  once. This reduces the expense of habitually making defensive copies at API boundaries.
  However, the precise conditions for skipping the copy operation are undefined.
 @throw NullPointerExceptionif any of <code>elements</code> is null
 */
+ (ComGoogleCommonCollectImmutableSet *)copyOfWithJavaLangIterable:(id<JavaLangIterable> __nonnull)elements OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns an immutable set containing each of <code>elements</code>, minus duplicates, in the order
  each appears first in the source iterator.
 @throw NullPointerExceptionif any of <code>elements</code> is null
 */
+ (ComGoogleCommonCollectImmutableSet *)copyOfWithJavaUtilIterator:(id<JavaUtilIterator> __nonnull)elements OBJC_METHOD_FAMILY_NONE;

- (jboolean)isEqual:(id __nullable)object;

- (NSUInteger)hash;

- (ComGoogleCommonCollectUnmodifiableIterator *)iterator;

/*!
 @brief Returns the empty immutable set.Preferred over <code>Collections.emptySet</code> for code
  consistency, and because the return type conveys the immutability guarantee.
 */
+ (ComGoogleCommonCollectImmutableSet *)of;

/*!
 @brief Returns an immutable set containing <code>element</code>.Preferred over <code>Collections.singleton</code>
  for code consistency, <code>null</code> rejection, and because the return
  type conveys the immutability guarantee.
 */
+ (ComGoogleCommonCollectImmutableSet *)ofWithId:(id __nonnull)element;

/*!
 @brief Returns an immutable set containing the given elements, minus duplicates, in the order each was
  first specified.That is, if multiple elements are equal, all except
  the first are ignored.
 */
+ (ComGoogleCommonCollectImmutableSet *)ofWithId:(id __nonnull)e1
                                          withId:(id __nonnull)e2;

/*!
 @brief Returns an immutable set containing the given elements, minus duplicates, in the order each was
  first specified.That is, if multiple elements are equal, all except
  the first are ignored.
 */
+ (ComGoogleCommonCollectImmutableSet *)ofWithId:(id __nonnull)e1
                                          withId:(id __nonnull)e2
                                          withId:(id __nonnull)e3;

/*!
 @brief Returns an immutable set containing the given elements, minus duplicates, in the order each was
  first specified.That is, if multiple elements are equal, all except
  the first are ignored.
 */
+ (ComGoogleCommonCollectImmutableSet *)ofWithId:(id __nonnull)e1
                                          withId:(id __nonnull)e2
                                          withId:(id __nonnull)e3
                                          withId:(id __nonnull)e4;

/*!
 @brief Returns an immutable set containing the given elements, minus duplicates, in the order each was
  first specified.That is, if multiple elements are equal, all except
  the first are ignored.
 */
+ (ComGoogleCommonCollectImmutableSet *)ofWithId:(id __nonnull)e1
                                          withId:(id __nonnull)e2
                                          withId:(id __nonnull)e3
                                          withId:(id __nonnull)e4
                                          withId:(id __nonnull)e5;

/*!
 @brief Returns an immutable set containing the given elements, minus duplicates, in the order each was
  first specified.That is, if multiple elements are equal, all except
  the first are ignored.
 <p>The array <code>others</code> must not be longer than <code>Integer.MAX_VALUE - 6</code>.
 @since 3.0 (source-compatible since 2.0)
 */
+ (ComGoogleCommonCollectImmutableSet *)ofWithId:(id __nonnull)e1
                                          withId:(id __nonnull)e2
                                          withId:(id __nonnull)e3
                                          withId:(id __nonnull)e4
                                          withId:(id __nonnull)e5
                                          withId:(id __nonnull)e6
                               withNSObjectArray:(IOSObjectArray * __nonnull)others;

#pragma mark Package-Private

- (instancetype __nonnull)init;

/*!
 @brief Returns an array size suitable for the backing array of a hash table that uses open addressing
  with linear probing in its implementation.The returned size is the smallest power of two that
  can hold setSize elements with the desired load factor.
 Always returns at least setSize + 2.
 */
+ (jint)chooseTableSizeWithInt:(jint)setSize;

- (ComGoogleCommonCollectImmutableList *)createAsList;

/*!
 @brief Returns <code>true</code> if the <code>hashCode()</code> method runs quickly.
 */
- (jboolean)isHashCodeFast;

- (id)writeReplace;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectImmutableSet)

inline jint ComGoogleCommonCollectImmutableSet_get_MAX_TABLE_SIZE(void);
#define ComGoogleCommonCollectImmutableSet_MAX_TABLE_SIZE 1073741824
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonCollectImmutableSet, MAX_TABLE_SIZE, jint)

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSet *ComGoogleCommonCollectImmutableSet_of(void);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSet *ComGoogleCommonCollectImmutableSet_ofWithId_(id element);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSet *ComGoogleCommonCollectImmutableSet_ofWithId_withId_(id e1, id e2);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSet *ComGoogleCommonCollectImmutableSet_ofWithId_withId_withId_(id e1, id e2, id e3);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSet *ComGoogleCommonCollectImmutableSet_ofWithId_withId_withId_withId_(id e1, id e2, id e3, id e4);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSet *ComGoogleCommonCollectImmutableSet_ofWithId_withId_withId_withId_withId_(id e1, id e2, id e3, id e4, id e5);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSet *ComGoogleCommonCollectImmutableSet_ofWithId_withId_withId_withId_withId_withId_withNSObjectArray_(id e1, id e2, id e3, id e4, id e5, id e6, IOSObjectArray *others);

FOUNDATION_EXPORT jint ComGoogleCommonCollectImmutableSet_chooseTableSizeWithInt_(jint setSize);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSet *ComGoogleCommonCollectImmutableSet_copyOfWithJavaUtilCollection_(id<JavaUtilCollection> elements);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSet *ComGoogleCommonCollectImmutableSet_copyOfWithJavaLangIterable_(id<JavaLangIterable> elements);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSet *ComGoogleCommonCollectImmutableSet_copyOfWithJavaUtilIterator_(id<JavaUtilIterator> elements);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSet *ComGoogleCommonCollectImmutableSet_copyOfWithNSObjectArray_(IOSObjectArray *elements);

FOUNDATION_EXPORT void ComGoogleCommonCollectImmutableSet_init(ComGoogleCommonCollectImmutableSet *self);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSet_Builder *ComGoogleCommonCollectImmutableSet_builder(void);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSet_Builder *ComGoogleCommonCollectImmutableSet_builderWithExpectedSizeWithInt_(jint expectedSize);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectImmutableSet)

#endif

#if !defined (ComGoogleCommonCollectImmutableSet_Builder_) && (INCLUDE_ALL_ComGoogleCommonCollectImmutableSet || defined(INCLUDE_ComGoogleCommonCollectImmutableSet_Builder))
#define ComGoogleCommonCollectImmutableSet_Builder_

#define RESTRICT_ComGoogleCommonCollectImmutableCollection 1
#define INCLUDE_ComGoogleCommonCollectImmutableCollection_ArrayBasedBuilder 1
#include "com/google/common/collect/ImmutableCollection.h"

@class ComGoogleCommonCollectImmutableSet;
@class IOSObjectArray;
@protocol JavaLangIterable;
@protocol JavaUtilIterator;

/*!
 @brief A builder for creating <code>ImmutableSet</code> instances.Example:
  
 @code
 static final ImmutableSet<Color> GOOGLE_COLORS =
      ImmutableSet.
 <Color>builder()
          .addAll(WEBSAFE_COLORS)
          .add(new Color(0, 191, 255))
          .build(); 
 
@endcode
  
 <p>Elements appear in the resulting set in the same order they were first added to the builder. 
 <p>Building does not change the state of the builder, so it is still possible to add more
  elements and to build again.
 @since 2.0
 */
@interface ComGoogleCommonCollectImmutableSet_Builder : ComGoogleCommonCollectImmutableCollection_ArrayBasedBuilder {
 @public
  IOSObjectArray *hashTable_;
}

#pragma mark Public

/*!
 @brief Creates a new builder.The returned builder is equivalent to the builder generated by <code>ImmutableSet.builder</code>
 .
 */
- (instancetype __nonnull)init;

/*!
 @brief Adds <code>element</code> to the <code>ImmutableSet</code>.If the <code>ImmutableSet</code> already
  contains <code>element</code>, then <code>add</code> has no effect (only the previously added element
  is retained).
 @param element the element to add
 @return this <code>Builder</code> object
 @throw NullPointerExceptionif <code>element</code> is null
 */
- (ComGoogleCommonCollectImmutableSet_Builder *)addWithId:(id __nonnull)element;

/*!
 @brief Adds each element of <code>elements</code> to the <code>ImmutableSet</code>, ignoring duplicate
  elements (only the first duplicate element is added).
 @param elements the elements to add
 @return this <code>Builder</code> object
 @throw NullPointerExceptionif <code>elements</code> is null or contains a null element
 */
- (ComGoogleCommonCollectImmutableSet_Builder *)addWithNSObjectArray:(IOSObjectArray * __nonnull)elements;

/*!
 @brief Adds each element of <code>elements</code> to the <code>ImmutableSet</code>, ignoring duplicate
  elements (only the first duplicate element is added).
 @param elements the <code>Iterable</code>  to add to the <code>ImmutableSet</code>
 @return this <code>Builder</code> object
 @throw NullPointerExceptionif <code>elements</code> is null or contains a null element
 */
- (ComGoogleCommonCollectImmutableSet_Builder *)addAllWithJavaLangIterable:(id<JavaLangIterable> __nonnull)elements;

/*!
 @brief Adds each element of <code>elements</code> to the <code>ImmutableSet</code>, ignoring duplicate
  elements (only the first duplicate element is added).
 @param elements the elements to add to the <code>ImmutableSet</code>
 @return this <code>Builder</code> object
 @throw NullPointerExceptionif <code>elements</code> is null or contains a null element
 */
- (ComGoogleCommonCollectImmutableSet_Builder *)addAllWithJavaUtilIterator:(id<JavaUtilIterator> __nonnull)elements;

/*!
 @brief Returns a newly-created <code>ImmutableSet</code> based on the contents of the <code>Builder</code>.
 */
- (ComGoogleCommonCollectImmutableSet *)build;

#pragma mark Package-Private

- (instancetype __nonnull)initWithInt:(jint)capacity;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonCollectImmutableSet_Builder)

J2OBJC_FIELD_SETTER(ComGoogleCommonCollectImmutableSet_Builder, hashTable_, IOSObjectArray *)

FOUNDATION_EXPORT void ComGoogleCommonCollectImmutableSet_Builder_init(ComGoogleCommonCollectImmutableSet_Builder *self);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSet_Builder *new_ComGoogleCommonCollectImmutableSet_Builder_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSet_Builder *create_ComGoogleCommonCollectImmutableSet_Builder_init(void);

FOUNDATION_EXPORT void ComGoogleCommonCollectImmutableSet_Builder_initWithInt_(ComGoogleCommonCollectImmutableSet_Builder *self, jint capacity);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSet_Builder *new_ComGoogleCommonCollectImmutableSet_Builder_initWithInt_(jint capacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSet_Builder *create_ComGoogleCommonCollectImmutableSet_Builder_initWithInt_(jint capacity);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectImmutableSet_Builder)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCollectImmutableSet")
