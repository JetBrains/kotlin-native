//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/collect/EnumMultiset.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCollectEnumMultiset")
#ifdef RESTRICT_ComGoogleCommonCollectEnumMultiset
#define INCLUDE_ALL_ComGoogleCommonCollectEnumMultiset 0
#else
#define INCLUDE_ALL_ComGoogleCommonCollectEnumMultiset 1
#endif
#undef RESTRICT_ComGoogleCommonCollectEnumMultiset

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCollectEnumMultiset_) && (INCLUDE_ALL_ComGoogleCommonCollectEnumMultiset || defined(INCLUDE_ComGoogleCommonCollectEnumMultiset))
#define ComGoogleCommonCollectEnumMultiset_

#define RESTRICT_ComGoogleCommonCollectAbstractMultiset 1
#define INCLUDE_ComGoogleCommonCollectAbstractMultiset 1
#include "com/google/common/collect/AbstractMultiset.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class IOSClass;
@class JavaLangEnum;
@protocol JavaLangIterable;
@protocol JavaUtilIterator;

/*!
 @brief Multiset implementation specialized for enum elements, supporting all single-element operations
  in O(1).
 <p>See the Guava User Guide article on <a href="https://github.com/google/guava/wiki/NewCollectionTypesExplained#multiset">
  <code>Multiset</code>
 </a>.
 @author Jared Levy
 @since 2.0
 */
@interface ComGoogleCommonCollectEnumMultiset : ComGoogleCommonCollectAbstractMultiset < JavaIoSerializable >

#pragma mark Public

- (jint)addWithId:(JavaLangEnum * __nonnull)element
          withInt:(jint)occurrences;

- (void)clear;

- (jint)countWithId:(id __nullable)element;

/*!
 @brief Creates an empty <code>EnumMultiset</code>.
 */
+ (ComGoogleCommonCollectEnumMultiset *)createWithIOSClass:(IOSClass * __nonnull)type;

/*!
 @brief Creates a new <code>EnumMultiset</code> containing the specified elements.
 <p>This implementation is highly efficient when <code>elements</code> is itself a <code>Multiset</code>.
 @param elements the elements that the multiset should contain
 @throw IllegalArgumentExceptionif <code>elements</code> is empty
 */
+ (ComGoogleCommonCollectEnumMultiset *)createWithJavaLangIterable:(id<JavaLangIterable> __nonnull)elements;

/*!
 @brief Returns a new <code>EnumMultiset</code> instance containing the given elements.Unlike <code>EnumMultiset.create(Iterable)</code>
 , this method does not produce an exception on an empty iterable.
 @since 14.0
 */
+ (ComGoogleCommonCollectEnumMultiset *)createWithJavaLangIterable:(id<JavaLangIterable> __nonnull)elements
                                                      withIOSClass:(IOSClass * __nonnull)type;

- (id<JavaUtilIterator>)iterator;

- (jint)removeWithId:(id __nullable)element
             withInt:(jint)occurrences;

- (jint)setCountWithId:(JavaLangEnum * __nonnull)element
               withInt:(jint)count;

- (jint)size;

#pragma mark Package-Private

/*!
 @brief Returns <code>element</code> cast to <code>E</code>, if it actually is a nonnull E.Otherwise, throws
  either a NullPointerException or a ClassCastException as appropriate.
 */
- (void)checkIsEWithId:(id __nullable)element;

- (jint)distinctElements;

- (id<JavaUtilIterator>)elementIterator;

- (id<JavaUtilIterator>)entryIterator;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initPackagePrivate NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectEnumMultiset)

FOUNDATION_EXPORT ComGoogleCommonCollectEnumMultiset *ComGoogleCommonCollectEnumMultiset_createWithIOSClass_(IOSClass *type);

FOUNDATION_EXPORT ComGoogleCommonCollectEnumMultiset *ComGoogleCommonCollectEnumMultiset_createWithJavaLangIterable_(id<JavaLangIterable> elements);

FOUNDATION_EXPORT ComGoogleCommonCollectEnumMultiset *ComGoogleCommonCollectEnumMultiset_createWithJavaLangIterable_withIOSClass_(id<JavaLangIterable> elements, IOSClass *type);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectEnumMultiset)

#endif

#if !defined (ComGoogleCommonCollectEnumMultiset_Itr_) && (INCLUDE_ALL_ComGoogleCommonCollectEnumMultiset || defined(INCLUDE_ComGoogleCommonCollectEnumMultiset_Itr))
#define ComGoogleCommonCollectEnumMultiset_Itr_

#define RESTRICT_JavaUtilIterator 1
#define INCLUDE_JavaUtilIterator 1
#include "java/util/Iterator.h"

@class ComGoogleCommonCollectEnumMultiset;
@protocol JavaUtilFunctionConsumer;

@interface ComGoogleCommonCollectEnumMultiset_Itr : NSObject < JavaUtilIterator > {
 @public
  jint index_;
  jint toRemove_;
}

#pragma mark Public

- (jboolean)hasNext;

- (id)next;

- (void)remove;

#pragma mark Package-Private

- (instancetype __nonnull)initWithComGoogleCommonCollectEnumMultiset:(ComGoogleCommonCollectEnumMultiset * __nonnull)outer$;

- (id)outputWithInt:(jint)index;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectEnumMultiset_Itr)

FOUNDATION_EXPORT void ComGoogleCommonCollectEnumMultiset_Itr_initWithComGoogleCommonCollectEnumMultiset_(ComGoogleCommonCollectEnumMultiset_Itr *self, ComGoogleCommonCollectEnumMultiset *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectEnumMultiset_Itr)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCollectEnumMultiset")
