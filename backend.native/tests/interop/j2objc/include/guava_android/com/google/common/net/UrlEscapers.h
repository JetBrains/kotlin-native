//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/net/UrlEscapers.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonNetUrlEscapers")
#ifdef RESTRICT_ComGoogleCommonNetUrlEscapers
#define INCLUDE_ALL_ComGoogleCommonNetUrlEscapers 0
#else
#define INCLUDE_ALL_ComGoogleCommonNetUrlEscapers 1
#endif
#undef RESTRICT_ComGoogleCommonNetUrlEscapers

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonNetUrlEscapers_) && (INCLUDE_ALL_ComGoogleCommonNetUrlEscapers || defined(INCLUDE_ComGoogleCommonNetUrlEscapers))
#define ComGoogleCommonNetUrlEscapers_

@class ComGoogleCommonEscapeEscaper;

/*!
 @brief <code>Escaper</code> instances suitable for strings to be included in particular sections of URLs.
 <p>If the resulting URLs are inserted into an HTML or XML document, they will require additional
  escaping with <code>com.google.common.html.HtmlEscapers</code> or <code>com.google.common.xml.XmlEscapers</code>
 .
 @author David Beaumont
 @author Chris Povirk
 @since 15.0
 */
@interface ComGoogleCommonNetUrlEscapers : NSObject
@property (readonly, copy, class) NSString *URL_FORM_PARAMETER_OTHER_SAFE_CHARS NS_SWIFT_NAME(URL_FORM_PARAMETER_OTHER_SAFE_CHARS);
@property (readonly, copy, class) NSString *URL_PATH_OTHER_SAFE_CHARS_LACKING_PLUS NS_SWIFT_NAME(URL_PATH_OTHER_SAFE_CHARS_LACKING_PLUS);

+ (NSString *)URL_FORM_PARAMETER_OTHER_SAFE_CHARS;

+ (NSString *)URL_PATH_OTHER_SAFE_CHARS_LACKING_PLUS;

#pragma mark Public

/*!
 @brief Returns an <code>Escaper</code> instance that escapes strings so they can be safely included in <a href="https://goo.gl/MplK6I">
 URL form parameter names and values</a>.Escaping is performed
  with the UTF-8 character encoding.
 The caller is responsible for <a href="https://goo.gl/9EfkM1">
 replacing any unpaired carriage return or line feed characters
  with a CR+LF pair</a> on any non-file inputs before escaping them with this escaper. 
 <p>When escaping a String, the following rules apply: 
 <ul>
    <li>The alphanumeric characters "a" through "z", "A" through "Z" and "0" through "9" remain
        the same.   
 <li>The special characters ".", "-", "*", and "_" remain the same.
    <li>The space character " " is converted into a plus sign "+".
    <li>All other characters are converted into one or more bytes using UTF-8 encoding and each
        byte is then represented by the 3-character string "%XY", where "XY" is the two-digit,
        uppercase, hexadecimal representation of the byte value. 
 </ul>
  
 <p>This escaper is suitable for escaping parameter names and values even when <a href="https://goo.gl/utn6M">
 using the non-standard semicolon</a>, rather than the ampersand, as
  a parameter delimiter. Nevertheless, we recommend using the ampersand unless you must
  interoperate with systems that require semicolons. 
 <p><b>Note:</b> Unlike other escapers, URL escapers produce <a href="https://url.spec.whatwg.org/#percent-encode">
 uppercase</a> hexadecimal sequences.
 */
+ (ComGoogleCommonEscapeEscaper *)urlFormParameterEscaper;

/*!
 @brief Returns an <code>Escaper</code> instance that escapes strings so they can be safely included in a <a href="https://goo.gl/xXEq4p">
 URL fragment</a>.The returned escaper escapes all non-ASCII
  characters, even though <a href="https://goo.gl/e7E0In">many of these are accepted in modern
  URLs</a>.
 <p>When escaping a String, the following rules apply: 
 <ul>
    <li>The alphanumeric characters "a" through "z", "A" through "Z" and "0" through "9" remain
        the same.   
 <li>The unreserved characters ".", "-", "~", and "_" remain the same.
    <li>The general delimiters "@@" and ":" remain the same.
    <li>The subdelimiters "!", "$", "&amp;", "'", "(", ")", "*", "+", ",", ";", and "=" remain
        the same.   
 <li>The space character " " is converted into %20.
    <li>Fragments allow unescaped "/" and "?", so they remain the same.
    <li>All other characters are converted into one or more bytes using UTF-8 encoding and each
        byte is then represented by the 3-character string "%XY", where "XY" is the two-digit,
        uppercase, hexadecimal representation of the byte value. 
 </ul>
  
 <p><b>Note:</b> Unlike other escapers, URL escapers produce <a href="https://url.spec.whatwg.org/#percent-encode">
 uppercase</a> hexadecimal sequences.
 */
+ (ComGoogleCommonEscapeEscaper *)urlFragmentEscaper;

/*!
 @brief Returns an <code>Escaper</code> instance that escapes strings so they can be safely included in <a href="https://goo.gl/m2MIf0">
 URL path segments</a>.The returned escaper escapes all non-ASCII
  characters, even though <a href="https://goo.gl/e7E0In">many of these are accepted in modern
  URLs</a>.
 (<a href="https://goo.gl/jfVxXW">If the escaper were to leave these characters
  unescaped, they would be escaped by the consumer at parse time, anyway.</a>) Additionally, the
  escaper escapes the slash character ("/"). While slashes are acceptable in URL paths, they are
  considered by the specification to be separators between "path segments." This implies that, if
  you wish for your path to contain slashes, you must escape each segment separately and then
  join them. 
 <p>When escaping a String, the following rules apply: 
 <ul>
    <li>The alphanumeric characters "a" through "z", "A" through "Z" and "0" through "9" remain
        the same.   
 <li>The unreserved characters ".", "-", "~", and "_" remain the same.
    <li>The general delimiters "@@" and ":" remain the same.
    <li>The subdelimiters "!", "$", "&amp;", "'", "(", ")", "*", "+", ",", ";", and "=" remain
        the same.   
 <li>The space character " " is converted into %20.
    <li>All other characters are converted into one or more bytes using UTF-8 encoding and each
        byte is then represented by the 3-character string "%XY", where "XY" is the two-digit,
        uppercase, hexadecimal representation of the byte value. 
 </ul>
  
 <p><b>Note:</b> Unlike other escapers, URL escapers produce <a href="https://url.spec.whatwg.org/#percent-encode">
 uppercase</a> hexadecimal sequences.
 */
+ (ComGoogleCommonEscapeEscaper *)urlPathSegmentEscaper;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonNetUrlEscapers)

inline NSString *ComGoogleCommonNetUrlEscapers_get_URL_FORM_PARAMETER_OTHER_SAFE_CHARS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComGoogleCommonNetUrlEscapers_URL_FORM_PARAMETER_OTHER_SAFE_CHARS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonNetUrlEscapers, URL_FORM_PARAMETER_OTHER_SAFE_CHARS, NSString *)

inline NSString *ComGoogleCommonNetUrlEscapers_get_URL_PATH_OTHER_SAFE_CHARS_LACKING_PLUS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComGoogleCommonNetUrlEscapers_URL_PATH_OTHER_SAFE_CHARS_LACKING_PLUS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonNetUrlEscapers, URL_PATH_OTHER_SAFE_CHARS_LACKING_PLUS, NSString *)

FOUNDATION_EXPORT ComGoogleCommonEscapeEscaper *ComGoogleCommonNetUrlEscapers_urlFormParameterEscaper(void);

FOUNDATION_EXPORT ComGoogleCommonEscapeEscaper *ComGoogleCommonNetUrlEscapers_urlPathSegmentEscaper(void);

FOUNDATION_EXPORT ComGoogleCommonEscapeEscaper *ComGoogleCommonNetUrlEscapers_urlFragmentEscaper(void);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonNetUrlEscapers)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonNetUrlEscapers")
