//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/collect/Comparators.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCollectComparators")
#ifdef RESTRICT_ComGoogleCommonCollectComparators
#define INCLUDE_ALL_ComGoogleCommonCollectComparators 0
#else
#define INCLUDE_ALL_ComGoogleCommonCollectComparators 1
#endif
#undef RESTRICT_ComGoogleCommonCollectComparators

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCollectComparators_) && (INCLUDE_ALL_ComGoogleCommonCollectComparators || defined(INCLUDE_ComGoogleCommonCollectComparators))
#define ComGoogleCommonCollectComparators_

@protocol JavaLangIterable;
@protocol JavaUtilComparator;

/*!
 @brief Provides static methods for working with <code>Comparator</code> instances.For many other helpful
  comparator utilities, see either <code>Comparator</code> itself (for Java 8 or later), or <code>com.google.common.collect.Ordering</code>
  (otherwise).
 <h3>Relationship to <code>Ordering</code></h3>
  
 <p>In light of the significant enhancements to <code>Comparator</code> in Java 8, the overwhelming
  majority of usages of <code>Ordering</code> can be written using only built-in JDK APIs. This class is
  intended to "fill the gap" and provide those features of <code>Ordering</code> not already provided by
  the JDK.
 @since 21.0
 @author Louis Wasserman
 */
@interface ComGoogleCommonCollectComparators : NSObject

#pragma mark Public

/*!
 @brief Returns <code>true</code> if each element in <code>iterable</code> after the first is greater than or
  equal to the element that preceded it, according to the specified comparator.Note that this is
  always true when the iterable has fewer than two elements.
 */
+ (jboolean)isInOrderWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable
                   withJavaUtilComparator:(id<JavaUtilComparator> __nonnull)comparator;

/*!
 @brief Returns <code>true</code> if each element in <code>iterable</code> after the first is <i>strictly</i>
  greater than the element that preceded it, according to the specified comparator.Note that
  this is always true when the iterable has fewer than two elements.
 */
+ (jboolean)isInStrictOrderWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable
                         withJavaUtilComparator:(id<JavaUtilComparator> __nonnull)comparator;

/*!
 @brief Returns a new comparator which sorts iterables by comparing corresponding elements pairwise
  until a nonzero result is found; imposes "dictionary order."
 If the end of one iterable is
  reached, but not the other, the shorter iterable is considered to be less than the longer one.
 For example, a lexicographical natural ordering over integers considers <code>[] < [1] < [1,
  1] < [1, 2] < [2]</code>
 .
  
 <p>Note that <code>Collections.reverseOrder(lexicographical(comparator))</code> is not equivalent to 
 <code>lexicographical(Collections.reverseOrder(comparator))</code> (consider how each would order 
 <code>[1]</code> and <code>[1, 1]</code>).
 */
+ (id<JavaUtilComparator>)lexicographicalWithJavaUtilComparator:(id<JavaUtilComparator> __nonnull)comparator;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectComparators)

FOUNDATION_EXPORT id<JavaUtilComparator> ComGoogleCommonCollectComparators_lexicographicalWithJavaUtilComparator_(id<JavaUtilComparator> comparator);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectComparators_isInOrderWithJavaLangIterable_withJavaUtilComparator_(id<JavaLangIterable> iterable, id<JavaUtilComparator> comparator);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectComparators_isInStrictOrderWithJavaLangIterable_withJavaUtilComparator_(id<JavaLangIterable> iterable, id<JavaUtilComparator> comparator);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectComparators)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCollectComparators")
