//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/collect/EvictingQueue.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCollectEvictingQueue")
#ifdef RESTRICT_ComGoogleCommonCollectEvictingQueue
#define INCLUDE_ALL_ComGoogleCommonCollectEvictingQueue 0
#else
#define INCLUDE_ALL_ComGoogleCommonCollectEvictingQueue 1
#endif
#undef RESTRICT_ComGoogleCommonCollectEvictingQueue

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCollectEvictingQueue_) && (INCLUDE_ALL_ComGoogleCommonCollectEvictingQueue || defined(INCLUDE_ComGoogleCommonCollectEvictingQueue))
#define ComGoogleCommonCollectEvictingQueue_

#define RESTRICT_ComGoogleCommonCollectForwardingQueue 1
#define INCLUDE_ComGoogleCommonCollectForwardingQueue 1
#include "com/google/common/collect/ForwardingQueue.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@protocol JavaUtilCollection;
@protocol JavaUtilQueue;

/*!
 @brief A non-blocking queue which automatically evicts elements from the head of the queue when
  attempting to add new elements onto the queue and it is full.This queue orders elements FIFO
  (first-in-first-out).
 This data structure is logically equivalent to a circular buffer (i.e.,
  cyclic buffer or ring buffer). 
 <p>An evicting queue must be configured with a maximum size. Each time an element is added to a
  full queue, the queue automatically removes its head element. This is different from conventional
  bounded queues, which either block or reject new elements when full. 
 <p>This class is not thread-safe, and does not accept null elements.
 @author Kurt Alfred Kluever
 @since 15.0
 */
@interface ComGoogleCommonCollectEvictingQueue : ComGoogleCommonCollectForwardingQueue < JavaIoSerializable > {
 @public
  jint maxSize_;
}

#pragma mark Public

/*!
 @brief Adds the given element to this queue.If the queue is currently full, the element at the head
  of the queue is evicted to make room.
 @return <code>true</code> always
 */
- (jboolean)addWithId:(id __nonnull)e;

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection> __nonnull)collection;

- (jboolean)containsWithId:(id __nonnull)object;

/*!
 @brief Creates and returns a new evicting queue that will hold up to <code>maxSize</code> elements.
 <p>When <code>maxSize</code> is zero, elements will be evicted immediately after being added to the
  queue.
 */
+ (ComGoogleCommonCollectEvictingQueue *)createWithInt:(jint)maxSize;

/*!
 @brief Adds the given element to this queue.If the queue is currently full, the element at the head
  of the queue is evicted to make room.
 @return <code>true</code> always
 */
- (jboolean)offerWithId:(id __nonnull)e;

/*!
 @brief Returns the number of additional elements that this queue can accept without evicting; zero if
  the queue is currently full.
 @since 16.0
 */
- (jint)remainingCapacity;

- (jboolean)removeWithId:(id __nonnull)object;

#pragma mark Protected

- (id<JavaUtilQueue>)delegate;

#pragma mark Package-Private

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectEvictingQueue)

FOUNDATION_EXPORT ComGoogleCommonCollectEvictingQueue *ComGoogleCommonCollectEvictingQueue_createWithInt_(jint maxSize);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectEvictingQueue)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCollectEvictingQueue")
