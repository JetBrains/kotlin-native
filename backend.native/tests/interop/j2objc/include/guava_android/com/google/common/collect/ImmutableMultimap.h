//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/collect/ImmutableMultimap.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCollectImmutableMultimap")
#ifdef RESTRICT_ComGoogleCommonCollectImmutableMultimap
#define INCLUDE_ALL_ComGoogleCommonCollectImmutableMultimap 0
#else
#define INCLUDE_ALL_ComGoogleCommonCollectImmutableMultimap 1
#endif
#undef RESTRICT_ComGoogleCommonCollectImmutableMultimap

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCollectImmutableMultimap_) && (INCLUDE_ALL_ComGoogleCommonCollectImmutableMultimap || defined(INCLUDE_ComGoogleCommonCollectImmutableMultimap))
#define ComGoogleCommonCollectImmutableMultimap_

#define RESTRICT_ComGoogleCommonCollectAbstractMultimap 1
#define INCLUDE_ComGoogleCommonCollectAbstractMultimap 1
#include "com/google/common/collect/AbstractMultimap.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComGoogleCommonCollectImmutableCollection;
@class ComGoogleCommonCollectImmutableMap;
@class ComGoogleCommonCollectImmutableMultimap_Builder;
@class ComGoogleCommonCollectImmutableMultiset;
@class ComGoogleCommonCollectImmutableSet;
@class ComGoogleCommonCollectUnmodifiableIterator;
@protocol ComGoogleCommonCollectMultimap;
@protocol JavaLangIterable;
@protocol JavaUtilMap;
@protocol JavaUtilSet;

/*!
 @brief A <code>Multimap</code> whose contents will never change, with many other important properties
  detailed at <code>ImmutableCollection</code>.
 <p><b>Warning:</b> avoid <i>direct</i> usage of <code>ImmutableMultimap</code> as a type (as with 
 <code>Multimap</code> itself). Prefer subtypes such as <code>ImmutableSetMultimap</code> or <code>ImmutableListMultimap</code>
 , which have well-defined <code>equals</code> semantics, thus avoiding a common
  source of bugs and confusion. 
 <p><b>Note:</b> every <code>ImmutableMultimap</code> offers an <code>inverse</code> view, so there is no
  need for a distinct <code>ImmutableBiMultimap</code> type. 
 <p><a name="iteration"></a>
  
 <p><b>Key-grouped iteration.</b> All view collections follow the same iteration order. In all
  current implementations, the iteration order always keeps multiple entries with the same key
  together. Any creation method that would customarily respect insertion order (such as <code>copyOf(Multimap)</code>
 ) instead preserves key-grouped order by inserting entries for an existing key
  immediately after the last entry having that key. 
 <p>See the Guava User Guide article on <a href="https://github.com/google/guava/wiki/ImmutableCollectionsExplained">
  immutable collections</a>.
 @author Jared Levy
 @since 2.0
 */
@interface ComGoogleCommonCollectImmutableMultimap : ComGoogleCommonCollectAbstractMultimap < JavaIoSerializable > {
 @public
  ComGoogleCommonCollectImmutableMap *map_;
  jint size_;
}

#pragma mark Public

/*!
 @brief Returns an immutable map that associates each key with its corresponding values in the
  multimap.Keys and values appear in the same order as in this multimap.
 */
- (ComGoogleCommonCollectImmutableMap *)asMap;

/*!
 @brief Returns a new builder.The generated builder is equivalent to the builder created by the <code>Builder</code>
  constructor.
 */
+ (ComGoogleCommonCollectImmutableMultimap_Builder *)builder;

/*!
 @brief Guaranteed to throw an exception and leave the multimap unmodified.
 @throw UnsupportedOperationExceptionalways
 */
- (void)clear __attribute__((deprecated));

- (jboolean)containsKeyWithId:(id __nullable)key;

- (jboolean)containsValueWithId:(id __nullable)value;

/*!
 @brief Returns an immutable multimap containing the specified entries.The returned multimap iterates
  over keys in the order they were first encountered in the input, and the values for each key
  are iterated in the order they were encountered.
 @throw NullPointerExceptionif any key, value, or entry is null
 @since 19.0
 */
+ (ComGoogleCommonCollectImmutableMultimap *)copyOfWithJavaLangIterable:(id<JavaLangIterable> __nonnull)entries OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns an immutable multimap containing the same mappings as <code>multimap</code>, in the
  "key-grouped" iteration order described in the class documentation.
 <p>Despite the method name, this method attempts to avoid actually copying the data when it is
  safe to do so. The exact circumstances under which a copy will or will not be performed are
  undocumented and subject to change.
 @throw NullPointerExceptionif any key or value in <code>multimap</code> is null
 */
+ (ComGoogleCommonCollectImmutableMultimap *)copyOfWithComGoogleCommonCollectMultimap:(id<ComGoogleCommonCollectMultimap> __nonnull)multimap OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns an immutable collection of all key-value pairs in the multimap.
 */
- (ComGoogleCommonCollectImmutableCollection *)entries;

/*!
 @brief Returns an immutable collection of the values for the given key.If no mappings in the multimap
  have the provided key, an empty immutable collection is returned.
 The values are in the same
  order as the parameters used to build this multimap.
 */
- (ComGoogleCommonCollectImmutableCollection *)getWithId:(id __nonnull)key;

/*!
 @brief Returns an immutable multimap which is the inverse of this one.For every key-value mapping in
  the original, the result will have a mapping with key and value reversed.
 @since 11.0
 */
- (ComGoogleCommonCollectImmutableMultimap *)inverse;

/*!
 @brief Returns an immutable multiset containing all the keys in this multimap, in the same order and
  with the same frequencies as they appear in this multimap; to get only a single occurrence of
  each key, use <code>keySet</code>.
 */
- (ComGoogleCommonCollectImmutableMultiset *)keys;

/*!
 @brief Returns an immutable set of the distinct keys in this multimap, in the same order as they
  appear in this multimap.
 */
- (ComGoogleCommonCollectImmutableSet *)keySet;

/*!
 @brief Returns an empty multimap.
 */
+ (ComGoogleCommonCollectImmutableMultimap *)of;

/*!
 @brief Returns an immutable multimap containing a single entry.
 */
+ (ComGoogleCommonCollectImmutableMultimap *)ofWithId:(id __nonnull)k1
                                               withId:(id __nonnull)v1;

/*!
 @brief Returns an immutable multimap containing the given entries, in order.
 */
+ (ComGoogleCommonCollectImmutableMultimap *)ofWithId:(id __nonnull)k1
                                               withId:(id __nonnull)v1
                                               withId:(id __nonnull)k2
                                               withId:(id __nonnull)v2;

/*!
 @brief Returns an immutable multimap containing the given entries, in the "key-grouped" insertion
  order described in the <a href="#iteration">class documentation</a>.
 */
+ (ComGoogleCommonCollectImmutableMultimap *)ofWithId:(id __nonnull)k1
                                               withId:(id __nonnull)v1
                                               withId:(id __nonnull)k2
                                               withId:(id __nonnull)v2
                                               withId:(id __nonnull)k3
                                               withId:(id __nonnull)v3;

/*!
 @brief Returns an immutable multimap containing the given entries, in the "key-grouped" insertion
  order described in the <a href="#iteration">class documentation</a>.
 */
+ (ComGoogleCommonCollectImmutableMultimap *)ofWithId:(id __nonnull)k1
                                               withId:(id __nonnull)v1
                                               withId:(id __nonnull)k2
                                               withId:(id __nonnull)v2
                                               withId:(id __nonnull)k3
                                               withId:(id __nonnull)v3
                                               withId:(id __nonnull)k4
                                               withId:(id __nonnull)v4;

/*!
 @brief Returns an immutable multimap containing the given entries, in the "key-grouped" insertion
  order described in the <a href="#iteration">class documentation</a>.
 */
+ (ComGoogleCommonCollectImmutableMultimap *)ofWithId:(id __nonnull)k1
                                               withId:(id __nonnull)v1
                                               withId:(id __nonnull)k2
                                               withId:(id __nonnull)v2
                                               withId:(id __nonnull)k3
                                               withId:(id __nonnull)v3
                                               withId:(id __nonnull)k4
                                               withId:(id __nonnull)v4
                                               withId:(id __nonnull)k5
                                               withId:(id __nonnull)v5;

/*!
 @brief Guaranteed to throw an exception and leave the multimap unmodified.
 @throw UnsupportedOperationExceptionalways
 */
- (jboolean)putWithId:(id __nonnull)key
               withId:(id __nonnull)value __attribute__((deprecated));

/*!
 @brief Guaranteed to throw an exception and leave the multimap unmodified.
 @throw UnsupportedOperationExceptionalways
 */
- (jboolean)putAllWithId:(id __nonnull)key
    withJavaLangIterable:(id<JavaLangIterable> __nonnull)values __attribute__((deprecated));

/*!
 @brief Guaranteed to throw an exception and leave the multimap unmodified.
 @throw UnsupportedOperationExceptionalways
 */
- (jboolean)putAllWithComGoogleCommonCollectMultimap:(id<ComGoogleCommonCollectMultimap> __nonnull)multimap __attribute__((deprecated));

/*!
 @brief Guaranteed to throw an exception and leave the multimap unmodified.
 @throw UnsupportedOperationExceptionalways
 */
- (jboolean)removeWithId:(id __nonnull)key
                  withId:(id __nonnull)value __attribute__((deprecated));

/*!
 @brief Guaranteed to throw an exception and leave the multimap unmodified.
 @throw UnsupportedOperationExceptionalways
 */
- (ComGoogleCommonCollectImmutableCollection *)removeAllWithId:(id __nonnull)key __attribute__((deprecated));

/*!
 @brief Guaranteed to throw an exception and leave the multimap unmodified.
 @throw UnsupportedOperationExceptionalways
 */
- (ComGoogleCommonCollectImmutableCollection *)replaceValuesWithId:(id __nonnull)key
                                              withJavaLangIterable:(id<JavaLangIterable> __nonnull)values __attribute__((deprecated));

- (jint)size;

/*!
 @brief Returns an immutable collection of the values in this multimap.Its iterator traverses the
  values for the first key, the values for the second key, and so on.
 */
- (ComGoogleCommonCollectImmutableCollection *)values;

#pragma mark Package-Private

- (instancetype __nonnull)initWithComGoogleCommonCollectImmutableMap:(ComGoogleCommonCollectImmutableMap * __nonnull)map
                                                             withInt:(jint)size;

- (id<JavaUtilMap>)createAsMap;

- (ComGoogleCommonCollectImmutableCollection *)createEntries;

- (ComGoogleCommonCollectImmutableMultiset *)createKeys;

- (id<JavaUtilSet>)createKeySet;

- (ComGoogleCommonCollectImmutableCollection *)createValues;

- (ComGoogleCommonCollectUnmodifiableIterator *)entryIterator;

/*!
 @brief Returns <code>true</code> if this immutable multimap's implementation contains references to
  user-created objects that aren't accessible via this multimap's methods.This is generally used
  to determine whether <code>copyOf</code> implementations should make an explicit copy to avoid
  memory leaks.
 */
- (jboolean)isPartialView;

- (ComGoogleCommonCollectUnmodifiableIterator *)valueIterator;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initPackagePrivate NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectImmutableMultimap)

J2OBJC_FIELD_SETTER(ComGoogleCommonCollectImmutableMultimap, map_, ComGoogleCommonCollectImmutableMap *)

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableMultimap *ComGoogleCommonCollectImmutableMultimap_of(void);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableMultimap *ComGoogleCommonCollectImmutableMultimap_ofWithId_withId_(id k1, id v1);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableMultimap *ComGoogleCommonCollectImmutableMultimap_ofWithId_withId_withId_withId_(id k1, id v1, id k2, id v2);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableMultimap *ComGoogleCommonCollectImmutableMultimap_ofWithId_withId_withId_withId_withId_withId_(id k1, id v1, id k2, id v2, id k3, id v3);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableMultimap *ComGoogleCommonCollectImmutableMultimap_ofWithId_withId_withId_withId_withId_withId_withId_withId_(id k1, id v1, id k2, id v2, id k3, id v3, id k4, id v4);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableMultimap *ComGoogleCommonCollectImmutableMultimap_ofWithId_withId_withId_withId_withId_withId_withId_withId_withId_withId_(id k1, id v1, id k2, id v2, id k3, id v3, id k4, id v4, id k5, id v5);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableMultimap_Builder *ComGoogleCommonCollectImmutableMultimap_builder(void);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableMultimap *ComGoogleCommonCollectImmutableMultimap_copyOfWithComGoogleCommonCollectMultimap_(id<ComGoogleCommonCollectMultimap> multimap);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableMultimap *ComGoogleCommonCollectImmutableMultimap_copyOfWithJavaLangIterable_(id<JavaLangIterable> entries);

FOUNDATION_EXPORT void ComGoogleCommonCollectImmutableMultimap_initWithComGoogleCommonCollectImmutableMap_withInt_(ComGoogleCommonCollectImmutableMultimap *self, ComGoogleCommonCollectImmutableMap *map, jint size);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectImmutableMultimap)

#endif

#if !defined (ComGoogleCommonCollectImmutableMultimap_Builder_) && (INCLUDE_ALL_ComGoogleCommonCollectImmutableMultimap || defined(INCLUDE_ComGoogleCommonCollectImmutableMultimap_Builder))
#define ComGoogleCommonCollectImmutableMultimap_Builder_

@class ComGoogleCommonCollectImmutableMultimap;
@class IOSObjectArray;
@protocol ComGoogleCommonCollectMultimap;
@protocol JavaLangIterable;
@protocol JavaUtilCollection;
@protocol JavaUtilComparator;
@protocol JavaUtilMap;
@protocol JavaUtilMap_Entry;

/*!
 @brief A builder for creating immutable multimap instances, especially <code>public static final</code>
  multimaps ("constant multimaps").Example:
  
 @code
 static final Multimap<String, Integer> STRING_TO_INTEGER_MULTIMAP =
      new ImmutableMultimap.Builder<String, Integer>()
          .put("one", 1)
          .putAll("several", 1, 2, 3)
          .putAll("many", 1, 2, 3, 4, 5)
          .build(); 
 
@endcode
  
 <p>Builder instances can be reused; it is safe to call <code>build</code> multiple times to build
  multiple multimaps in series.
 Each multimap contains the key-value mappings in the previously
  created multimaps.
 @since 2.0
 */
@interface ComGoogleCommonCollectImmutableMultimap_Builder : NSObject {
 @public
  id<JavaUtilMap> builderMap_;
  id<JavaUtilComparator> keyComparator_;
  id<JavaUtilComparator> valueComparator_;
}

#pragma mark Public

/*!
 @brief Creates a new builder.The returned builder is equivalent to the builder generated by <code>ImmutableMultimap.builder</code>
 .
 */
- (instancetype __nonnull)init;

/*!
 @brief Returns a newly-created immutable multimap.
 */
- (ComGoogleCommonCollectImmutableMultimap *)build;

/*!
 @brief Specifies the ordering of the generated multimap's keys.
 @since 8.0
 */
- (ComGoogleCommonCollectImmutableMultimap_Builder *)orderKeysByWithJavaUtilComparator:(id<JavaUtilComparator> __nonnull)keyComparator;

/*!
 @brief Specifies the ordering of the generated multimap's values for each key.
 @since 8.0
 */
- (ComGoogleCommonCollectImmutableMultimap_Builder *)orderValuesByWithJavaUtilComparator:(id<JavaUtilComparator> __nonnull)valueComparator;

/*!
 @brief Adds an entry to the built multimap.
 @since 11.0
 */
- (ComGoogleCommonCollectImmutableMultimap_Builder *)putWithJavaUtilMap_Entry:(id<JavaUtilMap_Entry> __nonnull)entry_;

/*!
 @brief Adds a key-value mapping to the built multimap.
 */
- (ComGoogleCommonCollectImmutableMultimap_Builder *)putWithId:(id __nonnull)key
                                                        withId:(id __nonnull)value;

/*!
 @brief Adds entries to the built multimap.
 @since 19.0
 */
- (ComGoogleCommonCollectImmutableMultimap_Builder *)putAllWithJavaLangIterable:(id<JavaLangIterable> __nonnull)entries;

/*!
 @brief Stores a collection of values with the same key in the built multimap.
 @throw NullPointerExceptionif <code>key</code>, <code>values</code>, or any element in <code>values</code>
      is null. The builder is left in an invalid state.
 */
- (ComGoogleCommonCollectImmutableMultimap_Builder *)putAllWithId:(id __nonnull)key
                                             withJavaLangIterable:(id<JavaLangIterable> __nonnull)values;

/*!
 @brief Stores an array of values with the same key in the built multimap.
 @throw NullPointerExceptionif the key or any value is null. The builder is left in an
      invalid state.
 */
- (ComGoogleCommonCollectImmutableMultimap_Builder *)putAllWithId:(id __nonnull)key
                                                withNSObjectArray:(IOSObjectArray * __nonnull)values;

/*!
 @brief Stores another multimap's entries in the built multimap.The generated multimap's key and
  value orderings correspond to the iteration ordering of the <code>multimap.asMap()</code> view,
  with new keys and values following any existing keys and values.
 @throw NullPointerExceptionif any key or value in <code>multimap</code> is null. The builder is
      left in an invalid state.
 */
- (ComGoogleCommonCollectImmutableMultimap_Builder *)putAllWithComGoogleCommonCollectMultimap:(id<ComGoogleCommonCollectMultimap> __nonnull)multimap;

#pragma mark Package-Private

- (ComGoogleCommonCollectImmutableMultimap_Builder *)combineWithComGoogleCommonCollectImmutableMultimap_Builder:(ComGoogleCommonCollectImmutableMultimap_Builder * __nonnull)other;

- (id<JavaUtilCollection>)newMutableValueCollection OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectImmutableMultimap_Builder)

J2OBJC_FIELD_SETTER(ComGoogleCommonCollectImmutableMultimap_Builder, builderMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ComGoogleCommonCollectImmutableMultimap_Builder, keyComparator_, id<JavaUtilComparator>)
J2OBJC_FIELD_SETTER(ComGoogleCommonCollectImmutableMultimap_Builder, valueComparator_, id<JavaUtilComparator>)

FOUNDATION_EXPORT void ComGoogleCommonCollectImmutableMultimap_Builder_init(ComGoogleCommonCollectImmutableMultimap_Builder *self);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableMultimap_Builder *new_ComGoogleCommonCollectImmutableMultimap_Builder_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableMultimap_Builder *create_ComGoogleCommonCollectImmutableMultimap_Builder_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectImmutableMultimap_Builder)

#endif

#if !defined (ComGoogleCommonCollectImmutableMultimap_FieldSettersHolder_) && (INCLUDE_ALL_ComGoogleCommonCollectImmutableMultimap || defined(INCLUDE_ComGoogleCommonCollectImmutableMultimap_FieldSettersHolder))
#define ComGoogleCommonCollectImmutableMultimap_FieldSettersHolder_

@class ComGoogleCommonCollectSerialization_FieldSetter;

@interface ComGoogleCommonCollectImmutableMultimap_FieldSettersHolder : NSObject
@property (readonly, class, strong) ComGoogleCommonCollectSerialization_FieldSetter *MAP_FIELD_SETTER NS_SWIFT_NAME(MAP_FIELD_SETTER);
@property (readonly, class, strong) ComGoogleCommonCollectSerialization_FieldSetter *SIZE_FIELD_SETTER NS_SWIFT_NAME(SIZE_FIELD_SETTER);

+ (ComGoogleCommonCollectSerialization_FieldSetter *)MAP_FIELD_SETTER;

+ (ComGoogleCommonCollectSerialization_FieldSetter *)SIZE_FIELD_SETTER;

#pragma mark Package-Private

- (instancetype __nonnull)init;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonCollectImmutableMultimap_FieldSettersHolder)

inline ComGoogleCommonCollectSerialization_FieldSetter *ComGoogleCommonCollectImmutableMultimap_FieldSettersHolder_get_MAP_FIELD_SETTER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComGoogleCommonCollectSerialization_FieldSetter *ComGoogleCommonCollectImmutableMultimap_FieldSettersHolder_MAP_FIELD_SETTER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonCollectImmutableMultimap_FieldSettersHolder, MAP_FIELD_SETTER, ComGoogleCommonCollectSerialization_FieldSetter *)

inline ComGoogleCommonCollectSerialization_FieldSetter *ComGoogleCommonCollectImmutableMultimap_FieldSettersHolder_get_SIZE_FIELD_SETTER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComGoogleCommonCollectSerialization_FieldSetter *ComGoogleCommonCollectImmutableMultimap_FieldSettersHolder_SIZE_FIELD_SETTER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonCollectImmutableMultimap_FieldSettersHolder, SIZE_FIELD_SETTER, ComGoogleCommonCollectSerialization_FieldSetter *)

FOUNDATION_EXPORT void ComGoogleCommonCollectImmutableMultimap_FieldSettersHolder_init(ComGoogleCommonCollectImmutableMultimap_FieldSettersHolder *self);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableMultimap_FieldSettersHolder *new_ComGoogleCommonCollectImmutableMultimap_FieldSettersHolder_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableMultimap_FieldSettersHolder *create_ComGoogleCommonCollectImmutableMultimap_FieldSettersHolder_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectImmutableMultimap_FieldSettersHolder)

#endif

#if !defined (ComGoogleCommonCollectImmutableMultimap_Keys_) && (INCLUDE_ALL_ComGoogleCommonCollectImmutableMultimap || defined(INCLUDE_ComGoogleCommonCollectImmutableMultimap_Keys))
#define ComGoogleCommonCollectImmutableMultimap_Keys_

#define RESTRICT_ComGoogleCommonCollectImmutableMultiset 1
#define INCLUDE_ComGoogleCommonCollectImmutableMultiset 1
#include "com/google/common/collect/ImmutableMultiset.h"

@class ComGoogleCommonCollectImmutableMultimap;
@class ComGoogleCommonCollectImmutableSet;
@protocol ComGoogleCommonCollectMultiset_Entry;

@interface ComGoogleCommonCollectImmutableMultimap_Keys : ComGoogleCommonCollectImmutableMultiset

#pragma mark Public

- (jboolean)containsWithId:(id __nullable)object;

- (jint)countWithId:(id __nullable)element;

- (ComGoogleCommonCollectImmutableSet *)elementSet;

- (jint)size;

#pragma mark Package-Private

- (instancetype __nonnull)initWithComGoogleCommonCollectImmutableMultimap:(ComGoogleCommonCollectImmutableMultimap * __nonnull)outer$;

- (id<ComGoogleCommonCollectMultiset_Entry>)getEntryWithInt:(jint)index;

- (jboolean)isPartialView;

- (id)writeReplace;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectImmutableMultimap_Keys)

FOUNDATION_EXPORT void ComGoogleCommonCollectImmutableMultimap_Keys_initWithComGoogleCommonCollectImmutableMultimap_(ComGoogleCommonCollectImmutableMultimap_Keys *self, ComGoogleCommonCollectImmutableMultimap *outer$);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableMultimap_Keys *new_ComGoogleCommonCollectImmutableMultimap_Keys_initWithComGoogleCommonCollectImmutableMultimap_(ComGoogleCommonCollectImmutableMultimap *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableMultimap_Keys *create_ComGoogleCommonCollectImmutableMultimap_Keys_initWithComGoogleCommonCollectImmutableMultimap_(ComGoogleCommonCollectImmutableMultimap *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectImmutableMultimap_Keys)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCollectImmutableMultimap")
