//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/util/concurrent/ForwardingListenableFuture.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonUtilConcurrentForwardingListenableFuture")
#ifdef RESTRICT_ComGoogleCommonUtilConcurrentForwardingListenableFuture
#define INCLUDE_ALL_ComGoogleCommonUtilConcurrentForwardingListenableFuture 0
#else
#define INCLUDE_ALL_ComGoogleCommonUtilConcurrentForwardingListenableFuture 1
#endif
#undef RESTRICT_ComGoogleCommonUtilConcurrentForwardingListenableFuture
#ifdef INCLUDE_ComGoogleCommonUtilConcurrentForwardingListenableFuture_SimpleForwardingListenableFuture
#define INCLUDE_ComGoogleCommonUtilConcurrentForwardingListenableFuture 1
#endif

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonUtilConcurrentForwardingListenableFuture_) && (INCLUDE_ALL_ComGoogleCommonUtilConcurrentForwardingListenableFuture || defined(INCLUDE_ComGoogleCommonUtilConcurrentForwardingListenableFuture))
#define ComGoogleCommonUtilConcurrentForwardingListenableFuture_

#define RESTRICT_ComGoogleCommonUtilConcurrentForwardingFuture 1
#define INCLUDE_ComGoogleCommonUtilConcurrentForwardingFuture 1
#include "com/google/common/util/concurrent/ForwardingFuture.h"

#define RESTRICT_ComGoogleCommonUtilConcurrentListenableFuture 1
#define INCLUDE_ComGoogleCommonUtilConcurrentListenableFuture 1
#include "com/google/common/util/concurrent/ListenableFuture.h"

@protocol JavaLangRunnable;
@protocol JavaUtilConcurrentExecutor;

/*!
 @brief A <code>ListenableFuture</code> which forwards all its method calls to another future.Subclasses
  should override one or more methods to modify the behavior of the backing future as desired per the 
 <a href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 <p>Most subclasses can just use <code>SimpleForwardingListenableFuture</code>.
 @author Shardul Deo
 @since 4.0
 */
@interface ComGoogleCommonUtilConcurrentForwardingListenableFuture : ComGoogleCommonUtilConcurrentForwardingFuture < ComGoogleCommonUtilConcurrentListenableFuture >

#pragma mark Public

- (void)addListenerWithJavaLangRunnable:(id<JavaLangRunnable> __nonnull)listener
         withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor> __nonnull)exec;

#pragma mark Protected

/*!
 @brief Constructor for use by subclasses.
 */
- (instancetype __nonnull)init;

- (id<ComGoogleCommonUtilConcurrentListenableFuture>)delegate;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentForwardingListenableFuture)

FOUNDATION_EXPORT void ComGoogleCommonUtilConcurrentForwardingListenableFuture_init(ComGoogleCommonUtilConcurrentForwardingListenableFuture *self);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentForwardingListenableFuture)

#endif

#if !defined (ComGoogleCommonUtilConcurrentForwardingListenableFuture_SimpleForwardingListenableFuture_) && (INCLUDE_ALL_ComGoogleCommonUtilConcurrentForwardingListenableFuture || defined(INCLUDE_ComGoogleCommonUtilConcurrentForwardingListenableFuture_SimpleForwardingListenableFuture))
#define ComGoogleCommonUtilConcurrentForwardingListenableFuture_SimpleForwardingListenableFuture_

@protocol ComGoogleCommonUtilConcurrentListenableFuture;

/*!
 @brief A simplified version of <code>ForwardingListenableFuture</code> where subclasses can pass in an
  already constructed <code>ListenableFuture</code> as the delegate.
 @since 9.0
 */
@interface ComGoogleCommonUtilConcurrentForwardingListenableFuture_SimpleForwardingListenableFuture : ComGoogleCommonUtilConcurrentForwardingListenableFuture

#pragma mark Protected

- (instancetype __nonnull)initWithComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture> __nonnull)delegate;

- (id<ComGoogleCommonUtilConcurrentListenableFuture>)delegate;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentForwardingListenableFuture_SimpleForwardingListenableFuture)

FOUNDATION_EXPORT void ComGoogleCommonUtilConcurrentForwardingListenableFuture_SimpleForwardingListenableFuture_initWithComGoogleCommonUtilConcurrentListenableFuture_(ComGoogleCommonUtilConcurrentForwardingListenableFuture_SimpleForwardingListenableFuture *self, id<ComGoogleCommonUtilConcurrentListenableFuture> delegate);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentForwardingListenableFuture_SimpleForwardingListenableFuture)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonUtilConcurrentForwardingListenableFuture")
