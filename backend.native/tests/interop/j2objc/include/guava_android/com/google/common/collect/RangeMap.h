//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/collect/RangeMap.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCollectRangeMap")
#ifdef RESTRICT_ComGoogleCommonCollectRangeMap
#define INCLUDE_ALL_ComGoogleCommonCollectRangeMap 0
#else
#define INCLUDE_ALL_ComGoogleCommonCollectRangeMap 1
#endif
#undef RESTRICT_ComGoogleCommonCollectRangeMap

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCollectRangeMap_) && (INCLUDE_ALL_ComGoogleCommonCollectRangeMap || defined(INCLUDE_ComGoogleCommonCollectRangeMap))
#define ComGoogleCommonCollectRangeMap_

@class ComGoogleCommonCollectRange;
@protocol JavaLangComparable;
@protocol JavaUtilMap;
@protocol JavaUtilMap_Entry;

/*!
 @brief A mapping from disjoint nonempty ranges to non-null values.Queries look up the value associated
  with the range (if any) that contains a specified key.
 <p>In contrast to <code>RangeSet</code>, no "coalescing" is done of connected
  ranges, even if they are mapped to the same value.
 @author Louis Wasserman
 @since 14.0
 */
@protocol ComGoogleCommonCollectRangeMap < JavaObject >

/*!
 @brief Returns the value associated with the specified key, or <code>null</code> if there is no such value.
 <p>Specifically, if any range in this range map contains the specified key, the value
  associated with that range is returned.
 */
- (id __nullable)getWithJavaLangComparable:(id<JavaLangComparable> __nonnull)key;

/*!
 @brief Returns the range containing this key and its associated value, if such a range is present in
  the range map, or <code>null</code> otherwise.
 */
- (id<JavaUtilMap_Entry> __nullable)getEntryWithJavaLangComparable:(id<JavaLangComparable> __nonnull)key;

/*!
 @brief Returns the minimal range enclosing the ranges in this 
 <code>RangeMap</code>.
 @throw NoSuchElementExceptionif this range map is empty
 */
- (ComGoogleCommonCollectRange *)span;

/*!
 @brief Maps a range to a specified value (optional operation).
 <p>Specifically, after a call to <code>put(range, value)</code>, if <code>range.contains(k)</code>
 , then <code>get(k)</code> will return 
 <code>value</code>.
  
 <p>If <code>range</code> is empty, then this is a no-op.
 */
- (void)putWithComGoogleCommonCollectRange:(ComGoogleCommonCollectRange * __nonnull)range
                                    withId:(id __nonnull)value;

/*!
 @brief Maps a range to a specified value, coalescing this range with any existing ranges with the same
  value that are connected to this range.
 <p>The behavior of <code>get(k)</code> after calling this method is identical to
  the behavior described in <code>put(range, value)</code>, however the ranges
  returned from <code>asMapOfRanges</code> will be different if there were existing entries which
  connect to the given range and value. 
 <p>Even if the input range is empty, if it is connected on both sides by ranges mapped to the
  same value those two ranges will be coalesced. 
 <p><b>Note:</b> coalescing requires calling <code>.equals()</code> on any connected values, which
  may be expensive depending on the value type. Using this method on range maps with large values
  such as <code>Collection</code> types is discouraged.
 @since 22.0
 */
- (void)putCoalescingWithComGoogleCommonCollectRange:(ComGoogleCommonCollectRange * __nonnull)range
                                              withId:(id __nonnull)value;

/*!
 @brief Puts all the associations from <code>rangeMap</code> into this range map (optional operation).
 */
- (void)putAllWithComGoogleCommonCollectRangeMap:(id<ComGoogleCommonCollectRangeMap> __nonnull)rangeMap;

/*!
 @brief Removes all associations from this range map (optional operation).
 */
- (void)clear;

/*!
 @brief Removes all associations from this range map in the specified range (optional operation).
 <p>If <code>!range.contains(k)</code>, <code>get(k)</code> will return the same result
  before and after a call to <code>remove(range)</code>. If <code>range.contains(k)</code>, then after a
  call to <code>remove(range)</code>, <code>get(k)</code> will return <code>null</code>.
 */
- (void)removeWithComGoogleCommonCollectRange:(ComGoogleCommonCollectRange * __nonnull)range;

/*!
 @brief Returns a view of this range map as an unmodifiable <code>Map<Range<K>, V></code>.Modifications to
  this range map are guaranteed to read through to the returned <code>Map</code>.
 <p>The returned <code>Map</code> iterates over entries in ascending order of the bounds of the 
 <code>Range</code> entries. 
 <p>It is guaranteed that no empty ranges will be in the returned <code>Map</code>.
 */
- (id<JavaUtilMap>)asMapOfRanges;

/*!
 @brief Returns a view of this range map as an unmodifiable <code>Map<Range<K>, V></code>.Modifications to
  this range map are guaranteed to read through to the returned <code>Map</code>.
 <p>The returned <code>Map</code> iterates over entries in descending order of the bounds of the 
 <code>Range</code> entries. 
 <p>It is guaranteed that no empty ranges will be in the returned <code>Map</code>.
 @since 19.0
 */
- (id<JavaUtilMap>)asDescendingMapOfRanges;

/*!
 @brief Returns a view of the part of this range map that intersects with <code>range</code>.
 <p>For example, if <code>rangeMap</code> had the entries <code>[1, 5] => "foo", (6, 8) => "bar",
  (10, âˆž) => "baz"</code>
  then <code>rangeMap.subRangeMap(Range.open(3, 12))</code> would return a range map
  with the entries <code>(3, 5] => "foo", (6, 8) => "bar", (10, 12) => "baz"</code>.
  
 <p>The returned range map supports all optional operations that this range map supports, except
  for <code>asMapOfRanges().iterator().remove()</code>.
  
 <p>The returned range map will throw an <code>IllegalArgumentException</code> on an attempt to
  insert a range not enclosed by <code>range</code>.
 */
- (id<ComGoogleCommonCollectRangeMap>)subRangeMapWithComGoogleCommonCollectRange:(ComGoogleCommonCollectRange * __nonnull)range;

/*!
 @brief Returns <code>true</code> if <code>obj</code> is another <code>RangeMap</code> that has an equivalent <code>asMapOfRanges()</code>
 .
 */
- (jboolean)isEqual:(id __nullable)o;

/*!
 @brief Returns <code>asMapOfRanges().hashCode()</code>.
 */
- (NSUInteger)hash;

/*!
 @brief Returns a readable string representation of this range map.
 */
- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectRangeMap)

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectRangeMap)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCollectRangeMap")
