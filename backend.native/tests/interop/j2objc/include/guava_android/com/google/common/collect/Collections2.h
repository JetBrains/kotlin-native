//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/collect/Collections2.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCollectCollections2")
#ifdef RESTRICT_ComGoogleCommonCollectCollections2
#define INCLUDE_ALL_ComGoogleCommonCollectCollections2 0
#else
#define INCLUDE_ALL_ComGoogleCommonCollectCollections2 1
#endif
#undef RESTRICT_ComGoogleCommonCollectCollections2

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCollectCollections2_) && (INCLUDE_ALL_ComGoogleCommonCollectCollections2 || defined(INCLUDE_ComGoogleCommonCollectCollections2))
#define ComGoogleCommonCollectCollections2_

@class JavaLangStringBuilder;
@protocol ComGoogleCommonBaseFunction;
@protocol ComGoogleCommonBasePredicate;
@protocol JavaLangIterable;
@protocol JavaUtilCollection;
@protocol JavaUtilComparator;

/*!
 @brief Provides static methods for working with <code>Collection</code> instances.
 <p><b>Java 8 users:</b> several common uses for this class are now more comprehensively addressed
  by the new <code>java.util.stream.Stream</code> library. Read the method documentation below for
  comparisons. These methods are not being deprecated, but we gently encourage you to migrate to
  streams.
 @author Chris Povirk
 @author Mike Bostock
 @author Jared Levy
 @since 2.0
 */
@interface ComGoogleCommonCollectCollections2 : NSObject

#pragma mark Public

/*!
 @brief Returns the elements of <code>unfiltered</code> that satisfy a predicate.The returned collection is
  a live view of <code>unfiltered</code>; changes to one affect the other.
 <p>The resulting collection's iterator does not support <code>remove()</code>, but all other
  collection methods are supported. When given an element that doesn't satisfy the predicate, the
  collection's <code>add()</code> and <code>addAll()</code> methods throw an <code>IllegalArgumentException</code>
 . When methods such as <code>removeAll()</code> and <code>clear()</code> are
  called on the filtered collection, only elements that satisfy the filter will be removed from
  the underlying collection. 
 <p>The returned collection isn't threadsafe or serializable, even if <code>unfiltered</code> is. 
 <p>Many of the filtered collection's methods, such as <code>size()</code>, iterate across every
  element in the underlying collection and determine which elements satisfy the filter. When a
  live view is <i>not</i> needed, it may be faster to copy <code>Iterables.filter(unfiltered,
  predicate)</code>
  and use the copy. 
 <p><b>Warning:</b> <code>predicate</code> must be <i>consistent with equals</i>, as documented at 
 <code>Predicate.apply</code>. Do not provide a predicate such as <code>Predicates.instanceOf(ArrayList.class)</code>
 , which is inconsistent with equals. (See <code>Iterables.filter(Iterable, Class)</code>
  for related functionality.) 
 <p><b><code>Stream</code> equivalent:</b> <code>Stream.filter</code>.
 */
+ (id<JavaUtilCollection>)filterWithJavaUtilCollection:(id<JavaUtilCollection> __nonnull)unfiltered
                      withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate> __nonnull)predicate;

/*!
 @brief Returns a <code>Collection</code> of all the permutations of the specified <code>Iterable</code>.
 <p><i>Notes:</i> This is an implementation of the algorithm for Lexicographical Permutations
  Generation, described in Knuth's "The Art of Computer Programming", Volume 4, Chapter 7,
  Section 7.2.1.2. The iteration order follows the lexicographical order. This means that the
  first permutation will be in ascending order, and the last will be in descending order. 
 <p>Duplicate elements are considered equal. For example, the list [1, 1] will have only one
  permutation, instead of two. This is why the elements have to implement <code>Comparable</code>.
  
 <p>An empty iterable has only one permutation, which is an empty list. 
 <p>This method is equivalent to <code>Collections2.orderedPermutations(list,
  Ordering.natural())</code>
 .
 @param elements the original iterable whose elements have to be permuted.
 @return an immutable <code>Collection</code> containing all the different permutations of the
      original iterable.
 @throw NullPointerExceptionif the specified iterable is null or has any null elements.
 @since 12.0
 */
+ (id<JavaUtilCollection>)orderedPermutationsWithJavaLangIterable:(id<JavaLangIterable> __nonnull)elements;

/*!
 @brief Returns a <code>Collection</code> of all the permutations of the specified <code>Iterable</code> using
  the specified <code>Comparator</code> for establishing the lexicographical ordering.
 <p>Examples:
  
 @code
 for (List<String> perm : orderedPermutations(asList("b", "c", "a"))) {
    println(perm);
  }
  // -> ["a", "b", "c"]
  // -> ["a", "c", "b"]
  // -> ["b", "a", "c"]
  // -> ["b", "c", "a"]
  // -> ["c", "a", "b"]
  // -> ["c", "b", "a"]
  for (List<Integer> perm : orderedPermutations(asList(1, 2, 2, 1))) {
    println(perm);
  }
  // -> [1, 1, 2, 2]
  // -> [1, 2, 1, 2]
  // -> [1, 2, 2, 1]
  // -> [2, 1, 1, 2]
  // -> [2, 1, 2, 1]
  // -> [2, 2, 1, 1] 
 
@endcode
  
 <p><i>Notes:</i> This is an implementation of the algorithm for Lexicographical Permutations
  Generation, described in Knuth's "The Art of Computer Programming", Volume 4, Chapter 7,
  Section 7.2.1.2. The iteration order follows the lexicographical order. This means that the
  first permutation will be in ascending order, and the last will be in descending order. 
 <p>Elements that compare equal are considered equal and no new permutations are created by
  swapping them. 
 <p>An empty iterable has only one permutation, which is an empty list.
 @param elements the original iterable whose elements have to be permuted.
 @param comparator a comparator for the iterable's elements.
 @return an immutable <code>Collection</code> containing all the different permutations of the
      original iterable.
 @throw NullPointerExceptionIf the specified iterable is null, has any null elements, or if
      the specified comparator is null.
 @since 12.0
 */
+ (id<JavaUtilCollection>)orderedPermutationsWithJavaLangIterable:(id<JavaLangIterable> __nonnull)elements
                                           withJavaUtilComparator:(id<JavaUtilComparator> __nonnull)comparator;

/*!
 @brief Returns a <code>Collection</code> of all the permutations of the specified <code>Collection</code>.
 <p><i>Notes:</i> This is an implementation of the Plain Changes algorithm for permutations
  generation, described in Knuth's "The Art of Computer Programming", Volume 4, Chapter 7,
  Section 7.2.1.2. 
 <p>If the input list contains equal elements, some of the generated permutations will be equal. 
 <p>An empty collection has only one permutation, which is an empty list.
 @param elements the original collection whose elements have to be permuted.
 @return an immutable <code>Collection</code> containing all the different permutations of the
      original collection.
 @throw NullPointerExceptionif the specified collection is null or has any null elements.
 @since 12.0
 */
+ (id<JavaUtilCollection>)permutationsWithJavaUtilCollection:(id<JavaUtilCollection> __nonnull)elements;

/*!
 @brief Returns a collection that applies <code>function</code> to each element of <code>fromCollection</code>.
 The returned collection is a live view of <code>fromCollection</code>; changes to one affect the
  other. 
 <p>The returned collection's <code>add()</code> and <code>addAll()</code> methods throw an <code>UnsupportedOperationException</code>
 . All other collection methods are supported, as long as <code>fromCollection</code>
  supports them. 
 <p>The returned collection isn't threadsafe or serializable, even if <code>fromCollection</code> is. 
 <p>When a live view is <i>not</i> needed, it may be faster to copy the transformed collection
  and use the copy. 
 <p>If the input <code>Collection</code> is known to be a <code>List</code>, consider <code>Lists.transform</code>
 . If only an <code>Iterable</code> is available, use <code>Iterables.transform</code>.
  
 <p><b><code>Stream</code> equivalent:</b> <code>Stream.map</code>.
 */
+ (id<JavaUtilCollection>)transformWithJavaUtilCollection:(id<JavaUtilCollection> __nonnull)fromCollection
                          withComGoogleCommonBaseFunction:(id<ComGoogleCommonBaseFunction> __nonnull)function;

#pragma mark Package-Private

/*!
 @brief Used to avoid http://bugs.sun.com/view_bug.do?
 bug_id=6558557
 */
+ (id<JavaUtilCollection>)castWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable;

/*!
 @brief Returns <code>true</code> if the collection <code>self</code> contains all of the elements in the
  collection <code>c</code>.
 <p>This method iterates over the specified collection <code>c</code>, checking each element returned
  by the iterator in turn to see if it is contained in the specified collection <code>self</code>. If
  all elements are so contained, <code>true</code> is returned, otherwise <code>false</code>.
 @param self_ a collection which might contain all elements in <code>c</code>
 @param c a collection whose elements might be contained by <code>self</code>
 */
+ (jboolean)containsAllImplWithJavaUtilCollection:(id<JavaUtilCollection> __nonnull)self_
                           withJavaUtilCollection:(id<JavaUtilCollection> __nonnull)c;

/*!
 @brief Returns best-effort-sized StringBuilder based on the given collection size.
 */
+ (JavaLangStringBuilder *)newStringBuilderForCollectionWithInt:(jint)size OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Delegates to <code>Collection.contains</code>.Returns <code>false</code> if the <code>contains</code> method
  throws a <code>ClassCastException</code> or <code>NullPointerException</code>.
 */
+ (jboolean)safeContainsWithJavaUtilCollection:(id<JavaUtilCollection> __nonnull)collection
                                        withId:(id __nullable)object;

/*!
 @brief Delegates to <code>Collection.remove</code>.Returns <code>false</code> if the <code>remove</code> method
  throws a <code>ClassCastException</code> or <code>NullPointerException</code>.
 */
+ (jboolean)safeRemoveWithJavaUtilCollection:(id<JavaUtilCollection> __nonnull)collection
                                      withId:(id __nullable)object;

/*!
 @brief An implementation of <code>Collection.toString()</code>.
 */
+ (NSString *)toStringImplWithJavaUtilCollection:(id<JavaUtilCollection> __nonnull)collection;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectCollections2)

FOUNDATION_EXPORT id<JavaUtilCollection> ComGoogleCommonCollectCollections2_filterWithJavaUtilCollection_withComGoogleCommonBasePredicate_(id<JavaUtilCollection> unfiltered, id<ComGoogleCommonBasePredicate> predicate);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectCollections2_safeContainsWithJavaUtilCollection_withId_(id<JavaUtilCollection> collection, id object);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectCollections2_safeRemoveWithJavaUtilCollection_withId_(id<JavaUtilCollection> collection, id object);

FOUNDATION_EXPORT id<JavaUtilCollection> ComGoogleCommonCollectCollections2_transformWithJavaUtilCollection_withComGoogleCommonBaseFunction_(id<JavaUtilCollection> fromCollection, id<ComGoogleCommonBaseFunction> function);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectCollections2_containsAllImplWithJavaUtilCollection_withJavaUtilCollection_(id<JavaUtilCollection> self_, id<JavaUtilCollection> c);

FOUNDATION_EXPORT NSString *ComGoogleCommonCollectCollections2_toStringImplWithJavaUtilCollection_(id<JavaUtilCollection> collection);

FOUNDATION_EXPORT JavaLangStringBuilder *ComGoogleCommonCollectCollections2_newStringBuilderForCollectionWithInt_(jint size);

FOUNDATION_EXPORT id<JavaUtilCollection> ComGoogleCommonCollectCollections2_castWithJavaLangIterable_(id<JavaLangIterable> iterable);

FOUNDATION_EXPORT id<JavaUtilCollection> ComGoogleCommonCollectCollections2_orderedPermutationsWithJavaLangIterable_(id<JavaLangIterable> elements);

FOUNDATION_EXPORT id<JavaUtilCollection> ComGoogleCommonCollectCollections2_orderedPermutationsWithJavaLangIterable_withJavaUtilComparator_(id<JavaLangIterable> elements, id<JavaUtilComparator> comparator);

FOUNDATION_EXPORT id<JavaUtilCollection> ComGoogleCommonCollectCollections2_permutationsWithJavaUtilCollection_(id<JavaUtilCollection> elements);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectCollections2)

#endif

#if !defined (ComGoogleCommonCollectCollections2_FilteredCollection_) && (INCLUDE_ALL_ComGoogleCommonCollectCollections2 || defined(INCLUDE_ComGoogleCommonCollectCollections2_FilteredCollection))
#define ComGoogleCommonCollectCollections2_FilteredCollection_

#define RESTRICT_JavaUtilAbstractCollection 1
#define INCLUDE_JavaUtilAbstractCollection 1
#include "java/util/AbstractCollection.h"

@class IOSObjectArray;
@protocol ComGoogleCommonBasePredicate;
@protocol JavaUtilCollection;
@protocol JavaUtilIterator;

@interface ComGoogleCommonCollectCollections2_FilteredCollection : JavaUtilAbstractCollection {
 @public
  id<JavaUtilCollection> unfiltered_;
  id<ComGoogleCommonBasePredicate> predicate_;
}

#pragma mark Public

- (jboolean)addWithId:(id __nonnull)element;

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection> __nonnull)collection;

- (void)clear;

- (jboolean)containsWithId:(id __nullable)element;

- (jboolean)containsAllWithJavaUtilCollection:(id<JavaUtilCollection> __nonnull)collection;

- (jboolean)isEmpty;

- (id<JavaUtilIterator>)iterator;

- (jboolean)removeWithId:(id __nonnull)element;

- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection> __nonnull)collection;

- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection> __nonnull)collection;

- (jint)size;

- (IOSObjectArray *)toArray;

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray * __nonnull)array;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilCollection:(id<JavaUtilCollection> __nonnull)unfiltered
                    withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate> __nonnull)predicate;

- (ComGoogleCommonCollectCollections2_FilteredCollection *)createCombinedWithComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate> __nonnull)newPredicate;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectCollections2_FilteredCollection)

J2OBJC_FIELD_SETTER(ComGoogleCommonCollectCollections2_FilteredCollection, unfiltered_, id<JavaUtilCollection>)
J2OBJC_FIELD_SETTER(ComGoogleCommonCollectCollections2_FilteredCollection, predicate_, id<ComGoogleCommonBasePredicate>)

FOUNDATION_EXPORT void ComGoogleCommonCollectCollections2_FilteredCollection_initWithJavaUtilCollection_withComGoogleCommonBasePredicate_(ComGoogleCommonCollectCollections2_FilteredCollection *self, id<JavaUtilCollection> unfiltered, id<ComGoogleCommonBasePredicate> predicate);

FOUNDATION_EXPORT ComGoogleCommonCollectCollections2_FilteredCollection *new_ComGoogleCommonCollectCollections2_FilteredCollection_initWithJavaUtilCollection_withComGoogleCommonBasePredicate_(id<JavaUtilCollection> unfiltered, id<ComGoogleCommonBasePredicate> predicate) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectCollections2_FilteredCollection *create_ComGoogleCommonCollectCollections2_FilteredCollection_initWithJavaUtilCollection_withComGoogleCommonBasePredicate_(id<JavaUtilCollection> unfiltered, id<ComGoogleCommonBasePredicate> predicate);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectCollections2_FilteredCollection)

#endif

#if !defined (ComGoogleCommonCollectCollections2_TransformedCollection_) && (INCLUDE_ALL_ComGoogleCommonCollectCollections2 || defined(INCLUDE_ComGoogleCommonCollectCollections2_TransformedCollection))
#define ComGoogleCommonCollectCollections2_TransformedCollection_

#define RESTRICT_JavaUtilAbstractCollection 1
#define INCLUDE_JavaUtilAbstractCollection 1
#include "java/util/AbstractCollection.h"

@protocol ComGoogleCommonBaseFunction;
@protocol JavaUtilCollection;
@protocol JavaUtilIterator;

@interface ComGoogleCommonCollectCollections2_TransformedCollection : JavaUtilAbstractCollection {
 @public
  id<JavaUtilCollection> fromCollection_;
  id<ComGoogleCommonBaseFunction> function_;
}

#pragma mark Public

- (void)clear;

- (jboolean)isEmpty;

- (id<JavaUtilIterator>)iterator;

- (jint)size;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilCollection:(id<JavaUtilCollection> __nonnull)fromCollection
                     withComGoogleCommonBaseFunction:(id<ComGoogleCommonBaseFunction> __nonnull)function;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectCollections2_TransformedCollection)

J2OBJC_FIELD_SETTER(ComGoogleCommonCollectCollections2_TransformedCollection, fromCollection_, id<JavaUtilCollection>)
J2OBJC_FIELD_SETTER(ComGoogleCommonCollectCollections2_TransformedCollection, function_, id<ComGoogleCommonBaseFunction>)

FOUNDATION_EXPORT void ComGoogleCommonCollectCollections2_TransformedCollection_initWithJavaUtilCollection_withComGoogleCommonBaseFunction_(ComGoogleCommonCollectCollections2_TransformedCollection *self, id<JavaUtilCollection> fromCollection, id<ComGoogleCommonBaseFunction> function);

FOUNDATION_EXPORT ComGoogleCommonCollectCollections2_TransformedCollection *new_ComGoogleCommonCollectCollections2_TransformedCollection_initWithJavaUtilCollection_withComGoogleCommonBaseFunction_(id<JavaUtilCollection> fromCollection, id<ComGoogleCommonBaseFunction> function) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectCollections2_TransformedCollection *create_ComGoogleCommonCollectCollections2_TransformedCollection_initWithJavaUtilCollection_withComGoogleCommonBaseFunction_(id<JavaUtilCollection> fromCollection, id<ComGoogleCommonBaseFunction> function);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectCollections2_TransformedCollection)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCollectCollections2")
