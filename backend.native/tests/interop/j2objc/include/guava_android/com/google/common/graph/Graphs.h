//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/graph/Graphs.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonGraphGraphs")
#ifdef RESTRICT_ComGoogleCommonGraphGraphs
#define INCLUDE_ALL_ComGoogleCommonGraphGraphs 0
#else
#define INCLUDE_ALL_ComGoogleCommonGraphGraphs 1
#endif
#undef RESTRICT_ComGoogleCommonGraphGraphs

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonGraphGraphs_) && (INCLUDE_ALL_ComGoogleCommonGraphGraphs || defined(INCLUDE_ComGoogleCommonGraphGraphs))
#define ComGoogleCommonGraphGraphs_

@protocol ComGoogleCommonGraphGraph;
@protocol ComGoogleCommonGraphMutableGraph;
@protocol ComGoogleCommonGraphMutableNetwork;
@protocol ComGoogleCommonGraphMutableValueGraph;
@protocol ComGoogleCommonGraphNetwork;
@protocol ComGoogleCommonGraphValueGraph;
@protocol JavaLangIterable;
@protocol JavaUtilSet;

/*!
 @brief Static utility methods for <code>Graph</code>, <code>ValueGraph</code>, and <code>Network</code> instances.
 @author James Sexton
 @author Joshua O'Madadhain
 @since 20.0
 */
@interface ComGoogleCommonGraphGraphs : NSObject

#pragma mark Public

/*!
 @brief Creates a mutable copy of <code>graph</code> with the same nodes and edges.
 */
+ (id<ComGoogleCommonGraphMutableGraph>)copyOfWithComGoogleCommonGraphGraph:(id<ComGoogleCommonGraphGraph> __nonnull)graph OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Creates a mutable copy of <code>network</code> with the same nodes and edges.
 */
+ (id<ComGoogleCommonGraphMutableNetwork>)copyOfWithComGoogleCommonGraphNetwork:(id<ComGoogleCommonGraphNetwork> __nonnull)network OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Creates a mutable copy of <code>graph</code> with the same nodes, edges, and edge values.
 */
+ (id<ComGoogleCommonGraphMutableValueGraph>)copyOfWithComGoogleCommonGraphValueGraph:(id<ComGoogleCommonGraphValueGraph> __nonnull)graph OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns true if <code>graph</code> has at least one cycle.A cycle is defined as a non-empty subset
  of edges in a graph arranged to form a path (a sequence of adjacent outgoing edges) starting
  and ending with the same node.
 <p>This method will detect any non-empty cycle, including self-loops (a cycle of length 1).
 */
+ (jboolean)hasCycleWithComGoogleCommonGraphGraph:(id<ComGoogleCommonGraphGraph> __nonnull)graph;

/*!
 @brief Returns true if <code>network</code> has at least one cycle.A cycle is defined as a non-empty
  subset of edges in a graph arranged to form a path (a sequence of adjacent outgoing edges)
  starting and ending with the same node.
 <p>This method will detect any non-empty cycle, including self-loops (a cycle of length 1).
 */
+ (jboolean)hasCycleWithComGoogleCommonGraphNetwork:(id<ComGoogleCommonGraphNetwork> __nonnull)network;

/*!
 @brief Returns the subgraph of <code>graph</code> induced by <code>nodes</code>.This subgraph is a new graph
  that contains all of the nodes in <code>nodes</code>, and all of the <code>edges</code>
  from <code>graph</code> for which both nodes are contained by <code>nodes</code>.
 @throw IllegalArgumentExceptionif any element in <code>nodes</code> is not a node in the graph
 */
+ (id<ComGoogleCommonGraphMutableGraph>)inducedSubgraphWithComGoogleCommonGraphGraph:(id<ComGoogleCommonGraphGraph> __nonnull)graph
                                                                withJavaLangIterable:(id<JavaLangIterable> __nonnull)nodes;

/*!
 @brief Returns the subgraph of <code>network</code> induced by <code>nodes</code>.This subgraph is a new graph
  that contains all of the nodes in <code>nodes</code>, and all of the <code>edges</code>
  from <code>network</code> for which the <code>incident nodes</code> are
  both contained by <code>nodes</code>.
 @throw IllegalArgumentExceptionif any element in <code>nodes</code> is not a node in the graph
 */
+ (id<ComGoogleCommonGraphMutableNetwork>)inducedSubgraphWithComGoogleCommonGraphNetwork:(id<ComGoogleCommonGraphNetwork> __nonnull)network
                                                                    withJavaLangIterable:(id<JavaLangIterable> __nonnull)nodes;

/*!
 @brief Returns the subgraph of <code>graph</code> induced by <code>nodes</code>.This subgraph is a new graph
  that contains all of the nodes in <code>nodes</code>, and all of the <code>edges</code>
  (and associated edge values) from <code>graph</code> for which both nodes are contained by <code>nodes</code>
 .
 @throw IllegalArgumentExceptionif any element in <code>nodes</code> is not a node in the graph
 */
+ (id<ComGoogleCommonGraphMutableValueGraph>)inducedSubgraphWithComGoogleCommonGraphValueGraph:(id<ComGoogleCommonGraphValueGraph> __nonnull)graph
                                                                          withJavaLangIterable:(id<JavaLangIterable> __nonnull)nodes;

/*!
 @brief Returns the set of nodes that are reachable from <code>node</code>.Node B is defined as reachable
  from node A if there exists a path (a sequence of adjacent outgoing edges) starting at node A
  and ending at node B.
 Note that a node is always reachable from itself via a zero-length path. 
 <p>This is a "snapshot" based on the current topology of <code>graph</code>, rather than a live view
  of the set of nodes reachable from <code>node</code>. In other words, the returned <code>Set</code> will
  not be updated after modifications to <code>graph</code>.
 @throw IllegalArgumentExceptionif <code>node</code> is not present in <code>graph</code>
 */
+ (id<JavaUtilSet>)reachableNodesWithComGoogleCommonGraphGraph:(id<ComGoogleCommonGraphGraph> __nonnull)graph
                                                        withId:(id __nonnull)node;

/*!
 @brief Returns the transitive closure of <code>graph</code>.The transitive closure of a graph is another
  graph with an edge connecting node A to node B if node B is <code>reachable</code>
  from node A.
 <p>This is a "snapshot" based on the current topology of <code>graph</code>, rather than a live view
  of the transitive closure of <code>graph</code>. In other words, the returned <code>Graph</code> will not
  be updated after modifications to <code>graph</code>.
 */
+ (id<ComGoogleCommonGraphGraph>)transitiveClosureWithComGoogleCommonGraphGraph:(id<ComGoogleCommonGraphGraph> __nonnull)graph;

/*!
 @brief Returns a view of <code>graph</code> with the direction (if any) of every edge reversed.All other
  properties remain intact, and further updates to <code>graph</code> will be reflected in the view.
 */
+ (id<ComGoogleCommonGraphGraph>)transposeWithComGoogleCommonGraphGraph:(id<ComGoogleCommonGraphGraph> __nonnull)graph;

/*!
 @brief Returns a view of <code>network</code> with the direction (if any) of every edge reversed.All other
  properties remain intact, and further updates to <code>network</code> will be reflected in the view.
 */
+ (id<ComGoogleCommonGraphNetwork>)transposeWithComGoogleCommonGraphNetwork:(id<ComGoogleCommonGraphNetwork> __nonnull)network;

/*!
 @brief Returns a view of <code>graph</code> with the direction (if any) of every edge reversed.All other
  properties remain intact, and further updates to <code>graph</code> will be reflected in the view.
 */
+ (id<ComGoogleCommonGraphValueGraph>)transposeWithComGoogleCommonGraphValueGraph:(id<ComGoogleCommonGraphValueGraph> __nonnull)graph;

#pragma mark Package-Private

+ (jint)checkNonNegativeWithInt:(jint)value;

+ (jlong)checkNonNegativeWithLong:(jlong)value;

+ (jint)checkPositiveWithInt:(jint)value;

+ (jlong)checkPositiveWithLong:(jlong)value;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonGraphGraphs)

FOUNDATION_EXPORT jboolean ComGoogleCommonGraphGraphs_hasCycleWithComGoogleCommonGraphGraph_(id<ComGoogleCommonGraphGraph> graph);

FOUNDATION_EXPORT jboolean ComGoogleCommonGraphGraphs_hasCycleWithComGoogleCommonGraphNetwork_(id<ComGoogleCommonGraphNetwork> network);

FOUNDATION_EXPORT id<ComGoogleCommonGraphGraph> ComGoogleCommonGraphGraphs_transitiveClosureWithComGoogleCommonGraphGraph_(id<ComGoogleCommonGraphGraph> graph);

FOUNDATION_EXPORT id<JavaUtilSet> ComGoogleCommonGraphGraphs_reachableNodesWithComGoogleCommonGraphGraph_withId_(id<ComGoogleCommonGraphGraph> graph, id node);

FOUNDATION_EXPORT id<ComGoogleCommonGraphGraph> ComGoogleCommonGraphGraphs_transposeWithComGoogleCommonGraphGraph_(id<ComGoogleCommonGraphGraph> graph);

FOUNDATION_EXPORT id<ComGoogleCommonGraphValueGraph> ComGoogleCommonGraphGraphs_transposeWithComGoogleCommonGraphValueGraph_(id<ComGoogleCommonGraphValueGraph> graph);

FOUNDATION_EXPORT id<ComGoogleCommonGraphNetwork> ComGoogleCommonGraphGraphs_transposeWithComGoogleCommonGraphNetwork_(id<ComGoogleCommonGraphNetwork> network);

FOUNDATION_EXPORT id<ComGoogleCommonGraphMutableGraph> ComGoogleCommonGraphGraphs_inducedSubgraphWithComGoogleCommonGraphGraph_withJavaLangIterable_(id<ComGoogleCommonGraphGraph> graph, id<JavaLangIterable> nodes);

FOUNDATION_EXPORT id<ComGoogleCommonGraphMutableValueGraph> ComGoogleCommonGraphGraphs_inducedSubgraphWithComGoogleCommonGraphValueGraph_withJavaLangIterable_(id<ComGoogleCommonGraphValueGraph> graph, id<JavaLangIterable> nodes);

FOUNDATION_EXPORT id<ComGoogleCommonGraphMutableNetwork> ComGoogleCommonGraphGraphs_inducedSubgraphWithComGoogleCommonGraphNetwork_withJavaLangIterable_(id<ComGoogleCommonGraphNetwork> network, id<JavaLangIterable> nodes);

FOUNDATION_EXPORT id<ComGoogleCommonGraphMutableGraph> ComGoogleCommonGraphGraphs_copyOfWithComGoogleCommonGraphGraph_(id<ComGoogleCommonGraphGraph> graph);

FOUNDATION_EXPORT id<ComGoogleCommonGraphMutableValueGraph> ComGoogleCommonGraphGraphs_copyOfWithComGoogleCommonGraphValueGraph_(id<ComGoogleCommonGraphValueGraph> graph);

FOUNDATION_EXPORT id<ComGoogleCommonGraphMutableNetwork> ComGoogleCommonGraphGraphs_copyOfWithComGoogleCommonGraphNetwork_(id<ComGoogleCommonGraphNetwork> network);

FOUNDATION_EXPORT jint ComGoogleCommonGraphGraphs_checkNonNegativeWithInt_(jint value);

FOUNDATION_EXPORT jlong ComGoogleCommonGraphGraphs_checkNonNegativeWithLong_(jlong value);

FOUNDATION_EXPORT jint ComGoogleCommonGraphGraphs_checkPositiveWithInt_(jint value);

FOUNDATION_EXPORT jlong ComGoogleCommonGraphGraphs_checkPositiveWithLong_(jlong value);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonGraphGraphs)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonGraphGraphs")
