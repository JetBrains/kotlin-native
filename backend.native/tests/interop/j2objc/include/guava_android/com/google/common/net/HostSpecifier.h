//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/net/HostSpecifier.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonNetHostSpecifier")
#ifdef RESTRICT_ComGoogleCommonNetHostSpecifier
#define INCLUDE_ALL_ComGoogleCommonNetHostSpecifier 0
#else
#define INCLUDE_ALL_ComGoogleCommonNetHostSpecifier 1
#endif
#undef RESTRICT_ComGoogleCommonNetHostSpecifier

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonNetHostSpecifier_) && (INCLUDE_ALL_ComGoogleCommonNetHostSpecifier || defined(INCLUDE_ComGoogleCommonNetHostSpecifier))
#define ComGoogleCommonNetHostSpecifier_

/*!
 @brief A syntactically valid host specifier, suitable for use in a URI.This may be either a numeric IP
  address in IPv4 or IPv6 notation, or a domain name.
 <p>Because this class is intended to represent host specifiers which can reasonably be used in a
  URI, the domain name case is further restricted to include only those domain names which end in a
  recognized public suffix; see <code>InternetDomainName.isPublicSuffix()</code> for details. 
 <p>Note that no network lookups are performed by any <code>HostSpecifier</code> methods. No attempt is
  made to verify that a provided specifier corresponds to a real or accessible host. Only syntactic
  and pattern-based checks are performed. 
 <p>If you know that a given string represents a numeric IP address, use <code>InetAddresses</code> to
  obtain and manipulate a <code>java.net.InetAddress</code> instance from it rather than using this
  class. Similarly, if you know that a given string represents a domain name, use <code>InternetDomainName</code>
  rather than this class.
 @author Craig Berry
 @since 5.0
 */
@interface ComGoogleCommonNetHostSpecifier : NSObject

#pragma mark Public

- (jboolean)isEqual:(id __nullable)other;

/*!
 @brief Attempts to return a <code>HostSpecifier</code> for the given string, throwing an exception if
  parsing fails.Always use this method in preference to <code>fromValid(String)</code> for a
  specifier that is not already known to be valid.
 @throw ParseExceptionif the specifier is not valid.
 */
+ (ComGoogleCommonNetHostSpecifier *)fromWithNSString:(NSString * __nonnull)specifier;

/*!
 @brief Returns a <code>HostSpecifier</code> built from the provided <code>specifier</code>, which is already
  known to be valid.If the <code>specifier</code> might be invalid, use <code>from(String)</code>
  instead.
 <p>The specifier must be in one of these formats: 
 <ul>
    <li>A domain name, like <code>google.com</code>
    <li>A IPv4 address string, like <code>127.0.0.1</code>
    <li>An IPv6 address string with or without brackets, like <code>[2001:db8::1]</code> or <code>2001:db8::1</code>
  </ul>
 @throw IllegalArgumentExceptionif the specifier is not valid.
 */
+ (ComGoogleCommonNetHostSpecifier *)fromValidWithNSString:(NSString * __nonnull)specifier;

- (NSUInteger)hash;

/*!
 @brief Determines whether <code>specifier</code> represents a valid <code>HostSpecifier</code> as described in
  the documentation for <code>fromValid(String)</code>.
 */
+ (jboolean)isValidWithNSString:(NSString * __nonnull)specifier;

/*!
 @brief Returns a string representation of the host specifier suitable for inclusion in a URI.If the
  host specifier is a domain name, the string will be normalized to all lower case.
 If the
  specifier was an IPv6 address without brackets, brackets are added so that the result will be
  usable in the host part of a URI.
 */
- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonNetHostSpecifier)

FOUNDATION_EXPORT ComGoogleCommonNetHostSpecifier *ComGoogleCommonNetHostSpecifier_fromValidWithNSString_(NSString *specifier);

FOUNDATION_EXPORT ComGoogleCommonNetHostSpecifier *ComGoogleCommonNetHostSpecifier_fromWithNSString_(NSString *specifier);

FOUNDATION_EXPORT jboolean ComGoogleCommonNetHostSpecifier_isValidWithNSString_(NSString *specifier);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonNetHostSpecifier)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonNetHostSpecifier")
