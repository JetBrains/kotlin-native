//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/util/concurrent/AbstractIdleService.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonUtilConcurrentAbstractIdleService")
#ifdef RESTRICT_ComGoogleCommonUtilConcurrentAbstractIdleService
#define INCLUDE_ALL_ComGoogleCommonUtilConcurrentAbstractIdleService 0
#else
#define INCLUDE_ALL_ComGoogleCommonUtilConcurrentAbstractIdleService 1
#endif
#undef RESTRICT_ComGoogleCommonUtilConcurrentAbstractIdleService

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonUtilConcurrentAbstractIdleService_) && (INCLUDE_ALL_ComGoogleCommonUtilConcurrentAbstractIdleService || defined(INCLUDE_ComGoogleCommonUtilConcurrentAbstractIdleService))
#define ComGoogleCommonUtilConcurrentAbstractIdleService_

#define RESTRICT_ComGoogleCommonUtilConcurrentService 1
#define INCLUDE_ComGoogleCommonUtilConcurrentService 1
#include "com/google/common/util/concurrent/Service.h"

@class ComGoogleCommonUtilConcurrentService_Listener;
@class ComGoogleCommonUtilConcurrentService_State;
@class JavaLangThrowable;
@class JavaUtilConcurrentTimeUnit;
@protocol JavaUtilConcurrentExecutor;

/*!
 @brief Base class for services that do not need a thread while "running" but may need one during startup
  and shutdown.Subclasses can implement <code>startUp</code> and <code>shutDown</code> methods, each which
  run in a executor which by default uses a separate thread for each method.
 @author Chris Nokleberg
 @since 1.0
 */
@interface ComGoogleCommonUtilConcurrentAbstractIdleService : NSObject < ComGoogleCommonUtilConcurrentService >

#pragma mark Public

/*!
 @since 13.0
 */
- (void)addListenerWithComGoogleCommonUtilConcurrentService_Listener:(ComGoogleCommonUtilConcurrentService_Listener * __nonnull)listener
                                      withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor> __nonnull)executor;

/*!
 @since 15.0
 */
- (void)awaitRunning;

/*!
 @since 15.0
 */
- (void)awaitRunningWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit * __nonnull)unit;

/*!
 @since 15.0
 */
- (void)awaitTerminated;

/*!
 @since 15.0
 */
- (void)awaitTerminatedWithLong:(jlong)timeout
 withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit * __nonnull)unit;

/*!
 @since 14.0
 */
- (JavaLangThrowable *)failureCause;

- (jboolean)isRunning;

/*!
 @since 15.0
 */
- (id<ComGoogleCommonUtilConcurrentService>)startAsync;

- (ComGoogleCommonUtilConcurrentService_State *)state;

/*!
 @since 15.0
 */
- (id<ComGoogleCommonUtilConcurrentService>)stopAsync;

- (NSString *)description;

#pragma mark Protected

/*!
 @brief Constructor for use by subclasses.
 */
- (instancetype __nonnull)init;

/*!
 @brief Returns the <code>Executor</code> that will be used to run this service.Subclasses may override
  this method to use a custom <code>Executor</code>, which may configure its worker thread with a
  specific name, thread group or priority.
 The returned executor's <code>execute()</code>
  method is called when this service is started and
  stopped, and should return promptly.
 */
- (id<JavaUtilConcurrentExecutor>)executor;

/*!
 @brief Returns the name of this service.
 <code>AbstractIdleService</code> may include the name in debugging
  output.
 @since 14.0
 */
- (NSString *)serviceName;

/*!
 @brief Stop the service.
 */
- (void)shutDown;

/*!
 @brief Start the service.
 */
- (void)startUp;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractIdleService)

FOUNDATION_EXPORT void ComGoogleCommonUtilConcurrentAbstractIdleService_init(ComGoogleCommonUtilConcurrentAbstractIdleService *self);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentAbstractIdleService)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonUtilConcurrentAbstractIdleService")
