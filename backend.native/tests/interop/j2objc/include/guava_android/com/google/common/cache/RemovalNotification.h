//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/cache/RemovalNotification.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCacheRemovalNotification")
#ifdef RESTRICT_ComGoogleCommonCacheRemovalNotification
#define INCLUDE_ALL_ComGoogleCommonCacheRemovalNotification 0
#else
#define INCLUDE_ALL_ComGoogleCommonCacheRemovalNotification 1
#endif
#undef RESTRICT_ComGoogleCommonCacheRemovalNotification

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCacheRemovalNotification_) && (INCLUDE_ALL_ComGoogleCommonCacheRemovalNotification || defined(INCLUDE_ComGoogleCommonCacheRemovalNotification))
#define ComGoogleCommonCacheRemovalNotification_

#define RESTRICT_JavaUtilAbstractMap 1
#define INCLUDE_JavaUtilAbstractMap_SimpleImmutableEntry 1
#include "java/util/AbstractMap.h"

@class ComGoogleCommonCacheRemovalCause;
@protocol JavaUtilMap_Entry;

/*!
 @brief A notification of the removal of a single entry.The key and/or value may be null if they were
  already garbage collected.
 <p>Like other <code>Entry</code> instances associated with <code>CacheBuilder</code>, this class holds
  strong references to the key and value, regardless of the type of references the cache may be
  using.
 @author Charles Fry
 @since 10.0
 */
@interface ComGoogleCommonCacheRemovalNotification : JavaUtilAbstractMap_SimpleImmutableEntry

#pragma mark Public

/*!
 @brief Creates a new <code>RemovalNotification</code> for the given <code>key</code>/<code>value</code> pair, with
  the given <code>cause</code> for the removal.The <code>key</code> and/or <code>value</code> may be <code>null</code>
  if they were already garbage collected.
 @since 19.0
 */
+ (ComGoogleCommonCacheRemovalNotification *)createWithId:(id __nullable)key
                                                   withId:(id __nullable)value
                     withComGoogleCommonCacheRemovalCause:(ComGoogleCommonCacheRemovalCause * __nonnull)cause;

/*!
 @brief Returns the cause for which the entry was removed.
 */
- (ComGoogleCommonCacheRemovalCause *)getCause;

/*!
 @brief Returns <code>true</code> if there was an automatic removal due to eviction (the cause is neither 
 <code>RemovalCause.EXPLICIT</code> nor <code>RemovalCause.REPLACED</code>).
 */
- (jboolean)wasEvicted;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithId:(id __nonnull)arg0
                              withId:(id __nonnull)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithJavaUtilMap_Entry:(id<JavaUtilMap_Entry> __nonnull)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheRemovalNotification)

FOUNDATION_EXPORT ComGoogleCommonCacheRemovalNotification *ComGoogleCommonCacheRemovalNotification_createWithId_withId_withComGoogleCommonCacheRemovalCause_(id key, id value, ComGoogleCommonCacheRemovalCause *cause);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheRemovalNotification)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCacheRemovalNotification")
