//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/collect/HashMultimap.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCollectHashMultimap")
#ifdef RESTRICT_ComGoogleCommonCollectHashMultimap
#define INCLUDE_ALL_ComGoogleCommonCollectHashMultimap 0
#else
#define INCLUDE_ALL_ComGoogleCommonCollectHashMultimap 1
#endif
#undef RESTRICT_ComGoogleCommonCollectHashMultimap

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCollectHashMultimap_) && (INCLUDE_ALL_ComGoogleCommonCollectHashMultimap || defined(INCLUDE_ComGoogleCommonCollectHashMultimap))
#define ComGoogleCommonCollectHashMultimap_

#define RESTRICT_ComGoogleCommonCollectHashMultimapGwtSerializationDependencies 1
#define INCLUDE_ComGoogleCommonCollectHashMultimapGwtSerializationDependencies 1
#include "com/google/common/collect/HashMultimapGwtSerializationDependencies.h"

@protocol ComGoogleCommonCollectMultimap;
@protocol JavaUtilMap;
@protocol JavaUtilSet;

/*!
 @brief Implementation of <code>Multimap</code> using hash tables.
 <p>The multimap does not store duplicate key-value pairs. Adding a new key-value pair equal to an
  existing key-value pair has no effect. 
 <p>Keys and values may be null. All optional multimap methods are supported, and all returned
  views are modifiable. 
 <p>This class is not threadsafe when any concurrent operations update the multimap. Concurrent
  read operations will work correctly. To allow concurrent update operations, wrap your multimap
  with a call to <code>Multimaps.synchronizedSetMultimap</code>.
 @author Jared Levy
 @since 2.0
 */
@interface ComGoogleCommonCollectHashMultimap : ComGoogleCommonCollectHashMultimapGwtSerializationDependencies {
 @public
  jint expectedValuesPerKey_;
}

#pragma mark Public

/*!
 @brief Creates a new, empty <code>HashMultimap</code> with the default initial capacities.
 <p>This method will soon be deprecated in favor of <code>MultimapBuilder.hashKeys().hashSetValues().build()</code>
 .
 */
+ (ComGoogleCommonCollectHashMultimap *)create;

/*!
 @brief Constructs an empty <code>HashMultimap</code> with enough capacity to hold the specified numbers of
  keys and values without rehashing.
 <p>This method will soon be deprecated in favor of <code>MultimapBuilder.hashKeys(expectedKeys).hashSetValues(expectedValuesPerKey).build()</code>
 .
 @param expectedKeys the expected number of distinct keys
 @param expectedValuesPerKey the expected average number of values per key
 @throw IllegalArgumentExceptionif <code>expectedKeys</code> or <code>expectedValuesPerKey</code> is
      negative
 */
+ (ComGoogleCommonCollectHashMultimap *)createWithInt:(jint)expectedKeys
                                              withInt:(jint)expectedValuesPerKey;

/*!
 @brief Constructs a <code>HashMultimap</code> with the same mappings as the specified multimap.If a
  key-value mapping appears multiple times in the input multimap, it only appears once in the
  constructed multimap.
 <p>This method will soon be deprecated in favor of <code>MultimapBuilder.hashKeys().hashSetValues().build(multimap)</code>
 .
 @param multimap the multimap whose contents are copied to this multimap
 */
+ (ComGoogleCommonCollectHashMultimap *)createWithComGoogleCommonCollectMultimap:(id<ComGoogleCommonCollectMultimap> __nonnull)multimap;

#pragma mark Package-Private

/*!
 @brief <p>Creates an empty <code>HashSet</code> for a collection of values for one key.
 @return a new <code>HashSet</code> containing a collection of values for one key
 */
- (id<JavaUtilSet>)createCollection;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initPackagePrivateWithJavaUtilMap:(id<JavaUtilMap> __nonnull)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectHashMultimap)

FOUNDATION_EXPORT ComGoogleCommonCollectHashMultimap *ComGoogleCommonCollectHashMultimap_create(void);

FOUNDATION_EXPORT ComGoogleCommonCollectHashMultimap *ComGoogleCommonCollectHashMultimap_createWithInt_withInt_(jint expectedKeys, jint expectedValuesPerKey);

FOUNDATION_EXPORT ComGoogleCommonCollectHashMultimap *ComGoogleCommonCollectHashMultimap_createWithComGoogleCommonCollectMultimap_(id<ComGoogleCommonCollectMultimap> multimap);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectHashMultimap)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCollectHashMultimap")
