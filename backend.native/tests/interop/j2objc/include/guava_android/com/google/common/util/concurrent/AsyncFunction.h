//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/util/concurrent/AsyncFunction.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonUtilConcurrentAsyncFunction")
#ifdef RESTRICT_ComGoogleCommonUtilConcurrentAsyncFunction
#define INCLUDE_ALL_ComGoogleCommonUtilConcurrentAsyncFunction 0
#else
#define INCLUDE_ALL_ComGoogleCommonUtilConcurrentAsyncFunction 1
#endif
#undef RESTRICT_ComGoogleCommonUtilConcurrentAsyncFunction

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonUtilConcurrentAsyncFunction_) && (INCLUDE_ALL_ComGoogleCommonUtilConcurrentAsyncFunction || defined(INCLUDE_ComGoogleCommonUtilConcurrentAsyncFunction))
#define ComGoogleCommonUtilConcurrentAsyncFunction_

@protocol ComGoogleCommonUtilConcurrentListenableFuture;

/*!
 @brief Transforms a value, possibly asynchronously.For an example usage and more information, see 
 <code>Futures.transformAsync(ListenableFuture, AsyncFunction, Executor)</code>.
 @author Chris Povirk
 @since 11.0
 */
@protocol ComGoogleCommonUtilConcurrentAsyncFunction < JavaObject >

/*!
 @brief Returns an output <code>Future</code> to use in place of the given <code>input</code>.The output <code>Future</code>
  need not be done, making <code>AsyncFunction</code> suitable for
  asynchronous derivations.
 <p>Throwing an exception from this method is equivalent to returning a failing <code>Future</code>.
 */
- (id<ComGoogleCommonUtilConcurrentListenableFuture>)applyWithId:(id __nullable)input;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAsyncFunction)

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentAsyncFunction)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonUtilConcurrentAsyncFunction")
