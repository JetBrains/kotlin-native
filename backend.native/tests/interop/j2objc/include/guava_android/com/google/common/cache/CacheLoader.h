//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/cache/CacheLoader.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCacheCacheLoader")
#ifdef RESTRICT_ComGoogleCommonCacheCacheLoader
#define INCLUDE_ALL_ComGoogleCommonCacheCacheLoader 0
#else
#define INCLUDE_ALL_ComGoogleCommonCacheCacheLoader 1
#endif
#undef RESTRICT_ComGoogleCommonCacheCacheLoader

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCacheCacheLoader_) && (INCLUDE_ALL_ComGoogleCommonCacheCacheLoader || defined(INCLUDE_ComGoogleCommonCacheCacheLoader))
#define ComGoogleCommonCacheCacheLoader_

@protocol ComGoogleCommonBaseFunction;
@protocol ComGoogleCommonBaseSupplier;
@protocol ComGoogleCommonUtilConcurrentListenableFuture;
@protocol JavaLangIterable;
@protocol JavaUtilConcurrentExecutor;
@protocol JavaUtilMap;

/*!
 @brief Computes or retrieves values, based on a key, for use in populating a <code>LoadingCache</code>.
 <p>Most implementations will only need to implement <code>load</code>. Other methods may be
  overridden as desired. 
 <p>Usage example: 
 @code
 CacheLoader<Key, Graph> loader = new CacheLoader<Key, Graph>() {
    public Graph load(Key key) throws AnyException {
      return createExpensiveGraph(key);
    }
  };
  LoadingCache<Key, Graph> cache = CacheBuilder.newBuilder().build(loader); 
 
@endcode
  
 <p>Since this example doesn't support reloading or bulk loading, if you're able to use lambda
  expressions it can be specified even more easily: 
 @code
 CacheLoader<Key, Graph> loader = CacheLoader.from(key -> createExpensiveGraph(key)); 
 
@endcode
 @author Charles Fry
 @since 10.0
 */
@interface ComGoogleCommonCacheCacheLoader : NSObject

#pragma mark Public

/*!
 @brief Returns a <code>CacheLoader</code> which wraps <code>loader</code>, executing calls to <code>CacheLoader.reload</code>
  using <code>executor</code>.
 <p>This method is useful only when <code>loader.reload</code> has a synchronous implementation, such
  as the default implementation.
 @since 17.0
 */
+ (ComGoogleCommonCacheCacheLoader *)asyncReloadingWithComGoogleCommonCacheCacheLoader:(ComGoogleCommonCacheCacheLoader * __nonnull)loader
                                                        withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor> __nonnull)executor;

/*!
 @brief Returns a cache loader that uses <code>function</code> to load keys, and without supporting either
  reloading or bulk loading.This is most useful when you can pass a lambda expression.
 Otherwise
  it is useful mostly when you already have an existing function instance.
 @param function the function to be used for loading values; must never return <code>null</code>
 @return a cache loader that loads values by passing each key to <code>function</code>
 */
+ (ComGoogleCommonCacheCacheLoader *)fromWithComGoogleCommonBaseFunction:(id<ComGoogleCommonBaseFunction> __nonnull)function;

/*!
 @brief Returns a cache loader based on an <i>existing</i> supplier instance.Note that there's no need
  to create a <i>new</i> supplier just to pass it in here; just subclass <code>CacheLoader</code> and
  implement <code>load</code> instead.
 @param supplier the supplier to be used for loading values; must never return <code>null</code>
 @return a cache loader that loads values by calling <code>Supplier.get</code>, irrespective of the
      key
 */
+ (ComGoogleCommonCacheCacheLoader *)fromWithComGoogleCommonBaseSupplier:(id<ComGoogleCommonBaseSupplier> __nonnull)supplier;

/*!
 @brief Computes or retrieves the value corresponding to <code>key</code>.
 @param key the non-null key whose value should be loaded
 @return the value associated with <code>key</code>; <b>must not be null</b>
 @throw Exceptionif unable to load the result
 @throw InterruptedExceptionif this method is interrupted. <code>InterruptedException</code> is
      treated like any other <code>Exception</code> in all respects except that, when it is caught,
      the thread's interrupt status is set
 */
- (id)load__WithId:(id __nonnull)key;

/*!
 @brief Computes or retrieves the values corresponding to <code>keys</code>.This method is called by <code>LoadingCache.getAll</code>
 .
 <p>If the returned map doesn't contain all requested <code>keys</code> then the entries it does
  contain will be cached, but <code>getAll</code> will throw an exception. If the returned map
  contains extra keys not present in <code>keys</code> then all returned entries will be cached, but
  only the entries for <code>keys</code> will be returned from <code>getAll</code>.
  
 <p>This method should be overridden when bulk retrieval is significantly more efficient than
  many individual lookups. Note that <code>LoadingCache.getAll</code> will defer to individual calls to 
 <code>LoadingCache.get</code> if this method is not overridden.
 @param keys the unique, non-null keys whose values should be loaded
 @return a map from each key in <code>keys</code> to the value associated with that key; <b>may not
      contain null values</b>
 @throw Exceptionif unable to load the result
 @throw InterruptedExceptionif this method is interrupted. <code>InterruptedException</code> is
      treated like any other <code>Exception</code> in all respects except that, when it is caught,
      the thread's interrupt status is set
 @since 11.0
 */
- (id<JavaUtilMap>)loadAllWithJavaLangIterable:(id<JavaLangIterable> __nonnull)keys;

/*!
 @brief Computes or retrieves a replacement value corresponding to an already-cached <code>key</code>.This
  method is called when an existing cache entry is refreshed by <code>CacheBuilder.refreshAfterWrite</code>
 , or through a call to <code>LoadingCache.refresh</code>.
 <p>This implementation synchronously delegates to <code>load</code>. It is recommended that it be
  overridden with an asynchronous implementation when using <code>CacheBuilder.refreshAfterWrite</code>
 .
  
 <p><b>Note:</b> <i>all exceptions thrown by this method will be logged and then swallowed</i>.
 @param key the non-null key whose value should be loaded
 @param oldValue the non-null old value corresponding to <code>key</code>
 @return the future new value associated with <code>key</code>; <b>must not be null, must not return
      null</b>
 @throw Exceptionif unable to reload the result
 @throw InterruptedExceptionif this method is interrupted. <code>InterruptedException</code> is
      treated like any other <code>Exception</code> in all respects except that, when it is caught,
      the thread's interrupt status is set
 @since 11.0
 */
- (id<ComGoogleCommonUtilConcurrentListenableFuture>)reloadWithId:(id __nonnull)key
                                                           withId:(id __nonnull)oldValue;

#pragma mark Protected

/*!
 @brief Constructor for use by subclasses.
 */
- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheCacheLoader)

FOUNDATION_EXPORT void ComGoogleCommonCacheCacheLoader_init(ComGoogleCommonCacheCacheLoader *self);

FOUNDATION_EXPORT ComGoogleCommonCacheCacheLoader *ComGoogleCommonCacheCacheLoader_fromWithComGoogleCommonBaseFunction_(id<ComGoogleCommonBaseFunction> function);

FOUNDATION_EXPORT ComGoogleCommonCacheCacheLoader *ComGoogleCommonCacheCacheLoader_fromWithComGoogleCommonBaseSupplier_(id<ComGoogleCommonBaseSupplier> supplier);

FOUNDATION_EXPORT ComGoogleCommonCacheCacheLoader *ComGoogleCommonCacheCacheLoader_asyncReloadingWithComGoogleCommonCacheCacheLoader_withJavaUtilConcurrentExecutor_(ComGoogleCommonCacheCacheLoader *loader, id<JavaUtilConcurrentExecutor> executor);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheCacheLoader)

#endif

#if !defined (ComGoogleCommonCacheCacheLoader_UnsupportedLoadingOperationException_) && (INCLUDE_ALL_ComGoogleCommonCacheCacheLoader || defined(INCLUDE_ComGoogleCommonCacheCacheLoader_UnsupportedLoadingOperationException))
#define ComGoogleCommonCacheCacheLoader_UnsupportedLoadingOperationException_

#define RESTRICT_JavaLangUnsupportedOperationException 1
#define INCLUDE_JavaLangUnsupportedOperationException 1
#include "java/lang/UnsupportedOperationException.h"

@class JavaLangThrowable;

/*!
 @brief Exception thrown by <code>loadAll()</code> to indicate that it is not supported.
 @since 19.0
 */
@interface ComGoogleCommonCacheCacheLoader_UnsupportedLoadingOperationException : JavaLangUnsupportedOperationException

#pragma mark Package-Private

- (instancetype __nonnull)init;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable * __nonnull)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString * __nonnull)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString * __nonnull)arg0
                     withJavaLangThrowable:(JavaLangThrowable * __nonnull)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheCacheLoader_UnsupportedLoadingOperationException)

FOUNDATION_EXPORT void ComGoogleCommonCacheCacheLoader_UnsupportedLoadingOperationException_init(ComGoogleCommonCacheCacheLoader_UnsupportedLoadingOperationException *self);

FOUNDATION_EXPORT ComGoogleCommonCacheCacheLoader_UnsupportedLoadingOperationException *new_ComGoogleCommonCacheCacheLoader_UnsupportedLoadingOperationException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCacheCacheLoader_UnsupportedLoadingOperationException *create_ComGoogleCommonCacheCacheLoader_UnsupportedLoadingOperationException_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheCacheLoader_UnsupportedLoadingOperationException)

#endif

#if !defined (ComGoogleCommonCacheCacheLoader_InvalidCacheLoadException_) && (INCLUDE_ALL_ComGoogleCommonCacheCacheLoader || defined(INCLUDE_ComGoogleCommonCacheCacheLoader_InvalidCacheLoadException))
#define ComGoogleCommonCacheCacheLoader_InvalidCacheLoadException_

#define RESTRICT_JavaLangRuntimeException 1
#define INCLUDE_JavaLangRuntimeException 1
#include "java/lang/RuntimeException.h"

@class JavaLangThrowable;

/*!
 @brief Thrown to indicate that an invalid response was returned from a call to <code>CacheLoader</code>.
 @since 11.0
 */
@interface ComGoogleCommonCacheCacheLoader_InvalidCacheLoadException : JavaLangRuntimeException

#pragma mark Public

- (instancetype __nonnull)initWithNSString:(NSString * __nonnull)message;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable * __nonnull)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString * __nonnull)arg0
                     withJavaLangThrowable:(JavaLangThrowable * __nonnull)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString * __nonnull)arg0
                     withJavaLangThrowable:(JavaLangThrowable * __nonnull)arg1
                               withBoolean:(jboolean)arg2
                               withBoolean:(jboolean)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheCacheLoader_InvalidCacheLoadException)

FOUNDATION_EXPORT void ComGoogleCommonCacheCacheLoader_InvalidCacheLoadException_initWithNSString_(ComGoogleCommonCacheCacheLoader_InvalidCacheLoadException *self, NSString *message);

FOUNDATION_EXPORT ComGoogleCommonCacheCacheLoader_InvalidCacheLoadException *new_ComGoogleCommonCacheCacheLoader_InvalidCacheLoadException_initWithNSString_(NSString *message) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCacheCacheLoader_InvalidCacheLoadException *create_ComGoogleCommonCacheCacheLoader_InvalidCacheLoadException_initWithNSString_(NSString *message);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheCacheLoader_InvalidCacheLoadException)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCacheCacheLoader")
