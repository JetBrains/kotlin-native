//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/cache/LocalCache.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCacheLocalCache")
#ifdef RESTRICT_ComGoogleCommonCacheLocalCache
#define INCLUDE_ALL_ComGoogleCommonCacheLocalCache 0
#else
#define INCLUDE_ALL_ComGoogleCommonCacheLocalCache 1
#endif
#undef RESTRICT_ComGoogleCommonCacheLocalCache
#ifdef INCLUDE_ComGoogleCommonCacheLocalCache_LocalLoadingCache
#define INCLUDE_ComGoogleCommonCacheLocalCache_LocalManualCache 1
#endif
#ifdef INCLUDE_ComGoogleCommonCacheLocalCache_LoadingSerializationProxy
#define INCLUDE_ComGoogleCommonCacheLocalCache_ManualSerializationProxy 1
#endif
#ifdef INCLUDE_ComGoogleCommonCacheLocalCache_EntrySet
#define INCLUDE_ComGoogleCommonCacheLocalCache_AbstractCacheSet 1
#endif
#ifdef INCLUDE_ComGoogleCommonCacheLocalCache_KeySet
#define INCLUDE_ComGoogleCommonCacheLocalCache_AbstractCacheSet 1
#endif
#ifdef INCLUDE_ComGoogleCommonCacheLocalCache_EntryIterator
#define INCLUDE_ComGoogleCommonCacheLocalCache_HashIterator 1
#endif
#ifdef INCLUDE_ComGoogleCommonCacheLocalCache_ValueIterator
#define INCLUDE_ComGoogleCommonCacheLocalCache_HashIterator 1
#endif
#ifdef INCLUDE_ComGoogleCommonCacheLocalCache_KeyIterator
#define INCLUDE_ComGoogleCommonCacheLocalCache_HashIterator 1
#endif
#ifdef INCLUDE_ComGoogleCommonCacheLocalCache_LoadingValueReference
#define INCLUDE_ComGoogleCommonCacheLocalCache_ValueReference 1
#endif
#ifdef INCLUDE_ComGoogleCommonCacheLocalCache_WeightedStrongValueReference
#define INCLUDE_ComGoogleCommonCacheLocalCache_StrongValueReference 1
#endif
#ifdef INCLUDE_ComGoogleCommonCacheLocalCache_WeightedSoftValueReference
#define INCLUDE_ComGoogleCommonCacheLocalCache_SoftValueReference 1
#endif
#ifdef INCLUDE_ComGoogleCommonCacheLocalCache_WeightedWeakValueReference
#define INCLUDE_ComGoogleCommonCacheLocalCache_WeakValueReference 1
#endif
#ifdef INCLUDE_ComGoogleCommonCacheLocalCache_StrongValueReference
#define INCLUDE_ComGoogleCommonCacheLocalCache_ValueReference 1
#endif
#ifdef INCLUDE_ComGoogleCommonCacheLocalCache_SoftValueReference
#define INCLUDE_ComGoogleCommonCacheLocalCache_ValueReference 1
#endif
#ifdef INCLUDE_ComGoogleCommonCacheLocalCache_WeakValueReference
#define INCLUDE_ComGoogleCommonCacheLocalCache_ValueReference 1
#endif
#ifdef INCLUDE_ComGoogleCommonCacheLocalCache_WeakAccessWriteEntry
#define INCLUDE_ComGoogleCommonCacheLocalCache_WeakEntry 1
#endif
#ifdef INCLUDE_ComGoogleCommonCacheLocalCache_WeakWriteEntry
#define INCLUDE_ComGoogleCommonCacheLocalCache_WeakEntry 1
#endif
#ifdef INCLUDE_ComGoogleCommonCacheLocalCache_WeakAccessEntry
#define INCLUDE_ComGoogleCommonCacheLocalCache_WeakEntry 1
#endif
#ifdef INCLUDE_ComGoogleCommonCacheLocalCache_StrongAccessWriteEntry
#define INCLUDE_ComGoogleCommonCacheLocalCache_StrongEntry 1
#endif
#ifdef INCLUDE_ComGoogleCommonCacheLocalCache_StrongWriteEntry
#define INCLUDE_ComGoogleCommonCacheLocalCache_StrongEntry 1
#endif
#ifdef INCLUDE_ComGoogleCommonCacheLocalCache_StrongAccessEntry
#define INCLUDE_ComGoogleCommonCacheLocalCache_StrongEntry 1
#endif
#ifdef INCLUDE_ComGoogleCommonCacheLocalCache_StrongEntry
#define INCLUDE_ComGoogleCommonCacheLocalCache_AbstractReferenceEntry 1
#endif

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCacheLocalCache_) && (INCLUDE_ALL_ComGoogleCommonCacheLocalCache || defined(INCLUDE_ComGoogleCommonCacheLocalCache))
#define ComGoogleCommonCacheLocalCache_

#define RESTRICT_JavaUtilAbstractMap 1
#define INCLUDE_JavaUtilAbstractMap 1
#include "java/util/AbstractMap.h"

#define RESTRICT_JavaUtilConcurrentConcurrentMap 1
#define INCLUDE_JavaUtilConcurrentConcurrentMap 1
#include "java/util/concurrent/ConcurrentMap.h"

@class ComGoogleCommonBaseEquivalence;
@class ComGoogleCommonBaseTicker;
@class ComGoogleCommonCacheCacheBuilder;
@class ComGoogleCommonCacheCacheLoader;
@class ComGoogleCommonCacheLocalCache_EntryFactory;
@class ComGoogleCommonCacheLocalCache_Segment;
@class ComGoogleCommonCacheLocalCache_Strength;
@class ComGoogleCommonCollectImmutableMap;
@class IOSObjectArray;
@class JavaUtilLoggingLogger;
@protocol ComGoogleCommonCacheAbstractCache_StatsCounter;
@protocol ComGoogleCommonCacheLocalCache_ValueReference;
@protocol ComGoogleCommonCacheReferenceEntry;
@protocol ComGoogleCommonCacheRemovalListener;
@protocol ComGoogleCommonCacheWeigher;
@protocol JavaLangIterable;
@protocol JavaUtilCollection;
@protocol JavaUtilFunctionBiConsumer;
@protocol JavaUtilFunctionBiFunction;
@protocol JavaUtilFunctionFunction;
@protocol JavaUtilMap;
@protocol JavaUtilQueue;
@protocol JavaUtilSet;

/*!
 @brief The concurrent hash map implementation built by <code>CacheBuilder</code>.
 <p>This implementation is heavily derived from revision 1.96 of <a href="http://tinyurl.com/ConcurrentHashMap">
 ConcurrentHashMap.java</a>.
 @author Charles Fry
 @author Bob Lee (<code>com.google.common.collect.MapMaker</code>)
 @author Doug Lea (<code>ConcurrentHashMap</code>)
 */
@interface ComGoogleCommonCacheLocalCache : JavaUtilAbstractMap < JavaUtilConcurrentConcurrentMap > {
 @public
  /*!
   @brief Mask value for indexing into segments.The upper bits of a key's hash code are used to choose
  the segment.
   */
  jint segmentMask_;
  /*!
   @brief Shift value for indexing within segments.Helps prevent entries that end up in the same segment
  from also ending up in the same bucket.
   */
  jint segmentShift_;
  /*!
   @brief The segments, each of which is a specialized hash table.
   */
  IOSObjectArray *segments_;
  /*!
   @brief The concurrency level.
   */
  jint concurrencyLevel_;
  /*!
   @brief Strategy for comparing keys.
   */
  ComGoogleCommonBaseEquivalence *keyEquivalence_;
  /*!
   @brief Strategy for comparing values.
   */
  ComGoogleCommonBaseEquivalence *valueEquivalence_;
  /*!
   @brief Strategy for referencing keys.
   */
  ComGoogleCommonCacheLocalCache_Strength *keyStrength_;
  /*!
   @brief Strategy for referencing values.
   */
  ComGoogleCommonCacheLocalCache_Strength *valueStrength_;
  /*!
   @brief The maximum weight of this map.UNSET_INT if there is no maximum.
   */
  jlong maxWeight_;
  /*!
   @brief Weigher to weigh cache entries.
   */
  id<ComGoogleCommonCacheWeigher> weigher_;
  /*!
   @brief How long after the last access to an entry the map will retain that entry.
   */
  jlong expireAfterAccessNanos_;
  /*!
   @brief How long after the last write to an entry the map will retain that entry.
   */
  jlong expireAfterWriteNanos_;
  /*!
   @brief How long after the last write an entry becomes a candidate for refresh.
   */
  jlong refreshNanos_;
  /*!
   @brief Entries waiting to be consumed by the removal listener.
   */
  id<JavaUtilQueue> removalNotificationQueue_;
  /*!
   @brief A listener that is invoked when an entry is removed due to expiration or garbage collection of
  soft/weak entries.
   */
  id<ComGoogleCommonCacheRemovalListener> removalListener_;
  /*!
   @brief Measures time in a testable way.
   */
  ComGoogleCommonBaseTicker *ticker_;
  /*!
   @brief Factory used to create new entries.
   */
  ComGoogleCommonCacheLocalCache_EntryFactory *entryFactory_;
  /*!
   @brief Accumulates global cache statistics.Note that there are also per-segments stats counters which
  must be aggregated to obtain a global stats view.
   */
  id<ComGoogleCommonCacheAbstractCache_StatsCounter> globalStatsCounter_;
  /*!
   @brief The default cache loader to use on loading operations.
   */
  ComGoogleCommonCacheCacheLoader *defaultLoader_;
  id<JavaUtilSet> keySet_LocalCache_;
  id<JavaUtilCollection> values_LocalCache_;
  id<JavaUtilSet> entrySet_;
}
@property (readonly, class) jint MAXIMUM_CAPACITY NS_SWIFT_NAME(MAXIMUM_CAPACITY);
@property (readonly, class) jint MAX_SEGMENTS NS_SWIFT_NAME(MAX_SEGMENTS);
@property (readonly, class) jint CONTAINS_VALUE_RETRIES NS_SWIFT_NAME(CONTAINS_VALUE_RETRIES);
@property (readonly, class) jint DRAIN_THRESHOLD NS_SWIFT_NAME(DRAIN_THRESHOLD);
@property (readonly, class) jint DRAIN_MAX NS_SWIFT_NAME(DRAIN_MAX);
@property (readonly, class, strong) JavaUtilLoggingLogger *logger NS_SWIFT_NAME(logger);
@property (readonly, class, strong) id<ComGoogleCommonCacheLocalCache_ValueReference> UNSET NS_SWIFT_NAME(UNSET);
@property (readonly, class, strong) id<JavaUtilQueue> DISCARDING_QUEUE NS_SWIFT_NAME(DISCARDING_QUEUE);

+ (jint)MAXIMUM_CAPACITY;

+ (jint)MAX_SEGMENTS;

+ (jint)CONTAINS_VALUE_RETRIES;

+ (jint)DRAIN_THRESHOLD;

+ (jint)DRAIN_MAX;

+ (JavaUtilLoggingLogger *)logger;

+ (id<ComGoogleCommonCacheLocalCache_ValueReference>)UNSET;

+ (id<JavaUtilQueue>)DISCARDING_QUEUE;

#pragma mark Public

- (void)cleanUp;

- (void)clear;

- (jboolean)containsKeyWithId:(id __nullable)key;

- (jboolean)containsValueWithId:(id __nullable)value;

- (id<JavaUtilSet>)entrySet;

- (id __nullable)getWithId:(id __nullable)key;

- (id __nullable)getIfPresentWithId:(id __nonnull)key;

- (id __nullable)getOrDefaultWithId:(id __nullable)key
                             withId:(id __nullable)defaultValue;

- (jboolean)isEmpty;

- (id<JavaUtilSet>)keySet;

- (id)putWithId:(id __nonnull)key
         withId:(id __nonnull)value;

- (void)putAllWithJavaUtilMap:(id<JavaUtilMap> __nonnull)m;

- (id)putIfAbsentWithId:(id __nonnull)key
                 withId:(id __nonnull)value;

- (id)removeWithId:(id __nullable)key;

- (jboolean)removeWithId:(id __nullable)key
                  withId:(id __nullable)value;

- (id)replaceWithId:(id __nonnull)key
             withId:(id __nonnull)value;

- (jboolean)replaceWithId:(id __nonnull)key
                   withId:(id __nullable)oldValue
                   withId:(id __nonnull)newValue;

- (jint)size;

- (id<JavaUtilCollection>)values;

#pragma mark Package-Private

/*!
 @brief Creates a new, empty map with the specified strategy, initial capacity and concurrency level.
 */
- (instancetype __nonnull)initPackagePrivateWithComGoogleCommonCacheCacheBuilder:(ComGoogleCommonCacheCacheBuilder * __nonnull)builder
                                             withComGoogleCommonCacheCacheLoader:(ComGoogleCommonCacheCacheLoader * __nullable)loader;

+ (void)connectAccessOrderWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)previous
                          withComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)next;

+ (void)connectWriteOrderWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)previous
                         withComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)next;

/*!
 @brief This method is a convenience for testing.Code should call <code>Segment.copyEntry</code> directly.
 */
- (id<ComGoogleCommonCacheReferenceEntry>)copyEntryWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)original
                                                   withComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)newNext OBJC_METHOD_FAMILY_NONE;

- (ComGoogleCommonCacheLocalCache_Segment *)createSegmentWithInt:(jint)initialCapacity
                                                        withLong:(jlong)maxSegmentWeight
              withComGoogleCommonCacheAbstractCache_StatsCounter:(id<ComGoogleCommonCacheAbstractCache_StatsCounter> __nonnull)statsCounter;

- (jboolean)customWeigher;

/*!
 @brief Queue that discards all elements.
 */
+ (id<JavaUtilQueue>)discardingQueue;

- (jboolean)evictsBySize;

- (jboolean)expires;

- (jboolean)expiresAfterAccess;

- (jboolean)expiresAfterWrite;

- (id)getWithId:(id __nonnull)key
withComGoogleCommonCacheCacheLoader:(ComGoogleCommonCacheCacheLoader * __nonnull)loader;

- (ComGoogleCommonCollectImmutableMap *)getAllWithJavaLangIterable:(id<JavaLangIterable> __nonnull)keys;

- (ComGoogleCommonCollectImmutableMap *)getAllPresentWithJavaLangIterable:(id<JavaLangIterable> __nonnull)keys;

/*!
 @brief Returns the internal entry for the specified key.The entry may be loading, expired, or
  partially collected.
 */
- (id<ComGoogleCommonCacheReferenceEntry>)getEntryWithId:(id __nullable)key;

/*!
 @brief Gets the value from an entry.Returns null if the entry is invalid, partially-collected,
  loading, or expired.
 Unlike <code>Segment.getLiveValue</code> this method does not attempt to
  cleanup stale entries. As such it should only be called outside of a segment context, such as
  during iteration.
 */
- (id __nullable)getLiveValueWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)entry_
                                                           withLong:(jlong)now;

- (id)getOrLoadWithId:(id __nonnull)key;

- (jint)hash__WithId:(id __nullable)key;

- (void)invalidateAllWithJavaLangIterable:(id<JavaLangIterable> __nonnull)keys;

/*!
 @brief Returns true if the entry has expired.
 */
- (jboolean)isExpiredWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)entry_
                                                   withLong:(jlong)now;

/*!
 @brief This method is a convenience for testing.Code should call <code>Segment.getLiveValue</code>
  instead.
 */
- (jboolean)isLiveWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)entry_
                                                withLong:(jlong)now;

/*!
 @brief Returns the result of calling <code>CacheLoader.loadAll</code>, or null if <code>loader</code> doesn't
  implement <code>loadAll</code>.
 */
- (id<JavaUtilMap> __nullable)loadAllWithJavaUtilSet:(id<JavaUtilSet> __nonnull)keys
                 withComGoogleCommonCacheCacheLoader:(ComGoogleCommonCacheCacheLoader * __nonnull)loader;

- (jlong)longSize;

/*!
 @brief This method is a convenience for testing.Code should call <code>Segment.newEntry</code> directly.
 */
- (id<ComGoogleCommonCacheReferenceEntry>)newEntryWithId:(id __nonnull)key
                                                 withInt:(jint)hash_
                  withComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nullable)next OBJC_METHOD_FAMILY_NONE;

- (IOSObjectArray *)newSegmentArrayWithInt:(jint)ssize OBJC_METHOD_FAMILY_NONE;

/*!
 @brief This method is a convenience for testing.Code should call <code>Segment.setValue</code> instead.
 */
- (id<ComGoogleCommonCacheLocalCache_ValueReference>)newValueReferenceWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)entry_
                                                                                                      withId:(id __nonnull)value
                                                                                                     withInt:(jint)weight OBJC_METHOD_FAMILY_NONE;

+ (id<ComGoogleCommonCacheReferenceEntry>)nullEntry;

+ (void)nullifyAccessOrderWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)nulled;

+ (void)nullifyWriteOrderWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)nulled;

/*!
 @brief Notifies listeners that an entry has been automatically removed due to expiration, eviction, or
  eligibility for garbage collection.This should be called every time expireEntries or
  evictEntry is called (once the lock is released).
 */
- (void)processPendingNotifications;

- (void)reclaimKeyWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)entry_;

- (void)reclaimValueWithComGoogleCommonCacheLocalCache_ValueReference:(id<ComGoogleCommonCacheLocalCache_ValueReference> __nonnull)valueReference;

- (jboolean)recordsAccess;

- (jboolean)recordsTime;

- (jboolean)recordsWrite;

- (void)refreshWithId:(id __nonnull)key;

- (jboolean)refreshes;

/*!
 @brief Applies a supplemental hash function to a given hash code, which defends against poor quality
  hash functions.This is critical when the concurrent hash map uses power-of-two length hash
  tables, that otherwise encounter collisions for hash codes that do not differ in lower or upper
  bits.
 @param h hash code
 */
+ (jint)rehashWithInt:(jint)h;

/*!
 @brief Returns the segment that should be used for a key with the given hash.
 @param hash_ the hash code for the key
 @return the segment
 */
- (ComGoogleCommonCacheLocalCache_Segment *)segmentForWithInt:(jint)hash_;

/*!
 @brief Singleton placeholder that indicates a value is being loaded.
 */
+ (id<ComGoogleCommonCacheLocalCache_ValueReference>)unset;

- (jboolean)usesAccessEntries;

- (jboolean)usesAccessQueue;

- (jboolean)usesKeyReferences;

- (jboolean)usesValueReferences;

- (jboolean)usesWriteEntries;

- (jboolean)usesWriteQueue;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonCacheLocalCache)

J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache, segments_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache, keyEquivalence_, ComGoogleCommonBaseEquivalence *)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache, valueEquivalence_, ComGoogleCommonBaseEquivalence *)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache, keyStrength_, ComGoogleCommonCacheLocalCache_Strength *)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache, valueStrength_, ComGoogleCommonCacheLocalCache_Strength *)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache, weigher_, id<ComGoogleCommonCacheWeigher>)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache, removalNotificationQueue_, id<JavaUtilQueue>)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache, removalListener_, id<ComGoogleCommonCacheRemovalListener>)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache, ticker_, ComGoogleCommonBaseTicker *)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache, entryFactory_, ComGoogleCommonCacheLocalCache_EntryFactory *)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache, globalStatsCounter_, id<ComGoogleCommonCacheAbstractCache_StatsCounter>)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache, defaultLoader_, ComGoogleCommonCacheCacheLoader *)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache, keySet_LocalCache_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache, values_LocalCache_, id<JavaUtilCollection>)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache, entrySet_, id<JavaUtilSet>)

/*!
 @brief The maximum capacity, used if a higher value is implicitly specified by either of the
  constructors with arguments.MUST be a power of two <code><= 1<<30</code> to ensure that entries are
  indexable using ints.
 */
inline jint ComGoogleCommonCacheLocalCache_get_MAXIMUM_CAPACITY(void);
#define ComGoogleCommonCacheLocalCache_MAXIMUM_CAPACITY 1073741824
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonCacheLocalCache, MAXIMUM_CAPACITY, jint)

/*!
 @brief The maximum number of segments to allow; used to bound constructor arguments.
 */
inline jint ComGoogleCommonCacheLocalCache_get_MAX_SEGMENTS(void);
#define ComGoogleCommonCacheLocalCache_MAX_SEGMENTS 65536
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonCacheLocalCache, MAX_SEGMENTS, jint)

/*!
 @brief Number of (unsynchronized) retries in the containsValue method.
 */
inline jint ComGoogleCommonCacheLocalCache_get_CONTAINS_VALUE_RETRIES(void);
#define ComGoogleCommonCacheLocalCache_CONTAINS_VALUE_RETRIES 3
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonCacheLocalCache, CONTAINS_VALUE_RETRIES, jint)

/*!
 @brief Number of cache access operations that can be buffered per segment before the cache's recency
  ordering information is updated.This is used to avoid lock contention by recording a memento
  of reads and delaying a lock acquisition until the threshold is crossed or a mutation occurs.
 <p>This must be a (2^n)-1 as it is used as a mask.
 */
inline jint ComGoogleCommonCacheLocalCache_get_DRAIN_THRESHOLD(void);
#define ComGoogleCommonCacheLocalCache_DRAIN_THRESHOLD 63
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonCacheLocalCache, DRAIN_THRESHOLD, jint)

/*!
 @brief Maximum number of entries to be drained in a single cleanup run.This applies independently to
  the cleanup queue and both reference queues.
 */
inline jint ComGoogleCommonCacheLocalCache_get_DRAIN_MAX(void);
#define ComGoogleCommonCacheLocalCache_DRAIN_MAX 16
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonCacheLocalCache, DRAIN_MAX, jint)

inline JavaUtilLoggingLogger *ComGoogleCommonCacheLocalCache_get_logger(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilLoggingLogger *ComGoogleCommonCacheLocalCache_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonCacheLocalCache, logger, JavaUtilLoggingLogger *)

/*!
 @brief Placeholder.Indicates that the value hasn't been set yet.
 */
inline id<ComGoogleCommonCacheLocalCache_ValueReference> ComGoogleCommonCacheLocalCache_get_UNSET(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<ComGoogleCommonCacheLocalCache_ValueReference> ComGoogleCommonCacheLocalCache_UNSET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonCacheLocalCache, UNSET, id<ComGoogleCommonCacheLocalCache_ValueReference>)

inline id<JavaUtilQueue> ComGoogleCommonCacheLocalCache_get_DISCARDING_QUEUE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilQueue> ComGoogleCommonCacheLocalCache_DISCARDING_QUEUE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonCacheLocalCache, DISCARDING_QUEUE, id<JavaUtilQueue>)

FOUNDATION_EXPORT void ComGoogleCommonCacheLocalCache_initPackagePrivateWithComGoogleCommonCacheCacheBuilder_withComGoogleCommonCacheCacheLoader_(ComGoogleCommonCacheLocalCache *self, ComGoogleCommonCacheCacheBuilder *builder, ComGoogleCommonCacheCacheLoader *loader);

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache *new_ComGoogleCommonCacheLocalCache_initPackagePrivateWithComGoogleCommonCacheCacheBuilder_withComGoogleCommonCacheCacheLoader_(ComGoogleCommonCacheCacheBuilder *builder, ComGoogleCommonCacheCacheLoader *loader) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache *create_ComGoogleCommonCacheLocalCache_initPackagePrivateWithComGoogleCommonCacheCacheBuilder_withComGoogleCommonCacheCacheLoader_(ComGoogleCommonCacheCacheBuilder *builder, ComGoogleCommonCacheCacheLoader *loader);

FOUNDATION_EXPORT id<ComGoogleCommonCacheLocalCache_ValueReference> ComGoogleCommonCacheLocalCache_unset(void);

FOUNDATION_EXPORT id<ComGoogleCommonCacheReferenceEntry> ComGoogleCommonCacheLocalCache_nullEntry(void);

FOUNDATION_EXPORT id<JavaUtilQueue> ComGoogleCommonCacheLocalCache_discardingQueue(void);

FOUNDATION_EXPORT jint ComGoogleCommonCacheLocalCache_rehashWithInt_(jint h);

FOUNDATION_EXPORT void ComGoogleCommonCacheLocalCache_connectAccessOrderWithComGoogleCommonCacheReferenceEntry_withComGoogleCommonCacheReferenceEntry_(id<ComGoogleCommonCacheReferenceEntry> previous, id<ComGoogleCommonCacheReferenceEntry> next);

FOUNDATION_EXPORT void ComGoogleCommonCacheLocalCache_nullifyAccessOrderWithComGoogleCommonCacheReferenceEntry_(id<ComGoogleCommonCacheReferenceEntry> nulled);

FOUNDATION_EXPORT void ComGoogleCommonCacheLocalCache_connectWriteOrderWithComGoogleCommonCacheReferenceEntry_withComGoogleCommonCacheReferenceEntry_(id<ComGoogleCommonCacheReferenceEntry> previous, id<ComGoogleCommonCacheReferenceEntry> next);

FOUNDATION_EXPORT void ComGoogleCommonCacheLocalCache_nullifyWriteOrderWithComGoogleCommonCacheReferenceEntry_(id<ComGoogleCommonCacheReferenceEntry> nulled);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheLocalCache)

#endif

#if !defined (ComGoogleCommonCacheLocalCache_Strength_) && (INCLUDE_ALL_ComGoogleCommonCacheLocalCache || defined(INCLUDE_ComGoogleCommonCacheLocalCache_Strength))
#define ComGoogleCommonCacheLocalCache_Strength_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class ComGoogleCommonBaseEquivalence;
@class ComGoogleCommonCacheLocalCache_Segment;
@class IOSObjectArray;
@protocol ComGoogleCommonCacheLocalCache_ValueReference;
@protocol ComGoogleCommonCacheReferenceEntry;

typedef NS_ENUM(NSUInteger, ComGoogleCommonCacheLocalCache_Strength_Enum) {
  ComGoogleCommonCacheLocalCache_Strength_Enum_STRONG = 0,
  ComGoogleCommonCacheLocalCache_Strength_Enum_SOFT = 1,
  ComGoogleCommonCacheLocalCache_Strength_Enum_WEAK = 2,
};

@interface ComGoogleCommonCacheLocalCache_Strength : JavaLangEnum

@property (readonly, class, nonnull) ComGoogleCommonCacheLocalCache_Strength *STRONG NS_SWIFT_NAME(STRONG);
@property (readonly, class, nonnull) ComGoogleCommonCacheLocalCache_Strength *SOFT NS_SWIFT_NAME(SOFT);
@property (readonly, class, nonnull) ComGoogleCommonCacheLocalCache_Strength *WEAK NS_SWIFT_NAME(WEAK);
+ (ComGoogleCommonCacheLocalCache_Strength * __nonnull)STRONG;

+ (ComGoogleCommonCacheLocalCache_Strength * __nonnull)SOFT;

+ (ComGoogleCommonCacheLocalCache_Strength * __nonnull)WEAK;

#pragma mark Public

+ (ComGoogleCommonCacheLocalCache_Strength *)valueOfWithNSString:(NSString * __nonnull)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

/*!
 @brief Returns the default equivalence strategy used to compare and hash keys or values referenced
  at this strength.This strategy will be used unless the user explicitly specifies an
  alternate strategy.
 */
- (ComGoogleCommonBaseEquivalence *)defaultEquivalence;

/*!
 @brief Creates a reference for the given value according to this value strength.
 */
- (id<ComGoogleCommonCacheLocalCache_ValueReference>)referenceValueWithComGoogleCommonCacheLocalCache_Segment:(ComGoogleCommonCacheLocalCache_Segment * __nonnull)segment
                                                                       withComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)entry_
                                                                                                       withId:(id __nonnull)value
                                                                                                      withInt:(jint)weight;

- (ComGoogleCommonCacheLocalCache_Strength_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonCacheLocalCache_Strength)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_Strength *ComGoogleCommonCacheLocalCache_Strength_values_[];

inline ComGoogleCommonCacheLocalCache_Strength *ComGoogleCommonCacheLocalCache_Strength_get_STRONG(void);
J2OBJC_ENUM_CONSTANT(ComGoogleCommonCacheLocalCache_Strength, STRONG)

inline ComGoogleCommonCacheLocalCache_Strength *ComGoogleCommonCacheLocalCache_Strength_get_SOFT(void);
J2OBJC_ENUM_CONSTANT(ComGoogleCommonCacheLocalCache_Strength, SOFT)

inline ComGoogleCommonCacheLocalCache_Strength *ComGoogleCommonCacheLocalCache_Strength_get_WEAK(void);
J2OBJC_ENUM_CONSTANT(ComGoogleCommonCacheLocalCache_Strength, WEAK)

FOUNDATION_EXPORT IOSObjectArray *ComGoogleCommonCacheLocalCache_Strength_values(void);

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_Strength *ComGoogleCommonCacheLocalCache_Strength_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_Strength *ComGoogleCommonCacheLocalCache_Strength_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheLocalCache_Strength)

#endif

#if !defined (ComGoogleCommonCacheLocalCache_EntryFactory_) && (INCLUDE_ALL_ComGoogleCommonCacheLocalCache || defined(INCLUDE_ComGoogleCommonCacheLocalCache_EntryFactory))
#define ComGoogleCommonCacheLocalCache_EntryFactory_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class ComGoogleCommonCacheLocalCache_Segment;
@class ComGoogleCommonCacheLocalCache_Strength;
@class IOSObjectArray;
@protocol ComGoogleCommonCacheReferenceEntry;

typedef NS_ENUM(NSUInteger, ComGoogleCommonCacheLocalCache_EntryFactory_Enum) {
  ComGoogleCommonCacheLocalCache_EntryFactory_Enum_STRONG = 0,
  ComGoogleCommonCacheLocalCache_EntryFactory_Enum_STRONG_ACCESS = 1,
  ComGoogleCommonCacheLocalCache_EntryFactory_Enum_STRONG_WRITE = 2,
  ComGoogleCommonCacheLocalCache_EntryFactory_Enum_STRONG_ACCESS_WRITE = 3,
  ComGoogleCommonCacheLocalCache_EntryFactory_Enum_WEAK = 4,
  ComGoogleCommonCacheLocalCache_EntryFactory_Enum_WEAK_ACCESS = 5,
  ComGoogleCommonCacheLocalCache_EntryFactory_Enum_WEAK_WRITE = 6,
  ComGoogleCommonCacheLocalCache_EntryFactory_Enum_WEAK_ACCESS_WRITE = 7,
};

/*!
 @brief Creates new entries.
 */
@interface ComGoogleCommonCacheLocalCache_EntryFactory : JavaLangEnum
@property (readonly, class) jint ACCESS_MASK NS_SWIFT_NAME(ACCESS_MASK);
@property (readonly, class) jint WRITE_MASK NS_SWIFT_NAME(WRITE_MASK);
@property (readonly, class) jint WEAK_MASK NS_SWIFT_NAME(WEAK_MASK);
@property (readonly, class, strong) IOSObjectArray *factories NS_SWIFT_NAME(factories);

@property (readonly, class, nonnull) ComGoogleCommonCacheLocalCache_EntryFactory *STRONG NS_SWIFT_NAME(STRONG);
@property (readonly, class, nonnull) ComGoogleCommonCacheLocalCache_EntryFactory *STRONG_ACCESS NS_SWIFT_NAME(STRONG_ACCESS);
@property (readonly, class, nonnull) ComGoogleCommonCacheLocalCache_EntryFactory *STRONG_WRITE NS_SWIFT_NAME(STRONG_WRITE);
@property (readonly, class, nonnull) ComGoogleCommonCacheLocalCache_EntryFactory *STRONG_ACCESS_WRITE NS_SWIFT_NAME(STRONG_ACCESS_WRITE);
@property (readonly, class, nonnull) ComGoogleCommonCacheLocalCache_EntryFactory *WEAK NS_SWIFT_NAME(WEAK);
@property (readonly, class, nonnull) ComGoogleCommonCacheLocalCache_EntryFactory *WEAK_ACCESS NS_SWIFT_NAME(WEAK_ACCESS);
@property (readonly, class, nonnull) ComGoogleCommonCacheLocalCache_EntryFactory *WEAK_WRITE NS_SWIFT_NAME(WEAK_WRITE);
@property (readonly, class, nonnull) ComGoogleCommonCacheLocalCache_EntryFactory *WEAK_ACCESS_WRITE NS_SWIFT_NAME(WEAK_ACCESS_WRITE);
+ (jint)ACCESS_MASK;

+ (jint)WRITE_MASK;

+ (jint)WEAK_MASK;

+ (IOSObjectArray *)factories;

+ (ComGoogleCommonCacheLocalCache_EntryFactory * __nonnull)STRONG;

+ (ComGoogleCommonCacheLocalCache_EntryFactory * __nonnull)STRONG_ACCESS;

+ (ComGoogleCommonCacheLocalCache_EntryFactory * __nonnull)STRONG_WRITE;

+ (ComGoogleCommonCacheLocalCache_EntryFactory * __nonnull)STRONG_ACCESS_WRITE;

+ (ComGoogleCommonCacheLocalCache_EntryFactory * __nonnull)WEAK;

+ (ComGoogleCommonCacheLocalCache_EntryFactory * __nonnull)WEAK_ACCESS;

+ (ComGoogleCommonCacheLocalCache_EntryFactory * __nonnull)WEAK_WRITE;

+ (ComGoogleCommonCacheLocalCache_EntryFactory * __nonnull)WEAK_ACCESS_WRITE;

#pragma mark Public

+ (ComGoogleCommonCacheLocalCache_EntryFactory *)valueOfWithNSString:(NSString * __nonnull)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (void)copyAccessEntryWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)original
                       withComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)newEntry OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copies an entry, assigning it a new <code>next</code> entry.
 @param original the entry to copy
 @param newNext entry in the same bucket
 */
- (id<ComGoogleCommonCacheReferenceEntry>)copyEntryWithComGoogleCommonCacheLocalCache_Segment:(ComGoogleCommonCacheLocalCache_Segment * __nonnull)segment
                                                       withComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)original
                                                       withComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)newNext OBJC_METHOD_FAMILY_NONE;

- (void)copyWriteEntryWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)original
                      withComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)newEntry OBJC_METHOD_FAMILY_NONE;

+ (ComGoogleCommonCacheLocalCache_EntryFactory *)getFactoryWithComGoogleCommonCacheLocalCache_Strength:(ComGoogleCommonCacheLocalCache_Strength * __nonnull)keyStrength
                                                                                           withBoolean:(jboolean)usesAccessQueue
                                                                                           withBoolean:(jboolean)usesWriteQueue;

/*!
 @brief Creates a new entry.
 @param segment to create the entry for
 @param key of the entry
 @param hash_ of the key
 @param next entry in the same bucket
 */
- (id<ComGoogleCommonCacheReferenceEntry>)newEntryWithComGoogleCommonCacheLocalCache_Segment:(ComGoogleCommonCacheLocalCache_Segment * __nonnull)segment
                                                                                      withId:(id __nonnull)key
                                                                                     withInt:(jint)hash_
                                                      withComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nullable)next OBJC_METHOD_FAMILY_NONE;

- (ComGoogleCommonCacheLocalCache_EntryFactory_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonCacheLocalCache_EntryFactory)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_EntryFactory *ComGoogleCommonCacheLocalCache_EntryFactory_values_[];

inline ComGoogleCommonCacheLocalCache_EntryFactory *ComGoogleCommonCacheLocalCache_EntryFactory_get_STRONG(void);
J2OBJC_ENUM_CONSTANT(ComGoogleCommonCacheLocalCache_EntryFactory, STRONG)

inline ComGoogleCommonCacheLocalCache_EntryFactory *ComGoogleCommonCacheLocalCache_EntryFactory_get_STRONG_ACCESS(void);
J2OBJC_ENUM_CONSTANT(ComGoogleCommonCacheLocalCache_EntryFactory, STRONG_ACCESS)

inline ComGoogleCommonCacheLocalCache_EntryFactory *ComGoogleCommonCacheLocalCache_EntryFactory_get_STRONG_WRITE(void);
J2OBJC_ENUM_CONSTANT(ComGoogleCommonCacheLocalCache_EntryFactory, STRONG_WRITE)

inline ComGoogleCommonCacheLocalCache_EntryFactory *ComGoogleCommonCacheLocalCache_EntryFactory_get_STRONG_ACCESS_WRITE(void);
J2OBJC_ENUM_CONSTANT(ComGoogleCommonCacheLocalCache_EntryFactory, STRONG_ACCESS_WRITE)

inline ComGoogleCommonCacheLocalCache_EntryFactory *ComGoogleCommonCacheLocalCache_EntryFactory_get_WEAK(void);
J2OBJC_ENUM_CONSTANT(ComGoogleCommonCacheLocalCache_EntryFactory, WEAK)

inline ComGoogleCommonCacheLocalCache_EntryFactory *ComGoogleCommonCacheLocalCache_EntryFactory_get_WEAK_ACCESS(void);
J2OBJC_ENUM_CONSTANT(ComGoogleCommonCacheLocalCache_EntryFactory, WEAK_ACCESS)

inline ComGoogleCommonCacheLocalCache_EntryFactory *ComGoogleCommonCacheLocalCache_EntryFactory_get_WEAK_WRITE(void);
J2OBJC_ENUM_CONSTANT(ComGoogleCommonCacheLocalCache_EntryFactory, WEAK_WRITE)

inline ComGoogleCommonCacheLocalCache_EntryFactory *ComGoogleCommonCacheLocalCache_EntryFactory_get_WEAK_ACCESS_WRITE(void);
J2OBJC_ENUM_CONSTANT(ComGoogleCommonCacheLocalCache_EntryFactory, WEAK_ACCESS_WRITE)

inline jint ComGoogleCommonCacheLocalCache_EntryFactory_get_ACCESS_MASK(void);
#define ComGoogleCommonCacheLocalCache_EntryFactory_ACCESS_MASK 1
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonCacheLocalCache_EntryFactory, ACCESS_MASK, jint)

inline jint ComGoogleCommonCacheLocalCache_EntryFactory_get_WRITE_MASK(void);
#define ComGoogleCommonCacheLocalCache_EntryFactory_WRITE_MASK 2
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonCacheLocalCache_EntryFactory, WRITE_MASK, jint)

inline jint ComGoogleCommonCacheLocalCache_EntryFactory_get_WEAK_MASK(void);
#define ComGoogleCommonCacheLocalCache_EntryFactory_WEAK_MASK 4
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonCacheLocalCache_EntryFactory, WEAK_MASK, jint)

/*!
 @brief Look-up table for factories.
 */
inline IOSObjectArray *ComGoogleCommonCacheLocalCache_EntryFactory_get_factories(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *ComGoogleCommonCacheLocalCache_EntryFactory_factories;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonCacheLocalCache_EntryFactory, factories, IOSObjectArray *)

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_EntryFactory *ComGoogleCommonCacheLocalCache_EntryFactory_getFactoryWithComGoogleCommonCacheLocalCache_Strength_withBoolean_withBoolean_(ComGoogleCommonCacheLocalCache_Strength *keyStrength, jboolean usesAccessQueue, jboolean usesWriteQueue);

FOUNDATION_EXPORT IOSObjectArray *ComGoogleCommonCacheLocalCache_EntryFactory_values(void);

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_EntryFactory *ComGoogleCommonCacheLocalCache_EntryFactory_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_EntryFactory *ComGoogleCommonCacheLocalCache_EntryFactory_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheLocalCache_EntryFactory)

#endif

#if !defined (ComGoogleCommonCacheLocalCache_ValueReference_) && (INCLUDE_ALL_ComGoogleCommonCacheLocalCache || defined(INCLUDE_ComGoogleCommonCacheLocalCache_ValueReference))
#define ComGoogleCommonCacheLocalCache_ValueReference_

@class JavaLangRefReferenceQueue;
@protocol ComGoogleCommonCacheReferenceEntry;

/*!
 @brief A reference to a value.
 */
@protocol ComGoogleCommonCacheLocalCache_ValueReference < JavaObject >

/*!
 @brief Returns the value.Does not block or throw exceptions.
 */
- (id __nullable)get;

/*!
 @brief Waits for a value that may still be loading.Unlike get(), this method can block (in the case
  of FutureValueReference).
 @throw ExecutionExceptionif the loading thread throws an exception
 @throw ExecutionErrorif the loading thread throws an error
 */
- (id)waitForValue;

/*!
 @brief Returns the weight of this entry.This is assumed to be static between calls to setValue.
 */
- (jint)getWeight;

/*!
 @brief Returns the entry associated with this value reference, or <code>null</code> if this value
  reference is independent of any entry.
 */
- (id<ComGoogleCommonCacheReferenceEntry> __nullable)getEntry;

/*!
 @brief Creates a copy of this reference for the given entry.
 <p><code>value</code> may be null only for a loading reference.
 */
- (id<ComGoogleCommonCacheLocalCache_ValueReference>)copyForWithJavaLangRefReferenceQueue:(JavaLangRefReferenceQueue * __nonnull)queue
                                                                                   withId:(id __nullable)value
                                                   withComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)entry_ OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Notify pending loads that a new value was set.This is only relevant to loading value
  references.
 */
- (void)notifyNewValueWithId:(id __nullable)newValue;

/*!
 @brief Returns true if a new value is currently loading, regardless of whether or not there is an
  existing value.It is assumed that the return value of this method is constant for any given
  ValueReference instance.
 */
- (jboolean)isLoading;

/*!
 @brief Returns true if this reference contains an active value, meaning one that is still considered
  present in the cache.Active values consist of live values, which are returned by cache
  lookups, and dead values, which have been evicted but awaiting removal.
 Non-active values
  consist strictly of loading values, though during refresh a value may be both active and
  loading.
 */
- (jboolean)isActive;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheLocalCache_ValueReference)

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheLocalCache_ValueReference)

#endif

#if !defined (ComGoogleCommonCacheLocalCache_AbstractReferenceEntry_) && (INCLUDE_ALL_ComGoogleCommonCacheLocalCache || defined(INCLUDE_ComGoogleCommonCacheLocalCache_AbstractReferenceEntry))
#define ComGoogleCommonCacheLocalCache_AbstractReferenceEntry_

#define RESTRICT_ComGoogleCommonCacheReferenceEntry 1
#define INCLUDE_ComGoogleCommonCacheReferenceEntry 1
#include "com/google/common/cache/ReferenceEntry.h"

@protocol ComGoogleCommonCacheLocalCache_ValueReference;

@interface ComGoogleCommonCacheLocalCache_AbstractReferenceEntry : NSObject < ComGoogleCommonCacheReferenceEntry >

#pragma mark Public

- (jlong)getAccessTime;

- (jint)getHash;

- (id)getKey;

- (id<ComGoogleCommonCacheReferenceEntry>)getNext;

- (id<ComGoogleCommonCacheReferenceEntry>)getNextInAccessQueue;

- (id<ComGoogleCommonCacheReferenceEntry>)getNextInWriteQueue;

- (id<ComGoogleCommonCacheReferenceEntry>)getPreviousInAccessQueue;

- (id<ComGoogleCommonCacheReferenceEntry>)getPreviousInWriteQueue;

- (id<ComGoogleCommonCacheLocalCache_ValueReference>)getValueReference;

- (jlong)getWriteTime;

- (void)setAccessTimeWithLong:(jlong)time;

- (void)setNextInAccessQueueWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)next;

- (void)setNextInWriteQueueWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)next;

- (void)setPreviousInAccessQueueWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)previous;

- (void)setPreviousInWriteQueueWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)previous;

- (void)setValueReferenceWithComGoogleCommonCacheLocalCache_ValueReference:(id<ComGoogleCommonCacheLocalCache_ValueReference> __nonnull)valueReference;

- (void)setWriteTimeWithLong:(jlong)time;

#pragma mark Package-Private

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheLocalCache_AbstractReferenceEntry)

FOUNDATION_EXPORT void ComGoogleCommonCacheLocalCache_AbstractReferenceEntry_init(ComGoogleCommonCacheLocalCache_AbstractReferenceEntry *self);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheLocalCache_AbstractReferenceEntry)

#endif

#if !defined (ComGoogleCommonCacheLocalCache_StrongEntry_) && (INCLUDE_ALL_ComGoogleCommonCacheLocalCache || defined(INCLUDE_ComGoogleCommonCacheLocalCache_StrongEntry))
#define ComGoogleCommonCacheLocalCache_StrongEntry_

@protocol ComGoogleCommonCacheLocalCache_ValueReference;
@protocol ComGoogleCommonCacheReferenceEntry;

/*!
 @brief Used for strongly-referenced keys.
 */
@interface ComGoogleCommonCacheLocalCache_StrongEntry : ComGoogleCommonCacheLocalCache_AbstractReferenceEntry {
 @public
  id key_;
  jint hash__;
  id<ComGoogleCommonCacheReferenceEntry> next_;
  volatile_id valueReference_;
}

#pragma mark Public

- (jint)getHash;

- (id)getKey;

- (id<ComGoogleCommonCacheReferenceEntry>)getNext;

- (id<ComGoogleCommonCacheLocalCache_ValueReference>)getValueReference;

- (void)setValueReferenceWithComGoogleCommonCacheLocalCache_ValueReference:(id<ComGoogleCommonCacheLocalCache_ValueReference> __nonnull)valueReference;

#pragma mark Package-Private

- (instancetype __nonnull)initWithId:(id __nonnull)key
                             withInt:(jint)hash_
withComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nullable)next;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheLocalCache_StrongEntry)

J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_StrongEntry, key_, id)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_StrongEntry, next_, id<ComGoogleCommonCacheReferenceEntry>)
J2OBJC_VOLATILE_FIELD_SETTER(ComGoogleCommonCacheLocalCache_StrongEntry, valueReference_, id<ComGoogleCommonCacheLocalCache_ValueReference>)

FOUNDATION_EXPORT void ComGoogleCommonCacheLocalCache_StrongEntry_initWithId_withInt_withComGoogleCommonCacheReferenceEntry_(ComGoogleCommonCacheLocalCache_StrongEntry *self, id key, jint hash_, id<ComGoogleCommonCacheReferenceEntry> next);

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_StrongEntry *new_ComGoogleCommonCacheLocalCache_StrongEntry_initWithId_withInt_withComGoogleCommonCacheReferenceEntry_(id key, jint hash_, id<ComGoogleCommonCacheReferenceEntry> next) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_StrongEntry *create_ComGoogleCommonCacheLocalCache_StrongEntry_initWithId_withInt_withComGoogleCommonCacheReferenceEntry_(id key, jint hash_, id<ComGoogleCommonCacheReferenceEntry> next);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheLocalCache_StrongEntry)

#endif

#if !defined (ComGoogleCommonCacheLocalCache_StrongAccessEntry_) && (INCLUDE_ALL_ComGoogleCommonCacheLocalCache || defined(INCLUDE_ComGoogleCommonCacheLocalCache_StrongAccessEntry))
#define ComGoogleCommonCacheLocalCache_StrongAccessEntry_

@protocol ComGoogleCommonCacheReferenceEntry;

@interface ComGoogleCommonCacheLocalCache_StrongAccessEntry : ComGoogleCommonCacheLocalCache_StrongEntry {
 @public
  volatile_jlong accessTime_;
  id<ComGoogleCommonCacheReferenceEntry> nextAccess_;
  id<ComGoogleCommonCacheReferenceEntry> previousAccess_;
}

#pragma mark Public

- (jlong)getAccessTime;

- (id<ComGoogleCommonCacheReferenceEntry>)getNextInAccessQueue;

- (id<ComGoogleCommonCacheReferenceEntry>)getPreviousInAccessQueue;

- (void)setAccessTimeWithLong:(jlong)time;

- (void)setNextInAccessQueueWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)next;

- (void)setPreviousInAccessQueueWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)previous;

#pragma mark Package-Private

- (instancetype __nonnull)initWithId:(id __nonnull)key
                             withInt:(jint)hash_
withComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nullable)next;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheLocalCache_StrongAccessEntry)

J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_StrongAccessEntry, nextAccess_, id<ComGoogleCommonCacheReferenceEntry>)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_StrongAccessEntry, previousAccess_, id<ComGoogleCommonCacheReferenceEntry>)

FOUNDATION_EXPORT void ComGoogleCommonCacheLocalCache_StrongAccessEntry_initWithId_withInt_withComGoogleCommonCacheReferenceEntry_(ComGoogleCommonCacheLocalCache_StrongAccessEntry *self, id key, jint hash_, id<ComGoogleCommonCacheReferenceEntry> next);

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_StrongAccessEntry *new_ComGoogleCommonCacheLocalCache_StrongAccessEntry_initWithId_withInt_withComGoogleCommonCacheReferenceEntry_(id key, jint hash_, id<ComGoogleCommonCacheReferenceEntry> next) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_StrongAccessEntry *create_ComGoogleCommonCacheLocalCache_StrongAccessEntry_initWithId_withInt_withComGoogleCommonCacheReferenceEntry_(id key, jint hash_, id<ComGoogleCommonCacheReferenceEntry> next);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheLocalCache_StrongAccessEntry)

#endif

#if !defined (ComGoogleCommonCacheLocalCache_StrongWriteEntry_) && (INCLUDE_ALL_ComGoogleCommonCacheLocalCache || defined(INCLUDE_ComGoogleCommonCacheLocalCache_StrongWriteEntry))
#define ComGoogleCommonCacheLocalCache_StrongWriteEntry_

@protocol ComGoogleCommonCacheReferenceEntry;

@interface ComGoogleCommonCacheLocalCache_StrongWriteEntry : ComGoogleCommonCacheLocalCache_StrongEntry {
 @public
  volatile_jlong writeTime_;
  id<ComGoogleCommonCacheReferenceEntry> nextWrite_;
  id<ComGoogleCommonCacheReferenceEntry> previousWrite_;
}

#pragma mark Public

- (id<ComGoogleCommonCacheReferenceEntry>)getNextInWriteQueue;

- (id<ComGoogleCommonCacheReferenceEntry>)getPreviousInWriteQueue;

- (jlong)getWriteTime;

- (void)setNextInWriteQueueWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)next;

- (void)setPreviousInWriteQueueWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)previous;

- (void)setWriteTimeWithLong:(jlong)time;

#pragma mark Package-Private

- (instancetype __nonnull)initWithId:(id __nonnull)key
                             withInt:(jint)hash_
withComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nullable)next;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheLocalCache_StrongWriteEntry)

J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_StrongWriteEntry, nextWrite_, id<ComGoogleCommonCacheReferenceEntry>)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_StrongWriteEntry, previousWrite_, id<ComGoogleCommonCacheReferenceEntry>)

FOUNDATION_EXPORT void ComGoogleCommonCacheLocalCache_StrongWriteEntry_initWithId_withInt_withComGoogleCommonCacheReferenceEntry_(ComGoogleCommonCacheLocalCache_StrongWriteEntry *self, id key, jint hash_, id<ComGoogleCommonCacheReferenceEntry> next);

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_StrongWriteEntry *new_ComGoogleCommonCacheLocalCache_StrongWriteEntry_initWithId_withInt_withComGoogleCommonCacheReferenceEntry_(id key, jint hash_, id<ComGoogleCommonCacheReferenceEntry> next) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_StrongWriteEntry *create_ComGoogleCommonCacheLocalCache_StrongWriteEntry_initWithId_withInt_withComGoogleCommonCacheReferenceEntry_(id key, jint hash_, id<ComGoogleCommonCacheReferenceEntry> next);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheLocalCache_StrongWriteEntry)

#endif

#if !defined (ComGoogleCommonCacheLocalCache_StrongAccessWriteEntry_) && (INCLUDE_ALL_ComGoogleCommonCacheLocalCache || defined(INCLUDE_ComGoogleCommonCacheLocalCache_StrongAccessWriteEntry))
#define ComGoogleCommonCacheLocalCache_StrongAccessWriteEntry_

@protocol ComGoogleCommonCacheReferenceEntry;

@interface ComGoogleCommonCacheLocalCache_StrongAccessWriteEntry : ComGoogleCommonCacheLocalCache_StrongEntry {
 @public
  volatile_jlong accessTime_;
  id<ComGoogleCommonCacheReferenceEntry> nextAccess_;
  id<ComGoogleCommonCacheReferenceEntry> previousAccess_;
  volatile_jlong writeTime_;
  id<ComGoogleCommonCacheReferenceEntry> nextWrite_;
  id<ComGoogleCommonCacheReferenceEntry> previousWrite_;
}

#pragma mark Public

- (jlong)getAccessTime;

- (id<ComGoogleCommonCacheReferenceEntry>)getNextInAccessQueue;

- (id<ComGoogleCommonCacheReferenceEntry>)getNextInWriteQueue;

- (id<ComGoogleCommonCacheReferenceEntry>)getPreviousInAccessQueue;

- (id<ComGoogleCommonCacheReferenceEntry>)getPreviousInWriteQueue;

- (jlong)getWriteTime;

- (void)setAccessTimeWithLong:(jlong)time;

- (void)setNextInAccessQueueWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)next;

- (void)setNextInWriteQueueWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)next;

- (void)setPreviousInAccessQueueWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)previous;

- (void)setPreviousInWriteQueueWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)previous;

- (void)setWriteTimeWithLong:(jlong)time;

#pragma mark Package-Private

- (instancetype __nonnull)initWithId:(id __nonnull)key
                             withInt:(jint)hash_
withComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nullable)next;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheLocalCache_StrongAccessWriteEntry)

J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_StrongAccessWriteEntry, nextAccess_, id<ComGoogleCommonCacheReferenceEntry>)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_StrongAccessWriteEntry, previousAccess_, id<ComGoogleCommonCacheReferenceEntry>)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_StrongAccessWriteEntry, nextWrite_, id<ComGoogleCommonCacheReferenceEntry>)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_StrongAccessWriteEntry, previousWrite_, id<ComGoogleCommonCacheReferenceEntry>)

FOUNDATION_EXPORT void ComGoogleCommonCacheLocalCache_StrongAccessWriteEntry_initWithId_withInt_withComGoogleCommonCacheReferenceEntry_(ComGoogleCommonCacheLocalCache_StrongAccessWriteEntry *self, id key, jint hash_, id<ComGoogleCommonCacheReferenceEntry> next);

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_StrongAccessWriteEntry *new_ComGoogleCommonCacheLocalCache_StrongAccessWriteEntry_initWithId_withInt_withComGoogleCommonCacheReferenceEntry_(id key, jint hash_, id<ComGoogleCommonCacheReferenceEntry> next) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_StrongAccessWriteEntry *create_ComGoogleCommonCacheLocalCache_StrongAccessWriteEntry_initWithId_withInt_withComGoogleCommonCacheReferenceEntry_(id key, jint hash_, id<ComGoogleCommonCacheReferenceEntry> next);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheLocalCache_StrongAccessWriteEntry)

#endif

#if !defined (ComGoogleCommonCacheLocalCache_WeakEntry_) && (INCLUDE_ALL_ComGoogleCommonCacheLocalCache || defined(INCLUDE_ComGoogleCommonCacheLocalCache_WeakEntry))
#define ComGoogleCommonCacheLocalCache_WeakEntry_

#define RESTRICT_JavaLangRefWeakReference 1
#define INCLUDE_JavaLangRefWeakReference 1
#include "java/lang/ref/WeakReference.h"

#define RESTRICT_ComGoogleCommonCacheReferenceEntry 1
#define INCLUDE_ComGoogleCommonCacheReferenceEntry 1
#include "com/google/common/cache/ReferenceEntry.h"

@class JavaLangRefReferenceQueue;
@protocol ComGoogleCommonCacheLocalCache_ValueReference;

/*!
 @brief Used for weakly-referenced keys.
 */
@interface ComGoogleCommonCacheLocalCache_WeakEntry : JavaLangRefWeakReference < ComGoogleCommonCacheReferenceEntry > {
 @public
  jint hash__;
  id<ComGoogleCommonCacheReferenceEntry> next_;
  volatile_id valueReference_;
}

#pragma mark Public

- (jlong)getAccessTime;

- (jint)getHash;

- (id)getKey;

- (id<ComGoogleCommonCacheReferenceEntry>)getNext;

- (id<ComGoogleCommonCacheReferenceEntry>)getNextInAccessQueue;

- (id<ComGoogleCommonCacheReferenceEntry>)getNextInWriteQueue;

- (id<ComGoogleCommonCacheReferenceEntry>)getPreviousInAccessQueue;

- (id<ComGoogleCommonCacheReferenceEntry>)getPreviousInWriteQueue;

- (id<ComGoogleCommonCacheLocalCache_ValueReference>)getValueReference;

- (jlong)getWriteTime;

- (void)setAccessTimeWithLong:(jlong)time;

- (void)setNextInAccessQueueWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)next;

- (void)setNextInWriteQueueWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)next;

- (void)setPreviousInAccessQueueWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)previous;

- (void)setPreviousInWriteQueueWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)previous;

- (void)setValueReferenceWithComGoogleCommonCacheLocalCache_ValueReference:(id<ComGoogleCommonCacheLocalCache_ValueReference> __nonnull)valueReference;

- (void)setWriteTimeWithLong:(jlong)time;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaLangRefReferenceQueue:(JavaLangRefReferenceQueue * __nonnull)queue
                                                     withId:(id __nonnull)key
                                                    withInt:(jint)hash_
                     withComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nullable)next;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithId:(id __nonnull)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithId:(id __nonnull)arg0
       withJavaLangRefReferenceQueue:(JavaLangRefReferenceQueue * __nonnull)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheLocalCache_WeakEntry)

J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_WeakEntry, next_, id<ComGoogleCommonCacheReferenceEntry>)
J2OBJC_VOLATILE_FIELD_SETTER(ComGoogleCommonCacheLocalCache_WeakEntry, valueReference_, id<ComGoogleCommonCacheLocalCache_ValueReference>)

FOUNDATION_EXPORT void ComGoogleCommonCacheLocalCache_WeakEntry_initWithJavaLangRefReferenceQueue_withId_withInt_withComGoogleCommonCacheReferenceEntry_(ComGoogleCommonCacheLocalCache_WeakEntry *self, JavaLangRefReferenceQueue *queue, id key, jint hash_, id<ComGoogleCommonCacheReferenceEntry> next);

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_WeakEntry *new_ComGoogleCommonCacheLocalCache_WeakEntry_initWithJavaLangRefReferenceQueue_withId_withInt_withComGoogleCommonCacheReferenceEntry_(JavaLangRefReferenceQueue *queue, id key, jint hash_, id<ComGoogleCommonCacheReferenceEntry> next) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_WeakEntry *create_ComGoogleCommonCacheLocalCache_WeakEntry_initWithJavaLangRefReferenceQueue_withId_withInt_withComGoogleCommonCacheReferenceEntry_(JavaLangRefReferenceQueue *queue, id key, jint hash_, id<ComGoogleCommonCacheReferenceEntry> next);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheLocalCache_WeakEntry)

#endif

#if !defined (ComGoogleCommonCacheLocalCache_WeakAccessEntry_) && (INCLUDE_ALL_ComGoogleCommonCacheLocalCache || defined(INCLUDE_ComGoogleCommonCacheLocalCache_WeakAccessEntry))
#define ComGoogleCommonCacheLocalCache_WeakAccessEntry_

@class JavaLangRefReferenceQueue;
@protocol ComGoogleCommonCacheReferenceEntry;

@interface ComGoogleCommonCacheLocalCache_WeakAccessEntry : ComGoogleCommonCacheLocalCache_WeakEntry {
 @public
  volatile_jlong accessTime_;
  id<ComGoogleCommonCacheReferenceEntry> nextAccess_;
  id<ComGoogleCommonCacheReferenceEntry> previousAccess_;
}

#pragma mark Public

- (jlong)getAccessTime;

- (id<ComGoogleCommonCacheReferenceEntry>)getNextInAccessQueue;

- (id<ComGoogleCommonCacheReferenceEntry>)getPreviousInAccessQueue;

- (void)setAccessTimeWithLong:(jlong)time;

- (void)setNextInAccessQueueWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)next;

- (void)setPreviousInAccessQueueWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)previous;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaLangRefReferenceQueue:(JavaLangRefReferenceQueue * __nonnull)queue
                                                     withId:(id __nonnull)key
                                                    withInt:(jint)hash_
                     withComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nullable)next;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheLocalCache_WeakAccessEntry)

J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_WeakAccessEntry, nextAccess_, id<ComGoogleCommonCacheReferenceEntry>)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_WeakAccessEntry, previousAccess_, id<ComGoogleCommonCacheReferenceEntry>)

FOUNDATION_EXPORT void ComGoogleCommonCacheLocalCache_WeakAccessEntry_initWithJavaLangRefReferenceQueue_withId_withInt_withComGoogleCommonCacheReferenceEntry_(ComGoogleCommonCacheLocalCache_WeakAccessEntry *self, JavaLangRefReferenceQueue *queue, id key, jint hash_, id<ComGoogleCommonCacheReferenceEntry> next);

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_WeakAccessEntry *new_ComGoogleCommonCacheLocalCache_WeakAccessEntry_initWithJavaLangRefReferenceQueue_withId_withInt_withComGoogleCommonCacheReferenceEntry_(JavaLangRefReferenceQueue *queue, id key, jint hash_, id<ComGoogleCommonCacheReferenceEntry> next) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_WeakAccessEntry *create_ComGoogleCommonCacheLocalCache_WeakAccessEntry_initWithJavaLangRefReferenceQueue_withId_withInt_withComGoogleCommonCacheReferenceEntry_(JavaLangRefReferenceQueue *queue, id key, jint hash_, id<ComGoogleCommonCacheReferenceEntry> next);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheLocalCache_WeakAccessEntry)

#endif

#if !defined (ComGoogleCommonCacheLocalCache_WeakWriteEntry_) && (INCLUDE_ALL_ComGoogleCommonCacheLocalCache || defined(INCLUDE_ComGoogleCommonCacheLocalCache_WeakWriteEntry))
#define ComGoogleCommonCacheLocalCache_WeakWriteEntry_

@class JavaLangRefReferenceQueue;
@protocol ComGoogleCommonCacheReferenceEntry;

@interface ComGoogleCommonCacheLocalCache_WeakWriteEntry : ComGoogleCommonCacheLocalCache_WeakEntry {
 @public
  volatile_jlong writeTime_;
  id<ComGoogleCommonCacheReferenceEntry> nextWrite_;
  id<ComGoogleCommonCacheReferenceEntry> previousWrite_;
}

#pragma mark Public

- (id<ComGoogleCommonCacheReferenceEntry>)getNextInWriteQueue;

- (id<ComGoogleCommonCacheReferenceEntry>)getPreviousInWriteQueue;

- (jlong)getWriteTime;

- (void)setNextInWriteQueueWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)next;

- (void)setPreviousInWriteQueueWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)previous;

- (void)setWriteTimeWithLong:(jlong)time;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaLangRefReferenceQueue:(JavaLangRefReferenceQueue * __nonnull)queue
                                                     withId:(id __nonnull)key
                                                    withInt:(jint)hash_
                     withComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nullable)next;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheLocalCache_WeakWriteEntry)

J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_WeakWriteEntry, nextWrite_, id<ComGoogleCommonCacheReferenceEntry>)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_WeakWriteEntry, previousWrite_, id<ComGoogleCommonCacheReferenceEntry>)

FOUNDATION_EXPORT void ComGoogleCommonCacheLocalCache_WeakWriteEntry_initWithJavaLangRefReferenceQueue_withId_withInt_withComGoogleCommonCacheReferenceEntry_(ComGoogleCommonCacheLocalCache_WeakWriteEntry *self, JavaLangRefReferenceQueue *queue, id key, jint hash_, id<ComGoogleCommonCacheReferenceEntry> next);

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_WeakWriteEntry *new_ComGoogleCommonCacheLocalCache_WeakWriteEntry_initWithJavaLangRefReferenceQueue_withId_withInt_withComGoogleCommonCacheReferenceEntry_(JavaLangRefReferenceQueue *queue, id key, jint hash_, id<ComGoogleCommonCacheReferenceEntry> next) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_WeakWriteEntry *create_ComGoogleCommonCacheLocalCache_WeakWriteEntry_initWithJavaLangRefReferenceQueue_withId_withInt_withComGoogleCommonCacheReferenceEntry_(JavaLangRefReferenceQueue *queue, id key, jint hash_, id<ComGoogleCommonCacheReferenceEntry> next);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheLocalCache_WeakWriteEntry)

#endif

#if !defined (ComGoogleCommonCacheLocalCache_WeakAccessWriteEntry_) && (INCLUDE_ALL_ComGoogleCommonCacheLocalCache || defined(INCLUDE_ComGoogleCommonCacheLocalCache_WeakAccessWriteEntry))
#define ComGoogleCommonCacheLocalCache_WeakAccessWriteEntry_

@class JavaLangRefReferenceQueue;
@protocol ComGoogleCommonCacheReferenceEntry;

@interface ComGoogleCommonCacheLocalCache_WeakAccessWriteEntry : ComGoogleCommonCacheLocalCache_WeakEntry {
 @public
  volatile_jlong accessTime_;
  id<ComGoogleCommonCacheReferenceEntry> nextAccess_;
  id<ComGoogleCommonCacheReferenceEntry> previousAccess_;
  volatile_jlong writeTime_;
  id<ComGoogleCommonCacheReferenceEntry> nextWrite_;
  id<ComGoogleCommonCacheReferenceEntry> previousWrite_;
}

#pragma mark Public

- (jlong)getAccessTime;

- (id<ComGoogleCommonCacheReferenceEntry>)getNextInAccessQueue;

- (id<ComGoogleCommonCacheReferenceEntry>)getNextInWriteQueue;

- (id<ComGoogleCommonCacheReferenceEntry>)getPreviousInAccessQueue;

- (id<ComGoogleCommonCacheReferenceEntry>)getPreviousInWriteQueue;

- (jlong)getWriteTime;

- (void)setAccessTimeWithLong:(jlong)time;

- (void)setNextInAccessQueueWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)next;

- (void)setNextInWriteQueueWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)next;

- (void)setPreviousInAccessQueueWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)previous;

- (void)setPreviousInWriteQueueWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)previous;

- (void)setWriteTimeWithLong:(jlong)time;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaLangRefReferenceQueue:(JavaLangRefReferenceQueue * __nonnull)queue
                                                     withId:(id __nonnull)key
                                                    withInt:(jint)hash_
                     withComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nullable)next;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheLocalCache_WeakAccessWriteEntry)

J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_WeakAccessWriteEntry, nextAccess_, id<ComGoogleCommonCacheReferenceEntry>)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_WeakAccessWriteEntry, previousAccess_, id<ComGoogleCommonCacheReferenceEntry>)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_WeakAccessWriteEntry, nextWrite_, id<ComGoogleCommonCacheReferenceEntry>)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_WeakAccessWriteEntry, previousWrite_, id<ComGoogleCommonCacheReferenceEntry>)

FOUNDATION_EXPORT void ComGoogleCommonCacheLocalCache_WeakAccessWriteEntry_initWithJavaLangRefReferenceQueue_withId_withInt_withComGoogleCommonCacheReferenceEntry_(ComGoogleCommonCacheLocalCache_WeakAccessWriteEntry *self, JavaLangRefReferenceQueue *queue, id key, jint hash_, id<ComGoogleCommonCacheReferenceEntry> next);

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_WeakAccessWriteEntry *new_ComGoogleCommonCacheLocalCache_WeakAccessWriteEntry_initWithJavaLangRefReferenceQueue_withId_withInt_withComGoogleCommonCacheReferenceEntry_(JavaLangRefReferenceQueue *queue, id key, jint hash_, id<ComGoogleCommonCacheReferenceEntry> next) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_WeakAccessWriteEntry *create_ComGoogleCommonCacheLocalCache_WeakAccessWriteEntry_initWithJavaLangRefReferenceQueue_withId_withInt_withComGoogleCommonCacheReferenceEntry_(JavaLangRefReferenceQueue *queue, id key, jint hash_, id<ComGoogleCommonCacheReferenceEntry> next);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheLocalCache_WeakAccessWriteEntry)

#endif

#if !defined (ComGoogleCommonCacheLocalCache_WeakValueReference_) && (INCLUDE_ALL_ComGoogleCommonCacheLocalCache || defined(INCLUDE_ComGoogleCommonCacheLocalCache_WeakValueReference))
#define ComGoogleCommonCacheLocalCache_WeakValueReference_

#define RESTRICT_JavaLangRefWeakReference 1
#define INCLUDE_JavaLangRefWeakReference 1
#include "java/lang/ref/WeakReference.h"

@class JavaLangRefReferenceQueue;
@protocol ComGoogleCommonCacheLocalCache_ValueReference;
@protocol ComGoogleCommonCacheReferenceEntry;

/*!
 @brief References a weak value.
 */
@interface ComGoogleCommonCacheLocalCache_WeakValueReference : JavaLangRefWeakReference < ComGoogleCommonCacheLocalCache_ValueReference > {
 @public
  id<ComGoogleCommonCacheReferenceEntry> entry__;
}

#pragma mark Public

- (id<ComGoogleCommonCacheLocalCache_ValueReference>)copyForWithJavaLangRefReferenceQueue:(JavaLangRefReferenceQueue * __nonnull)queue
                                                                                   withId:(id __nonnull)value
                                                   withComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)entry_ OBJC_METHOD_FAMILY_NONE;

- (id<ComGoogleCommonCacheReferenceEntry>)getEntry;

- (jint)getWeight;

- (jboolean)isActive;

- (jboolean)isLoading;

- (void)notifyNewValueWithId:(id __nonnull)newValue;

- (id)waitForValue;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaLangRefReferenceQueue:(JavaLangRefReferenceQueue * __nonnull)queue
                                                     withId:(id __nonnull)referent
                     withComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)entry_;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithId:(id __nonnull)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithId:(id __nonnull)arg0
       withJavaLangRefReferenceQueue:(JavaLangRefReferenceQueue * __nonnull)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheLocalCache_WeakValueReference)

J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_WeakValueReference, entry__, id<ComGoogleCommonCacheReferenceEntry>)

FOUNDATION_EXPORT void ComGoogleCommonCacheLocalCache_WeakValueReference_initWithJavaLangRefReferenceQueue_withId_withComGoogleCommonCacheReferenceEntry_(ComGoogleCommonCacheLocalCache_WeakValueReference *self, JavaLangRefReferenceQueue *queue, id referent, id<ComGoogleCommonCacheReferenceEntry> entry_);

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_WeakValueReference *new_ComGoogleCommonCacheLocalCache_WeakValueReference_initWithJavaLangRefReferenceQueue_withId_withComGoogleCommonCacheReferenceEntry_(JavaLangRefReferenceQueue *queue, id referent, id<ComGoogleCommonCacheReferenceEntry> entry_) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_WeakValueReference *create_ComGoogleCommonCacheLocalCache_WeakValueReference_initWithJavaLangRefReferenceQueue_withId_withComGoogleCommonCacheReferenceEntry_(JavaLangRefReferenceQueue *queue, id referent, id<ComGoogleCommonCacheReferenceEntry> entry_);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheLocalCache_WeakValueReference)

#endif

#if !defined (ComGoogleCommonCacheLocalCache_SoftValueReference_) && (INCLUDE_ALL_ComGoogleCommonCacheLocalCache || defined(INCLUDE_ComGoogleCommonCacheLocalCache_SoftValueReference))
#define ComGoogleCommonCacheLocalCache_SoftValueReference_

#define RESTRICT_JavaLangRefSoftReference 1
#define INCLUDE_JavaLangRefSoftReference 1
#include "java/lang/ref/SoftReference.h"

@class JavaLangRefReferenceQueue;
@protocol ComGoogleCommonCacheLocalCache_ValueReference;
@protocol ComGoogleCommonCacheReferenceEntry;

/*!
 @brief References a soft value.
 */
@interface ComGoogleCommonCacheLocalCache_SoftValueReference : JavaLangRefSoftReference < ComGoogleCommonCacheLocalCache_ValueReference > {
 @public
  id<ComGoogleCommonCacheReferenceEntry> entry__;
}

#pragma mark Public

- (id<ComGoogleCommonCacheLocalCache_ValueReference>)copyForWithJavaLangRefReferenceQueue:(JavaLangRefReferenceQueue * __nonnull)queue
                                                                                   withId:(id __nonnull)value
                                                   withComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)entry_ OBJC_METHOD_FAMILY_NONE;

- (id<ComGoogleCommonCacheReferenceEntry>)getEntry;

- (jint)getWeight;

- (jboolean)isActive;

- (jboolean)isLoading;

- (void)notifyNewValueWithId:(id __nonnull)newValue;

- (id)waitForValue;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaLangRefReferenceQueue:(JavaLangRefReferenceQueue * __nonnull)queue
                                                     withId:(id __nonnull)referent
                     withComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)entry_;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithId:(id __nonnull)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithId:(id __nonnull)arg0
       withJavaLangRefReferenceQueue:(JavaLangRefReferenceQueue * __nonnull)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheLocalCache_SoftValueReference)

J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_SoftValueReference, entry__, id<ComGoogleCommonCacheReferenceEntry>)

FOUNDATION_EXPORT void ComGoogleCommonCacheLocalCache_SoftValueReference_initWithJavaLangRefReferenceQueue_withId_withComGoogleCommonCacheReferenceEntry_(ComGoogleCommonCacheLocalCache_SoftValueReference *self, JavaLangRefReferenceQueue *queue, id referent, id<ComGoogleCommonCacheReferenceEntry> entry_);

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_SoftValueReference *new_ComGoogleCommonCacheLocalCache_SoftValueReference_initWithJavaLangRefReferenceQueue_withId_withComGoogleCommonCacheReferenceEntry_(JavaLangRefReferenceQueue *queue, id referent, id<ComGoogleCommonCacheReferenceEntry> entry_) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_SoftValueReference *create_ComGoogleCommonCacheLocalCache_SoftValueReference_initWithJavaLangRefReferenceQueue_withId_withComGoogleCommonCacheReferenceEntry_(JavaLangRefReferenceQueue *queue, id referent, id<ComGoogleCommonCacheReferenceEntry> entry_);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheLocalCache_SoftValueReference)

#endif

#if !defined (ComGoogleCommonCacheLocalCache_StrongValueReference_) && (INCLUDE_ALL_ComGoogleCommonCacheLocalCache || defined(INCLUDE_ComGoogleCommonCacheLocalCache_StrongValueReference))
#define ComGoogleCommonCacheLocalCache_StrongValueReference_

@class JavaLangRefReferenceQueue;
@protocol ComGoogleCommonCacheLocalCache_ValueReference;
@protocol ComGoogleCommonCacheReferenceEntry;

/*!
 @brief References a strong value.
 */
@interface ComGoogleCommonCacheLocalCache_StrongValueReference : NSObject < ComGoogleCommonCacheLocalCache_ValueReference > {
 @public
  id referent_;
}

#pragma mark Public

- (id<ComGoogleCommonCacheLocalCache_ValueReference>)copyForWithJavaLangRefReferenceQueue:(JavaLangRefReferenceQueue * __nonnull)queue
                                                                                   withId:(id __nonnull)value
                                                   withComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)entry_ OBJC_METHOD_FAMILY_NONE;

- (id)get;

- (id<ComGoogleCommonCacheReferenceEntry>)getEntry;

- (jint)getWeight;

- (jboolean)isActive;

- (jboolean)isLoading;

- (void)notifyNewValueWithId:(id __nonnull)newValue;

- (id)waitForValue;

#pragma mark Package-Private

- (instancetype __nonnull)initWithId:(id __nonnull)referent;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheLocalCache_StrongValueReference)

J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_StrongValueReference, referent_, id)

FOUNDATION_EXPORT void ComGoogleCommonCacheLocalCache_StrongValueReference_initWithId_(ComGoogleCommonCacheLocalCache_StrongValueReference *self, id referent);

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_StrongValueReference *new_ComGoogleCommonCacheLocalCache_StrongValueReference_initWithId_(id referent) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_StrongValueReference *create_ComGoogleCommonCacheLocalCache_StrongValueReference_initWithId_(id referent);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheLocalCache_StrongValueReference)

#endif

#if !defined (ComGoogleCommonCacheLocalCache_WeightedWeakValueReference_) && (INCLUDE_ALL_ComGoogleCommonCacheLocalCache || defined(INCLUDE_ComGoogleCommonCacheLocalCache_WeightedWeakValueReference))
#define ComGoogleCommonCacheLocalCache_WeightedWeakValueReference_

@class JavaLangRefReferenceQueue;
@protocol ComGoogleCommonCacheLocalCache_ValueReference;
@protocol ComGoogleCommonCacheReferenceEntry;

/*!
 @brief References a weak value.
 */
@interface ComGoogleCommonCacheLocalCache_WeightedWeakValueReference : ComGoogleCommonCacheLocalCache_WeakValueReference {
 @public
  jint weight_;
}

#pragma mark Public

- (id<ComGoogleCommonCacheLocalCache_ValueReference>)copyForWithJavaLangRefReferenceQueue:(JavaLangRefReferenceQueue * __nonnull)queue
                                                                                   withId:(id __nonnull)value
                                                   withComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)entry_ OBJC_METHOD_FAMILY_NONE;

- (jint)getWeight;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaLangRefReferenceQueue:(JavaLangRefReferenceQueue * __nonnull)queue
                                                     withId:(id __nonnull)referent
                     withComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)entry_
                                                    withInt:(jint)weight;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaLangRefReferenceQueue:(JavaLangRefReferenceQueue * __nonnull)arg0
                                                     withId:(id __nonnull)arg1
                     withComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)arg2 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheLocalCache_WeightedWeakValueReference)

FOUNDATION_EXPORT void ComGoogleCommonCacheLocalCache_WeightedWeakValueReference_initWithJavaLangRefReferenceQueue_withId_withComGoogleCommonCacheReferenceEntry_withInt_(ComGoogleCommonCacheLocalCache_WeightedWeakValueReference *self, JavaLangRefReferenceQueue *queue, id referent, id<ComGoogleCommonCacheReferenceEntry> entry_, jint weight);

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_WeightedWeakValueReference *new_ComGoogleCommonCacheLocalCache_WeightedWeakValueReference_initWithJavaLangRefReferenceQueue_withId_withComGoogleCommonCacheReferenceEntry_withInt_(JavaLangRefReferenceQueue *queue, id referent, id<ComGoogleCommonCacheReferenceEntry> entry_, jint weight) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_WeightedWeakValueReference *create_ComGoogleCommonCacheLocalCache_WeightedWeakValueReference_initWithJavaLangRefReferenceQueue_withId_withComGoogleCommonCacheReferenceEntry_withInt_(JavaLangRefReferenceQueue *queue, id referent, id<ComGoogleCommonCacheReferenceEntry> entry_, jint weight);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheLocalCache_WeightedWeakValueReference)

#endif

#if !defined (ComGoogleCommonCacheLocalCache_WeightedSoftValueReference_) && (INCLUDE_ALL_ComGoogleCommonCacheLocalCache || defined(INCLUDE_ComGoogleCommonCacheLocalCache_WeightedSoftValueReference))
#define ComGoogleCommonCacheLocalCache_WeightedSoftValueReference_

@class JavaLangRefReferenceQueue;
@protocol ComGoogleCommonCacheLocalCache_ValueReference;
@protocol ComGoogleCommonCacheReferenceEntry;

/*!
 @brief References a soft value.
 */
@interface ComGoogleCommonCacheLocalCache_WeightedSoftValueReference : ComGoogleCommonCacheLocalCache_SoftValueReference {
 @public
  jint weight_;
}

#pragma mark Public

- (id<ComGoogleCommonCacheLocalCache_ValueReference>)copyForWithJavaLangRefReferenceQueue:(JavaLangRefReferenceQueue * __nonnull)queue
                                                                                   withId:(id __nonnull)value
                                                   withComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)entry_ OBJC_METHOD_FAMILY_NONE;

- (jint)getWeight;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaLangRefReferenceQueue:(JavaLangRefReferenceQueue * __nonnull)queue
                                                     withId:(id __nonnull)referent
                     withComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)entry_
                                                    withInt:(jint)weight;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaLangRefReferenceQueue:(JavaLangRefReferenceQueue * __nonnull)arg0
                                                     withId:(id __nonnull)arg1
                     withComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)arg2 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheLocalCache_WeightedSoftValueReference)

FOUNDATION_EXPORT void ComGoogleCommonCacheLocalCache_WeightedSoftValueReference_initWithJavaLangRefReferenceQueue_withId_withComGoogleCommonCacheReferenceEntry_withInt_(ComGoogleCommonCacheLocalCache_WeightedSoftValueReference *self, JavaLangRefReferenceQueue *queue, id referent, id<ComGoogleCommonCacheReferenceEntry> entry_, jint weight);

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_WeightedSoftValueReference *new_ComGoogleCommonCacheLocalCache_WeightedSoftValueReference_initWithJavaLangRefReferenceQueue_withId_withComGoogleCommonCacheReferenceEntry_withInt_(JavaLangRefReferenceQueue *queue, id referent, id<ComGoogleCommonCacheReferenceEntry> entry_, jint weight) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_WeightedSoftValueReference *create_ComGoogleCommonCacheLocalCache_WeightedSoftValueReference_initWithJavaLangRefReferenceQueue_withId_withComGoogleCommonCacheReferenceEntry_withInt_(JavaLangRefReferenceQueue *queue, id referent, id<ComGoogleCommonCacheReferenceEntry> entry_, jint weight);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheLocalCache_WeightedSoftValueReference)

#endif

#if !defined (ComGoogleCommonCacheLocalCache_WeightedStrongValueReference_) && (INCLUDE_ALL_ComGoogleCommonCacheLocalCache || defined(INCLUDE_ComGoogleCommonCacheLocalCache_WeightedStrongValueReference))
#define ComGoogleCommonCacheLocalCache_WeightedStrongValueReference_

/*!
 @brief References a strong value.
 */
@interface ComGoogleCommonCacheLocalCache_WeightedStrongValueReference : ComGoogleCommonCacheLocalCache_StrongValueReference {
 @public
  jint weight_;
}

#pragma mark Public

- (jint)getWeight;

#pragma mark Package-Private

- (instancetype __nonnull)initWithId:(id __nonnull)referent
                             withInt:(jint)weight;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithId:(id __nonnull)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheLocalCache_WeightedStrongValueReference)

FOUNDATION_EXPORT void ComGoogleCommonCacheLocalCache_WeightedStrongValueReference_initWithId_withInt_(ComGoogleCommonCacheLocalCache_WeightedStrongValueReference *self, id referent, jint weight);

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_WeightedStrongValueReference *new_ComGoogleCommonCacheLocalCache_WeightedStrongValueReference_initWithId_withInt_(id referent, jint weight) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_WeightedStrongValueReference *create_ComGoogleCommonCacheLocalCache_WeightedStrongValueReference_initWithId_withInt_(id referent, jint weight);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheLocalCache_WeightedStrongValueReference)

#endif

#if !defined (ComGoogleCommonCacheLocalCache_Segment_) && (INCLUDE_ALL_ComGoogleCommonCacheLocalCache || defined(INCLUDE_ComGoogleCommonCacheLocalCache_Segment))
#define ComGoogleCommonCacheLocalCache_Segment_

#define RESTRICT_JavaUtilConcurrentLocksReentrantLock 1
#define INCLUDE_JavaUtilConcurrentLocksReentrantLock 1
#include "java/util/concurrent/locks/ReentrantLock.h"

@class ComGoogleCommonCacheCacheLoader;
@class ComGoogleCommonCacheLocalCache;
@class ComGoogleCommonCacheLocalCache_LoadingValueReference;
@class ComGoogleCommonCacheRemovalCause;
@class JavaLangRefReferenceQueue;
@class JavaUtilConcurrentAtomicAtomicInteger;
@class JavaUtilConcurrentAtomicAtomicReferenceArray;
@protocol ComGoogleCommonCacheAbstractCache_StatsCounter;
@protocol ComGoogleCommonCacheLocalCache_ValueReference;
@protocol ComGoogleCommonCacheReferenceEntry;
@protocol ComGoogleCommonUtilConcurrentListenableFuture;
@protocol JavaUtilQueue;

/*!
 @brief Segments are specialized versions of hash tables.This subclass inherits from ReentrantLock
  opportunistically, just to simplify some locking and avoid separate construction.
 */
@interface ComGoogleCommonCacheLocalCache_Segment : JavaUtilConcurrentLocksReentrantLock {
 @public
  __unsafe_unretained ComGoogleCommonCacheLocalCache *map_;
  /*!
   @brief The number of live elements in this segment's region.
   */
  volatile_jint count_;
  /*!
   @brief The weight of the live elements in this segment's region.
   */
  jlong totalWeight_;
  /*!
   @brief Number of updates that alter the size of the table.This is used during bulk-read methods to
  make sure they see a consistent snapshot: If modCounts change during a traversal of segments
  loading size or checking containsValue, then we might have an inconsistent view of state so
  (usually) must retry.
   */
  jint modCount_;
  /*!
   @brief The table is expanded when its size exceeds this threshold.
   (The value of this field is
  always <code>(int) (capacity * 0.75)</code>.)
   */
  jint threshold_;
  /*!
   @brief The per-segment table.
   */
  volatile_id table_;
  /*!
   @brief The maximum weight of this segment.UNSET_INT if there is no maximum.
   */
  jlong maxSegmentWeight_;
  /*!
   @brief The key reference queue contains entries whose keys have been garbage collected, and which
  need to be cleaned up internally.
   */
  JavaLangRefReferenceQueue *keyReferenceQueue_;
  /*!
   @brief The value reference queue contains value references whose values have been garbage collected,
  and which need to be cleaned up internally.
   */
  JavaLangRefReferenceQueue *valueReferenceQueue_;
  /*!
   @brief The recency queue is used to record which entries were accessed for updating the access
  list's ordering.It is drained as a batch operation when either the DRAIN_THRESHOLD is
  crossed or a write occurs on the segment.
   */
  id<JavaUtilQueue> recencyQueue_;
  /*!
   @brief A counter of the number of reads since the last write, used to drain queues on a small
  fraction of read operations.
   */
  JavaUtilConcurrentAtomicAtomicInteger *readCount_;
  /*!
   @brief A queue of elements currently in the map, ordered by write time.Elements are added to the
  tail of the queue on write.
   */
  id<JavaUtilQueue> writeQueue_;
  /*!
   @brief A queue of elements currently in the map, ordered by access time.Elements are added to the
  tail of the queue on access (note that writes count as accesses).
   */
  id<JavaUtilQueue> accessQueue_;
  /*!
   @brief Accumulates cache statistics.
   */
  id<ComGoogleCommonCacheAbstractCache_StatsCounter> statsCounter_;
}

#pragma mark Package-Private

- (instancetype __nonnull)initWithComGoogleCommonCacheLocalCache:(ComGoogleCommonCacheLocalCache * __nonnull)map
                                                         withInt:(jint)initialCapacity
                                                        withLong:(jlong)maxSegmentWeight
              withComGoogleCommonCacheAbstractCache_StatsCounter:(id<ComGoogleCommonCacheAbstractCache_StatsCounter> __nonnull)statsCounter;

- (void)cleanUp;

- (void)clear;

- (void)clearKeyReferenceQueue;

/*!
 @brief Clears all entries from the key and value reference queues.
 */
- (void)clearReferenceQueues;

- (void)clearValueReferenceQueue;

- (jboolean)containsKeyWithId:(id __nonnull)key
                      withInt:(jint)hash_;

/*!
 @brief This method is a convenience for testing.Code should call <code>LocalCache.containsValue</code>
  directly.
 */
- (jboolean)containsValueWithId:(id __nonnull)value;

/*!
 @brief Copies <code>original</code> into a new entry chained to <code>newNext</code>.Returns the new entry,
  or <code>null</code> if <code>original</code> was already garbage collected.
 */
- (id<ComGoogleCommonCacheReferenceEntry>)copyEntryWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)original
                                                   withComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)newNext OBJC_METHOD_FAMILY_NONE;

- (void)drainKeyReferenceQueue;

/*!
 @brief Drains the recency queue, updating eviction metadata that the entries therein were read in
  the specified relative order.This currently amounts to adding them to relevant eviction
  lists (accounting for the fact that they could have been removed from the map since being
  added to the recency queue).
 */
- (void)drainRecencyQueue;

/*!
 @brief Drain the key and value reference queues, cleaning up internal entries containing garbage
  collected keys or values.
 */
- (void)drainReferenceQueues;

- (void)drainValueReferenceQueue;

- (void)enqueueNotificationWithId:(id __nullable)key
                          withInt:(jint)hash_
                           withId:(id __nullable)value
                          withInt:(jint)weight
withComGoogleCommonCacheRemovalCause:(ComGoogleCommonCacheRemovalCause * __nonnull)cause;

/*!
 @brief Performs eviction if the segment is over capacity.Avoids flushing the entire cache if the
  newest entry exceeds the maximum weight all on its own.
 @param newest the most recently added entry
 */
- (void)evictEntriesWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)newest;

/*!
 @brief Expands the table if possible.
 */
- (void)expand;

- (void)expireEntriesWithLong:(jlong)now;

- (id)getWithId:(id __nonnull)key
        withInt:(jint)hash_
withComGoogleCommonCacheCacheLoader:(ComGoogleCommonCacheCacheLoader * __nonnull)loader;

- (id __nullable)getWithId:(id __nonnull)key
                   withInt:(jint)hash_;

/*!
 @brief Waits uninterruptibly for <code>newValue</code> to be loaded, and then records loading stats.
 */
- (id)getAndRecordStatsWithId:(id __nonnull)key
                      withInt:(jint)hash_
withComGoogleCommonCacheLocalCache_LoadingValueReference:(ComGoogleCommonCacheLocalCache_LoadingValueReference * __nonnull)loadingValueReference
withComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture> __nonnull)newValue;

- (id<ComGoogleCommonCacheReferenceEntry> __nullable)getEntryWithId:(id __nonnull)key
                                                            withInt:(jint)hash_;

/*!
 @brief Returns first entry of bin for given hash.
 */
- (id<ComGoogleCommonCacheReferenceEntry>)getFirstWithInt:(jint)hash_;

- (id<ComGoogleCommonCacheReferenceEntry> __nullable)getLiveEntryWithId:(id __nonnull)key
                                                                withInt:(jint)hash_
                                                               withLong:(jlong)now;

/*!
 @brief Gets the value from an entry.Returns null if the entry is invalid, partially-collected,
  loading, or expired.
 */
- (id)getLiveValueWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)entry_
                                                withLong:(jlong)now;

- (id<ComGoogleCommonCacheReferenceEntry>)getNextEvictable;

- (void)initTableWithJavaUtilConcurrentAtomicAtomicReferenceArray:(JavaUtilConcurrentAtomicAtomicReferenceArray * __nonnull)newTable OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns a newly inserted <code>LoadingValueReference</code>, or null if the live value reference
  is already loading.
 */
- (ComGoogleCommonCacheLocalCache_LoadingValueReference * __nullable)insertLoadingValueReferenceWithId:(id __nonnull)key
                                                                                               withInt:(jint)hash_
                                                                                           withBoolean:(jboolean)checkTime;

- (id<ComGoogleCommonUtilConcurrentListenableFuture>)loadAsyncWithId:(id __nonnull)key
                                                             withInt:(jint)hash_
            withComGoogleCommonCacheLocalCache_LoadingValueReference:(ComGoogleCommonCacheLocalCache_LoadingValueReference * __nonnull)loadingValueReference
                                 withComGoogleCommonCacheCacheLoader:(ComGoogleCommonCacheCacheLoader * __nonnull)loader;

- (id)loadSyncWithId:(id __nonnull)key
             withInt:(jint)hash_
withComGoogleCommonCacheLocalCache_LoadingValueReference:(ComGoogleCommonCacheLocalCache_LoadingValueReference * __nonnull)loadingValueReference
withComGoogleCommonCacheCacheLoader:(ComGoogleCommonCacheCacheLoader * __nonnull)loader;

- (id)lockedGetOrLoadWithId:(id __nonnull)key
                    withInt:(jint)hash_
withComGoogleCommonCacheCacheLoader:(ComGoogleCommonCacheCacheLoader * __nonnull)loader;

- (id<ComGoogleCommonCacheReferenceEntry>)newEntryWithId:(id __nonnull)key
                                                 withInt:(jint)hash_
                  withComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nullable)next OBJC_METHOD_FAMILY_NONE;

- (JavaUtilConcurrentAtomicAtomicReferenceArray *)newEntryArrayWithInt:(jint)size OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Performs routine cleanup following a read.Normally cleanup happens during writes.
 If cleanup
  is not observed after a sufficient number of reads, try cleaning up from the read thread.
 */
- (void)postReadCleanup;

/*!
 @brief Performs routine cleanup following a write.
 */
- (void)postWriteCleanup;

/*!
 @brief Performs routine cleanup prior to executing a write.This should be called every time a write
  thread acquires the segment lock, immediately after acquiring the lock.
 <p>Post-condition: expireEntries has been run.
 */
- (void)preWriteCleanupWithLong:(jlong)now;

- (id __nullable)putWithId:(id __nonnull)key
                   withInt:(jint)hash_
                    withId:(id __nonnull)value
               withBoolean:(jboolean)onlyIfAbsent;

/*!
 @brief Removes an entry whose key has been garbage collected.
 */
- (jboolean)reclaimKeyWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)entry_
                                                     withInt:(jint)hash_;

/*!
 @brief Removes an entry whose value has been garbage collected.
 */
- (jboolean)reclaimValueWithId:(id __nonnull)key
                       withInt:(jint)hash_
withComGoogleCommonCacheLocalCache_ValueReference:(id<ComGoogleCommonCacheLocalCache_ValueReference> __nonnull)valueReference;

/*!
 @brief Updates the eviction metadata that <code>entry</code> was just read.This currently amounts to
  adding <code>entry</code> to relevant eviction lists.
 <p>Note: this method should only be called under lock, as it directly manipulates the
  eviction queues. Unlocked reads should use <code>recordRead</code>.
 */
- (void)recordLockedReadWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)entry_
                                                      withLong:(jlong)now;

/*!
 @brief Records the relative order in which this read was performed by adding <code>entry</code> to the
  recency queue.At write-time, or when the queue is full past the threshold, the queue will be
  drained and the entries therein processed.
 <p>Note: locked reads should use <code>recordLockedRead</code>.
 */
- (void)recordReadWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)entry_
                                                withLong:(jlong)now;

/*!
 @brief Updates eviction metadata that <code>entry</code> was just written.This currently amounts to
  adding <code>entry</code> to relevant eviction lists.
 */
- (void)recordWriteWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)entry_
                                                  withInt:(jint)weight
                                                 withLong:(jlong)now;

/*!
 @brief Refreshes the value associated with <code>key</code>, unless another thread is already doing so.
 Returns the newly refreshed value associated with <code>key</code> if it was refreshed inline, or 
 <code>null</code> if another thread is performing the refresh or if an error occurs during
  refresh.
 */
- (id __nullable)refreshWithId:(id __nonnull)key
                       withInt:(jint)hash_
withComGoogleCommonCacheCacheLoader:(ComGoogleCommonCacheCacheLoader * __nonnull)loader
                   withBoolean:(jboolean)checkTime;

- (id __nullable)removeWithId:(id __nonnull)key
                      withInt:(jint)hash_;

- (jboolean)removeWithId:(id __nonnull)key
                 withInt:(jint)hash_
                  withId:(id __nonnull)value;

- (void)removeCollectedEntryWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)entry_;

- (jboolean)removeEntryWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)entry_
                                                      withInt:(jint)hash_
                         withComGoogleCommonCacheRemovalCause:(ComGoogleCommonCacheRemovalCause * __nonnull)cause;

- (id<ComGoogleCommonCacheReferenceEntry> __nullable)removeEntryFromChainWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)first
                                                                         withComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)entry_;

- (jboolean)removeLoadingValueWithId:(id __nonnull)key
                             withInt:(jint)hash_
withComGoogleCommonCacheLocalCache_LoadingValueReference:(ComGoogleCommonCacheLocalCache_LoadingValueReference * __nonnull)valueReference;

- (id<ComGoogleCommonCacheReferenceEntry> __nullable)removeValueFromChainWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)first
                                                                         withComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)entry_
                                                                                                         withId:(id __nullable)key
                                                                                                        withInt:(jint)hash_
                                                                                                         withId:(id __nonnull)value
                                                              withComGoogleCommonCacheLocalCache_ValueReference:(id<ComGoogleCommonCacheLocalCache_ValueReference> __nonnull)valueReference
                                                                           withComGoogleCommonCacheRemovalCause:(ComGoogleCommonCacheRemovalCause * __nonnull)cause;

- (id __nullable)replaceWithId:(id __nonnull)key
                       withInt:(jint)hash_
                        withId:(id __nonnull)newValue;

- (jboolean)replaceWithId:(id __nonnull)key
                  withInt:(jint)hash_
                   withId:(id __nonnull)oldValue
                   withId:(id __nonnull)newValue;

- (void)runLockedCleanupWithLong:(jlong)now;

- (void)runUnlockedCleanup;

- (id)scheduleRefreshWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)entry_
                                                     withId:(id __nonnull)key
                                                    withInt:(jint)hash_
                                                     withId:(id __nonnull)oldValue
                                                   withLong:(jlong)now
                        withComGoogleCommonCacheCacheLoader:(ComGoogleCommonCacheCacheLoader * __nonnull)loader;

/*!
 @brief Sets a new value of an entry.Adds newly created entries at the end of the access queue.
 */
- (void)setValueWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)entry_
                                                withId:(id __nonnull)key
                                                withId:(id __nonnull)value
                                              withLong:(jlong)now;

- (jboolean)storeLoadedValueWithId:(id __nonnull)key
                           withInt:(jint)hash_
withComGoogleCommonCacheLocalCache_LoadingValueReference:(ComGoogleCommonCacheLocalCache_LoadingValueReference * __nonnull)oldValueReference
                            withId:(id __nonnull)newValue;

/*!
 @brief Cleanup collected entries when the lock is available.
 */
- (void)tryDrainReferenceQueues;

/*!
 @brief Cleanup expired entries when the lock is available.
 */
- (void)tryExpireEntriesWithLong:(jlong)now;

- (id)waitForLoadingValueWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)e
                                                         withId:(id __nonnull)key
              withComGoogleCommonCacheLocalCache_ValueReference:(id<ComGoogleCommonCacheLocalCache_ValueReference> __nonnull)valueReference;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithBoolean:(jboolean)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheLocalCache_Segment)

J2OBJC_VOLATILE_FIELD_SETTER(ComGoogleCommonCacheLocalCache_Segment, table_, JavaUtilConcurrentAtomicAtomicReferenceArray *)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_Segment, keyReferenceQueue_, JavaLangRefReferenceQueue *)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_Segment, valueReferenceQueue_, JavaLangRefReferenceQueue *)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_Segment, recencyQueue_, id<JavaUtilQueue>)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_Segment, readCount_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_Segment, writeQueue_, id<JavaUtilQueue>)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_Segment, accessQueue_, id<JavaUtilQueue>)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_Segment, statsCounter_, id<ComGoogleCommonCacheAbstractCache_StatsCounter>)

FOUNDATION_EXPORT void ComGoogleCommonCacheLocalCache_Segment_initWithComGoogleCommonCacheLocalCache_withInt_withLong_withComGoogleCommonCacheAbstractCache_StatsCounter_(ComGoogleCommonCacheLocalCache_Segment *self, ComGoogleCommonCacheLocalCache *map, jint initialCapacity, jlong maxSegmentWeight, id<ComGoogleCommonCacheAbstractCache_StatsCounter> statsCounter);

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_Segment *new_ComGoogleCommonCacheLocalCache_Segment_initWithComGoogleCommonCacheLocalCache_withInt_withLong_withComGoogleCommonCacheAbstractCache_StatsCounter_(ComGoogleCommonCacheLocalCache *map, jint initialCapacity, jlong maxSegmentWeight, id<ComGoogleCommonCacheAbstractCache_StatsCounter> statsCounter) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_Segment *create_ComGoogleCommonCacheLocalCache_Segment_initWithComGoogleCommonCacheLocalCache_withInt_withLong_withComGoogleCommonCacheAbstractCache_StatsCounter_(ComGoogleCommonCacheLocalCache *map, jint initialCapacity, jlong maxSegmentWeight, id<ComGoogleCommonCacheAbstractCache_StatsCounter> statsCounter);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheLocalCache_Segment)

#endif

#if !defined (ComGoogleCommonCacheLocalCache_LoadingValueReference_) && (INCLUDE_ALL_ComGoogleCommonCacheLocalCache || defined(INCLUDE_ComGoogleCommonCacheLocalCache_LoadingValueReference))
#define ComGoogleCommonCacheLocalCache_LoadingValueReference_

@class ComGoogleCommonBaseStopwatch;
@class ComGoogleCommonCacheCacheLoader;
@class ComGoogleCommonUtilConcurrentSettableFuture;
@class JavaLangRefReferenceQueue;
@class JavaLangThrowable;
@protocol ComGoogleCommonCacheLocalCache_ValueReference;
@protocol ComGoogleCommonCacheReferenceEntry;
@protocol ComGoogleCommonUtilConcurrentListenableFuture;

@interface ComGoogleCommonCacheLocalCache_LoadingValueReference : NSObject < ComGoogleCommonCacheLocalCache_ValueReference > {
 @public
  volatile_id oldValue_;
  ComGoogleCommonUtilConcurrentSettableFuture *futureValue_;
  ComGoogleCommonBaseStopwatch *stopwatch_;
}

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithComGoogleCommonCacheLocalCache_ValueReference:(id<ComGoogleCommonCacheLocalCache_ValueReference> __nonnull)oldValue;

- (id<ComGoogleCommonCacheLocalCache_ValueReference>)copyForWithJavaLangRefReferenceQueue:(JavaLangRefReferenceQueue * __nonnull)queue
                                                                                   withId:(id __nullable)value
                                                   withComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)entry_ OBJC_METHOD_FAMILY_NONE;

- (jlong)elapsedNanos;

- (id)get;

- (id<ComGoogleCommonCacheReferenceEntry>)getEntry;

- (id<ComGoogleCommonCacheLocalCache_ValueReference>)getOldValue;

- (jint)getWeight;

- (jboolean)isActive;

- (jboolean)isLoading;

- (id<ComGoogleCommonUtilConcurrentListenableFuture>)loadFutureWithId:(id __nonnull)key
                                  withComGoogleCommonCacheCacheLoader:(ComGoogleCommonCacheCacheLoader * __nonnull)loader;

- (void)notifyNewValueWithId:(id __nullable)newValue;

- (jboolean)setWithId:(id __nullable)newValue;

- (jboolean)setExceptionWithJavaLangThrowable:(JavaLangThrowable * __nonnull)t;

- (id)waitForValue;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheLocalCache_LoadingValueReference)

J2OBJC_VOLATILE_FIELD_SETTER(ComGoogleCommonCacheLocalCache_LoadingValueReference, oldValue_, id<ComGoogleCommonCacheLocalCache_ValueReference>)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_LoadingValueReference, futureValue_, ComGoogleCommonUtilConcurrentSettableFuture *)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_LoadingValueReference, stopwatch_, ComGoogleCommonBaseStopwatch *)

FOUNDATION_EXPORT void ComGoogleCommonCacheLocalCache_LoadingValueReference_init(ComGoogleCommonCacheLocalCache_LoadingValueReference *self);

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_LoadingValueReference *new_ComGoogleCommonCacheLocalCache_LoadingValueReference_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_LoadingValueReference *create_ComGoogleCommonCacheLocalCache_LoadingValueReference_init(void);

FOUNDATION_EXPORT void ComGoogleCommonCacheLocalCache_LoadingValueReference_initWithComGoogleCommonCacheLocalCache_ValueReference_(ComGoogleCommonCacheLocalCache_LoadingValueReference *self, id<ComGoogleCommonCacheLocalCache_ValueReference> oldValue);

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_LoadingValueReference *new_ComGoogleCommonCacheLocalCache_LoadingValueReference_initWithComGoogleCommonCacheLocalCache_ValueReference_(id<ComGoogleCommonCacheLocalCache_ValueReference> oldValue) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_LoadingValueReference *create_ComGoogleCommonCacheLocalCache_LoadingValueReference_initWithComGoogleCommonCacheLocalCache_ValueReference_(id<ComGoogleCommonCacheLocalCache_ValueReference> oldValue);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheLocalCache_LoadingValueReference)

#endif

#if !defined (ComGoogleCommonCacheLocalCache_WriteQueue_) && (INCLUDE_ALL_ComGoogleCommonCacheLocalCache || defined(INCLUDE_ComGoogleCommonCacheLocalCache_WriteQueue))
#define ComGoogleCommonCacheLocalCache_WriteQueue_

#define RESTRICT_JavaUtilAbstractQueue 1
#define INCLUDE_JavaUtilAbstractQueue 1
#include "java/util/AbstractQueue.h"

@protocol ComGoogleCommonCacheReferenceEntry;
@protocol JavaUtilIterator;

/*!
 @brief A custom queue for managing eviction order.Note that this is tightly integrated with <code>ReferenceEntry</code>
 , upon which it relies to perform its linking.
 <p>Note that this entire implementation makes the assumption that all elements which are in the
  map are also in this queue, and that all elements not in the queue are not in the map. 
 <p>The benefits of creating our own queue are that (1) we can replace elements in the middle of
  the queue as part of copyWriteEntry, and (2) the contains method is highly optimized for the
  current model.
 */
@interface ComGoogleCommonCacheLocalCache_WriteQueue : JavaUtilAbstractQueue {
 @public
  id<ComGoogleCommonCacheReferenceEntry> head_;
}

#pragma mark Public

- (void)clear;

- (jboolean)containsWithId:(id __nonnull)o;

- (id<ComGoogleCommonCacheReferenceEntry>)element;

- (jboolean)isEmpty;

- (id<JavaUtilIterator>)iterator;

- (jboolean)offerWithId:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)entry_;

- (id<ComGoogleCommonCacheReferenceEntry>)peek;

- (id<ComGoogleCommonCacheReferenceEntry>)poll;

- (id<ComGoogleCommonCacheReferenceEntry>)remove;

- (jboolean)removeWithId:(id __nonnull)o;

- (jint)size;

#pragma mark Package-Private

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheLocalCache_WriteQueue)

J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_WriteQueue, head_, id<ComGoogleCommonCacheReferenceEntry>)

FOUNDATION_EXPORT void ComGoogleCommonCacheLocalCache_WriteQueue_init(ComGoogleCommonCacheLocalCache_WriteQueue *self);

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_WriteQueue *new_ComGoogleCommonCacheLocalCache_WriteQueue_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_WriteQueue *create_ComGoogleCommonCacheLocalCache_WriteQueue_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheLocalCache_WriteQueue)

#endif

#if !defined (ComGoogleCommonCacheLocalCache_AccessQueue_) && (INCLUDE_ALL_ComGoogleCommonCacheLocalCache || defined(INCLUDE_ComGoogleCommonCacheLocalCache_AccessQueue))
#define ComGoogleCommonCacheLocalCache_AccessQueue_

#define RESTRICT_JavaUtilAbstractQueue 1
#define INCLUDE_JavaUtilAbstractQueue 1
#include "java/util/AbstractQueue.h"

@protocol ComGoogleCommonCacheReferenceEntry;
@protocol JavaUtilIterator;

/*!
 @brief A custom queue for managing access order.Note that this is tightly integrated with <code>ReferenceEntry</code>
 , upon which it relies to perform its linking.
 <p>Note that this entire implementation makes the assumption that all elements which are in the
  map are also in this queue, and that all elements not in the queue are not in the map. 
 <p>The benefits of creating our own queue are that (1) we can replace elements in the middle of
  the queue as part of copyWriteEntry, and (2) the contains method is highly optimized for the
  current model.
 */
@interface ComGoogleCommonCacheLocalCache_AccessQueue : JavaUtilAbstractQueue {
 @public
  id<ComGoogleCommonCacheReferenceEntry> head_;
}

#pragma mark Public

- (void)clear;

- (jboolean)containsWithId:(id __nonnull)o;

- (id<ComGoogleCommonCacheReferenceEntry>)element;

- (jboolean)isEmpty;

- (id<JavaUtilIterator>)iterator;

- (jboolean)offerWithId:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)entry_;

- (id<ComGoogleCommonCacheReferenceEntry>)peek;

- (id<ComGoogleCommonCacheReferenceEntry>)poll;

- (id<ComGoogleCommonCacheReferenceEntry>)remove;

- (jboolean)removeWithId:(id __nonnull)o;

- (jint)size;

#pragma mark Package-Private

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheLocalCache_AccessQueue)

J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_AccessQueue, head_, id<ComGoogleCommonCacheReferenceEntry>)

FOUNDATION_EXPORT void ComGoogleCommonCacheLocalCache_AccessQueue_init(ComGoogleCommonCacheLocalCache_AccessQueue *self);

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_AccessQueue *new_ComGoogleCommonCacheLocalCache_AccessQueue_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_AccessQueue *create_ComGoogleCommonCacheLocalCache_AccessQueue_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheLocalCache_AccessQueue)

#endif

#if !defined (ComGoogleCommonCacheLocalCache_HashIterator_) && (INCLUDE_ALL_ComGoogleCommonCacheLocalCache || defined(INCLUDE_ComGoogleCommonCacheLocalCache_HashIterator))
#define ComGoogleCommonCacheLocalCache_HashIterator_

#define RESTRICT_JavaUtilIterator 1
#define INCLUDE_JavaUtilIterator 1
#include "java/util/Iterator.h"

@class ComGoogleCommonCacheLocalCache;
@class ComGoogleCommonCacheLocalCache_Segment;
@class ComGoogleCommonCacheLocalCache_WriteThroughEntry;
@class JavaUtilConcurrentAtomicAtomicReferenceArray;
@protocol ComGoogleCommonCacheReferenceEntry;
@protocol JavaUtilFunctionConsumer;

@interface ComGoogleCommonCacheLocalCache_HashIterator : NSObject < JavaUtilIterator > {
 @public
  jint nextSegmentIndex_;
  jint nextTableIndex_;
  ComGoogleCommonCacheLocalCache_Segment *currentSegment_;
  JavaUtilConcurrentAtomicAtomicReferenceArray *currentTable_;
  id<ComGoogleCommonCacheReferenceEntry> nextEntry_;
  ComGoogleCommonCacheLocalCache_WriteThroughEntry *nextExternal_;
  ComGoogleCommonCacheLocalCache_WriteThroughEntry *lastReturned_;
}

#pragma mark Public

- (jboolean)hasNext;

- (id)next;

- (void)remove;

#pragma mark Package-Private

- (instancetype __nonnull)initWithComGoogleCommonCacheLocalCache:(ComGoogleCommonCacheLocalCache * __nonnull)outer$;

- (void)advance;

/*!
 @brief Advances to the given entry.Returns true if the entry was valid, false if it should be
  skipped.
 */
- (jboolean)advanceToWithComGoogleCommonCacheReferenceEntry:(id<ComGoogleCommonCacheReferenceEntry> __nonnull)entry_;

- (ComGoogleCommonCacheLocalCache_WriteThroughEntry *)nextEntry;

/*!
 @brief Finds the next entry in the current chain.Returns true if an entry was found.
 */
- (jboolean)nextInChain;

/*!
 @brief Finds the next entry in the current table.Returns true if an entry was found.
 */
- (jboolean)nextInTable;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheLocalCache_HashIterator)

J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_HashIterator, currentSegment_, ComGoogleCommonCacheLocalCache_Segment *)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_HashIterator, currentTable_, JavaUtilConcurrentAtomicAtomicReferenceArray *)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_HashIterator, nextEntry_, id<ComGoogleCommonCacheReferenceEntry>)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_HashIterator, nextExternal_, ComGoogleCommonCacheLocalCache_WriteThroughEntry *)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_HashIterator, lastReturned_, ComGoogleCommonCacheLocalCache_WriteThroughEntry *)

FOUNDATION_EXPORT void ComGoogleCommonCacheLocalCache_HashIterator_initWithComGoogleCommonCacheLocalCache_(ComGoogleCommonCacheLocalCache_HashIterator *self, ComGoogleCommonCacheLocalCache *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheLocalCache_HashIterator)

#endif

#if !defined (ComGoogleCommonCacheLocalCache_KeyIterator_) && (INCLUDE_ALL_ComGoogleCommonCacheLocalCache || defined(INCLUDE_ComGoogleCommonCacheLocalCache_KeyIterator))
#define ComGoogleCommonCacheLocalCache_KeyIterator_

@class ComGoogleCommonCacheLocalCache;

@interface ComGoogleCommonCacheLocalCache_KeyIterator : ComGoogleCommonCacheLocalCache_HashIterator

#pragma mark Public

- (id)next;

#pragma mark Package-Private

- (instancetype __nonnull)initWithComGoogleCommonCacheLocalCache:(ComGoogleCommonCacheLocalCache * __nonnull)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheLocalCache_KeyIterator)

FOUNDATION_EXPORT void ComGoogleCommonCacheLocalCache_KeyIterator_initWithComGoogleCommonCacheLocalCache_(ComGoogleCommonCacheLocalCache_KeyIterator *self, ComGoogleCommonCacheLocalCache *outer$);

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_KeyIterator *new_ComGoogleCommonCacheLocalCache_KeyIterator_initWithComGoogleCommonCacheLocalCache_(ComGoogleCommonCacheLocalCache *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_KeyIterator *create_ComGoogleCommonCacheLocalCache_KeyIterator_initWithComGoogleCommonCacheLocalCache_(ComGoogleCommonCacheLocalCache *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheLocalCache_KeyIterator)

#endif

#if !defined (ComGoogleCommonCacheLocalCache_ValueIterator_) && (INCLUDE_ALL_ComGoogleCommonCacheLocalCache || defined(INCLUDE_ComGoogleCommonCacheLocalCache_ValueIterator))
#define ComGoogleCommonCacheLocalCache_ValueIterator_

@class ComGoogleCommonCacheLocalCache;

@interface ComGoogleCommonCacheLocalCache_ValueIterator : ComGoogleCommonCacheLocalCache_HashIterator

#pragma mark Public

- (id)next;

#pragma mark Package-Private

- (instancetype __nonnull)initWithComGoogleCommonCacheLocalCache:(ComGoogleCommonCacheLocalCache * __nonnull)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheLocalCache_ValueIterator)

FOUNDATION_EXPORT void ComGoogleCommonCacheLocalCache_ValueIterator_initWithComGoogleCommonCacheLocalCache_(ComGoogleCommonCacheLocalCache_ValueIterator *self, ComGoogleCommonCacheLocalCache *outer$);

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_ValueIterator *new_ComGoogleCommonCacheLocalCache_ValueIterator_initWithComGoogleCommonCacheLocalCache_(ComGoogleCommonCacheLocalCache *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_ValueIterator *create_ComGoogleCommonCacheLocalCache_ValueIterator_initWithComGoogleCommonCacheLocalCache_(ComGoogleCommonCacheLocalCache *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheLocalCache_ValueIterator)

#endif

#if !defined (ComGoogleCommonCacheLocalCache_WriteThroughEntry_) && (INCLUDE_ALL_ComGoogleCommonCacheLocalCache || defined(INCLUDE_ComGoogleCommonCacheLocalCache_WriteThroughEntry))
#define ComGoogleCommonCacheLocalCache_WriteThroughEntry_

#define RESTRICT_JavaUtilMap 1
#define INCLUDE_JavaUtilMap_Entry 1
#include "java/util/Map.h"

@class ComGoogleCommonCacheLocalCache;

/*!
 @brief Custom Entry class used by EntryIterator.next(), that relays setValue changes to the underlying
  map.
 */
@interface ComGoogleCommonCacheLocalCache_WriteThroughEntry : NSObject < JavaUtilMap_Entry > {
 @public
  id key_;
  id value_;
}

#pragma mark Public

- (jboolean)isEqual:(id __nullable)object;

- (id)getKey;

- (id)getValue;

- (NSUInteger)hash;

- (id)setValueWithId:(id __nonnull)newValue;

- (NSString *)description;

#pragma mark Package-Private

- (instancetype __nonnull)initWithComGoogleCommonCacheLocalCache:(ComGoogleCommonCacheLocalCache * __nonnull)outer$
                                                          withId:(id __nonnull)key
                                                          withId:(id __nonnull)value;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheLocalCache_WriteThroughEntry)

J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_WriteThroughEntry, key_, id)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_WriteThroughEntry, value_, id)

FOUNDATION_EXPORT void ComGoogleCommonCacheLocalCache_WriteThroughEntry_initWithComGoogleCommonCacheLocalCache_withId_withId_(ComGoogleCommonCacheLocalCache_WriteThroughEntry *self, ComGoogleCommonCacheLocalCache *outer$, id key, id value);

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_WriteThroughEntry *new_ComGoogleCommonCacheLocalCache_WriteThroughEntry_initWithComGoogleCommonCacheLocalCache_withId_withId_(ComGoogleCommonCacheLocalCache *outer$, id key, id value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_WriteThroughEntry *create_ComGoogleCommonCacheLocalCache_WriteThroughEntry_initWithComGoogleCommonCacheLocalCache_withId_withId_(ComGoogleCommonCacheLocalCache *outer$, id key, id value);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheLocalCache_WriteThroughEntry)

#endif

#if !defined (ComGoogleCommonCacheLocalCache_EntryIterator_) && (INCLUDE_ALL_ComGoogleCommonCacheLocalCache || defined(INCLUDE_ComGoogleCommonCacheLocalCache_EntryIterator))
#define ComGoogleCommonCacheLocalCache_EntryIterator_

@class ComGoogleCommonCacheLocalCache;
@protocol JavaUtilMap_Entry;

@interface ComGoogleCommonCacheLocalCache_EntryIterator : ComGoogleCommonCacheLocalCache_HashIterator

#pragma mark Public

- (id<JavaUtilMap_Entry>)next;

#pragma mark Package-Private

- (instancetype __nonnull)initWithComGoogleCommonCacheLocalCache:(ComGoogleCommonCacheLocalCache * __nonnull)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheLocalCache_EntryIterator)

FOUNDATION_EXPORT void ComGoogleCommonCacheLocalCache_EntryIterator_initWithComGoogleCommonCacheLocalCache_(ComGoogleCommonCacheLocalCache_EntryIterator *self, ComGoogleCommonCacheLocalCache *outer$);

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_EntryIterator *new_ComGoogleCommonCacheLocalCache_EntryIterator_initWithComGoogleCommonCacheLocalCache_(ComGoogleCommonCacheLocalCache *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_EntryIterator *create_ComGoogleCommonCacheLocalCache_EntryIterator_initWithComGoogleCommonCacheLocalCache_(ComGoogleCommonCacheLocalCache *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheLocalCache_EntryIterator)

#endif

#if !defined (ComGoogleCommonCacheLocalCache_AbstractCacheSet_) && (INCLUDE_ALL_ComGoogleCommonCacheLocalCache || defined(INCLUDE_ComGoogleCommonCacheLocalCache_AbstractCacheSet))
#define ComGoogleCommonCacheLocalCache_AbstractCacheSet_

#define RESTRICT_JavaUtilAbstractSet 1
#define INCLUDE_JavaUtilAbstractSet 1
#include "java/util/AbstractSet.h"

@class ComGoogleCommonCacheLocalCache;
@class IOSObjectArray;
@protocol JavaUtilConcurrentConcurrentMap;

@interface ComGoogleCommonCacheLocalCache_AbstractCacheSet : JavaUtilAbstractSet {
 @public
  __unsafe_unretained id<JavaUtilConcurrentConcurrentMap> map_;
}

#pragma mark Public

- (void)clear;

- (jboolean)isEmpty;

- (jint)size;

- (IOSObjectArray *)toArray;

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray * __nonnull)a;

#pragma mark Package-Private

- (instancetype __nonnull)initWithComGoogleCommonCacheLocalCache:(ComGoogleCommonCacheLocalCache * __nonnull)outer$
                             withJavaUtilConcurrentConcurrentMap:(id<JavaUtilConcurrentConcurrentMap> __nonnull)map;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheLocalCache_AbstractCacheSet)

FOUNDATION_EXPORT void ComGoogleCommonCacheLocalCache_AbstractCacheSet_initWithComGoogleCommonCacheLocalCache_withJavaUtilConcurrentConcurrentMap_(ComGoogleCommonCacheLocalCache_AbstractCacheSet *self, ComGoogleCommonCacheLocalCache *outer$, id<JavaUtilConcurrentConcurrentMap> map);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheLocalCache_AbstractCacheSet)

#endif

#if !defined (ComGoogleCommonCacheLocalCache_KeySet_) && (INCLUDE_ALL_ComGoogleCommonCacheLocalCache || defined(INCLUDE_ComGoogleCommonCacheLocalCache_KeySet))
#define ComGoogleCommonCacheLocalCache_KeySet_

@class ComGoogleCommonCacheLocalCache;
@protocol JavaUtilConcurrentConcurrentMap;
@protocol JavaUtilIterator;

@interface ComGoogleCommonCacheLocalCache_KeySet : ComGoogleCommonCacheLocalCache_AbstractCacheSet

#pragma mark Public

- (jboolean)containsWithId:(id __nonnull)o;

- (id<JavaUtilIterator>)iterator;

- (jboolean)removeWithId:(id __nonnull)o;

#pragma mark Package-Private

- (instancetype __nonnull)initWithComGoogleCommonCacheLocalCache:(ComGoogleCommonCacheLocalCache * __nonnull)outer$
                             withJavaUtilConcurrentConcurrentMap:(id<JavaUtilConcurrentConcurrentMap> __nonnull)map;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheLocalCache_KeySet)

FOUNDATION_EXPORT void ComGoogleCommonCacheLocalCache_KeySet_initWithComGoogleCommonCacheLocalCache_withJavaUtilConcurrentConcurrentMap_(ComGoogleCommonCacheLocalCache_KeySet *self, ComGoogleCommonCacheLocalCache *outer$, id<JavaUtilConcurrentConcurrentMap> map);

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_KeySet *new_ComGoogleCommonCacheLocalCache_KeySet_initWithComGoogleCommonCacheLocalCache_withJavaUtilConcurrentConcurrentMap_(ComGoogleCommonCacheLocalCache *outer$, id<JavaUtilConcurrentConcurrentMap> map) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_KeySet *create_ComGoogleCommonCacheLocalCache_KeySet_initWithComGoogleCommonCacheLocalCache_withJavaUtilConcurrentConcurrentMap_(ComGoogleCommonCacheLocalCache *outer$, id<JavaUtilConcurrentConcurrentMap> map);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheLocalCache_KeySet)

#endif

#if !defined (ComGoogleCommonCacheLocalCache_Values_) && (INCLUDE_ALL_ComGoogleCommonCacheLocalCache || defined(INCLUDE_ComGoogleCommonCacheLocalCache_Values))
#define ComGoogleCommonCacheLocalCache_Values_

#define RESTRICT_JavaUtilAbstractCollection 1
#define INCLUDE_JavaUtilAbstractCollection 1
#include "java/util/AbstractCollection.h"

@class ComGoogleCommonCacheLocalCache;
@class IOSObjectArray;
@protocol JavaUtilConcurrentConcurrentMap;
@protocol JavaUtilIterator;

@interface ComGoogleCommonCacheLocalCache_Values : JavaUtilAbstractCollection

#pragma mark Public

- (void)clear;

- (jboolean)containsWithId:(id __nonnull)o;

- (jboolean)isEmpty;

- (id<JavaUtilIterator>)iterator;

- (jint)size;

- (IOSObjectArray *)toArray;

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray * __nonnull)a;

#pragma mark Package-Private

- (instancetype __nonnull)initWithComGoogleCommonCacheLocalCache:(ComGoogleCommonCacheLocalCache * __nonnull)outer$
                             withJavaUtilConcurrentConcurrentMap:(id<JavaUtilConcurrentConcurrentMap> __nonnull)map;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheLocalCache_Values)

FOUNDATION_EXPORT void ComGoogleCommonCacheLocalCache_Values_initWithComGoogleCommonCacheLocalCache_withJavaUtilConcurrentConcurrentMap_(ComGoogleCommonCacheLocalCache_Values *self, ComGoogleCommonCacheLocalCache *outer$, id<JavaUtilConcurrentConcurrentMap> map);

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_Values *new_ComGoogleCommonCacheLocalCache_Values_initWithComGoogleCommonCacheLocalCache_withJavaUtilConcurrentConcurrentMap_(ComGoogleCommonCacheLocalCache *outer$, id<JavaUtilConcurrentConcurrentMap> map) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_Values *create_ComGoogleCommonCacheLocalCache_Values_initWithComGoogleCommonCacheLocalCache_withJavaUtilConcurrentConcurrentMap_(ComGoogleCommonCacheLocalCache *outer$, id<JavaUtilConcurrentConcurrentMap> map);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheLocalCache_Values)

#endif

#if !defined (ComGoogleCommonCacheLocalCache_EntrySet_) && (INCLUDE_ALL_ComGoogleCommonCacheLocalCache || defined(INCLUDE_ComGoogleCommonCacheLocalCache_EntrySet))
#define ComGoogleCommonCacheLocalCache_EntrySet_

@class ComGoogleCommonCacheLocalCache;
@protocol JavaUtilConcurrentConcurrentMap;
@protocol JavaUtilIterator;

@interface ComGoogleCommonCacheLocalCache_EntrySet : ComGoogleCommonCacheLocalCache_AbstractCacheSet

#pragma mark Public

- (jboolean)containsWithId:(id __nonnull)o;

- (id<JavaUtilIterator>)iterator;

- (jboolean)removeWithId:(id __nonnull)o;

#pragma mark Package-Private

- (instancetype __nonnull)initWithComGoogleCommonCacheLocalCache:(ComGoogleCommonCacheLocalCache * __nonnull)outer$
                             withJavaUtilConcurrentConcurrentMap:(id<JavaUtilConcurrentConcurrentMap> __nonnull)map;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheLocalCache_EntrySet)

FOUNDATION_EXPORT void ComGoogleCommonCacheLocalCache_EntrySet_initWithComGoogleCommonCacheLocalCache_withJavaUtilConcurrentConcurrentMap_(ComGoogleCommonCacheLocalCache_EntrySet *self, ComGoogleCommonCacheLocalCache *outer$, id<JavaUtilConcurrentConcurrentMap> map);

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_EntrySet *new_ComGoogleCommonCacheLocalCache_EntrySet_initWithComGoogleCommonCacheLocalCache_withJavaUtilConcurrentConcurrentMap_(ComGoogleCommonCacheLocalCache *outer$, id<JavaUtilConcurrentConcurrentMap> map) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_EntrySet *create_ComGoogleCommonCacheLocalCache_EntrySet_initWithComGoogleCommonCacheLocalCache_withJavaUtilConcurrentConcurrentMap_(ComGoogleCommonCacheLocalCache *outer$, id<JavaUtilConcurrentConcurrentMap> map);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheLocalCache_EntrySet)

#endif

#if !defined (ComGoogleCommonCacheLocalCache_ManualSerializationProxy_) && (INCLUDE_ALL_ComGoogleCommonCacheLocalCache || defined(INCLUDE_ComGoogleCommonCacheLocalCache_ManualSerializationProxy))
#define ComGoogleCommonCacheLocalCache_ManualSerializationProxy_

#define RESTRICT_ComGoogleCommonCacheForwardingCache 1
#define INCLUDE_ComGoogleCommonCacheForwardingCache 1
#include "com/google/common/cache/ForwardingCache.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComGoogleCommonBaseEquivalence;
@class ComGoogleCommonBaseTicker;
@class ComGoogleCommonCacheCacheBuilder;
@class ComGoogleCommonCacheCacheLoader;
@class ComGoogleCommonCacheLocalCache;
@class ComGoogleCommonCacheLocalCache_Strength;
@protocol ComGoogleCommonCacheCache;
@protocol ComGoogleCommonCacheRemovalListener;
@protocol ComGoogleCommonCacheWeigher;

/*!
 @brief Serializes the configuration of a LocalCache, reconstituting it as a Cache using CacheBuilder
  upon deserialization.An instance of this class is fit for use by the writeReplace of
  LocalManualCache.
 <p>Unfortunately, readResolve() doesn't get called when a circular dependency is present, so
  the proxy must be able to behave as the cache itself.
 */
@interface ComGoogleCommonCacheLocalCache_ManualSerializationProxy : ComGoogleCommonCacheForwardingCache < JavaIoSerializable > {
 @public
  ComGoogleCommonCacheLocalCache_Strength *keyStrength_;
  ComGoogleCommonCacheLocalCache_Strength *valueStrength_;
  ComGoogleCommonBaseEquivalence *keyEquivalence_;
  ComGoogleCommonBaseEquivalence *valueEquivalence_;
  jlong expireAfterWriteNanos_;
  jlong expireAfterAccessNanos_;
  jlong maxWeight_;
  id<ComGoogleCommonCacheWeigher> weigher_;
  jint concurrencyLevel_;
  id<ComGoogleCommonCacheRemovalListener> removalListener_;
  ComGoogleCommonBaseTicker *ticker_;
  ComGoogleCommonCacheCacheLoader *loader_;
  id<ComGoogleCommonCacheCache> delegate_;
}

#pragma mark Protected

- (id<ComGoogleCommonCacheCache>)delegate;

#pragma mark Package-Private

- (instancetype __nonnull)initWithComGoogleCommonCacheLocalCache:(ComGoogleCommonCacheLocalCache * __nonnull)cache;

- (ComGoogleCommonCacheCacheBuilder *)recreateCacheBuilder;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheLocalCache_ManualSerializationProxy)

J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_ManualSerializationProxy, keyStrength_, ComGoogleCommonCacheLocalCache_Strength *)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_ManualSerializationProxy, valueStrength_, ComGoogleCommonCacheLocalCache_Strength *)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_ManualSerializationProxy, keyEquivalence_, ComGoogleCommonBaseEquivalence *)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_ManualSerializationProxy, valueEquivalence_, ComGoogleCommonBaseEquivalence *)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_ManualSerializationProxy, weigher_, id<ComGoogleCommonCacheWeigher>)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_ManualSerializationProxy, removalListener_, id<ComGoogleCommonCacheRemovalListener>)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_ManualSerializationProxy, ticker_, ComGoogleCommonBaseTicker *)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_ManualSerializationProxy, loader_, ComGoogleCommonCacheCacheLoader *)
J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_ManualSerializationProxy, delegate_, id<ComGoogleCommonCacheCache>)

FOUNDATION_EXPORT void ComGoogleCommonCacheLocalCache_ManualSerializationProxy_initWithComGoogleCommonCacheLocalCache_(ComGoogleCommonCacheLocalCache_ManualSerializationProxy *self, ComGoogleCommonCacheLocalCache *cache);

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_ManualSerializationProxy *new_ComGoogleCommonCacheLocalCache_ManualSerializationProxy_initWithComGoogleCommonCacheLocalCache_(ComGoogleCommonCacheLocalCache *cache) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_ManualSerializationProxy *create_ComGoogleCommonCacheLocalCache_ManualSerializationProxy_initWithComGoogleCommonCacheLocalCache_(ComGoogleCommonCacheLocalCache *cache);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheLocalCache_ManualSerializationProxy)

#endif

#if !defined (ComGoogleCommonCacheLocalCache_LoadingSerializationProxy_) && (INCLUDE_ALL_ComGoogleCommonCacheLocalCache || defined(INCLUDE_ComGoogleCommonCacheLocalCache_LoadingSerializationProxy))
#define ComGoogleCommonCacheLocalCache_LoadingSerializationProxy_

#define RESTRICT_ComGoogleCommonCacheLoadingCache 1
#define INCLUDE_ComGoogleCommonCacheLoadingCache 1
#include "com/google/common/cache/LoadingCache.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComGoogleCommonCacheLocalCache;
@class ComGoogleCommonCollectImmutableMap;
@protocol JavaLangIterable;

/*!
 @brief Serializes the configuration of a LocalCache, reconstituting it as an LoadingCache using
  CacheBuilder upon deserialization.An instance of this class is fit for use by the writeReplace
  of LocalLoadingCache.
 <p>Unfortunately, readResolve() doesn't get called when a circular dependency is present, so
  the proxy must be able to behave as the cache itself.
 */
@interface ComGoogleCommonCacheLocalCache_LoadingSerializationProxy : ComGoogleCommonCacheLocalCache_ManualSerializationProxy < ComGoogleCommonCacheLoadingCache, JavaIoSerializable > {
 @public
  id<ComGoogleCommonCacheLoadingCache> autoDelegate_;
}

#pragma mark Public

- (id)applyWithId:(id __nonnull)key;

- (id)getWithId:(id __nonnull)key;

- (ComGoogleCommonCollectImmutableMap *)getAllWithJavaLangIterable:(id<JavaLangIterable> __nonnull)keys;

- (id)getUncheckedWithId:(id __nonnull)key;

- (void)refreshWithId:(id __nonnull)key;

#pragma mark Package-Private

- (instancetype __nonnull)initWithComGoogleCommonCacheLocalCache:(ComGoogleCommonCacheLocalCache * __nonnull)cache;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheLocalCache_LoadingSerializationProxy)

J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_LoadingSerializationProxy, autoDelegate_, id<ComGoogleCommonCacheLoadingCache>)

FOUNDATION_EXPORT void ComGoogleCommonCacheLocalCache_LoadingSerializationProxy_initWithComGoogleCommonCacheLocalCache_(ComGoogleCommonCacheLocalCache_LoadingSerializationProxy *self, ComGoogleCommonCacheLocalCache *cache);

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_LoadingSerializationProxy *new_ComGoogleCommonCacheLocalCache_LoadingSerializationProxy_initWithComGoogleCommonCacheLocalCache_(ComGoogleCommonCacheLocalCache *cache) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_LoadingSerializationProxy *create_ComGoogleCommonCacheLocalCache_LoadingSerializationProxy_initWithComGoogleCommonCacheLocalCache_(ComGoogleCommonCacheLocalCache *cache);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheLocalCache_LoadingSerializationProxy)

#endif

#if !defined (ComGoogleCommonCacheLocalCache_LocalManualCache_) && (INCLUDE_ALL_ComGoogleCommonCacheLocalCache || defined(INCLUDE_ComGoogleCommonCacheLocalCache_LocalManualCache))
#define ComGoogleCommonCacheLocalCache_LocalManualCache_

#define RESTRICT_ComGoogleCommonCacheCache 1
#define INCLUDE_ComGoogleCommonCacheCache 1
#include "com/google/common/cache/Cache.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComGoogleCommonCacheCacheBuilder;
@class ComGoogleCommonCacheCacheStats;
@class ComGoogleCommonCacheLocalCache;
@class ComGoogleCommonCollectImmutableMap;
@protocol JavaLangIterable;
@protocol JavaUtilConcurrentCallable;
@protocol JavaUtilConcurrentConcurrentMap;
@protocol JavaUtilMap;

@interface ComGoogleCommonCacheLocalCache_LocalManualCache : NSObject < ComGoogleCommonCacheCache, JavaIoSerializable > {
 @public
  ComGoogleCommonCacheLocalCache *localCache_;
}

#pragma mark Public

- (id<JavaUtilConcurrentConcurrentMap>)asMap;

- (void)cleanUp;

- (id)getWithId:(id __nonnull)key
withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable> __nonnull)valueLoader;

- (ComGoogleCommonCollectImmutableMap *)getAllPresentWithJavaLangIterable:(id<JavaLangIterable> __nonnull)keys;

- (id __nullable)getIfPresentWithId:(id __nonnull)key;

- (void)invalidateWithId:(id __nonnull)key;

- (void)invalidateAll;

- (void)invalidateAllWithJavaLangIterable:(id<JavaLangIterable> __nonnull)keys;

- (void)putWithId:(id __nonnull)key
           withId:(id __nonnull)value;

- (void)putAllWithJavaUtilMap:(id<JavaUtilMap> __nonnull)m;

- (jlong)size;

- (ComGoogleCommonCacheCacheStats *)stats;

#pragma mark Package-Private

- (instancetype __nonnull)initWithComGoogleCommonCacheCacheBuilder:(ComGoogleCommonCacheCacheBuilder * __nonnull)builder;

- (id)writeReplace;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheLocalCache_LocalManualCache)

J2OBJC_FIELD_SETTER(ComGoogleCommonCacheLocalCache_LocalManualCache, localCache_, ComGoogleCommonCacheLocalCache *)

FOUNDATION_EXPORT void ComGoogleCommonCacheLocalCache_LocalManualCache_initWithComGoogleCommonCacheCacheBuilder_(ComGoogleCommonCacheLocalCache_LocalManualCache *self, ComGoogleCommonCacheCacheBuilder *builder);

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_LocalManualCache *new_ComGoogleCommonCacheLocalCache_LocalManualCache_initWithComGoogleCommonCacheCacheBuilder_(ComGoogleCommonCacheCacheBuilder *builder) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_LocalManualCache *create_ComGoogleCommonCacheLocalCache_LocalManualCache_initWithComGoogleCommonCacheCacheBuilder_(ComGoogleCommonCacheCacheBuilder *builder);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheLocalCache_LocalManualCache)

#endif

#if !defined (ComGoogleCommonCacheLocalCache_LocalLoadingCache_) && (INCLUDE_ALL_ComGoogleCommonCacheLocalCache || defined(INCLUDE_ComGoogleCommonCacheLocalCache_LocalLoadingCache))
#define ComGoogleCommonCacheLocalCache_LocalLoadingCache_

#define RESTRICT_ComGoogleCommonCacheLoadingCache 1
#define INCLUDE_ComGoogleCommonCacheLoadingCache 1
#include "com/google/common/cache/LoadingCache.h"

@class ComGoogleCommonCacheCacheBuilder;
@class ComGoogleCommonCacheCacheLoader;
@class ComGoogleCommonCollectImmutableMap;
@protocol JavaLangIterable;

@interface ComGoogleCommonCacheLocalCache_LocalLoadingCache : ComGoogleCommonCacheLocalCache_LocalManualCache < ComGoogleCommonCacheLoadingCache >

#pragma mark Public

- (id)applyWithId:(id __nonnull)key;

- (id)getWithId:(id __nonnull)key;

- (ComGoogleCommonCollectImmutableMap *)getAllWithJavaLangIterable:(id<JavaLangIterable> __nonnull)keys;

- (id)getUncheckedWithId:(id __nonnull)key;

- (void)refreshWithId:(id __nonnull)key;

#pragma mark Package-Private

- (instancetype __nonnull)initWithComGoogleCommonCacheCacheBuilder:(ComGoogleCommonCacheCacheBuilder * __nonnull)builder
                               withComGoogleCommonCacheCacheLoader:(ComGoogleCommonCacheCacheLoader * __nonnull)loader;

- (id)writeReplace;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithComGoogleCommonCacheCacheBuilder:(ComGoogleCommonCacheCacheBuilder * __nonnull)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheLocalCache_LocalLoadingCache)

FOUNDATION_EXPORT void ComGoogleCommonCacheLocalCache_LocalLoadingCache_initWithComGoogleCommonCacheCacheBuilder_withComGoogleCommonCacheCacheLoader_(ComGoogleCommonCacheLocalCache_LocalLoadingCache *self, ComGoogleCommonCacheCacheBuilder *builder, ComGoogleCommonCacheCacheLoader *loader);

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_LocalLoadingCache *new_ComGoogleCommonCacheLocalCache_LocalLoadingCache_initWithComGoogleCommonCacheCacheBuilder_withComGoogleCommonCacheCacheLoader_(ComGoogleCommonCacheCacheBuilder *builder, ComGoogleCommonCacheCacheLoader *loader) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCacheLocalCache_LocalLoadingCache *create_ComGoogleCommonCacheLocalCache_LocalLoadingCache_initWithComGoogleCommonCacheCacheBuilder_withComGoogleCommonCacheCacheLoader_(ComGoogleCommonCacheCacheBuilder *builder, ComGoogleCommonCacheCacheLoader *loader);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheLocalCache_LocalLoadingCache)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCacheLocalCache")
