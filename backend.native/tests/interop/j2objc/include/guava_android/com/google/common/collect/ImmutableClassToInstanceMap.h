//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/collect/ImmutableClassToInstanceMap.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCollectImmutableClassToInstanceMap")
#ifdef RESTRICT_ComGoogleCommonCollectImmutableClassToInstanceMap
#define INCLUDE_ALL_ComGoogleCommonCollectImmutableClassToInstanceMap 0
#else
#define INCLUDE_ALL_ComGoogleCommonCollectImmutableClassToInstanceMap 1
#endif
#undef RESTRICT_ComGoogleCommonCollectImmutableClassToInstanceMap

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCollectImmutableClassToInstanceMap_) && (INCLUDE_ALL_ComGoogleCommonCollectImmutableClassToInstanceMap || defined(INCLUDE_ComGoogleCommonCollectImmutableClassToInstanceMap))
#define ComGoogleCommonCollectImmutableClassToInstanceMap_

#define RESTRICT_ComGoogleCommonCollectForwardingMap 1
#define INCLUDE_ComGoogleCommonCollectForwardingMap 1
#include "com/google/common/collect/ForwardingMap.h"

#define RESTRICT_ComGoogleCommonCollectClassToInstanceMap 1
#define INCLUDE_ComGoogleCommonCollectClassToInstanceMap 1
#include "com/google/common/collect/ClassToInstanceMap.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComGoogleCommonCollectImmutableClassToInstanceMap_Builder;
@class IOSClass;
@protocol JavaUtilMap;

/*!
 @brief A <code>ClassToInstanceMap</code> whose contents will never change, with many other important
  properties detailed at <code>ImmutableCollection</code>.
 @author Kevin Bourrillion
 @since 2.0
 */
@interface ComGoogleCommonCollectImmutableClassToInstanceMap : ComGoogleCommonCollectForwardingMap < ComGoogleCommonCollectClassToInstanceMap, JavaIoSerializable >

#pragma mark Public

/*!
 @brief Returns a new builder.The generated builder is equivalent to the builder created by the <code>Builder</code>
  constructor.
 */
+ (ComGoogleCommonCollectImmutableClassToInstanceMap_Builder *)builder;

/*!
 @brief Returns an immutable map containing the same entries as <code>map</code>.If <code>map</code> somehow
  contains entries with duplicate keys (for example, if it is a <code>SortedMap</code> whose
  comparator is not <i>consistent with equals</i>), the results of this method are undefined.
 <p><b>Note:</b> Despite what the method name suggests, if <code>map</code> is an <code>ImmutableClassToInstanceMap</code>
 , no copy will actually be performed.
 @throw NullPointerExceptionif any key or value in <code>map</code> is null
 @throw ClassCastExceptionif any value is not an instance of the type specified by its key
 */
+ (ComGoogleCommonCollectImmutableClassToInstanceMap *)copyOfWithJavaUtilMap:(id<JavaUtilMap> __nonnull)map OBJC_METHOD_FAMILY_NONE;

- (id __nullable)getInstanceWithIOSClass:(IOSClass * __nonnull)type;

/*!
 @brief Returns an empty <code>ImmutableClassToInstanceMap</code>.
 @since 19.0
 */
+ (ComGoogleCommonCollectImmutableClassToInstanceMap *)of;

/*!
 @brief Returns an <code>ImmutableClassToInstanceMap</code> containing a single entry.
 @since 19.0
 */
+ (ComGoogleCommonCollectImmutableClassToInstanceMap *)ofWithIOSClass:(IOSClass * __nonnull)type
                                                               withId:(id __nonnull)value;

/*!
 @brief Guaranteed to throw an exception and leave the map unmodified.
 @throw UnsupportedOperationExceptionalways
 */
- (id)putInstanceWithIOSClass:(IOSClass * __nonnull)type
                       withId:(id __nonnull)value __attribute__((deprecated));

#pragma mark Protected

- (id<JavaUtilMap>)delegate;

#pragma mark Package-Private

- (id)readResolve;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonCollectImmutableClassToInstanceMap)

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableClassToInstanceMap *ComGoogleCommonCollectImmutableClassToInstanceMap_of(void);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableClassToInstanceMap *ComGoogleCommonCollectImmutableClassToInstanceMap_ofWithIOSClass_withId_(IOSClass *type, id value);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableClassToInstanceMap_Builder *ComGoogleCommonCollectImmutableClassToInstanceMap_builder(void);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableClassToInstanceMap *ComGoogleCommonCollectImmutableClassToInstanceMap_copyOfWithJavaUtilMap_(id<JavaUtilMap> map);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectImmutableClassToInstanceMap)

#endif

#if !defined (ComGoogleCommonCollectImmutableClassToInstanceMap_Builder_) && (INCLUDE_ALL_ComGoogleCommonCollectImmutableClassToInstanceMap || defined(INCLUDE_ComGoogleCommonCollectImmutableClassToInstanceMap_Builder))
#define ComGoogleCommonCollectImmutableClassToInstanceMap_Builder_

@class ComGoogleCommonCollectImmutableClassToInstanceMap;
@class IOSClass;
@protocol JavaUtilMap;

/*!
 @brief A builder for creating immutable class-to-instance maps.Example:
  
 @code
 static final ImmutableClassToInstanceMap<Handler> HANDLERS =
      new ImmutableClassToInstanceMap.Builder<Handler>()
          .put(FooHandler.class, new FooHandler())
          .put(BarHandler.class, new SubBarHandler())
          .put(Handler.class, new QuuxHandler())
          .build(); 
 
@endcode
  
 <p>After invoking <code>build()</code> it is still possible to add more entries and build again.
 Thus each map generated by this builder will be a superset of any map generated before it.
 @since 2.0
 */
@interface ComGoogleCommonCollectImmutableClassToInstanceMap_Builder : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Returns a new immutable class-to-instance map containing the entries provided to this
  builder.
 @throw IllegalArgumentExceptionif duplicate keys were added
 */
- (ComGoogleCommonCollectImmutableClassToInstanceMap *)build;

/*!
 @brief Associates <code>key</code> with <code>value</code> in the built map.Duplicate keys are not allowed,
  and will cause <code>build</code> to fail.
 */
- (ComGoogleCommonCollectImmutableClassToInstanceMap_Builder *)putWithIOSClass:(IOSClass * __nonnull)key
                                                                        withId:(id __nonnull)value;

/*!
 @brief Associates all of <code>map's</code> keys and values in the built map.Duplicate keys are not
  allowed, and will cause <code>build</code> to fail.
 @throw NullPointerExceptionif any key or value in <code>map</code> is null
 @throw ClassCastExceptionif any value is not an instance of the type specified by its key
 */
- (ComGoogleCommonCollectImmutableClassToInstanceMap_Builder *)putAllWithJavaUtilMap:(id<JavaUtilMap> __nonnull)map;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectImmutableClassToInstanceMap_Builder)

FOUNDATION_EXPORT void ComGoogleCommonCollectImmutableClassToInstanceMap_Builder_init(ComGoogleCommonCollectImmutableClassToInstanceMap_Builder *self);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableClassToInstanceMap_Builder *new_ComGoogleCommonCollectImmutableClassToInstanceMap_Builder_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableClassToInstanceMap_Builder *create_ComGoogleCommonCollectImmutableClassToInstanceMap_Builder_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectImmutableClassToInstanceMap_Builder)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCollectImmutableClassToInstanceMap")
