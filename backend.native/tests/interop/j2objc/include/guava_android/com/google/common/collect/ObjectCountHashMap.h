//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/collect/ObjectCountHashMap.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCollectObjectCountHashMap")
#ifdef RESTRICT_ComGoogleCommonCollectObjectCountHashMap
#define INCLUDE_ALL_ComGoogleCommonCollectObjectCountHashMap 0
#else
#define INCLUDE_ALL_ComGoogleCommonCollectObjectCountHashMap 1
#endif
#undef RESTRICT_ComGoogleCommonCollectObjectCountHashMap

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCollectObjectCountHashMap_) && (INCLUDE_ALL_ComGoogleCommonCollectObjectCountHashMap || defined(INCLUDE_ComGoogleCommonCollectObjectCountHashMap))
#define ComGoogleCommonCollectObjectCountHashMap_

@class IOSIntArray;
@class IOSLongArray;
@class IOSObjectArray;
@protocol ComGoogleCommonCollectMultiset_Entry;

/*!
 @brief ObjectCountHashMap is an implementation of <code>AbstractObjectCountMap</code> that uses arrays to
  store key objects and count values.Comparing to using a traditional <code>HashMap</code>
  implementation which stores keys and count values as map entries, <code>ObjectCountHashMap</code>
  minimizes object allocation and reduces memory footprint.
 <p>In the absence of element deletions, this will iterate over elements in insertion order.
 */
@interface ComGoogleCommonCollectObjectCountHashMap : NSObject {
 @public
  /*!
   @brief The keys of the entries in the map.
   */
  IOSObjectArray *keys_;
  /*!
   @brief The values of the entries in the map.
   */
  IOSIntArray *values_;
  jint size_;
  jint modCount_;
  /*!
   @brief Contains the logical entries, in the range of [0, size()).The high 32 bits of each long is the
  smeared hash of the element, whereas the low 32 bits is the "next" pointer (pointing to the
  next entry in the bucket chain).
   The pointers in [size(), entries.length) are all "null"
  (UNSET).
   */
  IOSLongArray *entries_;
}
@property (readonly, class) jfloat DEFAULT_LOAD_FACTOR NS_SWIFT_NAME(DEFAULT_LOAD_FACTOR);
@property (readonly, class) jint DEFAULT_SIZE NS_SWIFT_NAME(DEFAULT_SIZE);
@property (readonly, class) jint UNSET NS_SWIFT_NAME(UNSET);

+ (jfloat)DEFAULT_LOAD_FACTOR;

+ (jint)DEFAULT_SIZE;

+ (jint)UNSET;

#pragma mark Public

- (void)clear;

- (jboolean)containsKeyWithId:(id __nullable)key;

/*!
 @brief Creates an empty <code>ObjectCountHashMap</code> instance.
 */
+ (ComGoogleCommonCollectObjectCountHashMap *)create;

/*!
 @brief Creates a <code>ObjectCountHashMap</code> instance, with a high enough "initial capacity" that it 
 <i>should</i> hold <code>expectedSize</code> elements without growth.
 @param expectedSize the number of elements you expect to add to the returned set
 @return a new, empty <code>ObjectCountHashMap</code> with enough capacity to hold <code>expectedSize</code>
  elements without resizing
 @throw IllegalArgumentExceptionif <code>expectedSize</code> is negative
 */
+ (ComGoogleCommonCollectObjectCountHashMap *)createWithExpectedSizeWithInt:(jint)expectedSize;

- (jint)getWithId:(id __nullable)key;

- (jint)putWithId:(id __nullable)key
          withInt:(jint)value;

- (jint)removeWithId:(id __nullable)key;

#pragma mark Package-Private

/*!
 @brief Constructs a new empty instance of <code>ObjectCountHashMap</code>.
 */
- (instancetype __nonnull)initPackagePrivate;

/*!
 @brief Constructs a new instance of <code>ObjectCountHashMap</code> with the specified capacity.
 @param capacity the initial capacity of this <code>ObjectCountHashMap</code> .
 */
- (instancetype __nonnull)initPackagePrivateWithInt:(jint)capacity;

- (instancetype __nonnull)initPackagePrivateWithInt:(jint)expectedSize
                                          withFloat:(jfloat)loadFactor;

- (instancetype __nonnull)initPackagePrivateWithComGoogleCommonCollectObjectCountHashMap:(ComGoogleCommonCollectObjectCountHashMap * __nonnull)map;

- (void)ensureCapacityWithInt:(jint)minCapacity;

- (jint)firstIndex;

- (id<ComGoogleCommonCollectMultiset_Entry>)getEntryWithInt:(jint)index;

- (id)getKeyWithInt:(jint)index;

- (jint)getValueWithInt:(jint)index;

- (jint)indexOfWithId:(id __nullable)key;

- (void)init__WithInt:(jint)expectedSize
            withFloat:(jfloat)loadFactor OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Creates a fresh entry with the specified object at the specified position in the entry array.
 */
- (void)insertEntryWithInt:(jint)entryIndex
                    withId:(id __nullable)key
                   withInt:(jint)value
                   withInt:(jint)hash_;

/*!
 @brief Moves the last entry in the entry array into <code>dstIndex</code>, and nulls out its old position.
 */
- (void)moveLastEntryWithInt:(jint)dstIndex;

- (jint)nextIndexWithInt:(jint)index;

- (jint)nextIndexAfterRemoveWithInt:(jint)oldNextIndex
                            withInt:(jint)removedIndex;

- (jint)removeEntryWithInt:(jint)entryIndex;

/*!
 @brief Resizes the internal entries array to the specified capacity, which may be greater or less than
  the current capacity.
 */
- (void)resizeEntriesWithInt:(jint)newCapacity;

- (void)setValueWithInt:(jint)index
                withInt:(jint)newValue;

- (jint)size;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectObjectCountHashMap)

J2OBJC_FIELD_SETTER(ComGoogleCommonCollectObjectCountHashMap, keys_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComGoogleCommonCollectObjectCountHashMap, values_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ComGoogleCommonCollectObjectCountHashMap, entries_, IOSLongArray *)

inline jfloat ComGoogleCommonCollectObjectCountHashMap_get_DEFAULT_LOAD_FACTOR(void);
#define ComGoogleCommonCollectObjectCountHashMap_DEFAULT_LOAD_FACTOR 1.0f
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonCollectObjectCountHashMap, DEFAULT_LOAD_FACTOR, jfloat)

inline jint ComGoogleCommonCollectObjectCountHashMap_get_DEFAULT_SIZE(void);
#define ComGoogleCommonCollectObjectCountHashMap_DEFAULT_SIZE 3
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonCollectObjectCountHashMap, DEFAULT_SIZE, jint)

inline jint ComGoogleCommonCollectObjectCountHashMap_get_UNSET(void);
#define ComGoogleCommonCollectObjectCountHashMap_UNSET -1
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonCollectObjectCountHashMap, UNSET, jint)

FOUNDATION_EXPORT ComGoogleCommonCollectObjectCountHashMap *ComGoogleCommonCollectObjectCountHashMap_create(void);

FOUNDATION_EXPORT ComGoogleCommonCollectObjectCountHashMap *ComGoogleCommonCollectObjectCountHashMap_createWithExpectedSizeWithInt_(jint expectedSize);

FOUNDATION_EXPORT void ComGoogleCommonCollectObjectCountHashMap_initPackagePrivate(ComGoogleCommonCollectObjectCountHashMap *self);

FOUNDATION_EXPORT ComGoogleCommonCollectObjectCountHashMap *new_ComGoogleCommonCollectObjectCountHashMap_initPackagePrivate(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectObjectCountHashMap *create_ComGoogleCommonCollectObjectCountHashMap_initPackagePrivate(void);

FOUNDATION_EXPORT void ComGoogleCommonCollectObjectCountHashMap_initPackagePrivateWithComGoogleCommonCollectObjectCountHashMap_(ComGoogleCommonCollectObjectCountHashMap *self, ComGoogleCommonCollectObjectCountHashMap *map);

FOUNDATION_EXPORT ComGoogleCommonCollectObjectCountHashMap *new_ComGoogleCommonCollectObjectCountHashMap_initPackagePrivateWithComGoogleCommonCollectObjectCountHashMap_(ComGoogleCommonCollectObjectCountHashMap *map) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectObjectCountHashMap *create_ComGoogleCommonCollectObjectCountHashMap_initPackagePrivateWithComGoogleCommonCollectObjectCountHashMap_(ComGoogleCommonCollectObjectCountHashMap *map);

FOUNDATION_EXPORT void ComGoogleCommonCollectObjectCountHashMap_initPackagePrivateWithInt_(ComGoogleCommonCollectObjectCountHashMap *self, jint capacity);

FOUNDATION_EXPORT ComGoogleCommonCollectObjectCountHashMap *new_ComGoogleCommonCollectObjectCountHashMap_initPackagePrivateWithInt_(jint capacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectObjectCountHashMap *create_ComGoogleCommonCollectObjectCountHashMap_initPackagePrivateWithInt_(jint capacity);

FOUNDATION_EXPORT void ComGoogleCommonCollectObjectCountHashMap_initPackagePrivateWithInt_withFloat_(ComGoogleCommonCollectObjectCountHashMap *self, jint expectedSize, jfloat loadFactor);

FOUNDATION_EXPORT ComGoogleCommonCollectObjectCountHashMap *new_ComGoogleCommonCollectObjectCountHashMap_initPackagePrivateWithInt_withFloat_(jint expectedSize, jfloat loadFactor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectObjectCountHashMap *create_ComGoogleCommonCollectObjectCountHashMap_initPackagePrivateWithInt_withFloat_(jint expectedSize, jfloat loadFactor);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectObjectCountHashMap)

#endif

#if !defined (ComGoogleCommonCollectObjectCountHashMap_MapEntry_) && (INCLUDE_ALL_ComGoogleCommonCollectObjectCountHashMap || defined(INCLUDE_ComGoogleCommonCollectObjectCountHashMap_MapEntry))
#define ComGoogleCommonCollectObjectCountHashMap_MapEntry_

#define RESTRICT_ComGoogleCommonCollectMultisets 1
#define INCLUDE_ComGoogleCommonCollectMultisets_AbstractEntry 1
#include "com/google/common/collect/Multisets.h"

@class ComGoogleCommonCollectObjectCountHashMap;

@interface ComGoogleCommonCollectObjectCountHashMap_MapEntry : ComGoogleCommonCollectMultisets_AbstractEntry {
 @public
  id key_;
  jint lastKnownIndex_;
}

#pragma mark Public

- (jint)getCount;

- (id)getElement;

- (jint)setCountWithInt:(jint)count;

#pragma mark Package-Private

- (instancetype __nonnull)initWithComGoogleCommonCollectObjectCountHashMap:(ComGoogleCommonCollectObjectCountHashMap * __nonnull)outer$
                                                                   withInt:(jint)index;

- (void)updateLastKnownIndex;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectObjectCountHashMap_MapEntry)

J2OBJC_FIELD_SETTER(ComGoogleCommonCollectObjectCountHashMap_MapEntry, key_, id)

FOUNDATION_EXPORT void ComGoogleCommonCollectObjectCountHashMap_MapEntry_initWithComGoogleCommonCollectObjectCountHashMap_withInt_(ComGoogleCommonCollectObjectCountHashMap_MapEntry *self, ComGoogleCommonCollectObjectCountHashMap *outer$, jint index);

FOUNDATION_EXPORT ComGoogleCommonCollectObjectCountHashMap_MapEntry *new_ComGoogleCommonCollectObjectCountHashMap_MapEntry_initWithComGoogleCommonCollectObjectCountHashMap_withInt_(ComGoogleCommonCollectObjectCountHashMap *outer$, jint index) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectObjectCountHashMap_MapEntry *create_ComGoogleCommonCollectObjectCountHashMap_MapEntry_initWithComGoogleCommonCollectObjectCountHashMap_withInt_(ComGoogleCommonCollectObjectCountHashMap *outer$, jint index);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectObjectCountHashMap_MapEntry)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCollectObjectCountHashMap")
