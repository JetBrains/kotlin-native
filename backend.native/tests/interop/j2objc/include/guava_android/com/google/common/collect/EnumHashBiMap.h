//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/collect/EnumHashBiMap.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCollectEnumHashBiMap")
#ifdef RESTRICT_ComGoogleCommonCollectEnumHashBiMap
#define INCLUDE_ALL_ComGoogleCommonCollectEnumHashBiMap 0
#else
#define INCLUDE_ALL_ComGoogleCommonCollectEnumHashBiMap 1
#endif
#undef RESTRICT_ComGoogleCommonCollectEnumHashBiMap

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCollectEnumHashBiMap_) && (INCLUDE_ALL_ComGoogleCommonCollectEnumHashBiMap || defined(INCLUDE_ComGoogleCommonCollectEnumHashBiMap))
#define ComGoogleCommonCollectEnumHashBiMap_

#define RESTRICT_ComGoogleCommonCollectAbstractBiMap 1
#define INCLUDE_ComGoogleCommonCollectAbstractBiMap 1
#include "com/google/common/collect/AbstractBiMap.h"

@class IOSClass;
@class JavaLangEnum;
@protocol JavaUtilMap;

/*!
 @brief A <code>BiMap</code> backed by an <code>EnumMap</code> instance for keys-to-values, and a <code>HashMap</code>
  instance for values-to-keys.Null keys are not permitted, but null values are.
 An <code>EnumHashBiMap</code>
  and its inverse are both serializable. 
 <p>See the Guava User Guide article on <a href="https://github.com/google/guava/wiki/NewCollectionTypesExplained#bimap">
  <code>BiMap</code></a>.
 @author Mike Bostock
 @since 2.0
 */
@interface ComGoogleCommonCollectEnumHashBiMap : ComGoogleCommonCollectAbstractBiMap

#pragma mark Public

/*!
 @brief Returns a new, empty <code>EnumHashBiMap</code> using the specified key type.
 @param keyType the key type
 */
+ (ComGoogleCommonCollectEnumHashBiMap *)createWithIOSClass:(IOSClass * __nonnull)keyType;

/*!
 @brief Constructs a new bimap with the same mappings as the specified map.If the specified map is an 
 <code>EnumHashBiMap</code> or an <code>EnumBiMap</code>, the new bimap has the same key type as the input
  bimap.
 Otherwise, the specified map must contain at least one mapping, in order to determine
  the key type.
 @param map the map whose mappings are to be placed in this map
 @throw IllegalArgumentExceptionif map is not an <code>EnumBiMap</code> or an <code>EnumHashBiMap</code>
      instance and contains no mappings
 */
+ (ComGoogleCommonCollectEnumHashBiMap *)createWithJavaUtilMap:(id<JavaUtilMap> __nonnull)map;

- (id)forcePutWithId:(JavaLangEnum * __nonnull)key
              withId:(id __nullable)value;

/*!
 @brief Returns the associated key type.
 */
- (IOSClass *)keyType;

- (id)putWithId:(JavaLangEnum * __nonnull)key
         withId:(id __nullable)value;

#pragma mark Package-Private

- (JavaLangEnum *)checkKeyWithId:(JavaLangEnum * __nonnull)key;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initPackagePrivateWithJavaUtilMap:(id<JavaUtilMap> __nonnull)arg0
                                            withJavaUtilMap:(id<JavaUtilMap> __nonnull)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectEnumHashBiMap)

FOUNDATION_EXPORT ComGoogleCommonCollectEnumHashBiMap *ComGoogleCommonCollectEnumHashBiMap_createWithIOSClass_(IOSClass *keyType);

FOUNDATION_EXPORT ComGoogleCommonCollectEnumHashBiMap *ComGoogleCommonCollectEnumHashBiMap_createWithJavaUtilMap_(id<JavaUtilMap> map);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectEnumHashBiMap)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCollectEnumHashBiMap")
