//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/util/concurrent/ListeningExecutorService.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonUtilConcurrentListeningExecutorService")
#ifdef RESTRICT_ComGoogleCommonUtilConcurrentListeningExecutorService
#define INCLUDE_ALL_ComGoogleCommonUtilConcurrentListeningExecutorService 0
#else
#define INCLUDE_ALL_ComGoogleCommonUtilConcurrentListeningExecutorService 1
#endif
#undef RESTRICT_ComGoogleCommonUtilConcurrentListeningExecutorService

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonUtilConcurrentListeningExecutorService_) && (INCLUDE_ALL_ComGoogleCommonUtilConcurrentListeningExecutorService || defined(INCLUDE_ComGoogleCommonUtilConcurrentListeningExecutorService))
#define ComGoogleCommonUtilConcurrentListeningExecutorService_

#define RESTRICT_JavaUtilConcurrentExecutorService 1
#define INCLUDE_JavaUtilConcurrentExecutorService 1
#include "java/util/concurrent/ExecutorService.h"

@class JavaUtilConcurrentTimeUnit;
@protocol ComGoogleCommonUtilConcurrentListenableFuture;
@protocol JavaLangRunnable;
@protocol JavaUtilCollection;
@protocol JavaUtilConcurrentCallable;
@protocol JavaUtilList;

/*!
 @brief An <code>ExecutorService</code> that returns <code>ListenableFuture</code> instances.To create an instance
  from an existing <code>ExecutorService</code>, call <code>MoreExecutors.listeningDecorator(ExecutorService)</code>
 .
 @author Chris Povirk
 @since 10.0
 */
@protocol ComGoogleCommonUtilConcurrentListeningExecutorService < JavaUtilConcurrentExecutorService, JavaObject >

/*!
 @return a <code>ListenableFuture</code> representing pending completion of the task
 @throw RejectedExecutionException
 */
- (id<ComGoogleCommonUtilConcurrentListenableFuture>)submitWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable> __nonnull)task;

/*!
 @return a <code>ListenableFuture</code> representing pending completion of the task
 @throw RejectedExecutionException
 */
- (id<ComGoogleCommonUtilConcurrentListenableFuture>)submitWithJavaLangRunnable:(id<JavaLangRunnable> __nonnull)task;

/*!
 @return a <code>ListenableFuture</code> representing pending completion of the task
 @throw RejectedExecutionException
 */
- (id<ComGoogleCommonUtilConcurrentListenableFuture>)submitWithJavaLangRunnable:(id<JavaLangRunnable> __nonnull)task
                                                                         withId:(id __nonnull)result;

/*!
 @brief <p>All elements in the returned list must be <code>ListenableFuture</code> instances.
 The easiest
  way to obtain a <code>List<ListenableFuture<T>></code> from this method is an unchecked (but safe)
  cast: 
 @code

    @@SuppressWarnings("unchecked") // guaranteed by invokeAll contract
    List<ListenableFuture<T>> futures = (List) executor.invokeAll(tasks);
   
@endcode
 @return A list of <code>ListenableFuture</code> instances representing the tasks, in the same
      sequential order as produced by the iterator for the given task list, each of which has
      completed.
 @throw RejectedExecutionException
 @throw NullPointerExceptionif any task is null
 */
- (id<JavaUtilList>)invokeAllWithJavaUtilCollection:(id<JavaUtilCollection> __nonnull)tasks;

/*!
 @brief <p>All elements in the returned list must be <code>ListenableFuture</code> instances.
 The easiest
  way to obtain a <code>List<ListenableFuture<T>></code> from this method is an unchecked (but safe)
  cast: 
 @code

    @@SuppressWarnings("unchecked") // guaranteed by invokeAll contract
    List<ListenableFuture<T>> futures = (List) executor.invokeAll(tasks, timeout, unit);
   
@endcode
 @return a list of <code>ListenableFuture</code> instances representing the tasks, in the same
      sequential order as produced by the iterator for the given task list. If the operation did
      not time out, each task will have completed. If it did time out, some of these tasks will
      not have completed.
 @throw RejectedExecutionException
 @throw NullPointerExceptionif any task is null
 */
- (id<JavaUtilList>)invokeAllWithJavaUtilCollection:(id<JavaUtilCollection> __nonnull)tasks
                                           withLong:(jlong)timeout
                     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit * __nonnull)unit;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentListeningExecutorService)

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentListeningExecutorService)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonUtilConcurrentListeningExecutorService")
