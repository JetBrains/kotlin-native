//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/collect/ForwardingNavigableMap.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCollectForwardingNavigableMap")
#ifdef RESTRICT_ComGoogleCommonCollectForwardingNavigableMap
#define INCLUDE_ALL_ComGoogleCommonCollectForwardingNavigableMap 0
#else
#define INCLUDE_ALL_ComGoogleCommonCollectForwardingNavigableMap 1
#endif
#undef RESTRICT_ComGoogleCommonCollectForwardingNavigableMap

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCollectForwardingNavigableMap_) && (INCLUDE_ALL_ComGoogleCommonCollectForwardingNavigableMap || defined(INCLUDE_ComGoogleCommonCollectForwardingNavigableMap))
#define ComGoogleCommonCollectForwardingNavigableMap_

#define RESTRICT_ComGoogleCommonCollectForwardingSortedMap 1
#define INCLUDE_ComGoogleCommonCollectForwardingSortedMap 1
#include "com/google/common/collect/ForwardingSortedMap.h"

#define RESTRICT_JavaUtilNavigableMap 1
#define INCLUDE_JavaUtilNavigableMap 1
#include "java/util/NavigableMap.h"

@protocol JavaUtilMap_Entry;
@protocol JavaUtilNavigableSet;
@protocol JavaUtilSortedMap;

/*!
 @brief A navigable map which forwards all its method calls to another navigable map.Subclasses should
  override one or more methods to modify the behavior of the backing map as desired per the <a href="http://en.wikipedia.org/wiki/Decorator_pattern">
 decorator pattern</a>.
 <p><b>Warning:</b> The methods of <code>ForwardingNavigableMap</code> forward <i>indiscriminately</i>
  to the methods of the delegate. For example, overriding <code>put</code> alone <i>will not</i> change
  the behavior of <code>putAll</code>, which can lead to unexpected behavior. In this case, you should
  override <code>putAll</code> as well, either providing your own implementation, or delegating to the
  provided <code>standardPutAll</code> method. 
 <p><b><code>default</code> method warning:</b> This class does <i>not</i> forward calls to <code>default</code>
  methods. Instead, it inherits their default implementations. When those implementations
  invoke methods, they invoke methods on the <code>ForwardingNavigableMap</code>.
  
 <p>Each of the <code>standard</code> methods uses the map's comparator (or the natural ordering of the
  elements, if there is no comparator) to test element equality. As a result, if the comparator is
  not consistent with equals, some of the standard implementations may violate the <code>Map</code>
  contract. 
 <p>The <code>standard</code> methods and the collection views they return are not guaranteed to be
  thread-safe, even when all of the methods that they depend on are thread-safe.
 @author Louis Wasserman
 @since 12.0
 */
@interface ComGoogleCommonCollectForwardingNavigableMap : ComGoogleCommonCollectForwardingSortedMap < JavaUtilNavigableMap >

#pragma mark Public

- (id<JavaUtilMap_Entry>)ceilingEntryWithId:(id __nonnull)key;

- (id)ceilingKeyWithId:(id __nonnull)key;

- (id<JavaUtilNavigableSet>)descendingKeySet;

- (id<JavaUtilNavigableMap>)descendingMap;

- (id<JavaUtilMap_Entry>)firstEntry;

- (id<JavaUtilMap_Entry>)floorEntryWithId:(id __nonnull)key;

- (id)floorKeyWithId:(id __nonnull)key;

- (id<JavaUtilNavigableMap>)headMapWithId:(id __nonnull)toKey
                              withBoolean:(jboolean)inclusive;

- (id<JavaUtilMap_Entry>)higherEntryWithId:(id __nonnull)key;

- (id)higherKeyWithId:(id __nonnull)key;

- (id<JavaUtilMap_Entry>)lastEntry;

- (id<JavaUtilMap_Entry>)lowerEntryWithId:(id __nonnull)key;

- (id)lowerKeyWithId:(id __nonnull)key;

- (id<JavaUtilNavigableSet>)navigableKeySet;

- (id<JavaUtilMap_Entry>)pollFirstEntry;

- (id<JavaUtilMap_Entry>)pollLastEntry;

- (id<JavaUtilNavigableMap>)subMapWithId:(id __nonnull)fromKey
                             withBoolean:(jboolean)fromInclusive
                                  withId:(id __nonnull)toKey
                             withBoolean:(jboolean)toInclusive;

- (id<JavaUtilNavigableMap>)tailMapWithId:(id __nonnull)fromKey
                              withBoolean:(jboolean)inclusive;

#pragma mark Protected

/*!
 @brief Constructor for use by subclasses.
 */
- (instancetype __nonnull)init;

- (id<JavaUtilNavigableMap>)delegate;

/*!
 @brief A sensible definition of <code>ceilingEntry</code> in terms of the <code>firstEntry()</code> of <code>tailMap(Object, boolean)</code>
 .If you override <code>tailMap</code>, you may wish to override <code>ceilingEntry</code>
  to forward to this implementation.
 */
- (id<JavaUtilMap_Entry>)standardCeilingEntryWithId:(id __nonnull)key;

/*!
 @brief A sensible definition of <code>ceilingKey</code> in terms of <code>ceilingEntry</code>.If you override 
 <code>ceilingEntry</code>, you may wish to override <code>ceilingKey</code> to forward to this
  implementation.
 */
- (id)standardCeilingKeyWithId:(id __nonnull)key;

/*!
 @brief A sensible definition of <code>descendingKeySet</code> as the <code>navigableKeySet</code> of <code>descendingMap</code>
 .
 (The <code>StandardDescendingMap</code> implementation implements <code>navigableKeySet</code>
  on its own, so as not to cause an infinite loop.) If you override <code>descendingMap</code>
 , you may wish to override <code>descendingKeySet</code> to forward to this
  implementation.
 */
- (id<JavaUtilNavigableSet>)standardDescendingKeySet;

/*!
 @brief A sensible definition of <code>firstEntry</code> in terms of the <code>iterator()</code> of <code>entrySet</code>
 .If you override <code>entrySet</code>, you may wish to override <code>firstEntry</code> to
  forward to this implementation.
 */
- (id<JavaUtilMap_Entry>)standardFirstEntry;

/*!
 @brief A sensible definition of <code>firstKey</code> in terms of <code>firstEntry</code>.If you override 
 <code>firstEntry</code>, you may wish to override <code>firstKey</code> to forward to this
  implementation.
 */
- (id)standardFirstKey;

/*!
 @brief A sensible definition of <code>floorEntry</code> in terms of the <code>lastEntry()</code> of <code>headMap(Object, boolean)</code>
 .If you override <code>headMap</code>, you may wish to override <code>floorEntry</code>
  to forward to this implementation.
 */
- (id<JavaUtilMap_Entry>)standardFloorEntryWithId:(id __nonnull)key;

/*!
 @brief A sensible definition of <code>floorKey</code> in terms of <code>floorEntry</code>.If you override 
 <code>floorEntry</code>, you may wish to override <code>floorKey</code> to forward to this
  implementation.
 */
- (id)standardFloorKeyWithId:(id __nonnull)key;

/*!
 @brief A sensible definition of <code>headMap(Object)</code> in terms of <code>headMap(Object,
 boolean)</code>
 .If you override <code>headMap(K, boolean)</code>, you may wish to override <code>headMap</code>
  to forward to this implementation.
 */
- (id<JavaUtilSortedMap>)standardHeadMapWithId:(id __nonnull)toKey;

/*!
 @brief A sensible definition of <code>higherEntry</code> in terms of the <code>firstEntry()</code> of <code>tailMap(Object, boolean)</code>
 .If you override <code>tailMap</code>, you may wish to override <code>higherEntry</code>
  to forward to this implementation.
 */
- (id<JavaUtilMap_Entry>)standardHigherEntryWithId:(id __nonnull)key;

/*!
 @brief A sensible definition of <code>higherKey</code> in terms of <code>higherEntry</code>.If you override 
 <code>higherEntry</code>, you may wish to override <code>higherKey</code> to forward to this
  implementation.
 */
- (id)standardHigherKeyWithId:(id __nonnull)key;

/*!
 @brief A sensible definition of <code>lastEntry</code> in terms of the <code>iterator()</code> of the <code>entrySet</code>
  of <code>descendingMap</code>.If you override <code>descendingMap</code>, you may wish to
  override <code>lastEntry</code> to forward to this implementation.
 */
- (id<JavaUtilMap_Entry>)standardLastEntry;

/*!
 @brief A sensible definition of <code>lastKey</code> in terms of <code>lastEntry</code>.If you override <code>lastEntry</code>
 , you may wish to override <code>lastKey</code> to forward to this implementation.
 */
- (id)standardLastKey;

/*!
 @brief A sensible definition of <code>lowerEntry</code> in terms of the <code>lastEntry()</code> of <code>headMap(Object, boolean)</code>
 .If you override <code>headMap</code>, you may wish to override <code>lowerEntry</code>
  to forward to this implementation.
 */
- (id<JavaUtilMap_Entry>)standardLowerEntryWithId:(id __nonnull)key;

/*!
 @brief A sensible definition of <code>lowerKey</code> in terms of <code>lowerEntry</code>.If you override 
 <code>lowerEntry</code>, you may wish to override <code>lowerKey</code> to forward to this
  implementation.
 */
- (id)standardLowerKeyWithId:(id __nonnull)key;

/*!
 @brief A sensible definition of <code>pollFirstEntry</code> in terms of the <code>iterator</code> of <code>entrySet</code>
 .If you override <code>entrySet</code>, you may wish to override <code>pollFirstEntry</code> to
  forward to this implementation.
 */
- (id<JavaUtilMap_Entry>)standardPollFirstEntry;

/*!
 @brief A sensible definition of <code>pollFirstEntry</code> in terms of the <code>iterator</code> of the <code>entrySet</code>
  of <code>descendingMap</code>.If you override <code>descendingMap</code>, you may wish to
  override <code>pollFirstEntry</code> to forward to this implementation.
 */
- (id<JavaUtilMap_Entry>)standardPollLastEntry;

/*!
 @brief A sensible definition of <code>subMap(Object, Object)</code> in terms of <code>subMap(Object,
 boolean, Object, boolean)</code>
 .If you override <code>subMap(K, boolean, K, boolean)</code>, you may
  wish to override <code>subMap</code> to forward to this implementation.
 */
- (id<JavaUtilSortedMap>)standardSubMapWithId:(id __nonnull)fromKey
                                       withId:(id __nonnull)toKey;

/*!
 @brief A sensible definition of <code>tailMap(Object)</code> in terms of <code>tailMap(Object,
 boolean)</code>
 .If you override <code>tailMap(K, boolean)</code>, you may wish to override <code>tailMap</code>
  to forward to this implementation.
 */
- (id<JavaUtilSortedMap>)standardTailMapWithId:(id __nonnull)fromKey;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectForwardingNavigableMap)

FOUNDATION_EXPORT void ComGoogleCommonCollectForwardingNavigableMap_init(ComGoogleCommonCollectForwardingNavigableMap *self);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectForwardingNavigableMap)

#endif

#if !defined (ComGoogleCommonCollectForwardingNavigableMap_StandardDescendingMap_) && (INCLUDE_ALL_ComGoogleCommonCollectForwardingNavigableMap || defined(INCLUDE_ComGoogleCommonCollectForwardingNavigableMap_StandardDescendingMap))
#define ComGoogleCommonCollectForwardingNavigableMap_StandardDescendingMap_

#define RESTRICT_ComGoogleCommonCollectMaps 1
#define INCLUDE_ComGoogleCommonCollectMaps_DescendingMap 1
#include "com/google/common/collect/Maps.h"

@class ComGoogleCommonCollectForwardingNavigableMap;
@protocol JavaUtilIterator;
@protocol JavaUtilNavigableMap;

/*!
 @brief A sensible implementation of <code>NavigableMap.descendingMap</code> in terms of the methods of this 
 <code>NavigableMap</code>.In many cases, you may wish to override <code>ForwardingNavigableMap.descendingMap</code>
  to forward to this implementation or a subclass thereof.
 <p>In particular, this map iterates over entries with repeated calls to <code>NavigableMap.lowerEntry</code>
 . If a more efficient means of iteration is available, you may wish to
  override the <code>entryIterator()</code> method of this class.
 @since 12.0
 */
@interface ComGoogleCommonCollectForwardingNavigableMap_StandardDescendingMap : ComGoogleCommonCollectMaps_DescendingMap

#pragma mark Public

/*!
 @brief Constructor for use by subclasses.
 */
- (instancetype __nonnull)initWithComGoogleCommonCollectForwardingNavigableMap:(ComGoogleCommonCollectForwardingNavigableMap * __nonnull)outer$;

#pragma mark Protected

- (id<JavaUtilIterator>)entryIterator;

#pragma mark Package-Private

- (id<JavaUtilNavigableMap>)forward;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectForwardingNavigableMap_StandardDescendingMap)

FOUNDATION_EXPORT void ComGoogleCommonCollectForwardingNavigableMap_StandardDescendingMap_initWithComGoogleCommonCollectForwardingNavigableMap_(ComGoogleCommonCollectForwardingNavigableMap_StandardDescendingMap *self, ComGoogleCommonCollectForwardingNavigableMap *outer$);

FOUNDATION_EXPORT ComGoogleCommonCollectForwardingNavigableMap_StandardDescendingMap *new_ComGoogleCommonCollectForwardingNavigableMap_StandardDescendingMap_initWithComGoogleCommonCollectForwardingNavigableMap_(ComGoogleCommonCollectForwardingNavigableMap *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectForwardingNavigableMap_StandardDescendingMap *create_ComGoogleCommonCollectForwardingNavigableMap_StandardDescendingMap_initWithComGoogleCommonCollectForwardingNavigableMap_(ComGoogleCommonCollectForwardingNavigableMap *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectForwardingNavigableMap_StandardDescendingMap)

#endif

#if !defined (ComGoogleCommonCollectForwardingNavigableMap_StandardNavigableKeySet_) && (INCLUDE_ALL_ComGoogleCommonCollectForwardingNavigableMap || defined(INCLUDE_ComGoogleCommonCollectForwardingNavigableMap_StandardNavigableKeySet))
#define ComGoogleCommonCollectForwardingNavigableMap_StandardNavigableKeySet_

#define RESTRICT_ComGoogleCommonCollectMaps 1
#define INCLUDE_ComGoogleCommonCollectMaps_NavigableKeySet 1
#include "com/google/common/collect/Maps.h"

@class ComGoogleCommonCollectForwardingNavigableMap;
@protocol JavaUtilNavigableMap;

/*!
 @brief A sensible implementation of <code>NavigableMap.navigableKeySet</code> in terms of the methods of
  this <code>NavigableMap</code>.In many cases, you may wish to override <code>ForwardingNavigableMap.navigableKeySet</code>
  to forward to this implementation or a subclass
  thereof.
 @since 12.0
 */
@interface ComGoogleCommonCollectForwardingNavigableMap_StandardNavigableKeySet : ComGoogleCommonCollectMaps_NavigableKeySet

#pragma mark Public

/*!
 @brief Constructor for use by subclasses.
 */
- (instancetype __nonnull)initWithComGoogleCommonCollectForwardingNavigableMap:(ComGoogleCommonCollectForwardingNavigableMap * __nonnull)outer$;

#pragma mark Package-Private

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaUtilNavigableMap:(id<JavaUtilNavigableMap> __nonnull)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectForwardingNavigableMap_StandardNavigableKeySet)

FOUNDATION_EXPORT void ComGoogleCommonCollectForwardingNavigableMap_StandardNavigableKeySet_initWithComGoogleCommonCollectForwardingNavigableMap_(ComGoogleCommonCollectForwardingNavigableMap_StandardNavigableKeySet *self, ComGoogleCommonCollectForwardingNavigableMap *outer$);

FOUNDATION_EXPORT ComGoogleCommonCollectForwardingNavigableMap_StandardNavigableKeySet *new_ComGoogleCommonCollectForwardingNavigableMap_StandardNavigableKeySet_initWithComGoogleCommonCollectForwardingNavigableMap_(ComGoogleCommonCollectForwardingNavigableMap *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectForwardingNavigableMap_StandardNavigableKeySet *create_ComGoogleCommonCollectForwardingNavigableMap_StandardNavigableKeySet_initWithComGoogleCommonCollectForwardingNavigableMap_(ComGoogleCommonCollectForwardingNavigableMap *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectForwardingNavigableMap_StandardNavigableKeySet)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCollectForwardingNavigableMap")
