//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/reflect/AbstractInvocationHandler.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonReflectAbstractInvocationHandler")
#ifdef RESTRICT_ComGoogleCommonReflectAbstractInvocationHandler
#define INCLUDE_ALL_ComGoogleCommonReflectAbstractInvocationHandler 0
#else
#define INCLUDE_ALL_ComGoogleCommonReflectAbstractInvocationHandler 1
#endif
#undef RESTRICT_ComGoogleCommonReflectAbstractInvocationHandler

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonReflectAbstractInvocationHandler_) && (INCLUDE_ALL_ComGoogleCommonReflectAbstractInvocationHandler || defined(INCLUDE_ComGoogleCommonReflectAbstractInvocationHandler))
#define ComGoogleCommonReflectAbstractInvocationHandler_

#define RESTRICT_JavaLangReflectInvocationHandler 1
#define INCLUDE_JavaLangReflectInvocationHandler 1
#include "java/lang/reflect/InvocationHandler.h"

@class IOSObjectArray;
@class JavaLangReflectMethod;

/*!
 @brief Abstract implementation of <code>InvocationHandler</code> that handles <code>Object.equals</code>, <code>Object.hashCode</code>
  and <code>Object.toString</code>.For example: 
 @code

  class Unsupported extends AbstractInvocationHandler {
    protected Object handleInvocation(Object proxy, Method method, Object[] args) {
      throw new UnsupportedOperationException();
    }  }
  CharSequence unsupported = Reflection.newProxy(CharSequence.class, new Unsupported()); 
  
@endcode
 @author Ben Yu
 @since 12.0
 */
@interface ComGoogleCommonReflectAbstractInvocationHandler : NSObject < JavaLangReflectInvocationHandler >

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief By default delegates to <code>Object.equals</code> so instances are only equal if they are
  identical.
 <code>proxy.equals(argument)</code> returns true if: 
 <ul>
    <li><code>proxy</code> and <code>argument</code> are of the same type
    <li>and this method returns true for the <code>InvocationHandler</code> of <code>argument</code>
  </ul>
  
 <p>Subclasses can override this method to provide custom equality.
 */
- (jboolean)isEqual:(id __nonnull)obj;

/*!
 @brief By default delegates to <code>Object.hashCode</code>.The dynamic proxies' <code>hashCode()</code> will
  delegate to this method.
 Subclasses can override this method to provide custom equality.
 */
- (NSUInteger)hash;

/*!
 @brief  
 <ul>
    <li><code>proxy.hashCode()</code> delegates to <code>AbstractInvocationHandler.hashCode</code>
    <li><code>proxy.toString()</code> delegates to <code>AbstractInvocationHandler.toString</code>
    <li><code>proxy.equals(argument)</code> returns true if:
        <ul>
          <li><code>proxy</code> and <code>argument</code> are of the same type
          <li>and <code>AbstractInvocationHandler.equals</code> returns true for the <code>InvocationHandler</code>
  of <code>argument</code>
        </ul>
    <li>other method calls are dispatched to <code>handleInvocation</code>.
 </ul>
 */
- (id)invokeWithId:(id __nonnull)proxy
withJavaLangReflectMethod:(JavaLangReflectMethod * __nonnull)method
 withNSObjectArray:(IOSObjectArray * __nullable)args;

/*!
 @brief By default delegates to <code>Object.toString</code>.The dynamic proxies' <code>toString()</code> will
  delegate to this method.
 Subclasses can override this method to provide custom string
  representation for the proxies.
 */
- (NSString *)description;

#pragma mark Protected

/*!
 @brief <code>invoke</code> delegates to this method upon any method invocation on the proxy instance,
  except <code>Object.equals</code>, <code>Object.hashCode</code> and <code>Object.toString</code>.The result
  will be returned as the proxied method's return value.
 <p>Unlike <code>invoke</code>, <code>args</code> will never be null. When the method has no parameter,
  an empty array is passed in.
 */
- (id)handleInvocationWithId:(id __nonnull)proxy
   withJavaLangReflectMethod:(JavaLangReflectMethod * __nonnull)method
           withNSObjectArray:(IOSObjectArray * __nonnull)args;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonReflectAbstractInvocationHandler)

FOUNDATION_EXPORT void ComGoogleCommonReflectAbstractInvocationHandler_init(ComGoogleCommonReflectAbstractInvocationHandler *self);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonReflectAbstractInvocationHandler)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonReflectAbstractInvocationHandler")
