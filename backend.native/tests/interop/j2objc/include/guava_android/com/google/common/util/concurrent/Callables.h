//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/util/concurrent/Callables.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonUtilConcurrentCallables")
#ifdef RESTRICT_ComGoogleCommonUtilConcurrentCallables
#define INCLUDE_ALL_ComGoogleCommonUtilConcurrentCallables 0
#else
#define INCLUDE_ALL_ComGoogleCommonUtilConcurrentCallables 1
#endif
#undef RESTRICT_ComGoogleCommonUtilConcurrentCallables

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonUtilConcurrentCallables_) && (INCLUDE_ALL_ComGoogleCommonUtilConcurrentCallables || defined(INCLUDE_ComGoogleCommonUtilConcurrentCallables))
#define ComGoogleCommonUtilConcurrentCallables_

@protocol ComGoogleCommonBaseSupplier;
@protocol ComGoogleCommonUtilConcurrentAsyncCallable;
@protocol ComGoogleCommonUtilConcurrentListeningExecutorService;
@protocol JavaLangRunnable;
@protocol JavaUtilConcurrentCallable;

/*!
 @brief Static utility methods pertaining to the <code>Callable</code> interface.
 @author Isaac Shum
 @since 1.0
 */
@interface ComGoogleCommonUtilConcurrentCallables : NSObject

#pragma mark Public

/*!
 @brief Creates an <code>AsyncCallable</code> from a <code>Callable</code>.
 <p>The <code>AsyncCallable</code> returns the <code>ListenableFuture</code> resulting from <code>ListeningExecutorService.submit(Callable)</code>
 .
 @since 20.0
 */
+ (id<ComGoogleCommonUtilConcurrentAsyncCallable>)asAsyncCallableWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable> __nonnull)callable
                                      withComGoogleCommonUtilConcurrentListeningExecutorService:(id<ComGoogleCommonUtilConcurrentListeningExecutorService> __nonnull)listeningExecutorService;

/*!
 @brief Creates a <code>Callable</code> which immediately returns a preset value each time it is called.
 */
+ (id<JavaUtilConcurrentCallable>)returningWithId:(id __nullable)value;

#pragma mark Package-Private

/*!
 @brief Wraps the given callable such that for the duration of <code>Callable.call</code> the thread that is
  running will have the given name.
 @param callable The callable to wrap
 @param nameSupplier The supplier of thread names, <code>get</code>  will be called once
       for each invocation of the wrapped callable.
 */
+ (id<JavaUtilConcurrentCallable>)threadRenamingWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable> __nonnull)callable
                                               withComGoogleCommonBaseSupplier:(id<ComGoogleCommonBaseSupplier> __nonnull)nameSupplier;

/*!
 @brief Wraps the given runnable such that for the duration of <code>Runnable.run</code> the thread that is
  running with have the given name.
 @param task The Runnable to wrap
 @param nameSupplier The supplier of thread names, <code>get</code>  will be called once
       for each invocation of the wrapped callable.
 */
+ (id<JavaLangRunnable>)threadRenamingWithJavaLangRunnable:(id<JavaLangRunnable> __nonnull)task
                           withComGoogleCommonBaseSupplier:(id<ComGoogleCommonBaseSupplier> __nonnull)nameSupplier;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentCallables)

FOUNDATION_EXPORT id<JavaUtilConcurrentCallable> ComGoogleCommonUtilConcurrentCallables_returningWithId_(id value);

FOUNDATION_EXPORT id<ComGoogleCommonUtilConcurrentAsyncCallable> ComGoogleCommonUtilConcurrentCallables_asAsyncCallableWithJavaUtilConcurrentCallable_withComGoogleCommonUtilConcurrentListeningExecutorService_(id<JavaUtilConcurrentCallable> callable, id<ComGoogleCommonUtilConcurrentListeningExecutorService> listeningExecutorService);

FOUNDATION_EXPORT id<JavaUtilConcurrentCallable> ComGoogleCommonUtilConcurrentCallables_threadRenamingWithJavaUtilConcurrentCallable_withComGoogleCommonBaseSupplier_(id<JavaUtilConcurrentCallable> callable, id<ComGoogleCommonBaseSupplier> nameSupplier);

FOUNDATION_EXPORT id<JavaLangRunnable> ComGoogleCommonUtilConcurrentCallables_threadRenamingWithJavaLangRunnable_withComGoogleCommonBaseSupplier_(id<JavaLangRunnable> task, id<ComGoogleCommonBaseSupplier> nameSupplier);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentCallables)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonUtilConcurrentCallables")
