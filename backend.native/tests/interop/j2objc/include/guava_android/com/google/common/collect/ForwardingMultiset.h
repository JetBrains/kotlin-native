//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/collect/ForwardingMultiset.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCollectForwardingMultiset")
#ifdef RESTRICT_ComGoogleCommonCollectForwardingMultiset
#define INCLUDE_ALL_ComGoogleCommonCollectForwardingMultiset 0
#else
#define INCLUDE_ALL_ComGoogleCommonCollectForwardingMultiset 1
#endif
#undef RESTRICT_ComGoogleCommonCollectForwardingMultiset

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCollectForwardingMultiset_) && (INCLUDE_ALL_ComGoogleCommonCollectForwardingMultiset || defined(INCLUDE_ComGoogleCommonCollectForwardingMultiset))
#define ComGoogleCommonCollectForwardingMultiset_

#define RESTRICT_ComGoogleCommonCollectForwardingCollection 1
#define INCLUDE_ComGoogleCommonCollectForwardingCollection 1
#include "com/google/common/collect/ForwardingCollection.h"

#define RESTRICT_ComGoogleCommonCollectMultiset 1
#define INCLUDE_ComGoogleCommonCollectMultiset 1
#include "com/google/common/collect/Multiset.h"

@protocol JavaUtilCollection;
@protocol JavaUtilIterator;
@protocol JavaUtilSet;

/*!
 @brief A multiset which forwards all its method calls to another multiset.Subclasses should override
  one or more methods to modify the behavior of the backing multiset as desired per the <a href="http://en.wikipedia.org/wiki/Decorator_pattern">
 decorator pattern</a>.
 <p><b>Warning:</b> The methods of <code>ForwardingMultiset</code> forward <b>indiscriminately</b> to
  the methods of the delegate. For example, overriding <code>add(Object, int)</code> alone <b>will
  not</b> change the behavior of <code>add(Object)</code>, which can lead to unexpected behavior. In
  this case, you should override <code>add(Object)</code> as well, either providing your own
  implementation, or delegating to the provided <code>standardAdd</code> method. 
 <p><b><code>default</code> method warning:</b> This class does <i>not</i> forward calls to <code>default</code>
  methods. Instead, it inherits their default implementations. When those implementations
  invoke methods, they invoke methods on the <code>ForwardingMultiset</code>.
  
 <p>The <code>standard</code> methods and any collection views they return are not guaranteed to be
  thread-safe, even when all of the methods that they depend on are thread-safe.
 @author Kevin Bourrillion
 @author Louis Wasserman
 @since 2.0
 */
@interface ComGoogleCommonCollectForwardingMultiset : ComGoogleCommonCollectForwardingCollection < ComGoogleCommonCollectMultiset >

#pragma mark Public

- (jint)addWithId:(id __nonnull)element
          withInt:(jint)occurrences;

- (jint)countWithId:(id __nonnull)element;

- (id<JavaUtilSet>)elementSet;

- (id<JavaUtilSet>)entrySet;

- (jboolean)isEqual:(id __nullable)object;

- (NSUInteger)hash;

- (jint)removeWithId:(id __nonnull)element
             withInt:(jint)occurrences;

- (jint)setCountWithId:(id __nonnull)element
               withInt:(jint)count;

- (jboolean)setCountWithId:(id __nonnull)element
                   withInt:(jint)oldCount
                   withInt:(jint)newCount;

#pragma mark Protected

/*!
 @brief Constructor for use by subclasses.
 */
- (instancetype __nonnull)init;

- (id<ComGoogleCommonCollectMultiset>)delegate;

/*!
 @brief A sensible definition of <code>add(Object)</code> in terms of <code>add(Object, int)</code>.If you
  override <code>add(Object, int)</code>, you may wish to override <code>add(Object)</code> to forward to
  this implementation.
 @since 7.0
 */
- (jboolean)standardAddWithId:(id __nonnull)element;

/*!
 @brief A sensible definition of <code>addAll(Collection)</code> in terms of <code>add(Object)</code> and 
 <code>add(Object, int)</code>.If you override either of these methods, you may wish to override 
 <code>addAll(Collection)</code> to forward to this implementation.
 @since 7.0
 */
- (jboolean)standardAddAllWithJavaUtilCollection:(id<JavaUtilCollection> __nonnull)elementsToAdd;

/*!
 @brief A sensible definition of <code>clear</code> in terms of the <code>iterator</code> method of <code>entrySet</code>
 .If you override <code>entrySet</code>, you may wish to override <code>clear</code> to
  forward to this implementation.
 @since 7.0
 */
- (void)standardClear;

/*!
 @brief A sensible definition of <code>contains</code> in terms of <code>count</code>.If you override <code>count</code>
 , you may wish to override <code>contains</code> to forward to this implementation.
 @since 7.0
 */
- (jboolean)standardContainsWithId:(id __nullable)object;

/*!
 @brief A sensible, albeit inefficient, definition of <code>count</code> in terms of <code>entrySet</code>.If
  you override <code>entrySet</code>, you may wish to override <code>count</code> to forward to this
  implementation.
 @since 7.0
 */
- (jint)standardCountWithId:(id __nullable)object;

/*!
 @brief A sensible, albeit inefficient, definition of <code>equals</code> in terms of <code>entrySet().size()</code>
  and <code>count</code>.If you override either of these methods, you may wish to override 
 <code>equals</code> to forward to this implementation.
 @since 7.0
 */
- (jboolean)standardEqualsWithId:(id __nullable)object;

/*!
 @brief A sensible definition of <code>hashCode</code> as <code>entrySet().hashCode()</code> .If you override 
 <code>entrySet</code>, you may wish to override <code>hashCode</code> to forward to this
  implementation.
 @since 7.0
 */
- (jint)standardHashCode;

/*!
 @brief A sensible definition of <code>iterator</code> in terms of <code>entrySet</code> and <code>remove(Object)</code>
 .If you override either of these methods, you may wish to override <code>iterator</code>
  to forward to this implementation.
 @since 7.0
 */
- (id<JavaUtilIterator>)standardIterator;

/*!
 @brief A sensible definition of <code>remove(Object)</code> in terms of <code>remove(Object, int)</code>.If
  you override <code>remove(Object, int)</code>, you may wish to override <code>remove(Object)</code> to
  forward to this implementation.
 @since 7.0
 */
- (jboolean)standardRemoveWithId:(id __nonnull)element;

/*!
 @brief A sensible definition of <code>removeAll</code> in terms of the <code>removeAll</code> method of <code>elementSet</code>
 .If you override <code>elementSet</code>, you may wish to override <code>removeAll</code>
  to forward to this implementation.
 @since 7.0
 */
- (jboolean)standardRemoveAllWithJavaUtilCollection:(id<JavaUtilCollection> __nonnull)elementsToRemove;

/*!
 @brief A sensible definition of <code>retainAll</code> in terms of the <code>retainAll</code> method of <code>elementSet</code>
 .If you override <code>elementSet</code>, you may wish to override <code>retainAll</code>
  to forward to this implementation.
 @since 7.0
 */
- (jboolean)standardRetainAllWithJavaUtilCollection:(id<JavaUtilCollection> __nonnull)elementsToRetain;

/*!
 @brief A sensible definition of <code>setCount(Object, int)</code> in terms of <code>count(Object)</code>,
  <code>add(Object, int)</code>, and <code>remove(Object, int)</code>.
 <code>entrySet()</code>. If you
  override any of these methods, you may wish to override <code>setCount(Object, int)</code> to
  forward to this implementation.
 @since 7.0
 */
- (jint)standardSetCountWithId:(id __nonnull)element
                       withInt:(jint)count;

/*!
 @brief A sensible definition of <code>setCount(Object, int, int)</code> in terms of <code>count(Object)</code>
  and <code>setCount(Object, int)</code>.If you override either of these methods, you may wish to override 
 <code>setCount(Object, int, int)</code> to forward to this implementation.
 @since 7.0
 */
- (jboolean)standardSetCountWithId:(id __nonnull)element
                           withInt:(jint)oldCount
                           withInt:(jint)newCount;

/*!
 @brief A sensible, albeit inefficient, definition of <code>size</code> in terms of <code>entrySet</code>.If
  you override <code>entrySet</code>, you may wish to override <code>size</code> to forward to this
  implementation.
 @since 7.0
 */
- (jint)standardSize;

/*!
 @brief A sensible definition of <code>toString</code> as <code>entrySet().toString()</code> .If you override 
 <code>entrySet</code>, you may wish to override <code>toString</code> to forward to this
  implementation.
 @since 7.0
 */
- (NSString *)standardToString;

#pragma mark Package-Private

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectForwardingMultiset)

FOUNDATION_EXPORT void ComGoogleCommonCollectForwardingMultiset_init(ComGoogleCommonCollectForwardingMultiset *self);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectForwardingMultiset)

#endif

#if !defined (ComGoogleCommonCollectForwardingMultiset_StandardElementSet_) && (INCLUDE_ALL_ComGoogleCommonCollectForwardingMultiset || defined(INCLUDE_ComGoogleCommonCollectForwardingMultiset_StandardElementSet))
#define ComGoogleCommonCollectForwardingMultiset_StandardElementSet_

#define RESTRICT_ComGoogleCommonCollectMultisets 1
#define INCLUDE_ComGoogleCommonCollectMultisets_ElementSet 1
#include "com/google/common/collect/Multisets.h"

@class ComGoogleCommonCollectForwardingMultiset;
@protocol ComGoogleCommonCollectMultiset;
@protocol JavaUtilIterator;

/*!
 @brief A sensible implementation of <code>Multiset.elementSet</code> in terms of the following methods: 
 <code>ForwardingMultiset.clear</code>, <code>ForwardingMultiset.contains</code>, <code>ForwardingMultiset.containsAll</code>
 , <code>ForwardingMultiset.count</code>, <code>ForwardingMultiset.isEmpty</code>
 , the <code>Set.size</code> and <code>Set.iterator</code> methods of <code>ForwardingMultiset.entrySet</code>
 , and <code>ForwardingMultiset.remove(Object, int)</code>.In many
  situations, you may wish to override <code>ForwardingMultiset.elementSet</code> to forward to this
  implementation or a subclass thereof.
 @since 10.0
 */
@interface ComGoogleCommonCollectForwardingMultiset_StandardElementSet : ComGoogleCommonCollectMultisets_ElementSet

#pragma mark Public

/*!
 @brief Constructor for use by subclasses.
 */
- (instancetype __nonnull)initWithComGoogleCommonCollectForwardingMultiset:(ComGoogleCommonCollectForwardingMultiset * __nonnull)outer$;

- (id<JavaUtilIterator>)iterator;

#pragma mark Package-Private

- (id<ComGoogleCommonCollectMultiset>)multiset;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectForwardingMultiset_StandardElementSet)

FOUNDATION_EXPORT void ComGoogleCommonCollectForwardingMultiset_StandardElementSet_initWithComGoogleCommonCollectForwardingMultiset_(ComGoogleCommonCollectForwardingMultiset_StandardElementSet *self, ComGoogleCommonCollectForwardingMultiset *outer$);

FOUNDATION_EXPORT ComGoogleCommonCollectForwardingMultiset_StandardElementSet *new_ComGoogleCommonCollectForwardingMultiset_StandardElementSet_initWithComGoogleCommonCollectForwardingMultiset_(ComGoogleCommonCollectForwardingMultiset *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectForwardingMultiset_StandardElementSet *create_ComGoogleCommonCollectForwardingMultiset_StandardElementSet_initWithComGoogleCommonCollectForwardingMultiset_(ComGoogleCommonCollectForwardingMultiset *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectForwardingMultiset_StandardElementSet)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCollectForwardingMultiset")
