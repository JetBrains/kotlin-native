//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/cache/LoadingCache.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCacheLoadingCache")
#ifdef RESTRICT_ComGoogleCommonCacheLoadingCache
#define INCLUDE_ALL_ComGoogleCommonCacheLoadingCache 0
#else
#define INCLUDE_ALL_ComGoogleCommonCacheLoadingCache 1
#endif
#undef RESTRICT_ComGoogleCommonCacheLoadingCache

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCacheLoadingCache_) && (INCLUDE_ALL_ComGoogleCommonCacheLoadingCache || defined(INCLUDE_ComGoogleCommonCacheLoadingCache))
#define ComGoogleCommonCacheLoadingCache_

#define RESTRICT_ComGoogleCommonCacheCache 1
#define INCLUDE_ComGoogleCommonCacheCache 1
#include "com/google/common/cache/Cache.h"

#define RESTRICT_ComGoogleCommonBaseFunction 1
#define INCLUDE_ComGoogleCommonBaseFunction 1
#include "com/google/common/base/Function.h"

@class ComGoogleCommonCollectImmutableMap;
@protocol JavaLangIterable;
@protocol JavaUtilConcurrentConcurrentMap;

/*!
 @brief A semi-persistent mapping from keys to values.Values are automatically loaded by the cache, and
  are stored in the cache until either evicted or manually invalidated.
 The common way to build
  instances is using <code>CacheBuilder</code>.
  
 <p>Implementations of this interface are expected to be thread-safe, and can be safely accessed
  by multiple concurrent threads. 
 <p>When evaluated as a <code>Function</code>, a cache yields the same result as invoking <code>getUnchecked</code>
 .
 @author Charles Fry
 @since 11.0
 */
@protocol ComGoogleCommonCacheLoadingCache < ComGoogleCommonCacheCache, ComGoogleCommonBaseFunction, JavaObject >

/*!
 @brief Returns the value associated with <code>key</code> in this cache, first loading that value if
  necessary.No observable state associated with this cache is modified until loading completes.
 <p>If another call to <code>get</code> or <code>getUnchecked</code> is currently loading the value for 
 <code>key</code>, simply waits for that thread to finish and returns its loaded value. Note that
  multiple threads can concurrently load values for distinct keys. 
 <p>Caches loaded by a <code>CacheLoader</code> will call <code>CacheLoader.load</code> to load new values
  into the cache. Newly loaded values are added to the cache using <code>Cache.asMap().putIfAbsent</code>
  after loading has completed; if another value was associated with 
 <code>key</code> while the new value was loading then a removal notification will be sent for the
  new value. 
 <p>If the cache loader associated with this cache is known not to throw checked exceptions,
  then prefer <code>getUnchecked</code> over this method.
 @throw ExecutionExceptionif a checked exception was thrown while loading the value. (<code>ExecutionException</code>
  is thrown <a href="https://github.com/google/guava/wiki/CachesExplained#interruption">
 even if
      computation was interrupted by an <code>InterruptedException</code></a>.)
 @throw UncheckedExecutionExceptionif an unchecked exception was thrown while loading the
      value
 @throw ExecutionErrorif an error was thrown while loading the value
 */
- (id)getWithId:(id __nonnull)key;

/*!
 @brief Returns the value associated with <code>key</code> in this cache, first loading that value if
  necessary.No observable state associated with this cache is modified until loading completes.
 Unlike <code>get</code>, this method does not throw a checked exception, and thus should only be
  used in situations where checked exceptions are not thrown by the cache loader. 
 <p>If another call to <code>get</code> or <code>getUnchecked</code> is currently loading the value for 
 <code>key</code>, simply waits for that thread to finish and returns its loaded value. Note that
  multiple threads can concurrently load values for distinct keys. 
 <p>Caches loaded by a <code>CacheLoader</code> will call <code>CacheLoader.load</code> to load new values
  into the cache. Newly loaded values are added to the cache using <code>Cache.asMap().putIfAbsent</code>
  after loading has completed; if another value was associated with 
 <code>key</code> while the new value was loading then a removal notification will be sent for the
  new value. 
 <p><b>Warning:</b> this method silently converts checked exceptions to unchecked exceptions,
  and should not be used with cache loaders which throw checked exceptions. In such cases use 
 <code>get</code> instead.
 @throw UncheckedExecutionExceptionif an exception was thrown while loading the value. (As
      explained in the last paragraph above, this should be an unchecked exception only.)
 @throw ExecutionErrorif an error was thrown while loading the value
 */
- (id)getUncheckedWithId:(id __nonnull)key;

/*!
 @brief Returns a map of the values associated with <code>keys</code>, creating or retrieving those values
  if necessary.The returned map contains entries that were already cached, combined with newly
  loaded entries; it will never contain null keys or values.
 <p>Caches loaded by a <code>CacheLoader</code> will issue a single request to <code>CacheLoader.loadAll</code>
  for all keys which are not already present in the cache. All entries
  returned by <code>CacheLoader.loadAll</code> will be stored in the cache, over-writing any
  previously cached values. This method will throw an exception if <code>CacheLoader.loadAll</code>
  returns <code>null</code>, returns a map containing null keys or values, or fails to return an entry
  for each requested key. 
 <p>Note that duplicate elements in <code>keys</code>, as determined by <code>Object.equals</code>, will
  be ignored.
 @throw ExecutionExceptionif a checked exception was thrown while loading the value. (<code>ExecutionException</code>
  is thrown <a href="https://github.com/google/guava/wiki/CachesExplained#interruption">
 even if
      computation was interrupted by an <code>InterruptedException</code></a>.)
 @throw UncheckedExecutionExceptionif an unchecked exception was thrown while loading the
      values
 @throw ExecutionErrorif an error was thrown while loading the values
 @since 11.0
 */
- (ComGoogleCommonCollectImmutableMap *)getAllWithJavaLangIterable:(id<JavaLangIterable> __nonnull)keys;

/*!
 @throw UncheckedExecutionExceptionif an exception was thrown while loading the value. (As
      described in the documentation for <code>getUnchecked</code>, <code>LoadingCache</code> should be
      used as a <code>Function</code> only with cache loaders that throw only unchecked exceptions.)
 */
- (id)applyWithId:(id __nonnull)key __attribute__((deprecated));

/*!
 @brief Loads a new value for key <code>key</code>, possibly asynchronously.While the new value is loading
  the previous value (if any) will continue to be returned by <code>get(key)</code> unless it is
  evicted.
 If the new value is loaded successfully it will replace the previous value in the
  cache; if an exception is thrown while refreshing the previous value will remain, <i>and the
  exception will be logged (using <code>java.util.logging.Logger</code>) and swallowed</i>.
  
 <p>Caches loaded by a <code>CacheLoader</code> will call <code>CacheLoader.reload</code> if the cache
  currently contains a value for <code>key</code>, and <code>CacheLoader.load</code> otherwise. Loading is
  asynchronous only if <code>CacheLoader.reload</code> was overridden with an asynchronous
  implementation. 
 <p>Returns without doing anything if another thread is currently loading the value for <code>key</code>
 . If the cache loader associated with this cache performs refresh asynchronously then this
  method may return before refresh completes.
 @since 11.0
 */
- (void)refreshWithId:(id __nonnull)key;

/*!
 @brief <p><b>Note that although the view <i>is</i> modifiable, no method on the returned map will ever
  cause entries to be automatically loaded.
 </b>
 */
- (id<JavaUtilConcurrentConcurrentMap>)asMap;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheLoadingCache)

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheLoadingCache)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCacheLoadingCache")
