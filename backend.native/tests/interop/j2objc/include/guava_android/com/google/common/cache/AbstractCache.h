//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/cache/AbstractCache.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCacheAbstractCache")
#ifdef RESTRICT_ComGoogleCommonCacheAbstractCache
#define INCLUDE_ALL_ComGoogleCommonCacheAbstractCache 0
#else
#define INCLUDE_ALL_ComGoogleCommonCacheAbstractCache 1
#endif
#undef RESTRICT_ComGoogleCommonCacheAbstractCache
#ifdef INCLUDE_ComGoogleCommonCacheAbstractCache_SimpleStatsCounter
#define INCLUDE_ComGoogleCommonCacheAbstractCache_StatsCounter 1
#endif

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCacheAbstractCache_) && (INCLUDE_ALL_ComGoogleCommonCacheAbstractCache || defined(INCLUDE_ComGoogleCommonCacheAbstractCache))
#define ComGoogleCommonCacheAbstractCache_

#define RESTRICT_ComGoogleCommonCacheCache 1
#define INCLUDE_ComGoogleCommonCacheCache 1
#include "com/google/common/cache/Cache.h"

@class ComGoogleCommonCacheCacheStats;
@class ComGoogleCommonCollectImmutableMap;
@protocol JavaLangIterable;
@protocol JavaUtilConcurrentCallable;
@protocol JavaUtilConcurrentConcurrentMap;
@protocol JavaUtilMap;

/*!
 @brief This class provides a skeletal implementation of the <code>Cache</code> interface to minimize the
  effort required to implement this interface.
 <p>To implement a cache, the programmer needs only to extend this class and provide an
  implementation for the <code>put</code> and <code>getIfPresent</code> methods. <code>getAllPresent</code> is
  implemented in terms of <code>getIfPresent</code>; <code>putAll</code> is implemented in terms of <code>put</code>
 , <code>invalidateAll(Iterable)</code> is implemented in terms of <code>invalidate</code>. The
  method <code>cleanUp</code> is a no-op. All other methods throw an <code>UnsupportedOperationException</code>
 .
 @author Charles Fry
 @since 10.0
 */
@interface ComGoogleCommonCacheAbstractCache : NSObject < ComGoogleCommonCacheCache >

#pragma mark Public

- (id<JavaUtilConcurrentConcurrentMap>)asMap;

- (void)cleanUp;

/*!
 @since 11.0
 */
- (id)getWithId:(id __nonnull)key
withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable> __nonnull)valueLoader;

/*!
 @brief <p>This implementation of <code>getAllPresent</code> lacks any insight into the internal cache data
  structure, and is thus forced to return the query keys instead of the cached keys.
 This is only
  possible with an unsafe cast which requires <code>keys</code> to actually be of type <code>K</code>.
 @since 11.0
 */
- (ComGoogleCommonCollectImmutableMap *)getAllPresentWithJavaLangIterable:(id<JavaLangIterable> __nonnull)keys;

- (void)invalidateWithId:(id __nonnull)key;

- (void)invalidateAll;

/*!
 @since 11.0
 */
- (void)invalidateAllWithJavaLangIterable:(id<JavaLangIterable> __nonnull)keys;

/*!
 @since 11.0
 */
- (void)putWithId:(id __nonnull)key
           withId:(id __nonnull)value;

/*!
 @since 12.0
 */
- (void)putAllWithJavaUtilMap:(id<JavaUtilMap> __nonnull)m;

- (jlong)size;

- (ComGoogleCommonCacheCacheStats *)stats;

#pragma mark Protected

/*!
 @brief Constructor for use by subclasses.
 */
- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheAbstractCache)

FOUNDATION_EXPORT void ComGoogleCommonCacheAbstractCache_init(ComGoogleCommonCacheAbstractCache *self);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheAbstractCache)

#endif

#if !defined (ComGoogleCommonCacheAbstractCache_StatsCounter_) && (INCLUDE_ALL_ComGoogleCommonCacheAbstractCache || defined(INCLUDE_ComGoogleCommonCacheAbstractCache_StatsCounter))
#define ComGoogleCommonCacheAbstractCache_StatsCounter_

@class ComGoogleCommonCacheCacheStats;

/*!
 @brief Accumulates statistics during the operation of a <code>Cache</code> for presentation by <code>Cache.stats</code>
 .This is solely intended for consumption by <code>Cache</code> implementors.
 @since 10.0
 */
@protocol ComGoogleCommonCacheAbstractCache_StatsCounter < JavaObject >

/*!
 @brief Records cache hits.This should be called when a cache request returns a cached value.
 @param count the number of hits to record
 @since 11.0
 */
- (void)recordHitsWithInt:(jint)count;

/*!
 @brief Records cache misses.This should be called when a cache request returns a value that was not
  found in the cache.
 This method should be called by the loading thread, as well as by threads
  blocking on the load. Multiple concurrent calls to <code>Cache</code> lookup methods with the same
  key on an absent value should result in a single call to either <code>recordLoadSuccess</code> or 
 <code>recordLoadException</code> and multiple calls to this method, despite all being served by
  the results of a single load operation.
 @param count the number of misses to record
 @since 11.0
 */
- (void)recordMissesWithInt:(jint)count;

/*!
 @brief Records the successful load of a new entry.This should be called when a cache request causes
  an entry to be loaded, and the loading completes successfully.
 In contrast to <code>recordMisses</code>
 , this method should only be called by the loading thread.
 @param loadTime the number of nanoseconds the cache spent computing or retrieving the new      value
 */
- (void)recordLoadSuccessWithLong:(jlong)loadTime;

/*!
 @brief Records the failed load of a new entry.This should be called when a cache request causes an
  entry to be loaded, but an exception is thrown while loading the entry.
 In contrast to <code>recordMisses</code>
 , this method should only be called by the loading thread.
 @param loadTime the number of nanoseconds the cache spent computing or retrieving the new      value prior to an exception being thrown
 */
- (void)recordLoadExceptionWithLong:(jlong)loadTime;

/*!
 @brief Records the eviction of an entry from the cache.This should only been called when an entry
  is evicted due to the cache's eviction strategy, and not as a result of manual invalidations
 .
 */
- (void)recordEviction;

/*!
 @brief Returns a snapshot of this counter's values.Note that this may be an inconsistent view, as
  it may be interleaved with update operations.
 */
- (ComGoogleCommonCacheCacheStats *)snapshot;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheAbstractCache_StatsCounter)

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheAbstractCache_StatsCounter)

#endif

#if !defined (ComGoogleCommonCacheAbstractCache_SimpleStatsCounter_) && (INCLUDE_ALL_ComGoogleCommonCacheAbstractCache || defined(INCLUDE_ComGoogleCommonCacheAbstractCache_SimpleStatsCounter))
#define ComGoogleCommonCacheAbstractCache_SimpleStatsCounter_

@class ComGoogleCommonCacheCacheStats;
@protocol ComGoogleCommonCacheAbstractCache_StatsCounter;

/*!
 @brief A thread-safe <code>StatsCounter</code> implementation for use by <code>Cache</code> implementors.
 @since 10.0
 */
@interface ComGoogleCommonCacheAbstractCache_SimpleStatsCounter : NSObject < ComGoogleCommonCacheAbstractCache_StatsCounter >

#pragma mark Public

/*!
 @brief Constructs an instance with all counts initialized to zero.
 */
- (instancetype __nonnull)init;

/*!
 @brief Increments all counters by the values in <code>other</code>.
 */
- (void)incrementByWithComGoogleCommonCacheAbstractCache_StatsCounter:(id<ComGoogleCommonCacheAbstractCache_StatsCounter> __nonnull)other;

- (void)recordEviction;

/*!
 @since 11.0
 */
- (void)recordHitsWithInt:(jint)count;

- (void)recordLoadExceptionWithLong:(jlong)loadTime;

- (void)recordLoadSuccessWithLong:(jlong)loadTime;

/*!
 @since 11.0
 */
- (void)recordMissesWithInt:(jint)count;

- (ComGoogleCommonCacheCacheStats *)snapshot;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheAbstractCache_SimpleStatsCounter)

FOUNDATION_EXPORT void ComGoogleCommonCacheAbstractCache_SimpleStatsCounter_init(ComGoogleCommonCacheAbstractCache_SimpleStatsCounter *self);

FOUNDATION_EXPORT ComGoogleCommonCacheAbstractCache_SimpleStatsCounter *new_ComGoogleCommonCacheAbstractCache_SimpleStatsCounter_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCacheAbstractCache_SimpleStatsCounter *create_ComGoogleCommonCacheAbstractCache_SimpleStatsCounter_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheAbstractCache_SimpleStatsCounter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCacheAbstractCache")
