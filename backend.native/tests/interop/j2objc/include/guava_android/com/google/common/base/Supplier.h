//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/base/Supplier.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonBaseSupplier")
#ifdef RESTRICT_ComGoogleCommonBaseSupplier
#define INCLUDE_ALL_ComGoogleCommonBaseSupplier 0
#else
#define INCLUDE_ALL_ComGoogleCommonBaseSupplier 1
#endif
#undef RESTRICT_ComGoogleCommonBaseSupplier

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonBaseSupplier_) && (INCLUDE_ALL_ComGoogleCommonBaseSupplier || defined(INCLUDE_ComGoogleCommonBaseSupplier))
#define ComGoogleCommonBaseSupplier_

/*!
 @brief A class that can supply objects of a single type; a pre-Java-8 version of <code>java.util.function.Supplier</code>
 .Semantically, this could be a factory,
  generator, builder, closure, or something else entirely.
 No guarantees are implied by this
  interface. 
 <p>The <code>Suppliers</code> class provides common suppliers and related utilities. 
 <p>See the Guava User Guide article on <a href="https://github.com/google/guava/wiki/FunctionalExplained">
 the use of functional types</a>.
  
 <h3>For Java 8+ users</h3>
  
 <p>This interface is now a legacy type. Use <code>java.util.function.Supplier</code> (or the
  appropriate primitive specialization such as <code>IntSupplier</code>) instead whenever possible.
  Otherwise, at least reduce <i>explicit</i> dependencies on this type by using lambda expressions
  or method references instead of classes, leaving your code easier to migrate in the future. 
 <p>To use an existing supplier instance (say, named <code>supplier</code>) in a context where the 
 <i>other type</i> of supplier is expected, use the method reference <code>supplier::get</code>. A
  future version of <code>com.google.common.base.Supplier</code> will be made to <i>extend</i> <code>java.util.function.Supplier</code>
 , making conversion code necessary only in one direction. At that
  time, this interface will be officially discouraged.
 @author Harry Heymann
 @since 2.0
 */
@protocol ComGoogleCommonBaseSupplier < JavaObject >

/*!
 @brief Retrieves an instance of the appropriate type.The returned object may or may not be a new
  instance, depending on the implementation.
 @return an instance of the appropriate type
 */
- (id)get;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBaseSupplier)

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBaseSupplier)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonBaseSupplier")
