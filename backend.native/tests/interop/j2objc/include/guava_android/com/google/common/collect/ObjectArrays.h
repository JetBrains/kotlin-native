//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/collect/ObjectArrays.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCollectObjectArrays")
#ifdef RESTRICT_ComGoogleCommonCollectObjectArrays
#define INCLUDE_ALL_ComGoogleCommonCollectObjectArrays 0
#else
#define INCLUDE_ALL_ComGoogleCommonCollectObjectArrays 1
#endif
#undef RESTRICT_ComGoogleCommonCollectObjectArrays

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCollectObjectArrays_) && (INCLUDE_ALL_ComGoogleCommonCollectObjectArrays || defined(INCLUDE_ComGoogleCommonCollectObjectArrays))
#define ComGoogleCommonCollectObjectArrays_

@class IOSClass;
@class IOSObjectArray;
@protocol JavaUtilCollection;

/*!
 @brief Static utility methods pertaining to object arrays.
 @author Kevin Bourrillion
 @since 2.0
 */
@interface ComGoogleCommonCollectObjectArrays : NSObject

#pragma mark Public

/*!
 @brief Returns a new array that prepends <code>element</code> to <code>array</code>.
 @param element the element to prepend to the front of <code>array</code>
 @param array the array of elements to append
 @return an array whose size is one larger than <code>array</code>, with <code>element</code> occupying
      the first position, and the elements of <code>array</code> occupying the remaining elements.
 */
+ (IOSObjectArray *)concatWithId:(id __nullable)element
               withNSObjectArray:(IOSObjectArray * __nonnull)array;

/*!
 @brief Returns a new array that appends <code>element</code> to <code>array</code>.
 @param array the array of elements to prepend
 @param element the element to append to the end
 @return an array whose size is one larger than <code>array</code>, with the same contents as <code>array</code>
 , plus <code>element</code> occupying the last position.
 */
+ (IOSObjectArray *)concatWithNSObjectArray:(IOSObjectArray * __nonnull)array
                                     withId:(id __nullable)element;

/*!
 @brief Returns a new array that contains the concatenated contents of two arrays.
 @param first the first array of elements to concatenate
 @param second the second array of elements to concatenate
 @param type the component type of the returned array
 */
+ (IOSObjectArray *)concatWithNSObjectArray:(IOSObjectArray * __nonnull)first
                          withNSObjectArray:(IOSObjectArray * __nonnull)second
                               withIOSClass:(IOSClass * __nonnull)type;

/*!
 @brief Returns a new array of the given length with the specified component type.
 @param type the component type
 @param length the length of the new array
 */
+ (IOSObjectArray *)newArrayWithIOSClass:(IOSClass * __nonnull)type
                                 withInt:(jint)length OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns a new array of the given length with the same type as a reference array.
 @param reference any array of the desired type
 @param length the length of the new array
 */
+ (IOSObjectArray *)newArrayWithNSObjectArray:(IOSObjectArray * __nonnull)reference
                                      withInt:(jint)length OBJC_METHOD_FAMILY_NONE;

#pragma mark Package-Private

+ (id)checkElementNotNullWithId:(id __nonnull)element
                        withInt:(jint)index;

+ (IOSObjectArray *)checkElementsNotNullWithNSObjectArray:(IOSObjectArray * __nonnull)array;

+ (IOSObjectArray *)checkElementsNotNullWithNSObjectArray:(IOSObjectArray * __nonnull)array
                                                  withInt:(jint)length;

/*!
 @brief Returns a copy of the specified subrange of the specified array that is literally an Object[],
  and not e.g.a <code>String[]</code>.
 */
+ (IOSObjectArray *)copyAsObjectArrayWithNSObjectArray:(IOSObjectArray * __nonnull)elements
                                               withInt:(jint)offset
                                               withInt:(jint)length OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Swaps <code>array[i]</code> with <code>array[j]</code>.
 */
+ (void)swapWithNSObjectArray:(IOSObjectArray * __nonnull)array
                      withInt:(jint)i
                      withInt:(jint)j;

/*!
 @brief Returns an array containing all of the elements in the specified collection.This method
  returns the elements in the order they are returned by the collection's iterator.
 The returned
  array is "safe" in that no references to it are maintained by the collection. The caller is
  thus free to modify the returned array. 
 <p>This method assumes that the collection size doesn't change while the method is running. 
 <p>TODO(kevinb): support concurrently modified collections?
 @param c the collection for which to return an array of elements
 */
+ (IOSObjectArray *)toArrayImplWithJavaUtilCollection:(id<JavaUtilCollection> __nonnull)c;

/*!
 @brief Returns an array containing all of the elements in the specified collection; the runtime type
  of the returned array is that of the specified array.If the collection fits in the specified
  array, it is returned therein.
 Otherwise, a new array is allocated with the runtime type of the
  specified array and the size of the specified collection. 
 <p>If the collection fits in the specified array with room to spare (i.e., the array has more
  elements than the collection), the element in the array immediately following the end of the
  collection is set to <code>null</code>. This is useful in determining the length of the collection 
 <i>only</i> if the caller knows that the collection does not contain any null elements. 
 <p>This method returns the elements in the order they are returned by the collection's
  iterator. 
 <p>TODO(kevinb): support concurrently modified collections?
 @param c the collection for which to return an array of elements
 @param array the array in which to place the collection elements
 @throw ArrayStoreExceptionif the runtime type of the specified array is not a supertype of
      the runtime type of every element in the specified collection
 */
+ (IOSObjectArray *)toArrayImplWithJavaUtilCollection:(id<JavaUtilCollection> __nonnull)c
                                    withNSObjectArray:(IOSObjectArray * __nonnull)array;

/*!
 @brief Implementation of <code>Collection.toArray(Object[])</code> for collections backed by an object
  array.the runtime type of the returned array is that of the specified array.
 If the collection
  fits in the specified array, it is returned therein. Otherwise, a new array is allocated with
  the runtime type of the specified array and the size of the specified collection. 
 <p>If the collection fits in the specified array with room to spare (i.e., the array has more
  elements than the collection), the element in the array immediately following the end of the
  collection is set to <code>null</code>. This is useful in determining the length of the collection 
 <i>only</i> if the caller knows that the collection does not contain any null elements.
 */
+ (IOSObjectArray *)toArrayImplWithNSObjectArray:(IOSObjectArray * __nonnull)src
                                         withInt:(jint)offset
                                         withInt:(jint)len
                               withNSObjectArray:(IOSObjectArray * __nonnull)dst;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectObjectArrays)

FOUNDATION_EXPORT IOSObjectArray *ComGoogleCommonCollectObjectArrays_newArrayWithIOSClass_withInt_(IOSClass *type, jint length);

FOUNDATION_EXPORT IOSObjectArray *ComGoogleCommonCollectObjectArrays_newArrayWithNSObjectArray_withInt_(IOSObjectArray *reference, jint length);

FOUNDATION_EXPORT IOSObjectArray *ComGoogleCommonCollectObjectArrays_concatWithNSObjectArray_withNSObjectArray_withIOSClass_(IOSObjectArray *first, IOSObjectArray *second, IOSClass *type);

FOUNDATION_EXPORT IOSObjectArray *ComGoogleCommonCollectObjectArrays_concatWithId_withNSObjectArray_(id element, IOSObjectArray *array);

FOUNDATION_EXPORT IOSObjectArray *ComGoogleCommonCollectObjectArrays_concatWithNSObjectArray_withId_(IOSObjectArray *array, id element);

FOUNDATION_EXPORT IOSObjectArray *ComGoogleCommonCollectObjectArrays_toArrayImplWithJavaUtilCollection_withNSObjectArray_(id<JavaUtilCollection> c, IOSObjectArray *array);

FOUNDATION_EXPORT IOSObjectArray *ComGoogleCommonCollectObjectArrays_toArrayImplWithNSObjectArray_withInt_withInt_withNSObjectArray_(IOSObjectArray *src, jint offset, jint len, IOSObjectArray *dst);

FOUNDATION_EXPORT IOSObjectArray *ComGoogleCommonCollectObjectArrays_toArrayImplWithJavaUtilCollection_(id<JavaUtilCollection> c);

FOUNDATION_EXPORT IOSObjectArray *ComGoogleCommonCollectObjectArrays_copyAsObjectArrayWithNSObjectArray_withInt_withInt_(IOSObjectArray *elements, jint offset, jint length);

FOUNDATION_EXPORT void ComGoogleCommonCollectObjectArrays_swapWithNSObjectArray_withInt_withInt_(IOSObjectArray *array, jint i, jint j);

FOUNDATION_EXPORT IOSObjectArray *ComGoogleCommonCollectObjectArrays_checkElementsNotNullWithNSObjectArray_(IOSObjectArray *array);

FOUNDATION_EXPORT IOSObjectArray *ComGoogleCommonCollectObjectArrays_checkElementsNotNullWithNSObjectArray_withInt_(IOSObjectArray *array, jint length);

FOUNDATION_EXPORT id ComGoogleCommonCollectObjectArrays_checkElementNotNullWithId_withInt_(id element, jint index);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectObjectArrays)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCollectObjectArrays")
