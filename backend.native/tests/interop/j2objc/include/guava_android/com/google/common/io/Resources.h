//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/io/Resources.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonIoResources")
#ifdef RESTRICT_ComGoogleCommonIoResources
#define INCLUDE_ALL_ComGoogleCommonIoResources 0
#else
#define INCLUDE_ALL_ComGoogleCommonIoResources 1
#endif
#undef RESTRICT_ComGoogleCommonIoResources

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonIoResources_) && (INCLUDE_ALL_ComGoogleCommonIoResources || defined(INCLUDE_ComGoogleCommonIoResources))
#define ComGoogleCommonIoResources_

@class ComGoogleCommonIoByteSource;
@class ComGoogleCommonIoCharSource;
@class IOSByteArray;
@class IOSClass;
@class JavaIoOutputStream;
@class JavaNetURL;
@class JavaNioCharsetCharset;
@protocol ComGoogleCommonIoLineProcessor;
@protocol JavaUtilList;

/*!
 @brief Provides utility methods for working with resources in the classpath.Note that even though these
  methods use <code>URL</code> parameters, they are usually not appropriate for HTTP or other
  non-classpath resources.
 <p>All method parameters must be non-null unless documented otherwise.
 @author Chris Nokleberg
 @author Ben Yu
 @author Colin Decker
 @since 1.0
 */
@interface ComGoogleCommonIoResources : NSObject

#pragma mark Public

/*!
 @brief Returns a <code>ByteSource</code> that reads from the given URL.
 @since 14.0
 */
+ (ComGoogleCommonIoByteSource *)asByteSourceWithJavaNetURL:(JavaNetURL * __nonnull)url;

/*!
 @brief Returns a <code>CharSource</code> that reads from the given URL using the given character set.
 @since 14.0
 */
+ (ComGoogleCommonIoCharSource *)asCharSourceWithJavaNetURL:(JavaNetURL * __nonnull)url
                                  withJavaNioCharsetCharset:(JavaNioCharsetCharset * __nonnull)charset;

/*!
 @brief Copies all bytes from a URL to an output stream.
 @param from the URL to read from
 @param to the output stream
 @throw IOExceptionif an I/O error occurs
 */
+ (void)copy__WithJavaNetURL:(JavaNetURL * __nonnull)from
      withJavaIoOutputStream:(JavaIoOutputStream * __nonnull)to OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Given a <code>resourceName</code> that is relative to <code>contextClass</code>, returns a <code>URL</code>
  pointing to the named resource.
 @throw IllegalArgumentExceptionif the resource is not found
 */
+ (JavaNetURL *)getResourceWithIOSClass:(IOSClass * __nonnull)contextClass
                           withNSString:(NSString * __nonnull)resourceName;

/*!
 @brief Returns a <code>URL</code> pointing to <code>resourceName</code> if the resource is found using the 
 context class loader.In simple environments, the
  context class loader will find resources from the class path.
 In environments where different
  threads can have different class loaders, for example app servers, the context class loader
  will typically have been set to an appropriate loader for the current thread. 
 <p>In the unusual case where the context class loader is null, the class loader that loaded
  this class (<code>Resources</code>) will be used instead.
 @throw IllegalArgumentExceptionif the resource is not found
 */
+ (JavaNetURL *)getResourceWithNSString:(NSString * __nonnull)resourceName;

/*!
 @brief Reads all of the lines from a URL.The lines do not include line-termination characters, but do
  include other leading and trailing whitespace.
 <p>This method returns a mutable <code>List</code>. For an <code>ImmutableList</code>, use <code>Resources.asCharSource(url, charset).readLines()</code>
 .
 @param url the URL to read from
 @param charset the charset used to decode the input stream; see <code>Charsets</code>  for helpful
       predefined constants
 @return a mutable <code>List</code> containing all the lines
 @throw IOExceptionif an I/O error occurs
 */
+ (id<JavaUtilList>)readLinesWithJavaNetURL:(JavaNetURL * __nonnull)url
                  withJavaNioCharsetCharset:(JavaNioCharsetCharset * __nonnull)charset;

/*!
 @brief Streams lines from a URL, stopping when our callback returns false, or we have read all of the
  lines.
 @param url the URL to read from
 @param charset the charset used to decode the input stream; see <code>Charsets</code>  for helpful
       predefined constants
 @param callback the LineProcessor to use to handle the lines
 @return the output of processing the lines
 @throw IOExceptionif an I/O error occurs
 */
+ (id)readLinesWithJavaNetURL:(JavaNetURL * __nonnull)url
    withJavaNioCharsetCharset:(JavaNioCharsetCharset * __nonnull)charset
withComGoogleCommonIoLineProcessor:(id<ComGoogleCommonIoLineProcessor> __nonnull)callback;

/*!
 @brief Reads all bytes from a URL into a byte array.
 @param url the URL to read from
 @return a byte array containing all the bytes from the URL
 @throw IOExceptionif an I/O error occurs
 */
+ (IOSByteArray *)toByteArrayWithJavaNetURL:(JavaNetURL * __nonnull)url;

/*!
 @brief Reads all characters from a URL into a <code>String</code>, using the given character set.
 @param url the URL to read from
 @param charset the charset used to decode the input stream; see <code>Charsets</code>  for helpful
       predefined constants
 @return a string containing all the characters from the URL
 @throw IOExceptionif an I/O error occurs.
 */
+ (NSString *)toStringWithJavaNetURL:(JavaNetURL * __nonnull)url
           withJavaNioCharsetCharset:(JavaNioCharsetCharset * __nonnull)charset;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonIoResources)

FOUNDATION_EXPORT ComGoogleCommonIoByteSource *ComGoogleCommonIoResources_asByteSourceWithJavaNetURL_(JavaNetURL *url);

FOUNDATION_EXPORT ComGoogleCommonIoCharSource *ComGoogleCommonIoResources_asCharSourceWithJavaNetURL_withJavaNioCharsetCharset_(JavaNetURL *url, JavaNioCharsetCharset *charset);

FOUNDATION_EXPORT IOSByteArray *ComGoogleCommonIoResources_toByteArrayWithJavaNetURL_(JavaNetURL *url);

FOUNDATION_EXPORT NSString *ComGoogleCommonIoResources_toStringWithJavaNetURL_withJavaNioCharsetCharset_(JavaNetURL *url, JavaNioCharsetCharset *charset);

FOUNDATION_EXPORT id ComGoogleCommonIoResources_readLinesWithJavaNetURL_withJavaNioCharsetCharset_withComGoogleCommonIoLineProcessor_(JavaNetURL *url, JavaNioCharsetCharset *charset, id<ComGoogleCommonIoLineProcessor> callback);

FOUNDATION_EXPORT id<JavaUtilList> ComGoogleCommonIoResources_readLinesWithJavaNetURL_withJavaNioCharsetCharset_(JavaNetURL *url, JavaNioCharsetCharset *charset);

FOUNDATION_EXPORT void ComGoogleCommonIoResources_copy__WithJavaNetURL_withJavaIoOutputStream_(JavaNetURL *from, JavaIoOutputStream *to);

FOUNDATION_EXPORT JavaNetURL *ComGoogleCommonIoResources_getResourceWithNSString_(NSString *resourceName);

FOUNDATION_EXPORT JavaNetURL *ComGoogleCommonIoResources_getResourceWithIOSClass_withNSString_(IOSClass *contextClass, NSString *resourceName);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonIoResources)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonIoResources")
