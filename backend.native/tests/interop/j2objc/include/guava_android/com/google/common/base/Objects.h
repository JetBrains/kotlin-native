//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/base/Objects.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonBaseObjects")
#ifdef RESTRICT_ComGoogleCommonBaseObjects
#define INCLUDE_ALL_ComGoogleCommonBaseObjects 0
#else
#define INCLUDE_ALL_ComGoogleCommonBaseObjects 1
#endif
#undef RESTRICT_ComGoogleCommonBaseObjects

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonBaseObjects_) && (INCLUDE_ALL_ComGoogleCommonBaseObjects || defined(INCLUDE_ComGoogleCommonBaseObjects))
#define ComGoogleCommonBaseObjects_

#define RESTRICT_ComGoogleCommonBaseExtraObjectsMethodsForWeb 1
#define INCLUDE_ComGoogleCommonBaseExtraObjectsMethodsForWeb 1
#include "com/google/common/base/ExtraObjectsMethodsForWeb.h"

@class IOSObjectArray;

/*!
 @brief Helper functions that can operate on any <code>Object</code>.
 <p>See the Guava User Guide on <a href="https://github.com/google/guava/wiki/CommonObjectUtilitiesExplained">
 writing <code>Object</code>
  methods with <code>Objects</code></a>.
 @author Laurence Gonsalves
 @since 2.0
 */
@interface ComGoogleCommonBaseObjects : ComGoogleCommonBaseExtraObjectsMethodsForWeb

#pragma mark Public

/*!
 @brief Determines whether two possibly-null objects are equal.Returns:
  
 <ul>
    <li><code>true</code> if <code>a</code> and <code>b</code> are both null.
 <li><code>true</code> if <code>a</code> and <code>b</code> are both non-null and they are equal according to
        <code>Object.equals(Object)</code>.
    <li><code>false</code> in all other situations. 
 </ul>
  
 <p>This assumes that any non-null objects passed to this function conform to the <code>equals()</code>
  contract. 
 <p><b>Note for Java 7 and later:</b> This method should be treated as deprecated; use <code>java.util.Objects.equals</code>
  instead.
 */
+ (jboolean)equalWithId:(id __nullable)a
                 withId:(id __nullable)b;

/*!
 @brief Generates a hash code for multiple values.The hash code is generated by calling <code>Arrays.hashCode(Object[])</code>
 .
 Note that array arguments to this method, with the exception of a
  single Object array, do not get any special handling; their hash codes are based on identity
  and not contents. 
 <p>This is useful for implementing <code>Object.hashCode()</code>. For example, in an object that
  has three properties, <code>x</code>, <code>y</code>, and <code>z</code>, one could write: 
 @code
 public int hashCode() {
    return Objects.hashCode(getX(), getY(), getZ());
  } 
 
@endcode
  
 <p><b>Warning:</b> When a single object is supplied, the returned hash code does not equal the
  hash code of that object. 
 <p><b>Note for Java 7 and later:</b> This method should be treated as deprecated; use <code>java.util.Objects.hash</code>
  instead.
 */
+ (jint)hashCodeWithNSObjectArray:(IOSObjectArray * __nullable)objects;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initPackagePrivate NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBaseObjects)

FOUNDATION_EXPORT jboolean ComGoogleCommonBaseObjects_equalWithId_withId_(id a, id b);

FOUNDATION_EXPORT jint ComGoogleCommonBaseObjects_hashCodeWithNSObjectArray_(IOSObjectArray *objects);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBaseObjects)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonBaseObjects")
