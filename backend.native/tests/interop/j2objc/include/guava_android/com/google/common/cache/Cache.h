//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/cache/Cache.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCacheCache")
#ifdef RESTRICT_ComGoogleCommonCacheCache
#define INCLUDE_ALL_ComGoogleCommonCacheCache 0
#else
#define INCLUDE_ALL_ComGoogleCommonCacheCache 1
#endif
#undef RESTRICT_ComGoogleCommonCacheCache

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCacheCache_) && (INCLUDE_ALL_ComGoogleCommonCacheCache || defined(INCLUDE_ComGoogleCommonCacheCache))
#define ComGoogleCommonCacheCache_

@class ComGoogleCommonCacheCacheStats;
@class ComGoogleCommonCollectImmutableMap;
@protocol JavaLangIterable;
@protocol JavaUtilConcurrentCallable;
@protocol JavaUtilConcurrentConcurrentMap;
@protocol JavaUtilMap;

/*!
 @brief A semi-persistent mapping from keys to values.Cache entries are manually added using <code>get(Object, Callable)</code>
  or <code>put(Object, Object)</code>, and are stored in the cache until either
  evicted or manually invalidated.
 The common way to build instances is using <code>CacheBuilder</code>.
  
 <p>Implementations of this interface are expected to be thread-safe, and can be safely accessed
  by multiple concurrent threads.
 @author Charles Fry
 @since 10.0
 */
@protocol ComGoogleCommonCacheCache < JavaObject >

/*!
 @brief Returns the value associated with <code>key</code> in this cache, or <code>null</code> if there is no
  cached value for <code>key</code>.
 @since 11.0
 */
- (id __nullable)getIfPresentWithId:(id __nonnull)key;

/*!
 @brief Returns the value associated with <code>key</code> in this cache, obtaining that value from <code>loader</code>
  if necessary.The method improves upon the conventional "if cached, return; otherwise
  create, cache and return" pattern.
 For further improvements, use <code>LoadingCache</code> and its 
 <code>get(K)</code> method instead of this one. 
 <p>Among the improvements that this method and <code>LoadingCache.get(K)</code> both provide are: 
 <ul>
    <li>awaiting the result of a pending load rather than
        starting a redundant one   
 <li>eliminating the error-prone caching boilerplate
    <li>tracking load statistics
  </ul>
  
 <p>Among the further improvements that <code>LoadingCache</code> can provide but this method cannot: 
 <ul>
    <li>consolidation of the loader logic to a single
        authoritative location
    <li>refreshing of entries, including automated refreshing
    <li>bulk loading requests, including bulk loading implementations
  </ul>
  
 <p><b>Warning:</b> For any given key, every <code>loader</code> used with it should compute the same
  value. Otherwise, a call that passes one <code>loader</code> may return the result of another call
  with a differently behaving <code>loader</code>. For example, a call that requests a short timeout
  for an RPC may wait for a similar call that requests a long timeout, or a call by an
  unprivileged user may return a resource accessible only to a privileged user making a similar
  call. To prevent this problem, create a key object that includes all values that affect the
  result of the query. Or use <code>LoadingCache.get(K)</code>, which lacks the ability to refer to
  state other than that in the key. 
 <p><b>Warning:</b> as with <code>CacheLoader.load</code>, <code>loader</code> <b>must not</b> return 
 <code>null</code>; it may either return a non-null value or throw an exception. 
 <p>No observable state associated with this cache is modified until loading completes.
 @throw ExecutionExceptionif a checked exception was thrown while loading the value
 @throw UncheckedExecutionExceptionif an unchecked exception was thrown while loading the
      value
 @throw ExecutionErrorif an error was thrown while loading the value
 @since 11.0
 */
- (id)getWithId:(id __nonnull)key
withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable> __nonnull)loader;

/*!
 @brief Returns a map of the values associated with <code>keys</code> in this cache.The returned map will
  only contain entries which are already present in the cache.
 @since 11.0
 */
- (ComGoogleCommonCollectImmutableMap *)getAllPresentWithJavaLangIterable:(id<JavaLangIterable> __nonnull)keys;

/*!
 @brief Associates <code>value</code> with <code>key</code> in this cache.If the cache previously contained a
  value associated with <code>key</code>, the old value is replaced by <code>value</code>.
 <p>Prefer <code>get(Object, Callable)</code> when using the conventional "if cached, return;
  otherwise create, cache and return" pattern.
 @since 11.0
 */
- (void)putWithId:(id __nonnull)key
           withId:(id __nonnull)value;

/*!
 @brief Copies all of the mappings from the specified map to the cache.The effect of this call is
  equivalent to that of calling <code>put(k, v)</code> on this map once for each mapping from key 
 <code>k</code> to value <code>v</code> in the specified map.
 The behavior of this operation is undefined
  if the specified map is modified while the operation is in progress.
 @since 12.0
 */
- (void)putAllWithJavaUtilMap:(id<JavaUtilMap> __nonnull)m;

/*!
 @brief Discards any cached value for key <code>key</code>.
 */
- (void)invalidateWithId:(id __nonnull)key;

/*!
 @brief Discards any cached values for keys <code>keys</code>.
 @since 11.0
 */
- (void)invalidateAllWithJavaLangIterable:(id<JavaLangIterable> __nonnull)keys;

/*!
 @brief Discards all entries in the cache.
 */
- (void)invalidateAll;

/*!
 @brief Returns the approximate number of entries in this cache.
 */
- (jlong)size;

/*!
 @brief Returns a current snapshot of this cache's cumulative statistics, or a set of default values if
  the cache is not recording statistics.All statistics begin at zero and never decrease over the
  lifetime of the cache.
 <p><b>Warning:</b> this cache may not be recording statistical data. For example, a cache
  created using <code>CacheBuilder</code> only does so if the <code>CacheBuilder.recordStats</code> method
  was called. If statistics are not being recorded, a <code>CacheStats</code> instance with zero for
  all values is returned.
 */
- (ComGoogleCommonCacheCacheStats *)stats;

/*!
 @brief Returns a view of the entries stored in this cache as a thread-safe map.Modifications made to
  the map directly affect the cache.
 <p>Iterators from the returned map are at least <i>weakly consistent</i>: they are safe for
  concurrent use, but if the cache is modified (including by eviction) after the iterator is
  created, it is undefined which of the changes (if any) will be reflected in that iterator. 
 <p><b>Warning to users of Java 8+:</b> do not call any of the new <i>default methods</i> that
  have been newly added to <code>ConcurrentMap</code>! These are marked with "Since: 1.8" in the 
 <code>ConcurrentMap</code> documentation. They will not function correctly and it is impossible for
  Guava to fix them until Guava is ready to <i>require</i> Java 8 for all users.
 */
- (id<JavaUtilConcurrentConcurrentMap>)asMap;

/*!
 @brief Performs any pending maintenance operations needed by the cache.Exactly which activities are
  performed -- if any -- is implementation-dependent.
 */
- (void)cleanUp;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCacheCache)

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCacheCache)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCacheCache")
