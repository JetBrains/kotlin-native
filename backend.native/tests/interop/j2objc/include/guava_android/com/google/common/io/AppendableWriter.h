//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/io/AppendableWriter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonIoAppendableWriter")
#ifdef RESTRICT_ComGoogleCommonIoAppendableWriter
#define INCLUDE_ALL_ComGoogleCommonIoAppendableWriter 0
#else
#define INCLUDE_ALL_ComGoogleCommonIoAppendableWriter 1
#endif
#undef RESTRICT_ComGoogleCommonIoAppendableWriter

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonIoAppendableWriter_) && (INCLUDE_ALL_ComGoogleCommonIoAppendableWriter || defined(INCLUDE_ComGoogleCommonIoAppendableWriter))
#define ComGoogleCommonIoAppendableWriter_

#define RESTRICT_JavaIoWriter 1
#define INCLUDE_JavaIoWriter 1
#include "java/io/Writer.h"

@class IOSCharArray;
@protocol JavaLangAppendable;
@protocol JavaLangCharSequence;

/*!
 @brief Writer that places all output on an <code>Appendable</code> target.If the target is <code>Flushable</code>
  or <code>Closeable</code>, flush()es and close()s will also be delegated to the target.
 @author Alan Green
 @author Sebastian Kanthak
 @since 1.0
 */
@interface ComGoogleCommonIoAppendableWriter : JavaIoWriter

#pragma mark Public

- (JavaIoWriter *)appendWithChar:(jchar)c;

- (JavaIoWriter *)appendWithJavaLangCharSequence:(id<JavaLangCharSequence> __nullable)charSeq;

- (JavaIoWriter *)appendWithJavaLangCharSequence:(id<JavaLangCharSequence> __nullable)charSeq
                                         withInt:(jint)start
                                         withInt:(jint)end;

- (void)close;

- (void)flush;

- (void)writeWithCharArray:(IOSCharArray * __nonnull)cbuf
                   withInt:(jint)off
                   withInt:(jint)len;

- (void)writeWithInt:(jint)c;

- (void)writeWithNSString:(NSString * __nullable)str;

- (void)writeWithNSString:(NSString * __nullable)str
                  withInt:(jint)off
                  withInt:(jint)len;

#pragma mark Package-Private

/*!
 @brief Creates a new writer that appends everything it writes to <code>target</code>.
 @param target target to which to append output
 */
- (instancetype __nonnull)initPackagePrivateWithJavaLangAppendable:(id<JavaLangAppendable> __nonnull)target;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithId:(id __nonnull)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonIoAppendableWriter)

FOUNDATION_EXPORT void ComGoogleCommonIoAppendableWriter_initPackagePrivateWithJavaLangAppendable_(ComGoogleCommonIoAppendableWriter *self, id<JavaLangAppendable> target);

FOUNDATION_EXPORT ComGoogleCommonIoAppendableWriter *new_ComGoogleCommonIoAppendableWriter_initPackagePrivateWithJavaLangAppendable_(id<JavaLangAppendable> target) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonIoAppendableWriter *create_ComGoogleCommonIoAppendableWriter_initPackagePrivateWithJavaLangAppendable_(id<JavaLangAppendable> target);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonIoAppendableWriter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonIoAppendableWriter")
