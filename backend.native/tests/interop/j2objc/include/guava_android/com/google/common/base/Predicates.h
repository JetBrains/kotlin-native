//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/base/Predicates.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonBasePredicates")
#ifdef RESTRICT_ComGoogleCommonBasePredicates
#define INCLUDE_ALL_ComGoogleCommonBasePredicates 0
#else
#define INCLUDE_ALL_ComGoogleCommonBasePredicates 1
#endif
#undef RESTRICT_ComGoogleCommonBasePredicates

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonBasePredicates_) && (INCLUDE_ALL_ComGoogleCommonBasePredicates || defined(INCLUDE_ComGoogleCommonBasePredicates))
#define ComGoogleCommonBasePredicates_

@class IOSClass;
@class IOSObjectArray;
@class JavaUtilRegexPattern;
@protocol ComGoogleCommonBaseFunction;
@protocol ComGoogleCommonBasePredicate;
@protocol JavaLangIterable;
@protocol JavaUtilCollection;
@protocol JavaUtilList;

/*!
 @brief Static utility methods pertaining to <code>Predicate</code> instances.
 <p>All methods return serializable predicates as long as they're given serializable parameters. 
 <p>See the Guava User Guide article on <a href="https://github.com/google/guava/wiki/FunctionalExplained">
 the use of <code>Predicate</code></a>.
 @author Kevin Bourrillion
 @since 2.0
 */
@interface ComGoogleCommonBasePredicates : NSObject

#pragma mark Public

/*!
 @brief Returns a predicate that always evaluates to <code>false</code>.
 */
+ (id<ComGoogleCommonBasePredicate>)alwaysFalse;

/*!
 @brief Returns a predicate that always evaluates to <code>true</code>.
 */
+ (id<ComGoogleCommonBasePredicate>)alwaysTrue;

/*!
 @brief Returns a predicate that evaluates to <code>true</code> if each of its components evaluates to 
 <code>true</code>.The components are evaluated in order, and evaluation will be "short-circuited"
  as soon as a false predicate is found.
 It defensively copies the iterable passed in, so future
  changes to it won't alter the behavior of this predicate. If <code>components</code> is empty, the
  returned predicate will always evaluate to <code>true</code>.
 */
+ (id<ComGoogleCommonBasePredicate>)and__WithJavaLangIterable:(id<JavaLangIterable> __nonnull)components;

/*!
 @brief Returns a predicate that evaluates to <code>true</code> if each of its components evaluates to 
 <code>true</code>.The components are evaluated in order, and evaluation will be "short-circuited"
  as soon as a false predicate is found.
 It defensively copies the array passed in, so future
  changes to it won't alter the behavior of this predicate. If <code>components</code> is empty, the
  returned predicate will always evaluate to <code>true</code>.
 */
+ (id<ComGoogleCommonBasePredicate>)and__WithComGoogleCommonBasePredicateArray:(IOSObjectArray * __nonnull)components;

/*!
 @brief Returns a predicate that evaluates to <code>true</code> if both of its components evaluate to <code>true</code>
 .The components are evaluated in order, and evaluation will be "short-circuited" as soon
  as a false predicate is found.
 */
+ (id<ComGoogleCommonBasePredicate>)and__WithComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate> __nonnull)first
                                         withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate> __nonnull)second;

/*!
 @brief Returns the composition of a function and a predicate.For every <code>x</code>, the generated
  predicate returns <code>predicate(function(x))</code>.
 @return the composition of the provided function and predicate
 */
+ (id<ComGoogleCommonBasePredicate>)composeWithComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate> __nonnull)predicate
                                            withComGoogleCommonBaseFunction:(id<ComGoogleCommonBaseFunction> __nonnull)function;

/*!
 @brief Returns a predicate that evaluates to <code>true</code> if the <code>CharSequence</code> being tested
  contains any match for the given regular expression pattern.The test used is equivalent to 
 <code>pattern.matcher(arg).find()</code>
 @since 3.0
 */
+ (id<ComGoogleCommonBasePredicate>)containsWithJavaUtilRegexPattern:(JavaUtilRegexPattern * __nonnull)pattern;

/*!
 @brief Returns a predicate that evaluates to <code>true</code> if the <code>CharSequence</code> being tested
  contains any match for the given regular expression pattern.The test used is equivalent to 
 <code>Pattern.compile(pattern).matcher(arg).find()</code>
 @throw IllegalArgumentExceptionif the pattern is invalid
 @since 3.0
 */
+ (id<ComGoogleCommonBasePredicate>)containsPatternWithNSString:(NSString * __nonnull)pattern;

/*!
 @brief Returns a predicate that evaluates to <code>true</code> if the object being tested <code>equals()</code>
  the given target or both are null.
 */
+ (id<ComGoogleCommonBasePredicate>)equalToWithId:(id __nullable)target;

/*!
 @brief Returns a predicate that evaluates to <code>true</code> if the object reference being tested is a
  member of the given collection.It does not defensively copy the collection passed in, so
  future changes to it will alter the behavior of the predicate.
 <p>This method can technically accept any <code>Collection<?></code>, but using a typed collection
  helps prevent bugs. This approach doesn't block any potential users since it is always possible
  to use <code>Predicates.<Object>in()</code>.
 @param target the collection that may contain the function input
 */
+ (id<ComGoogleCommonBasePredicate>)inWithJavaUtilCollection:(id<JavaUtilCollection> __nonnull)target;

/*!
 @brief Returns a predicate that evaluates to <code>true</code> if the object being tested is an instance of
  the given class.If the object being tested is <code>null</code> this predicate evaluates to <code>false</code>
 .
 <p>If you want to filter an <code>Iterable</code> to narrow its type, consider using <code>com.google.common.collect.Iterables.filter(Iterable, Class)</code>
  in preference. 
 <p><b>Warning:</b> contrary to the typical assumptions about predicates (as documented at 
 <code>Predicate.apply</code>), the returned predicate may not be <i>consistent with equals</i>. For
  example, <code>instanceOf(ArrayList.class)</code> will yield different results for the two equal
  instances <code>Lists.newArrayList(1)</code> and <code>Arrays.asList(1)</code>.
 */
+ (id<ComGoogleCommonBasePredicate>)instanceOfWithIOSClass:(IOSClass * __nonnull)clazz;

/*!
 @brief Returns a predicate that evaluates to <code>true</code> if the object reference being tested is
  null.
 */
+ (id<ComGoogleCommonBasePredicate>)isNull;

/*!
 @brief Returns a predicate that evaluates to <code>true</code> if the given predicate evaluates to <code>false</code>
 .
 */
+ (id<ComGoogleCommonBasePredicate>)not__WithComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate> __nonnull)predicate;

/*!
 @brief Returns a predicate that evaluates to <code>true</code> if the object reference being tested is not
  null.
 */
+ (id<ComGoogleCommonBasePredicate>)notNull;

/*!
 @brief Returns a predicate that evaluates to <code>true</code> if any one of its components evaluates to 
 <code>true</code>.The components are evaluated in order, and evaluation will be "short-circuited"
  as soon as a true predicate is found.
 It defensively copies the iterable passed in, so future
  changes to it won't alter the behavior of this predicate. If <code>components</code> is empty, the
  returned predicate will always evaluate to <code>false</code>.
 */
+ (id<ComGoogleCommonBasePredicate>)or__WithJavaLangIterable:(id<JavaLangIterable> __nonnull)components;

/*!
 @brief Returns a predicate that evaluates to <code>true</code> if any one of its components evaluates to 
 <code>true</code>.The components are evaluated in order, and evaluation will be "short-circuited"
  as soon as a true predicate is found.
 It defensively copies the array passed in, so future
  changes to it won't alter the behavior of this predicate. If <code>components</code> is empty, the
  returned predicate will always evaluate to <code>false</code>.
 */
+ (id<ComGoogleCommonBasePredicate>)or__WithComGoogleCommonBasePredicateArray:(IOSObjectArray * __nonnull)components;

/*!
 @brief Returns a predicate that evaluates to <code>true</code> if either of its components evaluates to 
 <code>true</code>.The components are evaluated in order, and evaluation will be "short-circuited"
  as soon as a true predicate is found.
 */
+ (id<ComGoogleCommonBasePredicate>)or__WithComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate> __nonnull)first
                                        withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate> __nonnull)second;

/*!
 @brief Returns a predicate that evaluates to <code>true</code> if the class being tested is assignable to
  (is a subtype of) <code>clazz</code>.Example:
  
 @code
 List<Class<?
 >> classes = Arrays.asList(
      Object.class, String.class, Number.class, Long.class);
  return Iterables.filter(classes, subtypeOf(Number.class)); 
 
@endcode
  The code above returns an iterable containing <code>Number.class</code> and <code>Long.class</code>.
 @since 20.0 (since 10.0 under the incorrect name <code>assignableFrom</code>)
 */
+ (id<ComGoogleCommonBasePredicate>)subtypeOfWithIOSClass:(IOSClass * __nonnull)clazz;

#pragma mark Package-Private

+ (id<JavaUtilList>)defensiveCopyWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBasePredicates)

FOUNDATION_EXPORT id<ComGoogleCommonBasePredicate> ComGoogleCommonBasePredicates_alwaysTrue(void);

FOUNDATION_EXPORT id<ComGoogleCommonBasePredicate> ComGoogleCommonBasePredicates_alwaysFalse(void);

FOUNDATION_EXPORT id<ComGoogleCommonBasePredicate> ComGoogleCommonBasePredicates_isNull(void);

FOUNDATION_EXPORT id<ComGoogleCommonBasePredicate> ComGoogleCommonBasePredicates_notNull(void);

FOUNDATION_EXPORT id<ComGoogleCommonBasePredicate> ComGoogleCommonBasePredicates_not__WithComGoogleCommonBasePredicate_(id<ComGoogleCommonBasePredicate> predicate);

FOUNDATION_EXPORT id<ComGoogleCommonBasePredicate> ComGoogleCommonBasePredicates_and__WithJavaLangIterable_(id<JavaLangIterable> components);

FOUNDATION_EXPORT id<ComGoogleCommonBasePredicate> ComGoogleCommonBasePredicates_and__WithComGoogleCommonBasePredicateArray_(IOSObjectArray *components);

FOUNDATION_EXPORT id<ComGoogleCommonBasePredicate> ComGoogleCommonBasePredicates_and__WithComGoogleCommonBasePredicate_withComGoogleCommonBasePredicate_(id<ComGoogleCommonBasePredicate> first, id<ComGoogleCommonBasePredicate> second);

FOUNDATION_EXPORT id<ComGoogleCommonBasePredicate> ComGoogleCommonBasePredicates_or__WithJavaLangIterable_(id<JavaLangIterable> components);

FOUNDATION_EXPORT id<ComGoogleCommonBasePredicate> ComGoogleCommonBasePredicates_or__WithComGoogleCommonBasePredicateArray_(IOSObjectArray *components);

FOUNDATION_EXPORT id<ComGoogleCommonBasePredicate> ComGoogleCommonBasePredicates_or__WithComGoogleCommonBasePredicate_withComGoogleCommonBasePredicate_(id<ComGoogleCommonBasePredicate> first, id<ComGoogleCommonBasePredicate> second);

FOUNDATION_EXPORT id<ComGoogleCommonBasePredicate> ComGoogleCommonBasePredicates_equalToWithId_(id target);

FOUNDATION_EXPORT id<ComGoogleCommonBasePredicate> ComGoogleCommonBasePredicates_instanceOfWithIOSClass_(IOSClass *clazz);

FOUNDATION_EXPORT id<ComGoogleCommonBasePredicate> ComGoogleCommonBasePredicates_subtypeOfWithIOSClass_(IOSClass *clazz);

FOUNDATION_EXPORT id<ComGoogleCommonBasePredicate> ComGoogleCommonBasePredicates_inWithJavaUtilCollection_(id<JavaUtilCollection> target);

FOUNDATION_EXPORT id<ComGoogleCommonBasePredicate> ComGoogleCommonBasePredicates_composeWithComGoogleCommonBasePredicate_withComGoogleCommonBaseFunction_(id<ComGoogleCommonBasePredicate> predicate, id<ComGoogleCommonBaseFunction> function);

FOUNDATION_EXPORT id<ComGoogleCommonBasePredicate> ComGoogleCommonBasePredicates_containsPatternWithNSString_(NSString *pattern);

FOUNDATION_EXPORT id<ComGoogleCommonBasePredicate> ComGoogleCommonBasePredicates_containsWithJavaUtilRegexPattern_(JavaUtilRegexPattern *pattern);

FOUNDATION_EXPORT id<JavaUtilList> ComGoogleCommonBasePredicates_defensiveCopyWithJavaLangIterable_(id<JavaLangIterable> iterable);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBasePredicates)

#endif

#if !defined (ComGoogleCommonBasePredicates_ObjectPredicate_) && (INCLUDE_ALL_ComGoogleCommonBasePredicates || defined(INCLUDE_ComGoogleCommonBasePredicates_ObjectPredicate))
#define ComGoogleCommonBasePredicates_ObjectPredicate_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

#define RESTRICT_ComGoogleCommonBasePredicate 1
#define INCLUDE_ComGoogleCommonBasePredicate 1
#include "com/google/common/base/Predicate.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, ComGoogleCommonBasePredicates_ObjectPredicate_Enum) {
  ComGoogleCommonBasePredicates_ObjectPredicate_Enum_ALWAYS_TRUE = 0,
  ComGoogleCommonBasePredicates_ObjectPredicate_Enum_ALWAYS_FALSE = 1,
  ComGoogleCommonBasePredicates_ObjectPredicate_Enum_IS_NULL = 2,
  ComGoogleCommonBasePredicates_ObjectPredicate_Enum_NOT_NULL = 3,
};

@interface ComGoogleCommonBasePredicates_ObjectPredicate : JavaLangEnum < ComGoogleCommonBasePredicate >

@property (readonly, class, nonnull) ComGoogleCommonBasePredicates_ObjectPredicate *ALWAYS_TRUE NS_SWIFT_NAME(ALWAYS_TRUE);
@property (readonly, class, nonnull) ComGoogleCommonBasePredicates_ObjectPredicate *ALWAYS_FALSE NS_SWIFT_NAME(ALWAYS_FALSE);
@property (readonly, class, nonnull) ComGoogleCommonBasePredicates_ObjectPredicate *IS_NULL NS_SWIFT_NAME(IS_NULL);
@property (readonly, class, nonnull) ComGoogleCommonBasePredicates_ObjectPredicate *NOT_NULL NS_SWIFT_NAME(NOT_NULL);
+ (ComGoogleCommonBasePredicates_ObjectPredicate * __nonnull)ALWAYS_TRUE;

+ (ComGoogleCommonBasePredicates_ObjectPredicate * __nonnull)ALWAYS_FALSE;

+ (ComGoogleCommonBasePredicates_ObjectPredicate * __nonnull)IS_NULL;

+ (ComGoogleCommonBasePredicates_ObjectPredicate * __nonnull)NOT_NULL;

#pragma mark Public

+ (ComGoogleCommonBasePredicates_ObjectPredicate *)valueOfWithNSString:(NSString * __nonnull)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (id<ComGoogleCommonBasePredicate>)withNarrowedType;

- (ComGoogleCommonBasePredicates_ObjectPredicate_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonBasePredicates_ObjectPredicate)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ComGoogleCommonBasePredicates_ObjectPredicate *ComGoogleCommonBasePredicates_ObjectPredicate_values_[];

/*!
 - seealso: Predicates#alwaysTrue()
 */
inline ComGoogleCommonBasePredicates_ObjectPredicate *ComGoogleCommonBasePredicates_ObjectPredicate_get_ALWAYS_TRUE(void);
J2OBJC_ENUM_CONSTANT(ComGoogleCommonBasePredicates_ObjectPredicate, ALWAYS_TRUE)

/*!
 - seealso: Predicates#alwaysFalse()
 */
inline ComGoogleCommonBasePredicates_ObjectPredicate *ComGoogleCommonBasePredicates_ObjectPredicate_get_ALWAYS_FALSE(void);
J2OBJC_ENUM_CONSTANT(ComGoogleCommonBasePredicates_ObjectPredicate, ALWAYS_FALSE)

/*!
 - seealso: Predicates#isNull()
 */
inline ComGoogleCommonBasePredicates_ObjectPredicate *ComGoogleCommonBasePredicates_ObjectPredicate_get_IS_NULL(void);
J2OBJC_ENUM_CONSTANT(ComGoogleCommonBasePredicates_ObjectPredicate, IS_NULL)

/*!
 - seealso: Predicates#notNull()
 */
inline ComGoogleCommonBasePredicates_ObjectPredicate *ComGoogleCommonBasePredicates_ObjectPredicate_get_NOT_NULL(void);
J2OBJC_ENUM_CONSTANT(ComGoogleCommonBasePredicates_ObjectPredicate, NOT_NULL)

FOUNDATION_EXPORT IOSObjectArray *ComGoogleCommonBasePredicates_ObjectPredicate_values(void);

FOUNDATION_EXPORT ComGoogleCommonBasePredicates_ObjectPredicate *ComGoogleCommonBasePredicates_ObjectPredicate_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ComGoogleCommonBasePredicates_ObjectPredicate *ComGoogleCommonBasePredicates_ObjectPredicate_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBasePredicates_ObjectPredicate)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonBasePredicates")
