//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/primitives/UnsignedInteger.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonPrimitivesUnsignedInteger")
#ifdef RESTRICT_ComGoogleCommonPrimitivesUnsignedInteger
#define INCLUDE_ALL_ComGoogleCommonPrimitivesUnsignedInteger 0
#else
#define INCLUDE_ALL_ComGoogleCommonPrimitivesUnsignedInteger 1
#endif
#undef RESTRICT_ComGoogleCommonPrimitivesUnsignedInteger

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonPrimitivesUnsignedInteger_) && (INCLUDE_ALL_ComGoogleCommonPrimitivesUnsignedInteger || defined(INCLUDE_ComGoogleCommonPrimitivesUnsignedInteger))
#define ComGoogleCommonPrimitivesUnsignedInteger_

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "java/lang/Comparable.h"

@class JavaMathBigInteger;

/*!
 @brief A wrapper class for unsigned <code>int</code> values, supporting arithmetic operations.
 <p>In some cases, when speed is more important than code readability, it may be faster simply to
  treat primitive <code>int</code> values as unsigned, using the methods from <code>UnsignedInts</code>.
  
 <p>See the Guava User Guide article on <a href="https://github.com/google/guava/wiki/PrimitivesExplained#unsigned-support">
 unsigned
  primitive utilities</a>.
 @author Louis Wasserman
 @since 11.0
 */
@interface ComGoogleCommonPrimitivesUnsignedInteger : NSNumber < JavaLangComparable >
@property (readonly, class, strong) ComGoogleCommonPrimitivesUnsignedInteger *ZERO NS_SWIFT_NAME(ZERO);
@property (readonly, class, strong) ComGoogleCommonPrimitivesUnsignedInteger *ONE NS_SWIFT_NAME(ONE);
@property (readonly, class, strong) ComGoogleCommonPrimitivesUnsignedInteger *MAX_VALUE NS_SWIFT_NAME(MAX_VALUE);

+ (ComGoogleCommonPrimitivesUnsignedInteger *)ZERO;

+ (ComGoogleCommonPrimitivesUnsignedInteger *)ONE;

+ (ComGoogleCommonPrimitivesUnsignedInteger *)MAX_VALUE;

#pragma mark Public

/*!
 @brief Returns the value of this <code>UnsignedInteger</code> as a <code>BigInteger</code>.
 */
- (JavaMathBigInteger *)bigIntegerValue;

/*!
 @brief Compares this unsigned integer to another unsigned integer.Returns <code>0</code> if they are
  equal, a negative number if <code>this < other</code>, and a positive number if <code>this >
  other</code>
 .
 */
- (jint)compareToWithId:(ComGoogleCommonPrimitivesUnsignedInteger * __nonnull)other;

/*!
 @brief Returns the result of dividing this by <code>val</code>.
 @throw ArithmeticExceptionif <code>val</code> is zero
 @since 14.0
 */
- (ComGoogleCommonPrimitivesUnsignedInteger *)dividedByWithComGoogleCommonPrimitivesUnsignedInteger:(ComGoogleCommonPrimitivesUnsignedInteger * __nonnull)val;

/*!
 @brief Returns the value of this <code>UnsignedInteger</code> as a <code>float</code>, analogous to a widening
  primitive conversion from <code>int</code> to <code>double</code>, and correctly rounded.
 */
- (jdouble)doubleValue;

- (jboolean)isEqual:(id __nullable)obj;

/*!
 @brief Returns the value of this <code>UnsignedInteger</code> as a <code>float</code>, analogous to a widening
  primitive conversion from <code>int</code> to <code>float</code>, and correctly rounded.
 */
- (jfloat)floatValue;

/*!
 @brief Returns an <code>UnsignedInteger</code> corresponding to a given bit representation.The argument is
  interpreted as an unsigned 32-bit value.
 Specifically, the sign bit of <code>bits</code> is
  interpreted as a normal bit, and all other bits are treated as usual. 
 <p>If the argument is nonnegative, the returned result will be equal to <code>bits</code>,
  otherwise, the result will be equal to <code>2^32 + bits</code>.
  
 <p>To represent unsigned decimal constants, consider <code>valueOf(long)</code> instead.
 @since 14.0
 */
+ (ComGoogleCommonPrimitivesUnsignedInteger *)fromIntBitsWithInt:(jint)bits;

- (NSUInteger)hash;

/*!
 @brief Returns the value of this <code>UnsignedInteger</code> as an <code>int</code>.This is an inverse
  operation to <code>fromIntBits</code>.
 <p>Note that if this <code>UnsignedInteger</code> holds a value <code>>= 2^31</code>, the returned value
  will be equal to <code>this - 2^32</code>.
 */
- (jint)intValue;

/*!
 @brief Returns the value of this <code>UnsignedInteger</code> as a <code>long</code>.
 */
- (jlong)longLongValue;

/*!
 @brief Returns the result of subtracting this and <code>val</code>.If the result would be negative,
  returns the low 32 bits of the result.
 @since 14.0
 */
- (ComGoogleCommonPrimitivesUnsignedInteger *)minusWithComGoogleCommonPrimitivesUnsignedInteger:(ComGoogleCommonPrimitivesUnsignedInteger * __nonnull)val;

/*!
 @brief Returns this mod <code>val</code>.
 @throw ArithmeticExceptionif <code>val</code> is zero
 @since 14.0
 */
- (ComGoogleCommonPrimitivesUnsignedInteger *)modWithComGoogleCommonPrimitivesUnsignedInteger:(ComGoogleCommonPrimitivesUnsignedInteger * __nonnull)val;

/*!
 @brief Returns the result of adding this and <code>val</code>.If the result would have more than 32 bits,
  returns the low 32 bits of the result.
 @since 14.0
 */
- (ComGoogleCommonPrimitivesUnsignedInteger *)plusWithComGoogleCommonPrimitivesUnsignedInteger:(ComGoogleCommonPrimitivesUnsignedInteger * __nonnull)val;

/*!
 @brief Returns the result of multiplying this and <code>val</code>.If the result would have more than 32
  bits, returns the low 32 bits of the result.
 @since 14.0
 */
- (ComGoogleCommonPrimitivesUnsignedInteger *)timesWithComGoogleCommonPrimitivesUnsignedInteger:(ComGoogleCommonPrimitivesUnsignedInteger * __nonnull)val;

/*!
 @brief Returns a string representation of the <code>UnsignedInteger</code> value, in base 10.
 */
- (NSString *)description;

/*!
 @brief Returns a string representation of the <code>UnsignedInteger</code> value, in base <code>radix</code>.If
  <code>radix < Character.MIN_RADIX</code> or <code>radix > Character.MAX_RADIX</code>, the radix <code>10</code>
  is used.
 */
- (NSString *)toStringWithInt:(jint)radix;

/*!
 @brief Returns a <code>UnsignedInteger</code> representing the same value as the specified <code>BigInteger</code>
 .This is the inverse operation of <code>bigIntegerValue()</code>.
 @throw IllegalArgumentExceptionif <code>value</code> is negative or <code>value >= 2^32</code>
 */
+ (ComGoogleCommonPrimitivesUnsignedInteger *)valueOfWithJavaMathBigInteger:(JavaMathBigInteger * __nonnull)value;

/*!
 @brief Returns an <code>UnsignedInteger</code> that is equal to <code>value</code>, if possible.The inverse
  operation of <code>longValue()</code>.
 */
+ (ComGoogleCommonPrimitivesUnsignedInteger *)valueOfWithLong:(jlong)value;

/*!
 @brief Returns an <code>UnsignedInteger</code> holding the value of the specified <code>String</code>, parsed as
  an unsigned <code>int</code> value.
 @throw NumberFormatExceptionif the string does not contain a parsable unsigned <code>int</code>
      value
 */
+ (ComGoogleCommonPrimitivesUnsignedInteger *)valueOfWithNSString:(NSString * __nonnull)string;

/*!
 @brief Returns an <code>UnsignedInteger</code> holding the value of the specified <code>String</code>, parsed as
  an unsigned <code>int</code> value in the specified radix.
 @throw NumberFormatExceptionif the string does not contain a parsable unsigned <code>int</code>
      value
 */
+ (ComGoogleCommonPrimitivesUnsignedInteger *)valueOfWithNSString:(NSString * __nonnull)string
                                                          withInt:(jint)radix;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonPrimitivesUnsignedInteger)

inline ComGoogleCommonPrimitivesUnsignedInteger *ComGoogleCommonPrimitivesUnsignedInteger_get_ZERO(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComGoogleCommonPrimitivesUnsignedInteger *ComGoogleCommonPrimitivesUnsignedInteger_ZERO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonPrimitivesUnsignedInteger, ZERO, ComGoogleCommonPrimitivesUnsignedInteger *)

inline ComGoogleCommonPrimitivesUnsignedInteger *ComGoogleCommonPrimitivesUnsignedInteger_get_ONE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComGoogleCommonPrimitivesUnsignedInteger *ComGoogleCommonPrimitivesUnsignedInteger_ONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonPrimitivesUnsignedInteger, ONE, ComGoogleCommonPrimitivesUnsignedInteger *)

inline ComGoogleCommonPrimitivesUnsignedInteger *ComGoogleCommonPrimitivesUnsignedInteger_get_MAX_VALUE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComGoogleCommonPrimitivesUnsignedInteger *ComGoogleCommonPrimitivesUnsignedInteger_MAX_VALUE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonPrimitivesUnsignedInteger, MAX_VALUE, ComGoogleCommonPrimitivesUnsignedInteger *)

FOUNDATION_EXPORT ComGoogleCommonPrimitivesUnsignedInteger *ComGoogleCommonPrimitivesUnsignedInteger_fromIntBitsWithInt_(jint bits);

FOUNDATION_EXPORT ComGoogleCommonPrimitivesUnsignedInteger *ComGoogleCommonPrimitivesUnsignedInteger_valueOfWithLong_(jlong value);

FOUNDATION_EXPORT ComGoogleCommonPrimitivesUnsignedInteger *ComGoogleCommonPrimitivesUnsignedInteger_valueOfWithJavaMathBigInteger_(JavaMathBigInteger *value);

FOUNDATION_EXPORT ComGoogleCommonPrimitivesUnsignedInteger *ComGoogleCommonPrimitivesUnsignedInteger_valueOfWithNSString_(NSString *string);

FOUNDATION_EXPORT ComGoogleCommonPrimitivesUnsignedInteger *ComGoogleCommonPrimitivesUnsignedInteger_valueOfWithNSString_withInt_(NSString *string, jint radix);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonPrimitivesUnsignedInteger)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonPrimitivesUnsignedInteger")
