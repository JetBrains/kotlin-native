//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/collect/TreeBasedTable.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCollectTreeBasedTable")
#ifdef RESTRICT_ComGoogleCommonCollectTreeBasedTable
#define INCLUDE_ALL_ComGoogleCommonCollectTreeBasedTable 0
#else
#define INCLUDE_ALL_ComGoogleCommonCollectTreeBasedTable 1
#endif
#undef RESTRICT_ComGoogleCommonCollectTreeBasedTable

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCollectTreeBasedTable_) && (INCLUDE_ALL_ComGoogleCommonCollectTreeBasedTable || defined(INCLUDE_ComGoogleCommonCollectTreeBasedTable))
#define ComGoogleCommonCollectTreeBasedTable_

#define RESTRICT_ComGoogleCommonCollectStandardRowSortedTable 1
#define INCLUDE_ComGoogleCommonCollectStandardRowSortedTable 1
#include "com/google/common/collect/StandardRowSortedTable.h"

@protocol ComGoogleCommonBaseSupplier;
@protocol JavaUtilComparator;
@protocol JavaUtilIterator;
@protocol JavaUtilSortedMap;
@protocol JavaUtilSortedSet;

/*!
 @brief Implementation of <code>Table</code> whose row keys and column keys are ordered by their natural
  ordering or by supplied comparators.When constructing a <code>TreeBasedTable</code>, you may provide
  comparators for the row keys and the column keys, or you may use natural ordering for both.
 <p>The <code>rowKeySet</code> method returns a <code>SortedSet</code> and the <code>rowMap</code> method
  returns a <code>SortedMap</code>, instead of the <code>Set</code> and <code>Map</code> specified by the <code>Table</code>
  interface. 
 <p>The views returned by <code>column</code>, <code>columnKeySet()</code>, and <code>columnMap()</code> have
  iterators that don't support <code>remove()</code>. Otherwise, all optional operations are supported.
  Null row keys, columns keys, and values are not supported. 
 <p>Lookups by row key are often faster than lookups by column key, because the data is stored in
  a <code>Map<R, Map<C, V>></code>. A method call like <code>column(columnKey).get(rowKey)</code> still runs
  quickly, since the row key is provided. However, <code>column(columnKey).size()</code> takes longer,
  since an iteration across all row keys occurs. 
 <p>Because a <code>TreeBasedTable</code> has unique sorted values for a given row, both <code>row(rowKey)</code>
  and <code>rowMap().get(rowKey)</code> are <code>SortedMap</code> instances, instead of the 
 <code>Map</code> specified in the <code>Table</code> interface. 
 <p>Note that this implementation is not synchronized. If multiple threads access this table
  concurrently and one of the threads modifies the table, it must be synchronized externally. 
 <p>See the Guava User Guide article on <a href="https://github.com/google/guava/wiki/NewCollectionTypesExplained#table">
  <code>Table</code></a>.
 @author Jared Levy
 @author Louis Wasserman
 @since 7.0
 */
@interface ComGoogleCommonCollectTreeBasedTable : ComGoogleCommonCollectStandardRowSortedTable

#pragma mark Public

/*!
 @brief Returns the comparator that orders the columns.With natural ordering, <code>Ordering.natural()</code>
  is returned.
 */
- (id<JavaUtilComparator>)columnComparator __attribute__((deprecated));

/*!
 @brief Creates an empty <code>TreeBasedTable</code> that uses the natural orderings of both row and column
  keys.
 <p>The method signature specifies <code>R extends Comparable</code> with a raw <code>Comparable</code>,
  instead of <code>R extends Comparable<? super R></code>, and the same for <code>C</code>. That's
  necessary to support classes defined without generics.
 */
+ (ComGoogleCommonCollectTreeBasedTable *)create;

/*!
 @brief Creates an empty <code>TreeBasedTable</code> that is ordered by the specified comparators.
 @param rowComparator the comparator that orders the row keys
 @param columnComparator the comparator that orders the column keys
 */
+ (ComGoogleCommonCollectTreeBasedTable *)createWithJavaUtilComparator:(id<JavaUtilComparator> __nonnull)rowComparator
                                                withJavaUtilComparator:(id<JavaUtilComparator> __nonnull)columnComparator;

/*!
 @brief Creates a <code>TreeBasedTable</code> with the same mappings and sort order as the specified <code>TreeBasedTable</code>
 .
 */
+ (ComGoogleCommonCollectTreeBasedTable *)createWithComGoogleCommonCollectTreeBasedTable:(ComGoogleCommonCollectTreeBasedTable * __nonnull)table;

/*!
 @brief <p>Because a <code>TreeBasedTable</code> has unique sorted values for a given row, this method
  returns a <code>SortedMap</code>, instead of the <code>Map</code> specified in the <code>Table</code>
  interface.
 @since 10.0 (<a href="https://github.com/google/guava/wiki/Compatibility">mostly
      source-compatible</a> since 7.0)
 */
- (id<JavaUtilSortedMap>)rowWithId:(id __nonnull)rowKey;

/*!
 @brief Returns the comparator that orders the rows.With natural ordering, <code>Ordering.natural()</code>
  is returned.
 */
- (id<JavaUtilComparator>)rowComparator __attribute__((deprecated));

- (id<JavaUtilSortedSet>)rowKeySet;

- (id<JavaUtilSortedMap>)rowMap;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilComparator:(id<JavaUtilComparator> __nonnull)rowComparator
                              withJavaUtilComparator:(id<JavaUtilComparator> __nonnull)columnComparator;

/*!
 @brief Overridden column iterator to return columns values in globally sorted order.
 */
- (id<JavaUtilIterator>)createColumnKeyIterator;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initPackagePrivateWithJavaUtilSortedMap:(id<JavaUtilSortedMap> __nonnull)arg0
                                  withComGoogleCommonBaseSupplier:(id<ComGoogleCommonBaseSupplier> __nonnull)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectTreeBasedTable)

FOUNDATION_EXPORT ComGoogleCommonCollectTreeBasedTable *ComGoogleCommonCollectTreeBasedTable_create(void);

FOUNDATION_EXPORT ComGoogleCommonCollectTreeBasedTable *ComGoogleCommonCollectTreeBasedTable_createWithJavaUtilComparator_withJavaUtilComparator_(id<JavaUtilComparator> rowComparator, id<JavaUtilComparator> columnComparator);

FOUNDATION_EXPORT ComGoogleCommonCollectTreeBasedTable *ComGoogleCommonCollectTreeBasedTable_createWithComGoogleCommonCollectTreeBasedTable_(ComGoogleCommonCollectTreeBasedTable *table);

FOUNDATION_EXPORT void ComGoogleCommonCollectTreeBasedTable_initWithJavaUtilComparator_withJavaUtilComparator_(ComGoogleCommonCollectTreeBasedTable *self, id<JavaUtilComparator> rowComparator, id<JavaUtilComparator> columnComparator);

FOUNDATION_EXPORT ComGoogleCommonCollectTreeBasedTable *new_ComGoogleCommonCollectTreeBasedTable_initWithJavaUtilComparator_withJavaUtilComparator_(id<JavaUtilComparator> rowComparator, id<JavaUtilComparator> columnComparator) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectTreeBasedTable *create_ComGoogleCommonCollectTreeBasedTable_initWithJavaUtilComparator_withJavaUtilComparator_(id<JavaUtilComparator> rowComparator, id<JavaUtilComparator> columnComparator);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectTreeBasedTable)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCollectTreeBasedTable")
