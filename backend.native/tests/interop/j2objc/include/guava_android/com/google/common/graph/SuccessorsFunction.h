//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/graph/SuccessorsFunction.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonGraphSuccessorsFunction")
#ifdef RESTRICT_ComGoogleCommonGraphSuccessorsFunction
#define INCLUDE_ALL_ComGoogleCommonGraphSuccessorsFunction 0
#else
#define INCLUDE_ALL_ComGoogleCommonGraphSuccessorsFunction 1
#endif
#undef RESTRICT_ComGoogleCommonGraphSuccessorsFunction

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonGraphSuccessorsFunction_) && (INCLUDE_ALL_ComGoogleCommonGraphSuccessorsFunction || defined(INCLUDE_ComGoogleCommonGraphSuccessorsFunction))
#define ComGoogleCommonGraphSuccessorsFunction_

@protocol JavaLangIterable;

/*!
 @brief A functional interface for <a href="https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)">
 graph</a>-structured data.
 <p>This interface is meant to be used as the type of a parameter to graph algorithms (such as
  breadth first traversal) that only need a way of accessing the successors of a node in a graph. 
 <h3>Usage</h3>
  Given an algorithm, for example: 
 @code
 public <N> someGraphAlgorithm(N startNode, SuccessorsFunction<N> successorsFunction); 
 
@endcode
  you will invoke it depending on the graph representation you're using. 
 <p>If you have an instance of one of the primary <code>common.graph</code> types (<code>Graph</code>,
  <code>ValueGraph</code>, and <code>Network</code>):
  
 @code
 someGraphAlgorithm(startNode, graph); 
 
@endcode
  This works because those types each implement <code>SuccessorsFunction</code>. It will also work with
  any other implementation of this interface. 
 <p>If you have your own graph implementation based around a custom node type <code>MyNode</code>,
  which has a method <code>getChildren()</code> that retrieves its successors in a graph: 
 @code
 someGraphAlgorithm(startNode, MyNode::getChildren); 
 
@endcode
  
 <p>If you have some other mechanism for returning the successors of a node, or one that doesn't
  return an <code>Iterable<? extends N></code>, then you can use a lambda to perform a more general
  transformation: 
 @code
 someGraphAlgorithm(startNode, node -> ImmutableList.of(node.leftChild(), node.rightChild())); 
 
@endcode
  
 <p>Graph algorithms that need additional capabilities (accessing both predecessors and
  successors, iterating over the edges, etc.) should declare their input to be of a type that
  provides those capabilities, such as <code>Graph</code>, <code>ValueGraph</code>, or <code>Network</code>.
  
 <h3>Additional documentation</h3>
  
 <p>See the Guava User Guide for the <code>common.graph</code> package (<a href="https://github.com/google/guava/wiki/GraphsExplained">
 "Graphs Explained"</a>) for
  additional documentation, including <a href="https://github.com/google/guava/wiki/GraphsExplained#notes-for-implementors">
 notes for
  implementors</a>
 @author Joshua O'Madadhain
 @author Jens Nyman
 @since 23.0
 */
@protocol ComGoogleCommonGraphSuccessorsFunction < JavaObject >

/*!
 @brief Returns all nodes in this graph adjacent to <code>node</code> which can be reached by traversing 
 <code>node</code>'s outgoing edges in the direction (if any) of the edge.
 <p>This is <i>not</i> the same as "all nodes reachable from <code>node</code> by following outgoing
  edges". For that functionality, see <code>Graphs.reachableNodes(Graph, Object)</code>.
  
 <p>Some algorithms that operate on a <code>SuccessorsFunction</code> may produce undesired results
  if the returned <code>Iterable</code> contains duplicate elements. Implementations of such
  algorithms should document their behavior in the presence of duplicates. 
 <p>The elements of the returned <code>Iterable</code> must each be: 
 <ul>
    <li>Non-null
    <li>Usable as <code>Map</code> keys (see the Guava User Guide's section on <a href="https://github.com/google/guava/wiki/GraphsExplained#graph-elements-nodes-and-edges">
        graph elements</a> for details) 
 </ul>
 @throw IllegalArgumentExceptionif <code>node</code> is not an element of this graph
 */
- (id<JavaLangIterable>)successorsWithId:(id __nonnull)node;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonGraphSuccessorsFunction)

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonGraphSuccessorsFunction)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonGraphSuccessorsFunction")
