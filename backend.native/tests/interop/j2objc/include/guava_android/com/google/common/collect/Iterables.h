//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/collect/Iterables.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCollectIterables")
#ifdef RESTRICT_ComGoogleCommonCollectIterables
#define INCLUDE_ALL_ComGoogleCommonCollectIterables 0
#else
#define INCLUDE_ALL_ComGoogleCommonCollectIterables 1
#endif
#undef RESTRICT_ComGoogleCommonCollectIterables

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCollectIterables_) && (INCLUDE_ALL_ComGoogleCommonCollectIterables || defined(INCLUDE_ComGoogleCommonCollectIterables))
#define ComGoogleCommonCollectIterables_

@class ComGoogleCommonBaseOptional;
@class ComGoogleCommonCollectImmutableCollection;
@class IOSClass;
@class IOSObjectArray;
@protocol ComGoogleCommonBaseFunction;
@protocol ComGoogleCommonBasePredicate;
@protocol JavaLangIterable;
@protocol JavaUtilCollection;
@protocol JavaUtilComparator;

/*!
 @brief An assortment of mainly legacy static utility methods that operate on or return objects of type 
 <code>Iterable</code>.Except as noted, each method has a corresponding <code>Iterator</code>-based method
  in the <code>Iterators</code> class.
 <p><b>Java 8 users:</b> several common uses for this class are now more comprehensively addressed
  by the new <code>java.util.stream.Stream</code> library. Read the method documentation below for
  comparisons. This class is not being deprecated, but we gently encourage you to migrate to
  streams. 
 <p><i>Performance notes:</i> Unless otherwise noted, all of the iterables produced in this class
  are <i>lazy</i>, which means that their iterators only advance the backing iteration when
  absolutely necessary. 
 <p>See the Guava User Guide article on <a href="https://github.com/google/guava/wiki/CollectionUtilitiesExplained#iterables">
  <code>Iterables</code>
 </a>.
 @author Kevin Bourrillion
 @author Jared Levy
 @since 2.0
 */
@interface ComGoogleCommonCollectIterables : NSObject

#pragma mark Public

/*!
 @brief Adds all elements in <code>iterable</code> to <code>collection</code>.
 @return <code>true</code> if <code>collection</code> was modified as a result of this operation.
 */
+ (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection> __nonnull)addTo
                    withJavaLangIterable:(id<JavaLangIterable> __nonnull)elementsToAdd;

/*!
 @brief Returns <code>true</code> if every element in <code>iterable</code> satisfies the predicate.If <code>iterable</code>
  is empty, <code>true</code> is returned.
 <p><b><code>Stream</code> equivalent:</b> <code>Stream.allMatch</code>.
 */
+ (jboolean)allWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable
   withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate> __nonnull)predicate;

/*!
 @brief Returns <code>true</code> if any element in <code>iterable</code> satisfies the predicate.
 <p><b><code>Stream</code> equivalent:</b> <code>Stream.anyMatch</code>.
 */
+ (jboolean)anyWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable
   withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate> __nonnull)predicate;

/*!
 @brief Combines multiple iterables into a single iterable.The returned iterable has an iterator that
  traverses the elements of each iterable in <code>inputs</code>.
 The input iterators are not polled
  until necessary. 
 <p>The returned iterable's iterator supports <code>remove()</code> when the corresponding input
  iterator supports it. 
 <p><b>Java 8 users:</b> The <code>Stream</code> equivalent of this method is <code>Streams.concat(...)</code>
 .
 @throw NullPointerExceptionif any of the provided iterables is null
 */
+ (id<JavaLangIterable>)concatWithJavaLangIterableArray:(IOSObjectArray * __nonnull)inputs;

/*!
 @brief Combines multiple iterables into a single iterable.The returned iterable has an iterator that
  traverses the elements of each iterable in <code>inputs</code>.
 The input iterators are not polled
  until necessary. 
 <p>The returned iterable's iterator supports <code>remove()</code> when the corresponding input
  iterator supports it. The methods of the returned iterable may throw <code>NullPointerException</code>
  if any of the input iterators is null. 
 <p><b>Java 8 users:</b> The <code>Stream</code> equivalent of this method is <code>streamOfStreams.flatMap(s -> s)</code>
 .
 */
+ (id<JavaLangIterable>)concatWithJavaLangIterable:(id<JavaLangIterable> __nonnull)inputs;

/*!
 @brief Combines two iterables into a single iterable.The returned iterable has an iterator that
  traverses the elements in <code>a</code>, followed by the elements in <code>b</code>.
 The source
  iterators are not polled until necessary. 
 <p>The returned iterable's iterator supports <code>remove()</code> when the corresponding input
  iterator supports it. 
 <p><b>Java 8 users:</b> The <code>Stream</code> equivalent of this method is <code>Stream.concat(a,
  b)</code>
 .
 */
+ (id<JavaLangIterable>)concatWithJavaLangIterable:(id<JavaLangIterable> __nonnull)a
                              withJavaLangIterable:(id<JavaLangIterable> __nonnull)b;

/*!
 @brief Combines three iterables into a single iterable.The returned iterable has an iterator that
  traverses the elements in <code>a</code>, followed by the elements in <code>b</code>, followed by the
  elements in <code>c</code>.
 The source iterators are not polled until necessary. 
 <p>The returned iterable's iterator supports <code>remove()</code> when the corresponding input
  iterator supports it. 
 <p><b>Java 8 users:</b> The <code>Stream</code> equivalent of this method is <code>Streams.concat(a, b, c)</code>
 .
 */
+ (id<JavaLangIterable>)concatWithJavaLangIterable:(id<JavaLangIterable> __nonnull)a
                              withJavaLangIterable:(id<JavaLangIterable> __nonnull)b
                              withJavaLangIterable:(id<JavaLangIterable> __nonnull)c;

/*!
 @brief Combines four iterables into a single iterable.The returned iterable has an iterator that
  traverses the elements in <code>a</code>, followed by the elements in <code>b</code>, followed by the
  elements in <code>c</code>, followed by the elements in <code>d</code>.
 The source iterators are not
  polled until necessary. 
 <p>The returned iterable's iterator supports <code>remove()</code> when the corresponding input
  iterator supports it. 
 <p><b>Java 8 users:</b> The <code>Stream</code> equivalent of this method is <code>Streams.concat(a, b, c, d)</code>
 .
 */
+ (id<JavaLangIterable>)concatWithJavaLangIterable:(id<JavaLangIterable> __nonnull)a
                              withJavaLangIterable:(id<JavaLangIterable> __nonnull)b
                              withJavaLangIterable:(id<JavaLangIterable> __nonnull)c
                              withJavaLangIterable:(id<JavaLangIterable> __nonnull)d;

/*!
 @brief Returns a view of the supplied iterable that wraps each generated <code>Iterator</code> through 
 <code>Iterators.consumingIterator(Iterator)</code>.
 <p>Note: If <code>iterable</code> is a <code>Queue</code>, the returned iterable will get entries from 
 <code>Queue.remove()</code> since <code>Queue</code>'s iteration order is undefined. Calling <code>Iterator.hasNext()</code>
  on a generated iterator from the returned iterable may cause an item to be
  immediately dequeued for return on a subsequent call to <code>Iterator.next()</code>.
 @param iterable the iterable to wrap
 @return a view of the supplied iterable that wraps each generated iterator through <code>Iterators.consumingIterator(Iterator)</code>
 ; for queues, an iterable that generates iterators
      that return and consume the queue's elements in queue order
 - seealso: Iterators#consumingIterator(Iterator)
 @since 2.0
 */
+ (id<JavaLangIterable>)consumingIterableWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable;

/*!
 @brief Returns <code>true</code> if <code>iterable</code> contains any element <code>o</code> for which <code>Objects.equals(o, element)</code>
  would return <code>true</code>.Otherwise returns <code>false</code>, even in
  cases where <code>Collection.contains</code> might throw <code>NullPointerException</code> or <code>ClassCastException</code>
 .
 */
+ (jboolean)containsWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable
                                  withId:(id __nullable)element;

/*!
 @brief Returns an iterable whose iterators cycle indefinitely over the elements of <code>iterable</code>.
 <p>That iterator supports <code>remove()</code> if <code>iterable.iterator()</code> does. After <code>remove()</code>
  is called, subsequent cycles omit the removed element, which is no longer in <code>iterable</code>
 . The iterator's <code>hasNext()</code> method returns <code>true</code> until <code>iterable</code>
  is empty. 
 <p><b>Warning:</b> Typical uses of the resulting iterator may produce an infinite loop. You
  should use an explicit <code>break</code> or be certain that you will eventually remove all the
  elements. 
 <p>To cycle over the iterable <code>n</code> times, use the following: <code>Iterables.concat(Collections.nCopies(n, iterable))</code>
  
 <p><b>Java 8 users:</b> The <code>Stream</code> equivalent of this method is <code>Stream.generate(() -> iterable).flatMap(Streams::stream)</code>
 .
 */
+ (id<JavaLangIterable>)cycleWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable;

/*!
 @brief Returns an iterable whose iterators cycle indefinitely over the provided elements.
 <p>After <code>remove</code> is invoked on a generated iterator, the removed element will no longer
  appear in either that iterator or any other iterator created from the same source iterable.
  That is, this method behaves exactly as <code>Iterables.cycle(Lists.newArrayList(elements))</code>.
  The iterator's <code>hasNext</code> method returns <code>true</code> until all of the original elements
  have been removed. 
 <p><b>Warning:</b> Typical uses of the resulting iterator may produce an infinite loop. You
  should use an explicit <code>break</code> or be certain that you will eventually remove all the
  elements. 
 <p>To cycle over the elements <code>n</code> times, use the following: <code>Iterables.concat(Collections.nCopies(n, Arrays.asList(elements)))</code>
  
 <p><b>Java 8 users:</b> If passing a single element <code>e</code>, the <code>Stream</code> equivalent of
  this method is <code>Stream.generate(() -> e)</code>. Otherwise, put the elements in a collection
  and use <code>Stream.generate(() -> collection).flatMap(Collection::stream)</code>.
 */
+ (id<JavaLangIterable>)cycleWithNSObjectArray:(IOSObjectArray * __nonnull)elements;

/*!
 @brief Determines whether two iterables contain equal elements in the same order.More specifically,
  this method returns <code>true</code> if <code>iterable1</code> and <code>iterable2</code> contain the same
  number of elements and every element of <code>iterable1</code> is equal to the corresponding element
  of <code>iterable2</code>.
 */
+ (jboolean)elementsEqualWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable1
                         withJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable2;

/*!
 @brief Returns a view of <code>unfiltered</code> containing all elements that are of the type <code>desiredType</code>
 .The returned iterable's iterator does not support <code>remove()</code>.
 <p><b><code>Stream</code> equivalent:</b> <code>stream.filter(type::isInstance).map(type::cast)</code>.
  This does perform a little more work than necessary, so another option is to insert an
  unchecked cast at some later point: 
 @code

  @@SuppressWarnings("unchecked") // safe because of ::isInstance check
  ImmutableList<NewType> result =
      (ImmutableList) stream.filter(NewType.class::isInstance).collect(toImmutableList());
   
@endcode
 */
+ (id<JavaLangIterable>)filterWithJavaLangIterable:(id<JavaLangIterable> __nonnull)unfiltered
                                      withIOSClass:(IOSClass * __nonnull)desiredType;

/*!
 @brief Returns a view of <code>unfiltered</code> containing all elements that satisfy the input predicate 
 <code>retainIfTrue</code>.The returned iterable's iterator does not support <code>remove()</code>.
 <p><b><code>Stream</code> equivalent:</b> <code>Stream.filter</code>.
 */
+ (id<JavaLangIterable>)filterWithJavaLangIterable:(id<JavaLangIterable> __nonnull)unfiltered
                  withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate> __nonnull)retainIfTrue;

/*!
 @brief Returns the first element in <code>iterable</code> that satisfies the given predicate; use this
  method only when such an element is known to exist.If it is possible that <i>no</i> element
  will match, use <code>tryFind</code> or <code>find(Iterable, Predicate, Object)</code> instead.
 <p><b><code>Stream</code> equivalent:</b> <code>stream.filter(predicate).findFirst().get()</code>
 @throw NoSuchElementExceptionif no element in <code>iterable</code> matches the given predicate
 */
+ (id)findWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable
withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate> __nonnull)predicate;

/*!
 @brief Returns the first element in <code>iterable</code> that satisfies the given predicate, or <code>defaultValue</code>
  if none found.Note that this can usually be handled more naturally using <code>tryFind(iterable, predicate).or(defaultValue)</code>
 .
 <p><b><code>Stream</code> equivalent:</b> <code>stream.filter(predicate).findFirst().orElse(defaultValue)</code>
 @since 7.0
 */
+ (id __nullable)findWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable
         withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate> __nonnull)predicate
                                   withId:(id __nullable)defaultValue;

/*!
 @brief Returns the number of elements in the specified iterable that equal the specified object.This
  implementation avoids a full iteration when the iterable is a <code>Multiset</code> or <code>Set</code>.
 <p><b>Java 8 users:</b> In most cases, the <code>Stream</code> equivalent of this method is <code>stream.filter(element::equals).count()</code>
 . If <code>element</code> might be null, use <code>stream.filter(Predicate.isEqual(element)).count()</code>
  instead.
 - seealso: java.util.Collections#frequency(Collection, Object)Collections.frequency(Collection,
      Object)
 */
+ (jint)frequencyWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable
                               withId:(id __nullable)element;

/*!
 @brief Returns the element at the specified position in an iterable.
 <p><b><code>Stream</code> equivalent:</b> <code>stream.skip(position).findFirst().get()</code> (throws 
 <code>NoSuchElementException</code> if out of bounds)
 @param position position of the element to return
 @return the element at the specified position in <code>iterable</code>
 @throw IndexOutOfBoundsExceptionif <code>position</code> is negative or greater than or equal to
      the size of <code>iterable</code>
 */
+ (id)getWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable
                      withInt:(jint)position;

/*!
 @brief Returns the element at the specified position in an iterable or a default value otherwise.
 <p><b><code>Stream</code> equivalent:</b> <code>stream.skip(position).findFirst().orElse(defaultValue)</code>
  (returns the default value if the index
  is out of bounds)
 @param position position of the element to return
 @param defaultValue the default value to return if <code>position</code>  is greater than or equal to
       the size of the iterable
 @return the element at the specified position in <code>iterable</code> or <code>defaultValue</code> if
      <code>iterable</code> contains fewer than <code>position + 1</code> elements.
 @throw IndexOutOfBoundsExceptionif <code>position</code> is negative
 @since 4.0
 */
+ (id __nullable)getWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable
                                 withInt:(jint)position
                                  withId:(id __nullable)defaultValue;

/*!
 @brief Returns the first element in <code>iterable</code> or <code>defaultValue</code> if the iterable is empty.
 The <code>Iterators</code> analog to this method is <code>Iterators.getNext</code>.
  
 <p>If no default value is desired (and the caller instead wants a <code>NoSuchElementException</code>
  to be thrown), it is recommended that <code>iterable.iterator().next()</code>
  is used instead. 
 <p>To get the only element in a single-element <code>Iterable</code>, consider using <code>getOnlyElement(Iterable)</code>
  or <code>getOnlyElement(Iterable, Object)</code> instead. 
 <p><b><code>Stream</code> equivalent:</b> <code>stream.findFirst().orElse(defaultValue)</code>
 @param defaultValue the default value to return if the iterable is empty
 @return the first element of <code>iterable</code> or the default value
 @since 7.0
 */
+ (id __nullable)getFirstWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable
                                       withId:(id __nullable)defaultValue;

/*!
 @brief Returns the last element of <code>iterable</code>.If <code>iterable</code> is a <code>List</code> with <code>RandomAccess</code>
  support, then this operation is guaranteed to be <code>O(1)</code>.
 <p><b><code>Stream</code> equivalent:</b> <code>Streams.findLast(stream).get()</code>
 @return the last element of <code>iterable</code>
 @throw NoSuchElementExceptionif the iterable is empty
 */
+ (id)getLastWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable;

/*!
 @brief Returns the last element of <code>iterable</code> or <code>defaultValue</code> if the iterable is empty.
 If <code>iterable</code> is a <code>List</code> with <code>RandomAccess</code> support, then this operation is
  guaranteed to be <code>O(1)</code>.
  
 <p><b><code>Stream</code> equivalent:</b> <code>Streams.findLast(stream).orElse(defaultValue)</code>
 @param defaultValue the value to return if <code>iterable</code>  is empty
 @return the last element of <code>iterable</code> or the default value
 @since 3.0
 */
+ (id __nullable)getLastWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable
                                      withId:(id __nullable)defaultValue;

/*!
 @brief Returns the single element contained in <code>iterable</code>.
 <p><b>Java 8 users:</b> the <code>Stream</code> equivalent to this method is <code>stream.collect(MoreCollectors.onlyElement())</code>
 .
 @throw NoSuchElementExceptionif the iterable is empty
 @throw IllegalArgumentExceptionif the iterable contains multiple elements
 */
+ (id)getOnlyElementWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable;

/*!
 @brief Returns the single element contained in <code>iterable</code>, or <code>defaultValue</code> if the
  iterable is empty.
 <p><b>Java 8 users:</b> the <code>Stream</code> equivalent to this method is <code>stream.collect(MoreCollectors.toOptional()).orElse(defaultValue)</code>
 .
 @throw IllegalArgumentExceptionif the iterator contains multiple elements
 */
+ (id __nullable)getOnlyElementWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable
                                             withId:(id __nullable)defaultValue;

/*!
 @brief Returns the index in <code>iterable</code> of the first element that satisfies the provided <code>predicate</code>
 , or <code>-1</code> if the Iterable has no such elements.
 <p>More formally, returns the lowest index <code>i</code> such that <code>predicate.apply(Iterables.get(iterable, i))</code>
  returns <code>true</code>, or <code>-1</code> if there is no
  such index.
 @since 2.0
 */
+ (jint)indexOfWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable
   withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate> __nonnull)predicate;

/*!
 @brief Determines if the given iterable contains no elements.
 <p>There is no precise <code>Iterator</code> equivalent to this method, since one can only ask an
  iterator whether it has any elements <i>remaining</i> (which one does using <code>Iterator.hasNext</code>
 ).
  
 <p><b><code>Stream</code> equivalent:</b> <code>!stream.findAny().isPresent()</code>
 @return <code>true</code> if the iterable contains no elements
 */
+ (jboolean)isEmptyWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable;

/*!
 @brief Returns a view of <code>iterable</code> containing its first <code>limitSize</code> elements.If <code>iterable</code>
  contains fewer than <code>limitSize</code> elements, the returned view contains all of its
  elements.
 The returned iterable's iterator supports <code>remove()</code> if <code>iterable</code>'s
  iterator does. 
 <p><b><code>Stream</code> equivalent:</b> <code>Stream.limit</code>
 @param iterable the iterable to limit
 @param limitSize the maximum number of elements in the returned iterable
 @throw IllegalArgumentExceptionif <code>limitSize</code> is negative
 @since 3.0
 */
+ (id<JavaLangIterable>)limitWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable
                                          withInt:(jint)limitSize;

/*!
 @brief Returns an iterable over the merged contents of all given <code>iterables</code>.Equivalent entries
  will not be de-duplicated.
 <p>Callers must ensure that the source <code>iterables</code> are in non-descending order as this
  method does not sort its input. 
 <p>For any equivalent elements across all <code>iterables</code>, it is undefined which element is
  returned first.
 @since 11.0
 */
+ (id<JavaLangIterable>)mergeSortedWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterables
                                 withJavaUtilComparator:(id<JavaUtilComparator> __nonnull)comparator;

/*!
 @brief Divides an iterable into unmodifiable sublists of the given size, padding the final iterable
  with null values if necessary.For example, partitioning an iterable containing <code>[a, b,
  c, d, e]</code>
  with a partition size of 3 yields <code>[[a, b, c], [d, e, null]]</code> -- an outer
  iterable containing two inner lists of three elements each, all in the original order.
 <p>Iterators returned by the returned iterable do not support the <code>Iterator.remove()</code>
  method.
 @param iterable the iterable to return a partitioned view of
 @param size the desired size of each partition
 @return an iterable of unmodifiable lists containing the elements of <code>iterable</code> divided
      into partitions (the final iterable may have trailing null elements)
 @throw IllegalArgumentExceptionif <code>size</code> is nonpositive
 */
+ (id<JavaLangIterable>)paddedPartitionWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable
                                                    withInt:(jint)size;

/*!
 @brief Divides an iterable into unmodifiable sublists of the given size (the final iterable may be
  smaller).For example, partitioning an iterable containing <code>[a, b, c, d, e]</code> with a
  partition size of 3 yields <code>[[a, b, c], [d, e]]</code> -- an outer iterable containing two
  inner lists of three and two elements, all in the original order.
 <p>Iterators returned by the returned iterable do not support the <code>Iterator.remove()</code>
  method. The returned lists implement <code>RandomAccess</code>, whether or not the input list does. 
 <p><b>Note:</b> if <code>iterable</code> is a <code>List</code>, use <code>Lists.partition(List, int)</code>
  instead.
 @param iterable the iterable to return a partitioned view of
 @param size the desired size of each partition (the last may be smaller)
 @return an iterable of unmodifiable lists containing the elements of <code>iterable</code> divided
      into partitions
 @throw IllegalArgumentExceptionif <code>size</code> is nonpositive
 */
+ (id<JavaLangIterable>)partitionWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable
                                              withInt:(jint)size;

/*!
 @brief Removes, from an iterable, every element that belongs to the provided collection.
 <p>This method calls <code>Collection.removeAll</code> if <code>iterable</code> is a collection, and 
 <code>Iterators.removeAll</code> otherwise.
 @param removeFrom the iterable to (potentially) remove elements from
 @param elementsToRemove the elements to remove
 @return <code>true</code> if any element was removed from <code>iterable</code>
 */
+ (jboolean)removeAllWithJavaLangIterable:(id<JavaLangIterable> __nonnull)removeFrom
                   withJavaUtilCollection:(id<JavaUtilCollection> __nonnull)elementsToRemove;

/*!
 @brief Removes, from an iterable, every element that satisfies the provided predicate.
 <p>Removals may or may not happen immediately as each element is tested against the predicate.
  The behavior of this method is not specified if <code>predicate</code> is dependent on <code>removeFrom</code>
 .
 @param removeFrom the iterable to (potentially) remove elements from
 @param predicate a predicate that determines whether an element should be removed
 @return <code>true</code> if any elements were removed from the iterable
 @throw UnsupportedOperationExceptionif the iterable does not support <code>remove()</code>.
 @since 2.0
 */
+ (jboolean)removeIfWithJavaLangIterable:(id<JavaLangIterable> __nonnull)removeFrom
        withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate> __nonnull)predicate;

/*!
 @brief Removes, from an iterable, every element that does not belong to the provided collection.
 <p>This method calls <code>Collection.retainAll</code> if <code>iterable</code> is a collection, and 
 <code>Iterators.retainAll</code> otherwise.
 @param removeFrom the iterable to (potentially) remove elements from
 @param elementsToRetain the elements to retain
 @return <code>true</code> if any element was removed from <code>iterable</code>
 */
+ (jboolean)retainAllWithJavaLangIterable:(id<JavaLangIterable> __nonnull)removeFrom
                   withJavaUtilCollection:(id<JavaUtilCollection> __nonnull)elementsToRetain;

/*!
 @brief Returns the number of elements in <code>iterable</code>.
 */
+ (jint)sizeWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable;

/*!
 @brief Returns a view of <code>iterable</code> that skips its first <code>numberToSkip</code> elements.If
  <code>iterable</code> contains fewer than <code>numberToSkip</code> elements, the returned iterable skips
  all of its elements.
 <p>Modifications to the underlying <code>Iterable</code> before a call to <code>iterator()</code> are
  reflected in the returned iterator. That is, the iterator skips the first <code>numberToSkip</code>
  elements that exist when the <code>Iterator</code> is created, not when <code>skip()</code> is called. 
 <p>The returned iterable's iterator supports <code>remove()</code> if the iterator of the underlying
  iterable supports it. Note that it is <i>not</i> possible to delete the last skipped element by
  immediately calling <code>remove()</code> on that iterator, as the <code>Iterator</code> contract states
  that a call to <code>remove()</code> before a call to <code>next()</code> will throw an <code>IllegalStateException</code>
 .
  
 <p><b><code>Stream</code> equivalent:</b> <code>Stream.skip</code>
 @since 3.0
 */
+ (id<JavaLangIterable>)skipWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable
                                         withInt:(jint)numberToSkip;

/*!
 @brief Copies an iterable's elements into an array.
 @param iterable the iterable to copy
 @param type the type of the elements
 @return a newly-allocated array into which all the elements of the iterable have been copied
 */
+ (IOSObjectArray *)toArrayWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable
                                   withIOSClass:(IOSClass * __nonnull)type;

/*!
 @brief Returns a string representation of <code>iterable</code>, with the format <code>[e1, e2, ..., en]</code>
  (that is, identical to <code>Arrays</code><code>.toString(Iterables.toArray(iterable))</code>
 ).Note that for <i>most</i> implementations of <code>Collection</code>
 , <code>collection.toString()</code> also gives the same result, but that behavior is not
  generally guaranteed.
 */
+ (NSString *)toStringWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable;

/*!
 @brief Returns a view containing the result of applying <code>function</code> to each element of <code>fromIterable</code>
 .
 <p>The returned iterable's iterator supports <code>remove()</code> if <code>fromIterable</code>'s
  iterator does. After a successful <code>remove()</code> call, <code>fromIterable</code> no longer
  contains the corresponding element. 
 <p>If the input <code>Iterable</code> is known to be a <code>List</code> or other <code>Collection</code>,
  consider <code>Lists.transform</code> and <code>Collections2.transform</code>.
  
 <p><b><code>Stream</code> equivalent:</b> <code>Stream.map</code>
 */
+ (id<JavaLangIterable>)transformWithJavaLangIterable:(id<JavaLangIterable> __nonnull)fromIterable
                      withComGoogleCommonBaseFunction:(id<ComGoogleCommonBaseFunction> __nonnull)function;

/*!
 @brief Returns an <code>Optional</code> containing the first element in <code>iterable</code> that satisfies the
  given predicate, if such an element exists.
 <p><b>Warning:</b> avoid using a <code>predicate</code> that matches <code>null</code>. If <code>null</code>
  is matched in <code>iterable</code>, a NullPointerException will be thrown. 
 <p><b><code>Stream</code> equivalent:</b> <code>stream.filter(predicate).findFirst()</code>
 @since 11.0
 */
+ (ComGoogleCommonBaseOptional *)tryFindWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable
                            withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate> __nonnull)predicate;

/*!
 @brief Simply returns its argument.
 @since 10.0
 */
+ (id<JavaLangIterable>)unmodifiableIterableWithComGoogleCommonCollectImmutableCollection:(ComGoogleCommonCollectImmutableCollection * __nonnull)iterable __attribute__((deprecated));

/*!
 @brief Returns an unmodifiable view of <code>iterable</code>.
 */
+ (id<JavaLangIterable>)unmodifiableIterableWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable;

#pragma mark Package-Private

/*!
 @brief Removes and returns the first matching element, or returns <code>null</code> if there is none.
 */
+ (id __nullable)removeFirstMatchingWithJavaLangIterable:(id<JavaLangIterable> __nonnull)removeFrom
                        withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate> __nonnull)predicate;

/*!
 @brief Copies an iterable's elements into an array.
 @param iterable the iterable to copy
 @return a newly-allocated array into which all the elements of the iterable have been copied
 */
+ (IOSObjectArray *)toArrayWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable;

+ (IOSObjectArray *)toArrayWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable
                              withNSObjectArray:(IOSObjectArray * __nonnull)array;

+ (id<ComGoogleCommonBaseFunction>)toIterator;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectIterables)

FOUNDATION_EXPORT id<JavaLangIterable> ComGoogleCommonCollectIterables_unmodifiableIterableWithJavaLangIterable_(id<JavaLangIterable> iterable);

FOUNDATION_EXPORT id<JavaLangIterable> ComGoogleCommonCollectIterables_unmodifiableIterableWithComGoogleCommonCollectImmutableCollection_(ComGoogleCommonCollectImmutableCollection *iterable);

FOUNDATION_EXPORT jint ComGoogleCommonCollectIterables_sizeWithJavaLangIterable_(id<JavaLangIterable> iterable);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectIterables_containsWithJavaLangIterable_withId_(id<JavaLangIterable> iterable, id element);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectIterables_removeAllWithJavaLangIterable_withJavaUtilCollection_(id<JavaLangIterable> removeFrom, id<JavaUtilCollection> elementsToRemove);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectIterables_retainAllWithJavaLangIterable_withJavaUtilCollection_(id<JavaLangIterable> removeFrom, id<JavaUtilCollection> elementsToRetain);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectIterables_removeIfWithJavaLangIterable_withComGoogleCommonBasePredicate_(id<JavaLangIterable> removeFrom, id<ComGoogleCommonBasePredicate> predicate);

FOUNDATION_EXPORT id ComGoogleCommonCollectIterables_removeFirstMatchingWithJavaLangIterable_withComGoogleCommonBasePredicate_(id<JavaLangIterable> removeFrom, id<ComGoogleCommonBasePredicate> predicate);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectIterables_elementsEqualWithJavaLangIterable_withJavaLangIterable_(id<JavaLangIterable> iterable1, id<JavaLangIterable> iterable2);

FOUNDATION_EXPORT NSString *ComGoogleCommonCollectIterables_toStringWithJavaLangIterable_(id<JavaLangIterable> iterable);

FOUNDATION_EXPORT id ComGoogleCommonCollectIterables_getOnlyElementWithJavaLangIterable_(id<JavaLangIterable> iterable);

FOUNDATION_EXPORT id ComGoogleCommonCollectIterables_getOnlyElementWithJavaLangIterable_withId_(id<JavaLangIterable> iterable, id defaultValue);

FOUNDATION_EXPORT IOSObjectArray *ComGoogleCommonCollectIterables_toArrayWithJavaLangIterable_withIOSClass_(id<JavaLangIterable> iterable, IOSClass *type);

FOUNDATION_EXPORT IOSObjectArray *ComGoogleCommonCollectIterables_toArrayWithJavaLangIterable_withNSObjectArray_(id<JavaLangIterable> iterable, IOSObjectArray *array);

FOUNDATION_EXPORT IOSObjectArray *ComGoogleCommonCollectIterables_toArrayWithJavaLangIterable_(id<JavaLangIterable> iterable);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectIterables_addAllWithJavaUtilCollection_withJavaLangIterable_(id<JavaUtilCollection> addTo, id<JavaLangIterable> elementsToAdd);

FOUNDATION_EXPORT jint ComGoogleCommonCollectIterables_frequencyWithJavaLangIterable_withId_(id<JavaLangIterable> iterable, id element);

FOUNDATION_EXPORT id<JavaLangIterable> ComGoogleCommonCollectIterables_cycleWithJavaLangIterable_(id<JavaLangIterable> iterable);

FOUNDATION_EXPORT id<JavaLangIterable> ComGoogleCommonCollectIterables_cycleWithNSObjectArray_(IOSObjectArray *elements);

FOUNDATION_EXPORT id<JavaLangIterable> ComGoogleCommonCollectIterables_concatWithJavaLangIterable_withJavaLangIterable_(id<JavaLangIterable> a, id<JavaLangIterable> b);

FOUNDATION_EXPORT id<JavaLangIterable> ComGoogleCommonCollectIterables_concatWithJavaLangIterable_withJavaLangIterable_withJavaLangIterable_(id<JavaLangIterable> a, id<JavaLangIterable> b, id<JavaLangIterable> c);

FOUNDATION_EXPORT id<JavaLangIterable> ComGoogleCommonCollectIterables_concatWithJavaLangIterable_withJavaLangIterable_withJavaLangIterable_withJavaLangIterable_(id<JavaLangIterable> a, id<JavaLangIterable> b, id<JavaLangIterable> c, id<JavaLangIterable> d);

FOUNDATION_EXPORT id<JavaLangIterable> ComGoogleCommonCollectIterables_concatWithJavaLangIterableArray_(IOSObjectArray *inputs);

FOUNDATION_EXPORT id<JavaLangIterable> ComGoogleCommonCollectIterables_concatWithJavaLangIterable_(id<JavaLangIterable> inputs);

FOUNDATION_EXPORT id<JavaLangIterable> ComGoogleCommonCollectIterables_partitionWithJavaLangIterable_withInt_(id<JavaLangIterable> iterable, jint size);

FOUNDATION_EXPORT id<JavaLangIterable> ComGoogleCommonCollectIterables_paddedPartitionWithJavaLangIterable_withInt_(id<JavaLangIterable> iterable, jint size);

FOUNDATION_EXPORT id<JavaLangIterable> ComGoogleCommonCollectIterables_filterWithJavaLangIterable_withComGoogleCommonBasePredicate_(id<JavaLangIterable> unfiltered, id<ComGoogleCommonBasePredicate> retainIfTrue);

FOUNDATION_EXPORT id<JavaLangIterable> ComGoogleCommonCollectIterables_filterWithJavaLangIterable_withIOSClass_(id<JavaLangIterable> unfiltered, IOSClass *desiredType);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectIterables_anyWithJavaLangIterable_withComGoogleCommonBasePredicate_(id<JavaLangIterable> iterable, id<ComGoogleCommonBasePredicate> predicate);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectIterables_allWithJavaLangIterable_withComGoogleCommonBasePredicate_(id<JavaLangIterable> iterable, id<ComGoogleCommonBasePredicate> predicate);

FOUNDATION_EXPORT id ComGoogleCommonCollectIterables_findWithJavaLangIterable_withComGoogleCommonBasePredicate_(id<JavaLangIterable> iterable, id<ComGoogleCommonBasePredicate> predicate);

FOUNDATION_EXPORT id ComGoogleCommonCollectIterables_findWithJavaLangIterable_withComGoogleCommonBasePredicate_withId_(id<JavaLangIterable> iterable, id<ComGoogleCommonBasePredicate> predicate, id defaultValue);

FOUNDATION_EXPORT ComGoogleCommonBaseOptional *ComGoogleCommonCollectIterables_tryFindWithJavaLangIterable_withComGoogleCommonBasePredicate_(id<JavaLangIterable> iterable, id<ComGoogleCommonBasePredicate> predicate);

FOUNDATION_EXPORT jint ComGoogleCommonCollectIterables_indexOfWithJavaLangIterable_withComGoogleCommonBasePredicate_(id<JavaLangIterable> iterable, id<ComGoogleCommonBasePredicate> predicate);

FOUNDATION_EXPORT id<JavaLangIterable> ComGoogleCommonCollectIterables_transformWithJavaLangIterable_withComGoogleCommonBaseFunction_(id<JavaLangIterable> fromIterable, id<ComGoogleCommonBaseFunction> function);

FOUNDATION_EXPORT id ComGoogleCommonCollectIterables_getWithJavaLangIterable_withInt_(id<JavaLangIterable> iterable, jint position);

FOUNDATION_EXPORT id ComGoogleCommonCollectIterables_getWithJavaLangIterable_withInt_withId_(id<JavaLangIterable> iterable, jint position, id defaultValue);

FOUNDATION_EXPORT id ComGoogleCommonCollectIterables_getFirstWithJavaLangIterable_withId_(id<JavaLangIterable> iterable, id defaultValue);

FOUNDATION_EXPORT id ComGoogleCommonCollectIterables_getLastWithJavaLangIterable_(id<JavaLangIterable> iterable);

FOUNDATION_EXPORT id ComGoogleCommonCollectIterables_getLastWithJavaLangIterable_withId_(id<JavaLangIterable> iterable, id defaultValue);

FOUNDATION_EXPORT id<JavaLangIterable> ComGoogleCommonCollectIterables_skipWithJavaLangIterable_withInt_(id<JavaLangIterable> iterable, jint numberToSkip);

FOUNDATION_EXPORT id<JavaLangIterable> ComGoogleCommonCollectIterables_limitWithJavaLangIterable_withInt_(id<JavaLangIterable> iterable, jint limitSize);

FOUNDATION_EXPORT id<JavaLangIterable> ComGoogleCommonCollectIterables_consumingIterableWithJavaLangIterable_(id<JavaLangIterable> iterable);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectIterables_isEmptyWithJavaLangIterable_(id<JavaLangIterable> iterable);

FOUNDATION_EXPORT id<JavaLangIterable> ComGoogleCommonCollectIterables_mergeSortedWithJavaLangIterable_withJavaUtilComparator_(id<JavaLangIterable> iterables, id<JavaUtilComparator> comparator);

FOUNDATION_EXPORT id<ComGoogleCommonBaseFunction> ComGoogleCommonCollectIterables_toIterator(void);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectIterables)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCollectIterables")
