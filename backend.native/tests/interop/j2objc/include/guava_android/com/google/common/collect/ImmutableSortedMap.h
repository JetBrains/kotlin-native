//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/collect/ImmutableSortedMap.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCollectImmutableSortedMap")
#ifdef RESTRICT_ComGoogleCommonCollectImmutableSortedMap
#define INCLUDE_ALL_ComGoogleCommonCollectImmutableSortedMap 0
#else
#define INCLUDE_ALL_ComGoogleCommonCollectImmutableSortedMap 1
#endif
#undef RESTRICT_ComGoogleCommonCollectImmutableSortedMap

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCollectImmutableSortedMap_) && (INCLUDE_ALL_ComGoogleCommonCollectImmutableSortedMap || defined(INCLUDE_ComGoogleCommonCollectImmutableSortedMap))
#define ComGoogleCommonCollectImmutableSortedMap_

#define RESTRICT_ComGoogleCommonCollectImmutableSortedMapFauxverideShim 1
#define INCLUDE_ComGoogleCommonCollectImmutableSortedMapFauxverideShim 1
#include "com/google/common/collect/ImmutableSortedMapFauxverideShim.h"

#define RESTRICT_JavaUtilNavigableMap 1
#define INCLUDE_JavaUtilNavigableMap 1
#include "java/util/NavigableMap.h"

@class ComGoogleCommonCollectImmutableCollection;
@class ComGoogleCommonCollectImmutableList;
@class ComGoogleCommonCollectImmutableSet;
@class ComGoogleCommonCollectImmutableSortedMap_Builder;
@class ComGoogleCommonCollectImmutableSortedSet;
@class ComGoogleCommonCollectRegularImmutableSortedSet;
@protocol JavaLangComparable;
@protocol JavaLangIterable;
@protocol JavaUtilComparator;
@protocol JavaUtilMap;
@protocol JavaUtilMap_Entry;
@protocol JavaUtilSortedMap;

/*!
 @brief A <code>NavigableMap</code> whose contents will never change, with many other important properties
  detailed at <code>ImmutableCollection</code>.
 <p><b>Warning:</b> as with any sorted collection, you are strongly advised not to use a <code>Comparator</code>
  or <code>Comparable</code> type whose comparison behavior is <i>inconsistent with
  equals</i>. That is, <code>a.compareTo(b)</code> or <code>comparator.compare(a, b)</code> should equal zero 
 <i>if and only if</i> <code>a.equals(b)</code>. If this advice is not followed, the resulting map will
  not correctly obey its specification. 
 <p>See the Guava User Guide article on <a href="https://github.com/google/guava/wiki/ImmutableCollectionsExplained">
  immutable collections</a>.
 @author Jared Levy
 @author Louis Wasserman
 @since 2.0 (implements <code>NavigableMap</code> since 12.0)
 */
@interface ComGoogleCommonCollectImmutableSortedMap : ComGoogleCommonCollectImmutableSortedMapFauxverideShim < JavaUtilNavigableMap >

#pragma mark Public

- (id<JavaUtilMap_Entry>)ceilingEntryWithId:(id __nonnull)key;

- (id)ceilingKeyWithId:(id __nonnull)key;

/*!
 @brief Returns the comparator that orders the keys, which is <code>Ordering.natural()</code> when the
  natural ordering of the keys is used.Note that its behavior is not consistent with <code>TreeMap.comparator()</code>
 , which returns <code>null</code> to indicate natural ordering.
 */
- (id<JavaUtilComparator>)comparator;

/*!
 @brief Returns an immutable map containing the given entries, with keys sorted by the provided
  comparator.
 <p>This method is not type-safe, as it may be called on a map with keys that are not mutually
  comparable.
 @throw NullPointerExceptionif any key or value in <code>map</code> is null
 @throw IllegalArgumentExceptionif any two keys are equal according to the comparator
 @since 19.0
 */
+ (ComGoogleCommonCollectImmutableSortedMap *)copyOfWithJavaLangIterable:(id<JavaLangIterable> __nonnull)entries OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns an immutable map containing the given entries, with keys sorted by the provided
  comparator.
 @throw NullPointerExceptionif any key or value in <code>map</code> is null
 @throw IllegalArgumentExceptionif any two keys are equal according to the comparator
 @since 19.0
 */
+ (ComGoogleCommonCollectImmutableSortedMap *)copyOfWithJavaLangIterable:(id<JavaLangIterable> __nonnull)entries
                                                  withJavaUtilComparator:(id<JavaUtilComparator> __nonnull)comparator OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns an immutable map containing the same entries as <code>map</code>, sorted by the natural
  ordering of the keys.
 <p>Despite the method name, this method attempts to avoid actually copying the data when it is
  safe to do so. The exact circumstances under which a copy will or will not be performed are
  undocumented and subject to change. 
 <p>This method is not type-safe, as it may be called on a map with keys that are not mutually
  comparable.
 @throw ClassCastExceptionif the keys in <code>map</code> are not mutually comparable
 @throw NullPointerExceptionif any key or value in <code>map</code> is null
 @throw IllegalArgumentExceptionif any two keys are equal according to their natural ordering
 */
+ (ComGoogleCommonCollectImmutableSortedMap *)copyOfWithJavaUtilMap:(id<JavaUtilMap> __nonnull)map OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns an immutable map containing the same entries as <code>map</code>, with keys sorted by the
  provided comparator.
 <p>Despite the method name, this method attempts to avoid actually copying the data when it is
  safe to do so. The exact circumstances under which a copy will or will not be performed are
  undocumented and subject to change.
 @throw NullPointerExceptionif any key or value in <code>map</code> is null
 @throw IllegalArgumentExceptionif any two keys are equal according to the comparator
 */
+ (ComGoogleCommonCollectImmutableSortedMap *)copyOfWithJavaUtilMap:(id<JavaUtilMap> __nonnull)map
                                             withJavaUtilComparator:(id<JavaUtilComparator> __nonnull)comparator OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns an immutable map containing the same entries as the provided sorted map, with the same
  ordering.
 <p>Despite the method name, this method attempts to avoid actually copying the data when it is
  safe to do so. The exact circumstances under which a copy will or will not be performed are
  undocumented and subject to change.
 @throw NullPointerExceptionif any key or value in <code>map</code> is null
 */
+ (ComGoogleCommonCollectImmutableSortedMap *)copyOfSortedWithJavaUtilSortedMap:(id<JavaUtilSortedMap> __nonnull)map OBJC_METHOD_FAMILY_NONE;

- (ComGoogleCommonCollectImmutableSortedSet *)descendingKeySet;

- (ComGoogleCommonCollectImmutableSortedMap *)descendingMap;

/*!
 @brief Returns an immutable set of the mappings in this map, sorted by the key ordering.
 */
- (ComGoogleCommonCollectImmutableSet *)entrySet;

- (id<JavaUtilMap_Entry>)firstEntry;

- (id)firstKey;

- (id<JavaUtilMap_Entry>)floorEntryWithId:(id __nonnull)key;

- (id)floorKeyWithId:(id __nonnull)key;

- (id)getWithId:(id __nullable)key;

/*!
 @brief This method returns a <code>ImmutableSortedMap</code>, consisting of the entries whose keys are less
  than <code>toKey</code>.
 <p>The <code>SortedMap.headMap</code> documentation states that a submap of a submap throws an 
 <code>IllegalArgumentException</code> if passed a <code>toKey</code> greater than an earlier <code>toKey</code>
 . However, this method doesn't throw an exception in that situation, but instead keeps
  the original <code>toKey</code>.
 */
- (ComGoogleCommonCollectImmutableSortedMap *)headMapWithId:(id __nonnull)toKey;

/*!
 @brief This method returns a <code>ImmutableSortedMap</code>, consisting of the entries whose keys are less
  than (or equal to, if <code>inclusive</code>) <code>toKey</code>.
 <p>The <code>SortedMap.headMap</code> documentation states that a submap of a submap throws an 
 <code>IllegalArgumentException</code> if passed a <code>toKey</code> greater than an earlier <code>toKey</code>
 . However, this method doesn't throw an exception in that situation, but instead keeps
  the original <code>toKey</code>.
 @since 12.0
 */
- (ComGoogleCommonCollectImmutableSortedMap *)headMapWithId:(id __nonnull)toKey
                                                withBoolean:(jboolean)inclusive;

- (id<JavaUtilMap_Entry>)higherEntryWithId:(id __nonnull)key;

- (id)higherKeyWithId:(id __nonnull)key;

/*!
 @brief Returns an immutable sorted set of the keys in this map.
 */
- (ComGoogleCommonCollectImmutableSortedSet *)keySet;

- (id<JavaUtilMap_Entry>)lastEntry;

- (id)lastKey;

- (id<JavaUtilMap_Entry>)lowerEntryWithId:(id __nonnull)key;

- (id)lowerKeyWithId:(id __nonnull)key;

/*!
 @brief Returns a builder that creates immutable sorted maps whose keys are ordered by their natural
  ordering.The sorted maps use <code>Ordering.natural()</code> as the comparator.
 */
+ (ComGoogleCommonCollectImmutableSortedMap_Builder *)naturalOrder;

- (ComGoogleCommonCollectImmutableSortedSet *)navigableKeySet;

/*!
 @brief Returns the empty sorted map.
 */
+ (ComGoogleCommonCollectImmutableSortedMap *)of;

/*!
 @brief Returns an immutable map containing a single entry.
 */
+ (ComGoogleCommonCollectImmutableSortedMap *)ofWithJavaLangComparable:(id<JavaLangComparable> __nonnull)k1
                                                                withId:(id __nonnull)v1;

/*!
 @brief Returns an immutable sorted map containing the given entries, sorted by the natural ordering of
  their keys.
 @throw IllegalArgumentExceptionif the two keys are equal according to their natural ordering
 */
+ (ComGoogleCommonCollectImmutableSortedMap *)ofWithJavaLangComparable:(id<JavaLangComparable> __nonnull)k1
                                                                withId:(id __nonnull)v1
                                                withJavaLangComparable:(id<JavaLangComparable> __nonnull)k2
                                                                withId:(id __nonnull)v2;

/*!
 @brief Returns an immutable sorted map containing the given entries, sorted by the natural ordering of
  their keys.
 @throw IllegalArgumentExceptionif any two keys are equal according to their natural ordering
 */
+ (ComGoogleCommonCollectImmutableSortedMap *)ofWithJavaLangComparable:(id<JavaLangComparable> __nonnull)k1
                                                                withId:(id __nonnull)v1
                                                withJavaLangComparable:(id<JavaLangComparable> __nonnull)k2
                                                                withId:(id __nonnull)v2
                                                withJavaLangComparable:(id<JavaLangComparable> __nonnull)k3
                                                                withId:(id __nonnull)v3;

/*!
 @brief Returns an immutable sorted map containing the given entries, sorted by the natural ordering of
  their keys.
 @throw IllegalArgumentExceptionif any two keys are equal according to their natural ordering
 */
+ (ComGoogleCommonCollectImmutableSortedMap *)ofWithJavaLangComparable:(id<JavaLangComparable> __nonnull)k1
                                                                withId:(id __nonnull)v1
                                                withJavaLangComparable:(id<JavaLangComparable> __nonnull)k2
                                                                withId:(id __nonnull)v2
                                                withJavaLangComparable:(id<JavaLangComparable> __nonnull)k3
                                                                withId:(id __nonnull)v3
                                                withJavaLangComparable:(id<JavaLangComparable> __nonnull)k4
                                                                withId:(id __nonnull)v4;

/*!
 @brief Returns an immutable sorted map containing the given entries, sorted by the natural ordering of
  their keys.
 @throw IllegalArgumentExceptionif any two keys are equal according to their natural ordering
 */
+ (ComGoogleCommonCollectImmutableSortedMap *)ofWithJavaLangComparable:(id<JavaLangComparable> __nonnull)k1
                                                                withId:(id __nonnull)v1
                                                withJavaLangComparable:(id<JavaLangComparable> __nonnull)k2
                                                                withId:(id __nonnull)v2
                                                withJavaLangComparable:(id<JavaLangComparable> __nonnull)k3
                                                                withId:(id __nonnull)v3
                                                withJavaLangComparable:(id<JavaLangComparable> __nonnull)k4
                                                                withId:(id __nonnull)v4
                                                withJavaLangComparable:(id<JavaLangComparable> __nonnull)k5
                                                                withId:(id __nonnull)v5;

/*!
 @brief Returns a builder that creates immutable sorted maps with an explicit comparator.If the
  comparator has a more general type than the map's keys, such as creating a <code>SortedMap<Integer, String></code>
  with a <code>Comparator<Number></code>, use the <code>Builder</code>
  constructor instead.
 @throw NullPointerExceptionif <code>comparator</code> is null
 */
+ (ComGoogleCommonCollectImmutableSortedMap_Builder *)orderedByWithJavaUtilComparator:(id<JavaUtilComparator> __nonnull)comparator;

/*!
 @brief Guaranteed to throw an exception and leave the map unmodified.
 @throw UnsupportedOperationExceptionalways
 */
- (id<JavaUtilMap_Entry>)pollFirstEntry __attribute__((deprecated));

/*!
 @brief Guaranteed to throw an exception and leave the map unmodified.
 @throw UnsupportedOperationExceptionalways
 */
- (id<JavaUtilMap_Entry>)pollLastEntry __attribute__((deprecated));

/*!
 @brief Returns a builder that creates immutable sorted maps whose keys are ordered by the reverse of
  their natural ordering.
 */
+ (ComGoogleCommonCollectImmutableSortedMap_Builder *)reverseOrder;

- (jint)size;

/*!
 @brief This method returns a <code>ImmutableSortedMap</code>, consisting of the entries whose keys ranges
  from <code>fromKey</code> to <code>toKey</code>, inclusive or exclusive as indicated by the boolean
  flags.
 <p>The <code>SortedMap.subMap</code> documentation states that a submap of a submap throws an <code>IllegalArgumentException</code>
  if passed a <code>fromKey</code> less than an earlier <code>fromKey</code>.
  However, this method doesn't throw an exception in that situation, but instead keeps the
  original <code>fromKey</code>. Similarly, this method keeps the original <code>toKey</code>, instead of
  throwing an exception, if passed a <code>toKey</code> greater than an earlier <code>toKey</code>.
 @since 12.0
 */
- (ComGoogleCommonCollectImmutableSortedMap *)subMapWithId:(id __nonnull)fromKey
                                               withBoolean:(jboolean)fromInclusive
                                                    withId:(id __nonnull)toKey
                                               withBoolean:(jboolean)toInclusive;

/*!
 @brief This method returns a <code>ImmutableSortedMap</code>, consisting of the entries whose keys ranges
  from <code>fromKey</code>, inclusive, to <code>toKey</code>, exclusive.
 <p>The <code>SortedMap.subMap</code> documentation states that a submap of a submap throws an <code>IllegalArgumentException</code>
  if passed a <code>fromKey</code> less than an earlier <code>fromKey</code>.
  However, this method doesn't throw an exception in that situation, but instead keeps the
  original <code>fromKey</code>. Similarly, this method keeps the original <code>toKey</code>, instead of
  throwing an exception, if passed a <code>toKey</code> greater than an earlier <code>toKey</code>.
 */
- (ComGoogleCommonCollectImmutableSortedMap *)subMapWithId:(id __nonnull)fromKey
                                                    withId:(id __nonnull)toKey;

/*!
 @brief This method returns a <code>ImmutableSortedMap</code>, consisting of the entries whose keys are
  greater than or equals to <code>fromKey</code>.
 <p>The <code>SortedMap.tailMap</code> documentation states that a submap of a submap throws an 
 <code>IllegalArgumentException</code> if passed a <code>fromKey</code> less than an earlier <code>fromKey</code>
 . However, this method doesn't throw an exception in that situation, but instead keeps
  the original <code>fromKey</code>.
 */
- (ComGoogleCommonCollectImmutableSortedMap *)tailMapWithId:(id __nonnull)fromKey;

/*!
 @brief This method returns a <code>ImmutableSortedMap</code>, consisting of the entries whose keys are
  greater than (or equal to, if <code>inclusive</code>) <code>fromKey</code>.
 <p>The <code>SortedMap.tailMap</code> documentation states that a submap of a submap throws an 
 <code>IllegalArgumentException</code> if passed a <code>fromKey</code> less than an earlier <code>fromKey</code>
 . However, this method doesn't throw an exception in that situation, but instead keeps
  the original <code>fromKey</code>.
 @since 12.0
 */
- (ComGoogleCommonCollectImmutableSortedMap *)tailMapWithId:(id __nonnull)fromKey
                                                withBoolean:(jboolean)inclusive;

/*!
 @brief Returns an immutable collection of the values in this map, sorted by the ordering of the
  corresponding keys.
 */
- (ComGoogleCommonCollectImmutableCollection *)values;

#pragma mark Package-Private

- (instancetype __nonnull)initWithComGoogleCommonCollectRegularImmutableSortedSet:(ComGoogleCommonCollectRegularImmutableSortedSet * __nonnull)keySet
                                          withComGoogleCommonCollectImmutableList:(ComGoogleCommonCollectImmutableList * __nonnull)valueList;

- (instancetype __nonnull)initWithComGoogleCommonCollectRegularImmutableSortedSet:(ComGoogleCommonCollectRegularImmutableSortedSet * __nonnull)keySet
                                          withComGoogleCommonCollectImmutableList:(ComGoogleCommonCollectImmutableList * __nonnull)valueList
                                     withComGoogleCommonCollectImmutableSortedMap:(ComGoogleCommonCollectImmutableSortedMap * __nonnull)descendingMap;

- (ComGoogleCommonCollectImmutableSet *)createEntrySet;

- (ComGoogleCommonCollectImmutableSet *)createKeySet;

- (ComGoogleCommonCollectImmutableCollection *)createValues;

+ (ComGoogleCommonCollectImmutableSortedMap *)emptyMapWithJavaUtilComparator:(id<JavaUtilComparator> __nonnull)comparator;

- (jboolean)isPartialView;

- (id)writeReplace;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initPackagePrivate NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonCollectImmutableSortedMap)

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedMap *ComGoogleCommonCollectImmutableSortedMap_emptyMapWithJavaUtilComparator_(id<JavaUtilComparator> comparator);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedMap *ComGoogleCommonCollectImmutableSortedMap_of(void);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedMap *ComGoogleCommonCollectImmutableSortedMap_ofWithJavaLangComparable_withId_(id<JavaLangComparable> k1, id v1);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedMap *ComGoogleCommonCollectImmutableSortedMap_ofWithJavaLangComparable_withId_withJavaLangComparable_withId_(id<JavaLangComparable> k1, id v1, id<JavaLangComparable> k2, id v2);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedMap *ComGoogleCommonCollectImmutableSortedMap_ofWithJavaLangComparable_withId_withJavaLangComparable_withId_withJavaLangComparable_withId_(id<JavaLangComparable> k1, id v1, id<JavaLangComparable> k2, id v2, id<JavaLangComparable> k3, id v3);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedMap *ComGoogleCommonCollectImmutableSortedMap_ofWithJavaLangComparable_withId_withJavaLangComparable_withId_withJavaLangComparable_withId_withJavaLangComparable_withId_(id<JavaLangComparable> k1, id v1, id<JavaLangComparable> k2, id v2, id<JavaLangComparable> k3, id v3, id<JavaLangComparable> k4, id v4);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedMap *ComGoogleCommonCollectImmutableSortedMap_ofWithJavaLangComparable_withId_withJavaLangComparable_withId_withJavaLangComparable_withId_withJavaLangComparable_withId_withJavaLangComparable_withId_(id<JavaLangComparable> k1, id v1, id<JavaLangComparable> k2, id v2, id<JavaLangComparable> k3, id v3, id<JavaLangComparable> k4, id v4, id<JavaLangComparable> k5, id v5);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedMap *ComGoogleCommonCollectImmutableSortedMap_copyOfWithJavaUtilMap_(id<JavaUtilMap> map);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedMap *ComGoogleCommonCollectImmutableSortedMap_copyOfWithJavaUtilMap_withJavaUtilComparator_(id<JavaUtilMap> map, id<JavaUtilComparator> comparator);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedMap *ComGoogleCommonCollectImmutableSortedMap_copyOfWithJavaLangIterable_(id<JavaLangIterable> entries);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedMap *ComGoogleCommonCollectImmutableSortedMap_copyOfWithJavaLangIterable_withJavaUtilComparator_(id<JavaLangIterable> entries, id<JavaUtilComparator> comparator);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedMap *ComGoogleCommonCollectImmutableSortedMap_copyOfSortedWithJavaUtilSortedMap_(id<JavaUtilSortedMap> map);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedMap_Builder *ComGoogleCommonCollectImmutableSortedMap_naturalOrder(void);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedMap_Builder *ComGoogleCommonCollectImmutableSortedMap_orderedByWithJavaUtilComparator_(id<JavaUtilComparator> comparator);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedMap_Builder *ComGoogleCommonCollectImmutableSortedMap_reverseOrder(void);

FOUNDATION_EXPORT void ComGoogleCommonCollectImmutableSortedMap_initWithComGoogleCommonCollectRegularImmutableSortedSet_withComGoogleCommonCollectImmutableList_(ComGoogleCommonCollectImmutableSortedMap *self, ComGoogleCommonCollectRegularImmutableSortedSet *keySet, ComGoogleCommonCollectImmutableList *valueList);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedMap *new_ComGoogleCommonCollectImmutableSortedMap_initWithComGoogleCommonCollectRegularImmutableSortedSet_withComGoogleCommonCollectImmutableList_(ComGoogleCommonCollectRegularImmutableSortedSet *keySet, ComGoogleCommonCollectImmutableList *valueList) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedMap *create_ComGoogleCommonCollectImmutableSortedMap_initWithComGoogleCommonCollectRegularImmutableSortedSet_withComGoogleCommonCollectImmutableList_(ComGoogleCommonCollectRegularImmutableSortedSet *keySet, ComGoogleCommonCollectImmutableList *valueList);

FOUNDATION_EXPORT void ComGoogleCommonCollectImmutableSortedMap_initWithComGoogleCommonCollectRegularImmutableSortedSet_withComGoogleCommonCollectImmutableList_withComGoogleCommonCollectImmutableSortedMap_(ComGoogleCommonCollectImmutableSortedMap *self, ComGoogleCommonCollectRegularImmutableSortedSet *keySet, ComGoogleCommonCollectImmutableList *valueList, ComGoogleCommonCollectImmutableSortedMap *descendingMap);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedMap *new_ComGoogleCommonCollectImmutableSortedMap_initWithComGoogleCommonCollectRegularImmutableSortedSet_withComGoogleCommonCollectImmutableList_withComGoogleCommonCollectImmutableSortedMap_(ComGoogleCommonCollectRegularImmutableSortedSet *keySet, ComGoogleCommonCollectImmutableList *valueList, ComGoogleCommonCollectImmutableSortedMap *descendingMap) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedMap *create_ComGoogleCommonCollectImmutableSortedMap_initWithComGoogleCommonCollectRegularImmutableSortedSet_withComGoogleCommonCollectImmutableList_withComGoogleCommonCollectImmutableSortedMap_(ComGoogleCommonCollectRegularImmutableSortedSet *keySet, ComGoogleCommonCollectImmutableList *valueList, ComGoogleCommonCollectImmutableSortedMap *descendingMap);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectImmutableSortedMap)

#endif

#if !defined (ComGoogleCommonCollectImmutableSortedMap_Builder_) && (INCLUDE_ALL_ComGoogleCommonCollectImmutableSortedMap || defined(INCLUDE_ComGoogleCommonCollectImmutableSortedMap_Builder))
#define ComGoogleCommonCollectImmutableSortedMap_Builder_

#define RESTRICT_ComGoogleCommonCollectImmutableMap 1
#define INCLUDE_ComGoogleCommonCollectImmutableMap_Builder 1
#include "com/google/common/collect/ImmutableMap.h"

@class ComGoogleCommonCollectImmutableSortedMap;
@protocol JavaLangIterable;
@protocol JavaUtilComparator;
@protocol JavaUtilMap;
@protocol JavaUtilMap_Entry;

/*!
 @brief A builder for creating immutable sorted map instances, especially <code>public static final</code>
  maps ("constant maps").Example:
  
 @code
 static final ImmutableSortedMap<Integer, String> INT_TO_WORD =
      new ImmutableSortedMap.Builder<Integer, String>(Ordering.natural())
          .put(1, "one")
          .put(2, "two")
          .put(3, "three")
          .build(); 
 
@endcode
  
 <p>For <i>small</i> immutable sorted maps, the <code>ImmutableSortedMap.of()</code> methods are even
  more convenient.
 <p>Builder instances can be reused - it is safe to call <code>build</code> multiple times to build
  multiple maps in series. Each map is a superset of the maps created before it.
 @since 2.0
 */
@interface ComGoogleCommonCollectImmutableSortedMap_Builder : ComGoogleCommonCollectImmutableMap_Builder

#pragma mark Public

/*!
 @brief Creates a new builder.The returned builder is equivalent to the builder generated by <code>ImmutableSortedMap.orderedBy</code>
 .
 */
- (instancetype __nonnull)initWithJavaUtilComparator:(id<JavaUtilComparator> __nonnull)comparator;

/*!
 @brief Returns a newly-created immutable sorted map.
 @throw IllegalArgumentExceptionif any two keys are equal according to the comparator (which
      might be the keys' natural order)
 */
- (ComGoogleCommonCollectImmutableSortedMap *)build;

/*!
 @brief Throws an <code>UnsupportedOperationException</code>.
 @since 19.0
 */
- (ComGoogleCommonCollectImmutableSortedMap_Builder *)orderEntriesByValueWithJavaUtilComparator:(id<JavaUtilComparator> __nonnull)valueComparator __attribute__((deprecated));

/*!
 @brief Adds the given <code>entry</code> to the map, making it immutable if necessary.Duplicate keys,
  according to the comparator (which might be the keys' natural order), are not allowed, and
  will cause <code>build</code> to fail.
 @since 11.0
 */
- (ComGoogleCommonCollectImmutableSortedMap_Builder *)putWithJavaUtilMap_Entry:(id<JavaUtilMap_Entry> __nonnull)entry_;

/*!
 @brief Associates <code>key</code> with <code>value</code> in the built map.Duplicate keys, according to the
  comparator (which might be the keys' natural order), are not allowed, and will cause <code>build</code>
  to fail.
 */
- (ComGoogleCommonCollectImmutableSortedMap_Builder *)putWithId:(id __nonnull)key
                                                         withId:(id __nonnull)value;

/*!
 @brief Adds all the given entries to the built map.Duplicate keys, according to the comparator
  (which might be the keys' natural order), are not allowed, and will cause <code>build</code> to
  fail.
 @throw NullPointerExceptionif any key, value, or entry is null
 @since 19.0
 */
- (ComGoogleCommonCollectImmutableSortedMap_Builder *)putAllWithJavaLangIterable:(id<JavaLangIterable> __nonnull)entries;

/*!
 @brief Associates all of the given map's keys and values in the built map.Duplicate keys, according
  to the comparator (which might be the keys' natural order), are not allowed, and will cause 
 <code>build</code> to fail.
 @throw NullPointerExceptionif any key or value in <code>map</code> is null
 */
- (ComGoogleCommonCollectImmutableSortedMap_Builder *)putAllWithJavaUtilMap:(id<JavaUtilMap> __nonnull)map;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithInt:(jint)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectImmutableSortedMap_Builder)

FOUNDATION_EXPORT void ComGoogleCommonCollectImmutableSortedMap_Builder_initWithJavaUtilComparator_(ComGoogleCommonCollectImmutableSortedMap_Builder *self, id<JavaUtilComparator> comparator);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedMap_Builder *new_ComGoogleCommonCollectImmutableSortedMap_Builder_initWithJavaUtilComparator_(id<JavaUtilComparator> comparator) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedMap_Builder *create_ComGoogleCommonCollectImmutableSortedMap_Builder_initWithJavaUtilComparator_(id<JavaUtilComparator> comparator);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectImmutableSortedMap_Builder)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCollectImmutableSortedMap")
