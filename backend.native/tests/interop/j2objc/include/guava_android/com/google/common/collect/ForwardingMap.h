//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/collect/ForwardingMap.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCollectForwardingMap")
#ifdef RESTRICT_ComGoogleCommonCollectForwardingMap
#define INCLUDE_ALL_ComGoogleCommonCollectForwardingMap 0
#else
#define INCLUDE_ALL_ComGoogleCommonCollectForwardingMap 1
#endif
#undef RESTRICT_ComGoogleCommonCollectForwardingMap

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCollectForwardingMap_) && (INCLUDE_ALL_ComGoogleCommonCollectForwardingMap || defined(INCLUDE_ComGoogleCommonCollectForwardingMap))
#define ComGoogleCommonCollectForwardingMap_

#define RESTRICT_ComGoogleCommonCollectForwardingObject 1
#define INCLUDE_ComGoogleCommonCollectForwardingObject 1
#include "com/google/common/collect/ForwardingObject.h"

#define RESTRICT_JavaUtilMap 1
#define INCLUDE_JavaUtilMap 1
#include "java/util/Map.h"

@protocol JavaUtilCollection;
@protocol JavaUtilFunctionBiConsumer;
@protocol JavaUtilFunctionBiFunction;
@protocol JavaUtilFunctionFunction;
@protocol JavaUtilSet;

/*!
 @brief A map which forwards all its method calls to another map.Subclasses should override one or more
  methods to modify the behavior of the backing map as desired per the <a href="http://en.wikipedia.org/wiki/Decorator_pattern">
 decorator pattern</a>.
 <p><b>Warning:</b> The methods of <code>ForwardingMap</code> forward <i>indiscriminately</i> to the
  methods of the delegate. For example, overriding <code>put</code> alone <i>will not</i> change the
  behavior of <code>putAll</code>, which can lead to unexpected behavior. In this case, you should
  override <code>putAll</code> as well, either providing your own implementation, or delegating to the
  provided <code>standardPutAll</code> method. 
 <p><b><code>default</code> method warning:</b> This class does <i>not</i> forward calls to <code>default</code>
  methods. Instead, it inherits their default implementations. When those implementations
  invoke methods, they invoke methods on the <code>ForwardingMap</code>.
  
 <p>Each of the <code>standard</code> methods, where appropriate, use <code>Objects.equal</code> to test
  equality for both keys and values. This may not be the desired behavior for map implementations
  that use non-standard notions of key equality, such as a <code>SortedMap</code> whose comparator is
  not consistent with <code>equals</code>.
  
 <p>The <code>standard</code> methods and the collection views they return are not guaranteed to be
  thread-safe, even when all of the methods that they depend on are thread-safe.
 @author Kevin Bourrillion
 @author Jared Levy
 @author Louis Wasserman
 @since 2.0
 */
@interface ComGoogleCommonCollectForwardingMap : ComGoogleCommonCollectForwardingObject < JavaUtilMap >

#pragma mark Public

- (void)clear;

- (jboolean)containsKeyWithId:(id __nullable)key;

- (jboolean)containsValueWithId:(id __nullable)value;

- (id<JavaUtilSet>)entrySet;

- (jboolean)isEqual:(id __nullable)object;

- (id)getWithId:(id __nullable)key;

- (NSUInteger)hash;

- (jboolean)isEmpty;

- (id<JavaUtilSet>)keySet;

- (id)putWithId:(id __nonnull)key
         withId:(id __nonnull)value;

- (void)putAllWithJavaUtilMap:(id<JavaUtilMap> __nonnull)map;

- (id)removeWithId:(id __nonnull)object;

- (jint)size;

- (id<JavaUtilCollection>)values;

#pragma mark Protected

/*!
 @brief Constructor for use by subclasses.
 */
- (instancetype __nonnull)init;

- (id<JavaUtilMap>)delegate;

/*!
 @brief A sensible definition of <code>clear</code> in terms of the <code>iterator</code> method of <code>entrySet</code>
 .In many cases, you may wish to override <code>clear</code> to forward to this
  implementation.
 @since 7.0
 */
- (void)standardClear;

/*!
 @brief A sensible, albeit inefficient, definition of <code>containsKey</code> in terms of the <code>iterator</code>
  method of <code>entrySet</code>.If you override <code>entrySet</code>, you may wish to
  override <code>containsKey</code> to forward to this implementation.
 @since 7.0
 */
- (jboolean)standardContainsKeyWithId:(id __nullable)key;

/*!
 @brief A sensible definition of <code>containsValue</code> in terms of the <code>iterator</code> method of 
 <code>entrySet</code>.If you override <code>entrySet</code>, you may wish to override <code>containsValue</code>
  to forward to this implementation.
 @since 7.0
 */
- (jboolean)standardContainsValueWithId:(id __nullable)value;

/*!
 @brief A sensible definition of <code>equals</code> in terms of the <code>equals</code> method of <code>entrySet</code>
 .If you override <code>entrySet</code>, you may wish to override <code>equals</code> to
  forward to this implementation.
 @since 7.0
 */
- (jboolean)standardEqualsWithId:(id __nullable)object;

/*!
 @brief A sensible definition of <code>hashCode</code> in terms of the <code>iterator</code> method of <code>entrySet</code>
 .If you override <code>entrySet</code>, you may wish to override <code>hashCode</code> to
  forward to this implementation.
 @since 7.0
 */
- (jint)standardHashCode;

/*!
 @brief A sensible definition of <code>isEmpty</code> in terms of the <code>iterator</code> method of <code>entrySet</code>
 .If you override <code>entrySet</code>, you may wish to override <code>isEmpty</code> to
  forward to this implementation.
 @since 7.0
 */
- (jboolean)standardIsEmpty;

/*!
 @brief A sensible definition of <code>putAll(Map)</code> in terms of <code>put(Object, Object)</code>.If you
  override <code>put(Object, Object)</code>, you may wish to override <code>putAll(Map)</code> to forward
  to this implementation.
 @since 7.0
 */
- (void)standardPutAllWithJavaUtilMap:(id<JavaUtilMap> __nonnull)map;

/*!
 @brief A sensible, albeit inefficient, definition of <code>remove</code> in terms of the <code>iterator</code>
  method of <code>entrySet</code>.If you override <code>entrySet</code>, you may wish to override <code>remove</code>
  to forward to this implementation.
 <p>Alternately, you may wish to override <code>remove</code> with <code>keySet().remove</code>, assuming
  that approach would not lead to an infinite loop.
 @since 7.0
 */
- (id)standardRemoveWithId:(id __nullable)key;

/*!
 @brief A sensible definition of <code>toString</code> in terms of the <code>iterator</code> method of <code>entrySet</code>
 .If you override <code>entrySet</code>, you may wish to override <code>toString</code> to
  forward to this implementation.
 @since 7.0
 */
- (NSString *)standardToString;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectForwardingMap)

FOUNDATION_EXPORT void ComGoogleCommonCollectForwardingMap_init(ComGoogleCommonCollectForwardingMap *self);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectForwardingMap)

#endif

#if !defined (ComGoogleCommonCollectForwardingMap_StandardKeySet_) && (INCLUDE_ALL_ComGoogleCommonCollectForwardingMap || defined(INCLUDE_ComGoogleCommonCollectForwardingMap_StandardKeySet))
#define ComGoogleCommonCollectForwardingMap_StandardKeySet_

#define RESTRICT_ComGoogleCommonCollectMaps 1
#define INCLUDE_ComGoogleCommonCollectMaps_KeySet 1
#include "com/google/common/collect/Maps.h"

@class ComGoogleCommonCollectForwardingMap;
@protocol JavaUtilMap;

/*!
 @brief A sensible implementation of <code>Map.keySet</code> in terms of the following methods: <code>ForwardingMap.clear</code>
 , <code>ForwardingMap.containsKey</code>, <code>ForwardingMap.isEmpty</code>, <code>ForwardingMap.remove</code>
 , <code>ForwardingMap.size</code>, and the <code>Set.iterator</code> method of 
 <code>ForwardingMap.entrySet</code>.In many cases, you may wish to override <code>ForwardingMap.keySet</code>
  to forward to this implementation or a subclass thereof.
 @since 10.0
 */
@interface ComGoogleCommonCollectForwardingMap_StandardKeySet : ComGoogleCommonCollectMaps_KeySet

#pragma mark Public

/*!
 @brief Constructor for use by subclasses.
 */
- (instancetype __nonnull)initWithComGoogleCommonCollectForwardingMap:(ComGoogleCommonCollectForwardingMap * __nonnull)outer$;

#pragma mark Package-Private

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaUtilMap:(id<JavaUtilMap> __nonnull)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectForwardingMap_StandardKeySet)

FOUNDATION_EXPORT void ComGoogleCommonCollectForwardingMap_StandardKeySet_initWithComGoogleCommonCollectForwardingMap_(ComGoogleCommonCollectForwardingMap_StandardKeySet *self, ComGoogleCommonCollectForwardingMap *outer$);

FOUNDATION_EXPORT ComGoogleCommonCollectForwardingMap_StandardKeySet *new_ComGoogleCommonCollectForwardingMap_StandardKeySet_initWithComGoogleCommonCollectForwardingMap_(ComGoogleCommonCollectForwardingMap *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectForwardingMap_StandardKeySet *create_ComGoogleCommonCollectForwardingMap_StandardKeySet_initWithComGoogleCommonCollectForwardingMap_(ComGoogleCommonCollectForwardingMap *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectForwardingMap_StandardKeySet)

#endif

#if !defined (ComGoogleCommonCollectForwardingMap_StandardValues_) && (INCLUDE_ALL_ComGoogleCommonCollectForwardingMap || defined(INCLUDE_ComGoogleCommonCollectForwardingMap_StandardValues))
#define ComGoogleCommonCollectForwardingMap_StandardValues_

#define RESTRICT_ComGoogleCommonCollectMaps 1
#define INCLUDE_ComGoogleCommonCollectMaps_Values 1
#include "com/google/common/collect/Maps.h"

@class ComGoogleCommonCollectForwardingMap;
@protocol JavaUtilMap;

/*!
 @brief A sensible implementation of <code>Map.values</code> in terms of the following methods: <code>ForwardingMap.clear</code>
 , <code>ForwardingMap.containsValue</code>, <code>ForwardingMap.isEmpty</code>,
  <code>ForwardingMap.size</code>, and the <code>Set.iterator</code> method of <code>ForwardingMap.entrySet</code>
 .In many cases, you may wish to override <code>ForwardingMap.values</code>
  to forward to this implementation or a subclass thereof.
 @since 10.0
 */
@interface ComGoogleCommonCollectForwardingMap_StandardValues : ComGoogleCommonCollectMaps_Values

#pragma mark Public

/*!
 @brief Constructor for use by subclasses.
 */
- (instancetype __nonnull)initWithComGoogleCommonCollectForwardingMap:(ComGoogleCommonCollectForwardingMap * __nonnull)outer$;

#pragma mark Package-Private

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaUtilMap:(id<JavaUtilMap> __nonnull)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectForwardingMap_StandardValues)

FOUNDATION_EXPORT void ComGoogleCommonCollectForwardingMap_StandardValues_initWithComGoogleCommonCollectForwardingMap_(ComGoogleCommonCollectForwardingMap_StandardValues *self, ComGoogleCommonCollectForwardingMap *outer$);

FOUNDATION_EXPORT ComGoogleCommonCollectForwardingMap_StandardValues *new_ComGoogleCommonCollectForwardingMap_StandardValues_initWithComGoogleCommonCollectForwardingMap_(ComGoogleCommonCollectForwardingMap *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectForwardingMap_StandardValues *create_ComGoogleCommonCollectForwardingMap_StandardValues_initWithComGoogleCommonCollectForwardingMap_(ComGoogleCommonCollectForwardingMap *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectForwardingMap_StandardValues)

#endif

#if !defined (ComGoogleCommonCollectForwardingMap_StandardEntrySet_) && (INCLUDE_ALL_ComGoogleCommonCollectForwardingMap || defined(INCLUDE_ComGoogleCommonCollectForwardingMap_StandardEntrySet))
#define ComGoogleCommonCollectForwardingMap_StandardEntrySet_

#define RESTRICT_ComGoogleCommonCollectMaps 1
#define INCLUDE_ComGoogleCommonCollectMaps_EntrySet 1
#include "com/google/common/collect/Maps.h"

@class ComGoogleCommonCollectForwardingMap;
@protocol JavaUtilMap;

/*!
 @brief A sensible implementation of <code>Map.entrySet</code> in terms of the following methods: <code>ForwardingMap.clear</code>
 , <code>ForwardingMap.containsKey</code>, <code>ForwardingMap.get</code>, <code>ForwardingMap.isEmpty</code>
 , <code>ForwardingMap.remove</code>, and <code>ForwardingMap.size</code>.In many
  cases, you may wish to override <code>entrySet</code> to forward to this implementation or a
  subclass thereof.
 @since 10.0
 */
@interface ComGoogleCommonCollectForwardingMap_StandardEntrySet : ComGoogleCommonCollectMaps_EntrySet

#pragma mark Public

/*!
 @brief Constructor for use by subclasses.
 */
- (instancetype __nonnull)initWithComGoogleCommonCollectForwardingMap:(ComGoogleCommonCollectForwardingMap * __nonnull)outer$;

#pragma mark Package-Private

- (id<JavaUtilMap>)map;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectForwardingMap_StandardEntrySet)

FOUNDATION_EXPORT void ComGoogleCommonCollectForwardingMap_StandardEntrySet_initWithComGoogleCommonCollectForwardingMap_(ComGoogleCommonCollectForwardingMap_StandardEntrySet *self, ComGoogleCommonCollectForwardingMap *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectForwardingMap_StandardEntrySet)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCollectForwardingMap")
