//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/collect/ForwardingCollection.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCollectForwardingCollection")
#ifdef RESTRICT_ComGoogleCommonCollectForwardingCollection
#define INCLUDE_ALL_ComGoogleCommonCollectForwardingCollection 0
#else
#define INCLUDE_ALL_ComGoogleCommonCollectForwardingCollection 1
#endif
#undef RESTRICT_ComGoogleCommonCollectForwardingCollection

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCollectForwardingCollection_) && (INCLUDE_ALL_ComGoogleCommonCollectForwardingCollection || defined(INCLUDE_ComGoogleCommonCollectForwardingCollection))
#define ComGoogleCommonCollectForwardingCollection_

#define RESTRICT_ComGoogleCommonCollectForwardingObject 1
#define INCLUDE_ComGoogleCommonCollectForwardingObject 1
#include "com/google/common/collect/ForwardingObject.h"

#define RESTRICT_JavaUtilCollection 1
#define INCLUDE_JavaUtilCollection 1
#include "java/util/Collection.h"

@class IOSObjectArray;
@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilFunctionPredicate;
@protocol JavaUtilIterator;
@protocol JavaUtilSpliterator;
@protocol JavaUtilStreamStream;

/*!
 @brief A collection which forwards all its method calls to another collection.Subclasses should
  override one or more methods to modify the behavior of the backing collection as desired per the 
 <a href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</a>.
 <p><b>Warning:</b> The methods of <code>ForwardingCollection</code> forward <b>indiscriminately</b> to
  the methods of the delegate. For example, overriding <code>add</code> alone <b>will not</b> change
  the behavior of <code>addAll</code>, which can lead to unexpected behavior. In this case, you should
  override <code>addAll</code> as well, either providing your own implementation, or delegating to the
  provided <code>standardAddAll</code> method. 
 <p><b><code>default</code> method warning:</b> This class does <i>not</i> forward calls to <code>default</code>
  methods. Instead, it inherits their default implementations. When those implementations
  invoke methods, they invoke methods on the <code>ForwardingCollection</code>.
  
 <p>The <code>standard</code> methods are not guaranteed to be thread-safe, even when all of the
  methods that they depend on are thread-safe.
 @author Kevin Bourrillion
 @author Louis Wasserman
 @since 2.0
 */
@interface ComGoogleCommonCollectForwardingCollection : ComGoogleCommonCollectForwardingObject < JavaUtilCollection >

#pragma mark Public

- (jboolean)addWithId:(id __nonnull)element;

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection> __nonnull)collection;

- (void)clear;

- (jboolean)containsWithId:(id __nonnull)object;

- (jboolean)containsAllWithJavaUtilCollection:(id<JavaUtilCollection> __nonnull)collection;

- (jboolean)isEmpty;

- (id<JavaUtilIterator>)iterator;

- (jboolean)removeWithId:(id __nonnull)object;

- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection> __nonnull)collection;

- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection> __nonnull)collection;

- (jint)size;

- (IOSObjectArray *)toArray;

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray * __nonnull)array;

#pragma mark Protected

/*!
 @brief Constructor for use by subclasses.
 */
- (instancetype __nonnull)init;

- (id<JavaUtilCollection>)delegate;

/*!
 @brief A sensible definition of <code>addAll</code> in terms of <code>add</code>.If you override <code>add</code>
 , you may wish to override <code>addAll</code> to forward to this implementation.
 @since 7.0
 */
- (jboolean)standardAddAllWithJavaUtilCollection:(id<JavaUtilCollection> __nonnull)collection;

/*!
 @brief A sensible definition of <code>clear</code> in terms of <code>iterator</code>, using the iterator's 
 <code>remove</code> method.If you override <code>iterator</code>, you may wish to override <code>clear</code>
  to forward to this implementation.
 @since 7.0
 */
- (void)standardClear;

/*!
 @brief A sensible definition of <code>contains</code> in terms of <code>iterator</code>.If you override 
 <code>iterator</code>, you may wish to override <code>contains</code> to forward to this
  implementation.
 @since 7.0
 */
- (jboolean)standardContainsWithId:(id __nullable)object;

/*!
 @brief A sensible definition of <code>containsAll</code> in terms of <code>contains</code> .If you override 
 <code>contains</code>, you may wish to override <code>containsAll</code> to forward to this
  implementation.
 @since 7.0
 */
- (jboolean)standardContainsAllWithJavaUtilCollection:(id<JavaUtilCollection> __nonnull)collection;

/*!
 @brief A sensible definition of <code>isEmpty</code> as <code>!
 iterator().hasNext</code>.If you override 
 <code>isEmpty</code>, you may wish to override <code>isEmpty</code> to forward to this implementation.
  Alternately, it may be more efficient to implement <code>isEmpty</code> as <code>size() == 0</code>.
 @since 7.0
 */
- (jboolean)standardIsEmpty;

/*!
 @brief A sensible definition of <code>remove</code> in terms of <code>iterator</code>, using the iterator's 
 <code>remove</code> method.If you override <code>iterator</code>, you may wish to override <code>remove</code>
  to forward to this implementation.
 @since 7.0
 */
- (jboolean)standardRemoveWithId:(id __nullable)object;

/*!
 @brief A sensible definition of <code>removeAll</code> in terms of <code>iterator</code>, using the iterator's 
 <code>remove</code> method.If you override <code>iterator</code>, you may wish to override <code>removeAll</code>
  to forward to this implementation.
 @since 7.0
 */
- (jboolean)standardRemoveAllWithJavaUtilCollection:(id<JavaUtilCollection> __nonnull)collection;

/*!
 @brief A sensible definition of <code>retainAll</code> in terms of <code>iterator</code>, using the iterator's 
 <code>remove</code> method.If you override <code>iterator</code>, you may wish to override <code>retainAll</code>
  to forward to this implementation.
 @since 7.0
 */
- (jboolean)standardRetainAllWithJavaUtilCollection:(id<JavaUtilCollection> __nonnull)collection;

/*!
 @brief A sensible definition of <code>toArray()</code> in terms of <code>toArray(Object[])</code>.If you
  override <code>toArray(Object[])</code>, you may wish to override <code>toArray</code> to forward to
  this implementation.
 @since 7.0
 */
- (IOSObjectArray *)standardToArray;

/*!
 @brief A sensible definition of <code>toArray(Object[])</code> in terms of <code>size</code> and <code>iterator</code>
 .If you override either of these methods, you may wish to override <code>toArray</code>
  to forward to this implementation.
 @since 7.0
 */
- (IOSObjectArray *)standardToArrayWithNSObjectArray:(IOSObjectArray * __nonnull)array;

/*!
 @brief A sensible definition of <code>toString</code> in terms of <code>iterator</code>.If you override 
 <code>iterator</code>, you may wish to override <code>toString</code> to forward to this
  implementation.
 @since 7.0
 */
- (NSString *)standardToString;

#pragma mark Package-Private

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectForwardingCollection)

FOUNDATION_EXPORT void ComGoogleCommonCollectForwardingCollection_init(ComGoogleCommonCollectForwardingCollection *self);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectForwardingCollection)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCollectForwardingCollection")
