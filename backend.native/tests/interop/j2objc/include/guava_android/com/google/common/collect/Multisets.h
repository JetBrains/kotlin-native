//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/collect/Multisets.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCollectMultisets")
#ifdef RESTRICT_ComGoogleCommonCollectMultisets
#define INCLUDE_ALL_ComGoogleCommonCollectMultisets 0
#else
#define INCLUDE_ALL_ComGoogleCommonCollectMultisets 1
#endif
#undef RESTRICT_ComGoogleCommonCollectMultisets
#ifdef INCLUDE_ComGoogleCommonCollectMultisets_ImmutableEntry
#define INCLUDE_ComGoogleCommonCollectMultisets_AbstractEntry 1
#endif

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCollectMultisets_) && (INCLUDE_ALL_ComGoogleCommonCollectMultisets || defined(INCLUDE_ComGoogleCommonCollectMultisets))
#define ComGoogleCommonCollectMultisets_

@class ComGoogleCommonCollectImmutableMultiset;
@protocol ComGoogleCommonBasePredicate;
@protocol ComGoogleCommonCollectMultiset;
@protocol ComGoogleCommonCollectMultiset_Entry;
@protocol ComGoogleCommonCollectSortedMultiset;
@protocol JavaLangIterable;
@protocol JavaUtilCollection;
@protocol JavaUtilIterator;

/*!
 @brief Provides static utility methods for creating and working with <code>Multiset</code> instances.
 <p>See the Guava User Guide article on <a href="https://github.com/google/guava/wiki/CollectionUtilitiesExplained#multisets">
  <code>Multisets</code>
 </a>.
 @author Kevin Bourrillion
 @author Mike Bostock
 @author Louis Wasserman
 @since 2.0
 */
@interface ComGoogleCommonCollectMultisets : NSObject

#pragma mark Public

/*!
 @brief Returns <code>true</code> if <code>subMultiset.count(o) <= superMultiset.count(o)</code> for all <code>o</code>
 .
 @since 10.0
 */
+ (jboolean)containsOccurrencesWithComGoogleCommonCollectMultiset:(id<ComGoogleCommonCollectMultiset> __nonnull)superMultiset
                               withComGoogleCommonCollectMultiset:(id<ComGoogleCommonCollectMultiset> __nonnull)subMultiset;

/*!
 @brief Returns a copy of <code>multiset</code> as an <code>ImmutableMultiset</code> whose iteration order is
  highest count first, with ties broken by the iteration order of the original multiset.
 @since 11.0
 */
+ (ComGoogleCommonCollectImmutableMultiset *)copyHighestCountFirstWithComGoogleCommonCollectMultiset:(id<ComGoogleCommonCollectMultiset> __nonnull)multiset OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns an unmodifiable view of the difference of two multisets.In the returned multiset, the
  count of each element is the result of the <i>zero-truncated subtraction</i> of its count in
  the second multiset from its count in the first multiset, with elements that would have a count
  of 0 not included.
 The iteration order of the returned multiset matches that of the element set of 
 <code>multiset1</code>, with repeated occurrences of the same element appearing consecutively. 
 <p>Results are undefined if <code>multiset1</code> and <code>multiset2</code> are based on different
  equivalence relations (as <code>HashMultiset</code> and <code>TreeMultiset</code> are).
 @since 14.0
 */
+ (id<ComGoogleCommonCollectMultiset>)differenceWithComGoogleCommonCollectMultiset:(id<ComGoogleCommonCollectMultiset> __nonnull)multiset1
                                                withComGoogleCommonCollectMultiset:(id<ComGoogleCommonCollectMultiset> __nonnull)multiset2;

/*!
 @brief Returns a view of the elements of <code>unfiltered</code> that satisfy a predicate.The returned
  multiset is a live view of <code>unfiltered</code>; changes to one affect the other.
 <p>The resulting multiset's iterators, and those of its <code>entrySet()</code> and <code>elementSet()</code>
 , do not support <code>remove()</code>. However, all other multiset methods supported
  by <code>unfiltered</code> are supported by the returned multiset. When given an element that
  doesn't satisfy the predicate, the multiset's <code>add()</code> and <code>addAll()</code> methods throw
  an <code>IllegalArgumentException</code>. When methods such as <code>removeAll()</code> and <code>clear()</code>
  are called on the filtered multiset, only elements that satisfy the filter will be
  removed from the underlying multiset. 
 <p>The returned multiset isn't threadsafe or serializable, even if <code>unfiltered</code> is. 
 <p>Many of the filtered multiset's methods, such as <code>size()</code>, iterate across every
  element in the underlying multiset and determine which elements satisfy the filter. When a live
  view is <i>not</i> needed, it may be faster to copy the returned multiset and use the copy. 
 <p><b>Warning:</b> <code>predicate</code> must be <i>consistent with equals</i>, as documented at 
 <code>Predicate.apply</code>. Do not provide a predicate such as <code>Predicates.instanceOf(ArrayList.class)</code>
 , which is inconsistent with equals. (See <code>Iterables.filter(Iterable, Class)</code>
  for related functionality.)
 @since 14.0
 */
+ (id<ComGoogleCommonCollectMultiset>)filterWithComGoogleCommonCollectMultiset:(id<ComGoogleCommonCollectMultiset> __nonnull)unfiltered
                                              withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate> __nonnull)predicate;

/*!
 @brief Returns an immutable multiset entry with the specified element and count.The entry will be
  serializable if <code>e</code> is.
 @param e the element to be associated with the returned entry
 @param n the count to be associated with the returned entry
 @throw IllegalArgumentExceptionif <code>n</code> is negative
 */
+ (id<ComGoogleCommonCollectMultiset_Entry>)immutableEntryWithId:(id __nullable)e
                                                         withInt:(jint)n;

/*!
 @brief Returns an unmodifiable view of the intersection of two multisets.In the returned multiset,
  the count of each element is the <i>minimum</i> of its counts in the two backing multisets,
  with elements that would have a count of 0 not included.
 The iteration order of the returned
  multiset matches that of the element set of <code>multiset1</code>, with repeated occurrences of the
  same element appearing consecutively. 
 <p>Results are undefined if <code>multiset1</code> and <code>multiset2</code> are based on different
  equivalence relations (as <code>HashMultiset</code> and <code>TreeMultiset</code> are).
 @since 2.0
 */
+ (id<ComGoogleCommonCollectMultiset>)intersectionWithComGoogleCommonCollectMultiset:(id<ComGoogleCommonCollectMultiset> __nonnull)multiset1
                                                  withComGoogleCommonCollectMultiset:(id<ComGoogleCommonCollectMultiset> __nonnull)multiset2;

/*!
 @brief For each occurrence of an element <code>e</code> in <code>occurrencesToRemove</code>, removes one
  occurrence of <code>e</code> in <code>multisetToModify</code>.
 <p>Equivalently, this method modifies <code>multisetToModify</code> so that <code>multisetToModify.count(e)</code>
  is set to <code>Math.max(0, multisetToModify.count(e) -
  Iterables.frequency(occurrencesToRemove, e))</code>
 .
  
 <p>This is <i>not</i> the same as <code>multisetToModify.</code> <code>removeAll</code>
 <code>(occurrencesToRemove)</code>, which removes all occurrences of elements that appear
  in <code>occurrencesToRemove</code>. However, this operation <i>is</i> equivalent to, albeit
  sometimes more efficient than, the following: 
 @code
 for (E e : occurrencesToRemove) {
    multisetToModify.remove(e);
  } 
 
@endcode
 @return <code>true</code> if <code>multisetToModify</code> was changed as a result of this operation
 @since 18.0 (present in 10.0 with a requirement that the second parameter be a <code>Multiset</code>
 )
 */
+ (jboolean)removeOccurrencesWithComGoogleCommonCollectMultiset:(id<ComGoogleCommonCollectMultiset> __nonnull)multisetToModify
                                           withJavaLangIterable:(id<JavaLangIterable> __nonnull)occurrencesToRemove;

/*!
 @brief For each occurrence of an element <code>e</code> in <code>occurrencesToRemove</code>, removes one
  occurrence of <code>e</code> in <code>multisetToModify</code>.
 <p>Equivalently, this method modifies <code>multisetToModify</code> so that <code>multisetToModify.count(e)</code>
  is set to <code>Math.max(0, multisetToModify.count(e) -
  occurrencesToRemove.count(e))</code>
 .
  
 <p>This is <i>not</i> the same as <code>multisetToModify.</code> <code>removeAll</code>
 <code>(occurrencesToRemove)</code>, which removes all occurrences of elements that appear
  in <code>occurrencesToRemove</code>. However, this operation <i>is</i> equivalent to, albeit
  sometimes more efficient than, the following: 
 @code
 for (E e : occurrencesToRemove) {
    multisetToModify.remove(e);
  } 
 
@endcode
 @return <code>true</code> if <code>multisetToModify</code> was changed as a result of this operation
 @since 10.0 (missing in 18.0 when only the overload taking an <code>Iterable</code> was present)
 */
+ (jboolean)removeOccurrencesWithComGoogleCommonCollectMultiset:(id<ComGoogleCommonCollectMultiset> __nonnull)multisetToModify
                             withComGoogleCommonCollectMultiset:(id<ComGoogleCommonCollectMultiset> __nonnull)occurrencesToRemove;

/*!
 @brief Modifies <code>multisetToModify</code> so that its count for an element <code>e</code> is at most <code>multisetToRetain.count(e)</code>
 .
 <p>To be precise, <code>multisetToModify.count(e)</code> is set to <code>Math.min(multisetToModify.count(e), multisetToRetain.count(e))</code>
 . This is similar to <code>intersection</code>
  <code>(multisetToModify, multisetToRetain)</code>,
  but mutates <code>multisetToModify</code> instead of returning a view. 
 <p>In contrast, <code>multisetToModify.retainAll(multisetToRetain)</code> keeps all occurrences of
  elements that appear at all in <code>multisetToRetain</code>, and deletes all occurrences of all
  other elements.
 @return <code>true</code> if <code>multisetToModify</code> was changed as a result of this operation
 @since 10.0
 */
+ (jboolean)retainOccurrencesWithComGoogleCommonCollectMultiset:(id<ComGoogleCommonCollectMultiset> __nonnull)multisetToModify
                             withComGoogleCommonCollectMultiset:(id<ComGoogleCommonCollectMultiset> __nonnull)multisetToRetain;

/*!
 @brief Returns an unmodifiable view of the sum of two multisets.In the returned multiset, the count
  of each element is the <i>sum</i> of its counts in the two backing multisets.
 The iteration
  order of the returned multiset matches that of the element set of <code>multiset1</code> followed by
  the members of the element set of <code>multiset2</code> that are not contained in <code>multiset1</code>
 , with repeated occurrences of the same element appearing consecutively. 
 <p>Results are undefined if <code>multiset1</code> and <code>multiset2</code> are based on different
  equivalence relations (as <code>HashMultiset</code> and <code>TreeMultiset</code> are).
 @since 14.0
 */
+ (id<ComGoogleCommonCollectMultiset>)sumWithComGoogleCommonCollectMultiset:(id<ComGoogleCommonCollectMultiset> __nonnull)multiset1
                                         withComGoogleCommonCollectMultiset:(id<ComGoogleCommonCollectMultiset> __nonnull)multiset2;

/*!
 @brief Returns an unmodifiable view of the union of two multisets.In the returned multiset, the count
  of each element is the <i>maximum</i> of its counts in the two backing multisets.
 The iteration
  order of the returned multiset matches that of the element set of <code>multiset1</code> followed by
  the members of the element set of <code>multiset2</code> that are not contained in <code>multiset1</code>
 , with repeated occurrences of the same element appearing consecutively. 
 <p>Results are undefined if <code>multiset1</code> and <code>multiset2</code> are based on different
  equivalence relations (as <code>HashMultiset</code> and <code>TreeMultiset</code> are).
 @since 14.0
 */
+ (id<ComGoogleCommonCollectMultiset>)union__WithComGoogleCommonCollectMultiset:(id<ComGoogleCommonCollectMultiset> __nonnull)multiset1
                                             withComGoogleCommonCollectMultiset:(id<ComGoogleCommonCollectMultiset> __nonnull)multiset2;

/*!
 @brief Simply returns its argument.
 @since 10.0
 */
+ (id<ComGoogleCommonCollectMultiset>)unmodifiableMultisetWithComGoogleCommonCollectImmutableMultiset:(ComGoogleCommonCollectImmutableMultiset * __nonnull)multiset __attribute__((deprecated));

/*!
 @brief Returns an unmodifiable view of the specified multiset.Query operations on the returned
  multiset "read through" to the specified multiset, and attempts to modify the returned multiset
  result in an <code>UnsupportedOperationException</code>.
 <p>The returned multiset will be serializable if the specified multiset is serializable.
 @param multiset the multiset for which an unmodifiable view is to be generated
 @return an unmodifiable view of the multiset
 */
+ (id<ComGoogleCommonCollectMultiset>)unmodifiableMultisetWithComGoogleCommonCollectMultiset:(id<ComGoogleCommonCollectMultiset> __nonnull)multiset;

/*!
 @brief Returns an unmodifiable view of the specified sorted multiset.Query operations on the returned
  multiset "read through" to the specified multiset, and attempts to modify the returned multiset
  result in an <code>UnsupportedOperationException</code>.
 <p>The returned multiset will be serializable if the specified multiset is serializable.
 @param sortedMultiset the sorted multiset for which an unmodifiable view is to be generated
 @return an unmodifiable view of the multiset
 @since 11.0
 */
+ (id<ComGoogleCommonCollectSortedMultiset>)unmodifiableSortedMultisetWithComGoogleCommonCollectSortedMultiset:(id<ComGoogleCommonCollectSortedMultiset> __nonnull)sortedMultiset;

#pragma mark Package-Private

/*!
 @brief An implementation of <code>Multiset.addAll</code>.
 */
+ (jboolean)addAllImplWithComGoogleCommonCollectMultiset:(id<ComGoogleCommonCollectMultiset> __nonnull)self_
                                  withJavaUtilCollection:(id<JavaUtilCollection> __nonnull)elements;

/*!
 @brief Used to avoid http://bugs.sun.com/view_bug.do?
 bug_id=6558557
 */
+ (id<ComGoogleCommonCollectMultiset>)castWithJavaLangIterable:(id<JavaLangIterable> __nonnull)iterable;

+ (id<JavaUtilIterator>)elementIteratorWithJavaUtilIterator:(id<JavaUtilIterator> __nonnull)entryIterator;

/*!
 @brief An implementation of <code>Multiset.equals</code>.
 */
+ (jboolean)equalsImplWithComGoogleCommonCollectMultiset:(id<ComGoogleCommonCollectMultiset> __nonnull)multiset
                                                  withId:(id __nullable)object;

/*!
 @brief Returns the expected number of distinct elements given the specified elements.The number of
  distinct elements is only computed if <code>elements</code> is an instance of <code>Multiset</code>;
  otherwise the default value of 11 is returned.
 */
+ (jint)inferDistinctElementsWithJavaLangIterable:(id<JavaLangIterable> __nonnull)elements;

/*!
 @brief An implementation of <code>Multiset.iterator</code>.
 */
+ (id<JavaUtilIterator>)iteratorImplWithComGoogleCommonCollectMultiset:(id<ComGoogleCommonCollectMultiset> __nonnull)multiset;

/*!
 @brief An implementation of <code>Multiset.size</code>.
 */
+ (jint)linearTimeSizeImplWithComGoogleCommonCollectMultiset:(id<ComGoogleCommonCollectMultiset> __nonnull)multiset;

/*!
 @brief An implementation of <code>Multiset.removeAll</code>.
 */
+ (jboolean)removeAllImplWithComGoogleCommonCollectMultiset:(id<ComGoogleCommonCollectMultiset> __nonnull)self_
                                     withJavaUtilCollection:(id<JavaUtilCollection> __nonnull)elementsToRemove;

/*!
 @brief An implementation of <code>Multiset.retainAll</code>.
 */
+ (jboolean)retainAllImplWithComGoogleCommonCollectMultiset:(id<ComGoogleCommonCollectMultiset> __nonnull)self_
                                     withJavaUtilCollection:(id<JavaUtilCollection> __nonnull)elementsToRetain;

/*!
 @brief An implementation of <code>Multiset.setCount(Object, int)</code>.
 */
+ (jint)setCountImplWithComGoogleCommonCollectMultiset:(id<ComGoogleCommonCollectMultiset> __nonnull)self_
                                                withId:(id __nonnull)element
                                               withInt:(jint)count;

/*!
 @brief An implementation of <code>Multiset.setCount(Object, int, int)</code>.
 */
+ (jboolean)setCountImplWithComGoogleCommonCollectMultiset:(id<ComGoogleCommonCollectMultiset> __nonnull)self_
                                                    withId:(id __nonnull)element
                                                   withInt:(jint)oldCount
                                                   withInt:(jint)newCount;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectMultisets)

FOUNDATION_EXPORT id<ComGoogleCommonCollectMultiset> ComGoogleCommonCollectMultisets_unmodifiableMultisetWithComGoogleCommonCollectMultiset_(id<ComGoogleCommonCollectMultiset> multiset);

FOUNDATION_EXPORT id<ComGoogleCommonCollectMultiset> ComGoogleCommonCollectMultisets_unmodifiableMultisetWithComGoogleCommonCollectImmutableMultiset_(ComGoogleCommonCollectImmutableMultiset *multiset);

FOUNDATION_EXPORT id<ComGoogleCommonCollectSortedMultiset> ComGoogleCommonCollectMultisets_unmodifiableSortedMultisetWithComGoogleCommonCollectSortedMultiset_(id<ComGoogleCommonCollectSortedMultiset> sortedMultiset);

FOUNDATION_EXPORT id<ComGoogleCommonCollectMultiset_Entry> ComGoogleCommonCollectMultisets_immutableEntryWithId_withInt_(id e, jint n);

FOUNDATION_EXPORT id<ComGoogleCommonCollectMultiset> ComGoogleCommonCollectMultisets_filterWithComGoogleCommonCollectMultiset_withComGoogleCommonBasePredicate_(id<ComGoogleCommonCollectMultiset> unfiltered, id<ComGoogleCommonBasePredicate> predicate);

FOUNDATION_EXPORT jint ComGoogleCommonCollectMultisets_inferDistinctElementsWithJavaLangIterable_(id<JavaLangIterable> elements);

FOUNDATION_EXPORT id<ComGoogleCommonCollectMultiset> ComGoogleCommonCollectMultisets_union__WithComGoogleCommonCollectMultiset_withComGoogleCommonCollectMultiset_(id<ComGoogleCommonCollectMultiset> multiset1, id<ComGoogleCommonCollectMultiset> multiset2);

FOUNDATION_EXPORT id<ComGoogleCommonCollectMultiset> ComGoogleCommonCollectMultisets_intersectionWithComGoogleCommonCollectMultiset_withComGoogleCommonCollectMultiset_(id<ComGoogleCommonCollectMultiset> multiset1, id<ComGoogleCommonCollectMultiset> multiset2);

FOUNDATION_EXPORT id<ComGoogleCommonCollectMultiset> ComGoogleCommonCollectMultisets_sumWithComGoogleCommonCollectMultiset_withComGoogleCommonCollectMultiset_(id<ComGoogleCommonCollectMultiset> multiset1, id<ComGoogleCommonCollectMultiset> multiset2);

FOUNDATION_EXPORT id<ComGoogleCommonCollectMultiset> ComGoogleCommonCollectMultisets_differenceWithComGoogleCommonCollectMultiset_withComGoogleCommonCollectMultiset_(id<ComGoogleCommonCollectMultiset> multiset1, id<ComGoogleCommonCollectMultiset> multiset2);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectMultisets_containsOccurrencesWithComGoogleCommonCollectMultiset_withComGoogleCommonCollectMultiset_(id<ComGoogleCommonCollectMultiset> superMultiset, id<ComGoogleCommonCollectMultiset> subMultiset);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectMultisets_retainOccurrencesWithComGoogleCommonCollectMultiset_withComGoogleCommonCollectMultiset_(id<ComGoogleCommonCollectMultiset> multisetToModify, id<ComGoogleCommonCollectMultiset> multisetToRetain);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectMultisets_removeOccurrencesWithComGoogleCommonCollectMultiset_withJavaLangIterable_(id<ComGoogleCommonCollectMultiset> multisetToModify, id<JavaLangIterable> occurrencesToRemove);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectMultisets_removeOccurrencesWithComGoogleCommonCollectMultiset_withComGoogleCommonCollectMultiset_(id<ComGoogleCommonCollectMultiset> multisetToModify, id<ComGoogleCommonCollectMultiset> occurrencesToRemove);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectMultisets_equalsImplWithComGoogleCommonCollectMultiset_withId_(id<ComGoogleCommonCollectMultiset> multiset, id object);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectMultisets_addAllImplWithComGoogleCommonCollectMultiset_withJavaUtilCollection_(id<ComGoogleCommonCollectMultiset> self_, id<JavaUtilCollection> elements);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectMultisets_removeAllImplWithComGoogleCommonCollectMultiset_withJavaUtilCollection_(id<ComGoogleCommonCollectMultiset> self_, id<JavaUtilCollection> elementsToRemove);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectMultisets_retainAllImplWithComGoogleCommonCollectMultiset_withJavaUtilCollection_(id<ComGoogleCommonCollectMultiset> self_, id<JavaUtilCollection> elementsToRetain);

FOUNDATION_EXPORT jint ComGoogleCommonCollectMultisets_setCountImplWithComGoogleCommonCollectMultiset_withId_withInt_(id<ComGoogleCommonCollectMultiset> self_, id element, jint count);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectMultisets_setCountImplWithComGoogleCommonCollectMultiset_withId_withInt_withInt_(id<ComGoogleCommonCollectMultiset> self_, id element, jint oldCount, jint newCount);

FOUNDATION_EXPORT id<JavaUtilIterator> ComGoogleCommonCollectMultisets_elementIteratorWithJavaUtilIterator_(id<JavaUtilIterator> entryIterator);

FOUNDATION_EXPORT id<JavaUtilIterator> ComGoogleCommonCollectMultisets_iteratorImplWithComGoogleCommonCollectMultiset_(id<ComGoogleCommonCollectMultiset> multiset);

FOUNDATION_EXPORT jint ComGoogleCommonCollectMultisets_linearTimeSizeImplWithComGoogleCommonCollectMultiset_(id<ComGoogleCommonCollectMultiset> multiset);

FOUNDATION_EXPORT id<ComGoogleCommonCollectMultiset> ComGoogleCommonCollectMultisets_castWithJavaLangIterable_(id<JavaLangIterable> iterable);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableMultiset *ComGoogleCommonCollectMultisets_copyHighestCountFirstWithComGoogleCommonCollectMultiset_(id<ComGoogleCommonCollectMultiset> multiset);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectMultisets)

#endif

#if !defined (ComGoogleCommonCollectMultisets_UnmodifiableMultiset_) && (INCLUDE_ALL_ComGoogleCommonCollectMultisets || defined(INCLUDE_ComGoogleCommonCollectMultisets_UnmodifiableMultiset))
#define ComGoogleCommonCollectMultisets_UnmodifiableMultiset_

#define RESTRICT_ComGoogleCommonCollectForwardingMultiset 1
#define INCLUDE_ComGoogleCommonCollectForwardingMultiset 1
#include "com/google/common/collect/ForwardingMultiset.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@protocol ComGoogleCommonCollectMultiset;
@protocol JavaUtilCollection;
@protocol JavaUtilIterator;
@protocol JavaUtilSet;

@interface ComGoogleCommonCollectMultisets_UnmodifiableMultiset : ComGoogleCommonCollectForwardingMultiset < JavaIoSerializable > {
 @public
  id<ComGoogleCommonCollectMultiset> delegate_;
  id<JavaUtilSet> elementSet_;
  id<JavaUtilSet> entrySet_;
}

#pragma mark Public

- (jboolean)addWithId:(id __nonnull)element;

- (jint)addWithId:(id __nonnull)element
          withInt:(jint)occurences;

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection> __nonnull)elementsToAdd;

- (void)clear;

- (id<JavaUtilSet>)elementSet;

- (id<JavaUtilSet>)entrySet;

- (id<JavaUtilIterator>)iterator;

- (jboolean)removeWithId:(id __nonnull)element;

- (jint)removeWithId:(id __nonnull)element
             withInt:(jint)occurrences;

- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection> __nonnull)elementsToRemove;

- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection> __nonnull)elementsToRetain;

- (jint)setCountWithId:(id __nonnull)element
               withInt:(jint)count;

- (jboolean)setCountWithId:(id __nonnull)element
                   withInt:(jint)oldCount
                   withInt:(jint)newCount;

#pragma mark Protected

- (id<ComGoogleCommonCollectMultiset>)delegate;

#pragma mark Package-Private

- (instancetype __nonnull)initWithComGoogleCommonCollectMultiset:(id<ComGoogleCommonCollectMultiset> __nonnull)delegate;

- (id<JavaUtilSet>)createElementSet;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectMultisets_UnmodifiableMultiset)

J2OBJC_FIELD_SETTER(ComGoogleCommonCollectMultisets_UnmodifiableMultiset, delegate_, id<ComGoogleCommonCollectMultiset>)
J2OBJC_FIELD_SETTER(ComGoogleCommonCollectMultisets_UnmodifiableMultiset, elementSet_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(ComGoogleCommonCollectMultisets_UnmodifiableMultiset, entrySet_, id<JavaUtilSet>)

FOUNDATION_EXPORT void ComGoogleCommonCollectMultisets_UnmodifiableMultiset_initWithComGoogleCommonCollectMultiset_(ComGoogleCommonCollectMultisets_UnmodifiableMultiset *self, id<ComGoogleCommonCollectMultiset> delegate);

FOUNDATION_EXPORT ComGoogleCommonCollectMultisets_UnmodifiableMultiset *new_ComGoogleCommonCollectMultisets_UnmodifiableMultiset_initWithComGoogleCommonCollectMultiset_(id<ComGoogleCommonCollectMultiset> delegate) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectMultisets_UnmodifiableMultiset *create_ComGoogleCommonCollectMultisets_UnmodifiableMultiset_initWithComGoogleCommonCollectMultiset_(id<ComGoogleCommonCollectMultiset> delegate);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectMultisets_UnmodifiableMultiset)

#endif

#if !defined (ComGoogleCommonCollectMultisets_AbstractEntry_) && (INCLUDE_ALL_ComGoogleCommonCollectMultisets || defined(INCLUDE_ComGoogleCommonCollectMultisets_AbstractEntry))
#define ComGoogleCommonCollectMultisets_AbstractEntry_

#define RESTRICT_ComGoogleCommonCollectMultiset 1
#define INCLUDE_ComGoogleCommonCollectMultiset_Entry 1
#include "com/google/common/collect/Multiset.h"

/*!
 @brief Implementation of the <code>equals</code>, <code>hashCode</code>, and <code>toString</code> methods of <code>Multiset.Entry</code>
 .
 */
@interface ComGoogleCommonCollectMultisets_AbstractEntry : NSObject < ComGoogleCommonCollectMultiset_Entry >

#pragma mark Public

/*!
 @brief Indicates whether an object equals this entry, following the behavior specified in <code>Multiset.Entry.equals</code>
 .
 */
- (jboolean)isEqual:(id __nullable)object;

/*!
 @brief Return this entry's hash code, following the behavior specified in <code>Multiset.Entry.hashCode</code>
 .
 */
- (NSUInteger)hash;

/*!
 @brief Returns a string representation of this multiset entry.The string representation consists of
  the associated element if the associated count is one, and otherwise the associated element
  followed by the characters " x " (space, x and space) followed by the count.
 Elements and
  counts are converted to strings as by <code>String.valueOf</code>.
 */
- (NSString *)description;

#pragma mark Package-Private

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectMultisets_AbstractEntry)

FOUNDATION_EXPORT void ComGoogleCommonCollectMultisets_AbstractEntry_init(ComGoogleCommonCollectMultisets_AbstractEntry *self);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectMultisets_AbstractEntry)

#endif

#if !defined (ComGoogleCommonCollectMultisets_ImmutableEntry_) && (INCLUDE_ALL_ComGoogleCommonCollectMultisets || defined(INCLUDE_ComGoogleCommonCollectMultisets_ImmutableEntry))
#define ComGoogleCommonCollectMultisets_ImmutableEntry_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@interface ComGoogleCommonCollectMultisets_ImmutableEntry : ComGoogleCommonCollectMultisets_AbstractEntry < JavaIoSerializable >

#pragma mark Public

- (jint)getCount;

- (id __nullable)getElement;

- (ComGoogleCommonCollectMultisets_ImmutableEntry *)nextInBucket;

#pragma mark Package-Private

- (instancetype __nonnull)initWithId:(id __nullable)element
                             withInt:(jint)count;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectMultisets_ImmutableEntry)

FOUNDATION_EXPORT void ComGoogleCommonCollectMultisets_ImmutableEntry_initWithId_withInt_(ComGoogleCommonCollectMultisets_ImmutableEntry *self, id element, jint count);

FOUNDATION_EXPORT ComGoogleCommonCollectMultisets_ImmutableEntry *new_ComGoogleCommonCollectMultisets_ImmutableEntry_initWithId_withInt_(id element, jint count) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectMultisets_ImmutableEntry *create_ComGoogleCommonCollectMultisets_ImmutableEntry_initWithId_withInt_(id element, jint count);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectMultisets_ImmutableEntry)

#endif

#if !defined (ComGoogleCommonCollectMultisets_ElementSet_) && (INCLUDE_ALL_ComGoogleCommonCollectMultisets || defined(INCLUDE_ComGoogleCommonCollectMultisets_ElementSet))
#define ComGoogleCommonCollectMultisets_ElementSet_

#define RESTRICT_ComGoogleCommonCollectSets 1
#define INCLUDE_ComGoogleCommonCollectSets_ImprovedAbstractSet 1
#include "com/google/common/collect/Sets.h"

@protocol ComGoogleCommonCollectMultiset;
@protocol JavaUtilCollection;
@protocol JavaUtilIterator;

@interface ComGoogleCommonCollectMultisets_ElementSet : ComGoogleCommonCollectSets_ImprovedAbstractSet

#pragma mark Public

- (void)clear;

- (jboolean)containsWithId:(id __nonnull)o;

- (jboolean)containsAllWithJavaUtilCollection:(id<JavaUtilCollection> __nonnull)c;

- (jboolean)isEmpty;

- (id<JavaUtilIterator>)iterator;

- (jboolean)removeWithId:(id __nonnull)o;

- (jint)size;

#pragma mark Package-Private

- (instancetype __nonnull)init;

- (id<ComGoogleCommonCollectMultiset>)multiset;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectMultisets_ElementSet)

FOUNDATION_EXPORT void ComGoogleCommonCollectMultisets_ElementSet_init(ComGoogleCommonCollectMultisets_ElementSet *self);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectMultisets_ElementSet)

#endif

#if !defined (ComGoogleCommonCollectMultisets_EntrySet_) && (INCLUDE_ALL_ComGoogleCommonCollectMultisets || defined(INCLUDE_ComGoogleCommonCollectMultisets_EntrySet))
#define ComGoogleCommonCollectMultisets_EntrySet_

#define RESTRICT_ComGoogleCommonCollectSets 1
#define INCLUDE_ComGoogleCommonCollectSets_ImprovedAbstractSet 1
#include "com/google/common/collect/Sets.h"

@protocol ComGoogleCommonCollectMultiset;

@interface ComGoogleCommonCollectMultisets_EntrySet : ComGoogleCommonCollectSets_ImprovedAbstractSet

#pragma mark Public

- (void)clear;

- (jboolean)containsWithId:(id __nullable)o;

- (jboolean)removeWithId:(id __nonnull)object;

#pragma mark Package-Private

- (instancetype __nonnull)init;

- (id<ComGoogleCommonCollectMultiset>)multiset;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectMultisets_EntrySet)

FOUNDATION_EXPORT void ComGoogleCommonCollectMultisets_EntrySet_init(ComGoogleCommonCollectMultisets_EntrySet *self);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectMultisets_EntrySet)

#endif

#if !defined (ComGoogleCommonCollectMultisets_MultisetIteratorImpl_) && (INCLUDE_ALL_ComGoogleCommonCollectMultisets || defined(INCLUDE_ComGoogleCommonCollectMultisets_MultisetIteratorImpl))
#define ComGoogleCommonCollectMultisets_MultisetIteratorImpl_

#define RESTRICT_JavaUtilIterator 1
#define INCLUDE_JavaUtilIterator 1
#include "java/util/Iterator.h"

@protocol ComGoogleCommonCollectMultiset;
@protocol JavaUtilFunctionConsumer;

@interface ComGoogleCommonCollectMultisets_MultisetIteratorImpl : NSObject < JavaUtilIterator >

#pragma mark Public

- (jboolean)hasNext;

- (id)next;

- (void)remove;

#pragma mark Package-Private

- (instancetype __nonnull)initWithComGoogleCommonCollectMultiset:(id<ComGoogleCommonCollectMultiset> __nonnull)multiset
                                            withJavaUtilIterator:(id<JavaUtilIterator> __nonnull)entryIterator;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectMultisets_MultisetIteratorImpl)

FOUNDATION_EXPORT void ComGoogleCommonCollectMultisets_MultisetIteratorImpl_initWithComGoogleCommonCollectMultiset_withJavaUtilIterator_(ComGoogleCommonCollectMultisets_MultisetIteratorImpl *self, id<ComGoogleCommonCollectMultiset> multiset, id<JavaUtilIterator> entryIterator);

FOUNDATION_EXPORT ComGoogleCommonCollectMultisets_MultisetIteratorImpl *new_ComGoogleCommonCollectMultisets_MultisetIteratorImpl_initWithComGoogleCommonCollectMultiset_withJavaUtilIterator_(id<ComGoogleCommonCollectMultiset> multiset, id<JavaUtilIterator> entryIterator) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectMultisets_MultisetIteratorImpl *create_ComGoogleCommonCollectMultisets_MultisetIteratorImpl_initWithComGoogleCommonCollectMultiset_withJavaUtilIterator_(id<ComGoogleCommonCollectMultiset> multiset, id<JavaUtilIterator> entryIterator);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectMultisets_MultisetIteratorImpl)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCollectMultisets")
