//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/net/PercentEscaper.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonNetPercentEscaper")
#ifdef RESTRICT_ComGoogleCommonNetPercentEscaper
#define INCLUDE_ALL_ComGoogleCommonNetPercentEscaper 0
#else
#define INCLUDE_ALL_ComGoogleCommonNetPercentEscaper 1
#endif
#undef RESTRICT_ComGoogleCommonNetPercentEscaper

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonNetPercentEscaper_) && (INCLUDE_ALL_ComGoogleCommonNetPercentEscaper || defined(INCLUDE_ComGoogleCommonNetPercentEscaper))
#define ComGoogleCommonNetPercentEscaper_

#define RESTRICT_ComGoogleCommonEscapeUnicodeEscaper 1
#define INCLUDE_ComGoogleCommonEscapeUnicodeEscaper 1
#include "com/google/common/escape/UnicodeEscaper.h"

@class IOSCharArray;
@protocol JavaLangCharSequence;

/*!
 @brief A <code>UnicodeEscaper</code> that escapes some set of Java characters using a UTF-8 based percent
  encoding scheme.The set of safe characters (those which remain unescaped) can be specified on
  construction.
 <p>This class is primarily used for creating URI escapers in <code>UrlEscapers</code> but can be used
  directly if required. While URI escapers impose specific semantics on which characters are
  considered 'safe', this class has a minimal set of restrictions. 
 <p>When escaping a String, the following rules apply: 
 <ul>
    <li>All specified safe characters remain unchanged.
    <li>If <code>plusForSpace</code> was specified, the space character " " is converted into a plus
        sign <code>"+"</code>.
    <li>All other characters are converted into one or more bytes using UTF-8 encoding and each
        byte is then represented by the 3-character string "%XX", where "XX" is the two-digit,
        uppercase, hexadecimal representation of the byte value. 
 </ul>
  
 <p>For performance reasons the only currently supported character encoding of this class is
  UTF-8. 
 <p><b>Note:</b> This escaper produces <a href="https://url.spec.whatwg.org/#percent-encode">
 uppercase</a> hexadecimal sequences.
 @author David Beaumont
 @since 15.0
 */
@interface ComGoogleCommonNetPercentEscaper : ComGoogleCommonEscapeUnicodeEscaper

#pragma mark Public

/*!
 @brief Constructs a percent escaper with the specified safe characters and optional handling of the
  space character.
 <p>Not that it is allowed, but not necessarily desirable to specify <code>%</code> as a safe
  character. This has the effect of creating an escaper which has no well defined inverse but it
  can be useful when escaping additional characters.
 @param safeChars a non null string specifying additional safe characters for this escaper (the      ranges 0..9, a..z and A..Z are always safe and should not be specified here)
 @param plusForSpace true if ASCII space should be escaped to <code>+</code>  rather than <code>%20</code>
 @throw IllegalArgumentExceptionif any of the parameters were invalid
 */
- (instancetype __nonnull)initWithNSString:(NSString * __nonnull)safeChars
                               withBoolean:(jboolean)plusForSpace;

- (NSString *)escapeWithNSString:(NSString * __nonnull)s;

#pragma mark Protected

/*!
 @brief Escapes the given Unicode code point in UTF-8.
 */
- (IOSCharArray *)escapeWithInt:(jint)cp;

- (jint)nextEscapeIndexWithJavaLangCharSequence:(id<JavaLangCharSequence> __nonnull)csq
                                        withInt:(jint)index
                                        withInt:(jint)end;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonNetPercentEscaper)

FOUNDATION_EXPORT void ComGoogleCommonNetPercentEscaper_initWithNSString_withBoolean_(ComGoogleCommonNetPercentEscaper *self, NSString *safeChars, jboolean plusForSpace);

FOUNDATION_EXPORT ComGoogleCommonNetPercentEscaper *new_ComGoogleCommonNetPercentEscaper_initWithNSString_withBoolean_(NSString *safeChars, jboolean plusForSpace) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonNetPercentEscaper *create_ComGoogleCommonNetPercentEscaper_initWithNSString_withBoolean_(NSString *safeChars, jboolean plusForSpace);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonNetPercentEscaper)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonNetPercentEscaper")
