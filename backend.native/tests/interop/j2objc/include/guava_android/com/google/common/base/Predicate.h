//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/base/Predicate.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonBasePredicate")
#ifdef RESTRICT_ComGoogleCommonBasePredicate
#define INCLUDE_ALL_ComGoogleCommonBasePredicate 0
#else
#define INCLUDE_ALL_ComGoogleCommonBasePredicate 1
#endif
#undef RESTRICT_ComGoogleCommonBasePredicate

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonBasePredicate_) && (INCLUDE_ALL_ComGoogleCommonBasePredicate || defined(INCLUDE_ComGoogleCommonBasePredicate))
#define ComGoogleCommonBasePredicate_

/*!
 @brief Determines a true or false value for a given input; a pre-Java-8 version of <code>java.util.function.Predicate</code>
 .
 <p>The <code>Predicates</code> class provides common predicates and related utilities. 
 <p>See the Guava User Guide article on <a href="https://github.com/google/guava/wiki/FunctionalExplained">
 the use of <code>Predicate</code></a>.
  
 <h3>For Java 8+ users</h3>
  
 <p>This interface is now a legacy type. Use <code>java.util.function.Predicate</code> (or the
  appropriate primitive specialization such as <code>IntPredicate</code>) instead whenever possible.
  Otherwise, at least reduce <i>explicit</i> dependencies on this type by using lambda expressions
  or method references instead of classes, leaving your code easier to migrate in the future. 
 <p>To use a reference of this type (say, named <code>guavaPredicate</code>) in a context where <code>java.util.function.Predicate</code>
  is expected, use the method reference <code>guavaPredicate::apply</code>
 . For the other direction, use <code>javaUtilPredicate::test</code>. A future
  version of this interface will be made to <i>extend</i> <code>java.util.function.Predicate</code>, so
  that conversion will be necessary in only one direction. At that time, this interface will be
  officially discouraged.
 @author Kevin Bourrillion
 @since 2.0
 */
@protocol ComGoogleCommonBasePredicate < JavaObject >

/*!
 @brief Returns the result of applying this predicate to <code>input</code> (Java 8 users, see notes in the
  class documentation above).This method is <i>generally expected</i>, but not absolutely
  required, to have the following properties: 
 <ul>
    <li>Its execution does not cause any observable side effects.
 <li>The computation is <i>consistent with equals</i>; that is, <code>Objects.equal</code>
 <code>(a, b)</code> implies that <code>predicate.apply(a) ==
        predicate.apply(b))</code>
 .
  </ul>
 @throw NullPointerExceptionif <code>input</code> is null and this predicate does not accept null
      arguments
 */
- (jboolean)applyWithId:(id __nullable)input;

/*!
 @brief Indicates whether another object is equal to this predicate.
 <p>Most implementations will have no reason to override the behavior of <code>Object.equals</code>.
  However, an implementation may also choose to return <code>true</code> whenever <code>object</code> is a 
 <code>Predicate</code> that it considers <i>interchangeable</i> with this one. "Interchangeable" 
 <i>typically</i> means that <code>this.apply(t) == that.apply(t)</code> for all <code>t</code> of type 
 <code>T</code>). Note that a <code>false</code> result from this method does not imply that the
  predicates are known <i>not</i> to be interchangeable.
 */
- (jboolean)isEqual:(id __nullable)object;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBasePredicate)

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBasePredicate)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonBasePredicate")
