//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/android/build_result/java/com/google/common/collect/ImmutableTable.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCollectImmutableTable")
#ifdef RESTRICT_ComGoogleCommonCollectImmutableTable
#define INCLUDE_ALL_ComGoogleCommonCollectImmutableTable 0
#else
#define INCLUDE_ALL_ComGoogleCommonCollectImmutableTable 1
#endif
#undef RESTRICT_ComGoogleCommonCollectImmutableTable

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCollectImmutableTable_) && (INCLUDE_ALL_ComGoogleCommonCollectImmutableTable || defined(INCLUDE_ComGoogleCommonCollectImmutableTable))
#define ComGoogleCommonCollectImmutableTable_

#define RESTRICT_ComGoogleCommonCollectAbstractTable 1
#define INCLUDE_ComGoogleCommonCollectAbstractTable 1
#include "com/google/common/collect/AbstractTable.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComGoogleCommonCollectImmutableCollection;
@class ComGoogleCommonCollectImmutableMap;
@class ComGoogleCommonCollectImmutableSet;
@class ComGoogleCommonCollectImmutableTable_Builder;
@class ComGoogleCommonCollectImmutableTable_SerializedForm;
@class ComGoogleCommonCollectUnmodifiableIterator;
@protocol ComGoogleCommonCollectTable;
@protocol ComGoogleCommonCollectTable_Cell;
@protocol JavaUtilIterator;

/*!
 @brief A <code>Table</code> whose contents will never change, with many other important properties detailed
  at <code>ImmutableCollection</code>.
 <p>See the Guava User Guide article on <a href="https://github.com/google/guava/wiki/ImmutableCollectionsExplained">
  immutable collections</a>.
 @author Gregory Kick
 @since 11.0
 */
@interface ComGoogleCommonCollectImmutableTable : ComGoogleCommonCollectAbstractTable < JavaIoSerializable >

#pragma mark Public

/*!
 @brief Returns a new builder.The generated builder is equivalent to the builder created by the <code>ImmutableTable.Builder()</code>
  constructor.
 */
+ (ComGoogleCommonCollectImmutableTable_Builder *)builder;

- (ComGoogleCommonCollectImmutableSet *)cellSet;

/*!
 @brief Guaranteed to throw an exception and leave the table unmodified.
 @throw UnsupportedOperationExceptionalways
 */
- (void)clear __attribute__((deprecated));

/*!
 @throw NullPointerExceptionif <code>columnKey</code> is <code>null</code>
 */
- (ComGoogleCommonCollectImmutableMap *)columnWithId:(id __nonnull)columnKey;

- (ComGoogleCommonCollectImmutableSet *)columnKeySet;

/*!
 @brief <p>The value <code>Map<R, V></code> instances in the returned map are <code>ImmutableMap</code> instances
  as well.
 */
- (ComGoogleCommonCollectImmutableMap *)columnMap;

- (jboolean)containsWithId:(id __nullable)rowKey
                    withId:(id __nullable)columnKey;

- (jboolean)containsValueWithId:(id __nullable)value;

/*!
 @brief Returns an immutable copy of the provided table.
 <p>The <code>Table.cellSet()</code> iteration order of the provided table determines the iteration
  ordering of all views in the returned table. Note that some views of the original table and the
  copied table may have different iteration orders. For more control over the ordering, create a 
 <code>Builder</code> and call <code>Builder.orderRowsBy</code>, <code>Builder.orderColumnsBy</code>, and 
 <code>Builder.putAll</code>
  
 <p>Despite the method name, this method attempts to avoid actually copying the data when it is
  safe to do so. The exact circumstances under which a copy will or will not be performed are
  undocumented and subject to change.
 */
+ (ComGoogleCommonCollectImmutableTable *)copyOfWithComGoogleCommonCollectTable:(id<ComGoogleCommonCollectTable> __nonnull)table OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns an empty immutable table.
 */
+ (ComGoogleCommonCollectImmutableTable *)of;

/*!
 @brief Returns an immutable table containing a single cell.
 */
+ (ComGoogleCommonCollectImmutableTable *)ofWithId:(id __nonnull)rowKey
                                            withId:(id __nonnull)columnKey
                                            withId:(id __nonnull)value;

/*!
 @brief Guaranteed to throw an exception and leave the table unmodified.
 @throw UnsupportedOperationExceptionalways
 */
- (id)putWithId:(id __nonnull)rowKey
         withId:(id __nonnull)columnKey
         withId:(id __nonnull)value __attribute__((deprecated));

/*!
 @brief Guaranteed to throw an exception and leave the table unmodified.
 @throw UnsupportedOperationExceptionalways
 */
- (void)putAllWithComGoogleCommonCollectTable:(id<ComGoogleCommonCollectTable> __nonnull)table __attribute__((deprecated));

/*!
 @brief Guaranteed to throw an exception and leave the table unmodified.
 @throw UnsupportedOperationExceptionalways
 */
- (id)removeWithId:(id __nonnull)rowKey
            withId:(id __nonnull)columnKey __attribute__((deprecated));

/*!
 @throw NullPointerExceptionif <code>rowKey</code> is <code>null</code>
 */
- (ComGoogleCommonCollectImmutableMap *)rowWithId:(id __nonnull)rowKey;

- (ComGoogleCommonCollectImmutableSet *)rowKeySet;

/*!
 @brief <p>The value <code>Map<C, V></code> instances in the returned map are <code>ImmutableMap</code> instances
  as well.
 */
- (ComGoogleCommonCollectImmutableMap *)rowMap;

- (ComGoogleCommonCollectImmutableCollection *)values;

#pragma mark Package-Private

- (instancetype __nonnull)init;

- (ComGoogleCommonCollectUnmodifiableIterator *)cellIterator;

/*!
 @brief Verifies that <code>rowKey</code>, <code>columnKey</code> and <code>value</code> are non-null, and returns a
  new entry with those values.
 */
+ (id<ComGoogleCommonCollectTable_Cell>)cellOfWithId:(id __nonnull)rowKey
                                              withId:(id __nonnull)columnKey
                                              withId:(id __nonnull)value;

- (ComGoogleCommonCollectImmutableSet *)createCellSet;

/*!
 @brief Creates the common serialized form for this table.
 */
- (ComGoogleCommonCollectImmutableTable_SerializedForm *)createSerializedForm;

- (ComGoogleCommonCollectImmutableCollection *)createValues;

- (id<JavaUtilIterator>)valuesIterator;

- (id)writeReplace;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initPackagePrivate NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectImmutableTable)

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableTable *ComGoogleCommonCollectImmutableTable_of(void);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableTable *ComGoogleCommonCollectImmutableTable_ofWithId_withId_withId_(id rowKey, id columnKey, id value);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableTable *ComGoogleCommonCollectImmutableTable_copyOfWithComGoogleCommonCollectTable_(id<ComGoogleCommonCollectTable> table);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableTable_Builder *ComGoogleCommonCollectImmutableTable_builder(void);

FOUNDATION_EXPORT id<ComGoogleCommonCollectTable_Cell> ComGoogleCommonCollectImmutableTable_cellOfWithId_withId_withId_(id rowKey, id columnKey, id value);

FOUNDATION_EXPORT void ComGoogleCommonCollectImmutableTable_init(ComGoogleCommonCollectImmutableTable *self);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectImmutableTable)

#endif

#if !defined (ComGoogleCommonCollectImmutableTable_Builder_) && (INCLUDE_ALL_ComGoogleCommonCollectImmutableTable || defined(INCLUDE_ComGoogleCommonCollectImmutableTable_Builder))
#define ComGoogleCommonCollectImmutableTable_Builder_

@class ComGoogleCommonCollectImmutableTable;
@protocol ComGoogleCommonCollectTable;
@protocol ComGoogleCommonCollectTable_Cell;
@protocol JavaUtilComparator;

/*!
 @brief A builder for creating immutable table instances, especially <code>public static final</code> tables
  ("constant tables").Example:
  
 @code
 static final ImmutableTable<Integer, Character, String> SPREADSHEET =
      new ImmutableTable.Builder<Integer, Character, String>()
          .put(1, 'A', "foo")
          .put(1, 'B', "bar")
          .put(2, 'A', "baz")
          .build(); 
 
@endcode
  
 <p>By default, the order in which cells are added to the builder determines the iteration
  ordering of all views in the returned table, with <code>putAll</code> following the <code>Table.cellSet()</code>
  iteration order.
 However, if <code>orderRowsBy</code> or <code>orderColumnsBy</code>
  is called, the views are sorted by the supplied comparators. 
 <p>For empty or single-cell immutable tables, <code>of()</code> and <code>of(Object, Object,
 Object)</code>
  are even more convenient. 
 <p>Builder instances can be reused - it is safe to call <code>build</code> multiple times to build
  multiple tables in series. Each table is a superset of the tables created before it.
 @since 11.0
 */
@interface ComGoogleCommonCollectImmutableTable_Builder : NSObject

#pragma mark Public

/*!
 @brief Creates a new builder.The returned builder is equivalent to the builder generated by <code>ImmutableTable.builder</code>
 .
 */
- (instancetype __nonnull)init;

/*!
 @brief Returns a newly-created immutable table.
 @throw IllegalArgumentExceptionif duplicate key pairs were added
 */
- (ComGoogleCommonCollectImmutableTable *)build;

/*!
 @brief Specifies the ordering of the generated table's columns.
 */
- (ComGoogleCommonCollectImmutableTable_Builder *)orderColumnsByWithJavaUtilComparator:(id<JavaUtilComparator> __nonnull)columnComparator;

/*!
 @brief Specifies the ordering of the generated table's rows.
 */
- (ComGoogleCommonCollectImmutableTable_Builder *)orderRowsByWithJavaUtilComparator:(id<JavaUtilComparator> __nonnull)rowComparator;

/*!
 @brief Adds the given <code>cell</code> to the table, making it immutable if necessary.Duplicate key
  pairs are not allowed and will cause <code>build</code> to fail.
 */
- (ComGoogleCommonCollectImmutableTable_Builder *)putWithComGoogleCommonCollectTable_Cell:(id<ComGoogleCommonCollectTable_Cell> __nonnull)cell;

/*!
 @brief Associates the (<code>rowKey</code>, <code>columnKey</code>) pair with <code>value</code> in the built
  table.Duplicate key pairs are not allowed and will cause <code>build</code> to fail.
 */
- (ComGoogleCommonCollectImmutableTable_Builder *)putWithId:(id __nonnull)rowKey
                                                     withId:(id __nonnull)columnKey
                                                     withId:(id __nonnull)value;

/*!
 @brief Associates all of the given table's keys and values in the built table.Duplicate row key
  column key pairs are not allowed, and will cause <code>build</code> to fail.
 @throw NullPointerExceptionif any key or value in <code>table</code> is null
 */
- (ComGoogleCommonCollectImmutableTable_Builder *)putAllWithComGoogleCommonCollectTable:(id<ComGoogleCommonCollectTable> __nonnull)table;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectImmutableTable_Builder)

FOUNDATION_EXPORT void ComGoogleCommonCollectImmutableTable_Builder_init(ComGoogleCommonCollectImmutableTable_Builder *self);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableTable_Builder *new_ComGoogleCommonCollectImmutableTable_Builder_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableTable_Builder *create_ComGoogleCommonCollectImmutableTable_Builder_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectImmutableTable_Builder)

#endif

#if !defined (ComGoogleCommonCollectImmutableTable_SerializedForm_) && (INCLUDE_ALL_ComGoogleCommonCollectImmutableTable || defined(INCLUDE_ComGoogleCommonCollectImmutableTable_SerializedForm))
#define ComGoogleCommonCollectImmutableTable_SerializedForm_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class ComGoogleCommonCollectImmutableTable;
@class IOSIntArray;

/*!
 @brief Serialized type for all ImmutableTable instances.It captures the logical contents and
  preserves iteration order of all views.
 */
@interface ComGoogleCommonCollectImmutableTable_SerializedForm : NSObject < JavaIoSerializable >

#pragma mark Package-Private

+ (ComGoogleCommonCollectImmutableTable_SerializedForm *)createWithComGoogleCommonCollectImmutableTable:(ComGoogleCommonCollectImmutableTable * __nonnull)table
                                                                                           withIntArray:(IOSIntArray * __nonnull)cellRowIndices
                                                                                           withIntArray:(IOSIntArray * __nonnull)cellColumnIndices;

- (id)readResolve;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectImmutableTable_SerializedForm)

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableTable_SerializedForm *ComGoogleCommonCollectImmutableTable_SerializedForm_createWithComGoogleCommonCollectImmutableTable_withIntArray_withIntArray_(ComGoogleCommonCollectImmutableTable *table, IOSIntArray *cellRowIndices, IOSIntArray *cellColumnIndices);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectImmutableTable_SerializedForm)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCollectImmutableTable")
