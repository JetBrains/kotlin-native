//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/build_result/java/com/google/common/collect/RegularImmutableMap.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCollectRegularImmutableMap")
#ifdef RESTRICT_ComGoogleCommonCollectRegularImmutableMap
#define INCLUDE_ALL_ComGoogleCommonCollectRegularImmutableMap 0
#else
#define INCLUDE_ALL_ComGoogleCommonCollectRegularImmutableMap 1
#endif
#undef RESTRICT_ComGoogleCommonCollectRegularImmutableMap

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCollectRegularImmutableMap_) && (INCLUDE_ALL_ComGoogleCommonCollectRegularImmutableMap || defined(INCLUDE_ComGoogleCommonCollectRegularImmutableMap))
#define ComGoogleCommonCollectRegularImmutableMap_

#define RESTRICT_ComGoogleCommonCollectImmutableMap 1
#define INCLUDE_ComGoogleCommonCollectImmutableMap 1
#include "com/google/common/collect/ImmutableMap.h"

@class ComGoogleCommonCollectImmutableCollection;
@class ComGoogleCommonCollectImmutableMapEntry;
@class ComGoogleCommonCollectImmutableSet;
@class IOSObjectArray;
@protocol JavaUtilFunctionBiConsumer;
@protocol JavaUtilMap_Entry;

/*!
 @brief Implementation of <code>ImmutableMap</code> with two or more entries.
 @author Jesse Wilson
 @author Kevin Bourrillion
 @author Gregory Kick
 */
@interface ComGoogleCommonCollectRegularImmutableMap : ComGoogleCommonCollectImmutableMap {
 @public
  IOSObjectArray *entries_;
}
@property (readonly, class, strong) ComGoogleCommonCollectImmutableMap *EMPTY NS_SWIFT_NAME(EMPTY);
@property (readonly, class) jdouble MAX_LOAD_FACTOR NS_SWIFT_NAME(MAX_LOAD_FACTOR);
@property (readonly, class) jdouble HASH_FLOODING_FPP NS_SWIFT_NAME(HASH_FLOODING_FPP);
@property (readonly, class) jint MAX_HASH_BUCKET_LENGTH NS_SWIFT_NAME(MAX_HASH_BUCKET_LENGTH);

+ (ComGoogleCommonCollectImmutableMap *)EMPTY;

+ (jdouble)MAX_LOAD_FACTOR;

+ (jdouble)HASH_FLOODING_FPP;

+ (jint)MAX_HASH_BUCKET_LENGTH;

#pragma mark Public

- (void)forEachWithJavaUtilFunctionBiConsumer:(id<JavaUtilFunctionBiConsumer>)action;

- (id)getWithId:(id __nullable)key;

- (jint)size;

#pragma mark Package-Private

/*!
 @return number of entries in this bucket
 @throw IllegalArgumentExceptionif another entry in the bucket has the same key
 */
+ (jint)checkNoConflictInKeyBucketWithId:(id)key
                   withJavaUtilMap_Entry:(id<JavaUtilMap_Entry>)entry_
withComGoogleCommonCollectImmutableMapEntry:(ComGoogleCommonCollectImmutableMapEntry * __nullable)keyBucketHead;

- (ComGoogleCommonCollectImmutableSet *)createEntrySet;

- (ComGoogleCommonCollectImmutableSet *)createKeySet;

- (ComGoogleCommonCollectImmutableCollection *)createValues;

+ (ComGoogleCommonCollectImmutableMap *)fromEntriesWithJavaUtilMap_EntryArray:(IOSObjectArray *)entries;

/*!
 @brief Creates an ImmutableMap from the first n entries in entryArray.This implementation may replace
  the entries in entryArray with its own entry objects (though they will have the same key/value
  contents), and may take ownership of entryArray.
 */
+ (ComGoogleCommonCollectImmutableMap *)fromEntryArrayWithInt:(jint)n
                                   withJavaUtilMap_EntryArray:(IOSObjectArray *)entryArray;

+ (id)getWithId:(id __nullable)key
withComGoogleCommonCollectImmutableMapEntryArray:(IOSObjectArray *)keyTable
        withInt:(jint)mask;

- (jboolean)isPartialView;

/*!
 @brief Makes an entry usable internally by a new ImmutableMap.
 */
+ (ComGoogleCommonCollectImmutableMapEntry *)makeImmutableWithJavaUtilMap_Entry:(id<JavaUtilMap_Entry>)entry_;

/*!
 @brief Makes an entry usable internally by a new ImmutableMap without rereading its contents.
 */
+ (ComGoogleCommonCollectImmutableMapEntry *)makeImmutableWithJavaUtilMap_Entry:(id<JavaUtilMap_Entry>)entry_
                                                                         withId:(id)key
                                                                         withId:(id)value;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonCollectRegularImmutableMap)

J2OBJC_FIELD_SETTER(ComGoogleCommonCollectRegularImmutableMap, entries_, IOSObjectArray *)

inline ComGoogleCommonCollectImmutableMap *ComGoogleCommonCollectRegularImmutableMap_get_EMPTY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComGoogleCommonCollectImmutableMap *ComGoogleCommonCollectRegularImmutableMap_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonCollectRegularImmutableMap, EMPTY, ComGoogleCommonCollectImmutableMap *)

/*!
 @brief Closed addressing tends to perform well even with high load factors.Being conservative here
  ensures that the table is still likely to be relatively sparse (hence it misses fast) while
  saving space.
 */
inline jdouble ComGoogleCommonCollectRegularImmutableMap_get_MAX_LOAD_FACTOR(void);
#define ComGoogleCommonCollectRegularImmutableMap_MAX_LOAD_FACTOR 1.2
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonCollectRegularImmutableMap, MAX_LOAD_FACTOR, jdouble)

/*!
 @brief Maximum allowed false positive probability of detecting a hash flooding attack given random
  input.
 */
inline jdouble ComGoogleCommonCollectRegularImmutableMap_get_HASH_FLOODING_FPP(void);
#define ComGoogleCommonCollectRegularImmutableMap_HASH_FLOODING_FPP 0.001
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonCollectRegularImmutableMap, HASH_FLOODING_FPP, jdouble)

/*!
 @brief Maximum allowed length of a hash table bucket before falling back to a j.u.HashMap based
  implementation.Experimentally determined.
 */
inline jint ComGoogleCommonCollectRegularImmutableMap_get_MAX_HASH_BUCKET_LENGTH(void);
#define ComGoogleCommonCollectRegularImmutableMap_MAX_HASH_BUCKET_LENGTH 8
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonCollectRegularImmutableMap, MAX_HASH_BUCKET_LENGTH, jint)

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableMap *ComGoogleCommonCollectRegularImmutableMap_fromEntriesWithJavaUtilMap_EntryArray_(IOSObjectArray *entries);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableMap *ComGoogleCommonCollectRegularImmutableMap_fromEntryArrayWithInt_withJavaUtilMap_EntryArray_(jint n, IOSObjectArray *entryArray);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableMapEntry *ComGoogleCommonCollectRegularImmutableMap_makeImmutableWithJavaUtilMap_Entry_withId_withId_(id<JavaUtilMap_Entry> entry_, id key, id value);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableMapEntry *ComGoogleCommonCollectRegularImmutableMap_makeImmutableWithJavaUtilMap_Entry_(id<JavaUtilMap_Entry> entry_);

FOUNDATION_EXPORT jint ComGoogleCommonCollectRegularImmutableMap_checkNoConflictInKeyBucketWithId_withJavaUtilMap_Entry_withComGoogleCommonCollectImmutableMapEntry_(id key, id<JavaUtilMap_Entry> entry_, ComGoogleCommonCollectImmutableMapEntry *keyBucketHead);

FOUNDATION_EXPORT id ComGoogleCommonCollectRegularImmutableMap_getWithId_withComGoogleCommonCollectImmutableMapEntryArray_withInt_(id key, IOSObjectArray *keyTable, jint mask);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectRegularImmutableMap)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCollectRegularImmutableMap")
