//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/build_result/java/com/google/common/eventbus/Subscriber.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonEventbusSubscriber")
#ifdef RESTRICT_ComGoogleCommonEventbusSubscriber
#define INCLUDE_ALL_ComGoogleCommonEventbusSubscriber 0
#else
#define INCLUDE_ALL_ComGoogleCommonEventbusSubscriber 1
#endif
#undef RESTRICT_ComGoogleCommonEventbusSubscriber
#ifdef INCLUDE_ComGoogleCommonEventbusSubscriber_SynchronizedSubscriber
#define INCLUDE_ComGoogleCommonEventbusSubscriber 1
#endif

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonEventbusSubscriber_) && (INCLUDE_ALL_ComGoogleCommonEventbusSubscriber || defined(INCLUDE_ComGoogleCommonEventbusSubscriber))
#define ComGoogleCommonEventbusSubscriber_

@class ComGoogleCommonEventbusEventBus;
@class JavaLangReflectMethod;

/*!
 @brief A subscriber method on a specific object, plus the executor that should be used for dispatching
  events to it.
 <p>Two subscribers are equivalent when they refer to the same method on the same object (not
  class). This property is used to ensure that no subscriber method is registered more than once.
 @author Colin Decker
 */
@interface ComGoogleCommonEventbusSubscriber : NSObject {
 @public
  /*!
   @brief The object with the subscriber method.
   */
  id target_;
}

#pragma mark Public

- (jboolean)isEqual:(id __nullable)obj;

- (NSUInteger)hash;

#pragma mark Package-Private

/*!
 @brief Creates a <code>Subscriber</code> for <code>method</code> on <code>listener</code>.
 */
+ (ComGoogleCommonEventbusSubscriber *)createWithComGoogleCommonEventbusEventBus:(ComGoogleCommonEventbusEventBus * __nonnull)bus
                                                                          withId:(id __nonnull)listener
                                                       withJavaLangReflectMethod:(JavaLangReflectMethod * __nonnull)method;

/*!
 @brief Dispatches <code>event</code> to this subscriber using the proper executor.
 */
- (void)dispatchEventWithId:(id __nonnull)event;

/*!
 @brief Invokes the subscriber method.This method can be overridden to make the invocation
  synchronized.
 */
- (void)invokeSubscriberMethodWithId:(id __nonnull)event;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonEventbusSubscriber)

J2OBJC_FIELD_SETTER(ComGoogleCommonEventbusSubscriber, target_, id)

FOUNDATION_EXPORT ComGoogleCommonEventbusSubscriber *ComGoogleCommonEventbusSubscriber_createWithComGoogleCommonEventbusEventBus_withId_withJavaLangReflectMethod_(ComGoogleCommonEventbusEventBus *bus, id listener, JavaLangReflectMethod *method);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonEventbusSubscriber)

#endif

#if !defined (ComGoogleCommonEventbusSubscriber_SynchronizedSubscriber_) && (INCLUDE_ALL_ComGoogleCommonEventbusSubscriber || defined(INCLUDE_ComGoogleCommonEventbusSubscriber_SynchronizedSubscriber))
#define ComGoogleCommonEventbusSubscriber_SynchronizedSubscriber_

/*!
 @brief Subscriber that synchronizes invocations of a method to ensure that only one thread may enter
  the method at a time.
 */
@interface ComGoogleCommonEventbusSubscriber_SynchronizedSubscriber : ComGoogleCommonEventbusSubscriber

#pragma mark Package-Private

- (void)invokeSubscriberMethodWithId:(id __nonnull)event;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonEventbusSubscriber_SynchronizedSubscriber)

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonEventbusSubscriber_SynchronizedSubscriber)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonEventbusSubscriber")
