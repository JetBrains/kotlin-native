//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/build_result/java/com/google/common/primitives/UnsignedLong.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonPrimitivesUnsignedLong")
#ifdef RESTRICT_ComGoogleCommonPrimitivesUnsignedLong
#define INCLUDE_ALL_ComGoogleCommonPrimitivesUnsignedLong 0
#else
#define INCLUDE_ALL_ComGoogleCommonPrimitivesUnsignedLong 1
#endif
#undef RESTRICT_ComGoogleCommonPrimitivesUnsignedLong

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonPrimitivesUnsignedLong_) && (INCLUDE_ALL_ComGoogleCommonPrimitivesUnsignedLong || defined(INCLUDE_ComGoogleCommonPrimitivesUnsignedLong))
#define ComGoogleCommonPrimitivesUnsignedLong_

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "java/lang/Comparable.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class JavaMathBigInteger;

/*!
 @brief A wrapper class for unsigned <code>long</code> values, supporting arithmetic operations.
 <p>In some cases, when speed is more important than code readability, it may be faster simply to
  treat primitive <code>long</code> values as unsigned, using the methods from <code>UnsignedLongs</code>.
  
 <p>See the Guava User Guide article on <a href="https://github.com/google/guava/wiki/PrimitivesExplained#unsigned-support">
 unsigned
  primitive utilities</a>.
 @author Louis Wasserman
 @author Colin Evans
 @since 11.0
 */
@interface ComGoogleCommonPrimitivesUnsignedLong : NSNumber < JavaLangComparable, JavaIoSerializable >
@property (readonly, class, strong) ComGoogleCommonPrimitivesUnsignedLong *ZERO NS_SWIFT_NAME(ZERO);
@property (readonly, class, strong) ComGoogleCommonPrimitivesUnsignedLong *ONE NS_SWIFT_NAME(ONE);
@property (readonly, class, strong) ComGoogleCommonPrimitivesUnsignedLong *MAX_VALUE NS_SWIFT_NAME(MAX_VALUE);

+ (ComGoogleCommonPrimitivesUnsignedLong *)ZERO;

+ (ComGoogleCommonPrimitivesUnsignedLong *)ONE;

+ (ComGoogleCommonPrimitivesUnsignedLong *)MAX_VALUE;

#pragma mark Public

/*!
 @brief Returns the value of this <code>UnsignedLong</code> as a <code>BigInteger</code>.
 */
- (JavaMathBigInteger *)bigIntegerValue;

- (jint)compareToWithId:(ComGoogleCommonPrimitivesUnsignedLong * __nonnull)o;

/*!
 @brief Returns the result of dividing this by <code>val</code>.
 @since 14.0
 */
- (ComGoogleCommonPrimitivesUnsignedLong *)dividedByWithComGoogleCommonPrimitivesUnsignedLong:(ComGoogleCommonPrimitivesUnsignedLong * __nonnull)val;

/*!
 @brief Returns the value of this <code>UnsignedLong</code> as a <code>double</code>, analogous to a widening
  primitive conversion from <code>long</code> to <code>double</code>, and correctly rounded.
 */
- (jdouble)doubleValue;

- (jboolean)isEqual:(id __nullable)obj;

/*!
 @brief Returns the value of this <code>UnsignedLong</code> as a <code>float</code>, analogous to a widening
  primitive conversion from <code>long</code> to <code>float</code>, and correctly rounded.
 */
- (jfloat)floatValue;

/*!
 @brief Returns an <code>UnsignedLong</code> corresponding to a given bit representation.The argument is
  interpreted as an unsigned 64-bit value.
 Specifically, the sign bit of <code>bits</code> is
  interpreted as a normal bit, and all other bits are treated as usual. 
 <p>If the argument is nonnegative, the returned result will be equal to <code>bits</code>,
  otherwise, the result will be equal to <code>2^64 + bits</code>.
  
 <p>To represent decimal constants less than <code>2^63</code>, consider <code>valueOf(long)</code>
  instead.
 @since 14.0
 */
+ (ComGoogleCommonPrimitivesUnsignedLong *)fromLongBitsWithLong:(jlong)bits;

- (NSUInteger)hash;

/*!
 @brief Returns the value of this <code>UnsignedLong</code> as an <code>int</code>.
 */
- (jint)intValue;

/*!
 @brief Returns the value of this <code>UnsignedLong</code> as a <code>long</code>.This is an inverse operation
  to <code>fromLongBits</code>.
 <p>Note that if this <code>UnsignedLong</code> holds a value <code>>= 2^63</code>, the returned value
  will be equal to <code>this - 2^64</code>.
 */
- (jlong)longLongValue;

/*!
 @brief Returns the result of subtracting this and <code>val</code>.If the result would have more than 64
  bits, returns the low 64 bits of the result.
 @since 14.0
 */
- (ComGoogleCommonPrimitivesUnsignedLong *)minusWithComGoogleCommonPrimitivesUnsignedLong:(ComGoogleCommonPrimitivesUnsignedLong * __nonnull)val;

/*!
 @brief Returns this modulo <code>val</code>.
 @since 14.0
 */
- (ComGoogleCommonPrimitivesUnsignedLong *)modWithComGoogleCommonPrimitivesUnsignedLong:(ComGoogleCommonPrimitivesUnsignedLong * __nonnull)val;

/*!
 @brief Returns the result of adding this and <code>val</code>.If the result would have more than 64 bits,
  returns the low 64 bits of the result.
 @since 14.0
 */
- (ComGoogleCommonPrimitivesUnsignedLong *)plusWithComGoogleCommonPrimitivesUnsignedLong:(ComGoogleCommonPrimitivesUnsignedLong * __nonnull)val;

/*!
 @brief Returns the result of multiplying this and <code>val</code>.If the result would have more than 64
  bits, returns the low 64 bits of the result.
 @since 14.0
 */
- (ComGoogleCommonPrimitivesUnsignedLong *)timesWithComGoogleCommonPrimitivesUnsignedLong:(ComGoogleCommonPrimitivesUnsignedLong * __nonnull)val;

/*!
 @brief Returns a string representation of the <code>UnsignedLong</code> value, in base 10.
 */
- (NSString *)description;

/*!
 @brief Returns a string representation of the <code>UnsignedLong</code> value, in base <code>radix</code>.If
  <code>radix < Character.MIN_RADIX</code> or <code>radix > Character.MAX_RADIX</code>, the radix <code>10</code>
  is used.
 */
- (NSString *)toStringWithInt:(jint)radix;

/*!
 @brief Returns a <code>UnsignedLong</code> representing the same value as the specified <code>BigInteger</code>.
 This is the inverse operation of <code>bigIntegerValue()</code>.
 @throw IllegalArgumentExceptionif <code>value</code> is negative or <code>value >= 2^64</code>
 */
+ (ComGoogleCommonPrimitivesUnsignedLong *)valueOfWithJavaMathBigInteger:(JavaMathBigInteger * __nonnull)value;

/*!
 @brief Returns an <code>UnsignedLong</code> representing the same value as the specified <code>long</code>.
 @throw IllegalArgumentExceptionif <code>value</code> is negative
 @since 14.0
 */
+ (ComGoogleCommonPrimitivesUnsignedLong *)valueOfWithLong:(jlong)value;

/*!
 @brief Returns an <code>UnsignedLong</code> holding the value of the specified <code>String</code>, parsed as an
  unsigned <code>long</code> value.
 @throw NumberFormatExceptionif the string does not contain a parsable unsigned <code>long</code>
      value
 */
+ (ComGoogleCommonPrimitivesUnsignedLong *)valueOfWithNSString:(NSString * __nonnull)string;

/*!
 @brief Returns an <code>UnsignedLong</code> holding the value of the specified <code>String</code>, parsed as an
  unsigned <code>long</code> value in the specified radix.
 @throw NumberFormatExceptionif the string does not contain a parsable unsigned <code>long</code>
      value, or <code>radix</code> is not between <code>Character.MIN_RADIX</code> and <code>Character.MAX_RADIX</code>
 */
+ (ComGoogleCommonPrimitivesUnsignedLong *)valueOfWithNSString:(NSString * __nonnull)string
                                                       withInt:(jint)radix;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonPrimitivesUnsignedLong)

inline ComGoogleCommonPrimitivesUnsignedLong *ComGoogleCommonPrimitivesUnsignedLong_get_ZERO(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComGoogleCommonPrimitivesUnsignedLong *ComGoogleCommonPrimitivesUnsignedLong_ZERO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonPrimitivesUnsignedLong, ZERO, ComGoogleCommonPrimitivesUnsignedLong *)

inline ComGoogleCommonPrimitivesUnsignedLong *ComGoogleCommonPrimitivesUnsignedLong_get_ONE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComGoogleCommonPrimitivesUnsignedLong *ComGoogleCommonPrimitivesUnsignedLong_ONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonPrimitivesUnsignedLong, ONE, ComGoogleCommonPrimitivesUnsignedLong *)

inline ComGoogleCommonPrimitivesUnsignedLong *ComGoogleCommonPrimitivesUnsignedLong_get_MAX_VALUE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComGoogleCommonPrimitivesUnsignedLong *ComGoogleCommonPrimitivesUnsignedLong_MAX_VALUE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonPrimitivesUnsignedLong, MAX_VALUE, ComGoogleCommonPrimitivesUnsignedLong *)

FOUNDATION_EXPORT ComGoogleCommonPrimitivesUnsignedLong *ComGoogleCommonPrimitivesUnsignedLong_fromLongBitsWithLong_(jlong bits);

FOUNDATION_EXPORT ComGoogleCommonPrimitivesUnsignedLong *ComGoogleCommonPrimitivesUnsignedLong_valueOfWithLong_(jlong value);

FOUNDATION_EXPORT ComGoogleCommonPrimitivesUnsignedLong *ComGoogleCommonPrimitivesUnsignedLong_valueOfWithJavaMathBigInteger_(JavaMathBigInteger *value);

FOUNDATION_EXPORT ComGoogleCommonPrimitivesUnsignedLong *ComGoogleCommonPrimitivesUnsignedLong_valueOfWithNSString_(NSString *string);

FOUNDATION_EXPORT ComGoogleCommonPrimitivesUnsignedLong *ComGoogleCommonPrimitivesUnsignedLong_valueOfWithNSString_withInt_(NSString *string, jint radix);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonPrimitivesUnsignedLong)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonPrimitivesUnsignedLong")
