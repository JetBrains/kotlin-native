//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/build_result/java/com/google/common/io/ReaderInputStream.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonIoReaderInputStream")
#ifdef RESTRICT_ComGoogleCommonIoReaderInputStream
#define INCLUDE_ALL_ComGoogleCommonIoReaderInputStream 0
#else
#define INCLUDE_ALL_ComGoogleCommonIoReaderInputStream 1
#endif
#undef RESTRICT_ComGoogleCommonIoReaderInputStream

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonIoReaderInputStream_) && (INCLUDE_ALL_ComGoogleCommonIoReaderInputStream || defined(INCLUDE_ComGoogleCommonIoReaderInputStream))
#define ComGoogleCommonIoReaderInputStream_

#define RESTRICT_JavaIoInputStream 1
#define INCLUDE_JavaIoInputStream 1
#include "java/io/InputStream.h"

@class IOSByteArray;
@class JavaIoReader;
@class JavaNioCharsetCharset;
@class JavaNioCharsetCharsetEncoder;

/*!
 @brief An <code>InputStream</code> that converts characters from a <code>Reader</code> into bytes using an
  arbitrary Charset.
 <p>This is an alternative to copying the data to an <code>OutputStream</code> via a <code>Writer</code>,
  which is necessarily blocking. By implementing an <code>InputStream</code> it allows consumers to
  "pull" as much data as they can handle, which is more convenient when dealing with flow
  controlled, async APIs.
 @author Chris Nokleberg
 */
@interface ComGoogleCommonIoReaderInputStream : JavaIoInputStream

#pragma mark Public

- (void)close;

- (jint)read;

- (jint)readWithByteArray:(IOSByteArray * __nonnull)b
                  withInt:(jint)off
                  withInt:(jint)len;

#pragma mark Package-Private

/*!
 @brief Creates a new input stream that will encode the characters from <code>reader</code> into bytes using
  the given character set.Malformed input and unmappable characters will be replaced.
 @param reader input source
 @param charset character set used for encoding chars to bytes
 @param bufferSize size of internal input and output buffers
 @throw IllegalArgumentExceptionif bufferSize is non-positive
 */
- (instancetype __nonnull)initPackagePrivateWithJavaIoReader:(JavaIoReader * __nonnull)reader
                                   withJavaNioCharsetCharset:(JavaNioCharsetCharset * __nonnull)charset
                                                     withInt:(jint)bufferSize;

/*!
 @brief Creates a new input stream that will encode the characters from <code>reader</code> into bytes using
  the given character set encoder.
 @param reader input source
 @param encoder character set encoder used for encoding chars to bytes
 @param bufferSize size of internal input and output buffers
 @throw IllegalArgumentExceptionif bufferSize is non-positive
 */
- (instancetype __nonnull)initPackagePrivateWithJavaIoReader:(JavaIoReader * __nonnull)reader
                            withJavaNioCharsetCharsetEncoder:(JavaNioCharsetCharsetEncoder * __nonnull)encoder
                                                     withInt:(jint)bufferSize;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonIoReaderInputStream)

FOUNDATION_EXPORT void ComGoogleCommonIoReaderInputStream_initPackagePrivateWithJavaIoReader_withJavaNioCharsetCharset_withInt_(ComGoogleCommonIoReaderInputStream *self, JavaIoReader *reader, JavaNioCharsetCharset *charset, jint bufferSize);

FOUNDATION_EXPORT ComGoogleCommonIoReaderInputStream *new_ComGoogleCommonIoReaderInputStream_initPackagePrivateWithJavaIoReader_withJavaNioCharsetCharset_withInt_(JavaIoReader *reader, JavaNioCharsetCharset *charset, jint bufferSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonIoReaderInputStream *create_ComGoogleCommonIoReaderInputStream_initPackagePrivateWithJavaIoReader_withJavaNioCharsetCharset_withInt_(JavaIoReader *reader, JavaNioCharsetCharset *charset, jint bufferSize);

FOUNDATION_EXPORT void ComGoogleCommonIoReaderInputStream_initPackagePrivateWithJavaIoReader_withJavaNioCharsetCharsetEncoder_withInt_(ComGoogleCommonIoReaderInputStream *self, JavaIoReader *reader, JavaNioCharsetCharsetEncoder *encoder, jint bufferSize);

FOUNDATION_EXPORT ComGoogleCommonIoReaderInputStream *new_ComGoogleCommonIoReaderInputStream_initPackagePrivateWithJavaIoReader_withJavaNioCharsetCharsetEncoder_withInt_(JavaIoReader *reader, JavaNioCharsetCharsetEncoder *encoder, jint bufferSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonIoReaderInputStream *create_ComGoogleCommonIoReaderInputStream_initPackagePrivateWithJavaIoReader_withJavaNioCharsetCharsetEncoder_withInt_(JavaIoReader *reader, JavaNioCharsetCharsetEncoder *encoder, jint bufferSize);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonIoReaderInputStream)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonIoReaderInputStream")
