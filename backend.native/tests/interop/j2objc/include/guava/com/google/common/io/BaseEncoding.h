//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/build_result/java/com/google/common/io/BaseEncoding.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonIoBaseEncoding")
#ifdef RESTRICT_ComGoogleCommonIoBaseEncoding
#define INCLUDE_ALL_ComGoogleCommonIoBaseEncoding 0
#else
#define INCLUDE_ALL_ComGoogleCommonIoBaseEncoding 1
#endif
#undef RESTRICT_ComGoogleCommonIoBaseEncoding
#ifdef INCLUDE_ComGoogleCommonIoBaseEncoding_SeparatedBaseEncoding
#define INCLUDE_ComGoogleCommonIoBaseEncoding 1
#endif
#ifdef INCLUDE_ComGoogleCommonIoBaseEncoding_Base64Encoding
#define INCLUDE_ComGoogleCommonIoBaseEncoding_StandardBaseEncoding 1
#endif
#ifdef INCLUDE_ComGoogleCommonIoBaseEncoding_Base16Encoding
#define INCLUDE_ComGoogleCommonIoBaseEncoding_StandardBaseEncoding 1
#endif
#ifdef INCLUDE_ComGoogleCommonIoBaseEncoding_StandardBaseEncoding
#define INCLUDE_ComGoogleCommonIoBaseEncoding 1
#endif

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonIoBaseEncoding_) && (INCLUDE_ALL_ComGoogleCommonIoBaseEncoding || defined(INCLUDE_ComGoogleCommonIoBaseEncoding))
#define ComGoogleCommonIoBaseEncoding_

@class ComGoogleCommonIoByteSink;
@class ComGoogleCommonIoByteSource;
@class ComGoogleCommonIoCharSink;
@class ComGoogleCommonIoCharSource;
@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaIoReader;
@class JavaIoWriter;
@protocol JavaLangAppendable;
@protocol JavaLangCharSequence;

/*!
 @brief A binary encoding scheme for reversibly translating between byte sequences and printable ASCII
  strings.This class includes several constants for encoding schemes specified by <a href="http://tools.ietf.org/html/rfc4648">
 RFC 4648</a>.
 For example, the expression: 
 @code
 BaseEncoding.base32().encode("foo".getBytes(Charsets.US_ASCII))
  
 
@endcode
  
 <p>returns the string <code>"MZXW6==="</code>, and 
 @code
 byte[] decoded = BaseEncoding.base32().decode("MZXW6==="); 
 
@endcode
  
 <p>...returns the ASCII bytes of the string <code>"foo"</code>.
  
 <p>By default, <code>BaseEncoding</code>'s behavior is relatively strict and in accordance with RFC
  4648. Decoding rejects characters in the wrong case, though padding is optional. To modify
  encoding and decoding behavior, use configuration methods to obtain a new encoding with modified
  behavior: 
 @code
 BaseEncoding.base16().lowerCase().decode("deadbeef");
  
 
@endcode
  
 <p>Warning: BaseEncoding instances are immutable. Invoking a configuration method has no effect
  on the receiving instance; you must store and use the new encoding instance it returns, instead. 
 @code
 // Do NOT do this
  BaseEncoding hex = BaseEncoding.base16();
  hex.lowerCase(); // does nothing!
  return hex.decode("deadbeef"); // throws an IllegalArgumentException 
 
@endcode
  
 <p>It is guaranteed that <code>encoding.decode(encoding.encode(x))</code> is always equal to <code>x</code>
 , but the reverse does not necessarily hold. 
 <table>
  <caption>Encodings</caption>
  <tr>
  <th>Encoding
  <th>Alphabet
  <th><code>char:byte</code> ratio 
 <th>Default padding 
 <th>Comments
  <tr>
  <td><code>base16()</code>
  <td>0-9 A-F 
 <td>2.00
  <td>N/A
  <td>Traditional hexadecimal. Defaults to upper case. 
 <tr>
  <td><code>base32()</code>
  <td>A-Z 2-7 
 <td>1.60
  <td>=
  <td>Human-readable; no possibility of mixing up 0/O or 1/I. Defaults to upper case. 
 <tr>
  <td><code>base32Hex()</code>
  <td>0-9 A-V 
 <td>1.60
  <td>=
  <td>"Numerical" base 32; extended from the traditional hex alphabet. Defaults to upper case. 
 <tr>
  <td><code>base64()</code>
  <td>A-Z a-z 0-9 + / 
 <td>1.33
  <td>=
  <td>
  <tr>
  <td><code>base64Url()</code>
  <td>A-Z a-z 0-9 - _ 
 <td>1.33
  <td>=
  <td>Safe to use as filenames, or to pass in URLs without escaping 
 </table>
  
 <p>All instances of this class are immutable, so they may be stored safely as static constants.
 @author Louis Wasserman
 @since 14.0
 */
@interface ComGoogleCommonIoBaseEncoding : NSObject

#pragma mark Public

/*!
 @brief The "base16" encoding specified by <a href="http://tools.ietf.org/html/rfc4648#section-8">RFC
  4648 section 8</a>, Base 16 Encoding.
 (This is the same as the base 16 encoding from <a href="http://tools.ietf.org/html/rfc3548#section-6">
 RFC 3548</a>.) This is commonly known as
  "hexadecimal" format. 
 <p>No padding is necessary in base 16, so <code>withPadChar(char)</code> and <code>omitPadding()</code>
  have no effect. 
 <p>No line feeds are added by default, as per <a href="http://tools.ietf.org/html/rfc4648#section-3.1">
 RFC 4648 section 3.1</a>, Line Feeds in
  Encoded Data. Line feeds may be added using <code>withSeparator(String, int)</code>.
 */
+ (ComGoogleCommonIoBaseEncoding *)base16;

/*!
 @brief The "base32" encoding specified by <a href="http://tools.ietf.org/html/rfc4648#section-6">RFC
  4648 section 6</a>, Base 32 Encoding.
 (This is the same as the base 32 encoding from <a href="http://tools.ietf.org/html/rfc3548#section-5">
 RFC 3548</a>.)
  
 <p>The character <code>'='</code> is used for padding, but can be omitted
  or replaced.
  
 <p>No line feeds are added by default, as per <a href="http://tools.ietf.org/html/rfc4648#section-3.1">
 RFC 4648 section 3.1</a>, Line Feeds in
  Encoded Data. Line feeds may be added using <code>withSeparator(String, int)</code>.
 */
+ (ComGoogleCommonIoBaseEncoding *)base32;

/*!
 @brief The "base32hex" encoding specified by <a href="http://tools.ietf.org/html/rfc4648#section-7">
 RFC 4648 section 7</a>, Base 32 Encoding
  with Extended Hex Alphabet.There is no corresponding encoding in RFC 3548.
 <p>The character <code>'='</code> is used for padding, but can be omitted
  or replaced.
  
 <p>No line feeds are added by default, as per <a href="http://tools.ietf.org/html/rfc4648#section-3.1">
 RFC 4648 section 3.1</a>, Line Feeds in
  Encoded Data. Line feeds may be added using <code>withSeparator(String, int)</code>.
 */
+ (ComGoogleCommonIoBaseEncoding *)base32Hex;

/*!
 @brief The "base64" base encoding specified by <a href="http://tools.ietf.org/html/rfc4648#section-4">
 RFC 4648 section 4</a>, Base 64 Encoding.
 (This is the same as the base 64 encoding from <a href="http://tools.ietf.org/html/rfc3548#section-3">
 RFC 3548</a>.)
  
 <p>The character <code>'='</code> is used for padding, but can be omitted
  or replaced.
  
 <p>No line feeds are added by default, as per <a href="http://tools.ietf.org/html/rfc4648#section-3.1">
 RFC 4648 section 3.1</a>, Line Feeds in
  Encoded Data. Line feeds may be added using <code>withSeparator(String, int)</code>.
 */
+ (ComGoogleCommonIoBaseEncoding *)base64;

/*!
 @brief The "base64url" encoding specified by <a href="http://tools.ietf.org/html/rfc4648#section-5">
 RFC 4648 section 5</a>, Base 64 Encoding
  with URL and Filename Safe Alphabet, also sometimes referred to as the "web safe Base64."
 (This
  is the same as the base 64 encoding with URL and filename safe alphabet from <a href="http://tools.ietf.org/html/rfc3548#section-4">
 RFC 3548</a>.)
 <p>The character <code>'='</code> is used for padding, but can be omitted
  or replaced.
  
 <p>No line feeds are added by default, as per <a href="http://tools.ietf.org/html/rfc4648#section-3.1">
 RFC 4648 section 3.1</a>, Line Feeds in
  Encoded Data. Line feeds may be added using <code>withSeparator(String, int)</code>.
 */
+ (ComGoogleCommonIoBaseEncoding *)base64Url;

/*!
 @brief Determines whether the specified character sequence is a valid encoded string according to this
  encoding.
 @since 20.0
 */
- (jboolean)canDecodeWithJavaLangCharSequence:(id<JavaLangCharSequence> __nonnull)chars;

/*!
 @brief Decodes the specified character sequence, and returns the resulting <code>byte[]</code>.This is the
  inverse operation to <code>encode(byte[])</code>.
 @throw IllegalArgumentExceptionif the input is not a valid encoded string according to this
      encoding.
 */
- (IOSByteArray *)decodeWithJavaLangCharSequence:(id<JavaLangCharSequence> __nonnull)chars;

/*!
 @brief Returns a <code>ByteSource</code> that reads base-encoded bytes from the specified <code>CharSource</code>
 .
 */
- (ComGoogleCommonIoByteSource *)decodingSourceWithComGoogleCommonIoCharSource:(ComGoogleCommonIoCharSource * __nonnull)encodedSource;

/*!
 @brief Returns an <code>InputStream</code> that decodes base-encoded input from the specified <code>Reader</code>
 .The returned stream throws a <code>DecodingException</code> upon decoding-specific errors.
 */
- (JavaIoInputStream *)decodingStreamWithJavaIoReader:(JavaIoReader * __nonnull)reader;

/*!
 @brief Encodes the specified byte array, and returns the encoded <code>String</code>.
 */
- (NSString *)encodeWithByteArray:(IOSByteArray * __nonnull)bytes;

/*!
 @brief Encodes the specified range of the specified byte array, and returns the encoded <code>String</code>
 .
 */
- (NSString *)encodeWithByteArray:(IOSByteArray * __nonnull)bytes
                          withInt:(jint)off
                          withInt:(jint)len;

/*!
 @brief Returns a <code>ByteSink</code> that writes base-encoded bytes to the specified <code>CharSink</code>.
 */
- (ComGoogleCommonIoByteSink *)encodingSinkWithComGoogleCommonIoCharSink:(ComGoogleCommonIoCharSink * __nonnull)encodedSink;

/*!
 @brief Returns an <code>OutputStream</code> that encodes bytes using this encoding into the specified 
 <code>Writer</code>.When the returned <code>OutputStream</code> is closed, so is the backing <code>Writer</code>
 .
 */
- (JavaIoOutputStream *)encodingStreamWithJavaIoWriter:(JavaIoWriter * __nonnull)writer;

/*!
 @brief Returns an encoding that behaves equivalently to this encoding, but encodes and decodes with
  lowercase letters.Padding and separator characters remain in their original case.
 @throw IllegalStateExceptionif the alphabet used by this encoding contains mixed upper- and
      lower-case characters
 */
- (ComGoogleCommonIoBaseEncoding *)lowerCase;

/*!
 @brief Returns an encoding that behaves equivalently to this encoding, but omits any padding
  characters as specified by <a href="http://tools.ietf.org/html/rfc4648#section-3.2">RFC 4648
  section 3.2</a>, Padding of Encoded Data.
 */
- (ComGoogleCommonIoBaseEncoding *)omitPadding;

/*!
 @brief Returns an encoding that behaves equivalently to this encoding, but encodes and decodes with
  uppercase letters.Padding and separator characters remain in their original case.
 @throw IllegalStateExceptionif the alphabet used by this encoding contains mixed upper- and
      lower-case characters
 */
- (ComGoogleCommonIoBaseEncoding *)upperCase;

/*!
 @brief Returns an encoding that behaves equivalently to this encoding, but uses an alternate character
  for padding.
 @throw IllegalArgumentExceptionif this padding character is already used in the alphabet or a
      separator
 */
- (ComGoogleCommonIoBaseEncoding *)withPadCharWithChar:(jchar)padChar;

/*!
 @brief Returns an encoding that behaves equivalently to this encoding, but adds a separator string
  after every <code>n</code> characters.Any occurrences of any characters that occur in the separator
  are skipped over in decoding.
 @throw IllegalArgumentExceptionif any alphabet or padding characters appear in the separator
      string, or if <code>n <= 0</code>
 @throw UnsupportedOperationExceptionif this encoding already uses a separator
 */
- (ComGoogleCommonIoBaseEncoding *)withSeparatorWithNSString:(NSString * __nonnull)separator
                                                     withInt:(jint)n;

#pragma mark Package-Private

- (instancetype __nonnull)init;

/*!
 @brief Decodes the specified character sequence, and returns the resulting <code>byte[]</code>.This is the
  inverse operation to <code>encode(byte[])</code>.
 @throw DecodingExceptionif the input is not a valid encoded string according to this
      encoding.
 */
- (IOSByteArray *)decodeCheckedWithJavaLangCharSequence:(id<JavaLangCharSequence> __nonnull)chars;

- (jint)decodeToWithByteArray:(IOSByteArray * __nonnull)target
     withJavaLangCharSequence:(id<JavaLangCharSequence> __nonnull)chars;

- (void)encodeToWithJavaLangAppendable:(id<JavaLangAppendable> __nonnull)target
                         withByteArray:(IOSByteArray * __nonnull)bytes
                               withInt:(jint)off
                               withInt:(jint)len;

+ (JavaIoReader *)ignoringReaderWithJavaIoReader:(JavaIoReader * __nonnull)delegate
                                    withNSString:(NSString * __nonnull)toIgnore;

- (jint)maxDecodedSizeWithInt:(jint)chars;

- (jint)maxEncodedSizeWithInt:(jint)bytes;

+ (id<JavaLangAppendable>)separatingAppendableWithJavaLangAppendable:(id<JavaLangAppendable> __nonnull)delegate
                                                        withNSString:(NSString * __nonnull)separator
                                                             withInt:(jint)afterEveryChars;

+ (JavaIoWriter *)separatingWriterWithJavaIoWriter:(JavaIoWriter * __nonnull)delegate
                                      withNSString:(NSString * __nonnull)separator
                                           withInt:(jint)afterEveryChars;

- (id<JavaLangCharSequence>)trimTrailingPaddingWithJavaLangCharSequence:(id<JavaLangCharSequence> __nonnull)chars;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonIoBaseEncoding)

FOUNDATION_EXPORT void ComGoogleCommonIoBaseEncoding_init(ComGoogleCommonIoBaseEncoding *self);

FOUNDATION_EXPORT ComGoogleCommonIoBaseEncoding *ComGoogleCommonIoBaseEncoding_base64(void);

FOUNDATION_EXPORT ComGoogleCommonIoBaseEncoding *ComGoogleCommonIoBaseEncoding_base64Url(void);

FOUNDATION_EXPORT ComGoogleCommonIoBaseEncoding *ComGoogleCommonIoBaseEncoding_base32(void);

FOUNDATION_EXPORT ComGoogleCommonIoBaseEncoding *ComGoogleCommonIoBaseEncoding_base32Hex(void);

FOUNDATION_EXPORT ComGoogleCommonIoBaseEncoding *ComGoogleCommonIoBaseEncoding_base16(void);

FOUNDATION_EXPORT JavaIoReader *ComGoogleCommonIoBaseEncoding_ignoringReaderWithJavaIoReader_withNSString_(JavaIoReader *delegate, NSString *toIgnore);

FOUNDATION_EXPORT id<JavaLangAppendable> ComGoogleCommonIoBaseEncoding_separatingAppendableWithJavaLangAppendable_withNSString_withInt_(id<JavaLangAppendable> delegate, NSString *separator, jint afterEveryChars);

FOUNDATION_EXPORT JavaIoWriter *ComGoogleCommonIoBaseEncoding_separatingWriterWithJavaIoWriter_withNSString_withInt_(JavaIoWriter *delegate, NSString *separator, jint afterEveryChars);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonIoBaseEncoding)

#endif

#if !defined (ComGoogleCommonIoBaseEncoding_DecodingException_) && (INCLUDE_ALL_ComGoogleCommonIoBaseEncoding || defined(INCLUDE_ComGoogleCommonIoBaseEncoding_DecodingException))
#define ComGoogleCommonIoBaseEncoding_DecodingException_

#define RESTRICT_JavaIoIOException 1
#define INCLUDE_JavaIoIOException 1
#include "java/io/IOException.h"

@class JavaLangThrowable;

/*!
 @brief Exception indicating invalid base-encoded input encountered while decoding.
 @author Louis Wasserman
 @since 15.0
 */
@interface ComGoogleCommonIoBaseEncoding_DecodingException : JavaIoIOException

#pragma mark Package-Private

- (instancetype __nonnull)initWithNSString:(NSString * __nonnull)message;

- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable * __nonnull)cause;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString * __nonnull)arg0
                     withJavaLangThrowable:(JavaLangThrowable * __nonnull)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonIoBaseEncoding_DecodingException)

FOUNDATION_EXPORT void ComGoogleCommonIoBaseEncoding_DecodingException_initWithNSString_(ComGoogleCommonIoBaseEncoding_DecodingException *self, NSString *message);

FOUNDATION_EXPORT ComGoogleCommonIoBaseEncoding_DecodingException *new_ComGoogleCommonIoBaseEncoding_DecodingException_initWithNSString_(NSString *message) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonIoBaseEncoding_DecodingException *create_ComGoogleCommonIoBaseEncoding_DecodingException_initWithNSString_(NSString *message);

FOUNDATION_EXPORT void ComGoogleCommonIoBaseEncoding_DecodingException_initWithJavaLangThrowable_(ComGoogleCommonIoBaseEncoding_DecodingException *self, JavaLangThrowable *cause);

FOUNDATION_EXPORT ComGoogleCommonIoBaseEncoding_DecodingException *new_ComGoogleCommonIoBaseEncoding_DecodingException_initWithJavaLangThrowable_(JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonIoBaseEncoding_DecodingException *create_ComGoogleCommonIoBaseEncoding_DecodingException_initWithJavaLangThrowable_(JavaLangThrowable *cause);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonIoBaseEncoding_DecodingException)

#endif

#if !defined (ComGoogleCommonIoBaseEncoding_Alphabet_) && (INCLUDE_ALL_ComGoogleCommonIoBaseEncoding || defined(INCLUDE_ComGoogleCommonIoBaseEncoding_Alphabet))
#define ComGoogleCommonIoBaseEncoding_Alphabet_

@class IOSCharArray;

@interface ComGoogleCommonIoBaseEncoding_Alphabet : NSObject {
 @public
  jint mask_;
  jint bitsPerChar_;
  jint charsPerChunk_;
  jint bytesPerChunk_;
}

#pragma mark Public

- (jboolean)isEqual:(id __nullable)other;

- (NSUInteger)hash;

- (jboolean)matchesWithChar:(jchar)c;

- (NSString *)description;

#pragma mark Package-Private

- (instancetype __nonnull)initWithNSString:(NSString * __nonnull)name
                             withCharArray:(IOSCharArray * __nonnull)chars;

- (jboolean)canDecodeWithChar:(jchar)ch;

- (jint)decodeWithChar:(jchar)ch;

- (jchar)encodeWithInt:(jint)bits;

- (jboolean)isValidPaddingStartPositionWithInt:(jint)index;

- (ComGoogleCommonIoBaseEncoding_Alphabet *)lowerCase;

- (ComGoogleCommonIoBaseEncoding_Alphabet *)upperCase;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonIoBaseEncoding_Alphabet)

FOUNDATION_EXPORT void ComGoogleCommonIoBaseEncoding_Alphabet_initWithNSString_withCharArray_(ComGoogleCommonIoBaseEncoding_Alphabet *self, NSString *name, IOSCharArray *chars);

FOUNDATION_EXPORT ComGoogleCommonIoBaseEncoding_Alphabet *new_ComGoogleCommonIoBaseEncoding_Alphabet_initWithNSString_withCharArray_(NSString *name, IOSCharArray *chars) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonIoBaseEncoding_Alphabet *create_ComGoogleCommonIoBaseEncoding_Alphabet_initWithNSString_withCharArray_(NSString *name, IOSCharArray *chars);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonIoBaseEncoding_Alphabet)

#endif

#if !defined (ComGoogleCommonIoBaseEncoding_StandardBaseEncoding_) && (INCLUDE_ALL_ComGoogleCommonIoBaseEncoding || defined(INCLUDE_ComGoogleCommonIoBaseEncoding_StandardBaseEncoding))
#define ComGoogleCommonIoBaseEncoding_StandardBaseEncoding_

@class ComGoogleCommonIoBaseEncoding;
@class ComGoogleCommonIoBaseEncoding_Alphabet;
@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaIoReader;
@class JavaIoWriter;
@class JavaLangCharacter;
@protocol JavaLangAppendable;
@protocol JavaLangCharSequence;

@interface ComGoogleCommonIoBaseEncoding_StandardBaseEncoding : ComGoogleCommonIoBaseEncoding {
 @public
  ComGoogleCommonIoBaseEncoding_Alphabet *alphabet_;
  JavaLangCharacter *paddingChar_;
}

#pragma mark Public

- (jboolean)canDecodeWithJavaLangCharSequence:(id<JavaLangCharSequence> __nonnull)chars;

- (JavaIoInputStream *)decodingStreamWithJavaIoReader:(JavaIoReader * __nonnull)reader;

- (JavaIoOutputStream *)encodingStreamWithJavaIoWriter:(JavaIoWriter * __nonnull)outArg;

- (jboolean)isEqual:(id __nullable)other;

- (NSUInteger)hash;

- (ComGoogleCommonIoBaseEncoding *)lowerCase;

- (ComGoogleCommonIoBaseEncoding *)omitPadding;

- (NSString *)description;

- (ComGoogleCommonIoBaseEncoding *)upperCase;

- (ComGoogleCommonIoBaseEncoding *)withPadCharWithChar:(jchar)padChar;

- (ComGoogleCommonIoBaseEncoding *)withSeparatorWithNSString:(NSString * __nonnull)separator
                                                     withInt:(jint)afterEveryChars;

#pragma mark Package-Private

- (instancetype __nonnull)initWithComGoogleCommonIoBaseEncoding_Alphabet:(ComGoogleCommonIoBaseEncoding_Alphabet * __nonnull)alphabet
                                                   withJavaLangCharacter:(JavaLangCharacter * __nullable)paddingChar;

- (instancetype __nonnull)initWithNSString:(NSString * __nonnull)name
                              withNSString:(NSString * __nonnull)alphabetChars
                     withJavaLangCharacter:(JavaLangCharacter * __nullable)paddingChar;

- (jint)decodeToWithByteArray:(IOSByteArray * __nonnull)target
     withJavaLangCharSequence:(id<JavaLangCharSequence> __nonnull)chars;

- (void)encodeChunkToWithJavaLangAppendable:(id<JavaLangAppendable> __nonnull)target
                              withByteArray:(IOSByteArray * __nonnull)bytes
                                    withInt:(jint)off
                                    withInt:(jint)len;

- (void)encodeToWithJavaLangAppendable:(id<JavaLangAppendable> __nonnull)target
                         withByteArray:(IOSByteArray * __nonnull)bytes
                               withInt:(jint)off
                               withInt:(jint)len;

- (jint)maxDecodedSizeWithInt:(jint)chars;

- (jint)maxEncodedSizeWithInt:(jint)bytes;

- (ComGoogleCommonIoBaseEncoding *)newInstanceWithComGoogleCommonIoBaseEncoding_Alphabet:(ComGoogleCommonIoBaseEncoding_Alphabet * __nonnull)alphabet
                                                                   withJavaLangCharacter:(JavaLangCharacter * __nullable)paddingChar OBJC_METHOD_FAMILY_NONE;

- (id<JavaLangCharSequence>)trimTrailingPaddingWithJavaLangCharSequence:(id<JavaLangCharSequence> __nonnull)chars;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonIoBaseEncoding_StandardBaseEncoding)

J2OBJC_FIELD_SETTER(ComGoogleCommonIoBaseEncoding_StandardBaseEncoding, alphabet_, ComGoogleCommonIoBaseEncoding_Alphabet *)
J2OBJC_FIELD_SETTER(ComGoogleCommonIoBaseEncoding_StandardBaseEncoding, paddingChar_, JavaLangCharacter *)

FOUNDATION_EXPORT void ComGoogleCommonIoBaseEncoding_StandardBaseEncoding_initWithNSString_withNSString_withJavaLangCharacter_(ComGoogleCommonIoBaseEncoding_StandardBaseEncoding *self, NSString *name, NSString *alphabetChars, JavaLangCharacter *paddingChar);

FOUNDATION_EXPORT ComGoogleCommonIoBaseEncoding_StandardBaseEncoding *new_ComGoogleCommonIoBaseEncoding_StandardBaseEncoding_initWithNSString_withNSString_withJavaLangCharacter_(NSString *name, NSString *alphabetChars, JavaLangCharacter *paddingChar) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonIoBaseEncoding_StandardBaseEncoding *create_ComGoogleCommonIoBaseEncoding_StandardBaseEncoding_initWithNSString_withNSString_withJavaLangCharacter_(NSString *name, NSString *alphabetChars, JavaLangCharacter *paddingChar);

FOUNDATION_EXPORT void ComGoogleCommonIoBaseEncoding_StandardBaseEncoding_initWithComGoogleCommonIoBaseEncoding_Alphabet_withJavaLangCharacter_(ComGoogleCommonIoBaseEncoding_StandardBaseEncoding *self, ComGoogleCommonIoBaseEncoding_Alphabet *alphabet, JavaLangCharacter *paddingChar);

FOUNDATION_EXPORT ComGoogleCommonIoBaseEncoding_StandardBaseEncoding *new_ComGoogleCommonIoBaseEncoding_StandardBaseEncoding_initWithComGoogleCommonIoBaseEncoding_Alphabet_withJavaLangCharacter_(ComGoogleCommonIoBaseEncoding_Alphabet *alphabet, JavaLangCharacter *paddingChar) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonIoBaseEncoding_StandardBaseEncoding *create_ComGoogleCommonIoBaseEncoding_StandardBaseEncoding_initWithComGoogleCommonIoBaseEncoding_Alphabet_withJavaLangCharacter_(ComGoogleCommonIoBaseEncoding_Alphabet *alphabet, JavaLangCharacter *paddingChar);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonIoBaseEncoding_StandardBaseEncoding)

#endif

#if !defined (ComGoogleCommonIoBaseEncoding_Base16Encoding_) && (INCLUDE_ALL_ComGoogleCommonIoBaseEncoding || defined(INCLUDE_ComGoogleCommonIoBaseEncoding_Base16Encoding))
#define ComGoogleCommonIoBaseEncoding_Base16Encoding_

@class ComGoogleCommonIoBaseEncoding;
@class ComGoogleCommonIoBaseEncoding_Alphabet;
@class IOSByteArray;
@class IOSCharArray;
@class JavaLangCharacter;
@protocol JavaLangAppendable;
@protocol JavaLangCharSequence;

@interface ComGoogleCommonIoBaseEncoding_Base16Encoding : ComGoogleCommonIoBaseEncoding_StandardBaseEncoding {
 @public
  IOSCharArray *encoding_;
}

#pragma mark Package-Private

- (instancetype __nonnull)initWithNSString:(NSString * __nonnull)name
                              withNSString:(NSString * __nonnull)alphabetChars;

- (jint)decodeToWithByteArray:(IOSByteArray * __nonnull)target
     withJavaLangCharSequence:(id<JavaLangCharSequence> __nonnull)chars;

- (void)encodeToWithJavaLangAppendable:(id<JavaLangAppendable> __nonnull)target
                         withByteArray:(IOSByteArray * __nonnull)bytes
                               withInt:(jint)off
                               withInt:(jint)len;

- (ComGoogleCommonIoBaseEncoding *)newInstanceWithComGoogleCommonIoBaseEncoding_Alphabet:(ComGoogleCommonIoBaseEncoding_Alphabet * __nonnull)alphabet
                                                                   withJavaLangCharacter:(JavaLangCharacter * __nullable)paddingChar OBJC_METHOD_FAMILY_NONE;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithComGoogleCommonIoBaseEncoding_Alphabet:(ComGoogleCommonIoBaseEncoding_Alphabet * __nonnull)arg0
                                                   withJavaLangCharacter:(JavaLangCharacter * __nullable)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString * __nonnull)arg0
                              withNSString:(NSString * __nonnull)arg1
                     withJavaLangCharacter:(JavaLangCharacter * __nullable)arg2 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonIoBaseEncoding_Base16Encoding)

J2OBJC_FIELD_SETTER(ComGoogleCommonIoBaseEncoding_Base16Encoding, encoding_, IOSCharArray *)

FOUNDATION_EXPORT void ComGoogleCommonIoBaseEncoding_Base16Encoding_initWithNSString_withNSString_(ComGoogleCommonIoBaseEncoding_Base16Encoding *self, NSString *name, NSString *alphabetChars);

FOUNDATION_EXPORT ComGoogleCommonIoBaseEncoding_Base16Encoding *new_ComGoogleCommonIoBaseEncoding_Base16Encoding_initWithNSString_withNSString_(NSString *name, NSString *alphabetChars) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonIoBaseEncoding_Base16Encoding *create_ComGoogleCommonIoBaseEncoding_Base16Encoding_initWithNSString_withNSString_(NSString *name, NSString *alphabetChars);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonIoBaseEncoding_Base16Encoding)

#endif

#if !defined (ComGoogleCommonIoBaseEncoding_Base64Encoding_) && (INCLUDE_ALL_ComGoogleCommonIoBaseEncoding || defined(INCLUDE_ComGoogleCommonIoBaseEncoding_Base64Encoding))
#define ComGoogleCommonIoBaseEncoding_Base64Encoding_

@class ComGoogleCommonIoBaseEncoding;
@class ComGoogleCommonIoBaseEncoding_Alphabet;
@class IOSByteArray;
@class JavaLangCharacter;
@protocol JavaLangAppendable;
@protocol JavaLangCharSequence;

@interface ComGoogleCommonIoBaseEncoding_Base64Encoding : ComGoogleCommonIoBaseEncoding_StandardBaseEncoding

#pragma mark Package-Private

- (instancetype __nonnull)initWithNSString:(NSString * __nonnull)name
                              withNSString:(NSString * __nonnull)alphabetChars
                     withJavaLangCharacter:(JavaLangCharacter * __nullable)paddingChar;

- (jint)decodeToWithByteArray:(IOSByteArray * __nonnull)target
     withJavaLangCharSequence:(id<JavaLangCharSequence> __nonnull)chars;

- (void)encodeToWithJavaLangAppendable:(id<JavaLangAppendable> __nonnull)target
                         withByteArray:(IOSByteArray * __nonnull)bytes
                               withInt:(jint)off
                               withInt:(jint)len;

- (ComGoogleCommonIoBaseEncoding *)newInstanceWithComGoogleCommonIoBaseEncoding_Alphabet:(ComGoogleCommonIoBaseEncoding_Alphabet * __nonnull)alphabet
                                                                   withJavaLangCharacter:(JavaLangCharacter * __nullable)paddingChar OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonIoBaseEncoding_Base64Encoding)

FOUNDATION_EXPORT void ComGoogleCommonIoBaseEncoding_Base64Encoding_initWithNSString_withNSString_withJavaLangCharacter_(ComGoogleCommonIoBaseEncoding_Base64Encoding *self, NSString *name, NSString *alphabetChars, JavaLangCharacter *paddingChar);

FOUNDATION_EXPORT ComGoogleCommonIoBaseEncoding_Base64Encoding *new_ComGoogleCommonIoBaseEncoding_Base64Encoding_initWithNSString_withNSString_withJavaLangCharacter_(NSString *name, NSString *alphabetChars, JavaLangCharacter *paddingChar) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonIoBaseEncoding_Base64Encoding *create_ComGoogleCommonIoBaseEncoding_Base64Encoding_initWithNSString_withNSString_withJavaLangCharacter_(NSString *name, NSString *alphabetChars, JavaLangCharacter *paddingChar);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonIoBaseEncoding_Base64Encoding)

#endif

#if !defined (ComGoogleCommonIoBaseEncoding_SeparatedBaseEncoding_) && (INCLUDE_ALL_ComGoogleCommonIoBaseEncoding || defined(INCLUDE_ComGoogleCommonIoBaseEncoding_SeparatedBaseEncoding))
#define ComGoogleCommonIoBaseEncoding_SeparatedBaseEncoding_

@class ComGoogleCommonIoBaseEncoding;
@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaIoReader;
@class JavaIoWriter;
@protocol JavaLangAppendable;
@protocol JavaLangCharSequence;

@interface ComGoogleCommonIoBaseEncoding_SeparatedBaseEncoding : ComGoogleCommonIoBaseEncoding

#pragma mark Public

- (jboolean)canDecodeWithJavaLangCharSequence:(id<JavaLangCharSequence> __nonnull)chars;

- (JavaIoInputStream *)decodingStreamWithJavaIoReader:(JavaIoReader * __nonnull)reader;

- (JavaIoOutputStream *)encodingStreamWithJavaIoWriter:(JavaIoWriter * __nonnull)output;

- (ComGoogleCommonIoBaseEncoding *)lowerCase;

- (ComGoogleCommonIoBaseEncoding *)omitPadding;

- (NSString *)description;

- (ComGoogleCommonIoBaseEncoding *)upperCase;

- (ComGoogleCommonIoBaseEncoding *)withPadCharWithChar:(jchar)padChar;

- (ComGoogleCommonIoBaseEncoding *)withSeparatorWithNSString:(NSString * __nonnull)separator
                                                     withInt:(jint)afterEveryChars;

#pragma mark Package-Private

- (instancetype __nonnull)initWithComGoogleCommonIoBaseEncoding:(ComGoogleCommonIoBaseEncoding * __nonnull)delegate
                                                   withNSString:(NSString * __nonnull)separator
                                                        withInt:(jint)afterEveryChars;

- (jint)decodeToWithByteArray:(IOSByteArray * __nonnull)target
     withJavaLangCharSequence:(id<JavaLangCharSequence> __nonnull)chars;

- (void)encodeToWithJavaLangAppendable:(id<JavaLangAppendable> __nonnull)target
                         withByteArray:(IOSByteArray * __nonnull)bytes
                               withInt:(jint)off
                               withInt:(jint)len;

- (jint)maxDecodedSizeWithInt:(jint)chars;

- (jint)maxEncodedSizeWithInt:(jint)bytes;

- (id<JavaLangCharSequence>)trimTrailingPaddingWithJavaLangCharSequence:(id<JavaLangCharSequence> __nonnull)chars;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonIoBaseEncoding_SeparatedBaseEncoding)

FOUNDATION_EXPORT void ComGoogleCommonIoBaseEncoding_SeparatedBaseEncoding_initWithComGoogleCommonIoBaseEncoding_withNSString_withInt_(ComGoogleCommonIoBaseEncoding_SeparatedBaseEncoding *self, ComGoogleCommonIoBaseEncoding *delegate, NSString *separator, jint afterEveryChars);

FOUNDATION_EXPORT ComGoogleCommonIoBaseEncoding_SeparatedBaseEncoding *new_ComGoogleCommonIoBaseEncoding_SeparatedBaseEncoding_initWithComGoogleCommonIoBaseEncoding_withNSString_withInt_(ComGoogleCommonIoBaseEncoding *delegate, NSString *separator, jint afterEveryChars) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonIoBaseEncoding_SeparatedBaseEncoding *create_ComGoogleCommonIoBaseEncoding_SeparatedBaseEncoding_initWithComGoogleCommonIoBaseEncoding_withNSString_withInt_(ComGoogleCommonIoBaseEncoding *delegate, NSString *separator, jint afterEveryChars);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonIoBaseEncoding_SeparatedBaseEncoding)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonIoBaseEncoding")
