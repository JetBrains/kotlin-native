//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/build_result/java/com/google/common/collect/ImmutableList.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCollectImmutableList")
#ifdef RESTRICT_ComGoogleCommonCollectImmutableList
#define INCLUDE_ALL_ComGoogleCommonCollectImmutableList 0
#else
#define INCLUDE_ALL_ComGoogleCommonCollectImmutableList 1
#endif
#undef RESTRICT_ComGoogleCommonCollectImmutableList
#ifdef INCLUDE_ComGoogleCommonCollectImmutableList_SubList
#define INCLUDE_ComGoogleCommonCollectImmutableList 1
#endif

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCollectImmutableList_) && (INCLUDE_ALL_ComGoogleCommonCollectImmutableList || defined(INCLUDE_ComGoogleCommonCollectImmutableList))
#define ComGoogleCommonCollectImmutableList_

#define RESTRICT_ComGoogleCommonCollectImmutableCollection 1
#define INCLUDE_ComGoogleCommonCollectImmutableCollection 1
#include "com/google/common/collect/ImmutableCollection.h"

#define RESTRICT_JavaUtilList 1
#define INCLUDE_JavaUtilList 1
#include "java/util/List.h"

#define RESTRICT_JavaUtilRandomAccess 1
#define INCLUDE_JavaUtilRandomAccess 1
#include "java/util/RandomAccess.h"

@class ComGoogleCommonCollectImmutableList_Builder;
@class ComGoogleCommonCollectUnmodifiableIterator;
@class ComGoogleCommonCollectUnmodifiableListIterator;
@class IOSObjectArray;
@protocol JavaLangIterable;
@protocol JavaUtilCollection;
@protocol JavaUtilComparator;
@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilFunctionUnaryOperator;
@protocol JavaUtilIterator;
@protocol JavaUtilSpliterator;
@protocol JavaUtilStreamCollector;

/*!
 @brief A <code>List</code> whose contents will never change, with many other important properties detailed at 
 <code>ImmutableCollection</code>.
 <p>See the Guava User Guide article on <a href="https://github.com/google/guava/wiki/ImmutableCollectionsExplained">
  immutable collections</a>.
 - seealso: ImmutableMap
 - seealso: ImmutableSet
 @author Kevin Bourrillion
 @since 2.0
 */
@interface ComGoogleCommonCollectImmutableList : ComGoogleCommonCollectImmutableCollection < JavaUtilList, JavaUtilRandomAccess >

#pragma mark Public

/*!
 @brief Guaranteed to throw an exception and leave the list unmodified.
 @throw UnsupportedOperationExceptionalways
 */
- (void)addWithInt:(jint)index
            withId:(id)element __attribute__((deprecated));

/*!
 @brief Guaranteed to throw an exception and leave the list unmodified.
 @throw UnsupportedOperationExceptionalways
 */
- (jboolean)addAllWithInt:(jint)index
   withJavaUtilCollection:(id<JavaUtilCollection>)newElements __attribute__((deprecated));

/*!
 @brief Returns this list instance.
 @since 2.0
 */
- (ComGoogleCommonCollectImmutableList *)asList;

/*!
 @brief Returns a new builder.The generated builder is equivalent to the builder created by the <code>Builder</code>
  constructor.
 */
+ (ComGoogleCommonCollectImmutableList_Builder *)builder;

/*!
 @brief Returns a new builder, expecting the specified number of elements to be added.
 <p>If <code>expectedSize</code> is exactly the number of elements added to the builder before <code>Builder.build</code>
  is called, the builder is likely to perform better than an unsized <code>builder()</code>
  would have. 
 <p>It is not specified if any performance benefits apply if <code>expectedSize</code> is close to,
  but not exactly, the number of elements added to the builder.
 @since 23.1
 */
+ (ComGoogleCommonCollectImmutableList_Builder *)builderWithExpectedSizeWithInt:(jint)expectedSize;

- (jboolean)containsWithId:(id __nullable)object;

/*!
 @brief Returns an immutable list containing the given elements, in order.
 <p>Despite the method name, this method attempts to avoid actually copying the data when it is
  safe to do so. The exact circumstances under which a copy will or will not be performed are
  undocumented and subject to change. 
 <p>Note that if <code>list</code> is a <code>List<String></code>, then <code>ImmutableList.copyOf(list)</code>
  returns an <code>ImmutableList<String></code> containing each of the strings in <code>list</code>, while
  ImmutableList.of(list)} returns an <code>ImmutableList<List<String>></code> containing one element
  (the given list itself). 
 <p>This method is safe to use even when <code>elements</code> is a synchronized or concurrent
  collection that is currently being modified by another thread.
 @throw NullPointerExceptionif any of <code>elements</code> is null
 */
+ (ComGoogleCommonCollectImmutableList *)copyOfWithJavaUtilCollection:(id<JavaUtilCollection>)elements OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns an immutable list containing the given elements, in order.
 @throw NullPointerExceptionif any of <code>elements</code> is null
 @since 3.0
 */
+ (ComGoogleCommonCollectImmutableList *)copyOfWithNSObjectArray:(IOSObjectArray *)elements OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns an immutable list containing the given elements, in order.If <code>elements</code> is a 
 <code>Collection</code>, this method behaves exactly as <code>copyOf(Collection)</code>; otherwise, it
  behaves exactly as <code>copyOf(elements.iterator()</code>.
 @throw NullPointerExceptionif any of <code>elements</code> is null
 */
+ (ComGoogleCommonCollectImmutableList *)copyOfWithJavaLangIterable:(id<JavaLangIterable>)elements OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns an immutable list containing the given elements, in order.
 @throw NullPointerExceptionif any of <code>elements</code> is null
 */
+ (ComGoogleCommonCollectImmutableList *)copyOfWithJavaUtilIterator:(id<JavaUtilIterator>)elements OBJC_METHOD_FAMILY_NONE;

- (jboolean)isEqual:(id __nullable)obj;

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)consumer;

- (NSUInteger)hash;

- (jint)indexOfWithId:(id __nullable)object;

- (ComGoogleCommonCollectUnmodifiableIterator *)iterator;

- (jint)lastIndexOfWithId:(id __nullable)object;

- (ComGoogleCommonCollectUnmodifiableListIterator *)listIterator;

- (ComGoogleCommonCollectUnmodifiableListIterator *)listIteratorWithInt:(jint)index;

/*!
 @brief Returns the empty immutable list.This list behaves and performs comparably to <code>Collections.emptyList</code>
 , and is preferable mainly for consistency and maintainability of your
  code.
 */
+ (ComGoogleCommonCollectImmutableList *)of;

/*!
 @brief Returns an immutable list containing a single element.This list behaves and performs
  comparably to <code>Collections.singleton</code>, but will not accept a null element.
 It is
  preferable mainly for consistency and maintainability of your code.
 @throw NullPointerExceptionif <code>element</code> is null
 */
+ (ComGoogleCommonCollectImmutableList *)ofWithId:(id)element;

/*!
 @brief Returns an immutable list containing the given elements, in order.
 @throw NullPointerExceptionif any element is null
 */
+ (ComGoogleCommonCollectImmutableList *)ofWithId:(id)e1
                                           withId:(id)e2;

/*!
 @brief Returns an immutable list containing the given elements, in order.
 @throw NullPointerExceptionif any element is null
 */
+ (ComGoogleCommonCollectImmutableList *)ofWithId:(id)e1
                                           withId:(id)e2
                                           withId:(id)e3;

/*!
 @brief Returns an immutable list containing the given elements, in order.
 @throw NullPointerExceptionif any element is null
 */
+ (ComGoogleCommonCollectImmutableList *)ofWithId:(id)e1
                                           withId:(id)e2
                                           withId:(id)e3
                                           withId:(id)e4;

/*!
 @brief Returns an immutable list containing the given elements, in order.
 @throw NullPointerExceptionif any element is null
 */
+ (ComGoogleCommonCollectImmutableList *)ofWithId:(id)e1
                                           withId:(id)e2
                                           withId:(id)e3
                                           withId:(id)e4
                                           withId:(id)e5;

/*!
 @brief Returns an immutable list containing the given elements, in order.
 @throw NullPointerExceptionif any element is null
 */
+ (ComGoogleCommonCollectImmutableList *)ofWithId:(id)e1
                                           withId:(id)e2
                                           withId:(id)e3
                                           withId:(id)e4
                                           withId:(id)e5
                                           withId:(id)e6;

/*!
 @brief Returns an immutable list containing the given elements, in order.
 @throw NullPointerExceptionif any element is null
 */
+ (ComGoogleCommonCollectImmutableList *)ofWithId:(id)e1
                                           withId:(id)e2
                                           withId:(id)e3
                                           withId:(id)e4
                                           withId:(id)e5
                                           withId:(id)e6
                                           withId:(id)e7;

/*!
 @brief Returns an immutable list containing the given elements, in order.
 @throw NullPointerExceptionif any element is null
 */
+ (ComGoogleCommonCollectImmutableList *)ofWithId:(id)e1
                                           withId:(id)e2
                                           withId:(id)e3
                                           withId:(id)e4
                                           withId:(id)e5
                                           withId:(id)e6
                                           withId:(id)e7
                                           withId:(id)e8;

/*!
 @brief Returns an immutable list containing the given elements, in order.
 @throw NullPointerExceptionif any element is null
 */
+ (ComGoogleCommonCollectImmutableList *)ofWithId:(id)e1
                                           withId:(id)e2
                                           withId:(id)e3
                                           withId:(id)e4
                                           withId:(id)e5
                                           withId:(id)e6
                                           withId:(id)e7
                                           withId:(id)e8
                                           withId:(id)e9;

/*!
 @brief Returns an immutable list containing the given elements, in order.
 @throw NullPointerExceptionif any element is null
 */
+ (ComGoogleCommonCollectImmutableList *)ofWithId:(id)e1
                                           withId:(id)e2
                                           withId:(id)e3
                                           withId:(id)e4
                                           withId:(id)e5
                                           withId:(id)e6
                                           withId:(id)e7
                                           withId:(id)e8
                                           withId:(id)e9
                                           withId:(id)e10;

/*!
 @brief Returns an immutable list containing the given elements, in order.
 @throw NullPointerExceptionif any element is null
 */
+ (ComGoogleCommonCollectImmutableList *)ofWithId:(id)e1
                                           withId:(id)e2
                                           withId:(id)e3
                                           withId:(id)e4
                                           withId:(id)e5
                                           withId:(id)e6
                                           withId:(id)e7
                                           withId:(id)e8
                                           withId:(id)e9
                                           withId:(id)e10
                                           withId:(id)e11;

/*!
 @brief Returns an immutable list containing the given elements, in order.
 <p>The array <code>others</code> must not be longer than <code>Integer.MAX_VALUE - 12</code>.
 @throw NullPointerExceptionif any element is null
 @since 3.0 (source-compatible since 2.0)
 */
+ (ComGoogleCommonCollectImmutableList *)ofWithId:(id)e1
                                           withId:(id)e2
                                           withId:(id)e3
                                           withId:(id)e4
                                           withId:(id)e5
                                           withId:(id)e6
                                           withId:(id)e7
                                           withId:(id)e8
                                           withId:(id)e9
                                           withId:(id)e10
                                           withId:(id)e11
                                           withId:(id)e12
                                withNSObjectArray:(IOSObjectArray *)others;

/*!
 @brief Guaranteed to throw an exception and leave the list unmodified.
 @throw UnsupportedOperationExceptionalways
 */
- (id)removeWithInt:(jint)index __attribute__((deprecated));

/*!
 @brief Guaranteed to throw an exception and leave the list unmodified.
 @throw UnsupportedOperationExceptionalways
 */
- (void)replaceAllWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)operator_ __attribute__((deprecated));

/*!
 @brief Returns a view of this immutable list in reverse order.For example, <code>ImmutableList.of(1,
  2, 3).reverse()</code>
  is equivalent to <code>ImmutableList.of(3, 2, 1)</code>.
 @return a view of this immutable list in reverse order
 @since 7.0
 */
- (ComGoogleCommonCollectImmutableList *)reverse;

/*!
 @brief Guaranteed to throw an exception and leave the list unmodified.
 @throw UnsupportedOperationExceptionalways
 */
- (id)setWithInt:(jint)index
          withId:(id)element __attribute__((deprecated));

/*!
 @brief Guaranteed to throw an exception and leave the list unmodified.
 @throw UnsupportedOperationExceptionalways
 */
- (void)sortWithJavaUtilComparator:(id<JavaUtilComparator>)c __attribute__((deprecated));

/*!
 @brief Returns an immutable list containing the given elements, in sorted order relative to the
  specified comparator.The sorting algorithm used is stable, so elements that compare as equal
  will stay in the order in which they appear in the input.
 <p>If your data has no duplicates, or you wish to deduplicate elements, use <code>ImmutableSortedSet.copyOf(comparator, elements)</code>
 ; if you want a <code>List</code> you can use its 
 <code>asList()</code> view. 
 <p><b>Java 8 users:</b> If you want to convert a <code>java.util.stream.Stream</code> to a sorted 
 <code>ImmutableList</code>, use <code>stream.sorted(comparator).collect(toImmutableList())</code>.
 @throw NullPointerExceptionif any element in the input is null
 @since 21.0
 */
+ (ComGoogleCommonCollectImmutableList *)sortedCopyOfWithJavaUtilComparator:(id<JavaUtilComparator>)comparator
                                                       withJavaLangIterable:(id<JavaLangIterable>)elements;

/*!
 @brief Returns an immutable list containing the given elements, sorted according to their natural
  order.The sorting algorithm used is stable, so elements that compare as equal will stay in the
  order in which they appear in the input.
 <p>If your data has no duplicates, or you wish to deduplicate elements, use <code>ImmutableSortedSet.copyOf(elements)</code>
 ; if you want a <code>List</code> you can use its <code>asList()</code>
  view. 
 <p><b>Java 8 users:</b> If you want to convert a <code>java.util.stream.Stream</code> to a sorted 
 <code>ImmutableList</code>, use <code>stream.sorted().collect(toImmutableList())</code>.
 @throw NullPointerExceptionif any element in the input is null
 @since 21.0
 */
+ (ComGoogleCommonCollectImmutableList *)sortedCopyOfWithJavaLangIterable:(id<JavaLangIterable>)elements;

- (id<JavaUtilSpliterator>)spliterator;

/*!
 @brief Returns an immutable list of the elements between the specified <code>fromIndex</code>, inclusive,
  and <code>toIndex</code>, exclusive.
 (If <code>fromIndex</code> and <code>toIndex</code> are equal, the empty
  immutable list is returned.)
 */
- (ComGoogleCommonCollectImmutableList *)subListWithInt:(jint)fromIndex
                                                withInt:(jint)toIndex;

/*!
 @brief Returns a <code>Collector</code> that accumulates the input elements into a new <code>ImmutableList</code>
 , in encounter order.
 @since 21.0
 */
+ (id<JavaUtilStreamCollector>)toImmutableList;

#pragma mark Package-Private

- (instancetype __nonnull)init;

/*!
 @brief Views the array as an immutable list.Does not check for nulls; does not copy.
 <p>The array must be internally created.
 */
+ (ComGoogleCommonCollectImmutableList *)asImmutableListWithNSObjectArray:(IOSObjectArray *)elements;

/*!
 @brief Views the array as an immutable list.Copies if the specified range does not cover the complete
  array.
 Does not check for nulls.
 */
+ (ComGoogleCommonCollectImmutableList *)asImmutableListWithNSObjectArray:(IOSObjectArray *)elements
                                                                  withInt:(jint)length;

- (jint)copyIntoArrayWithNSObjectArray:(IOSObjectArray *)dst
                               withInt:(jint)offset OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Called by the default implementation of <code>subList</code> when <code>toIndex - fromIndex > 1</code>,
  after index validation has already been performed.
 */
- (ComGoogleCommonCollectImmutableList *)subListUncheckedWithInt:(jint)fromIndex
                                                         withInt:(jint)toIndex;

- (id)writeReplace;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectImmutableList)

FOUNDATION_EXPORT id<JavaUtilStreamCollector> ComGoogleCommonCollectImmutableList_toImmutableList(void);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableList *ComGoogleCommonCollectImmutableList_of(void);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableList *ComGoogleCommonCollectImmutableList_ofWithId_(id element);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableList *ComGoogleCommonCollectImmutableList_ofWithId_withId_(id e1, id e2);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableList *ComGoogleCommonCollectImmutableList_ofWithId_withId_withId_(id e1, id e2, id e3);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableList *ComGoogleCommonCollectImmutableList_ofWithId_withId_withId_withId_(id e1, id e2, id e3, id e4);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableList *ComGoogleCommonCollectImmutableList_ofWithId_withId_withId_withId_withId_(id e1, id e2, id e3, id e4, id e5);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableList *ComGoogleCommonCollectImmutableList_ofWithId_withId_withId_withId_withId_withId_(id e1, id e2, id e3, id e4, id e5, id e6);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableList *ComGoogleCommonCollectImmutableList_ofWithId_withId_withId_withId_withId_withId_withId_(id e1, id e2, id e3, id e4, id e5, id e6, id e7);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableList *ComGoogleCommonCollectImmutableList_ofWithId_withId_withId_withId_withId_withId_withId_withId_(id e1, id e2, id e3, id e4, id e5, id e6, id e7, id e8);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableList *ComGoogleCommonCollectImmutableList_ofWithId_withId_withId_withId_withId_withId_withId_withId_withId_(id e1, id e2, id e3, id e4, id e5, id e6, id e7, id e8, id e9);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableList *ComGoogleCommonCollectImmutableList_ofWithId_withId_withId_withId_withId_withId_withId_withId_withId_withId_(id e1, id e2, id e3, id e4, id e5, id e6, id e7, id e8, id e9, id e10);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableList *ComGoogleCommonCollectImmutableList_ofWithId_withId_withId_withId_withId_withId_withId_withId_withId_withId_withId_(id e1, id e2, id e3, id e4, id e5, id e6, id e7, id e8, id e9, id e10, id e11);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableList *ComGoogleCommonCollectImmutableList_ofWithId_withId_withId_withId_withId_withId_withId_withId_withId_withId_withId_withId_withNSObjectArray_(id e1, id e2, id e3, id e4, id e5, id e6, id e7, id e8, id e9, id e10, id e11, id e12, IOSObjectArray *others);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableList *ComGoogleCommonCollectImmutableList_copyOfWithJavaLangIterable_(id<JavaLangIterable> elements);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableList *ComGoogleCommonCollectImmutableList_copyOfWithJavaUtilCollection_(id<JavaUtilCollection> elements);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableList *ComGoogleCommonCollectImmutableList_copyOfWithJavaUtilIterator_(id<JavaUtilIterator> elements);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableList *ComGoogleCommonCollectImmutableList_copyOfWithNSObjectArray_(IOSObjectArray *elements);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableList *ComGoogleCommonCollectImmutableList_sortedCopyOfWithJavaLangIterable_(id<JavaLangIterable> elements);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableList *ComGoogleCommonCollectImmutableList_sortedCopyOfWithJavaUtilComparator_withJavaLangIterable_(id<JavaUtilComparator> comparator, id<JavaLangIterable> elements);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableList *ComGoogleCommonCollectImmutableList_asImmutableListWithNSObjectArray_(IOSObjectArray *elements);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableList *ComGoogleCommonCollectImmutableList_asImmutableListWithNSObjectArray_withInt_(IOSObjectArray *elements, jint length);

FOUNDATION_EXPORT void ComGoogleCommonCollectImmutableList_init(ComGoogleCommonCollectImmutableList *self);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableList_Builder *ComGoogleCommonCollectImmutableList_builder(void);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableList_Builder *ComGoogleCommonCollectImmutableList_builderWithExpectedSizeWithInt_(jint expectedSize);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectImmutableList)

#endif

#if !defined (ComGoogleCommonCollectImmutableList_SubList_) && (INCLUDE_ALL_ComGoogleCommonCollectImmutableList || defined(INCLUDE_ComGoogleCommonCollectImmutableList_SubList))
#define ComGoogleCommonCollectImmutableList_SubList_

@class ComGoogleCommonCollectImmutableList;

@interface ComGoogleCommonCollectImmutableList_SubList : ComGoogleCommonCollectImmutableList {
 @public
  jint offset_;
  jint length_;
}

#pragma mark Public

- (id)getWithInt:(jint)index;

- (jint)size;

- (ComGoogleCommonCollectImmutableList *)subListWithInt:(jint)fromIndex
                                                withInt:(jint)toIndex;

#pragma mark Package-Private

- (instancetype __nonnull)initWithComGoogleCommonCollectImmutableList:(ComGoogleCommonCollectImmutableList *)outer$
                                                              withInt:(jint)offset
                                                              withInt:(jint)length;

- (jboolean)isPartialView;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectImmutableList_SubList)

FOUNDATION_EXPORT void ComGoogleCommonCollectImmutableList_SubList_initWithComGoogleCommonCollectImmutableList_withInt_withInt_(ComGoogleCommonCollectImmutableList_SubList *self, ComGoogleCommonCollectImmutableList *outer$, jint offset, jint length);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableList_SubList *new_ComGoogleCommonCollectImmutableList_SubList_initWithComGoogleCommonCollectImmutableList_withInt_withInt_(ComGoogleCommonCollectImmutableList *outer$, jint offset, jint length) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableList_SubList *create_ComGoogleCommonCollectImmutableList_SubList_initWithComGoogleCommonCollectImmutableList_withInt_withInt_(ComGoogleCommonCollectImmutableList *outer$, jint offset, jint length);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectImmutableList_SubList)

#endif

#if !defined (ComGoogleCommonCollectImmutableList_SerializedForm_) && (INCLUDE_ALL_ComGoogleCommonCollectImmutableList || defined(INCLUDE_ComGoogleCommonCollectImmutableList_SerializedForm))
#define ComGoogleCommonCollectImmutableList_SerializedForm_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class IOSObjectArray;

@interface ComGoogleCommonCollectImmutableList_SerializedForm : NSObject < JavaIoSerializable > {
 @public
  IOSObjectArray *elements_;
}

#pragma mark Package-Private

- (instancetype __nonnull)initWithNSObjectArray:(IOSObjectArray *)elements;

- (id)readResolve;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectImmutableList_SerializedForm)

J2OBJC_FIELD_SETTER(ComGoogleCommonCollectImmutableList_SerializedForm, elements_, IOSObjectArray *)

FOUNDATION_EXPORT void ComGoogleCommonCollectImmutableList_SerializedForm_initWithNSObjectArray_(ComGoogleCommonCollectImmutableList_SerializedForm *self, IOSObjectArray *elements);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableList_SerializedForm *new_ComGoogleCommonCollectImmutableList_SerializedForm_initWithNSObjectArray_(IOSObjectArray *elements) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableList_SerializedForm *create_ComGoogleCommonCollectImmutableList_SerializedForm_initWithNSObjectArray_(IOSObjectArray *elements);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectImmutableList_SerializedForm)

#endif

#if !defined (ComGoogleCommonCollectImmutableList_Builder_) && (INCLUDE_ALL_ComGoogleCommonCollectImmutableList || defined(INCLUDE_ComGoogleCommonCollectImmutableList_Builder))
#define ComGoogleCommonCollectImmutableList_Builder_

#define RESTRICT_ComGoogleCommonCollectImmutableCollection 1
#define INCLUDE_ComGoogleCommonCollectImmutableCollection_Builder 1
#include "com/google/common/collect/ImmutableCollection.h"

@class ComGoogleCommonCollectImmutableList;
@class IOSObjectArray;
@protocol JavaLangIterable;
@protocol JavaUtilIterator;

/*!
 @brief A builder for creating immutable list instances, especially <code>public static final</code> lists
  ("constant lists").Example:
  
 @code
 public static final ImmutableList<Color> GOOGLE_COLORS
      = new ImmutableList.Builder<Color>()
          .addAll(WEBSAFE_COLORS)
          .add(new Color(0, 191, 255))
          .build(); 
 
@endcode
  
 <p>Elements appear in the resulting list in the same order they were added to the builder.
 <p>Builder instances can be reused; it is safe to call <code>build</code> multiple times to build
  multiple lists in series. Each new list contains all the elements of the ones created before
  it.
 @since 2.0
 */
@interface ComGoogleCommonCollectImmutableList_Builder : ComGoogleCommonCollectImmutableCollection_Builder {
 @public
  IOSObjectArray *contents_;
}

#pragma mark Public

/*!
 @brief Creates a new builder.The returned builder is equivalent to the builder generated by <code>ImmutableList.builder</code>
 .
 */
- (instancetype __nonnull)init;

/*!
 @brief Adds <code>element</code> to the <code>ImmutableList</code>.
 @param element the element to add
 @return this <code>Builder</code> object
 @throw NullPointerExceptionif <code>element</code> is null
 */
- (ComGoogleCommonCollectImmutableList_Builder *)addWithId:(id)element;

/*!
 @brief Adds each element of <code>elements</code> to the <code>ImmutableList</code>.
 @param elements the <code>Iterable</code>  to add to the <code>ImmutableList</code>
 @return this <code>Builder</code> object
 @throw NullPointerExceptionif <code>elements</code> is null or contains a null element
 */
- (ComGoogleCommonCollectImmutableList_Builder *)addWithNSObjectArray:(IOSObjectArray *)elements;

/*!
 @brief Adds each element of <code>elements</code> to the <code>ImmutableList</code>.
 @param elements the <code>Iterable</code>  to add to the <code>ImmutableList</code>
 @return this <code>Builder</code> object
 @throw NullPointerExceptionif <code>elements</code> is null or contains a null element
 */
- (ComGoogleCommonCollectImmutableList_Builder *)addAllWithJavaLangIterable:(id<JavaLangIterable>)elements;

/*!
 @brief Adds each element of <code>elements</code> to the <code>ImmutableList</code>.
 @param elements the <code>Iterable</code>  to add to the <code>ImmutableList</code>
 @return this <code>Builder</code> object
 @throw NullPointerExceptionif <code>elements</code> is null or contains a null element
 */
- (ComGoogleCommonCollectImmutableList_Builder *)addAllWithJavaUtilIterator:(id<JavaUtilIterator>)elements;

/*!
 @brief Returns a newly-created <code>ImmutableList</code> based on the contents of the <code>Builder</code>.
 */
- (ComGoogleCommonCollectImmutableList *)build;

#pragma mark Package-Private

- (instancetype __nonnull)initWithInt:(jint)capacity;

- (ComGoogleCommonCollectImmutableList_Builder *)combineWithComGoogleCommonCollectImmutableList_Builder:(ComGoogleCommonCollectImmutableList_Builder *)builder;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectImmutableList_Builder)

J2OBJC_FIELD_SETTER(ComGoogleCommonCollectImmutableList_Builder, contents_, IOSObjectArray *)

FOUNDATION_EXPORT void ComGoogleCommonCollectImmutableList_Builder_init(ComGoogleCommonCollectImmutableList_Builder *self);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableList_Builder *new_ComGoogleCommonCollectImmutableList_Builder_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableList_Builder *create_ComGoogleCommonCollectImmutableList_Builder_init(void);

FOUNDATION_EXPORT void ComGoogleCommonCollectImmutableList_Builder_initWithInt_(ComGoogleCommonCollectImmutableList_Builder *self, jint capacity);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableList_Builder *new_ComGoogleCommonCollectImmutableList_Builder_initWithInt_(jint capacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableList_Builder *create_ComGoogleCommonCollectImmutableList_Builder_initWithInt_(jint capacity);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectImmutableList_Builder)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCollectImmutableList")
