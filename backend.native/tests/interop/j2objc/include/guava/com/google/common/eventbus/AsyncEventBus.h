//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/build_result/java/com/google/common/eventbus/AsyncEventBus.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonEventbusAsyncEventBus")
#ifdef RESTRICT_ComGoogleCommonEventbusAsyncEventBus
#define INCLUDE_ALL_ComGoogleCommonEventbusAsyncEventBus 0
#else
#define INCLUDE_ALL_ComGoogleCommonEventbusAsyncEventBus 1
#endif
#undef RESTRICT_ComGoogleCommonEventbusAsyncEventBus

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonEventbusAsyncEventBus_) && (INCLUDE_ALL_ComGoogleCommonEventbusAsyncEventBus || defined(INCLUDE_ComGoogleCommonEventbusAsyncEventBus))
#define ComGoogleCommonEventbusAsyncEventBus_

#define RESTRICT_ComGoogleCommonEventbusEventBus 1
#define INCLUDE_ComGoogleCommonEventbusEventBus 1
#include "com/google/common/eventbus/EventBus.h"

@class ComGoogleCommonEventbusDispatcher;
@protocol ComGoogleCommonEventbusSubscriberExceptionHandler;
@protocol JavaUtilConcurrentExecutor;

/*!
 @brief An <code>EventBus</code> that takes the Executor of your choice and uses it to dispatch events,
  allowing dispatch to occur asynchronously.
 @author Cliff Biffle
 @since 10.0
 */
@interface ComGoogleCommonEventbusAsyncEventBus : ComGoogleCommonEventbusEventBus

#pragma mark Public

/*!
 @brief Creates a new AsyncEventBus that will use <code>executor</code> to dispatch events.
 @param executor Executor to use to dispatch events. It is the caller's responsibility to shut      down the executor after the last event has been posted to this event bus.
 */
- (instancetype __nonnull)initWithJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor> __nonnull)executor;

/*!
 @brief Creates a new AsyncEventBus that will use <code>executor</code> to dispatch events.
 @param executor Executor to use to dispatch events. It is the caller's responsibility to shut      down the executor after the last event has been posted to this event bus.
 @param subscriberExceptionHandler Handler used to handle exceptions thrown from subscribers.      See 
 <code>SubscriberExceptionHandler</code>  for more information.
 @since 16.0
 */
- (instancetype __nonnull)initWithJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor> __nonnull)executor
       withComGoogleCommonEventbusSubscriberExceptionHandler:(id<ComGoogleCommonEventbusSubscriberExceptionHandler> __nonnull)subscriberExceptionHandler;

/*!
 @brief Creates a new AsyncEventBus that will use <code>executor</code> to dispatch events.Assigns <code>identifier</code>
  as the bus's name for logging purposes.
 @param identifier short name for the bus, for logging purposes.
 @param executor Executor to use to dispatch events. It is the caller's responsibility to shut      down the executor after the last event has been posted to this event bus.
 */
- (instancetype __nonnull)initWithNSString:(NSString * __nonnull)identifier
            withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor> __nonnull)executor;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithComGoogleCommonEventbusSubscriberExceptionHandler:(id<ComGoogleCommonEventbusSubscriberExceptionHandler> __nonnull)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString * __nonnull)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString * __nonnull)arg0
            withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor> __nonnull)arg1
     withComGoogleCommonEventbusDispatcher:(ComGoogleCommonEventbusDispatcher * __nonnull)arg2
withComGoogleCommonEventbusSubscriberExceptionHandler:(id<ComGoogleCommonEventbusSubscriberExceptionHandler> __nonnull)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonEventbusAsyncEventBus)

FOUNDATION_EXPORT void ComGoogleCommonEventbusAsyncEventBus_initWithNSString_withJavaUtilConcurrentExecutor_(ComGoogleCommonEventbusAsyncEventBus *self, NSString *identifier, id<JavaUtilConcurrentExecutor> executor);

FOUNDATION_EXPORT ComGoogleCommonEventbusAsyncEventBus *new_ComGoogleCommonEventbusAsyncEventBus_initWithNSString_withJavaUtilConcurrentExecutor_(NSString *identifier, id<JavaUtilConcurrentExecutor> executor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonEventbusAsyncEventBus *create_ComGoogleCommonEventbusAsyncEventBus_initWithNSString_withJavaUtilConcurrentExecutor_(NSString *identifier, id<JavaUtilConcurrentExecutor> executor);

FOUNDATION_EXPORT void ComGoogleCommonEventbusAsyncEventBus_initWithJavaUtilConcurrentExecutor_withComGoogleCommonEventbusSubscriberExceptionHandler_(ComGoogleCommonEventbusAsyncEventBus *self, id<JavaUtilConcurrentExecutor> executor, id<ComGoogleCommonEventbusSubscriberExceptionHandler> subscriberExceptionHandler);

FOUNDATION_EXPORT ComGoogleCommonEventbusAsyncEventBus *new_ComGoogleCommonEventbusAsyncEventBus_initWithJavaUtilConcurrentExecutor_withComGoogleCommonEventbusSubscriberExceptionHandler_(id<JavaUtilConcurrentExecutor> executor, id<ComGoogleCommonEventbusSubscriberExceptionHandler> subscriberExceptionHandler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonEventbusAsyncEventBus *create_ComGoogleCommonEventbusAsyncEventBus_initWithJavaUtilConcurrentExecutor_withComGoogleCommonEventbusSubscriberExceptionHandler_(id<JavaUtilConcurrentExecutor> executor, id<ComGoogleCommonEventbusSubscriberExceptionHandler> subscriberExceptionHandler);

FOUNDATION_EXPORT void ComGoogleCommonEventbusAsyncEventBus_initWithJavaUtilConcurrentExecutor_(ComGoogleCommonEventbusAsyncEventBus *self, id<JavaUtilConcurrentExecutor> executor);

FOUNDATION_EXPORT ComGoogleCommonEventbusAsyncEventBus *new_ComGoogleCommonEventbusAsyncEventBus_initWithJavaUtilConcurrentExecutor_(id<JavaUtilConcurrentExecutor> executor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonEventbusAsyncEventBus *create_ComGoogleCommonEventbusAsyncEventBus_initWithJavaUtilConcurrentExecutor_(id<JavaUtilConcurrentExecutor> executor);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonEventbusAsyncEventBus)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonEventbusAsyncEventBus")
