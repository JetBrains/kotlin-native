//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/build_result/java/com/google/common/hash/Funnels.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonHashFunnels")
#ifdef RESTRICT_ComGoogleCommonHashFunnels
#define INCLUDE_ALL_ComGoogleCommonHashFunnels 0
#else
#define INCLUDE_ALL_ComGoogleCommonHashFunnels 1
#endif
#undef RESTRICT_ComGoogleCommonHashFunnels

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonHashFunnels_) && (INCLUDE_ALL_ComGoogleCommonHashFunnels || defined(INCLUDE_ComGoogleCommonHashFunnels))
#define ComGoogleCommonHashFunnels_

@class JavaIoOutputStream;
@class JavaNioCharsetCharset;
@protocol ComGoogleCommonHashFunnel;
@protocol ComGoogleCommonHashPrimitiveSink;

/*!
 @brief Funnels for common types.All implementations are serializable.
 @author Dimitris Andreou
 @since 11.0
 */
@interface ComGoogleCommonHashFunnels : NSObject

#pragma mark Public

/*!
 @brief Wraps a <code>PrimitiveSink</code> as an <code>OutputStream</code>, so it is easy to <code>funnel</code>
  an object to a <code>PrimitiveSink</code> if there is already a way to write the contents of
  the object to an <code>OutputStream</code>.
 <p>The <code>close</code> and <code>flush</code> methods of the returned <code>OutputStream</code> do nothing,
  and no method throws <code>IOException</code>.
 @since 13.0
 */
+ (JavaIoOutputStream *)asOutputStreamWithComGoogleCommonHashPrimitiveSink:(id<ComGoogleCommonHashPrimitiveSink> __nonnull)sink;

/*!
 @brief Returns a funnel that extracts the bytes from a <code>byte</code> array.
 */
+ (id<ComGoogleCommonHashFunnel>)byteArrayFunnel;

/*!
 @brief Returns a funnel for integers.
 @since 13.0
 */
+ (id<ComGoogleCommonHashFunnel>)integerFunnel;

/*!
 @brief Returns a funnel for longs.
 @since 13.0
 */
+ (id<ComGoogleCommonHashFunnel>)longFunnel;

/*!
 @brief Returns a funnel that processes an <code>Iterable</code> by funneling its elements in iteration
  order with the specified funnel.No separators are added between the elements.
 @since 15.0
 */
+ (id<ComGoogleCommonHashFunnel>)sequentialFunnelWithComGoogleCommonHashFunnel:(id<ComGoogleCommonHashFunnel> __nonnull)elementFunnel;

/*!
 @brief Returns a funnel that encodes the characters of a <code>CharSequence</code> with the specified 
 <code>Charset</code>.
 @since 15.0
 */
+ (id<ComGoogleCommonHashFunnel>)stringFunnelWithJavaNioCharsetCharset:(JavaNioCharsetCharset * __nonnull)charset;

/*!
 @brief Returns a funnel that extracts the characters from a <code>CharSequence</code>, a character at a
  time, without performing any encoding.If you need to use a specific encoding, use <code>Funnels.stringFunnel(Charset)</code>
  instead.
 @since 15.0 (since 11.0 as <code>Funnels.stringFunnel()</code>.
 */
+ (id<ComGoogleCommonHashFunnel>)unencodedCharsFunnel;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonHashFunnels)

FOUNDATION_EXPORT id<ComGoogleCommonHashFunnel> ComGoogleCommonHashFunnels_byteArrayFunnel(void);

FOUNDATION_EXPORT id<ComGoogleCommonHashFunnel> ComGoogleCommonHashFunnels_unencodedCharsFunnel(void);

FOUNDATION_EXPORT id<ComGoogleCommonHashFunnel> ComGoogleCommonHashFunnels_stringFunnelWithJavaNioCharsetCharset_(JavaNioCharsetCharset *charset);

FOUNDATION_EXPORT id<ComGoogleCommonHashFunnel> ComGoogleCommonHashFunnels_integerFunnel(void);

FOUNDATION_EXPORT id<ComGoogleCommonHashFunnel> ComGoogleCommonHashFunnels_sequentialFunnelWithComGoogleCommonHashFunnel_(id<ComGoogleCommonHashFunnel> elementFunnel);

FOUNDATION_EXPORT id<ComGoogleCommonHashFunnel> ComGoogleCommonHashFunnels_longFunnel(void);

FOUNDATION_EXPORT JavaIoOutputStream *ComGoogleCommonHashFunnels_asOutputStreamWithComGoogleCommonHashPrimitiveSink_(id<ComGoogleCommonHashPrimitiveSink> sink);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonHashFunnels)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonHashFunnels")
