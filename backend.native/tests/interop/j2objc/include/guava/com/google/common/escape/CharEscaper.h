//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/build_result/java/com/google/common/escape/CharEscaper.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonEscapeCharEscaper")
#ifdef RESTRICT_ComGoogleCommonEscapeCharEscaper
#define INCLUDE_ALL_ComGoogleCommonEscapeCharEscaper 0
#else
#define INCLUDE_ALL_ComGoogleCommonEscapeCharEscaper 1
#endif
#undef RESTRICT_ComGoogleCommonEscapeCharEscaper

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonEscapeCharEscaper_) && (INCLUDE_ALL_ComGoogleCommonEscapeCharEscaper || defined(INCLUDE_ComGoogleCommonEscapeCharEscaper))
#define ComGoogleCommonEscapeCharEscaper_

#define RESTRICT_ComGoogleCommonEscapeEscaper 1
#define INCLUDE_ComGoogleCommonEscapeEscaper 1
#include "com/google/common/escape/Escaper.h"

@class IOSCharArray;

/*!
 @brief An object that converts literal text into a format safe for inclusion in a particular context
  (such as an XML document).Typically (but not always), the inverse process of "unescaping" the
  text is performed automatically by the relevant parser.
 <p>For example, an XML escaper would convert the literal string <code>"Foo<Bar>"</code> into <code>"Foo&lt;Bar&gt;"</code>
  to prevent <code>"<Bar>"</code> from being confused with an XML tag. When the
  resulting XML document is parsed, the parser API will return this text as the original literal
  string <code>"Foo<Bar>"</code>.
  
 <p>A <code>CharEscaper</code> instance is required to be stateless, and safe when used concurrently by
  multiple threads. 
 <p>Popular escapers are defined as constants in classes like <code>com.google.common.html.HtmlEscapers</code>
  and <code>com.google.common.xml.XmlEscapers</code>. To create
  your own escapers extend this class and implement the <code>escape(char)</code> method.
 @author Sven Mawson
 @since 15.0
 */
@interface ComGoogleCommonEscapeCharEscaper : ComGoogleCommonEscapeEscaper

#pragma mark Public

/*!
 @brief Returns the escaped form of a given literal string.
 @param string the literal string to be escaped
 @return the escaped form of <code>string</code>
 @throw NullPointerExceptionif <code>string</code> is null
 */
- (NSString *)escapeWithNSString:(NSString * __nonnull)string;

#pragma mark Protected

/*!
 @brief Constructor for use by subclasses.
 */
- (instancetype __nonnull)init;

/*!
 @brief Returns the escaped form of the given character, or <code>null</code> if this character does not
  need to be escaped.If an empty array is returned, this effectively strips the input character
  from the resulting text.
 <p>If the character does not need to be escaped, this method should return <code>null</code>, rather
  than a one-character array containing the character itself. This enables the escaping algorithm
  to perform more efficiently. 
 <p>An escaper is expected to be able to deal with any <code>char</code> value, so this method should
  not throw any exceptions.
 @param c the character to escape if necessary
 @return the replacement characters, or <code>null</code> if no escaping was needed
 */
- (IOSCharArray *)escapeWithChar:(jchar)c;

/*!
 @brief Returns the escaped form of a given literal string, starting at the given index.This method is
  called by the <code>escape(String)</code> method when it discovers that escaping is required.
 It is
  protected to allow subclasses to override the fastpath escaping function to inline their
  escaping test. See <code>CharEscaperBuilder</code> for an example usage.
 @param s the literal string to be escaped
 @param index the index to start escaping from
 @return the escaped form of <code>string</code>
 @throw NullPointerExceptionif <code>string</code> is null
 */
- (NSString *)escapeSlowWithNSString:(NSString * __nonnull)s
                             withInt:(jint)index;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonEscapeCharEscaper)

FOUNDATION_EXPORT void ComGoogleCommonEscapeCharEscaper_init(ComGoogleCommonEscapeCharEscaper *self);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonEscapeCharEscaper)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonEscapeCharEscaper")
