//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/build_result/java/com/google/errorprone/annotations/Immutable.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleErrorproneAnnotationsImmutable")
#ifdef RESTRICT_ComGoogleErrorproneAnnotationsImmutable
#define INCLUDE_ALL_ComGoogleErrorproneAnnotationsImmutable 0
#else
#define INCLUDE_ALL_ComGoogleErrorproneAnnotationsImmutable 1
#endif
#undef RESTRICT_ComGoogleErrorproneAnnotationsImmutable

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleErrorproneAnnotationsImmutable_) && (INCLUDE_ALL_ComGoogleErrorproneAnnotationsImmutable || defined(INCLUDE_ComGoogleErrorproneAnnotationsImmutable))
#define ComGoogleErrorproneAnnotationsImmutable_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;
@class IOSObjectArray;

/*!
 @brief The class to which this annotation is applied is immutable.
 <p>An object is immutable if its state cannot be observed to change after construction. Immutable
  objects are inherently thread-safe. 
 <p>A class is immutable if all instances of that class are immutable. The immutability of a class
  can only be fully guaranteed if the class is final, otherwise one must ensure all subclasses are
  also immutable. 
 <p>A conservative definition of object immutability is: 
 <ul>
    <li>All fields are final;
    <li>All reference fields are of immutable type, or null;
    <li>It is <em>properly constructed</em> (the <code>this</code> reference does not escape the
        constructor). 
 </ul>
  
 <p>The requirement that all reference fields be immutable ensures <em>deep</em> immutability,
  meaning all contained state is also immutable. A weaker property, common with container classes, is 
 <em>shallow</em> immutability, which allows some of the object's fields to point to mutable
  objects. One example of shallow immutability is guava's ImmutableList, which may contain mutable
  elements. 
 <p>It is possible to implement immutable classes with some internal mutable state, as long as
  callers can never observe changes to that state. For example, some state may be lazily
  initialized to improve performance. 
 <p>It is also technically possible to have an immutable object with non-final fields (see the
  implementation of <code>String.hashCode()</code> for an example), but doing this correctly requires
  subtle reasoning about safe data races and deep knowledge of the Java Memory Model. 
 <p>Use of this annotation is validated by <a href="http://errorprone.info/bugpattern/Immutable">
 Error Prone's immutability analysis</a>, which
  ensures that all <code>@@Immutable</code>-annotated classes are deeply immutable according to the
  conservative definition above. Non-final classes may be annotated with <code>@@Immutable</code>, and
  any code compiled by Error Prone will be checked to ensure that no mutable subtypes of 
 <code>@@Immutable</code>-annotated classes exist. 
 <p>For more information about immutability, see: 
 <ul>
    <li>Java Concurrency in Practice ยง3.4
    <li>Effective Java ยง15 
 </ul>
 */
@protocol ComGoogleErrorproneAnnotationsImmutable < JavaLangAnnotationAnnotation >

@property (readonly) IOSObjectArray *containerOf;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface ComGoogleErrorproneAnnotationsImmutable : NSObject < ComGoogleErrorproneAnnotationsImmutable > {
 @public
  IOSObjectArray *containerOf_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleErrorproneAnnotationsImmutable)

FOUNDATION_EXPORT id<ComGoogleErrorproneAnnotationsImmutable> create_ComGoogleErrorproneAnnotationsImmutable(IOSObjectArray *containerOf);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleErrorproneAnnotationsImmutable)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleErrorproneAnnotationsImmutable")
