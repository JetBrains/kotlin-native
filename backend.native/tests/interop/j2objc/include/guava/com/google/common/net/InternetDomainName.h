//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/build_result/java/com/google/common/net/InternetDomainName.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonNetInternetDomainName")
#ifdef RESTRICT_ComGoogleCommonNetInternetDomainName
#define INCLUDE_ALL_ComGoogleCommonNetInternetDomainName 0
#else
#define INCLUDE_ALL_ComGoogleCommonNetInternetDomainName 1
#endif
#undef RESTRICT_ComGoogleCommonNetInternetDomainName

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonNetInternetDomainName_) && (INCLUDE_ALL_ComGoogleCommonNetInternetDomainName || defined(INCLUDE_ComGoogleCommonNetInternetDomainName))
#define ComGoogleCommonNetInternetDomainName_

@class ComGoogleCommonCollectImmutableList;

/*!
 @brief An immutable well-formed internet domain name, such as <code>com</code> or <code>foo.co.uk</code>.Only
  syntactic analysis is performed; no DNS lookups or other network interactions take place.
 Thus
  there is no guarantee that the domain actually exists on the internet. 
 <p>One common use of this class is to determine whether a given string is likely to represent an
  addressable domain on the web -- that is, for a candidate string <code>"xxx"</code>, might browsing to 
 <code>"http://xxx/"</code> result in a webpage being displayed? In the past, this test was frequently
  done by determining whether the domain ended with a public suffix
  but was not itself a public suffix. However, this test is no longer accurate. There are many
  domains which are both public suffixes and addressable as hosts; <code>"uk.com"</code> is one example.
  Using the subset of public suffixes that are registry suffixes,
  one can get a better result, as only a few registry suffixes are addressable. However, the most
  useful test to determine if a domain is a plausible web host is <code>hasPublicSuffix()</code>. This
  will return <code>true</code> for many domains which (currently) are not hosts, such as <code>"com"</code>,
  but given that any public suffix may become a host without warning, it is better to err on the
  side of permissiveness and thus avoid spurious rejection of valid sites. Of course, to actually
  determine addressability of any host, clients of this class will need to perform their own DNS
  lookups. 
 <p>During construction, names are normalized in two ways: 
 <ol>
    <li>ASCII uppercase characters are converted to lowercase.
    <li>Unicode dot separators other than the ASCII period (<code>'.'</code>) are converted to the ASCII
        period. 
 </ol>
  
 <p>The normalized values will be returned from <code>toString()</code> and <code>parts()</code>, and will
  be reflected in the result of <code>equals(Object)</code>.
  
 <p><a href="http://en.wikipedia.org/wiki/Internationalized_domain_name">Internationalized domain
  names</a> such as <code>网络.cn</code> are supported, as are the equivalent <a href="http://en.wikipedia.org/wiki/Internationalized_domain_name">
 IDNA Punycode-encoded</a>
  versions.
 @author Catherine Berry
 @since 5.0
 */
@interface ComGoogleCommonNetInternetDomainName : NSObject

#pragma mark Public

/*!
 @brief Creates and returns a new <code>InternetDomainName</code> by prepending the argument and a dot to
  the current name.For example, <code>InternetDomainName.from("foo.com").child("www.bar")</code>
  returns a new <code>InternetDomainName</code> with the value <code>www.bar.foo.com</code>.
 Only lenient
  validation is performed, as described <code>here</code>.
 @throw NullPointerExceptionif leftParts is null
 @throw IllegalArgumentExceptionif the resulting name is not valid
 */
- (ComGoogleCommonNetInternetDomainName *)childWithNSString:(NSString * __nonnull)leftParts;

/*!
 @brief Equality testing is based on the text supplied by the caller, after normalization as described
  in the class documentation.For example, a non-ASCII Unicode domain name and the Punycode
  version of the same domain name would not be considered equal.
 */
- (jboolean)isEqual:(id __nullable)object;

/*!
 @brief Returns an instance of <code>InternetDomainName</code> after lenient validation.Specifically,
  validation against <a href="http://www.ietf.org/rfc/rfc3490.txt">RFC 3490</a>
  ("Internationalizing Domain Names in Applications") is skipped, while validation against <a href="http://www.ietf.org/rfc/rfc1035.txt">
 RFC 1035</a> is relaxed in the following ways: 
 <ul>
    <li>Any part containing non-ASCII characters is considered valid.
 <li>Underscores ('_') are permitted wherever dashes ('-') are permitted.
    <li>Parts other than the final part may start with a digit, as mandated by <a href="https://tools.ietf.org/html/rfc1123#section-2">
 RFC 1123</a>.
  </ul>
 @param domain A domain name (not IP address)
 @throw IllegalArgumentExceptionif <code>name</code> is not syntactically valid according to <code>isValid</code>
 @since 10.0 (previously named <code>fromLenient</code>)
 */
+ (ComGoogleCommonNetInternetDomainName *)fromWithNSString:(NSString * __nonnull)domain;

- (NSUInteger)hash;

/*!
 @brief Indicates whether this domain is composed of two or more parts.
 */
- (jboolean)hasParent;

/*!
 @brief Indicates whether this domain name ends in a public suffix,
  including if it is a public suffix itself.For example, returns <code>true</code> for <code>www.google.com</code>
 , <code>foo.co.uk</code> and <code>com</code>, but not for <code>invalid</code> or <code>google.invalid</code>
 .
 This is the recommended method for determining whether a domain is potentially
  an addressable host. 
 <p>Note that this method is equivalent to <code>hasRegistrySuffix()</code> because all registry
  suffixes are public suffixes <i>and</i> all public suffixes have registry suffixes.
 @since 6.0
 */
- (jboolean)hasPublicSuffix;

/*!
 @brief Indicates whether this domain name ends in a registry suffix,
  including if it is a registry suffix itself.For example, returns <code>true</code> for <code>www.google.com</code>
 , <code>foo.co.uk</code> and <code>com</code>, but not for <code>invalid</code> or <code>google.invalid</code>
 .
 <p>Note that this method is equivalent to <code>hasPublicSuffix()</code> because all registry
  suffixes are public suffixes <i>and</i> all public suffixes have registry suffixes.
 @since 23.3
 */
- (jboolean)hasRegistrySuffix;

/*!
 @brief Indicates whether this domain name represents a <i>public suffix</i>, as defined by the Mozilla
  Foundation's <a href="http://publicsuffix.org/">Public Suffix List</a> (PSL).A public suffix
  is one under which Internet users can directly register names, such as <code>com</code>, <code>co.uk</code>
  or <code>pvt.k12.wy.us</code>.
 Examples of domain names that are <i>not</i> public suffixes
  include <code>google.com</code>, <code>foo.co.uk</code>, and <code>myblog.blogspot.com</code>.
  
 <p>Public suffixes are a proper superset of registry suffixes.
  The list of public suffixes additionally contains privately owned domain names under which
  Internet users can register subdomains. An example of a public suffix that is not a registry
  suffix is <code>blogspot.com</code>. Note that it is true that all public suffixes <i>have</i>
  registry suffixes, since domain name registries collectively control all internet domain names. 
 <p>For considerations on whether the public suffix or registry suffix designation is more
  suitable for your application, see <a href="https://github.com/google/guava/wiki/InternetDomainNameExplained">
 this article</a>.
 @return <code>true</code> if this domain name appears exactly on the public suffix list
 @since 6.0
 */
- (jboolean)isPublicSuffix;

/*!
 @brief Indicates whether this domain name represents a <i>registry suffix</i>, as defined by a subset
  of the Mozilla Foundation's <a href="http://publicsuffix.org/">Public Suffix List</a> (PSL).A
  registry suffix is one under which Internet users can directly register names via a domain name
  registrar, and have such registrations lawfully protected by internet-governing bodies such as
  ICANN.
 Examples of registry suffixes include <code>com</code>, <code>co.uk</code>, and <code>pvt.k12.wy.us</code>
 . Examples of domain names that are <i>not</i> registry suffixes include <code>google.com</code>
  and <code>foo.co.uk</code>.
  
 <p>Registry suffixes are a proper subset of public suffixes. The
  list of public suffixes additionally contains privately owned domain names under which Internet
  users can register subdomains. An example of a public suffix that is not a registry suffix is 
 <code>blogspot.com</code>. Note that it is true that all public suffixes <i>have</i> registry
  suffixes, since domain name registries collectively control all internet domain names. 
 <p>For considerations on whether the public suffix or registry suffix designation is more
  suitable for your application, see <a href="https://github.com/google/guava/wiki/InternetDomainNameExplained">
 this article</a>.
 @return <code>true</code> if this domain name appears exactly on the public suffix list as part of
      the registry suffix section (labelled "ICANN").
 @since 23.3
 */
- (jboolean)isRegistrySuffix;

/*!
 @brief Indicates whether this domain name is composed of exactly one subdomain component followed by a 
 registry suffix.For example, returns <code>true</code> for <code>google.com</code>
 , <code>foo.co.uk</code>, and <code>blogspot.com</code>, but not for <code>www.google.com</code>,
  <code>co.uk</code>, or <code>myblog.blogspot.com</code>.
 <p><b>Warning:</b> This method should not be used to determine the probable highest level
  parent domain for which cookies may be set. Use <code>topPrivateDomain()</code> for that purpose.
 @since 23.3
 */
- (jboolean)isTopDomainUnderRegistrySuffix;

/*!
 @brief Indicates whether this domain name is composed of exactly one subdomain component followed by a 
 public suffix.For example, returns <code>true</code> for <code>google.com</code>
  <code>foo.co.uk</code>, and <code>myblog.blogspot.com</code>, but not for <code>www.google.com</code>
 , <code>co.uk</code>, or <code>blogspot.com</code>.
 <p>This method can be used to determine whether a domain is probably the highest level for
  which cookies may be set, though even that depends on individual browsers' implementations of
  cookie controls. See <a href="http://www.ietf.org/rfc/rfc2109.txt">RFC 2109</a> for details.
 @since 6.0
 */
- (jboolean)isTopPrivateDomain;

/*!
 @brief Indicates whether this domain name ends in a public suffix,
  while not being a public suffix itself.For example, returns <code>true</code> for <code>www.google.com</code>
 , <code>foo.co.uk</code> and <code>myblog.blogspot.com</code>, but not for <code>com</code>,
  <code>co.uk</code>, <code>google.invalid</code>, or <code>blogspot.com</code>.
 <p>This method can be used to determine whether it will probably be possible to set cookies on
  the domain, though even that depends on individual browsers' implementations of cookie
  controls. See <a href="http://www.ietf.org/rfc/rfc2109.txt">RFC 2109</a> for details.
 @since 6.0
 */
- (jboolean)isUnderPublicSuffix;

/*!
 @brief Indicates whether this domain name ends in a registry suffix,
  while not being a registry suffix itself.For example, returns <code>true</code> for <code>www.google.com</code>
 , <code>foo.co.uk</code> and <code>blogspot.com</code>, but not for <code>com</code>, <code>co.uk</code>
 , or <code>google.invalid</code>.
 @since 23.3
 */
- (jboolean)isUnderRegistrySuffix;

/*!
 @brief Indicates whether the argument is a syntactically valid domain name using lenient validation.
 Specifically, validation against <a href="http://www.ietf.org/rfc/rfc3490.txt">RFC 3490</a>
  ("Internationalizing Domain Names in Applications") is skipped. 
 <p>The following two code snippets are equivalent: 
 @code
 domainName = InternetDomainName.isValid(name)
      ? InternetDomainName.from(name)
      : DEFAULT_DOMAIN; 
 
@endcode
  
 @code
 try {
    domainName = InternetDomainName.from(name);
  } catch (IllegalArgumentException e) {
    domainName = DEFAULT_DOMAIN;
  } 
 
@endcode
 @since 8.0 (previously named <code>isValidLenient</code>)
 */
+ (jboolean)isValidWithNSString:(NSString * __nonnull)name;

/*!
 @brief Returns an <code>InternetDomainName</code> that is the immediate ancestor of this one; that is, the
  current domain with the leftmost part removed.For example, the parent of <code>www.google.com</code>
  is <code>google.com</code>.
 @throw IllegalStateExceptionif the domain has no parent, as determined by <code>hasParent</code>
 */
- (ComGoogleCommonNetInternetDomainName *)parent;

/*!
 @brief Returns the individual components of this domain name, normalized to all lower case.For
  example, for the domain name <code>mail.google.com</code>, this method returns the list <code>["mail", "google", "com"]</code>
 .
 */
- (ComGoogleCommonCollectImmutableList *)parts;

/*!
 @brief Returns the public suffix portion of the domain name, or <code>null</code>
  if no public suffix is present.
 @since 6.0
 */
- (ComGoogleCommonNetInternetDomainName *)publicSuffix;

/*!
 @brief Returns the registry suffix portion of the domain name, or 
 <code>null</code> if no registry suffix is present.
 @since 23.3
 */
- (ComGoogleCommonNetInternetDomainName *)registrySuffix;

/*!
 @brief Returns the portion of this domain name that is one level beneath the registry suffix
 .For example, for <code>x.adwords.google.co.uk</code> it
  returns <code>google.co.uk</code>, since <code>co.uk</code> is a registry suffix.
 Similarly, for <code>myblog.blogspot.com</code>
  it returns <code>blogspot.com</code>, since <code>com</code> is a registry suffix. 
 <p>If <code>isTopDomainUnderRegistrySuffix()</code> is true, the current domain name instance is
  returned. 
 <p><b>Warning:</b> This method should not be used to determine whether a domain is probably the
  highest level for which cookies may be set. Use <code>isTopPrivateDomain()</code> for that purpose.
 @throw IllegalStateExceptionif this domain does not end with a registry suffix
 @since 23.3
 */
- (ComGoogleCommonNetInternetDomainName *)topDomainUnderRegistrySuffix;

/*!
 @brief Returns the portion of this domain name that is one level beneath the public suffix
 .For example, for <code>x.adwords.google.co.uk</code> it returns 
 <code>google.co.uk</code>, since <code>co.uk</code> is a public suffix.
 Similarly, for <code>myblog.blogspot.com</code>
  it returns the same domain, <code>myblog.blogspot.com</code>, since <code>blogspot.com</code>
  is a public suffix. 
 <p>If <code>isTopPrivateDomain()</code> is true, the current domain name instance is returned. 
 <p>This method can be used to determine the probable highest level parent domain for which
  cookies may be set, though even that depends on individual browsers' implementations of cookie
  controls.
 @throw IllegalStateExceptionif this domain does not end with a public suffix
 @since 6.0
 */
- (ComGoogleCommonNetInternetDomainName *)topPrivateDomain;

/*!
 @brief Returns the domain name, normalized to all lower case.
 */
- (NSString *)description;

#pragma mark Package-Private

/*!
 @brief Constructor used to implement <code>from(String)</code>, and from subclasses.
 */
- (instancetype __nonnull)initWithNSString:(NSString * __nonnull)name;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonNetInternetDomainName)

FOUNDATION_EXPORT void ComGoogleCommonNetInternetDomainName_initWithNSString_(ComGoogleCommonNetInternetDomainName *self, NSString *name);

FOUNDATION_EXPORT ComGoogleCommonNetInternetDomainName *new_ComGoogleCommonNetInternetDomainName_initWithNSString_(NSString *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonNetInternetDomainName *create_ComGoogleCommonNetInternetDomainName_initWithNSString_(NSString *name);

FOUNDATION_EXPORT ComGoogleCommonNetInternetDomainName *ComGoogleCommonNetInternetDomainName_fromWithNSString_(NSString *domain);

FOUNDATION_EXPORT jboolean ComGoogleCommonNetInternetDomainName_isValidWithNSString_(NSString *name);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonNetInternetDomainName)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonNetInternetDomainName")
