//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/build_result/java/com/google/common/math/StatsAccumulator.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonMathStatsAccumulator")
#ifdef RESTRICT_ComGoogleCommonMathStatsAccumulator
#define INCLUDE_ALL_ComGoogleCommonMathStatsAccumulator 0
#else
#define INCLUDE_ALL_ComGoogleCommonMathStatsAccumulator 1
#endif
#undef RESTRICT_ComGoogleCommonMathStatsAccumulator

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonMathStatsAccumulator_) && (INCLUDE_ALL_ComGoogleCommonMathStatsAccumulator || defined(INCLUDE_ComGoogleCommonMathStatsAccumulator))
#define ComGoogleCommonMathStatsAccumulator_

@class ComGoogleCommonMathStats;
@class IOSDoubleArray;
@class IOSIntArray;
@class IOSLongArray;
@protocol JavaLangIterable;
@protocol JavaUtilIterator;

/*!
 @brief A mutable object which accumulates double values and tracks some basic statistics over all the
  values added so far.The values may be added singly or in groups.
 This class is not thread safe.
 @author Pete Gillin
 @author Kevin Bourrillion
 @since 20.0
 */
@interface ComGoogleCommonMathStatsAccumulator : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Adds the given value to the dataset.
 */
- (void)addWithDouble:(jdouble)value;

/*!
 @brief Adds the given values to the dataset.
 @param values a series of values
 */
- (void)addAllWithDoubleArray:(IOSDoubleArray * __nonnull)values;

/*!
 @brief Adds the given values to the dataset.
 @param values a series of values
 */
- (void)addAllWithIntArray:(IOSIntArray * __nonnull)values;

/*!
 @brief Adds the given values to the dataset.
 @param values a series of values, which will be converted to <code>double</code>  values (this may
       cause loss of precision)
 */
- (void)addAllWithJavaLangIterable:(id<JavaLangIterable> __nonnull)values;

/*!
 @brief Adds the given values to the dataset.
 @param values a series of values, which will be converted to <code>double</code>  values (this may
       cause loss of precision)
 */
- (void)addAllWithJavaUtilIterator:(id<JavaUtilIterator> __nonnull)values;

/*!
 @brief Adds the given values to the dataset.
 @param values a series of values, which will be converted to <code>double</code>  values (this may
       cause loss of precision for longs of magnitude over 2^53 (slightly over 9e15))
 */
- (void)addAllWithLongArray:(IOSLongArray * __nonnull)values;

/*!
 @brief Adds the given statistics to the dataset, as if the individual values used to compute the
  statistics had been added directly.
 */
- (void)addAllWithComGoogleCommonMathStats:(ComGoogleCommonMathStats * __nonnull)values;

/*!
 @brief Returns the number of values.
 */
- (jlong)count;

/*!
 @brief Returns the highest value in the dataset.The count must be non-zero.
 <h3>Non-finite values</h3>
  
 <p>If the dataset contains <code>Double.NaN</code> then the result is <code>Double.NaN</code>. If it
  contains <code>Double.POSITIVE_INFINITY</code> and not <code>Double.NaN</code> then the result is <code>Double.POSITIVE_INFINITY</code>
 . If it contains <code>Double.NEGATIVE_INFINITY</code> and finite values
  only then the result is the highest finite value. If it contains <code>Double.NEGATIVE_INFINITY</code>
  only then the result is <code>Double.NEGATIVE_INFINITY</code>.
 @throw IllegalStateExceptionif the dataset is empty
 */
- (jdouble)max;

/*!
 @brief Returns the <a href="http://en.wikipedia.org/wiki/Arithmetic_mean">arithmetic mean</a> of the
  values.The count must be non-zero.
 <p>If these values are a sample drawn from a population, this is also an unbiased estimator of
  the arithmetic mean of the population. 
 <h3>Non-finite values</h3>
  
 <p>If the dataset contains <code>Double.NaN</code> then the result is <code>Double.NaN</code>. If it
  contains both <code>Double.POSITIVE_INFINITY</code> and <code>Double.NEGATIVE_INFINITY</code> then the
  result is <code>Double.NaN</code>. If it contains <code>Double.POSITIVE_INFINITY</code> and finite values
  only or <code>Double.POSITIVE_INFINITY</code> only, the result is <code>Double.POSITIVE_INFINITY</code>.
  If it contains <code>Double.NEGATIVE_INFINITY</code> and finite values only or <code>Double.NEGATIVE_INFINITY</code>
  only, the result is <code>Double.NEGATIVE_INFINITY</code>.
 @throw IllegalStateExceptionif the dataset is empty
 */
- (jdouble)mean;

/*!
 @brief Returns the lowest value in the dataset.The count must be non-zero.
 <h3>Non-finite values</h3>
  
 <p>If the dataset contains <code>Double.NaN</code> then the result is <code>Double.NaN</code>. If it
  contains <code>Double.NEGATIVE_INFINITY</code> and not <code>Double.NaN</code> then the result is <code>Double.NEGATIVE_INFINITY</code>
 . If it contains <code>Double.POSITIVE_INFINITY</code> and finite values
  only then the result is the lowest finite value. If it contains <code>Double.POSITIVE_INFINITY</code>
  only then the result is <code>Double.POSITIVE_INFINITY</code>.
 @throw IllegalStateExceptionif the dataset is empty
 */
- (jdouble)min;

/*!
 @brief Returns the <a href="http://en.wikipedia.org/wiki/Standard_deviation#Definition_of_population_values">
  population standard deviation</a> of the values.The count must be non-zero.
 <p>This is guaranteed to return zero if the dataset contains only exactly one finite value. It
  is not guaranteed to return zero when the dataset consists of the same value multiple times,
  due to numerical errors. However, it is guaranteed never to return a negative result. 
 <h3>Non-finite values</h3>
  
 <p>If the dataset contains any non-finite values (<code>Double.POSITIVE_INFINITY</code>, <code>Double.NEGATIVE_INFINITY</code>
 , or <code>Double.NaN</code>) then the result is <code>Double.NaN</code>.
 @throw IllegalStateExceptionif the dataset is empty
 */
- (jdouble)populationStandardDeviation;

/*!
 @brief Returns the <a href="http://en.wikipedia.org/wiki/Variance#Population_variance">population
  variance</a> of the values.The count must be non-zero.
 <p>This is guaranteed to return zero if the dataset contains only exactly one finite value. It
  is not guaranteed to return zero when the dataset consists of the same value multiple times,
  due to numerical errors. However, it is guaranteed never to return a negative result. 
 <h3>Non-finite values</h3>
  
 <p>If the dataset contains any non-finite values (<code>Double.POSITIVE_INFINITY</code>, <code>Double.NEGATIVE_INFINITY</code>
 , or <code>Double.NaN</code>) then the result is <code>Double.NaN</code>.
 @throw IllegalStateExceptionif the dataset is empty
 */
- (jdouble)populationVariance;

/*!
 @brief Returns the <a href="http://en.wikipedia.org/wiki/Standard_deviation#Corrected_sample_standard_deviation">
  corrected sample standard deviation</a> of the values.If this dataset is a sample drawn from a
  population, this is an estimator of the population standard deviation of the population which
  is less biased than <code>populationStandardDeviation()</code> (the unbiased estimator depends on
  the distribution).
 The count must be greater than one. 
 <p>This is not guaranteed to return zero when the dataset consists of the same value multiple
  times, due to numerical errors. However, it is guaranteed never to return a negative result. 
 <h3>Non-finite values</h3>
  
 <p>If the dataset contains any non-finite values (<code>Double.POSITIVE_INFINITY</code>, <code>Double.NEGATIVE_INFINITY</code>
 , or <code>Double.NaN</code>) then the result is <code>Double.NaN</code>.
 @throw IllegalStateExceptionif the dataset is empty or contains a single value
 */
- (jdouble)sampleStandardDeviation;

/*!
 @brief Returns the <a href="http://en.wikipedia.org/wiki/Variance#Sample_variance">unbiased sample
  variance</a> of the values.If this dataset is a sample drawn from a population, this is an
  unbiased estimator of the population variance of the population.
 The count must be greater than
  one. 
 <p>This is not guaranteed to return zero when the dataset consists of the same value multiple
  times, due to numerical errors. However, it is guaranteed never to return a negative result. 
 <h3>Non-finite values</h3>
  
 <p>If the dataset contains any non-finite values (<code>Double.POSITIVE_INFINITY</code>, <code>Double.NEGATIVE_INFINITY</code>
 , or <code>Double.NaN</code>) then the result is <code>Double.NaN</code>.
 @throw IllegalStateExceptionif the dataset is empty or contains a single value
 */
- (jdouble)sampleVariance;

/*!
 @brief Returns an immutable snapshot of the current statistics.
 */
- (ComGoogleCommonMathStats *)snapshot;

/*!
 @brief Returns the sum of the values.
 <h3>Non-finite values</h3>
  
 <p>If the dataset contains <code>Double.NaN</code> then the result is <code>Double.NaN</code>. If it
  contains both <code>Double.POSITIVE_INFINITY</code> and <code>Double.NEGATIVE_INFINITY</code> then the
  result is <code>Double.NaN</code>. If it contains <code>Double.POSITIVE_INFINITY</code> and finite values
  only or <code>Double.POSITIVE_INFINITY</code> only, the result is <code>Double.POSITIVE_INFINITY</code>.
  If it contains <code>Double.NEGATIVE_INFINITY</code> and finite values only or <code>Double.NEGATIVE_INFINITY</code>
  only, the result is <code>Double.NEGATIVE_INFINITY</code>.
 */
- (jdouble)sum;

#pragma mark Package-Private

/*!
 @brief Calculates the new value for the accumulated mean when a value is added, in the case where at
  least one of the previous mean and the value is non-finite.
 */
+ (jdouble)calculateNewMeanNonFiniteWithDouble:(jdouble)previousMean
                                    withDouble:(jdouble)value;

- (jdouble)sumOfSquaresOfDeltas;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonMathStatsAccumulator)

FOUNDATION_EXPORT void ComGoogleCommonMathStatsAccumulator_init(ComGoogleCommonMathStatsAccumulator *self);

FOUNDATION_EXPORT ComGoogleCommonMathStatsAccumulator *new_ComGoogleCommonMathStatsAccumulator_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonMathStatsAccumulator *create_ComGoogleCommonMathStatsAccumulator_init(void);

FOUNDATION_EXPORT jdouble ComGoogleCommonMathStatsAccumulator_calculateNewMeanNonFiniteWithDouble_withDouble_(jdouble previousMean, jdouble value);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonMathStatsAccumulator)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonMathStatsAccumulator")
