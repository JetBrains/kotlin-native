//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/build_result/java/com/google/common/collect/Iterators.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCollectIterators")
#ifdef RESTRICT_ComGoogleCommonCollectIterators
#define INCLUDE_ALL_ComGoogleCommonCollectIterators 0
#else
#define INCLUDE_ALL_ComGoogleCommonCollectIterators 1
#endif
#undef RESTRICT_ComGoogleCommonCollectIterators

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCollectIterators_) && (INCLUDE_ALL_ComGoogleCommonCollectIterators || defined(INCLUDE_ComGoogleCommonCollectIterators))
#define ComGoogleCommonCollectIterators_

@class ComGoogleCommonBaseOptional;
@class ComGoogleCommonCollectUnmodifiableIterator;
@class ComGoogleCommonCollectUnmodifiableListIterator;
@class IOSClass;
@class IOSObjectArray;
@protocol ComGoogleCommonBaseFunction;
@protocol ComGoogleCommonBasePredicate;
@protocol ComGoogleCommonCollectPeekingIterator;
@protocol JavaLangIterable;
@protocol JavaUtilCollection;
@protocol JavaUtilComparator;
@protocol JavaUtilEnumeration;
@protocol JavaUtilIterator;
@protocol JavaUtilListIterator;

/*!
 @brief This class contains static utility methods that operate on or return objects of type <code>Iterator</code>
 .Except as noted, each method has a corresponding <code>Iterable</code>-based method in the 
 <code>Iterables</code> class.
 <p><i>Performance notes:</i> Unless otherwise noted, all of the iterators produced in this class
  are <i>lazy</i>, which means that they only advance the backing iteration when absolutely
  necessary. 
 <p>See the Guava User Guide section on <a href="https://github.com/google/guava/wiki/CollectionUtilitiesExplained#iterables">
  <code>Iterators</code>
 </a>.
 @author Kevin Bourrillion
 @author Jared Levy
 @since 2.0
 */
@interface ComGoogleCommonCollectIterators : NSObject

#pragma mark Public

/*!
 @brief Adds all elements in <code>iterator</code> to <code>collection</code>.The iterator will be left
  exhausted: its <code>hasNext()</code> method will return <code>false</code>.
 @return <code>true</code> if <code>collection</code> was modified as a result of this operation
 */
+ (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)addTo
                    withJavaUtilIterator:(id<JavaUtilIterator>)iterator;

/*!
 @brief Calls <code>next()</code> on <code>iterator</code>, either <code>numberToAdvance</code> times or until <code>hasNext()</code>
  returns <code>false</code>, whichever comes first.
 @return the number of elements the iterator was advanced
 @since 13.0 (since 3.0 as <code>Iterators.skip</code>)
 */
+ (jint)advanceWithJavaUtilIterator:(id<JavaUtilIterator>)iterator
                            withInt:(jint)numberToAdvance;

/*!
 @brief Returns <code>true</code> if every element returned by <code>iterator</code> satisfies the given
  predicate.If <code>iterator</code> is empty, <code>true</code> is returned.
 */
+ (jboolean)allWithJavaUtilIterator:(id<JavaUtilIterator>)iterator
   withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate>)predicate;

/*!
 @brief Returns <code>true</code> if one or more elements returned by <code>iterator</code> satisfy the given
  predicate.
 */
+ (jboolean)anyWithJavaUtilIterator:(id<JavaUtilIterator>)iterator
   withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate>)predicate;

/*!
 @brief Adapts an <code>Iterator</code> to the <code>Enumeration</code> interface.
 <p>The <code>Iterable</code> equivalent of this method is either <code>Collections.enumeration</code> (if
  you have a <code>Collection</code>), or <code>Iterators.asEnumeration(collection.iterator())</code>.
 */
+ (id<JavaUtilEnumeration>)asEnumerationWithJavaUtilIterator:(id<JavaUtilIterator>)iterator;

/*!
 @brief Combines multiple iterators into a single iterator.The returned iterator iterates across the
  elements of each iterator in <code>inputs</code>.
 The input iterators are not polled until
  necessary. 
 <p>The returned iterator supports <code>remove()</code> when the corresponding input iterator
  supports it.
 @throw NullPointerExceptionif any of the provided iterators is null
 */
+ (id<JavaUtilIterator>)concatWithJavaUtilIteratorArray:(IOSObjectArray *)inputs;

/*!
 @brief Combines multiple iterators into a single iterator.The returned iterator iterates across the
  elements of each iterator in <code>inputs</code>.
 The input iterators are not polled until
  necessary. 
 <p>The returned iterator supports <code>remove()</code> when the corresponding input iterator
  supports it. The methods of the returned iterator may throw <code>NullPointerException</code> if any
  of the input iterators is null.
 */
+ (id<JavaUtilIterator>)concatWithJavaUtilIterator:(id<JavaUtilIterator>)inputs;

/*!
 @brief Combines two iterators into a single iterator.The returned iterator iterates across the
  elements in <code>a</code>, followed by the elements in <code>b</code>.
 The source iterators are not
  polled until necessary. 
 <p>The returned iterator supports <code>remove()</code> when the corresponding input iterator
  supports it.
 */
+ (id<JavaUtilIterator>)concatWithJavaUtilIterator:(id<JavaUtilIterator>)a
                              withJavaUtilIterator:(id<JavaUtilIterator>)b;

/*!
 @brief Combines three iterators into a single iterator.The returned iterator iterates across the
  elements in <code>a</code>, followed by the elements in <code>b</code>, followed by the elements in 
 <code>c</code>.
 The source iterators are not polled until necessary. 
 <p>The returned iterator supports <code>remove()</code> when the corresponding input iterator
  supports it.
 */
+ (id<JavaUtilIterator>)concatWithJavaUtilIterator:(id<JavaUtilIterator>)a
                              withJavaUtilIterator:(id<JavaUtilIterator>)b
                              withJavaUtilIterator:(id<JavaUtilIterator>)c;

/*!
 @brief Combines four iterators into a single iterator.The returned iterator iterates across the
  elements in <code>a</code>, followed by the elements in <code>b</code>, followed by the elements in 
 <code>c</code>, followed by the elements in <code>d</code>.
 The source iterators are not polled until
  necessary. 
 <p>The returned iterator supports <code>remove()</code> when the corresponding input iterator
  supports it.
 */
+ (id<JavaUtilIterator>)concatWithJavaUtilIterator:(id<JavaUtilIterator>)a
                              withJavaUtilIterator:(id<JavaUtilIterator>)b
                              withJavaUtilIterator:(id<JavaUtilIterator>)c
                              withJavaUtilIterator:(id<JavaUtilIterator>)d;

/*!
 @brief Returns a view of the supplied <code>iterator</code> that removes each element from the supplied 
 <code>iterator</code> as it is returned.
 <p>The provided iterator must support <code>Iterator.remove()</code> or else the returned iterator
  will fail on the first call to <code>next</code>.
 @param iterator the iterator to remove and return elements from
 @return an iterator that removes and returns elements from the supplied iterator
 @since 2.0
 */
+ (id<JavaUtilIterator>)consumingIteratorWithJavaUtilIterator:(id<JavaUtilIterator>)iterator;

/*!
 @brief Returns <code>true</code> if <code>iterator</code> contains <code>element</code>.
 */
+ (jboolean)containsWithJavaUtilIterator:(id<JavaUtilIterator>)iterator
                                  withId:(id __nullable)element;

/*!
 @brief Returns an iterator that cycles indefinitely over the elements of <code>iterable</code>.
 <p>The returned iterator supports <code>remove()</code> if the provided iterator does. After <code>remove()</code>
  is called, subsequent cycles omit the removed element, which is no longer in <code>iterable</code>
 . The iterator's <code>hasNext()</code> method returns <code>true</code> until <code>iterable</code>
  is empty. 
 <p><b>Warning:</b> Typical uses of the resulting iterator may produce an infinite loop. You
  should use an explicit <code>break</code> or be certain that you will eventually remove all the
  elements.
 */
+ (id<JavaUtilIterator>)cycleWithJavaLangIterable:(id<JavaLangIterable>)iterable;

/*!
 @brief Returns an iterator that cycles indefinitely over the provided elements.
 <p>The returned iterator supports <code>remove()</code>. After <code>remove()</code> is called,
  subsequent cycles omit the removed element, but <code>elements</code> does not change. The
  iterator's <code>hasNext()</code> method returns <code>true</code> until all of the original elements
  have been removed. 
 <p><b>Warning:</b> Typical uses of the resulting iterator may produce an infinite loop. You
  should use an explicit <code>break</code> or be certain that you will eventually remove all the
  elements.
 */
+ (id<JavaUtilIterator>)cycleWithNSObjectArray:(IOSObjectArray *)elements;

/*!
 @brief Determines whether two iterators contain equal elements in the same order.More specifically,
  this method returns <code>true</code> if <code>iterator1</code> and <code>iterator2</code> contain the same
  number of elements and every element of <code>iterator1</code> is equal to the corresponding element
  of <code>iterator2</code>.
 <p>Note that this will modify the supplied iterators, since they will have been advanced some
  number of elements forward.
 */
+ (jboolean)elementsEqualWithJavaUtilIterator:(id<JavaUtilIterator>)iterator1
                         withJavaUtilIterator:(id<JavaUtilIterator>)iterator2;

/*!
 @brief Returns a view of <code>unfiltered</code> containing all elements that are of the type <code>desiredType</code>
 .
 */
+ (ComGoogleCommonCollectUnmodifiableIterator *)filterWithJavaUtilIterator:(id<JavaUtilIterator>)unfiltered
                                                              withIOSClass:(IOSClass *)desiredType;

/*!
 @brief Returns a view of <code>unfiltered</code> containing all elements that satisfy the input predicate 
 <code>retainIfTrue</code>.
 */
+ (ComGoogleCommonCollectUnmodifiableIterator *)filterWithJavaUtilIterator:(id<JavaUtilIterator>)unfiltered
                                          withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate>)retainIfTrue;

/*!
 @brief Returns the first element in <code>iterator</code> that satisfies the given predicate; use this
  method only when such an element is known to exist.If no such element is found, the iterator
  will be left exhausted: its <code>hasNext()</code> method will return <code>false</code>.
 If it is
  possible that <i>no</i> element will match, use <code>tryFind</code> or <code>find(Iterator,
 Predicate, Object)</code>
  instead.
 @throw NoSuchElementExceptionif no element in <code>iterator</code> matches the given predicate
 */
+ (id)findWithJavaUtilIterator:(id<JavaUtilIterator>)iterator
withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate>)predicate;

/*!
 @brief Returns the first element in <code>iterator</code> that satisfies the given predicate.If no such
  element is found, <code>defaultValue</code> will be returned from this method and the iterator will
  be left exhausted: its <code>hasNext()</code> method will return <code>false</code>.
 Note that this can
  usually be handled more naturally using <code>tryFind(iterator, predicate).or(defaultValue)</code>.
 @since 7.0
 */
+ (id)findWithJavaUtilIterator:(id<JavaUtilIterator>)iterator
withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate>)predicate
                        withId:(id)defaultValue;

/*!
 @brief Returns an iterator containing the elements of <code>array</code> in order.The returned iterator is
  a view of the array; subsequent changes to the array will be reflected in the iterator.
 <p><b>Note:</b> It is often preferable to represent your data using a collection type, for
  example using <code>Arrays.asList(Object[])</code>, making this method unnecessary. 
 <p>The <code>Iterable</code> equivalent of this method is either <code>Arrays.asList(Object[])</code>,
  <code>ImmutableList.copyOf(Object[])</code>}, or <code>ImmutableList.of</code>.
 */
+ (ComGoogleCommonCollectUnmodifiableIterator *)forArrayWithNSObjectArray:(IOSObjectArray *)array;

/*!
 @brief Adapts an <code>Enumeration</code> to the <code>Iterator</code> interface.
 <p>This method has no equivalent in <code>Iterables</code> because viewing an <code>Enumeration</code> as
  an <code>Iterable</code> is impossible. However, the contents can be <i>copied</i> into a collection
  using <code>Collections.list</code>.
 */
+ (ComGoogleCommonCollectUnmodifiableIterator *)forEnumerationWithJavaUtilEnumeration:(id<JavaUtilEnumeration>)enumeration;

/*!
 @brief Returns the number of elements in the specified iterator that equal the specified object.The
  iterator will be left exhausted: its <code>hasNext()</code> method will return <code>false</code>.
 - seealso: Collections#frequency
 */
+ (jint)frequencyWithJavaUtilIterator:(id<JavaUtilIterator>)iterator
                               withId:(id __nullable)element;

/*!
 @brief Advances <code>iterator</code> <code>position + 1</code> times, returning the element at the <code>position</code>
 th position.
 @param position position of the element to return
 @return the element at the specified position in <code>iterator</code>
 @throw IndexOutOfBoundsExceptionif <code>position</code> is negative or greater than or equal to
      the number of elements remaining in <code>iterator</code>
 */
+ (id)getWithJavaUtilIterator:(id<JavaUtilIterator>)iterator
                      withInt:(jint)position;

/*!
 @brief Advances <code>iterator</code> <code>position + 1</code> times, returning the element at the <code>position</code>
 th position or <code>defaultValue</code> otherwise.
 @param position position of the element to return
 @param defaultValue the default value to return if the iterator is empty or if <code>position</code>      is greater than the number of elements remaining in 
 <code>iterator</code>
 @return the element at the specified position in <code>iterator</code> or <code>defaultValue</code> if
      <code>iterator</code> produces fewer than <code>position + 1</code> elements.
 @throw IndexOutOfBoundsExceptionif <code>position</code> is negative
 @since 4.0
 */
+ (id)getWithJavaUtilIterator:(id<JavaUtilIterator>)iterator
                      withInt:(jint)position
                       withId:(id)defaultValue;

/*!
 @brief Advances <code>iterator</code> to the end, returning the last element.
 @return the last element of <code>iterator</code>
 @throw NoSuchElementExceptionif the iterator is empty
 */
+ (id)getLastWithJavaUtilIterator:(id<JavaUtilIterator>)iterator;

/*!
 @brief Advances <code>iterator</code> to the end, returning the last element or <code>defaultValue</code> if the
  iterator is empty.
 @param defaultValue the default value to return if the iterator is empty
 @return the last element of <code>iterator</code>
 @since 3.0
 */
+ (id)getLastWithJavaUtilIterator:(id<JavaUtilIterator>)iterator
                           withId:(id)defaultValue;

/*!
 @brief Returns the next element in <code>iterator</code> or <code>defaultValue</code> if the iterator is empty.
 The <code>Iterables</code> analog to this method is <code>Iterables.getFirst</code>.
 @param defaultValue the default value to return if the iterator is empty
 @return the next element of <code>iterator</code> or the default value
 @since 7.0
 */
+ (id)getNextWithJavaUtilIterator:(id<JavaUtilIterator>)iterator
                           withId:(id)defaultValue;

/*!
 @brief Returns the single element contained in <code>iterator</code>.
 @throw NoSuchElementExceptionif the iterator is empty
 @throw IllegalArgumentExceptionif the iterator contains multiple elements. The state of the
      iterator is unspecified.
 */
+ (id)getOnlyElementWithJavaUtilIterator:(id<JavaUtilIterator>)iterator;

/*!
 @brief Returns the single element contained in <code>iterator</code>, or <code>defaultValue</code> if the
  iterator is empty.
 @throw IllegalArgumentExceptionif the iterator contains multiple elements. The state of the
      iterator is unspecified.
 */
+ (id)getOnlyElementWithJavaUtilIterator:(id<JavaUtilIterator>)iterator
                                  withId:(id)defaultValue;

/*!
 @brief Returns the index in <code>iterator</code> of the first element that satisfies the provided <code>predicate</code>
 , or <code>-1</code> if the Iterator has no such elements.
 <p>More formally, returns the lowest index <code>i</code> such that <code>predicate.apply(Iterators.get(iterator, i))</code>
  returns <code>true</code>, or <code>-1</code> if there is no
  such index. 
 <p>If -1 is returned, the iterator will be left exhausted: its <code>hasNext()</code> method will
  return <code>false</code>. Otherwise, the iterator will be set to the element which satisfies the 
 <code>predicate</code>.
 @since 2.0
 */
+ (jint)indexOfWithJavaUtilIterator:(id<JavaUtilIterator>)iterator
   withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate>)predicate;

/*!
 @brief Returns a view containing the first <code>limitSize</code> elements of <code>iterator</code>.If <code>iterator</code>
  contains fewer than <code>limitSize</code> elements, the returned view contains all of its
  elements.
 The returned iterator supports <code>remove()</code> if <code>iterator</code> does.
 @param iterator the iterator to limit
 @param limitSize the maximum number of elements in the returned iterator
 @throw IllegalArgumentExceptionif <code>limitSize</code> is negative
 @since 3.0
 */
+ (id<JavaUtilIterator>)limitWithJavaUtilIterator:(id<JavaUtilIterator>)iterator
                                          withInt:(jint)limitSize;

/*!
 @brief Returns an iterator over the merged contents of all given <code>iterators</code>, traversing every
  element of the input iterators.Equivalent entries will not be de-duplicated.
 <p>Callers must ensure that the source <code>iterators</code> are in non-descending order as this
  method does not sort its input. 
 <p>For any equivalent elements across all <code>iterators</code>, it is undefined which element is
  returned first.
 @since 11.0
 */
+ (ComGoogleCommonCollectUnmodifiableIterator *)mergeSortedWithJavaLangIterable:(id<JavaLangIterable>)iterators
                                                         withJavaUtilComparator:(id<JavaUtilComparator>)comparator;

/*!
 @brief Divides an iterator into unmodifiable sublists of the given size, padding the final iterator
  with null values if necessary.For example, partitioning an iterator containing <code>[a, b,
  c, d, e]</code>
  with a partition size of 3 yields <code>[[a, b, c], [d, e, null]]</code> -- an outer
  iterator containing two inner lists of three elements each, all in the original order.
 <p>The returned lists implement <code>java.util.RandomAccess</code>.
 @param iterator the iterator to return a partitioned view of
 @param size the desired size of each partition
 @return an iterator of immutable lists containing the elements of <code>iterator</code> divided into
      partitions (the final iterable may have trailing null elements)
 @throw IllegalArgumentExceptionif <code>size</code> is nonpositive
 */
+ (ComGoogleCommonCollectUnmodifiableIterator *)paddedPartitionWithJavaUtilIterator:(id<JavaUtilIterator>)iterator
                                                                            withInt:(jint)size;

/*!
 @brief Divides an iterator into unmodifiable sublists of the given size (the final list may be
  smaller).For example, partitioning an iterator containing <code>[a, b, c, d, e]</code> with a
  partition size of 3 yields <code>[[a, b, c], [d, e]]</code> -- an outer iterator containing two
  inner lists of three and two elements, all in the original order.
 <p>The returned lists implement <code>java.util.RandomAccess</code>.
 @param iterator the iterator to return a partitioned view of
 @param size the desired size of each partition (the last may be smaller)
 @return an iterator of immutable lists containing the elements of <code>iterator</code> divided into
      partitions
 @throw IllegalArgumentExceptionif <code>size</code> is nonpositive
 */
+ (ComGoogleCommonCollectUnmodifiableIterator *)partitionWithJavaUtilIterator:(id<JavaUtilIterator>)iterator
                                                                      withInt:(jint)size;

/*!
 @brief Returns a <code>PeekingIterator</code> backed by the given iterator.
 <p>Calls to the <code>peek</code> method with no intervening calls to <code>next</code> do not affect the
  iteration, and hence return the same object each time. A subsequent call to <code>next</code> is
  guaranteed to return the same object again. For example: 
 @code
 PeekingIterator<String> peekingIterator =
      Iterators.peekingIterator(Iterators.forArray("a", "b"));
  String a1 = peekingIterator.peek(); // returns "a"
  String a2 = peekingIterator.peek(); // also returns "a"
  String a3 = peekingIterator.next(); // also returns "a" 
 
@endcode
  
 <p>Any structural changes to the underlying iteration (aside from those performed by the
  iterator's own <code>PeekingIterator.remove()</code> method) will leave the iterator in an undefined
  state. 
 <p>The returned iterator does not support removal after peeking, as explained by <code>PeekingIterator.remove()</code>
 .
  
 <p>Note: If the given iterator is already a <code>PeekingIterator</code>, it <i>might</i> be
  returned to the caller, although this is neither guaranteed to occur nor required to be
  consistent. For example, this method <i>might</i> choose to pass through recognized
  implementations of <code>PeekingIterator</code> when the behavior of the implementation is known to
  meet the contract guaranteed by this method. 
 <p>There is no <code>Iterable</code> equivalent to this method, so use this method to wrap each
  individual iterator as it is generated.
 @param iterator the backing iterator. The <code>PeekingIterator</code>  assumes ownership of this
       iterator, so users should cease making direct calls to it after calling this method.
 @return a peeking iterator backed by that iterator. Apart from the additional <code>PeekingIterator.peek()</code>
  method, this iterator behaves exactly the same as <code>iterator</code>.
 */
+ (id<ComGoogleCommonCollectPeekingIterator>)peekingIteratorWithJavaUtilIterator:(id<JavaUtilIterator>)iterator;

/*!
 @brief Simply returns its argument.
 @since 10.0
 */
+ (id<ComGoogleCommonCollectPeekingIterator>)peekingIteratorWithComGoogleCommonCollectPeekingIterator:(id<ComGoogleCommonCollectPeekingIterator>)iterator __attribute__((deprecated));

/*!
 @brief Traverses an iterator and removes every element that belongs to the provided collection.The
  iterator will be left exhausted: its <code>hasNext()</code> method will return <code>false</code>.
 @param removeFrom the iterator to (potentially) remove elements from
 @param elementsToRemove the elements to remove
 @return <code>true</code> if any element was removed from <code>iterator</code>
 */
+ (jboolean)removeAllWithJavaUtilIterator:(id<JavaUtilIterator>)removeFrom
                   withJavaUtilCollection:(id<JavaUtilCollection>)elementsToRemove;

/*!
 @brief Removes every element that satisfies the provided predicate from the iterator.The iterator
  will be left exhausted: its <code>hasNext()</code> method will return <code>false</code>.
 @param removeFrom the iterator to (potentially) remove elements from
 @param predicate a predicate that determines whether an element should be removed
 @return <code>true</code> if any elements were removed from the iterator
 @since 2.0
 */
+ (jboolean)removeIfWithJavaUtilIterator:(id<JavaUtilIterator>)removeFrom
        withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate>)predicate;

/*!
 @brief Traverses an iterator and removes every element that does not belong to the provided
  collection.The iterator will be left exhausted: its <code>hasNext()</code> method will return 
 <code>false</code>.
 @param removeFrom the iterator to (potentially) remove elements from
 @param elementsToRetain the elements to retain
 @return <code>true</code> if any element was removed from <code>iterator</code>
 */
+ (jboolean)retainAllWithJavaUtilIterator:(id<JavaUtilIterator>)removeFrom
                   withJavaUtilCollection:(id<JavaUtilCollection>)elementsToRetain;

/*!
 @brief Returns an iterator containing only <code>value</code>.
 <p>The <code>Iterable</code> equivalent of this method is <code>Collections.singleton</code>.
 */
+ (ComGoogleCommonCollectUnmodifiableIterator *)singletonIteratorWithId:(id)value;

/*!
 @brief Returns the number of elements remaining in <code>iterator</code>.The iterator will be left
  exhausted: its <code>hasNext()</code> method will return <code>false</code>.
 */
+ (jint)sizeWithJavaUtilIterator:(id<JavaUtilIterator>)iterator;

/*!
 @brief Copies an iterator's elements into an array.The iterator will be left exhausted: its <code>hasNext()</code>
  method will return <code>false</code>.
 @param iterator the iterator to copy
 @param type the type of the elements
 @return a newly-allocated array into which all the elements of the iterator have been copied
 */
+ (IOSObjectArray *)toArrayWithJavaUtilIterator:(id<JavaUtilIterator>)iterator
                                   withIOSClass:(IOSClass *)type;

/*!
 @brief Returns a string representation of <code>iterator</code>, with the format <code>[e1, e2, ..., en]</code>.
 The iterator will be left exhausted: its <code>hasNext()</code> method will return <code>false</code>.
 */
+ (NSString *)toStringWithJavaUtilIterator:(id<JavaUtilIterator>)iterator;

/*!
 @brief Returns a view containing the result of applying <code>function</code> to each element of <code>fromIterator</code>
 .
 <p>The returned iterator supports <code>remove()</code> if <code>fromIterator</code> does. After a
  successful <code>remove()</code> call, <code>fromIterator</code> no longer contains the corresponding
  element.
 */
+ (id<JavaUtilIterator>)transformWithJavaUtilIterator:(id<JavaUtilIterator>)fromIterator
                      withComGoogleCommonBaseFunction:(id<ComGoogleCommonBaseFunction>)function;

/*!
 @brief Returns an <code>Optional</code> containing the first element in <code>iterator</code> that satisfies the
  given predicate, if such an element exists.If no such element is found, an empty <code>Optional</code>
  will be returned from this method and the iterator will be left exhausted: its <code>hasNext()</code>
  method will return <code>false</code>.
 <p><b>Warning:</b> avoid using a <code>predicate</code> that matches <code>null</code>. If <code>null</code>
  is matched in <code>iterator</code>, a NullPointerException will be thrown.
 @since 11.0
 */
+ (ComGoogleCommonBaseOptional *)tryFindWithJavaUtilIterator:(id<JavaUtilIterator>)iterator
                            withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate>)predicate;

/*!
 @brief Returns an unmodifiable view of <code>iterator</code>.
 */
+ (ComGoogleCommonCollectUnmodifiableIterator *)unmodifiableIteratorWithJavaUtilIterator:(id<JavaUtilIterator>)iterator;

/*!
 @brief Simply returns its argument.
 @since 10.0
 */
+ (ComGoogleCommonCollectUnmodifiableIterator *)unmodifiableIteratorWithComGoogleCommonCollectUnmodifiableIterator:(ComGoogleCommonCollectUnmodifiableIterator *)iterator __attribute__((deprecated));

#pragma mark Package-Private

/*!
 @brief Used to avoid http://bugs.sun.com/view_bug.do?
 bug_id=6558557
 */
+ (id<JavaUtilListIterator>)castWithJavaUtilIterator:(id<JavaUtilIterator>)iterator;

+ (void)checkNonnegativeWithInt:(jint)position;

/*!
 @brief Clears the iterator using its remove method.
 */
+ (void)clearWithJavaUtilIterator:(id<JavaUtilIterator>)iterator;

/*!
 @brief Concats a varargs array of iterators without making a defensive copy of the array.
 */
+ (id<JavaUtilIterator>)concatNoDefensiveCopyWithJavaUtilIteratorArray:(IOSObjectArray *)inputs;

/*!
 @brief Returns the empty iterator.
 <p>The <code>Iterable</code> equivalent of this method is <code>ImmutableSet.of()</code>.
 */
+ (ComGoogleCommonCollectUnmodifiableIterator *)emptyIterator;

/*!
 @brief Returns the empty iterator.
 <p>The <code>Iterable</code> equivalent of this method is <code>ImmutableSet.of()</code>.
 */
+ (ComGoogleCommonCollectUnmodifiableListIterator *)emptyListIterator;

/*!
 @brief Returns the empty <code>Iterator</code> that throws <code>IllegalStateException</code> instead of <code>UnsupportedOperationException</code>
  on a call to <code>Iterator.remove()</code>.
 */
+ (id<JavaUtilIterator>)emptyModifiableIterator;

/*!
 @brief Returns a list iterator containing the elements in the specified range of <code>array</code> in
  order, starting at the specified index.
 <p>The <code>Iterable</code> equivalent of this method is <code>Arrays.asList(array).subList(offset, offset + length).listIterator(index)</code>
 .
 */
+ (ComGoogleCommonCollectUnmodifiableListIterator *)forArrayWithNSObjectArray:(IOSObjectArray *)array
                                                                      withInt:(jint)offset
                                                                      withInt:(jint)length
                                                                      withInt:(jint)index;

/*!
 @brief Deletes and returns the next value from the iterator, or returns <code>null</code> if there is no
  such value.
 */
+ (id)pollNextWithJavaUtilIterator:(id<JavaUtilIterator>)iterator;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectIterators)

FOUNDATION_EXPORT ComGoogleCommonCollectUnmodifiableIterator *ComGoogleCommonCollectIterators_emptyIterator(void);

FOUNDATION_EXPORT ComGoogleCommonCollectUnmodifiableListIterator *ComGoogleCommonCollectIterators_emptyListIterator(void);

FOUNDATION_EXPORT id<JavaUtilIterator> ComGoogleCommonCollectIterators_emptyModifiableIterator(void);

FOUNDATION_EXPORT ComGoogleCommonCollectUnmodifiableIterator *ComGoogleCommonCollectIterators_unmodifiableIteratorWithJavaUtilIterator_(id<JavaUtilIterator> iterator);

FOUNDATION_EXPORT ComGoogleCommonCollectUnmodifiableIterator *ComGoogleCommonCollectIterators_unmodifiableIteratorWithComGoogleCommonCollectUnmodifiableIterator_(ComGoogleCommonCollectUnmodifiableIterator *iterator);

FOUNDATION_EXPORT jint ComGoogleCommonCollectIterators_sizeWithJavaUtilIterator_(id<JavaUtilIterator> iterator);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectIterators_containsWithJavaUtilIterator_withId_(id<JavaUtilIterator> iterator, id element);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectIterators_removeAllWithJavaUtilIterator_withJavaUtilCollection_(id<JavaUtilIterator> removeFrom, id<JavaUtilCollection> elementsToRemove);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectIterators_removeIfWithJavaUtilIterator_withComGoogleCommonBasePredicate_(id<JavaUtilIterator> removeFrom, id<ComGoogleCommonBasePredicate> predicate);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectIterators_retainAllWithJavaUtilIterator_withJavaUtilCollection_(id<JavaUtilIterator> removeFrom, id<JavaUtilCollection> elementsToRetain);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectIterators_elementsEqualWithJavaUtilIterator_withJavaUtilIterator_(id<JavaUtilIterator> iterator1, id<JavaUtilIterator> iterator2);

FOUNDATION_EXPORT NSString *ComGoogleCommonCollectIterators_toStringWithJavaUtilIterator_(id<JavaUtilIterator> iterator);

FOUNDATION_EXPORT id ComGoogleCommonCollectIterators_getOnlyElementWithJavaUtilIterator_(id<JavaUtilIterator> iterator);

FOUNDATION_EXPORT id ComGoogleCommonCollectIterators_getOnlyElementWithJavaUtilIterator_withId_(id<JavaUtilIterator> iterator, id defaultValue);

FOUNDATION_EXPORT IOSObjectArray *ComGoogleCommonCollectIterators_toArrayWithJavaUtilIterator_withIOSClass_(id<JavaUtilIterator> iterator, IOSClass *type);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectIterators_addAllWithJavaUtilCollection_withJavaUtilIterator_(id<JavaUtilCollection> addTo, id<JavaUtilIterator> iterator);

FOUNDATION_EXPORT jint ComGoogleCommonCollectIterators_frequencyWithJavaUtilIterator_withId_(id<JavaUtilIterator> iterator, id element);

FOUNDATION_EXPORT id<JavaUtilIterator> ComGoogleCommonCollectIterators_cycleWithJavaLangIterable_(id<JavaLangIterable> iterable);

FOUNDATION_EXPORT id<JavaUtilIterator> ComGoogleCommonCollectIterators_cycleWithNSObjectArray_(IOSObjectArray *elements);

FOUNDATION_EXPORT id<JavaUtilIterator> ComGoogleCommonCollectIterators_concatWithJavaUtilIterator_withJavaUtilIterator_(id<JavaUtilIterator> a, id<JavaUtilIterator> b);

FOUNDATION_EXPORT id<JavaUtilIterator> ComGoogleCommonCollectIterators_concatWithJavaUtilIterator_withJavaUtilIterator_withJavaUtilIterator_(id<JavaUtilIterator> a, id<JavaUtilIterator> b, id<JavaUtilIterator> c);

FOUNDATION_EXPORT id<JavaUtilIterator> ComGoogleCommonCollectIterators_concatWithJavaUtilIterator_withJavaUtilIterator_withJavaUtilIterator_withJavaUtilIterator_(id<JavaUtilIterator> a, id<JavaUtilIterator> b, id<JavaUtilIterator> c, id<JavaUtilIterator> d);

FOUNDATION_EXPORT id<JavaUtilIterator> ComGoogleCommonCollectIterators_concatWithJavaUtilIteratorArray_(IOSObjectArray *inputs);

FOUNDATION_EXPORT id<JavaUtilIterator> ComGoogleCommonCollectIterators_concatWithJavaUtilIterator_(id<JavaUtilIterator> inputs);

FOUNDATION_EXPORT id<JavaUtilIterator> ComGoogleCommonCollectIterators_concatNoDefensiveCopyWithJavaUtilIteratorArray_(IOSObjectArray *inputs);

FOUNDATION_EXPORT ComGoogleCommonCollectUnmodifiableIterator *ComGoogleCommonCollectIterators_partitionWithJavaUtilIterator_withInt_(id<JavaUtilIterator> iterator, jint size);

FOUNDATION_EXPORT ComGoogleCommonCollectUnmodifiableIterator *ComGoogleCommonCollectIterators_paddedPartitionWithJavaUtilIterator_withInt_(id<JavaUtilIterator> iterator, jint size);

FOUNDATION_EXPORT ComGoogleCommonCollectUnmodifiableIterator *ComGoogleCommonCollectIterators_filterWithJavaUtilIterator_withComGoogleCommonBasePredicate_(id<JavaUtilIterator> unfiltered, id<ComGoogleCommonBasePredicate> retainIfTrue);

FOUNDATION_EXPORT ComGoogleCommonCollectUnmodifiableIterator *ComGoogleCommonCollectIterators_filterWithJavaUtilIterator_withIOSClass_(id<JavaUtilIterator> unfiltered, IOSClass *desiredType);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectIterators_anyWithJavaUtilIterator_withComGoogleCommonBasePredicate_(id<JavaUtilIterator> iterator, id<ComGoogleCommonBasePredicate> predicate);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectIterators_allWithJavaUtilIterator_withComGoogleCommonBasePredicate_(id<JavaUtilIterator> iterator, id<ComGoogleCommonBasePredicate> predicate);

FOUNDATION_EXPORT id ComGoogleCommonCollectIterators_findWithJavaUtilIterator_withComGoogleCommonBasePredicate_(id<JavaUtilIterator> iterator, id<ComGoogleCommonBasePredicate> predicate);

FOUNDATION_EXPORT id ComGoogleCommonCollectIterators_findWithJavaUtilIterator_withComGoogleCommonBasePredicate_withId_(id<JavaUtilIterator> iterator, id<ComGoogleCommonBasePredicate> predicate, id defaultValue);

FOUNDATION_EXPORT ComGoogleCommonBaseOptional *ComGoogleCommonCollectIterators_tryFindWithJavaUtilIterator_withComGoogleCommonBasePredicate_(id<JavaUtilIterator> iterator, id<ComGoogleCommonBasePredicate> predicate);

FOUNDATION_EXPORT jint ComGoogleCommonCollectIterators_indexOfWithJavaUtilIterator_withComGoogleCommonBasePredicate_(id<JavaUtilIterator> iterator, id<ComGoogleCommonBasePredicate> predicate);

FOUNDATION_EXPORT id<JavaUtilIterator> ComGoogleCommonCollectIterators_transformWithJavaUtilIterator_withComGoogleCommonBaseFunction_(id<JavaUtilIterator> fromIterator, id<ComGoogleCommonBaseFunction> function);

FOUNDATION_EXPORT id ComGoogleCommonCollectIterators_getWithJavaUtilIterator_withInt_(id<JavaUtilIterator> iterator, jint position);

FOUNDATION_EXPORT id ComGoogleCommonCollectIterators_getWithJavaUtilIterator_withInt_withId_(id<JavaUtilIterator> iterator, jint position, id defaultValue);

FOUNDATION_EXPORT void ComGoogleCommonCollectIterators_checkNonnegativeWithInt_(jint position);

FOUNDATION_EXPORT id ComGoogleCommonCollectIterators_getNextWithJavaUtilIterator_withId_(id<JavaUtilIterator> iterator, id defaultValue);

FOUNDATION_EXPORT id ComGoogleCommonCollectIterators_getLastWithJavaUtilIterator_(id<JavaUtilIterator> iterator);

FOUNDATION_EXPORT id ComGoogleCommonCollectIterators_getLastWithJavaUtilIterator_withId_(id<JavaUtilIterator> iterator, id defaultValue);

FOUNDATION_EXPORT jint ComGoogleCommonCollectIterators_advanceWithJavaUtilIterator_withInt_(id<JavaUtilIterator> iterator, jint numberToAdvance);

FOUNDATION_EXPORT id<JavaUtilIterator> ComGoogleCommonCollectIterators_limitWithJavaUtilIterator_withInt_(id<JavaUtilIterator> iterator, jint limitSize);

FOUNDATION_EXPORT id<JavaUtilIterator> ComGoogleCommonCollectIterators_consumingIteratorWithJavaUtilIterator_(id<JavaUtilIterator> iterator);

FOUNDATION_EXPORT id ComGoogleCommonCollectIterators_pollNextWithJavaUtilIterator_(id<JavaUtilIterator> iterator);

FOUNDATION_EXPORT void ComGoogleCommonCollectIterators_clearWithJavaUtilIterator_(id<JavaUtilIterator> iterator);

FOUNDATION_EXPORT ComGoogleCommonCollectUnmodifiableIterator *ComGoogleCommonCollectIterators_forArrayWithNSObjectArray_(IOSObjectArray *array);

FOUNDATION_EXPORT ComGoogleCommonCollectUnmodifiableListIterator *ComGoogleCommonCollectIterators_forArrayWithNSObjectArray_withInt_withInt_withInt_(IOSObjectArray *array, jint offset, jint length, jint index);

FOUNDATION_EXPORT ComGoogleCommonCollectUnmodifiableIterator *ComGoogleCommonCollectIterators_singletonIteratorWithId_(id value);

FOUNDATION_EXPORT ComGoogleCommonCollectUnmodifiableIterator *ComGoogleCommonCollectIterators_forEnumerationWithJavaUtilEnumeration_(id<JavaUtilEnumeration> enumeration);

FOUNDATION_EXPORT id<JavaUtilEnumeration> ComGoogleCommonCollectIterators_asEnumerationWithJavaUtilIterator_(id<JavaUtilIterator> iterator);

FOUNDATION_EXPORT id<ComGoogleCommonCollectPeekingIterator> ComGoogleCommonCollectIterators_peekingIteratorWithJavaUtilIterator_(id<JavaUtilIterator> iterator);

FOUNDATION_EXPORT id<ComGoogleCommonCollectPeekingIterator> ComGoogleCommonCollectIterators_peekingIteratorWithComGoogleCommonCollectPeekingIterator_(id<ComGoogleCommonCollectPeekingIterator> iterator);

FOUNDATION_EXPORT ComGoogleCommonCollectUnmodifiableIterator *ComGoogleCommonCollectIterators_mergeSortedWithJavaLangIterable_withJavaUtilComparator_(id<JavaLangIterable> iterators, id<JavaUtilComparator> comparator);

FOUNDATION_EXPORT id<JavaUtilListIterator> ComGoogleCommonCollectIterators_castWithJavaUtilIterator_(id<JavaUtilIterator> iterator);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectIterators)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCollectIterators")
