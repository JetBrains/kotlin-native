//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/build_result/java/com/google/common/collect/ImmutableSet.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCollectImmutableSet")
#ifdef RESTRICT_ComGoogleCommonCollectImmutableSet
#define INCLUDE_ALL_ComGoogleCommonCollectImmutableSet 0
#else
#define INCLUDE_ALL_ComGoogleCommonCollectImmutableSet 1
#endif
#undef RESTRICT_ComGoogleCommonCollectImmutableSet
#ifdef INCLUDE_ComGoogleCommonCollectImmutableSet_Indexed
#define INCLUDE_ComGoogleCommonCollectImmutableSet 1
#endif

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCollectImmutableSet_) && (INCLUDE_ALL_ComGoogleCommonCollectImmutableSet || defined(INCLUDE_ComGoogleCommonCollectImmutableSet))
#define ComGoogleCommonCollectImmutableSet_

#define RESTRICT_ComGoogleCommonCollectImmutableCollection 1
#define INCLUDE_ComGoogleCommonCollectImmutableCollection 1
#include "com/google/common/collect/ImmutableCollection.h"

#define RESTRICT_JavaUtilSet 1
#define INCLUDE_JavaUtilSet 1
#include "java/util/Set.h"

@class ComGoogleCommonCollectImmutableList;
@class ComGoogleCommonCollectImmutableSet_Builder;
@class ComGoogleCommonCollectUnmodifiableIterator;
@class IOSObjectArray;
@protocol JavaLangIterable;
@protocol JavaUtilCollection;
@protocol JavaUtilIterator;
@protocol JavaUtilStreamCollector;

/*!
 @brief A <code>Set</code> whose contents will never change, with many other important properties detailed at 
 <code>ImmutableCollection</code>.
 @since 2.0
 */
@interface ComGoogleCommonCollectImmutableSet : ComGoogleCommonCollectImmutableCollection < JavaUtilSet >
@property (readonly, class) jint SPLITERATOR_CHARACTERISTICS NS_SWIFT_NAME(SPLITERATOR_CHARACTERISTICS);
@property (readonly, class) jint MAX_TABLE_SIZE NS_SWIFT_NAME(MAX_TABLE_SIZE);
@property (readonly, class) jdouble HASH_FLOODING_FPP NS_SWIFT_NAME(HASH_FLOODING_FPP);
@property (readonly, class) jint MAX_RUN_MULTIPLIER NS_SWIFT_NAME(MAX_RUN_MULTIPLIER);

+ (jint)SPLITERATOR_CHARACTERISTICS;

+ (jint)MAX_TABLE_SIZE;

+ (jdouble)HASH_FLOODING_FPP;

+ (jint)MAX_RUN_MULTIPLIER;

#pragma mark Public

- (ComGoogleCommonCollectImmutableList *)asList;

/*!
 @brief Returns a new builder.The generated builder is equivalent to the builder created by the <code>Builder</code>
  constructor.
 */
+ (ComGoogleCommonCollectImmutableSet_Builder *)builder;

/*!
 @brief Returns a new builder, expecting the specified number of distinct elements to be added.
 <p>If <code>expectedSize</code> is exactly the number of distinct elements added to the builder
  before <code>Builder.build</code> is called, the builder is likely to perform better than an unsized 
 <code>builder()</code> would have. 
 <p>It is not specified if any performance benefits apply if <code>expectedSize</code> is close to,
  but not exactly, the number of distinct elements added to the builder.
 @since 23.1
 */
+ (ComGoogleCommonCollectImmutableSet_Builder *)builderWithExpectedSizeWithInt:(jint)expectedSize;

/*!
 @brief Returns an immutable set containing each of <code>elements</code>, minus duplicates, in the order
  each appears first in the source collection.
 <p><b>Performance note:</b> This method will sometimes recognize that the actual copy operation
  is unnecessary; for example, <code>copyOf(copyOf(anArrayList))</code> will copy the data only once.
  This reduces the expense of habitually making defensive copies at API boundaries. However, the
  precise conditions for skipping the copy operation are undefined.
 @throw NullPointerExceptionif any of <code>elements</code> is null
 @since 7.0 (source-compatible since 2.0)
 */
+ (ComGoogleCommonCollectImmutableSet *)copyOfWithJavaUtilCollection:(id<JavaUtilCollection>)elements OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns an immutable set containing each of <code>elements</code>, minus duplicates, in the order
  each appears first in the source array.
 @throw NullPointerExceptionif any of <code>elements</code> is null
 @since 3.0
 */
+ (ComGoogleCommonCollectImmutableSet *)copyOfWithNSObjectArray:(IOSObjectArray *)elements OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns an immutable set containing each of <code>elements</code>, minus duplicates, in the order
  each appears first in the source iterable.This method iterates over <code>elements</code> only
  once.
 <p><b>Performance note:</b> This method will sometimes recognize that the actual copy operation
  is unnecessary; for example, <code>copyOf(copyOf(anArrayList))</code> should copy the data only
  once. This reduces the expense of habitually making defensive copies at API boundaries.
  However, the precise conditions for skipping the copy operation are undefined.
 @throw NullPointerExceptionif any of <code>elements</code> is null
 */
+ (ComGoogleCommonCollectImmutableSet *)copyOfWithJavaLangIterable:(id<JavaLangIterable>)elements OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns an immutable set containing each of <code>elements</code>, minus duplicates, in the order
  each appears first in the source iterator.
 @throw NullPointerExceptionif any of <code>elements</code> is null
 */
+ (ComGoogleCommonCollectImmutableSet *)copyOfWithJavaUtilIterator:(id<JavaUtilIterator>)elements OBJC_METHOD_FAMILY_NONE;

- (jboolean)isEqual:(id __nullable)object;

- (NSUInteger)hash;

- (ComGoogleCommonCollectUnmodifiableIterator *)iterator;

/*!
 @brief Returns the empty immutable set.Preferred over <code>Collections.emptySet</code> for code
  consistency, and because the return type conveys the immutability guarantee.
 */
+ (ComGoogleCommonCollectImmutableSet *)of;

/*!
 @brief Returns an immutable set containing <code>element</code>.Preferred over <code>Collections.singleton</code>
  for code consistency, <code>null</code> rejection, and because the return
  type conveys the immutability guarantee.
 */
+ (ComGoogleCommonCollectImmutableSet *)ofWithId:(id)element;

/*!
 @brief Returns an immutable set containing the given elements, minus duplicates, in the order each was
  first specified.That is, if multiple elements are equal, all except
  the first are ignored.
 */
+ (ComGoogleCommonCollectImmutableSet *)ofWithId:(id)e1
                                          withId:(id)e2;

/*!
 @brief Returns an immutable set containing the given elements, minus duplicates, in the order each was
  first specified.That is, if multiple elements are equal, all except
  the first are ignored.
 */
+ (ComGoogleCommonCollectImmutableSet *)ofWithId:(id)e1
                                          withId:(id)e2
                                          withId:(id)e3;

/*!
 @brief Returns an immutable set containing the given elements, minus duplicates, in the order each was
  first specified.That is, if multiple elements are equal, all except
  the first are ignored.
 */
+ (ComGoogleCommonCollectImmutableSet *)ofWithId:(id)e1
                                          withId:(id)e2
                                          withId:(id)e3
                                          withId:(id)e4;

/*!
 @brief Returns an immutable set containing the given elements, minus duplicates, in the order each was
  first specified.That is, if multiple elements are equal, all except
  the first are ignored.
 */
+ (ComGoogleCommonCollectImmutableSet *)ofWithId:(id)e1
                                          withId:(id)e2
                                          withId:(id)e3
                                          withId:(id)e4
                                          withId:(id)e5;

/*!
 @brief Returns an immutable set containing the given elements, minus duplicates, in the order each was
  first specified.That is, if multiple elements are equal, all except
  the first are ignored.
 <p>The array <code>others</code> must not be longer than <code>Integer.MAX_VALUE - 6</code>.
 @since 3.0 (source-compatible since 2.0)
 */
+ (ComGoogleCommonCollectImmutableSet *)ofWithId:(id)e1
                                          withId:(id)e2
                                          withId:(id)e3
                                          withId:(id)e4
                                          withId:(id)e5
                                          withId:(id)e6
                               withNSObjectArray:(IOSObjectArray *)others;

/*!
 @brief Returns a <code>Collector</code> that accumulates the input elements into a new <code>ImmutableSet</code>
 .Elements appear in the resulting set in the encounter order of the stream; if
  the stream contains duplicates (according to <code>Object.equals(Object)</code>), only the first
  duplicate in encounter order will appear in the result.
 @since 21.0
 */
+ (id<JavaUtilStreamCollector>)toImmutableSet;

#pragma mark Package-Private

- (instancetype __nonnull)init;

/*!
 @brief Returns an array size suitable for the backing array of a hash table that uses open addressing
  with linear probing in its implementation.The returned size is the smallest power of two that
  can hold setSize elements with the desired load factor.
 Always returns at least setSize + 2.
 */
+ (jint)chooseTableSizeWithInt:(jint)setSize;

- (ComGoogleCommonCollectImmutableList *)createAsList;

/*!
 @brief Checks the whole hash table for poor hash distribution.Takes O(n).
 <p>The online hash flooding detecting in RegularSetBuilderImpl.add can detect e.g. many exactly
  matching hash codes, which would cause construction to take O(n^2), but can't detect e.g. hash
  codes adversarially designed to go into ascending table locations, which keeps construction
  O(n) (as desired) but then can have O(n) queries later. 
 <p>If this returns false, then no query can take more than O(log n). 
 <p>Note that for a RegularImmutableSet with elements with truly random hash codes, contains
  operations take expected O(1) time but with high probability take O(log n) for at least some
  element. (https://en.wikipedia.org/wiki/Linear_probing#Analysis)
 */
+ (jboolean)hashFloodingDetectedWithNSObjectArray:(IOSObjectArray *)hashTable;

/*!
 @brief Returns <code>true</code> if the <code>hashCode()</code> method runs quickly.
 */
- (jboolean)isHashCodeFast;

/*!
 @brief If more than this many consecutive positions are filled in a table of the specified size,
  report probable hash flooding.
 */
+ (jint)maxRunBeforeFallbackWithInt:(jint)tableSize;

/*!
 @brief Builds a new open-addressed hash table from the first n objects in elements.
 */
+ (IOSObjectArray *)rebuildHashTableWithInt:(jint)newTableSize
                          withNSObjectArray:(IOSObjectArray *)elements
                                    withInt:(jint)n;

- (id)writeReplace;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectImmutableSet)

inline jint ComGoogleCommonCollectImmutableSet_get_SPLITERATOR_CHARACTERISTICS(void);
#define ComGoogleCommonCollectImmutableSet_SPLITERATOR_CHARACTERISTICS 1297
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonCollectImmutableSet, SPLITERATOR_CHARACTERISTICS, jint)

inline jint ComGoogleCommonCollectImmutableSet_get_MAX_TABLE_SIZE(void);
#define ComGoogleCommonCollectImmutableSet_MAX_TABLE_SIZE 1073741824
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonCollectImmutableSet, MAX_TABLE_SIZE, jint)

/*!
 @brief We attempt to detect deliberate hash flooding attempts, and if one is detected, fall back to a
  wrapper around j.u.HashSet, which has built in flooding protection.HASH_FLOODING_FPP is the
  maximum allowed probability of falsely detecting a hash flooding attack if the input is
  randomly generated.
 <p>MAX_RUN_MULTIPLIER was determined experimentally to match this FPP.
 */
inline jdouble ComGoogleCommonCollectImmutableSet_get_HASH_FLOODING_FPP(void);
#define ComGoogleCommonCollectImmutableSet_HASH_FLOODING_FPP 0.001
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonCollectImmutableSet, HASH_FLOODING_FPP, jdouble)

inline jint ComGoogleCommonCollectImmutableSet_get_MAX_RUN_MULTIPLIER(void);
#define ComGoogleCommonCollectImmutableSet_MAX_RUN_MULTIPLIER 12
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonCollectImmutableSet, MAX_RUN_MULTIPLIER, jint)

FOUNDATION_EXPORT id<JavaUtilStreamCollector> ComGoogleCommonCollectImmutableSet_toImmutableSet(void);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSet *ComGoogleCommonCollectImmutableSet_of(void);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSet *ComGoogleCommonCollectImmutableSet_ofWithId_(id element);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSet *ComGoogleCommonCollectImmutableSet_ofWithId_withId_(id e1, id e2);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSet *ComGoogleCommonCollectImmutableSet_ofWithId_withId_withId_(id e1, id e2, id e3);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSet *ComGoogleCommonCollectImmutableSet_ofWithId_withId_withId_withId_(id e1, id e2, id e3, id e4);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSet *ComGoogleCommonCollectImmutableSet_ofWithId_withId_withId_withId_withId_(id e1, id e2, id e3, id e4, id e5);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSet *ComGoogleCommonCollectImmutableSet_ofWithId_withId_withId_withId_withId_withId_withNSObjectArray_(id e1, id e2, id e3, id e4, id e5, id e6, IOSObjectArray *others);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSet *ComGoogleCommonCollectImmutableSet_copyOfWithJavaUtilCollection_(id<JavaUtilCollection> elements);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSet *ComGoogleCommonCollectImmutableSet_copyOfWithJavaLangIterable_(id<JavaLangIterable> elements);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSet *ComGoogleCommonCollectImmutableSet_copyOfWithJavaUtilIterator_(id<JavaUtilIterator> elements);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSet *ComGoogleCommonCollectImmutableSet_copyOfWithNSObjectArray_(IOSObjectArray *elements);

FOUNDATION_EXPORT void ComGoogleCommonCollectImmutableSet_init(ComGoogleCommonCollectImmutableSet *self);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSet_Builder *ComGoogleCommonCollectImmutableSet_builder(void);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSet_Builder *ComGoogleCommonCollectImmutableSet_builderWithExpectedSizeWithInt_(jint expectedSize);

FOUNDATION_EXPORT IOSObjectArray *ComGoogleCommonCollectImmutableSet_rebuildHashTableWithInt_withNSObjectArray_withInt_(jint newTableSize, IOSObjectArray *elements, jint n);

FOUNDATION_EXPORT jint ComGoogleCommonCollectImmutableSet_chooseTableSizeWithInt_(jint setSize);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectImmutableSet_hashFloodingDetectedWithNSObjectArray_(IOSObjectArray *hashTable);

FOUNDATION_EXPORT jint ComGoogleCommonCollectImmutableSet_maxRunBeforeFallbackWithInt_(jint tableSize);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectImmutableSet)

#endif

#if !defined (ComGoogleCommonCollectImmutableSet_Indexed_) && (INCLUDE_ALL_ComGoogleCommonCollectImmutableSet || defined(INCLUDE_ComGoogleCommonCollectImmutableSet_Indexed))
#define ComGoogleCommonCollectImmutableSet_Indexed_

@class ComGoogleCommonCollectImmutableList;
@class ComGoogleCommonCollectUnmodifiableIterator;
@class IOSObjectArray;
@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilSpliterator;

@interface ComGoogleCommonCollectImmutableSet_Indexed : ComGoogleCommonCollectImmutableSet

#pragma mark Public

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)consumer;

- (ComGoogleCommonCollectUnmodifiableIterator *)iterator;

- (id<JavaUtilSpliterator>)spliterator;

#pragma mark Package-Private

- (instancetype __nonnull)init;

- (jint)copyIntoArrayWithNSObjectArray:(IOSObjectArray *)dst
                               withInt:(jint)offset OBJC_METHOD_FAMILY_NONE;

- (ComGoogleCommonCollectImmutableList *)createAsList;

- (id)getWithInt:(jint)index;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectImmutableSet_Indexed)

FOUNDATION_EXPORT void ComGoogleCommonCollectImmutableSet_Indexed_init(ComGoogleCommonCollectImmutableSet_Indexed *self);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectImmutableSet_Indexed)

#endif

#if !defined (ComGoogleCommonCollectImmutableSet_Builder_) && (INCLUDE_ALL_ComGoogleCommonCollectImmutableSet || defined(INCLUDE_ComGoogleCommonCollectImmutableSet_Builder))
#define ComGoogleCommonCollectImmutableSet_Builder_

#define RESTRICT_ComGoogleCommonCollectImmutableCollection 1
#define INCLUDE_ComGoogleCommonCollectImmutableCollection_Builder 1
#include "com/google/common/collect/ImmutableCollection.h"

@class ComGoogleCommonCollectImmutableSet;
@class IOSObjectArray;
@protocol JavaLangIterable;
@protocol JavaUtilIterator;

/*!
 @brief A builder for creating <code>ImmutableSet</code> instances.Example:
  
 @code
 static final ImmutableSet<Color> GOOGLE_COLORS =
      ImmutableSet.
 <Color>builder()
          .addAll(WEBSAFE_COLORS)
          .add(new Color(0, 191, 255))
          .build(); 
 
@endcode
  
 <p>Elements appear in the resulting set in the same order they were first added to the builder. 
 <p>Building does not change the state of the builder, so it is still possible to add more
  elements and to build again.
 @since 2.0
 */
@interface ComGoogleCommonCollectImmutableSet_Builder : ComGoogleCommonCollectImmutableCollection_Builder {
 @public
  jboolean forceCopy_;
}

#pragma mark Public

- (instancetype __nonnull)init;

- (ComGoogleCommonCollectImmutableSet_Builder *)addWithId:(id)element;

- (ComGoogleCommonCollectImmutableSet_Builder *)addWithNSObjectArray:(IOSObjectArray *)elements;

- (ComGoogleCommonCollectImmutableSet_Builder *)addAllWithJavaLangIterable:(id<JavaLangIterable>)elements;

- (ComGoogleCommonCollectImmutableSet_Builder *)addAllWithJavaUtilIterator:(id<JavaUtilIterator>)elements;

- (ComGoogleCommonCollectImmutableSet *)build;

#pragma mark Package-Private

- (instancetype __nonnull)initWithBoolean:(jboolean)subclass;

- (instancetype __nonnull)initWithInt:(jint)capacity;

- (ComGoogleCommonCollectImmutableSet_Builder *)combineWithComGoogleCommonCollectImmutableSet_Builder:(ComGoogleCommonCollectImmutableSet_Builder *)other;

- (void)copy__ OBJC_METHOD_FAMILY_NONE;

- (void)copyIfNecessary OBJC_METHOD_FAMILY_NONE;

- (void)forceJdk;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectImmutableSet_Builder)

FOUNDATION_EXPORT void ComGoogleCommonCollectImmutableSet_Builder_init(ComGoogleCommonCollectImmutableSet_Builder *self);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSet_Builder *new_ComGoogleCommonCollectImmutableSet_Builder_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSet_Builder *create_ComGoogleCommonCollectImmutableSet_Builder_init(void);

FOUNDATION_EXPORT void ComGoogleCommonCollectImmutableSet_Builder_initWithInt_(ComGoogleCommonCollectImmutableSet_Builder *self, jint capacity);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSet_Builder *new_ComGoogleCommonCollectImmutableSet_Builder_initWithInt_(jint capacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSet_Builder *create_ComGoogleCommonCollectImmutableSet_Builder_initWithInt_(jint capacity);

FOUNDATION_EXPORT void ComGoogleCommonCollectImmutableSet_Builder_initWithBoolean_(ComGoogleCommonCollectImmutableSet_Builder *self, jboolean subclass);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSet_Builder *new_ComGoogleCommonCollectImmutableSet_Builder_initWithBoolean_(jboolean subclass) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSet_Builder *create_ComGoogleCommonCollectImmutableSet_Builder_initWithBoolean_(jboolean subclass);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectImmutableSet_Builder)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCollectImmutableSet")
