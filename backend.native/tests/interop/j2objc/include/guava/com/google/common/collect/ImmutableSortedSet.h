//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/build_result/java/com/google/common/collect/ImmutableSortedSet.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCollectImmutableSortedSet")
#ifdef RESTRICT_ComGoogleCommonCollectImmutableSortedSet
#define INCLUDE_ALL_ComGoogleCommonCollectImmutableSortedSet 0
#else
#define INCLUDE_ALL_ComGoogleCommonCollectImmutableSortedSet 1
#endif
#undef RESTRICT_ComGoogleCommonCollectImmutableSortedSet

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCollectImmutableSortedSet_) && (INCLUDE_ALL_ComGoogleCommonCollectImmutableSortedSet || defined(INCLUDE_ComGoogleCommonCollectImmutableSortedSet))
#define ComGoogleCommonCollectImmutableSortedSet_

#define RESTRICT_ComGoogleCommonCollectImmutableSortedSetFauxverideShim 1
#define INCLUDE_ComGoogleCommonCollectImmutableSortedSetFauxverideShim 1
#include "com/google/common/collect/ImmutableSortedSetFauxverideShim.h"

#define RESTRICT_JavaUtilNavigableSet 1
#define INCLUDE_JavaUtilNavigableSet 1
#include "java/util/NavigableSet.h"

#define RESTRICT_ComGoogleCommonCollectSortedIterable 1
#define INCLUDE_ComGoogleCommonCollectSortedIterable 1
#include "com/google/common/collect/SortedIterable.h"

@class ComGoogleCommonCollectImmutableSortedSet_Builder;
@class ComGoogleCommonCollectRegularImmutableSortedSet;
@class ComGoogleCommonCollectUnmodifiableIterator;
@class IOSObjectArray;
@protocol JavaLangComparable;
@protocol JavaLangIterable;
@protocol JavaUtilCollection;
@protocol JavaUtilComparator;
@protocol JavaUtilIterator;
@protocol JavaUtilSortedSet;
@protocol JavaUtilSpliterator;
@protocol JavaUtilStreamCollector;

/*!
 @brief A <code>NavigableSet</code> whose contents will never change, with many other important properties
  detailed at <code>ImmutableCollection</code>.
 <p><b>Warning:</b> as with any sorted collection, you are strongly advised not to use a <code>Comparator</code>
  or <code>Comparable</code> type whose comparison behavior is <i>inconsistent with
  equals</i>. That is, <code>a.compareTo(b)</code> or <code>comparator.compare(a, b)</code> should equal zero 
 <i>if and only if</i> <code>a.equals(b)</code>. If this advice is not followed, the resulting
  collection will not correctly obey its specification. 
 <p>See the Guava User Guide article on <a href="https://github.com/google/guava/wiki/ImmutableCollectionsExplained">
  immutable collections</a>.
 @author Jared Levy
 @author Louis Wasserman
 @since 2.0 (implements <code>NavigableSet</code> since 12.0)
 */
@interface ComGoogleCommonCollectImmutableSortedSet : ComGoogleCommonCollectImmutableSortedSetFauxverideShim < JavaUtilNavigableSet, ComGoogleCommonCollectSortedIterable > {
 @public
  id<JavaUtilComparator> comparator_;
  volatile_id descendingSet_;
}
@property (readonly, class) jint SPLITERATOR_CHARACTERISTICS NS_SWIFT_NAME(SPLITERATOR_CHARACTERISTICS);

+ (jint)SPLITERATOR_CHARACTERISTICS;

#pragma mark Public

/*!
 @since 12.0
 */
- (id)ceilingWithId:(id)e;

/*!
 @brief Returns the comparator that orders the elements, which is <code>Ordering.natural()</code> when the
  natural ordering of the elements is used.Note that its behavior is not consistent with <code>SortedSet.comparator()</code>
 , which returns <code>null</code> to indicate natural ordering.
 */
- (id<JavaUtilComparator>)comparator;

/*!
 @brief Returns an immutable sorted set containing the given elements sorted by their natural ordering.
 When multiple elements are equivalent according to <code>compareTo()</code>, only the first one
  specified is included. To create a copy of a <code>SortedSet</code> that preserves the comparator,
  call <code>copyOfSorted</code> instead. This method iterates over <code>elements</code> at most once. 
 <p>Note that if <code>s</code> is a <code>Set<String></code>, then <code>ImmutableSortedSet.copyOf(s)</code>
  returns an <code>ImmutableSortedSet<String></code> containing each of the strings in <code>s</code>,
  while <code>ImmutableSortedSet.of(s)</code> returns an <code>ImmutableSortedSet<Set<String>></code>
  containing one element (the given set itself). 
 <p><b>Note:</b> Despite what the method name suggests, if <code>elements</code> is an <code>ImmutableSortedSet</code>
 , it may be returned instead of a copy. 
 <p>This method is not type-safe, as it may be called on elements that are not mutually
  comparable. 
 <p>This method is safe to use even when <code>elements</code> is a synchronized or concurrent
  collection that is currently being modified by another thread.
 @throw ClassCastExceptionif the elements are not mutually comparable
 @throw NullPointerExceptionif any of <code>elements</code> is null
 @since 7.0 (source-compatible since 2.0)
 */
+ (ComGoogleCommonCollectImmutableSortedSet *)copyOfWithJavaUtilCollection:(id<JavaUtilCollection>)elements OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns an immutable sorted set containing the given elements sorted by the given <code>Comparator</code>
 .When multiple elements are equivalent according to <code>compareTo()</code>, only the
  first one specified is included.
 <p>Despite the method name, this method attempts to avoid actually copying the data when it is
  safe to do so. The exact circumstances under which a copy will or will not be performed are
  undocumented and subject to change. 
 <p>This method is safe to use even when <code>elements</code> is a synchronized or concurrent
  collection that is currently being modified by another thread.
 @throw NullPointerExceptionif <code>comparator</code> or any of <code>elements</code> is null
 @since 7.0 (source-compatible since 2.0)
 */
+ (ComGoogleCommonCollectImmutableSortedSet *)copyOfWithJavaUtilComparator:(id<JavaUtilComparator>)comparator
                                                    withJavaUtilCollection:(id<JavaUtilCollection>)elements OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns an immutable sorted set containing the given elements sorted by the given <code>Comparator</code>
 .When multiple elements are equivalent according to <code>compare()</code>, only the
  first one specified is included.
 This method iterates over <code>elements</code> at most once. 
 <p>Despite the method name, this method attempts to avoid actually copying the data when it is
  safe to do so. The exact circumstances under which a copy will or will not be performed are
  undocumented and subject to change.
 @throw NullPointerExceptionif <code>comparator</code> or any of <code>elements</code> is null
 */
+ (ComGoogleCommonCollectImmutableSortedSet *)copyOfWithJavaUtilComparator:(id<JavaUtilComparator>)comparator
                                                      withJavaLangIterable:(id<JavaLangIterable>)elements OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns an immutable sorted set containing the given elements sorted by the given <code>Comparator</code>
 .When multiple elements are equivalent according to <code>compareTo()</code>, only the
  first one specified is included.
 @throw NullPointerExceptionif <code>comparator</code> or any of <code>elements</code> is null
 */
+ (ComGoogleCommonCollectImmutableSortedSet *)copyOfWithJavaUtilComparator:(id<JavaUtilComparator>)comparator
                                                      withJavaUtilIterator:(id<JavaUtilIterator>)elements OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns an immutable sorted set containing the given elements sorted by their natural ordering.
 When multiple elements are equivalent according to <code>Comparable.compareTo</code>, only the first
  one specified is included.
 @throw NullPointerExceptionif any of <code>elements</code> is null
 @since 3.0
 */
+ (ComGoogleCommonCollectImmutableSortedSet *)copyOfWithJavaLangComparableArray:(IOSObjectArray *)elements OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns an immutable sorted set containing the given elements sorted by their natural ordering.
 When multiple elements are equivalent according to <code>compareTo()</code>, only the first one
  specified is included. To create a copy of a <code>SortedSet</code> that preserves the comparator,
  call <code>copyOfSorted</code> instead. This method iterates over <code>elements</code> at most once. 
 <p>Note that if <code>s</code> is a <code>Set<String></code>, then <code>ImmutableSortedSet.copyOf(s)</code>
  returns an <code>ImmutableSortedSet<String></code> containing each of the strings in <code>s</code>,
  while <code>ImmutableSortedSet.of(s)</code> returns an <code>ImmutableSortedSet<Set<String>></code>
  containing one element (the given set itself). 
 <p>Despite the method name, this method attempts to avoid actually copying the data when it is
  safe to do so. The exact circumstances under which a copy will or will not be performed are
  undocumented and subject to change. 
 <p>This method is not type-safe, as it may be called on elements that are not mutually
  comparable.
 @throw ClassCastExceptionif the elements are not mutually comparable
 @throw NullPointerExceptionif any of <code>elements</code> is null
 */
+ (ComGoogleCommonCollectImmutableSortedSet *)copyOfWithJavaLangIterable:(id<JavaLangIterable>)elements OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns an immutable sorted set containing the given elements sorted by their natural ordering.
 When multiple elements are equivalent according to <code>compareTo()</code>, only the first one
  specified is included. 
 <p>This method is not type-safe, as it may be called on elements that are not mutually
  comparable.
 @throw ClassCastExceptionif the elements are not mutually comparable
 @throw NullPointerExceptionif any of <code>elements</code> is null
 */
+ (ComGoogleCommonCollectImmutableSortedSet *)copyOfWithJavaUtilIterator:(id<JavaUtilIterator>)elements OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns an immutable sorted set containing the elements of a sorted set, sorted by the same 
 <code>Comparator</code>.That behavior differs from <code>copyOf(Iterable)</code>, which always uses the
  natural ordering of the elements.
 <p>Despite the method name, this method attempts to avoid actually copying the data when it is
  safe to do so. The exact circumstances under which a copy will or will not be performed are
  undocumented and subject to change. 
 <p>This method is safe to use even when <code>sortedSet</code> is a synchronized or concurrent
  collection that is currently being modified by another thread.
 @throw NullPointerExceptionif <code>sortedSet</code> or any of its elements is null
 */
+ (ComGoogleCommonCollectImmutableSortedSet *)copyOfSortedWithJavaUtilSortedSet:(id<JavaUtilSortedSet>)sortedSet OBJC_METHOD_FAMILY_NONE;

/*!
 @since 12.0
 */
- (ComGoogleCommonCollectUnmodifiableIterator *)descendingIterator;

/*!
 @since 12.0
 */
- (ComGoogleCommonCollectImmutableSortedSet *)descendingSet;

- (id)first;

/*!
 @since 12.0
 */
- (id)floorWithId:(id)e;

/*!
 @brief <p>This method returns a serializable <code>ImmutableSortedSet</code>.
 <p>The <code>SortedSet.headSet</code> documentation states that a subset of a subset throws an 
 <code>IllegalArgumentException</code> if passed a <code>toElement</code> greater than an earlier <code>toElement</code>
 . However, this method doesn't throw an exception in that situation, but instead
  keeps the original <code>toElement</code>.
 */
- (ComGoogleCommonCollectImmutableSortedSet *)headSetWithId:(id)toElement;

/*!
 @since 12.0
 */
- (ComGoogleCommonCollectImmutableSortedSet *)headSetWithId:(id)toElement
                                                withBoolean:(jboolean)inclusive;

/*!
 @since 12.0
 */
- (id)higherWithId:(id)e;

- (ComGoogleCommonCollectUnmodifiableIterator *)iterator;

- (id)last;

/*!
 @since 12.0
 */
- (id)lowerWithId:(id)e;

/*!
 @brief Returns a builder that creates immutable sorted sets whose elements are ordered by their
  natural ordering.The sorted sets use <code>Ordering.natural()</code> as the comparator.
 This method
  provides more type-safety than <code>builder</code>, as it can be called only for classes that
  implement <code>Comparable</code>.
 */
+ (ComGoogleCommonCollectImmutableSortedSet_Builder *)naturalOrder;

/*!
 @brief Returns the empty immutable sorted set.
 */
+ (ComGoogleCommonCollectImmutableSortedSet *)of;

/*!
 @brief Returns an immutable sorted set containing a single element.
 */
+ (ComGoogleCommonCollectImmutableSortedSet *)ofWithJavaLangComparable:(id<JavaLangComparable>)element;

/*!
 @brief Returns an immutable sorted set containing the given elements sorted by their natural ordering.
 When multiple elements are equivalent according to <code>Comparable.compareTo</code>, only the first
  one specified is included.
 @throw NullPointerExceptionif any element is null
 */
+ (ComGoogleCommonCollectImmutableSortedSet *)ofWithJavaLangComparable:(id<JavaLangComparable>)e1
                                                withJavaLangComparable:(id<JavaLangComparable>)e2;

/*!
 @brief Returns an immutable sorted set containing the given elements sorted by their natural ordering.
 When multiple elements are equivalent according to <code>Comparable.compareTo</code>, only the first
  one specified is included.
 @throw NullPointerExceptionif any element is null
 */
+ (ComGoogleCommonCollectImmutableSortedSet *)ofWithJavaLangComparable:(id<JavaLangComparable>)e1
                                                withJavaLangComparable:(id<JavaLangComparable>)e2
                                                withJavaLangComparable:(id<JavaLangComparable>)e3;

/*!
 @brief Returns an immutable sorted set containing the given elements sorted by their natural ordering.
 When multiple elements are equivalent according to <code>Comparable.compareTo</code>, only the first
  one specified is included.
 @throw NullPointerExceptionif any element is null
 */
+ (ComGoogleCommonCollectImmutableSortedSet *)ofWithJavaLangComparable:(id<JavaLangComparable>)e1
                                                withJavaLangComparable:(id<JavaLangComparable>)e2
                                                withJavaLangComparable:(id<JavaLangComparable>)e3
                                                withJavaLangComparable:(id<JavaLangComparable>)e4;

/*!
 @brief Returns an immutable sorted set containing the given elements sorted by their natural ordering.
 When multiple elements are equivalent according to <code>Comparable.compareTo</code>, only the first
  one specified is included.
 @throw NullPointerExceptionif any element is null
 */
+ (ComGoogleCommonCollectImmutableSortedSet *)ofWithJavaLangComparable:(id<JavaLangComparable>)e1
                                                withJavaLangComparable:(id<JavaLangComparable>)e2
                                                withJavaLangComparable:(id<JavaLangComparable>)e3
                                                withJavaLangComparable:(id<JavaLangComparable>)e4
                                                withJavaLangComparable:(id<JavaLangComparable>)e5;

/*!
 @brief Returns an immutable sorted set containing the given elements sorted by their natural ordering.
 When multiple elements are equivalent according to <code>Comparable.compareTo</code>, only the first
  one specified is included.
 @throw NullPointerExceptionif any element is null
 @since 3.0 (source-compatible since 2.0)
 */
+ (ComGoogleCommonCollectImmutableSortedSet *)ofWithJavaLangComparable:(id<JavaLangComparable>)e1
                                                withJavaLangComparable:(id<JavaLangComparable>)e2
                                                withJavaLangComparable:(id<JavaLangComparable>)e3
                                                withJavaLangComparable:(id<JavaLangComparable>)e4
                                                withJavaLangComparable:(id<JavaLangComparable>)e5
                                                withJavaLangComparable:(id<JavaLangComparable>)e6
                                           withJavaLangComparableArray:(IOSObjectArray *)remaining;

/*!
 @brief Returns a builder that creates immutable sorted sets with an explicit comparator.If the
  comparator has a more general type than the set being generated, such as creating a <code>SortedSet<Integer></code>
  with a <code>Comparator<Number></code>, use the <code>Builder</code> constructor
  instead.
 @throw NullPointerExceptionif <code>comparator</code> is null
 */
+ (ComGoogleCommonCollectImmutableSortedSet_Builder *)orderedByWithJavaUtilComparator:(id<JavaUtilComparator>)comparator;

/*!
 @brief Guaranteed to throw an exception and leave the set unmodified.
 @since 12.0
 @throw UnsupportedOperationExceptionalways
 */
- (id)pollFirst __attribute__((deprecated));

/*!
 @brief Guaranteed to throw an exception and leave the set unmodified.
 @since 12.0
 @throw UnsupportedOperationExceptionalways
 */
- (id)pollLast __attribute__((deprecated));

/*!
 @brief Returns a builder that creates immutable sorted sets whose elements are ordered by the reverse
  of their natural ordering.
 */
+ (ComGoogleCommonCollectImmutableSortedSet_Builder *)reverseOrder;

- (id<JavaUtilSpliterator>)spliterator;

/*!
 @since 12.0
 */
- (ComGoogleCommonCollectImmutableSortedSet *)subSetWithId:(id)fromElement
                                               withBoolean:(jboolean)fromInclusive
                                                    withId:(id)toElement
                                               withBoolean:(jboolean)toInclusive;

/*!
 @brief <p>This method returns a serializable <code>ImmutableSortedSet</code>.
 <p>The <code>SortedSet.subSet</code> documentation states that a subset of a subset throws an <code>IllegalArgumentException</code>
  if passed a <code>fromElement</code> smaller than an earlier <code>fromElement</code>
 . However, this method doesn't throw an exception in that situation, but instead
  keeps the original <code>fromElement</code>. Similarly, this method keeps the original <code>toElement</code>
 , instead of throwing an exception, if passed a <code>toElement</code> greater than an
  earlier <code>toElement</code>.
 */
- (ComGoogleCommonCollectImmutableSortedSet *)subSetWithId:(id)fromElement
                                                    withId:(id)toElement;

/*!
 @brief <p>This method returns a serializable <code>ImmutableSortedSet</code>.
 <p>The <code>SortedSet.tailSet</code> documentation states that a subset of a subset throws an 
 <code>IllegalArgumentException</code> if passed a <code>fromElement</code> smaller than an earlier <code>fromElement</code>
 . However, this method doesn't throw an exception in that situation, but instead
  keeps the original <code>fromElement</code>.
 */
- (ComGoogleCommonCollectImmutableSortedSet *)tailSetWithId:(id)fromElement;

/*!
 @since 12.0
 */
- (ComGoogleCommonCollectImmutableSortedSet *)tailSetWithId:(id)fromElement
                                                withBoolean:(jboolean)inclusive;

/*!
 @brief Returns a <code>Collector</code> that accumulates the input elements into a new <code>ImmutableSortedSet</code>
 , ordered by the specified comparator.
 <p>If the elements contain duplicates (according to the comparator), only the first duplicate
  in encounter order will appear in the result.
 @since 21.0
 */
+ (id<JavaUtilStreamCollector>)toImmutableSortedSetWithJavaUtilComparator:(id<JavaUtilComparator>)comparator;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilComparator:(id<JavaUtilComparator>)comparator;

/*!
 @brief Constructs an <code>ImmutableSortedSet</code> from the first <code>n</code> elements of <code>contents</code>.
 If <code>k</code> is the size of the returned <code>ImmutableSortedSet</code>, then the sorted unique
  elements are in the first <code>k</code> positions of <code>contents</code>, and <code>contents[i] ==
  null</code>
  for <code>k <= i < n</code>.
  
 <p>If <code>k == contents.length</code>, then <code>contents</code> may no longer be safe for
  modification.
 @throw NullPointerExceptionif any of the first <code>n</code> elements of <code>contents</code> is null
 */
+ (ComGoogleCommonCollectImmutableSortedSet *)constructWithJavaUtilComparator:(id<JavaUtilComparator>)comparator
                                                                      withInt:(jint)n
                                                            withNSObjectArray:(IOSObjectArray *)contents;

- (ComGoogleCommonCollectImmutableSortedSet *)createDescendingSet;

+ (ComGoogleCommonCollectRegularImmutableSortedSet *)emptySetWithJavaUtilComparator:(id<JavaUtilComparator>)comparator;

- (ComGoogleCommonCollectImmutableSortedSet *)headSetImplWithId:(id)toElement
                                                    withBoolean:(jboolean)inclusive;

/*!
 @brief Returns the position of an element within the set, or -1 if not present.
 */
- (jint)indexOfWithId:(id __nullable)target;

- (ComGoogleCommonCollectImmutableSortedSet *)subSetImplWithId:(id)fromElement
                                                   withBoolean:(jboolean)fromInclusive
                                                        withId:(id)toElement
                                                   withBoolean:(jboolean)toInclusive;

- (ComGoogleCommonCollectImmutableSortedSet *)tailSetImplWithId:(id)fromElement
                                                    withBoolean:(jboolean)inclusive;

+ (jint)unsafeCompareWithJavaUtilComparator:(id<JavaUtilComparator>)comparator
                                     withId:(id)a
                                     withId:(id)b;

- (jint)unsafeCompareWithId:(id)a
                     withId:(id)b;

- (id)writeReplace;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initPackagePrivate NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectImmutableSortedSet)

J2OBJC_FIELD_SETTER(ComGoogleCommonCollectImmutableSortedSet, comparator_, id<JavaUtilComparator>)
J2OBJC_VOLATILE_FIELD_SETTER(ComGoogleCommonCollectImmutableSortedSet, descendingSet_, ComGoogleCommonCollectImmutableSortedSet *)

inline jint ComGoogleCommonCollectImmutableSortedSet_get_SPLITERATOR_CHARACTERISTICS(void);
#define ComGoogleCommonCollectImmutableSortedSet_SPLITERATOR_CHARACTERISTICS 1301
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonCollectImmutableSortedSet, SPLITERATOR_CHARACTERISTICS, jint)

FOUNDATION_EXPORT id<JavaUtilStreamCollector> ComGoogleCommonCollectImmutableSortedSet_toImmutableSortedSetWithJavaUtilComparator_(id<JavaUtilComparator> comparator);

FOUNDATION_EXPORT ComGoogleCommonCollectRegularImmutableSortedSet *ComGoogleCommonCollectImmutableSortedSet_emptySetWithJavaUtilComparator_(id<JavaUtilComparator> comparator);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedSet *ComGoogleCommonCollectImmutableSortedSet_of(void);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedSet *ComGoogleCommonCollectImmutableSortedSet_ofWithJavaLangComparable_(id<JavaLangComparable> element);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedSet *ComGoogleCommonCollectImmutableSortedSet_ofWithJavaLangComparable_withJavaLangComparable_(id<JavaLangComparable> e1, id<JavaLangComparable> e2);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedSet *ComGoogleCommonCollectImmutableSortedSet_ofWithJavaLangComparable_withJavaLangComparable_withJavaLangComparable_(id<JavaLangComparable> e1, id<JavaLangComparable> e2, id<JavaLangComparable> e3);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedSet *ComGoogleCommonCollectImmutableSortedSet_ofWithJavaLangComparable_withJavaLangComparable_withJavaLangComparable_withJavaLangComparable_(id<JavaLangComparable> e1, id<JavaLangComparable> e2, id<JavaLangComparable> e3, id<JavaLangComparable> e4);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedSet *ComGoogleCommonCollectImmutableSortedSet_ofWithJavaLangComparable_withJavaLangComparable_withJavaLangComparable_withJavaLangComparable_withJavaLangComparable_(id<JavaLangComparable> e1, id<JavaLangComparable> e2, id<JavaLangComparable> e3, id<JavaLangComparable> e4, id<JavaLangComparable> e5);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedSet *ComGoogleCommonCollectImmutableSortedSet_ofWithJavaLangComparable_withJavaLangComparable_withJavaLangComparable_withJavaLangComparable_withJavaLangComparable_withJavaLangComparable_withJavaLangComparableArray_(id<JavaLangComparable> e1, id<JavaLangComparable> e2, id<JavaLangComparable> e3, id<JavaLangComparable> e4, id<JavaLangComparable> e5, id<JavaLangComparable> e6, IOSObjectArray *remaining);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedSet *ComGoogleCommonCollectImmutableSortedSet_copyOfWithJavaLangComparableArray_(IOSObjectArray *elements);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedSet *ComGoogleCommonCollectImmutableSortedSet_copyOfWithJavaLangIterable_(id<JavaLangIterable> elements);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedSet *ComGoogleCommonCollectImmutableSortedSet_copyOfWithJavaUtilCollection_(id<JavaUtilCollection> elements);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedSet *ComGoogleCommonCollectImmutableSortedSet_copyOfWithJavaUtilIterator_(id<JavaUtilIterator> elements);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedSet *ComGoogleCommonCollectImmutableSortedSet_copyOfWithJavaUtilComparator_withJavaUtilIterator_(id<JavaUtilComparator> comparator, id<JavaUtilIterator> elements);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedSet *ComGoogleCommonCollectImmutableSortedSet_copyOfWithJavaUtilComparator_withJavaLangIterable_(id<JavaUtilComparator> comparator, id<JavaLangIterable> elements);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedSet *ComGoogleCommonCollectImmutableSortedSet_copyOfWithJavaUtilComparator_withJavaUtilCollection_(id<JavaUtilComparator> comparator, id<JavaUtilCollection> elements);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedSet *ComGoogleCommonCollectImmutableSortedSet_copyOfSortedWithJavaUtilSortedSet_(id<JavaUtilSortedSet> sortedSet);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedSet *ComGoogleCommonCollectImmutableSortedSet_constructWithJavaUtilComparator_withInt_withNSObjectArray_(id<JavaUtilComparator> comparator, jint n, IOSObjectArray *contents);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedSet_Builder *ComGoogleCommonCollectImmutableSortedSet_orderedByWithJavaUtilComparator_(id<JavaUtilComparator> comparator);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedSet_Builder *ComGoogleCommonCollectImmutableSortedSet_reverseOrder(void);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedSet_Builder *ComGoogleCommonCollectImmutableSortedSet_naturalOrder(void);

FOUNDATION_EXPORT jint ComGoogleCommonCollectImmutableSortedSet_unsafeCompareWithJavaUtilComparator_withId_withId_(id<JavaUtilComparator> comparator, id a, id b);

FOUNDATION_EXPORT void ComGoogleCommonCollectImmutableSortedSet_initWithJavaUtilComparator_(ComGoogleCommonCollectImmutableSortedSet *self, id<JavaUtilComparator> comparator);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectImmutableSortedSet)

#endif

#if !defined (ComGoogleCommonCollectImmutableSortedSet_Builder_) && (INCLUDE_ALL_ComGoogleCommonCollectImmutableSortedSet || defined(INCLUDE_ComGoogleCommonCollectImmutableSortedSet_Builder))
#define ComGoogleCommonCollectImmutableSortedSet_Builder_

#define RESTRICT_ComGoogleCommonCollectImmutableSet 1
#define INCLUDE_ComGoogleCommonCollectImmutableSet_Builder 1
#include "com/google/common/collect/ImmutableSet.h"

@class ComGoogleCommonCollectImmutableSortedSet;
@class IOSObjectArray;
@protocol JavaLangIterable;
@protocol JavaUtilComparator;
@protocol JavaUtilIterator;

/*!
 @brief A builder for creating immutable sorted set instances, especially <code>public static final</code>
  sets ("constant sets"), with a given comparator.Example:
  
 @code
 public static final ImmutableSortedSet<Number> LUCKY_NUMBERS =
      new ImmutableSortedSet.Builder<Number>(ODDS_FIRST_COMPARATOR)
          .addAll(SINGLE_DIGIT_PRIMES)
          .add(42)
          .build(); 
 
@endcode
  
 <p>Builder instances can be reused; it is safe to call <code>build</code> multiple times to build
  multiple sets in series.
 Each set is a superset of the set created before it.
 @since 2.0
 */
@interface ComGoogleCommonCollectImmutableSortedSet_Builder : ComGoogleCommonCollectImmutableSet_Builder

#pragma mark Public

/*!
 @brief Creates a new builder.The returned builder is equivalent to the builder generated by <code>ImmutableSortedSet.orderedBy</code>
 .
 */
- (instancetype __nonnull)initWithJavaUtilComparator:(id<JavaUtilComparator>)comparator;

/*!
 @brief Adds <code>element</code> to the <code>ImmutableSortedSet</code>.If the <code>ImmutableSortedSet</code>
  already contains <code>element</code>, then <code>add</code> has no effect.
 (only the previously added
  element is retained).
 @param element the element to add
 @return this <code>Builder</code> object
 @throw NullPointerExceptionif <code>element</code> is null
 */
- (ComGoogleCommonCollectImmutableSortedSet_Builder *)addWithId:(id)element;

/*!
 @brief Adds each element of <code>elements</code> to the <code>ImmutableSortedSet</code>, ignoring duplicate
  elements (only the first duplicate element is added).
 @param elements the elements to add
 @return this <code>Builder</code> object
 @throw NullPointerExceptionif <code>elements</code> contains a null element
 */
- (ComGoogleCommonCollectImmutableSortedSet_Builder *)addWithNSObjectArray:(IOSObjectArray *)elements;

/*!
 @brief Adds each element of <code>elements</code> to the <code>ImmutableSortedSet</code>, ignoring duplicate
  elements (only the first duplicate element is added).
 @param elements the elements to add to the <code>ImmutableSortedSet</code>
 @return this <code>Builder</code> object
 @throw NullPointerExceptionif <code>elements</code> contains a null element
 */
- (ComGoogleCommonCollectImmutableSortedSet_Builder *)addAllWithJavaLangIterable:(id<JavaLangIterable>)elements;

/*!
 @brief Adds each element of <code>elements</code> to the <code>ImmutableSortedSet</code>, ignoring duplicate
  elements (only the first duplicate element is added).
 @param elements the elements to add to the <code>ImmutableSortedSet</code>
 @return this <code>Builder</code> object
 @throw NullPointerExceptionif <code>elements</code> contains a null element
 */
- (ComGoogleCommonCollectImmutableSortedSet_Builder *)addAllWithJavaUtilIterator:(id<JavaUtilIterator>)elements;

/*!
 @brief Returns a newly-created <code>ImmutableSortedSet</code> based on the contents of the <code>Builder</code>
  and its comparator.
 */
- (ComGoogleCommonCollectImmutableSortedSet *)build;

#pragma mark Package-Private

- (ComGoogleCommonCollectImmutableSortedSet_Builder *)combineWithComGoogleCommonCollectImmutableSet_Builder:(ComGoogleCommonCollectImmutableSet_Builder *)builder;

- (void)copy__ OBJC_METHOD_FAMILY_NONE;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithBoolean:(jboolean)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithInt:(jint)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectImmutableSortedSet_Builder)

FOUNDATION_EXPORT void ComGoogleCommonCollectImmutableSortedSet_Builder_initWithJavaUtilComparator_(ComGoogleCommonCollectImmutableSortedSet_Builder *self, id<JavaUtilComparator> comparator);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedSet_Builder *new_ComGoogleCommonCollectImmutableSortedSet_Builder_initWithJavaUtilComparator_(id<JavaUtilComparator> comparator) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableSortedSet_Builder *create_ComGoogleCommonCollectImmutableSortedSet_Builder_initWithJavaUtilComparator_(id<JavaUtilComparator> comparator);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectImmutableSortedSet_Builder)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCollectImmutableSortedSet")
