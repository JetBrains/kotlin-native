//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/build_result/java/com/google/common/xml/XmlEscapers.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonXmlXmlEscapers")
#ifdef RESTRICT_ComGoogleCommonXmlXmlEscapers
#define INCLUDE_ALL_ComGoogleCommonXmlXmlEscapers 0
#else
#define INCLUDE_ALL_ComGoogleCommonXmlXmlEscapers 1
#endif
#undef RESTRICT_ComGoogleCommonXmlXmlEscapers

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonXmlXmlEscapers_) && (INCLUDE_ALL_ComGoogleCommonXmlXmlEscapers || defined(INCLUDE_ComGoogleCommonXmlXmlEscapers))
#define ComGoogleCommonXmlXmlEscapers_

@class ComGoogleCommonEscapeEscaper;

/*!
 @brief <code>Escaper</code> instances suitable for strings to be included in XML attribute values and
  elements' text contents.When possible, avoid manual escaping by using templating systems and
  high-level APIs that provide autoescaping.
 For example, consider <a href="http://www.xom.nu/">
 XOM</a> or <a href="http://www.jdom.org/">JDOM</a>.
  
 <p><b>Note:</b> Currently the escapers provided by this class do not escape any characters
  outside the ASCII character range. Unlike HTML escaping the XML escapers will not escape
  non-ASCII characters to their numeric entity replacements. These XML escapers provide the minimal
  level of escaping to ensure that the output can be safely included in a Unicode XML document. 
 <p>For details on the behavior of the escapers in this class, see sections <a href="http://www.w3.org/TR/2008/REC-xml-20081126/#charsets">
 2.2</a> and <a href="http://www.w3.org/TR/2008/REC-xml-20081126/#syntax">
 2.4</a> of the XML specification.
 @author Alex Matevossian
 @author David Beaumont
 @since 15.0
 */
@interface ComGoogleCommonXmlXmlEscapers : NSObject

#pragma mark Public

/*!
 @brief Returns an <code>Escaper</code> instance that escapes special characters in a string so it can
  safely be included in XML document as an attribute value.See section <a href="http://www.w3.org/TR/2008/REC-xml-20081126/#AVNormalize">
 3.3.3</a> of the XML
  specification.
 <p>This escaper substitutes <code>0xFFFD</code> for non-whitespace control characters and the
  character values <code>0xFFFE</code> and <code>0xFFFF</code> which are not permitted in XML. For more
  detail see section <a href="http://www.w3.org/TR/2008/REC-xml-20081126/#charsets">2.2</a> of
  the XML specification. 
 <p>This escaper does not escape non-ASCII characters to their numeric character references
  (NCR). However, horizontal tab <code>'\t'</code>, line feed <code>'\n'</code> and carriage return <code>'\r'</code>
  are escaped to a corresponding NCR <code>"&#x9;"</code>, <code>"&#xA;"</code>, and <code>"&#xD;"</code>
  respectively. Any other non-ASCII characters appearing in the input will be preserved in the
  output. 
 <p>This escaper does not treat surrogate pairs specially and does not perform Unicode
  validation on its input.
 */
+ (ComGoogleCommonEscapeEscaper *)xmlAttributeEscaper;

/*!
 @brief Returns an <code>Escaper</code> instance that escapes special characters in a string so it can
  safely be included in an XML document as element content.See section <a href="http://www.w3.org/TR/2008/REC-xml-20081126/#syntax">
 2.4</a> of the XML specification.
 <p><b>Note:</b> Double and single quotes are not escaped, so it is <b>not safe</b> to use this
  escaper to escape attribute values. Use <code>xmlContentEscaper</code> if the output can appear in
  element content or <code>xmlAttributeEscaper</code> in attribute values. 
 <p>This escaper substitutes <code>0xFFFD</code> for non-whitespace control characters and the
  character values <code>0xFFFE</code> and <code>0xFFFF</code> which are not permitted in XML. For more
  detail see section <a href="http://www.w3.org/TR/2008/REC-xml-20081126/#charsets">2.2</a> of
  the XML specification. 
 <p>This escaper does not escape non-ASCII characters to their numeric character references
  (NCR). Any non-ASCII characters appearing in the input will be preserved in the output.
  Specifically "\r" (carriage return) is preserved in the output, which may result in it being
  silently converted to "\n" when the XML is parsed. 
 <p>This escaper does not treat surrogate pairs specially and does not perform Unicode
  validation on its input.
 */
+ (ComGoogleCommonEscapeEscaper *)xmlContentEscaper;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonXmlXmlEscapers)

FOUNDATION_EXPORT ComGoogleCommonEscapeEscaper *ComGoogleCommonXmlXmlEscapers_xmlContentEscaper(void);

FOUNDATION_EXPORT ComGoogleCommonEscapeEscaper *ComGoogleCommonXmlXmlEscapers_xmlAttributeEscaper(void);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonXmlXmlEscapers)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonXmlXmlEscapers")
