//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/build_result/java/com/google/common/base/Preconditions.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonBasePreconditions")
#ifdef RESTRICT_ComGoogleCommonBasePreconditions
#define INCLUDE_ALL_ComGoogleCommonBasePreconditions 0
#else
#define INCLUDE_ALL_ComGoogleCommonBasePreconditions 1
#endif
#undef RESTRICT_ComGoogleCommonBasePreconditions

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonBasePreconditions_) && (INCLUDE_ALL_ComGoogleCommonBasePreconditions || defined(INCLUDE_ComGoogleCommonBasePreconditions))
#define ComGoogleCommonBasePreconditions_

@class IOSObjectArray;

/*!
 @brief Static convenience methods that help a method or constructor check whether it was invoked
  correctly (that is, whether its <i>preconditions</i> were met).
 <p>If the precondition is not met, the <code>Preconditions</code> method throws an unchecked exception
  of a specified type, which helps the method in which the exception was thrown communicate that
  its caller has made a mistake. This allows constructs such as 
 @code
 public static double sqrt(double value) {
    if (value < 0) {
      throw new IllegalArgumentException("input is negative: " + value);
    }
    // calculate square root
  } 
 
@endcode
  
 <p>to be replaced with the more compact 
 @code
 public static double sqrt(double value) {
    checkArgument(value >= 0, "input is negative: %s", value);
    // calculate square root
  } 
 
@endcode
  
 <p>so that a hypothetical bad caller of this method, such as: 
 @code
  void exampleBadCaller() {
      double d = sqrt(-1.0);
  } 
 
@endcode
  
 <p>would be flagged as having called <code>sqrt()</code> with an illegal argument. 
 <h3>Performance</h3>
  
 <p>Avoid passing message arguments that are expensive to compute; your code will always compute
  them, even though they usually won't be needed. If you have such arguments, use the conventional
  if/throw idiom instead. 
 <p>Depending on your message arguments, memory may be allocated for boxing and varargs array
  creation. However, the methods of this class have a large number of overloads that prevent such
  allocations in many common cases. 
 <p>The message string is not formatted unless the exception will be thrown, so the cost of the
  string formatting itself should not be a concern. 
 <p>As with any performance concerns, you should consider profiling your code (in a production
  environment if possible) before spending a lot of effort on tweaking a particular element. 
 <h3>Other types of preconditions</h3>
  
 <p>Not every type of precondition failure is supported by these methods. Continue to throw
  standard JDK exceptions such as <code>java.util.NoSuchElementException</code> or <code>UnsupportedOperationException</code>
  in the situations they are intended for. 
 <h3>Non-preconditions</h3>
  
 <p>It is of course possible to use the methods of this class to check for invalid conditions
  which are <i>not the caller's fault</i>. Doing so is <b>not recommended</b> because it is
  misleading to future readers of the code and of stack traces. See <a href="https://github.com/google/guava/wiki/ConditionalFailuresExplained">
 Conditional failures
  explained</a> in the Guava User Guide for more advice. Notably, <code>Verify</code> offers assertions
  similar to those in this class for non-precondition checks. 
 <h3><code>java.util.Objects.requireNonNull()</code></h3>
  
 <p>Projects which use <code>com.google.common</code> should generally avoid the use of <code>java.util.Objects.requireNonNull(Object)</code>
 . Instead, use whichever of <code>checkNotNull(Object)</code>
  or <code>Verify.verifyNotNull(Object)</code> is appropriate to the situation.
  (The same goes for the message-accepting overloads.) 
 <h3>Only <code>%s</code> is supported</h3>
  
 <p><code>Preconditions</code> uses <code>Strings.lenientFormat</code> to format error message template
  strings. This only supports the <code>"%s"</code> specifier, not the full range of <code>java.util.Formatter</code>
  specifiers. However, note that if the number of arguments does not match the
  number of occurrences of <code>"%s"</code> in the format string, <code>Preconditions</code> will still
  behave as expected, and will still include all argument values in the error message; the message
  will simply not be formatted exactly as intended. 
 <h3>More information</h3>
  
 <p>See the Guava User Guide on <a href="https://github.com/google/guava/wiki/PreconditionsExplained">
 using <code>Preconditions</code>
 </a>.
 @author Kevin Bourrillion
 @since 2.0
 */
@interface ComGoogleCommonBasePreconditions : NSObject

#pragma mark Public

/*!
 @brief Ensures the truth of an expression involving one or more parameters to the calling method.
 @param expression a boolean expression
 @throw IllegalArgumentExceptionif <code>expression</code> is false
 */
+ (void)checkArgumentWithBoolean:(jboolean)expression;

/*!
 @brief Ensures the truth of an expression involving one or more parameters to the calling method.
 @param expression a boolean expression
 @param errorMessage the exception message to use if the check fails; will be converted to a      string using 
 <code>String.valueOf(Object)</code>
 @throw IllegalArgumentExceptionif <code>expression</code> is false
 */
+ (void)checkArgumentWithBoolean:(jboolean)expression
                          withId:(id __nullable)errorMessage;

/*!
 @brief Ensures the truth of an expression involving one or more parameters to the calling method.
 <p>See <code>checkArgument(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkArgumentWithBoolean:(jboolean)b
                    withNSString:(NSString * __nullable)errorMessageTemplate
                        withChar:(jchar)p1;

/*!
 @brief Ensures the truth of an expression involving one or more parameters to the calling method.
 <p>See <code>checkArgument(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkArgumentWithBoolean:(jboolean)b
                    withNSString:(NSString * __nullable)errorMessageTemplate
                        withChar:(jchar)p1
                        withChar:(jchar)p2;

/*!
 @brief Ensures the truth of an expression involving one or more parameters to the calling method.
 <p>See <code>checkArgument(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkArgumentWithBoolean:(jboolean)b
                    withNSString:(NSString * __nullable)errorMessageTemplate
                        withChar:(jchar)p1
                         withInt:(jint)p2;

/*!
 @brief Ensures the truth of an expression involving one or more parameters to the calling method.
 <p>See <code>checkArgument(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkArgumentWithBoolean:(jboolean)b
                    withNSString:(NSString * __nullable)errorMessageTemplate
                        withChar:(jchar)p1
                        withLong:(jlong)p2;

/*!
 @brief Ensures the truth of an expression involving one or more parameters to the calling method.
 <p>See <code>checkArgument(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkArgumentWithBoolean:(jboolean)b
                    withNSString:(NSString * __nullable)errorMessageTemplate
                        withChar:(jchar)p1
                          withId:(id __nullable)p2;

/*!
 @brief Ensures the truth of an expression involving one or more parameters to the calling method.
 <p>See <code>checkArgument(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkArgumentWithBoolean:(jboolean)b
                    withNSString:(NSString * __nullable)errorMessageTemplate
                         withInt:(jint)p1;

/*!
 @brief Ensures the truth of an expression involving one or more parameters to the calling method.
 <p>See <code>checkArgument(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkArgumentWithBoolean:(jboolean)b
                    withNSString:(NSString * __nullable)errorMessageTemplate
                         withInt:(jint)p1
                        withChar:(jchar)p2;

/*!
 @brief Ensures the truth of an expression involving one or more parameters to the calling method.
 <p>See <code>checkArgument(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkArgumentWithBoolean:(jboolean)b
                    withNSString:(NSString * __nullable)errorMessageTemplate
                         withInt:(jint)p1
                         withInt:(jint)p2;

/*!
 @brief Ensures the truth of an expression involving one or more parameters to the calling method.
 <p>See <code>checkArgument(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkArgumentWithBoolean:(jboolean)b
                    withNSString:(NSString * __nullable)errorMessageTemplate
                         withInt:(jint)p1
                        withLong:(jlong)p2;

/*!
 @brief Ensures the truth of an expression involving one or more parameters to the calling method.
 <p>See <code>checkArgument(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkArgumentWithBoolean:(jboolean)b
                    withNSString:(NSString * __nullable)errorMessageTemplate
                         withInt:(jint)p1
                          withId:(id __nullable)p2;

/*!
 @brief Ensures the truth of an expression involving one or more parameters to the calling method.
 <p>See <code>checkArgument(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkArgumentWithBoolean:(jboolean)b
                    withNSString:(NSString * __nullable)errorMessageTemplate
                        withLong:(jlong)p1;

/*!
 @brief Ensures the truth of an expression involving one or more parameters to the calling method.
 <p>See <code>checkArgument(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkArgumentWithBoolean:(jboolean)b
                    withNSString:(NSString * __nullable)errorMessageTemplate
                        withLong:(jlong)p1
                        withChar:(jchar)p2;

/*!
 @brief Ensures the truth of an expression involving one or more parameters to the calling method.
 <p>See <code>checkArgument(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkArgumentWithBoolean:(jboolean)b
                    withNSString:(NSString * __nullable)errorMessageTemplate
                        withLong:(jlong)p1
                         withInt:(jint)p2;

/*!
 @brief Ensures the truth of an expression involving one or more parameters to the calling method.
 <p>See <code>checkArgument(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkArgumentWithBoolean:(jboolean)b
                    withNSString:(NSString * __nullable)errorMessageTemplate
                        withLong:(jlong)p1
                        withLong:(jlong)p2;

/*!
 @brief Ensures the truth of an expression involving one or more parameters to the calling method.
 <p>See <code>checkArgument(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkArgumentWithBoolean:(jboolean)b
                    withNSString:(NSString * __nullable)errorMessageTemplate
                        withLong:(jlong)p1
                          withId:(id __nullable)p2;

/*!
 @brief Ensures the truth of an expression involving one or more parameters to the calling method.
 @param expression a boolean expression
 @param errorMessageTemplate a template for the exception message should the check fail. The      message is formed by replacing each 
 <code>%s</code>  placeholder in the template with an      argument. These are matched by position - the first 
 <code>%s</code>  gets <code>errorMessageArgs[0]</code>
  , etc. Unmatched arguments will be appended to the formatted message in      square braces. Unmatched placeholders will be left as-is.
 @param errorMessageArgs the arguments to be substituted into the message template. Arguments      are converted to strings using 
 <code>String.valueOf(Object)</code> .
 @throw IllegalArgumentExceptionif <code>expression</code> is false
 */
+ (void)checkArgumentWithBoolean:(jboolean)expression
                    withNSString:(NSString * __nullable)errorMessageTemplate
               withNSObjectArray:(IOSObjectArray * __nonnull)errorMessageArgs;

/*!
 @brief Ensures the truth of an expression involving one or more parameters to the calling method.
 <p>See <code>checkArgument(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkArgumentWithBoolean:(jboolean)b
                    withNSString:(NSString * __nullable)errorMessageTemplate
                          withId:(id __nullable)p1;

/*!
 @brief Ensures the truth of an expression involving one or more parameters to the calling method.
 <p>See <code>checkArgument(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkArgumentWithBoolean:(jboolean)b
                    withNSString:(NSString * __nullable)errorMessageTemplate
                          withId:(id __nullable)p1
                        withChar:(jchar)p2;

/*!
 @brief Ensures the truth of an expression involving one or more parameters to the calling method.
 <p>See <code>checkArgument(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkArgumentWithBoolean:(jboolean)b
                    withNSString:(NSString * __nullable)errorMessageTemplate
                          withId:(id __nullable)p1
                         withInt:(jint)p2;

/*!
 @brief Ensures the truth of an expression involving one or more parameters to the calling method.
 <p>See <code>checkArgument(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkArgumentWithBoolean:(jboolean)b
                    withNSString:(NSString * __nullable)errorMessageTemplate
                          withId:(id __nullable)p1
                        withLong:(jlong)p2;

/*!
 @brief Ensures the truth of an expression involving one or more parameters to the calling method.
 <p>See <code>checkArgument(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkArgumentWithBoolean:(jboolean)b
                    withNSString:(NSString * __nullable)errorMessageTemplate
                          withId:(id __nullable)p1
                          withId:(id __nullable)p2;

/*!
 @brief Ensures the truth of an expression involving one or more parameters to the calling method.
 <p>See <code>checkArgument(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkArgumentWithBoolean:(jboolean)b
                    withNSString:(NSString * __nullable)errorMessageTemplate
                          withId:(id __nullable)p1
                          withId:(id __nullable)p2
                          withId:(id __nullable)p3;

/*!
 @brief Ensures the truth of an expression involving one or more parameters to the calling method.
 <p>See <code>checkArgument(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkArgumentWithBoolean:(jboolean)b
                    withNSString:(NSString * __nullable)errorMessageTemplate
                          withId:(id __nullable)p1
                          withId:(id __nullable)p2
                          withId:(id __nullable)p3
                          withId:(id __nullable)p4;

/*!
 @brief Ensures that <code>index</code> specifies a valid <i>element</i> in an array, list or string of size 
 <code>size</code>.An element index may range from zero, inclusive, to <code>size</code>, exclusive.
 @param index a user-supplied index identifying an element of an array, list or string
 @param size the size of that array, list or string
 @return the value of <code>index</code>
 @throw IndexOutOfBoundsExceptionif <code>index</code> is negative or is not less than <code>size</code>
 @throw IllegalArgumentExceptionif <code>size</code> is negative
 */
+ (jint)checkElementIndexWithInt:(jint)index
                         withInt:(jint)size;

/*!
 @brief Ensures that <code>index</code> specifies a valid <i>element</i> in an array, list or string of size 
 <code>size</code>.An element index may range from zero, inclusive, to <code>size</code>, exclusive.
 @param index a user-supplied index identifying an element of an array, list or string
 @param size the size of that array, list or string
 @param desc the text to use to describe this index in an error message
 @return the value of <code>index</code>
 @throw IndexOutOfBoundsExceptionif <code>index</code> is negative or is not less than <code>size</code>
 @throw IllegalArgumentExceptionif <code>size</code> is negative
 */
+ (jint)checkElementIndexWithInt:(jint)index
                         withInt:(jint)size
                    withNSString:(NSString * __nullable)desc;

/*!
 @brief Ensures that an object reference passed as a parameter to the calling method is not null.
 @param reference an object reference
 @return the non-null reference that was validated
 @throw NullPointerExceptionif <code>reference</code> is null
 - seealso: Verify#verifyNotNullVerify.verifyNotNull()
 */
+ (id)checkNotNullWithId:(id __nonnull)reference;

/*!
 @brief Ensures that an object reference passed as a parameter to the calling method is not null.
 @param reference an object reference
 @param errorMessage the exception message to use if the check fails; will be converted to a      string using 
 <code>String.valueOf(Object)</code>
 @return the non-null reference that was validated
 @throw NullPointerExceptionif <code>reference</code> is null
 - seealso: Verify#verifyNotNullVerify.verifyNotNull()
 */
+ (id)checkNotNullWithId:(id __nonnull)reference
                  withId:(id __nullable)errorMessage;

/*!
 @brief Ensures that an object reference passed as a parameter to the calling method is not null.
 <p>See <code>checkNotNull(Object, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (id)checkNotNullWithId:(id __nonnull)obj
            withNSString:(NSString * __nullable)errorMessageTemplate
                withChar:(jchar)p1;

/*!
 @brief Ensures that an object reference passed as a parameter to the calling method is not null.
 <p>See <code>checkNotNull(Object, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (id)checkNotNullWithId:(id __nonnull)obj
            withNSString:(NSString * __nullable)errorMessageTemplate
                withChar:(jchar)p1
                withChar:(jchar)p2;

/*!
 @brief Ensures that an object reference passed as a parameter to the calling method is not null.
 <p>See <code>checkNotNull(Object, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (id)checkNotNullWithId:(id __nonnull)obj
            withNSString:(NSString * __nullable)errorMessageTemplate
                withChar:(jchar)p1
                 withInt:(jint)p2;

/*!
 @brief Ensures that an object reference passed as a parameter to the calling method is not null.
 <p>See <code>checkNotNull(Object, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (id)checkNotNullWithId:(id __nonnull)obj
            withNSString:(NSString * __nullable)errorMessageTemplate
                withChar:(jchar)p1
                withLong:(jlong)p2;

/*!
 @brief Ensures that an object reference passed as a parameter to the calling method is not null.
 <p>See <code>checkNotNull(Object, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (id)checkNotNullWithId:(id __nonnull)obj
            withNSString:(NSString * __nullable)errorMessageTemplate
                withChar:(jchar)p1
                  withId:(id __nullable)p2;

/*!
 @brief Ensures that an object reference passed as a parameter to the calling method is not null.
 <p>See <code>checkNotNull(Object, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (id)checkNotNullWithId:(id __nonnull)obj
            withNSString:(NSString * __nullable)errorMessageTemplate
                 withInt:(jint)p1;

/*!
 @brief Ensures that an object reference passed as a parameter to the calling method is not null.
 <p>See <code>checkNotNull(Object, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (id)checkNotNullWithId:(id __nonnull)obj
            withNSString:(NSString * __nullable)errorMessageTemplate
                 withInt:(jint)p1
                withChar:(jchar)p2;

/*!
 @brief Ensures that an object reference passed as a parameter to the calling method is not null.
 <p>See <code>checkNotNull(Object, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (id)checkNotNullWithId:(id __nonnull)obj
            withNSString:(NSString * __nullable)errorMessageTemplate
                 withInt:(jint)p1
                 withInt:(jint)p2;

/*!
 @brief Ensures that an object reference passed as a parameter to the calling method is not null.
 <p>See <code>checkNotNull(Object, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (id)checkNotNullWithId:(id __nonnull)obj
            withNSString:(NSString * __nullable)errorMessageTemplate
                 withInt:(jint)p1
                withLong:(jlong)p2;

/*!
 @brief Ensures that an object reference passed as a parameter to the calling method is not null.
 <p>See <code>checkNotNull(Object, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (id)checkNotNullWithId:(id __nonnull)obj
            withNSString:(NSString * __nullable)errorMessageTemplate
                 withInt:(jint)p1
                  withId:(id __nullable)p2;

/*!
 @brief Ensures that an object reference passed as a parameter to the calling method is not null.
 <p>See <code>checkNotNull(Object, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (id)checkNotNullWithId:(id __nonnull)obj
            withNSString:(NSString * __nullable)errorMessageTemplate
                withLong:(jlong)p1;

/*!
 @brief Ensures that an object reference passed as a parameter to the calling method is not null.
 <p>See <code>checkNotNull(Object, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (id)checkNotNullWithId:(id __nonnull)obj
            withNSString:(NSString * __nullable)errorMessageTemplate
                withLong:(jlong)p1
                withChar:(jchar)p2;

/*!
 @brief Ensures that an object reference passed as a parameter to the calling method is not null.
 <p>See <code>checkNotNull(Object, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (id)checkNotNullWithId:(id __nonnull)obj
            withNSString:(NSString * __nullable)errorMessageTemplate
                withLong:(jlong)p1
                 withInt:(jint)p2;

/*!
 @brief Ensures that an object reference passed as a parameter to the calling method is not null.
 <p>See <code>checkNotNull(Object, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (id)checkNotNullWithId:(id __nonnull)obj
            withNSString:(NSString * __nullable)errorMessageTemplate
                withLong:(jlong)p1
                withLong:(jlong)p2;

/*!
 @brief Ensures that an object reference passed as a parameter to the calling method is not null.
 <p>See <code>checkNotNull(Object, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (id)checkNotNullWithId:(id __nonnull)obj
            withNSString:(NSString * __nullable)errorMessageTemplate
                withLong:(jlong)p1
                  withId:(id __nullable)p2;

/*!
 @brief Ensures that an object reference passed as a parameter to the calling method is not null.
 @param reference an object reference
 @param errorMessageTemplate a template for the exception message should the check fail. The      message is formed by replacing each 
 <code>%s</code>  placeholder in the template with an      argument. These are matched by position - the first 
 <code>%s</code>  gets <code>errorMessageArgs[0]</code>
  , etc. Unmatched arguments will be appended to the formatted message in      square braces. Unmatched placeholders will be left as-is.
 @param errorMessageArgs the arguments to be substituted into the message template. Arguments      are converted to strings using 
 <code>String.valueOf(Object)</code> .
 @return the non-null reference that was validated
 @throw NullPointerExceptionif <code>reference</code> is null
 - seealso: Verify#verifyNotNullVerify.verifyNotNull()
 */
+ (id)checkNotNullWithId:(id __nonnull)reference
            withNSString:(NSString * __nullable)errorMessageTemplate
       withNSObjectArray:(IOSObjectArray * __nonnull)errorMessageArgs;

/*!
 @brief Ensures that an object reference passed as a parameter to the calling method is not null.
 <p>See <code>checkNotNull(Object, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (id)checkNotNullWithId:(id __nonnull)obj
            withNSString:(NSString * __nullable)errorMessageTemplate
                  withId:(id __nullable)p1;

/*!
 @brief Ensures that an object reference passed as a parameter to the calling method is not null.
 <p>See <code>checkNotNull(Object, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (id)checkNotNullWithId:(id __nonnull)obj
            withNSString:(NSString * __nullable)errorMessageTemplate
                  withId:(id __nullable)p1
                withChar:(jchar)p2;

/*!
 @brief Ensures that an object reference passed as a parameter to the calling method is not null.
 <p>See <code>checkNotNull(Object, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (id)checkNotNullWithId:(id __nonnull)obj
            withNSString:(NSString * __nullable)errorMessageTemplate
                  withId:(id __nullable)p1
                 withInt:(jint)p2;

/*!
 @brief Ensures that an object reference passed as a parameter to the calling method is not null.
 <p>See <code>checkNotNull(Object, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (id)checkNotNullWithId:(id __nonnull)obj
            withNSString:(NSString * __nullable)errorMessageTemplate
                  withId:(id __nullable)p1
                withLong:(jlong)p2;

/*!
 @brief Ensures that an object reference passed as a parameter to the calling method is not null.
 <p>See <code>checkNotNull(Object, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (id)checkNotNullWithId:(id __nonnull)obj
            withNSString:(NSString * __nullable)errorMessageTemplate
                  withId:(id __nullable)p1
                  withId:(id __nullable)p2;

/*!
 @brief Ensures that an object reference passed as a parameter to the calling method is not null.
 <p>See <code>checkNotNull(Object, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (id)checkNotNullWithId:(id __nonnull)obj
            withNSString:(NSString * __nullable)errorMessageTemplate
                  withId:(id __nullable)p1
                  withId:(id __nullable)p2
                  withId:(id __nullable)p3;

/*!
 @brief Ensures that an object reference passed as a parameter to the calling method is not null.
 <p>See <code>checkNotNull(Object, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (id)checkNotNullWithId:(id __nonnull)obj
            withNSString:(NSString * __nullable)errorMessageTemplate
                  withId:(id __nullable)p1
                  withId:(id __nullable)p2
                  withId:(id __nullable)p3
                  withId:(id __nullable)p4;

/*!
 @brief Ensures that <code>index</code> specifies a valid <i>position</i> in an array, list or string of
  size <code>size</code>.A position index may range from zero to <code>size</code>, inclusive.
 @param index a user-supplied index identifying a position in an array, list or string
 @param size the size of that array, list or string
 @return the value of <code>index</code>
 @throw IndexOutOfBoundsExceptionif <code>index</code> is negative or is greater than <code>size</code>
 @throw IllegalArgumentExceptionif <code>size</code> is negative
 */
+ (jint)checkPositionIndexWithInt:(jint)index
                          withInt:(jint)size;

/*!
 @brief Ensures that <code>index</code> specifies a valid <i>position</i> in an array, list or string of
  size <code>size</code>.A position index may range from zero to <code>size</code>, inclusive.
 @param index a user-supplied index identifying a position in an array, list or string
 @param size the size of that array, list or string
 @param desc the text to use to describe this index in an error message
 @return the value of <code>index</code>
 @throw IndexOutOfBoundsExceptionif <code>index</code> is negative or is greater than <code>size</code>
 @throw IllegalArgumentExceptionif <code>size</code> is negative
 */
+ (jint)checkPositionIndexWithInt:(jint)index
                          withInt:(jint)size
                     withNSString:(NSString * __nullable)desc;

/*!
 @brief Ensures that <code>start</code> and <code>end</code> specify a valid <i>positions</i> in an array, list
  or string of size <code>size</code>, and are in order.A position index may range from zero to 
 <code>size</code>, inclusive.
 @param start a user-supplied index identifying a starting position in an array, list or string
 @param end a user-supplied index identifying a ending position in an array, list or string
 @param size the size of that array, list or string
 @throw IndexOutOfBoundsExceptionif either index is negative or is greater than <code>size</code>,
      or if <code>end</code> is less than <code>start</code>
 @throw IllegalArgumentExceptionif <code>size</code> is negative
 */
+ (void)checkPositionIndexesWithInt:(jint)start
                            withInt:(jint)end
                            withInt:(jint)size;

/*!
 @brief Ensures the truth of an expression involving the state of the calling instance, but not
  involving any parameters to the calling method.
 @param expression a boolean expression
 @throw IllegalStateExceptionif <code>expression</code> is false
 - seealso: Verify#verifyVerify.verify()
 */
+ (void)checkStateWithBoolean:(jboolean)expression;

/*!
 @brief Ensures the truth of an expression involving the state of the calling instance, but not
  involving any parameters to the calling method.
 @param expression a boolean expression
 @param errorMessage the exception message to use if the check fails; will be converted to a      string using 
 <code>String.valueOf(Object)</code>
 @throw IllegalStateExceptionif <code>expression</code> is false
 - seealso: Verify#verifyVerify.verify()
 */
+ (void)checkStateWithBoolean:(jboolean)expression
                       withId:(id __nullable)errorMessage;

/*!
 @brief Ensures the truth of an expression involving the state of the calling instance, but not
  involving any parameters to the calling method.
 <p>See <code>checkState(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkStateWithBoolean:(jboolean)b
                 withNSString:(NSString * __nullable)errorMessageTemplate
                     withChar:(jchar)p1;

/*!
 @brief Ensures the truth of an expression involving the state of the calling instance, but not
  involving any parameters to the calling method.
 <p>See <code>checkState(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkStateWithBoolean:(jboolean)b
                 withNSString:(NSString * __nullable)errorMessageTemplate
                     withChar:(jchar)p1
                     withChar:(jchar)p2;

/*!
 @brief Ensures the truth of an expression involving the state of the calling instance, but not
  involving any parameters to the calling method.
 <p>See <code>checkState(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkStateWithBoolean:(jboolean)b
                 withNSString:(NSString * __nullable)errorMessageTemplate
                     withChar:(jchar)p1
                      withInt:(jint)p2;

/*!
 @brief Ensures the truth of an expression involving the state of the calling instance, but not
  involving any parameters to the calling method.
 <p>See <code>checkState(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkStateWithBoolean:(jboolean)b
                 withNSString:(NSString * __nullable)errorMessageTemplate
                     withChar:(jchar)p1
                     withLong:(jlong)p2;

/*!
 @brief Ensures the truth of an expression involving the state of the calling instance, but not
  involving any parameters to the calling method.
 <p>See <code>checkState(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkStateWithBoolean:(jboolean)b
                 withNSString:(NSString * __nullable)errorMessageTemplate
                     withChar:(jchar)p1
                       withId:(id __nullable)p2;

/*!
 @brief Ensures the truth of an expression involving the state of the calling instance, but not
  involving any parameters to the calling method.
 <p>See <code>checkState(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkStateWithBoolean:(jboolean)b
                 withNSString:(NSString * __nullable)errorMessageTemplate
                      withInt:(jint)p1;

/*!
 @brief Ensures the truth of an expression involving the state of the calling instance, but not
  involving any parameters to the calling method.
 <p>See <code>checkState(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkStateWithBoolean:(jboolean)b
                 withNSString:(NSString * __nullable)errorMessageTemplate
                      withInt:(jint)p1
                     withChar:(jchar)p2;

/*!
 @brief Ensures the truth of an expression involving the state of the calling instance, but not
  involving any parameters to the calling method.
 <p>See <code>checkState(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkStateWithBoolean:(jboolean)b
                 withNSString:(NSString * __nullable)errorMessageTemplate
                      withInt:(jint)p1
                      withInt:(jint)p2;

/*!
 @brief Ensures the truth of an expression involving the state of the calling instance, but not
  involving any parameters to the calling method.
 <p>See <code>checkState(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkStateWithBoolean:(jboolean)b
                 withNSString:(NSString * __nullable)errorMessageTemplate
                      withInt:(jint)p1
                     withLong:(jlong)p2;

/*!
 @brief Ensures the truth of an expression involving the state of the calling instance, but not
  involving any parameters to the calling method.
 <p>See <code>checkState(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkStateWithBoolean:(jboolean)b
                 withNSString:(NSString * __nullable)errorMessageTemplate
                      withInt:(jint)p1
                       withId:(id __nullable)p2;

/*!
 @brief Ensures the truth of an expression involving the state of the calling instance, but not
  involving any parameters to the calling method.
 <p>See <code>checkState(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkStateWithBoolean:(jboolean)b
                 withNSString:(NSString * __nullable)errorMessageTemplate
                     withLong:(jlong)p1;

/*!
 @brief Ensures the truth of an expression involving the state of the calling instance, but not
  involving any parameters to the calling method.
 <p>See <code>checkState(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkStateWithBoolean:(jboolean)b
                 withNSString:(NSString * __nullable)errorMessageTemplate
                     withLong:(jlong)p1
                     withChar:(jchar)p2;

/*!
 @brief Ensures the truth of an expression involving the state of the calling instance, but not
  involving any parameters to the calling method.
 <p>See <code>checkState(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkStateWithBoolean:(jboolean)b
                 withNSString:(NSString * __nullable)errorMessageTemplate
                     withLong:(jlong)p1
                      withInt:(jint)p2;

/*!
 @brief Ensures the truth of an expression involving the state of the calling instance, but not
  involving any parameters to the calling method.
 <p>See <code>checkState(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkStateWithBoolean:(jboolean)b
                 withNSString:(NSString * __nullable)errorMessageTemplate
                     withLong:(jlong)p1
                     withLong:(jlong)p2;

/*!
 @brief Ensures the truth of an expression involving the state of the calling instance, but not
  involving any parameters to the calling method.
 <p>See <code>checkState(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkStateWithBoolean:(jboolean)b
                 withNSString:(NSString * __nullable)errorMessageTemplate
                     withLong:(jlong)p1
                       withId:(id __nullable)p2;

/*!
 @brief Ensures the truth of an expression involving the state of the calling instance, but not
  involving any parameters to the calling method.
 @param expression a boolean expression
 @param errorMessageTemplate a template for the exception message should the check fail. The      message is formed by replacing each 
 <code>%s</code>  placeholder in the template with an      argument. These are matched by position - the first 
 <code>%s</code>  gets <code>errorMessageArgs[0]</code>
  , etc. Unmatched arguments will be appended to the formatted message in      square braces. Unmatched placeholders will be left as-is.
 @param errorMessageArgs the arguments to be substituted into the message template. Arguments      are converted to strings using 
 <code>String.valueOf(Object)</code> .
 @throw IllegalStateExceptionif <code>expression</code> is false
 - seealso: Verify#verifyVerify.verify()
 */
+ (void)checkStateWithBoolean:(jboolean)expression
                 withNSString:(NSString * __nullable)errorMessageTemplate
            withNSObjectArray:(IOSObjectArray * __nonnull)errorMessageArgs;

/*!
 @brief Ensures the truth of an expression involving the state of the calling instance, but not
  involving any parameters to the calling method.
 <p>See <code>checkState(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkStateWithBoolean:(jboolean)b
                 withNSString:(NSString * __nullable)errorMessageTemplate
                       withId:(id __nullable)p1;

/*!
 @brief Ensures the truth of an expression involving the state of the calling instance, but not
  involving any parameters to the calling method.
 <p>See <code>checkState(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkStateWithBoolean:(jboolean)b
                 withNSString:(NSString * __nullable)errorMessageTemplate
                       withId:(id __nullable)p1
                     withChar:(jchar)p2;

/*!
 @brief Ensures the truth of an expression involving the state of the calling instance, but not
  involving any parameters to the calling method.
 <p>See <code>checkState(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkStateWithBoolean:(jboolean)b
                 withNSString:(NSString * __nullable)errorMessageTemplate
                       withId:(id __nullable)p1
                      withInt:(jint)p2;

/*!
 @brief Ensures the truth of an expression involving the state of the calling instance, but not
  involving any parameters to the calling method.
 <p>See <code>checkState(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkStateWithBoolean:(jboolean)b
                 withNSString:(NSString * __nullable)errorMessageTemplate
                       withId:(id __nullable)p1
                     withLong:(jlong)p2;

/*!
 @brief Ensures the truth of an expression involving the state of the calling instance, but not
  involving any parameters to the calling method.
 <p>See <code>checkState(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkStateWithBoolean:(jboolean)b
                 withNSString:(NSString * __nullable)errorMessageTemplate
                       withId:(id __nullable)p1
                       withId:(id __nullable)p2;

/*!
 @brief Ensures the truth of an expression involving the state of the calling instance, but not
  involving any parameters to the calling method.
 <p>See <code>checkState(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkStateWithBoolean:(jboolean)b
                 withNSString:(NSString * __nullable)errorMessageTemplate
                       withId:(id __nullable)p1
                       withId:(id __nullable)p2
                       withId:(id __nullable)p3;

/*!
 @brief Ensures the truth of an expression involving the state of the calling instance, but not
  involving any parameters to the calling method.
 <p>See <code>checkState(boolean, String, Object...)</code> for details.
 @since 20.0 (varargs overload since 2.0)
 */
+ (void)checkStateWithBoolean:(jboolean)b
                 withNSString:(NSString * __nullable)errorMessageTemplate
                       withId:(id __nullable)p1
                       withId:(id __nullable)p2
                       withId:(id __nullable)p3
                       withId:(id __nullable)p4;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBasePreconditions)

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_(jboolean expression);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withId_(jboolean expression, id errorMessage);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withNSObjectArray_(jboolean expression, NSString *errorMessageTemplate, IOSObjectArray *errorMessageArgs);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withChar_(jboolean b, NSString *errorMessageTemplate, jchar p1);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withInt_(jboolean b, NSString *errorMessageTemplate, jint p1);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withLong_(jboolean b, NSString *errorMessageTemplate, jlong p1);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_(jboolean b, NSString *errorMessageTemplate, id p1);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withChar_withChar_(jboolean b, NSString *errorMessageTemplate, jchar p1, jchar p2);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withChar_withInt_(jboolean b, NSString *errorMessageTemplate, jchar p1, jint p2);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withChar_withLong_(jboolean b, NSString *errorMessageTemplate, jchar p1, jlong p2);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withChar_withId_(jboolean b, NSString *errorMessageTemplate, jchar p1, id p2);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withInt_withChar_(jboolean b, NSString *errorMessageTemplate, jint p1, jchar p2);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withInt_withInt_(jboolean b, NSString *errorMessageTemplate, jint p1, jint p2);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withInt_withLong_(jboolean b, NSString *errorMessageTemplate, jint p1, jlong p2);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withInt_withId_(jboolean b, NSString *errorMessageTemplate, jint p1, id p2);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withLong_withChar_(jboolean b, NSString *errorMessageTemplate, jlong p1, jchar p2);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withLong_withInt_(jboolean b, NSString *errorMessageTemplate, jlong p1, jint p2);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withLong_withLong_(jboolean b, NSString *errorMessageTemplate, jlong p1, jlong p2);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withLong_withId_(jboolean b, NSString *errorMessageTemplate, jlong p1, id p2);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_withChar_(jboolean b, NSString *errorMessageTemplate, id p1, jchar p2);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_withInt_(jboolean b, NSString *errorMessageTemplate, id p1, jint p2);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_withLong_(jboolean b, NSString *errorMessageTemplate, id p1, jlong p2);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_withId_(jboolean b, NSString *errorMessageTemplate, id p1, id p2);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_withId_withId_(jboolean b, NSString *errorMessageTemplate, id p1, id p2, id p3);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_withId_withId_withId_(jboolean b, NSString *errorMessageTemplate, id p1, id p2, id p3, id p4);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkStateWithBoolean_(jboolean expression);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkStateWithBoolean_withId_(jboolean expression, id errorMessage);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkStateWithBoolean_withNSString_withNSObjectArray_(jboolean expression, NSString *errorMessageTemplate, IOSObjectArray *errorMessageArgs);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkStateWithBoolean_withNSString_withChar_(jboolean b, NSString *errorMessageTemplate, jchar p1);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkStateWithBoolean_withNSString_withInt_(jboolean b, NSString *errorMessageTemplate, jint p1);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkStateWithBoolean_withNSString_withLong_(jboolean b, NSString *errorMessageTemplate, jlong p1);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkStateWithBoolean_withNSString_withId_(jboolean b, NSString *errorMessageTemplate, id p1);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkStateWithBoolean_withNSString_withChar_withChar_(jboolean b, NSString *errorMessageTemplate, jchar p1, jchar p2);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkStateWithBoolean_withNSString_withChar_withInt_(jboolean b, NSString *errorMessageTemplate, jchar p1, jint p2);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkStateWithBoolean_withNSString_withChar_withLong_(jboolean b, NSString *errorMessageTemplate, jchar p1, jlong p2);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkStateWithBoolean_withNSString_withChar_withId_(jboolean b, NSString *errorMessageTemplate, jchar p1, id p2);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkStateWithBoolean_withNSString_withInt_withChar_(jboolean b, NSString *errorMessageTemplate, jint p1, jchar p2);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkStateWithBoolean_withNSString_withInt_withInt_(jboolean b, NSString *errorMessageTemplate, jint p1, jint p2);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkStateWithBoolean_withNSString_withInt_withLong_(jboolean b, NSString *errorMessageTemplate, jint p1, jlong p2);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkStateWithBoolean_withNSString_withInt_withId_(jboolean b, NSString *errorMessageTemplate, jint p1, id p2);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkStateWithBoolean_withNSString_withLong_withChar_(jboolean b, NSString *errorMessageTemplate, jlong p1, jchar p2);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkStateWithBoolean_withNSString_withLong_withInt_(jboolean b, NSString *errorMessageTemplate, jlong p1, jint p2);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkStateWithBoolean_withNSString_withLong_withLong_(jboolean b, NSString *errorMessageTemplate, jlong p1, jlong p2);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkStateWithBoolean_withNSString_withLong_withId_(jboolean b, NSString *errorMessageTemplate, jlong p1, id p2);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkStateWithBoolean_withNSString_withId_withChar_(jboolean b, NSString *errorMessageTemplate, id p1, jchar p2);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkStateWithBoolean_withNSString_withId_withInt_(jboolean b, NSString *errorMessageTemplate, id p1, jint p2);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkStateWithBoolean_withNSString_withId_withLong_(jboolean b, NSString *errorMessageTemplate, id p1, jlong p2);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkStateWithBoolean_withNSString_withId_withId_(jboolean b, NSString *errorMessageTemplate, id p1, id p2);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkStateWithBoolean_withNSString_withId_withId_withId_(jboolean b, NSString *errorMessageTemplate, id p1, id p2, id p3);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkStateWithBoolean_withNSString_withId_withId_withId_withId_(jboolean b, NSString *errorMessageTemplate, id p1, id p2, id p3, id p4);

FOUNDATION_EXPORT id ComGoogleCommonBasePreconditions_checkNotNullWithId_(id reference);

FOUNDATION_EXPORT id ComGoogleCommonBasePreconditions_checkNotNullWithId_withId_(id reference, id errorMessage);

FOUNDATION_EXPORT id ComGoogleCommonBasePreconditions_checkNotNullWithId_withNSString_withNSObjectArray_(id reference, NSString *errorMessageTemplate, IOSObjectArray *errorMessageArgs);

FOUNDATION_EXPORT id ComGoogleCommonBasePreconditions_checkNotNullWithId_withNSString_withChar_(id obj, NSString *errorMessageTemplate, jchar p1);

FOUNDATION_EXPORT id ComGoogleCommonBasePreconditions_checkNotNullWithId_withNSString_withInt_(id obj, NSString *errorMessageTemplate, jint p1);

FOUNDATION_EXPORT id ComGoogleCommonBasePreconditions_checkNotNullWithId_withNSString_withLong_(id obj, NSString *errorMessageTemplate, jlong p1);

FOUNDATION_EXPORT id ComGoogleCommonBasePreconditions_checkNotNullWithId_withNSString_withId_(id obj, NSString *errorMessageTemplate, id p1);

FOUNDATION_EXPORT id ComGoogleCommonBasePreconditions_checkNotNullWithId_withNSString_withChar_withChar_(id obj, NSString *errorMessageTemplate, jchar p1, jchar p2);

FOUNDATION_EXPORT id ComGoogleCommonBasePreconditions_checkNotNullWithId_withNSString_withChar_withInt_(id obj, NSString *errorMessageTemplate, jchar p1, jint p2);

FOUNDATION_EXPORT id ComGoogleCommonBasePreconditions_checkNotNullWithId_withNSString_withChar_withLong_(id obj, NSString *errorMessageTemplate, jchar p1, jlong p2);

FOUNDATION_EXPORT id ComGoogleCommonBasePreconditions_checkNotNullWithId_withNSString_withChar_withId_(id obj, NSString *errorMessageTemplate, jchar p1, id p2);

FOUNDATION_EXPORT id ComGoogleCommonBasePreconditions_checkNotNullWithId_withNSString_withInt_withChar_(id obj, NSString *errorMessageTemplate, jint p1, jchar p2);

FOUNDATION_EXPORT id ComGoogleCommonBasePreconditions_checkNotNullWithId_withNSString_withInt_withInt_(id obj, NSString *errorMessageTemplate, jint p1, jint p2);

FOUNDATION_EXPORT id ComGoogleCommonBasePreconditions_checkNotNullWithId_withNSString_withInt_withLong_(id obj, NSString *errorMessageTemplate, jint p1, jlong p2);

FOUNDATION_EXPORT id ComGoogleCommonBasePreconditions_checkNotNullWithId_withNSString_withInt_withId_(id obj, NSString *errorMessageTemplate, jint p1, id p2);

FOUNDATION_EXPORT id ComGoogleCommonBasePreconditions_checkNotNullWithId_withNSString_withLong_withChar_(id obj, NSString *errorMessageTemplate, jlong p1, jchar p2);

FOUNDATION_EXPORT id ComGoogleCommonBasePreconditions_checkNotNullWithId_withNSString_withLong_withInt_(id obj, NSString *errorMessageTemplate, jlong p1, jint p2);

FOUNDATION_EXPORT id ComGoogleCommonBasePreconditions_checkNotNullWithId_withNSString_withLong_withLong_(id obj, NSString *errorMessageTemplate, jlong p1, jlong p2);

FOUNDATION_EXPORT id ComGoogleCommonBasePreconditions_checkNotNullWithId_withNSString_withLong_withId_(id obj, NSString *errorMessageTemplate, jlong p1, id p2);

FOUNDATION_EXPORT id ComGoogleCommonBasePreconditions_checkNotNullWithId_withNSString_withId_withChar_(id obj, NSString *errorMessageTemplate, id p1, jchar p2);

FOUNDATION_EXPORT id ComGoogleCommonBasePreconditions_checkNotNullWithId_withNSString_withId_withInt_(id obj, NSString *errorMessageTemplate, id p1, jint p2);

FOUNDATION_EXPORT id ComGoogleCommonBasePreconditions_checkNotNullWithId_withNSString_withId_withLong_(id obj, NSString *errorMessageTemplate, id p1, jlong p2);

FOUNDATION_EXPORT id ComGoogleCommonBasePreconditions_checkNotNullWithId_withNSString_withId_withId_(id obj, NSString *errorMessageTemplate, id p1, id p2);

FOUNDATION_EXPORT id ComGoogleCommonBasePreconditions_checkNotNullWithId_withNSString_withId_withId_withId_(id obj, NSString *errorMessageTemplate, id p1, id p2, id p3);

FOUNDATION_EXPORT id ComGoogleCommonBasePreconditions_checkNotNullWithId_withNSString_withId_withId_withId_withId_(id obj, NSString *errorMessageTemplate, id p1, id p2, id p3, id p4);

FOUNDATION_EXPORT jint ComGoogleCommonBasePreconditions_checkElementIndexWithInt_withInt_(jint index, jint size);

FOUNDATION_EXPORT jint ComGoogleCommonBasePreconditions_checkElementIndexWithInt_withInt_withNSString_(jint index, jint size, NSString *desc);

FOUNDATION_EXPORT jint ComGoogleCommonBasePreconditions_checkPositionIndexWithInt_withInt_(jint index, jint size);

FOUNDATION_EXPORT jint ComGoogleCommonBasePreconditions_checkPositionIndexWithInt_withInt_withNSString_(jint index, jint size, NSString *desc);

FOUNDATION_EXPORT void ComGoogleCommonBasePreconditions_checkPositionIndexesWithInt_withInt_withInt_(jint start, jint end, jint size);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBasePreconditions)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonBasePreconditions")
