//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/build_result/java/com/google/common/hash/Murmur3_128HashFunction.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonHashMurmur3_128HashFunction")
#ifdef RESTRICT_ComGoogleCommonHashMurmur3_128HashFunction
#define INCLUDE_ALL_ComGoogleCommonHashMurmur3_128HashFunction 0
#else
#define INCLUDE_ALL_ComGoogleCommonHashMurmur3_128HashFunction 1
#endif
#undef RESTRICT_ComGoogleCommonHashMurmur3_128HashFunction

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonHashMurmur3_128HashFunction_) && (INCLUDE_ALL_ComGoogleCommonHashMurmur3_128HashFunction || defined(INCLUDE_ComGoogleCommonHashMurmur3_128HashFunction))
#define ComGoogleCommonHashMurmur3_128HashFunction_

#define RESTRICT_ComGoogleCommonHashAbstractHashFunction 1
#define INCLUDE_ComGoogleCommonHashAbstractHashFunction 1
#include "com/google/common/hash/AbstractHashFunction.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@protocol ComGoogleCommonHashHashFunction;
@protocol ComGoogleCommonHashHasher;

/*!
 @brief See MurmurHash3_x64_128 in <a href="http://smhasher.googlecode.com/svn/trunk/MurmurHash3.cpp">the
  C++ implementation</a>.
 @author Austin Appleby
 @author Dimitris Andreou
 */
@interface ComGoogleCommonHashMurmur3_128HashFunction : ComGoogleCommonHashAbstractHashFunction < JavaIoSerializable >
@property (readonly, class, strong) id<ComGoogleCommonHashHashFunction> MURMUR3_128 NS_SWIFT_NAME(MURMUR3_128);
@property (readonly, class, strong) id<ComGoogleCommonHashHashFunction> GOOD_FAST_HASH_128 NS_SWIFT_NAME(GOOD_FAST_HASH_128);

+ (id<ComGoogleCommonHashHashFunction>)MURMUR3_128;

+ (id<ComGoogleCommonHashHashFunction>)GOOD_FAST_HASH_128;

#pragma mark Public

- (jint)bits;

- (jboolean)isEqual:(id __nullable)object;

- (NSUInteger)hash;

- (id<ComGoogleCommonHashHasher>)newHasher OBJC_METHOD_FAMILY_NONE;

- (NSString *)description;

#pragma mark Package-Private

- (instancetype __nonnull)initPackagePrivateWithInt:(jint)seed;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initPackagePrivate NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonHashMurmur3_128HashFunction)

inline id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashMurmur3_128HashFunction_get_MURMUR3_128(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashMurmur3_128HashFunction_MURMUR3_128;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonHashMurmur3_128HashFunction, MURMUR3_128, id<ComGoogleCommonHashHashFunction>)

inline id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashMurmur3_128HashFunction_get_GOOD_FAST_HASH_128(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashMurmur3_128HashFunction_GOOD_FAST_HASH_128;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonHashMurmur3_128HashFunction, GOOD_FAST_HASH_128, id<ComGoogleCommonHashHashFunction>)

FOUNDATION_EXPORT void ComGoogleCommonHashMurmur3_128HashFunction_initPackagePrivateWithInt_(ComGoogleCommonHashMurmur3_128HashFunction *self, jint seed);

FOUNDATION_EXPORT ComGoogleCommonHashMurmur3_128HashFunction *new_ComGoogleCommonHashMurmur3_128HashFunction_initPackagePrivateWithInt_(jint seed) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonHashMurmur3_128HashFunction *create_ComGoogleCommonHashMurmur3_128HashFunction_initPackagePrivateWithInt_(jint seed);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonHashMurmur3_128HashFunction)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonHashMurmur3_128HashFunction")
