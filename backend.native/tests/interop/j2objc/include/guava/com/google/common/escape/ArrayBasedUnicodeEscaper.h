//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/build_result/java/com/google/common/escape/ArrayBasedUnicodeEscaper.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonEscapeArrayBasedUnicodeEscaper")
#ifdef RESTRICT_ComGoogleCommonEscapeArrayBasedUnicodeEscaper
#define INCLUDE_ALL_ComGoogleCommonEscapeArrayBasedUnicodeEscaper 0
#else
#define INCLUDE_ALL_ComGoogleCommonEscapeArrayBasedUnicodeEscaper 1
#endif
#undef RESTRICT_ComGoogleCommonEscapeArrayBasedUnicodeEscaper

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonEscapeArrayBasedUnicodeEscaper_) && (INCLUDE_ALL_ComGoogleCommonEscapeArrayBasedUnicodeEscaper || defined(INCLUDE_ComGoogleCommonEscapeArrayBasedUnicodeEscaper))
#define ComGoogleCommonEscapeArrayBasedUnicodeEscaper_

#define RESTRICT_ComGoogleCommonEscapeUnicodeEscaper 1
#define INCLUDE_ComGoogleCommonEscapeUnicodeEscaper 1
#include "com/google/common/escape/UnicodeEscaper.h"

@class ComGoogleCommonEscapeArrayBasedEscaperMap;
@class IOSCharArray;
@protocol JavaLangCharSequence;
@protocol JavaUtilMap;

/*!
 @brief A <code>UnicodeEscaper</code> that uses an array to quickly look up replacement characters for a given
  code point.An additional safe range is provided that determines whether code points without
  specific replacements are to be considered safe and left unescaped or should be escaped in a
  general way.
 <p>A good example of usage of this class is for HTML escaping where the replacement array
  contains information about the named HTML entities such as <code>&amp;</code> and <code>&quot;</code> while 
 <code>escapeUnsafe</code> is overridden to handle general escaping of the form <code>&#NNNNN;</code>.
  
 <p>The size of the data structure used by <code>ArrayBasedUnicodeEscaper</code> is proportional to the
  highest valued code point that requires escaping. For example a replacement map containing the
  single character '<code>\</code><code>u1000</code>' will require approximately 16K of memory. If you need
  to create multiple escaper instances that have the same character replacement mapping consider
  using <code>ArrayBasedEscaperMap</code>.
 @author David Beaumont
 @since 15.0
 */
@interface ComGoogleCommonEscapeArrayBasedUnicodeEscaper : ComGoogleCommonEscapeUnicodeEscaper

#pragma mark Public

- (NSString *)escapeWithNSString:(NSString * __nonnull)s;

#pragma mark Protected

/*!
 @brief Creates a new ArrayBasedUnicodeEscaper instance with the given replacement map and specified
  safe range.If <code>safeMax < safeMin</code> then no code points are considered safe.
 This
  initializer is useful when explicit instances of ArrayBasedEscaperMap are used to allow the
  sharing of large replacement mappings. 
 <p>If a code point has no mapped replacement then it is checked against the safe range. If it
  lies outside that, then <code>escapeUnsafe</code> is called, otherwise no escaping is performed.
 @param escaperMap the map of replacements
 @param safeMin the lowest character value in the safe range
 @param safeMax the highest character value in the safe range
 @param unsafeReplacement the default replacement for unsafe characters or null if no default      replacement is required
 */
- (instancetype __nonnull)initWithComGoogleCommonEscapeArrayBasedEscaperMap:(ComGoogleCommonEscapeArrayBasedEscaperMap * __nonnull)escaperMap
                                                                    withInt:(jint)safeMin
                                                                    withInt:(jint)safeMax
                                                               withNSString:(NSString * __nullable)unsafeReplacement;

/*!
 @brief Creates a new ArrayBasedUnicodeEscaper instance with the given replacement map and specified
  safe range.If <code>safeMax < safeMin</code> then no code points are considered safe.
 <p>If a code point has no mapped replacement then it is checked against the safe range. If it
  lies outside that, then <code>escapeUnsafe</code> is called, otherwise no escaping is performed.
 @param replacementMap a map of characters to their escaped representations
 @param safeMin the lowest character value in the safe range
 @param safeMax the highest character value in the safe range
 @param unsafeReplacement the default replacement for unsafe characters or null if no default      replacement is required
 */
- (instancetype __nonnull)initWithJavaUtilMap:(id<JavaUtilMap> __nonnull)replacementMap
                                      withInt:(jint)safeMin
                                      withInt:(jint)safeMax
                                 withNSString:(NSString * __nullable)unsafeReplacement;

/*!
 @brief Escapes a single Unicode code point using the replacement array and safe range values.If the
  given character does not have an explicit replacement and lies outside the safe range then 
 <code>escapeUnsafe</code> is called.
 */
- (IOSCharArray *)escapeWithInt:(jint)cp;

/*!
 @brief Escapes a code point that has no direct explicit value in the replacement array and lies
  outside the stated safe range.Subclasses should override this method to provide generalized
  escaping for code points if required.
 <p>Note that arrays returned by this method must not be modified once they have been returned.
  However it is acceptable to return the same array multiple times (even for different input
  characters).
 @param cp the Unicode code point to escape
 @return the replacement characters, or <code>null</code> if no escaping was required
 */
- (IOSCharArray *)escapeUnsafeWithInt:(jint)cp;

- (jint)nextEscapeIndexWithJavaLangCharSequence:(id<JavaLangCharSequence> __nonnull)csq
                                        withInt:(jint)index
                                        withInt:(jint)end;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonEscapeArrayBasedUnicodeEscaper)

FOUNDATION_EXPORT void ComGoogleCommonEscapeArrayBasedUnicodeEscaper_initWithJavaUtilMap_withInt_withInt_withNSString_(ComGoogleCommonEscapeArrayBasedUnicodeEscaper *self, id<JavaUtilMap> replacementMap, jint safeMin, jint safeMax, NSString *unsafeReplacement);

FOUNDATION_EXPORT void ComGoogleCommonEscapeArrayBasedUnicodeEscaper_initWithComGoogleCommonEscapeArrayBasedEscaperMap_withInt_withInt_withNSString_(ComGoogleCommonEscapeArrayBasedUnicodeEscaper *self, ComGoogleCommonEscapeArrayBasedEscaperMap *escaperMap, jint safeMin, jint safeMax, NSString *unsafeReplacement);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonEscapeArrayBasedUnicodeEscaper)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonEscapeArrayBasedUnicodeEscaper")
