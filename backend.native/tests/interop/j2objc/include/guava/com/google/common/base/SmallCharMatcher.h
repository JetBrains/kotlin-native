//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/build_result/java/com/google/common/base/SmallCharMatcher.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonBaseSmallCharMatcher")
#ifdef RESTRICT_ComGoogleCommonBaseSmallCharMatcher
#define INCLUDE_ALL_ComGoogleCommonBaseSmallCharMatcher 0
#else
#define INCLUDE_ALL_ComGoogleCommonBaseSmallCharMatcher 1
#endif
#undef RESTRICT_ComGoogleCommonBaseSmallCharMatcher

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonBaseSmallCharMatcher_) && (INCLUDE_ALL_ComGoogleCommonBaseSmallCharMatcher || defined(INCLUDE_ComGoogleCommonBaseSmallCharMatcher))
#define ComGoogleCommonBaseSmallCharMatcher_

#define RESTRICT_ComGoogleCommonBaseCharMatcher 1
#define INCLUDE_ComGoogleCommonBaseCharMatcher_NamedFastMatcher 1
#include "com/google/common/base/CharMatcher.h"

@class ComGoogleCommonBaseCharMatcher;
@class JavaUtilBitSet;

/*!
 @brief An immutable version of CharMatcher for smallish sets of characters that uses a hash table with
  linear probing to check for matches.
 @author Christopher Swenson
 */
@interface ComGoogleCommonBaseSmallCharMatcher : ComGoogleCommonBaseCharMatcher_NamedFastMatcher
@property (readonly, class) jint MAX_SIZE NS_SWIFT_NAME(MAX_SIZE);

+ (jint)MAX_SIZE;

#pragma mark Public

- (jboolean)matchesWithChar:(jchar)c;

#pragma mark Package-Private

/*!
 @brief Returns an array size suitable for the backing array of a hash table that uses open addressing
  with linear probing in its implementation.The returned size is the smallest power of two that
  can hold setSize elements with the desired load factor.
 */
+ (jint)chooseTableSizeWithInt:(jint)setSize;

+ (ComGoogleCommonBaseCharMatcher *)fromWithJavaUtilBitSet:(JavaUtilBitSet * __nonnull)chars
                                              withNSString:(NSString * __nonnull)description_;

- (void)setBitsWithJavaUtilBitSet:(JavaUtilBitSet * __nonnull)table;

+ (jint)smearWithInt:(jint)hashCode;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString * __nonnull)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBaseSmallCharMatcher)

inline jint ComGoogleCommonBaseSmallCharMatcher_get_MAX_SIZE(void);
#define ComGoogleCommonBaseSmallCharMatcher_MAX_SIZE 1023
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseSmallCharMatcher, MAX_SIZE, jint)

FOUNDATION_EXPORT jint ComGoogleCommonBaseSmallCharMatcher_smearWithInt_(jint hashCode);

FOUNDATION_EXPORT jint ComGoogleCommonBaseSmallCharMatcher_chooseTableSizeWithInt_(jint setSize);

FOUNDATION_EXPORT ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseSmallCharMatcher_fromWithJavaUtilBitSet_withNSString_(JavaUtilBitSet *chars, NSString *description_);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBaseSmallCharMatcher)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonBaseSmallCharMatcher")
