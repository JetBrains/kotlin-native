//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/build_result/java/com/google/common/primitives/Primitives.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonPrimitivesPrimitives")
#ifdef RESTRICT_ComGoogleCommonPrimitivesPrimitives
#define INCLUDE_ALL_ComGoogleCommonPrimitivesPrimitives 0
#else
#define INCLUDE_ALL_ComGoogleCommonPrimitivesPrimitives 1
#endif
#undef RESTRICT_ComGoogleCommonPrimitivesPrimitives

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonPrimitivesPrimitives_) && (INCLUDE_ALL_ComGoogleCommonPrimitivesPrimitives || defined(INCLUDE_ComGoogleCommonPrimitivesPrimitives))
#define ComGoogleCommonPrimitivesPrimitives_

@class IOSClass;
@protocol JavaUtilSet;

/*!
 @brief Contains static utility methods pertaining to primitive types and their corresponding wrapper
  types.
 @author Kevin Bourrillion
 @since 1.0
 */
@interface ComGoogleCommonPrimitivesPrimitives : NSObject

#pragma mark Public

/*!
 @brief Returns an immutable set of all nine primitive types (including <code>void</code>).Note that a
  simpler way to test whether a <code>Class</code> instance is a member of this set is to call <code>Class.isPrimitive</code>
 .
 @since 3.0
 */
+ (id<JavaUtilSet>)allPrimitiveTypes;

/*!
 @brief Returns an immutable set of all nine primitive-wrapper types (including <code>Void</code>).
 @since 3.0
 */
+ (id<JavaUtilSet>)allWrapperTypes;

/*!
 @brief Returns <code>true</code> if <code>type</code> is one of the nine primitive-wrapper types, such as <code>Integer</code>
 .
 - seealso: Class#isPrimitive
 */
+ (jboolean)isWrapperTypeWithIOSClass:(IOSClass * __nonnull)type;

/*!
 @brief Returns the corresponding primitive type of <code>type</code> if it is a wrapper type; otherwise
  returns <code>type</code> itself.Idempotent.
 @code

      unwrap(Integer.class) == int.class
      unwrap(int.class) == int.class
      unwrap(String.class) == String.class 
  
@endcode
 */
+ (IOSClass *)unwrapWithIOSClass:(IOSClass * __nonnull)type;

/*!
 @brief Returns the corresponding wrapper type of <code>type</code> if it is a primitive type; otherwise
  returns <code>type</code> itself.Idempotent.
 @code

      wrap(int.class) == Integer.class
      wrap(Integer.class) == Integer.class
      wrap(String.class) == String.class 
  
@endcode
 */
+ (IOSClass *)wrapWithIOSClass:(IOSClass * __nonnull)type;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonPrimitivesPrimitives)

FOUNDATION_EXPORT id<JavaUtilSet> ComGoogleCommonPrimitivesPrimitives_allPrimitiveTypes(void);

FOUNDATION_EXPORT id<JavaUtilSet> ComGoogleCommonPrimitivesPrimitives_allWrapperTypes(void);

FOUNDATION_EXPORT jboolean ComGoogleCommonPrimitivesPrimitives_isWrapperTypeWithIOSClass_(IOSClass *type);

FOUNDATION_EXPORT IOSClass *ComGoogleCommonPrimitivesPrimitives_wrapWithIOSClass_(IOSClass *type);

FOUNDATION_EXPORT IOSClass *ComGoogleCommonPrimitivesPrimitives_unwrapWithIOSClass_(IOSClass *type);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonPrimitivesPrimitives)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonPrimitivesPrimitives")
