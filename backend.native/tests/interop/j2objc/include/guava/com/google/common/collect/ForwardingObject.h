//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/build_result/java/com/google/common/collect/ForwardingObject.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCollectForwardingObject")
#ifdef RESTRICT_ComGoogleCommonCollectForwardingObject
#define INCLUDE_ALL_ComGoogleCommonCollectForwardingObject 0
#else
#define INCLUDE_ALL_ComGoogleCommonCollectForwardingObject 1
#endif
#undef RESTRICT_ComGoogleCommonCollectForwardingObject

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCollectForwardingObject_) && (INCLUDE_ALL_ComGoogleCommonCollectForwardingObject || defined(INCLUDE_ComGoogleCommonCollectForwardingObject))
#define ComGoogleCommonCollectForwardingObject_

/*!
 @brief An abstract base class for implementing the <a href="http://en.wikipedia.org/wiki/Decorator_pattern">
 decorator pattern</a>.The <code>delegate()</code>
  method must be overridden to return the instance being decorated.
 <p>This class does <i>not</i> forward the <code>hashCode</code> and <code>equals</code> methods through to
  the backing object, but relies on <code>Object</code>'s implementation. This is necessary to preserve
  the symmetry of <code>equals</code>. Custom definitions of equality are usually based on an interface,
  such as <code>Set</code> or <code>List</code>, so that the implementation of <code>equals</code> can cast the
  object being tested for equality to the custom interface. <code>ForwardingObject</code> implements no
  such custom interfaces directly; they are implemented only in subclasses. Therefore, forwarding 
 <code>equals</code> would break symmetry, as the forwarding object might consider itself equal to the
  object being tested, but the reverse could not be true. This behavior is consistent with the
  JDK's collection wrappers, such as <code>java.util.Collections.unmodifiableCollection</code>. Use an
  interface-specific subclass of <code>ForwardingObject</code>, such as <code>ForwardingList</code>, to
  preserve equality behavior, or override <code>equals</code> directly. 
 <p>The <code>toString</code> method is forwarded to the delegate. Although this class does not
  implement <code>Serializable</code>, a serializable subclass may be created since this class has a
  parameter-less constructor.
 @author Mike Bostock
 @since 2.0
 */
@interface ComGoogleCommonCollectForwardingObject : NSObject

#pragma mark Public

/*!
 @brief Returns the string representation generated by the delegate's <code>toString</code> method.
 */
- (NSString *)description;

#pragma mark Protected

/*!
 @brief Constructor for use by subclasses.
 */
- (instancetype __nonnull)init;

/*!
 @brief Returns the backing delegate instance that methods are forwarded to.Abstract subclasses
  generally override this method with an abstract method that has a more specific return type,
  such as <code>ForwardingSet.delegate</code>.
 Concrete subclasses override this method to supply the
  instance being decorated.
 */
- (id)delegate;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectForwardingObject)

FOUNDATION_EXPORT void ComGoogleCommonCollectForwardingObject_init(ComGoogleCommonCollectForwardingObject *self);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectForwardingObject)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCollectForwardingObject")
