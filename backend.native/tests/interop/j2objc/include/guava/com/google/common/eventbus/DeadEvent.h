//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/build_result/java/com/google/common/eventbus/DeadEvent.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonEventbusDeadEvent")
#ifdef RESTRICT_ComGoogleCommonEventbusDeadEvent
#define INCLUDE_ALL_ComGoogleCommonEventbusDeadEvent 0
#else
#define INCLUDE_ALL_ComGoogleCommonEventbusDeadEvent 1
#endif
#undef RESTRICT_ComGoogleCommonEventbusDeadEvent

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonEventbusDeadEvent_) && (INCLUDE_ALL_ComGoogleCommonEventbusDeadEvent || defined(INCLUDE_ComGoogleCommonEventbusDeadEvent))
#define ComGoogleCommonEventbusDeadEvent_

/*!
 @brief Wraps an event that was posted, but which had no subscribers and thus could not be delivered.
 <p>Registering a DeadEvent subscriber is useful for debugging or logging, as it can detect
  misconfigurations in a system's event distribution.
 @author Cliff Biffle
 @since 10.0
 */
@interface ComGoogleCommonEventbusDeadEvent : NSObject

#pragma mark Public

/*!
 @brief Creates a new DeadEvent.
 @param source object broadcasting the DeadEvent (generally the <code>EventBus</code> ).
 @param event the event that could not be delivered.
 */
- (instancetype __nonnull)initWithId:(id __nonnull)source
                              withId:(id __nonnull)event;

/*!
 @brief Returns the wrapped, 'dead' event, which the system was unable to deliver to any registered
  subscriber.
 @return the 'dead' event that could not be delivered.
 */
- (id)getEvent;

/*!
 @brief Returns the object that originated this event (<em>not</em> the object that originated the
  wrapped event).This is generally an <code>EventBus</code>.
 @return the source of this event.
 */
- (id)getSource;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonEventbusDeadEvent)

FOUNDATION_EXPORT void ComGoogleCommonEventbusDeadEvent_initWithId_withId_(ComGoogleCommonEventbusDeadEvent *self, id source, id event);

FOUNDATION_EXPORT ComGoogleCommonEventbusDeadEvent *new_ComGoogleCommonEventbusDeadEvent_initWithId_withId_(id source, id event) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonEventbusDeadEvent *create_ComGoogleCommonEventbusDeadEvent_initWithId_withId_(id source, id event);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonEventbusDeadEvent)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonEventbusDeadEvent")
