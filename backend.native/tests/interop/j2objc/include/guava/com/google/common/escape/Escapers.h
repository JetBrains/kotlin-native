//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/build_result/java/com/google/common/escape/Escapers.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonEscapeEscapers")
#ifdef RESTRICT_ComGoogleCommonEscapeEscapers
#define INCLUDE_ALL_ComGoogleCommonEscapeEscapers 0
#else
#define INCLUDE_ALL_ComGoogleCommonEscapeEscapers 1
#endif
#undef RESTRICT_ComGoogleCommonEscapeEscapers

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonEscapeEscapers_) && (INCLUDE_ALL_ComGoogleCommonEscapeEscapers || defined(INCLUDE_ComGoogleCommonEscapeEscapers))
#define ComGoogleCommonEscapeEscapers_

@class ComGoogleCommonEscapeCharEscaper;
@class ComGoogleCommonEscapeEscaper;
@class ComGoogleCommonEscapeEscapers_Builder;
@class ComGoogleCommonEscapeUnicodeEscaper;

/*!
 @brief Static utility methods pertaining to <code>Escaper</code> instances.
 @author Sven Mawson
 @author David Beaumont
 @since 15.0
 */
@interface ComGoogleCommonEscapeEscapers : NSObject

#pragma mark Public

/*!
 @brief Returns a builder for creating simple, fast escapers.A builder instance can be reused and each
  escaper that is created will be a snapshot of the current builder state.
 Builders are not
  thread safe. 
 <p>The initial state of the builder is such that: 
 <ul>
    <li>There are no replacement mappings
    <li><code>safeMin == Character.MIN_VALUE</code>
    <li><code>safeMax == Character.MAX_VALUE</code>
    <li><code>unsafeReplacement == null</code>
  </ul>
  
 <p>For performance reasons escapers created by this builder are not Unicode aware and will not
  validate the well-formedness of their input.
 */
+ (ComGoogleCommonEscapeEscapers_Builder *)builder;

/*!
 @brief Returns a string that would replace the given character in the specified escaper, or <code>null</code>
  if no replacement should be made.This method is intended for use in tests through the 
 <code>EscaperAsserts</code> class; production users of <code>CharEscaper</code> should limit themselves
  to its public interface.
 @param c the character to escape if necessary
 @return the replacement string, or <code>null</code> if no escaping was needed
 */
+ (NSString *)computeReplacementWithComGoogleCommonEscapeCharEscaper:(ComGoogleCommonEscapeCharEscaper * __nonnull)escaper
                                                            withChar:(jchar)c;

/*!
 @brief Returns a string that would replace the given character in the specified escaper, or <code>null</code>
  if no replacement should be made.This method is intended for use in tests through the 
 <code>EscaperAsserts</code> class; production users of <code>UnicodeEscaper</code> should limit
  themselves to its public interface.
 @param cp the Unicode code point to escape if necessary
 @return the replacement string, or <code>null</code> if no escaping was needed
 */
+ (NSString *)computeReplacementWithComGoogleCommonEscapeUnicodeEscaper:(ComGoogleCommonEscapeUnicodeEscaper * __nonnull)escaper
                                                                withInt:(jint)cp;

/*!
 @brief Returns an <code>Escaper</code> that does no escaping, passing all character data through unchanged.
 */
+ (ComGoogleCommonEscapeEscaper *)nullEscaper;

#pragma mark Package-Private

/*!
 @brief Returns a <code>UnicodeEscaper</code> equivalent to the given escaper instance.If the escaper is
  already a UnicodeEscaper then it is simply returned, otherwise it is wrapped in a
  UnicodeEscaper.
 <p>When a <code>CharEscaper</code> escaper is wrapped by this method it acquires extra behavior with
  respect to the well-formedness of Unicode character sequences and will throw <code>IllegalArgumentException</code>
  when given bad input.
 @param escaper the instance to be wrapped
 @return a UnicodeEscaper with the same behavior as the given instance
 @throw NullPointerExceptionif escaper is null
 @throw IllegalArgumentExceptionif escaper is not a UnicodeEscaper or a CharEscaper
 */
+ (ComGoogleCommonEscapeUnicodeEscaper *)asUnicodeEscaperWithComGoogleCommonEscapeEscaper:(ComGoogleCommonEscapeEscaper * __nonnull)escaper;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonEscapeEscapers)

FOUNDATION_EXPORT ComGoogleCommonEscapeEscaper *ComGoogleCommonEscapeEscapers_nullEscaper(void);

FOUNDATION_EXPORT ComGoogleCommonEscapeEscapers_Builder *ComGoogleCommonEscapeEscapers_builder(void);

FOUNDATION_EXPORT ComGoogleCommonEscapeUnicodeEscaper *ComGoogleCommonEscapeEscapers_asUnicodeEscaperWithComGoogleCommonEscapeEscaper_(ComGoogleCommonEscapeEscaper *escaper);

FOUNDATION_EXPORT NSString *ComGoogleCommonEscapeEscapers_computeReplacementWithComGoogleCommonEscapeCharEscaper_withChar_(ComGoogleCommonEscapeCharEscaper *escaper, jchar c);

FOUNDATION_EXPORT NSString *ComGoogleCommonEscapeEscapers_computeReplacementWithComGoogleCommonEscapeUnicodeEscaper_withInt_(ComGoogleCommonEscapeUnicodeEscaper *escaper, jint cp);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonEscapeEscapers)

#endif

#if !defined (ComGoogleCommonEscapeEscapers_Builder_) && (INCLUDE_ALL_ComGoogleCommonEscapeEscapers || defined(INCLUDE_ComGoogleCommonEscapeEscapers_Builder))
#define ComGoogleCommonEscapeEscapers_Builder_

@class ComGoogleCommonEscapeEscaper;

/*!
 @brief A builder for simple, fast escapers.
 <p>Typically an escaper needs to deal with the escaping of high valued characters or code
  points. In these cases it is necessary to extend either <code>ArrayBasedCharEscaper</code> or <code>ArrayBasedUnicodeEscaper</code>
  to provide the desired behavior. However this builder is suitable for
  creating escapers that replace a relative small set of characters.
 @author David Beaumont
 @since 15.0
 */
@interface ComGoogleCommonEscapeEscapers_Builder : NSObject

#pragma mark Public

/*!
 @brief Adds a replacement string for the given input character.The specified character will be
  replaced by the given string whenever it occurs in the input, irrespective of whether it lies
  inside or outside the 'safe' range.
 @param c the character to be replaced
 @param replacement the string to replace the given character
 @return the builder instance
 @throw NullPointerExceptionif <code>replacement</code> is null
 */
- (ComGoogleCommonEscapeEscapers_Builder *)addEscapeWithChar:(jchar)c
                                                withNSString:(NSString * __nonnull)replacement;

/*!
 @brief Returns a new escaper based on the current state of the builder.
 */
- (ComGoogleCommonEscapeEscaper *)build;

/*!
 @brief Sets the safe range of characters for the escaper.Characters in this range that have no
  explicit replacement are considered 'safe' and remain unescaped in the output.
 If <code>safeMax < safeMin</code>
  then the safe range is empty.
 @param safeMin the lowest 'safe' character
 @param safeMax the highest 'safe' character
 @return the builder instance
 */
- (ComGoogleCommonEscapeEscapers_Builder *)setSafeRangeWithChar:(jchar)safeMin
                                                       withChar:(jchar)safeMax;

/*!
 @brief Sets the replacement string for any characters outside the 'safe' range that have no explicit
  replacement.If <code>unsafeReplacement</code> is <code>null</code> then no replacement will occur, if
  it is <code>""</code> then the unsafe characters are removed from the output.
 @param unsafeReplacement the string to replace unsafe characters
 @return the builder instance
 */
- (ComGoogleCommonEscapeEscapers_Builder *)setUnsafeReplacementWithNSString:(NSString * __nullable)unsafeReplacement;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonEscapeEscapers_Builder)

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonEscapeEscapers_Builder)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonEscapeEscapers")
