//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/build_result/java/com/google/common/util/concurrent/AbstractExecutionThreadService.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonUtilConcurrentAbstractExecutionThreadService")
#ifdef RESTRICT_ComGoogleCommonUtilConcurrentAbstractExecutionThreadService
#define INCLUDE_ALL_ComGoogleCommonUtilConcurrentAbstractExecutionThreadService 0
#else
#define INCLUDE_ALL_ComGoogleCommonUtilConcurrentAbstractExecutionThreadService 1
#endif
#undef RESTRICT_ComGoogleCommonUtilConcurrentAbstractExecutionThreadService

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_) && (INCLUDE_ALL_ComGoogleCommonUtilConcurrentAbstractExecutionThreadService || defined(INCLUDE_ComGoogleCommonUtilConcurrentAbstractExecutionThreadService))
#define ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_

#define RESTRICT_ComGoogleCommonUtilConcurrentService 1
#define INCLUDE_ComGoogleCommonUtilConcurrentService 1
#include "com/google/common/util/concurrent/Service.h"

@class ComGoogleCommonUtilConcurrentService_Listener;
@class ComGoogleCommonUtilConcurrentService_State;
@class JavaLangThrowable;
@class JavaUtilConcurrentTimeUnit;
@protocol JavaUtilConcurrentExecutor;

/*!
 @brief Base class for services that can implement <code>startUp</code>, <code>run</code> and <code>shutDown</code>
  methods.This class uses a single thread to execute the service; consider <code>AbstractService</code>
  if you would like to manage any threading manually.
 @author Jesse Wilson
 @since 1.0
 */
@interface ComGoogleCommonUtilConcurrentAbstractExecutionThreadService : NSObject < ComGoogleCommonUtilConcurrentService >

#pragma mark Public

/*!
 @since 13.0
 */
- (void)addListenerWithComGoogleCommonUtilConcurrentService_Listener:(ComGoogleCommonUtilConcurrentService_Listener * __nonnull)listener
                                      withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor> __nonnull)executor;

/*!
 @since 15.0
 */
- (void)awaitRunning;

/*!
 @since 15.0
 */
- (void)awaitRunningWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit * __nonnull)unit;

/*!
 @since 15.0
 */
- (void)awaitTerminated;

/*!
 @since 15.0
 */
- (void)awaitTerminatedWithLong:(jlong)timeout
 withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit * __nonnull)unit;

/*!
 @since 14.0
 */
- (JavaLangThrowable *)failureCause;

- (jboolean)isRunning;

/*!
 @since 15.0
 */
- (id<ComGoogleCommonUtilConcurrentService>)startAsync;

- (ComGoogleCommonUtilConcurrentService_State *)state;

/*!
 @since 15.0
 */
- (id<ComGoogleCommonUtilConcurrentService>)stopAsync;

- (NSString *)description;

#pragma mark Protected

/*!
 @brief Constructor for use by subclasses.
 */
- (instancetype __nonnull)init;

/*!
 @brief Returns the <code>Executor</code> that will be used to run this service.Subclasses may override
  this method to use a custom <code>Executor</code>, which may configure its worker thread with a
  specific name, thread group or priority.
 The returned executor's <code>execute()</code>
  method is called when this service is started, and should
  return promptly. 
 <p>The default implementation returns a new <code>Executor</code> that sets the name of its threads
  to the string returned by <code>serviceName</code>
 */
- (id<JavaUtilConcurrentExecutor>)executor;

/*!
 @brief Run the service.This method is invoked on the execution thread.
 Implementations must respond
  to stop requests. You could poll for lifecycle changes in a work loop: 
 @code

    public void run() {
      while (<code>isRunning()</code>) {
        // perform a unit of work
      }    }  
  
@endcode
  
 <p>...or you could respond to stop requests by implementing <code>triggerShutdown()</code>, which
  should cause <code>run()</code> to return.
 */
- (void)run;

/*!
 @brief Returns the name of this service.
 <code>AbstractExecutionThreadService</code> may include the name
  in debugging output. 
 <p>Subclasses may override this method.
 @since 14.0 (present in 10.0 as getServiceName)
 */
- (NSString *)serviceName;

/*!
 @brief Stop the service.This method is invoked on the execution thread.
 <p>By default this method does nothing.
 */
- (void)shutDown;

/*!
 @brief Start the service.This method is invoked on the execution thread.
 <p>By default this method does nothing.
 */
- (void)startUp;

/*!
 @brief Invoked to request the service to stop.
 <p>By default this method does nothing.
 */
- (void)triggerShutdown;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService)

FOUNDATION_EXPORT void ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_init(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService *self);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonUtilConcurrentAbstractExecutionThreadService")
