//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/build_result/java/com/google/common/io/LineBuffer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonIoLineBuffer")
#ifdef RESTRICT_ComGoogleCommonIoLineBuffer
#define INCLUDE_ALL_ComGoogleCommonIoLineBuffer 0
#else
#define INCLUDE_ALL_ComGoogleCommonIoLineBuffer 1
#endif
#undef RESTRICT_ComGoogleCommonIoLineBuffer

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonIoLineBuffer_) && (INCLUDE_ALL_ComGoogleCommonIoLineBuffer || defined(INCLUDE_ComGoogleCommonIoLineBuffer))
#define ComGoogleCommonIoLineBuffer_

@class IOSCharArray;

/*!
 @brief Package-protected abstract class that implements the line reading algorithm used by <code>LineReader</code>
 .Line separators are per <code>java.io.BufferedReader</code>: line feed, carriage return,
  or carriage return followed immediately by a linefeed.
 <p>Subclasses must implement <code>handleLine</code>, call <code>add</code> to pass character data, and
  call <code>finish</code> at the end of stream.
 @author Chris Nokleberg
 @since 1.0
 */
@interface ComGoogleCommonIoLineBuffer : NSObject

#pragma mark Protected

/*!
 @brief Process additional characters from the stream.When a line separator is found the contents of
  the line and the line separator itself are passed to the abstract <code>handleLine</code> method.
 @param cbuf the character buffer to process
 @param off the offset into the buffer
 @param len the number of characters to process
 @throw IOExceptionif an I/O error occurs
 - seealso: #finish
 */
- (void)addWithCharArray:(IOSCharArray * __nonnull)cbuf
                 withInt:(jint)off
                 withInt:(jint)len;

/*!
 @brief Subclasses must call this method after finishing character processing, in order to ensure that
  any unterminated line in the buffer is passed to <code>handleLine</code>.
 @throw IOExceptionif an I/O error occurs
 */
- (void)finish;

/*!
 @brief Called for each line found in the character data passed to <code>add</code>.
 @param line a line of text (possibly empty), without any line separators
 @param end the line separator; one of <code>"\r"</code> , <code>"\n"</code> , <code>"\r\n"</code> , or <code>""</code>
 @throw IOExceptionif an I/O error occurs
 */
- (void)handleLineWithNSString:(NSString * __nonnull)line
                  withNSString:(NSString * __nonnull)end;

#pragma mark Package-Private

- (instancetype __nonnull)initPackagePrivate;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonIoLineBuffer)

FOUNDATION_EXPORT void ComGoogleCommonIoLineBuffer_initPackagePrivate(ComGoogleCommonIoLineBuffer *self);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonIoLineBuffer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonIoLineBuffer")
