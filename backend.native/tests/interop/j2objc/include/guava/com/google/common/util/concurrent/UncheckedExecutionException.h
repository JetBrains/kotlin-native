//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/build_result/java/com/google/common/util/concurrent/UncheckedExecutionException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonUtilConcurrentUncheckedExecutionException")
#ifdef RESTRICT_ComGoogleCommonUtilConcurrentUncheckedExecutionException
#define INCLUDE_ALL_ComGoogleCommonUtilConcurrentUncheckedExecutionException 0
#else
#define INCLUDE_ALL_ComGoogleCommonUtilConcurrentUncheckedExecutionException 1
#endif
#undef RESTRICT_ComGoogleCommonUtilConcurrentUncheckedExecutionException

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonUtilConcurrentUncheckedExecutionException_) && (INCLUDE_ALL_ComGoogleCommonUtilConcurrentUncheckedExecutionException || defined(INCLUDE_ComGoogleCommonUtilConcurrentUncheckedExecutionException))
#define ComGoogleCommonUtilConcurrentUncheckedExecutionException_

#define RESTRICT_JavaLangRuntimeException 1
#define INCLUDE_JavaLangRuntimeException 1
#include "java/lang/RuntimeException.h"

@class JavaLangThrowable;

/*!
 @brief Unchecked variant of <code>java.util.concurrent.ExecutionException</code>.As with <code>ExecutionException</code>
 , the exception's cause comes from a failed task,
  possibly run in another thread.
 <p><code>UncheckedExecutionException</code> is intended as an alternative to <code>ExecutionException</code>
  when the exception thrown by a task is an unchecked exception. However, it
  may also wrap a checked exception in some cases. 
 <p>When wrapping an <code>Error</code> from another thread, prefer <code>ExecutionError</code>. When
  wrapping a checked exception, prefer <code>ExecutionException</code>.
 @author Charles Fry
 @since 10.0
 */
@interface ComGoogleCommonUtilConcurrentUncheckedExecutionException : JavaLangRuntimeException

#pragma mark Public

/*!
 @brief Creates a new instance with the given detail message and cause.
 */
- (instancetype __nonnull)initWithNSString:(NSString * __nullable)message
                     withJavaLangThrowable:(JavaLangThrowable * __nullable)cause;

/*!
 @brief Creates a new instance with the given cause.
 */
- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable * __nullable)cause;

#pragma mark Protected

/*!
 @brief Creates a new instance with <code>null</code> as its detail message.
 */
- (instancetype __nonnull)init;

/*!
 @brief Creates a new instance with the given detail message.
 */
- (instancetype __nonnull)initWithNSString:(NSString * __nullable)message;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString * __nonnull)arg0
                     withJavaLangThrowable:(JavaLangThrowable * __nonnull)arg1
                               withBoolean:(jboolean)arg2
                               withBoolean:(jboolean)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentUncheckedExecutionException)

FOUNDATION_EXPORT void ComGoogleCommonUtilConcurrentUncheckedExecutionException_init(ComGoogleCommonUtilConcurrentUncheckedExecutionException *self);

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentUncheckedExecutionException *new_ComGoogleCommonUtilConcurrentUncheckedExecutionException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentUncheckedExecutionException *create_ComGoogleCommonUtilConcurrentUncheckedExecutionException_init(void);

FOUNDATION_EXPORT void ComGoogleCommonUtilConcurrentUncheckedExecutionException_initWithNSString_(ComGoogleCommonUtilConcurrentUncheckedExecutionException *self, NSString *message);

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentUncheckedExecutionException *new_ComGoogleCommonUtilConcurrentUncheckedExecutionException_initWithNSString_(NSString *message) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentUncheckedExecutionException *create_ComGoogleCommonUtilConcurrentUncheckedExecutionException_initWithNSString_(NSString *message);

FOUNDATION_EXPORT void ComGoogleCommonUtilConcurrentUncheckedExecutionException_initWithNSString_withJavaLangThrowable_(ComGoogleCommonUtilConcurrentUncheckedExecutionException *self, NSString *message, JavaLangThrowable *cause);

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentUncheckedExecutionException *new_ComGoogleCommonUtilConcurrentUncheckedExecutionException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentUncheckedExecutionException *create_ComGoogleCommonUtilConcurrentUncheckedExecutionException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause);

FOUNDATION_EXPORT void ComGoogleCommonUtilConcurrentUncheckedExecutionException_initWithJavaLangThrowable_(ComGoogleCommonUtilConcurrentUncheckedExecutionException *self, JavaLangThrowable *cause);

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentUncheckedExecutionException *new_ComGoogleCommonUtilConcurrentUncheckedExecutionException_initWithJavaLangThrowable_(JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentUncheckedExecutionException *create_ComGoogleCommonUtilConcurrentUncheckedExecutionException_initWithJavaLangThrowable_(JavaLangThrowable *cause);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentUncheckedExecutionException)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonUtilConcurrentUncheckedExecutionException")
