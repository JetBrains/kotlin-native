//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/build_result/java/com/google/common/base/package-info.java
//

/*!
 @brief Basic utility libraries and interfaces.
 <p>This package is a part of the open-source <a href="http://github.com/google/guava">Guava</a>
  library. 
 <h2>Contents</h2>
  
 <h3>String-related utilities</h3>
  
 <ul>
    <li><code>com.google.common.base.Ascii</code>
    <li><code>com.google.common.base.CaseFormat</code>
    <li><code>com.google.common.base.CharMatcher</code>
    <li><code>com.google.common.base.Charsets</code>
    <li><code>com.google.common.base.Joiner</code>
    <li><code>com.google.common.base.Splitter</code>
    <li><code>com.google.common.base.Strings</code>
  </ul>
  
 <h3>Function types</h3>
  
 <ul>
    <li><code>com.google.common.base.Function</code>, <code>com.google.common.base.Functions</code>
    <li><code>com.google.common.base.Predicate</code>, <code>com.google.common.base.Predicates</code>
    <li><code>com.google.common.base.Equivalence</code>
    <li><code>com.google.common.base.Converter</code>
    <li><code>com.google.common.base.Supplier</code>, <code>com.google.common.base.Suppliers</code>
  </ul>
  
 <h3>Other</h3>
  
 <ul>
    <li><code>com.google.common.base.Defaults</code>
    <li><code>com.google.common.base.Enums</code>
    <li><code>com.google.common.base.Objects</code>
    <li><code>com.google.common.base.Optional</code>
    <li><code>com.google.common.base.Preconditions</code>
    <li><code>com.google.common.base.Stopwatch</code>
    <li><code>com.google.common.base.Throwables</code>
  </ul>
 */
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonBasePackage_info")
#ifdef RESTRICT_ComGoogleCommonBasePackage_info
#define INCLUDE_ALL_ComGoogleCommonBasePackage_info 0
#else
#define INCLUDE_ALL_ComGoogleCommonBasePackage_info 1
#endif
#undef RESTRICT_ComGoogleCommonBasePackage_info

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonBasePackage_info")
