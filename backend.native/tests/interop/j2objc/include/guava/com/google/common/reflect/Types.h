//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/build_result/java/com/google/common/reflect/Types.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonReflectTypes")
#ifdef RESTRICT_ComGoogleCommonReflectTypes
#define INCLUDE_ALL_ComGoogleCommonReflectTypes 0
#else
#define INCLUDE_ALL_ComGoogleCommonReflectTypes 1
#endif
#undef RESTRICT_ComGoogleCommonReflectTypes

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonReflectTypes_) && (INCLUDE_ALL_ComGoogleCommonReflectTypes || defined(INCLUDE_ComGoogleCommonReflectTypes))
#define ComGoogleCommonReflectTypes_

@class IOSClass;
@class IOSObjectArray;
@protocol JavaLangReflectGenericDeclaration;
@protocol JavaLangReflectParameterizedType;
@protocol JavaLangReflectType;
@protocol JavaLangReflectTypeVariable;
@protocol JavaLangReflectWildcardType;

/*!
 @brief Utilities for working with <code>Type</code>.
 @author Ben Yu
 */
@interface ComGoogleCommonReflectTypes : NSObject

#pragma mark Package-Private

/*!
 @brief Returns the <code>Class</code> object of arrays with <code>componentType</code>.
 */
+ (IOSClass *)getArrayClassWithIOSClass:(IOSClass * __nonnull)componentType;

+ (id<JavaLangReflectType> __nullable)getComponentTypeWithJavaLangReflectType:(id<JavaLangReflectType> __nonnull)type;

/*!
 @brief Returns the array type of <code>componentType</code>.
 */
+ (id<JavaLangReflectType>)newArrayTypeWithJavaLangReflectType:(id<JavaLangReflectType> __nonnull)componentType OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns a new <code>TypeVariable</code> that belongs to <code>declaration</code> with <code>name</code> and 
 <code>bounds</code>.
 */
+ (id<JavaLangReflectTypeVariable>)newArtificialTypeVariableWithJavaLangReflectGenericDeclaration:(id<JavaLangReflectGenericDeclaration> __nonnull)declaration
                                                                                     withNSString:(NSString * __nonnull)name
                                                                     withJavaLangReflectTypeArray:(IOSObjectArray * __nonnull)bounds OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns a type where <code>rawType</code> is parameterized by <code>arguments</code>.
 */
+ (id<JavaLangReflectParameterizedType>)newParameterizedTypeWithIOSClass:(IOSClass * __nonnull)rawType
                                            withJavaLangReflectTypeArray:(IOSObjectArray * __nonnull)arguments OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns a type where <code>rawType</code> is parameterized by <code>arguments</code> and is owned by 
 <code>ownerType</code>.
 */
+ (id<JavaLangReflectParameterizedType>)newParameterizedTypeWithOwnerWithJavaLangReflectType:(id<JavaLangReflectType> __nullable)ownerType
                                                                                withIOSClass:(IOSClass * __nonnull)rawType
                                                                withJavaLangReflectTypeArray:(IOSObjectArray * __nonnull)arguments OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns a new <code>WildcardType</code> with <code>upperBound</code>.
 */
+ (id<JavaLangReflectWildcardType>)subtypeOfWithJavaLangReflectType:(id<JavaLangReflectType> __nonnull)upperBound;

/*!
 @brief Returns a new <code>WildcardType</code> with <code>lowerBound</code>.
 */
+ (id<JavaLangReflectWildcardType>)supertypeOfWithJavaLangReflectType:(id<JavaLangReflectType> __nonnull)lowerBound;

/*!
 @brief Returns human readable string representation of <code>type</code>.
 <p>The format is subject to change.
 */
+ (NSString *)toStringWithJavaLangReflectType:(id<JavaLangReflectType> __nonnull)type;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonReflectTypes)

FOUNDATION_EXPORT id<JavaLangReflectType> ComGoogleCommonReflectTypes_newArrayTypeWithJavaLangReflectType_(id<JavaLangReflectType> componentType);

FOUNDATION_EXPORT id<JavaLangReflectParameterizedType> ComGoogleCommonReflectTypes_newParameterizedTypeWithOwnerWithJavaLangReflectType_withIOSClass_withJavaLangReflectTypeArray_(id<JavaLangReflectType> ownerType, IOSClass *rawType, IOSObjectArray *arguments);

FOUNDATION_EXPORT id<JavaLangReflectParameterizedType> ComGoogleCommonReflectTypes_newParameterizedTypeWithIOSClass_withJavaLangReflectTypeArray_(IOSClass *rawType, IOSObjectArray *arguments);

FOUNDATION_EXPORT id<JavaLangReflectTypeVariable> ComGoogleCommonReflectTypes_newArtificialTypeVariableWithJavaLangReflectGenericDeclaration_withNSString_withJavaLangReflectTypeArray_(id<JavaLangReflectGenericDeclaration> declaration, NSString *name, IOSObjectArray *bounds);

FOUNDATION_EXPORT id<JavaLangReflectWildcardType> ComGoogleCommonReflectTypes_subtypeOfWithJavaLangReflectType_(id<JavaLangReflectType> upperBound);

FOUNDATION_EXPORT id<JavaLangReflectWildcardType> ComGoogleCommonReflectTypes_supertypeOfWithJavaLangReflectType_(id<JavaLangReflectType> lowerBound);

FOUNDATION_EXPORT NSString *ComGoogleCommonReflectTypes_toStringWithJavaLangReflectType_(id<JavaLangReflectType> type);

FOUNDATION_EXPORT id<JavaLangReflectType> ComGoogleCommonReflectTypes_getComponentTypeWithJavaLangReflectType_(id<JavaLangReflectType> type);

FOUNDATION_EXPORT IOSClass *ComGoogleCommonReflectTypes_getArrayClassWithIOSClass_(IOSClass *componentType);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonReflectTypes)

#endif

#if !defined (ComGoogleCommonReflectTypes_WildcardTypeImpl_) && (INCLUDE_ALL_ComGoogleCommonReflectTypes || defined(INCLUDE_ComGoogleCommonReflectTypes_WildcardTypeImpl))
#define ComGoogleCommonReflectTypes_WildcardTypeImpl_

#define RESTRICT_JavaLangReflectWildcardType 1
#define INCLUDE_JavaLangReflectWildcardType 1
#include "java/lang/reflect/WildcardType.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class IOSObjectArray;

@interface ComGoogleCommonReflectTypes_WildcardTypeImpl : NSObject < JavaLangReflectWildcardType, JavaIoSerializable >

#pragma mark Public

- (jboolean)isEqual:(id __nonnull)obj;

- (IOSObjectArray *)getLowerBounds;

- (IOSObjectArray *)getUpperBounds;

- (NSUInteger)hash;

- (NSString *)description;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaLangReflectTypeArray:(IOSObjectArray * __nonnull)lowerBounds
                              withJavaLangReflectTypeArray:(IOSObjectArray * __nonnull)upperBounds;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonReflectTypes_WildcardTypeImpl)

FOUNDATION_EXPORT void ComGoogleCommonReflectTypes_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(ComGoogleCommonReflectTypes_WildcardTypeImpl *self, IOSObjectArray *lowerBounds, IOSObjectArray *upperBounds);

FOUNDATION_EXPORT ComGoogleCommonReflectTypes_WildcardTypeImpl *new_ComGoogleCommonReflectTypes_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(IOSObjectArray *lowerBounds, IOSObjectArray *upperBounds) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonReflectTypes_WildcardTypeImpl *create_ComGoogleCommonReflectTypes_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(IOSObjectArray *lowerBounds, IOSObjectArray *upperBounds);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonReflectTypes_WildcardTypeImpl)

#endif

#if !defined (ComGoogleCommonReflectTypes_JavaVersion_) && (INCLUDE_ALL_ComGoogleCommonReflectTypes || defined(INCLUDE_ComGoogleCommonReflectTypes_JavaVersion))
#define ComGoogleCommonReflectTypes_JavaVersion_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class ComGoogleCommonCollectImmutableList;
@class IOSObjectArray;
@protocol JavaLangReflectType;

typedef NS_ENUM(NSUInteger, ComGoogleCommonReflectTypes_JavaVersion_Enum) {
  ComGoogleCommonReflectTypes_JavaVersion_Enum_JAVA6 = 0,
  ComGoogleCommonReflectTypes_JavaVersion_Enum_JAVA7 = 1,
  ComGoogleCommonReflectTypes_JavaVersion_Enum_JAVA8 = 2,
  ComGoogleCommonReflectTypes_JavaVersion_Enum_JAVA9 = 3,
};

@interface ComGoogleCommonReflectTypes_JavaVersion : JavaLangEnum
@property (readonly, class, strong) ComGoogleCommonReflectTypes_JavaVersion *CURRENT NS_SWIFT_NAME(CURRENT);

@property (readonly, class, nonnull) ComGoogleCommonReflectTypes_JavaVersion *JAVA6 NS_SWIFT_NAME(JAVA6);
@property (readonly, class, nonnull) ComGoogleCommonReflectTypes_JavaVersion *JAVA7 NS_SWIFT_NAME(JAVA7);
@property (readonly, class, nonnull) ComGoogleCommonReflectTypes_JavaVersion *JAVA8 NS_SWIFT_NAME(JAVA8);
@property (readonly, class, nonnull) ComGoogleCommonReflectTypes_JavaVersion *JAVA9 NS_SWIFT_NAME(JAVA9);
+ (ComGoogleCommonReflectTypes_JavaVersion *)CURRENT;

+ (ComGoogleCommonReflectTypes_JavaVersion * __nonnull)JAVA6;

+ (ComGoogleCommonReflectTypes_JavaVersion * __nonnull)JAVA7;

+ (ComGoogleCommonReflectTypes_JavaVersion * __nonnull)JAVA8;

+ (ComGoogleCommonReflectTypes_JavaVersion * __nonnull)JAVA9;

#pragma mark Public

+ (ComGoogleCommonReflectTypes_JavaVersion *)valueOfWithNSString:(NSString * __nonnull)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (jboolean)jdkTypeDuplicatesOwnerName;

- (id<JavaLangReflectType>)newArrayTypeWithJavaLangReflectType:(id<JavaLangReflectType> __nonnull)componentType OBJC_METHOD_FAMILY_NONE;

- (NSString *)typeNameWithJavaLangReflectType:(id<JavaLangReflectType> __nonnull)type;

- (id<JavaLangReflectType>)usedInGenericTypeWithJavaLangReflectType:(id<JavaLangReflectType> __nonnull)type;

- (ComGoogleCommonCollectImmutableList *)usedInGenericTypeWithJavaLangReflectTypeArray:(IOSObjectArray * __nonnull)types;

- (ComGoogleCommonReflectTypes_JavaVersion_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonReflectTypes_JavaVersion)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ComGoogleCommonReflectTypes_JavaVersion *ComGoogleCommonReflectTypes_JavaVersion_values_[];

inline ComGoogleCommonReflectTypes_JavaVersion *ComGoogleCommonReflectTypes_JavaVersion_get_JAVA6(void);
J2OBJC_ENUM_CONSTANT(ComGoogleCommonReflectTypes_JavaVersion, JAVA6)

inline ComGoogleCommonReflectTypes_JavaVersion *ComGoogleCommonReflectTypes_JavaVersion_get_JAVA7(void);
J2OBJC_ENUM_CONSTANT(ComGoogleCommonReflectTypes_JavaVersion, JAVA7)

inline ComGoogleCommonReflectTypes_JavaVersion *ComGoogleCommonReflectTypes_JavaVersion_get_JAVA8(void);
J2OBJC_ENUM_CONSTANT(ComGoogleCommonReflectTypes_JavaVersion, JAVA8)

inline ComGoogleCommonReflectTypes_JavaVersion *ComGoogleCommonReflectTypes_JavaVersion_get_JAVA9(void);
J2OBJC_ENUM_CONSTANT(ComGoogleCommonReflectTypes_JavaVersion, JAVA9)

inline ComGoogleCommonReflectTypes_JavaVersion *ComGoogleCommonReflectTypes_JavaVersion_get_CURRENT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComGoogleCommonReflectTypes_JavaVersion *ComGoogleCommonReflectTypes_JavaVersion_CURRENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonReflectTypes_JavaVersion, CURRENT, ComGoogleCommonReflectTypes_JavaVersion *)

FOUNDATION_EXPORT IOSObjectArray *ComGoogleCommonReflectTypes_JavaVersion_values(void);

FOUNDATION_EXPORT ComGoogleCommonReflectTypes_JavaVersion *ComGoogleCommonReflectTypes_JavaVersion_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ComGoogleCommonReflectTypes_JavaVersion *ComGoogleCommonReflectTypes_JavaVersion_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonReflectTypes_JavaVersion)

#endif

#if !defined (ComGoogleCommonReflectTypes_NativeTypeVariableEquals_) && (INCLUDE_ALL_ComGoogleCommonReflectTypes || defined(INCLUDE_ComGoogleCommonReflectTypes_NativeTypeVariableEquals))
#define ComGoogleCommonReflectTypes_NativeTypeVariableEquals_

/*!
 @brief Per <a href="https://code.google.com/p/guava-libraries/issues/detail?
 id=1635">issue 1635</a>,
  In JDK 1.7.0_51-b13, <code>TypeVariableImpl.equals(Object)</code> is changed to no longer be equal
  to custom TypeVariable implementations.As a result, we need to make sure our TypeVariable
  implementation respects symmetry. Moreover, we don't want to reconstruct a native type variable 
 <code><A></code> using our implementation unless some of its bounds have changed in resolution. This
  avoids creating unequal TypeVariable implementation unnecessarily. When the bounds do change,
  however, it's fine for the synthetic TypeVariable to be unequal to any native TypeVariable
  anyway.
 */
@interface ComGoogleCommonReflectTypes_NativeTypeVariableEquals : NSObject
@property (readonly, class) jboolean NATIVE_TYPE_VARIABLE_ONLY NS_SWIFT_NAME(NATIVE_TYPE_VARIABLE_ONLY);

+ (jboolean)NATIVE_TYPE_VARIABLE_ONLY;

#pragma mark Package-Private

- (instancetype __nonnull)init;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonReflectTypes_NativeTypeVariableEquals)

inline jboolean ComGoogleCommonReflectTypes_NativeTypeVariableEquals_get_NATIVE_TYPE_VARIABLE_ONLY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean ComGoogleCommonReflectTypes_NativeTypeVariableEquals_NATIVE_TYPE_VARIABLE_ONLY;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(ComGoogleCommonReflectTypes_NativeTypeVariableEquals, NATIVE_TYPE_VARIABLE_ONLY, jboolean)

FOUNDATION_EXPORT void ComGoogleCommonReflectTypes_NativeTypeVariableEquals_init(ComGoogleCommonReflectTypes_NativeTypeVariableEquals *self);

FOUNDATION_EXPORT ComGoogleCommonReflectTypes_NativeTypeVariableEquals *new_ComGoogleCommonReflectTypes_NativeTypeVariableEquals_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonReflectTypes_NativeTypeVariableEquals *create_ComGoogleCommonReflectTypes_NativeTypeVariableEquals_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonReflectTypes_NativeTypeVariableEquals)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonReflectTypes")
