//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/build_result/java/com/google/common/base/Functions.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonBaseFunctions")
#ifdef RESTRICT_ComGoogleCommonBaseFunctions
#define INCLUDE_ALL_ComGoogleCommonBaseFunctions 0
#else
#define INCLUDE_ALL_ComGoogleCommonBaseFunctions 1
#endif
#undef RESTRICT_ComGoogleCommonBaseFunctions

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonBaseFunctions_) && (INCLUDE_ALL_ComGoogleCommonBaseFunctions || defined(INCLUDE_ComGoogleCommonBaseFunctions))
#define ComGoogleCommonBaseFunctions_

@protocol ComGoogleCommonBaseFunction;
@protocol ComGoogleCommonBasePredicate;
@protocol ComGoogleCommonBaseSupplier;
@protocol JavaUtilMap;

/*!
 @brief Static utility methods pertaining to <code>com.google.common.base.Function</code> instances; see that
  class for information about migrating to <code>java.util.function</code>.
 <p>All methods return serializable functions as long as they're given serializable parameters. 
 <p>See the Guava User Guide article on <a href="https://github.com/google/guava/wiki/FunctionalExplained">
 the use of <code>Function</code></a>.
 @author Mike Bostock
 @author Jared Levy
 @since 2.0
 */
@interface ComGoogleCommonBaseFunctions : NSObject

#pragma mark Public

/*!
 @brief Returns the composition of two functions.For <code>f: A->B</code> and <code>g: B->C</code>, composition
  is defined as the function h such that <code>h(a) == g(f(a))</code> for each <code>a</code>.
 <p><b>Java 8 users:</b> use <code>g.compose(f)</code> or (probably clearer) <code>f.andThen(g)</code>
  instead.
 @param g the second function to apply
 @param f the first function to apply
 @return the composition of <code>f</code> and <code>g</code>
 - seealso: <a href="//en.wikipedia.org/wiki/Function_composition">function composition</a>
 */
+ (id<ComGoogleCommonBaseFunction>)composeWithComGoogleCommonBaseFunction:(id<ComGoogleCommonBaseFunction> __nonnull)g
                                          withComGoogleCommonBaseFunction:(id<ComGoogleCommonBaseFunction> __nonnull)f;

/*!
 @brief Returns a function that ignores its input and always returns <code>value</code>.
 <p><b>Java 8 users:</b> use the lambda expression <code>o -> value</code> instead.
 @param value the constant value for the function to return
 @return a function that always returns <code>value</code>
 */
+ (id<ComGoogleCommonBaseFunction>)constantWithId:(id __nonnull)value;

/*!
 @brief Returns a function which performs a map lookup.The returned function throws an <code>IllegalArgumentException</code>
  if given a key that does not exist in the map.
 See also <code>forMap(Map, Object)</code>
 , which returns a default value in this case. 
 <p>Note: if <code>map</code> is a <code>BiMap</code> (or can be one), you
  can use <code>Maps.asConverter</code> instead to get a
  function that also supports reverse conversion. 
 <p><b>Java 8 users:</b> if you are okay with <code>null</code> being returned for an unrecognized
  key (instead of an exception being thrown), you can use the method reference <code>map::get</code>
  instead.
 */
+ (id<ComGoogleCommonBaseFunction>)forMapWithJavaUtilMap:(id<JavaUtilMap> __nonnull)map;

/*!
 @brief Returns a function which performs a map lookup with a default value.The function created by
  this method returns <code>defaultValue</code> for all inputs that do not belong to the map's key
  set.
 See also <code>forMap(Map)</code>, which throws an exception in this case. 
 <p><b>Java 8 users:</b> you can just write the lambda expression <code>k ->
  map.getWithDefault(k, defaultValue)</code>
  instead.
 @param map source map that determines the function behavior
 @param defaultValue the value to return for inputs that aren't map keys
 @return function that returns <code>map.get(a)</code> when <code>a</code> is a key, or <code>defaultValue</code>
  otherwise
 */
+ (id<ComGoogleCommonBaseFunction>)forMapWithJavaUtilMap:(id<JavaUtilMap> __nonnull)map
                                                  withId:(id __nonnull)defaultValue;

/*!
 @brief Creates a function that returns the same boolean output as the given predicate for all inputs.
 <p>The returned function is <i>consistent with equals</i> (as documented at <code>Function.apply</code>
 ) if and only if <code>predicate</code> is itself consistent with equals. 
 <p><b>Java 8 users:</b> use the method reference <code>predicate::test</code> instead.
 */
+ (id<ComGoogleCommonBaseFunction>)forPredicateWithComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate> __nonnull)predicate;

/*!
 @brief Returns a function that ignores its input and returns the result of <code>supplier.get()</code>.
 <p><b>Java 8 users:</b> use the lambda expression <code>o -> supplier.get()</code> instead.
 @since 10.0
 */
+ (id<ComGoogleCommonBaseFunction>)forSupplierWithComGoogleCommonBaseSupplier:(id<ComGoogleCommonBaseSupplier> __nonnull)supplier;

/*!
 @brief Returns the identity function.
 */
+ (id<ComGoogleCommonBaseFunction>)identity;

/*!
 @brief A function equivalent to the method reference <code>Object::toString</code>, for users not yet using
  Java 8.The function simply invokes <code>toString</code> on its argument and returns the result.
 It
  throws a <code>NullPointerException</code> on null input. 
 <p><b>Warning:</b> The returned function may not be <i>consistent with equals</i> (as
  documented at <code>Function.apply</code>). For example, this function yields different results for
  the two equal instances <code>ImmutableSet.of(1, 2)</code> and <code>ImmutableSet.of(2, 1)</code>.
  
 <p><b>Warning:</b> as with all function types in this package, avoid depending on the specific 
 <code>equals</code>, <code>hashCode</code> or <code>toString</code> behavior of the returned function. A
  future migration to <code>java.util.function</code> will not preserve this behavior. 
 <p><b>For Java 8 users:</b> use the method reference <code>Object::toString</code> instead. In the
  future, when this class requires Java 8, this method will be deprecated. See <code>Function</code>
  for more important information about the Java 8 transition.
 */
+ (id<ComGoogleCommonBaseFunction>)toStringFunction;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBaseFunctions)

FOUNDATION_EXPORT id<ComGoogleCommonBaseFunction> ComGoogleCommonBaseFunctions_toStringFunction(void);

FOUNDATION_EXPORT id<ComGoogleCommonBaseFunction> ComGoogleCommonBaseFunctions_identity(void);

FOUNDATION_EXPORT id<ComGoogleCommonBaseFunction> ComGoogleCommonBaseFunctions_forMapWithJavaUtilMap_(id<JavaUtilMap> map);

FOUNDATION_EXPORT id<ComGoogleCommonBaseFunction> ComGoogleCommonBaseFunctions_forMapWithJavaUtilMap_withId_(id<JavaUtilMap> map, id defaultValue);

FOUNDATION_EXPORT id<ComGoogleCommonBaseFunction> ComGoogleCommonBaseFunctions_composeWithComGoogleCommonBaseFunction_withComGoogleCommonBaseFunction_(id<ComGoogleCommonBaseFunction> g, id<ComGoogleCommonBaseFunction> f);

FOUNDATION_EXPORT id<ComGoogleCommonBaseFunction> ComGoogleCommonBaseFunctions_forPredicateWithComGoogleCommonBasePredicate_(id<ComGoogleCommonBasePredicate> predicate);

FOUNDATION_EXPORT id<ComGoogleCommonBaseFunction> ComGoogleCommonBaseFunctions_constantWithId_(id value);

FOUNDATION_EXPORT id<ComGoogleCommonBaseFunction> ComGoogleCommonBaseFunctions_forSupplierWithComGoogleCommonBaseSupplier_(id<ComGoogleCommonBaseSupplier> supplier);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBaseFunctions)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonBaseFunctions")
