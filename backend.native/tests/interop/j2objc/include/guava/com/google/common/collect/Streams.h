//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/build_result/java/com/google/common/collect/Streams.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCollectStreams")
#ifdef RESTRICT_ComGoogleCommonCollectStreams
#define INCLUDE_ALL_ComGoogleCommonCollectStreams 0
#else
#define INCLUDE_ALL_ComGoogleCommonCollectStreams 1
#endif
#undef RESTRICT_ComGoogleCommonCollectStreams

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCollectStreams_) && (INCLUDE_ALL_ComGoogleCommonCollectStreams || defined(INCLUDE_ComGoogleCommonCollectStreams))
#define ComGoogleCommonCollectStreams_

@class ComGoogleCommonBaseOptional;
@class IOSObjectArray;
@class JavaUtilOptional;
@class JavaUtilOptionalDouble;
@class JavaUtilOptionalInt;
@class JavaUtilOptionalLong;
@protocol ComGoogleCommonCollectStreams_DoubleFunctionWithIndex;
@protocol ComGoogleCommonCollectStreams_FunctionWithIndex;
@protocol ComGoogleCommonCollectStreams_IntFunctionWithIndex;
@protocol ComGoogleCommonCollectStreams_LongFunctionWithIndex;
@protocol JavaLangIterable;
@protocol JavaUtilCollection;
@protocol JavaUtilFunctionBiConsumer;
@protocol JavaUtilFunctionBiFunction;
@protocol JavaUtilIterator;
@protocol JavaUtilStreamDoubleStream;
@protocol JavaUtilStreamIntStream;
@protocol JavaUtilStreamLongStream;
@protocol JavaUtilStreamStream;

/*!
 @brief Static utility methods related to <code>Stream</code> instances.
 @since 21.0
 */
@interface ComGoogleCommonCollectStreams : NSObject

#pragma mark Public

/*!
 @brief Returns a <code>DoubleStream</code> containing the elements of the first stream, followed by the
  elements of the second stream, and so on.
 <p>This is equivalent to <code>Stream.of(streams).flatMapToDouble(stream -> stream)</code>, but the
  returned stream may perform better.
 - seealso: DoubleStream#concat(DoubleStream, DoubleStream)
 */
+ (id<JavaUtilStreamDoubleStream>)concatWithJavaUtilStreamDoubleStreamArray:(IOSObjectArray *)streams;

/*!
 @brief Returns an <code>IntStream</code> containing the elements of the first stream, followed by the
  elements of the second stream, and so on.
 <p>This is equivalent to <code>Stream.of(streams).flatMapToInt(stream -> stream)</code>, but the
  returned stream may perform better.
 - seealso: IntStream#concat(IntStream, IntStream)
 */
+ (id<JavaUtilStreamIntStream>)concatWithJavaUtilStreamIntStreamArray:(IOSObjectArray *)streams;

/*!
 @brief Returns a <code>LongStream</code> containing the elements of the first stream, followed by the
  elements of the second stream, and so on.
 <p>This is equivalent to <code>Stream.of(streams).flatMapToLong(stream -> stream)</code>, but the
  returned stream may perform better.
 - seealso: LongStream#concat(LongStream, LongStream)
 */
+ (id<JavaUtilStreamLongStream>)concatWithJavaUtilStreamLongStreamArray:(IOSObjectArray *)streams;

/*!
 @brief Returns a <code>Stream</code> containing the elements of the first stream, followed by the elements
  of the second stream, and so on.
 <p>This is equivalent to <code>Stream.of(streams).flatMap(stream -> stream)</code>, but the returned
  stream may perform better.
 - seealso: Stream#concat(Stream, Stream)
 */
+ (id<JavaUtilStreamStream>)concatWithJavaUtilStreamStreamArray:(IOSObjectArray *)streams;

/*!
 @brief Returns the last element of the specified stream, or <code>OptionalDouble.empty</code> if the stream
  is empty.
 <p>Equivalent to <code>stream.reduce((a, b) -> b)</code>, but may perform significantly better. This
  method's runtime will be between O(log n) and O(n), performing better on <a href="http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html">
 efficiently splittable</a>
  streams.
 - seealso: DoubleStream#findFirst()
 @throw NullPointerExceptionif the last element of the stream is null
 */
+ (JavaUtilOptionalDouble *)findLastWithJavaUtilStreamDoubleStream:(id<JavaUtilStreamDoubleStream>)stream;

/*!
 @brief Returns the last element of the specified stream, or <code>OptionalInt.empty</code> if the stream is
  empty.
 <p>Equivalent to <code>stream.reduce((a, b) -> b)</code>, but may perform significantly better. This
  method's runtime will be between O(log n) and O(n), performing better on <a href="http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html">
 efficiently splittable</a>
  streams.
 - seealso: IntStream#findFirst()
 @throw NullPointerExceptionif the last element of the stream is null
 */
+ (JavaUtilOptionalInt *)findLastWithJavaUtilStreamIntStream:(id<JavaUtilStreamIntStream>)stream;

/*!
 @brief Returns the last element of the specified stream, or <code>OptionalLong.empty</code> if the stream
  is empty.
 <p>Equivalent to <code>stream.reduce((a, b) -> b)</code>, but may perform significantly better. This
  method's runtime will be between O(log n) and O(n), performing better on <a href="http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html">
 efficiently splittable</a>
  streams.
 - seealso: LongStream#findFirst()
 @throw NullPointerExceptionif the last element of the stream is null
 */
+ (JavaUtilOptionalLong *)findLastWithJavaUtilStreamLongStream:(id<JavaUtilStreamLongStream>)stream;

/*!
 @brief Returns the last element of the specified stream, or <code>java.util.Optional.empty</code> if the
  stream is empty.
 <p>Equivalent to <code>stream.reduce((a, b) -> b)</code>, but may perform significantly better. This
  method's runtime will be between O(log n) and O(n), performing better on <a href="http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html">
 efficiently splittable</a>
  streams. 
 <p>If the stream has nondeterministic order, this has equivalent semantics to <code>Stream.findAny</code>
  (which you might as well use).
 - seealso: Stream#findFirst()
 @throw NullPointerExceptionif the last element of the stream is null
 */
+ (JavaUtilOptional *)findLastWithJavaUtilStreamStream:(id<JavaUtilStreamStream>)stream;

/*!
 @brief Invokes <code>consumer</code> once for each pair of <i>corresponding</i> elements in <code>streamA</code>
  and <code>streamB</code>.If one stream is longer than the other, the extra elements are silently
  ignored.
 Elements passed to the consumer are guaranteed to come from the same position in their
  respective source streams. For example: 
 @code
 Streams.forEachPair(
    Stream.of("foo1", "foo2", "foo3"),
    Stream.of("bar1", "bar2"),
    (arg1, arg2) -> System.out.println(arg1 + ":" + arg2) 
 
@endcode
  
 <p>will print: 
 @code
 foo1:bar1
  foo2:bar2 
 
@endcode
  
 <p><b>Warning:</b> If either supplied stream is a parallel stream, the same correspondence
  between elements will be made, but the order in which those pairs of elements are passed to the
  consumer is <i>not</i> defined. 
 <p>Note that many usages of this method can be replaced with simpler calls to <code>zip</code>.
  This method behaves equivalently to zipping the stream elements into
  temporary pair objects and then using <code>Stream.forEach</code> on that stream.
 @since 22.0
 */
+ (void)forEachPairWithJavaUtilStreamStream:(id<JavaUtilStreamStream>)streamA
                   withJavaUtilStreamStream:(id<JavaUtilStreamStream>)streamB
             withJavaUtilFunctionBiConsumer:(id<JavaUtilFunctionBiConsumer>)consumer;

/*!
 @brief Returns a stream consisting of the results of applying the given function to the elements of 
 <code>stream</code> and their indexes in the stream.For example, 
 @code
 mapWithIndex(
      DoubleStream.of(0, 1, 2),
      (x, index) -> x + ":" + index) 
 
@endcode
  
 <p>...would return <code>Stream.of("0.0:0", "1.0:1", "2.0:2")</code>.
 <p>The resulting stream is <a href="http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html">
 efficiently splittable</a>
  if and only if <code>stream</code> was efficiently splittable and its underlying spliterator
  reported <code>Spliterator.SUBSIZED</code>. This is generally the case if the underlying stream
  comes from a data structure supporting efficient indexed random access, typically an array or
  list. 
 <p>The order of the resulting stream is defined if and only if the order of the original stream
  was defined.
 */
+ (id<JavaUtilStreamStream>)mapWithIndexWithJavaUtilStreamDoubleStream:(id<JavaUtilStreamDoubleStream>)stream
             withComGoogleCommonCollectStreams_DoubleFunctionWithIndex:(id<ComGoogleCommonCollectStreams_DoubleFunctionWithIndex>)function;

/*!
 @brief Returns a stream consisting of the results of applying the given function to the elements of 
 <code>stream</code> and their indexes in the stream.For example, 
 @code
 mapWithIndex(
      IntStream.of(0, 1, 2),
      (i, index) -> i + ":" + index) 
 
@endcode
  
 <p>...would return <code>Stream.of("0:0", "1:1", "2:2")</code>.
 <p>The resulting stream is <a href="http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html">
 efficiently splittable</a>
  if and only if <code>stream</code> was efficiently splittable and its underlying spliterator
  reported <code>Spliterator.SUBSIZED</code>. This is generally the case if the underlying stream
  comes from a data structure supporting efficient indexed random access, typically an array or
  list. 
 <p>The order of the resulting stream is defined if and only if the order of the original stream
  was defined.
 */
+ (id<JavaUtilStreamStream>)mapWithIndexWithJavaUtilStreamIntStream:(id<JavaUtilStreamIntStream>)stream
             withComGoogleCommonCollectStreams_IntFunctionWithIndex:(id<ComGoogleCommonCollectStreams_IntFunctionWithIndex>)function;

/*!
 @brief Returns a stream consisting of the results of applying the given function to the elements of 
 <code>stream</code> and their indexes in the stream.For example, 
 @code
 mapWithIndex(
      LongStream.of(0, 1, 2),
      (i, index) -> i + ":" + index) 
 
@endcode
  
 <p>...would return <code>Stream.of("0:0", "1:1", "2:2")</code>.
 <p>The resulting stream is <a href="http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html">
 efficiently splittable</a>
  if and only if <code>stream</code> was efficiently splittable and its underlying spliterator
  reported <code>Spliterator.SUBSIZED</code>. This is generally the case if the underlying stream
  comes from a data structure supporting efficient indexed random access, typically an array or
  list. 
 <p>The order of the resulting stream is defined if and only if the order of the original stream
  was defined.
 */
+ (id<JavaUtilStreamStream>)mapWithIndexWithJavaUtilStreamLongStream:(id<JavaUtilStreamLongStream>)stream
             withComGoogleCommonCollectStreams_LongFunctionWithIndex:(id<ComGoogleCommonCollectStreams_LongFunctionWithIndex>)function;

/*!
 @brief Returns a stream consisting of the results of applying the given function to the elements of 
 <code>stream</code> and their indices in the stream.For example, 
 @code
 mapWithIndex(
      Stream.of("a", "b", "c"),
      (str, index) -> str + ":" + index) 
 
@endcode
  
 <p>would return <code>Stream.of("a:0", "b:1", "c:2")</code>.
 <p>The resulting stream is <a href="http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html">
 efficiently splittable</a>
  if and only if <code>stream</code> was efficiently splittable and its underlying spliterator
  reported <code>Spliterator.SUBSIZED</code>. This is generally the case if the underlying stream
  comes from a data structure supporting efficient indexed random access, typically an array or
  list. 
 <p>The order of the resulting stream is defined if and only if the order of the original stream
  was defined.
 */
+ (id<JavaUtilStreamStream>)mapWithIndexWithJavaUtilStreamStream:(id<JavaUtilStreamStream>)stream
             withComGoogleCommonCollectStreams_FunctionWithIndex:(id<ComGoogleCommonCollectStreams_FunctionWithIndex>)function;

/*!
 @brief Returns <code>Collection.stream</code>.
 */
+ (id<JavaUtilStreamStream>)streamWithJavaUtilCollection:(id<JavaUtilCollection>)collection __attribute__((deprecated));

/*!
 @brief Returns a sequential <code>Stream</code> of the contents of <code>iterable</code>, delegating to <code>Collection.stream</code>
  if possible.
 */
+ (id<JavaUtilStreamStream>)streamWithJavaLangIterable:(id<JavaLangIterable>)iterable;

/*!
 @brief Returns a sequential <code>Stream</code> of the remaining contents of <code>iterator</code>.Do not use 
 <code>iterator</code> directly after passing it to this method.
 */
+ (id<JavaUtilStreamStream>)streamWithJavaUtilIterator:(id<JavaUtilIterator>)iterator;

/*!
 @brief If a value is present in <code>optional</code>, returns a stream containing only that element,
  otherwise returns an empty stream.
 */
+ (id<JavaUtilStreamStream>)streamWithComGoogleCommonBaseOptional:(ComGoogleCommonBaseOptional *)optional;

/*!
 @brief If a value is present in <code>optional</code>, returns a stream containing only that element,
  otherwise returns an empty stream.
 <p><b>Java 9 users:</b> use <code>optional.stream()</code> instead.
 */
+ (id<JavaUtilStreamStream>)streamWithJavaUtilOptional:(JavaUtilOptional *)optional;

/*!
 @brief If a value is present in <code>optional</code>, returns a stream containing only that element,
  otherwise returns an empty stream.
 <p><b>Java 9 users:</b> use <code>optional.stream()</code> instead.
 */
+ (id<JavaUtilStreamDoubleStream>)streamWithJavaUtilOptionalDouble:(JavaUtilOptionalDouble *)optional;

/*!
 @brief If a value is present in <code>optional</code>, returns a stream containing only that element,
  otherwise returns an empty stream.
 <p><b>Java 9 users:</b> use <code>optional.stream()</code> instead.
 */
+ (id<JavaUtilStreamIntStream>)streamWithJavaUtilOptionalInt:(JavaUtilOptionalInt *)optional;

/*!
 @brief If a value is present in <code>optional</code>, returns a stream containing only that element,
  otherwise returns an empty stream.
 <p><b>Java 9 users:</b> use <code>optional.stream()</code> instead.
 */
+ (id<JavaUtilStreamLongStream>)streamWithJavaUtilOptionalLong:(JavaUtilOptionalLong *)optional;

/*!
 @brief Returns a stream in which each element is the result of passing the corresponding elementY of
  each of <code>streamA</code> and <code>streamB</code> to <code>function</code>.
 <p>For example: 
 @code
 Streams.zip(
    Stream.of("foo1", "foo2", "foo3"),
    Stream.of("bar1", "bar2"),
    (arg1, arg2) -> arg1 + ":" + arg2) 
 
@endcode
  
 <p>will return <code>Stream.of("foo1:bar1", "foo2:bar2")</code>.
  
 <p>The resulting stream will only be as long as the shorter of the two input streams; if one
  stream is longer, its extra elements will be ignored. 
 <p>Note that if you are calling <code>Stream.forEach</code> on the resulting stream, you might want
  to consider using <code>forEachPair</code> instead of this method. 
 <p><b>Performance note:</b> The resulting stream is not <a href="http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html">
 efficiently splittable</a>.
  This may harm parallel performance.
 */
+ (id<JavaUtilStreamStream>)zipWithJavaUtilStreamStream:(id<JavaUtilStreamStream>)streamA
                               withJavaUtilStreamStream:(id<JavaUtilStreamStream>)streamB
                         withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)function;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectStreams)

FOUNDATION_EXPORT id<JavaUtilStreamStream> ComGoogleCommonCollectStreams_streamWithJavaLangIterable_(id<JavaLangIterable> iterable);

FOUNDATION_EXPORT id<JavaUtilStreamStream> ComGoogleCommonCollectStreams_streamWithJavaUtilCollection_(id<JavaUtilCollection> collection);

FOUNDATION_EXPORT id<JavaUtilStreamStream> ComGoogleCommonCollectStreams_streamWithJavaUtilIterator_(id<JavaUtilIterator> iterator);

FOUNDATION_EXPORT id<JavaUtilStreamStream> ComGoogleCommonCollectStreams_streamWithComGoogleCommonBaseOptional_(ComGoogleCommonBaseOptional *optional);

FOUNDATION_EXPORT id<JavaUtilStreamStream> ComGoogleCommonCollectStreams_streamWithJavaUtilOptional_(JavaUtilOptional *optional);

FOUNDATION_EXPORT id<JavaUtilStreamIntStream> ComGoogleCommonCollectStreams_streamWithJavaUtilOptionalInt_(JavaUtilOptionalInt *optional);

FOUNDATION_EXPORT id<JavaUtilStreamLongStream> ComGoogleCommonCollectStreams_streamWithJavaUtilOptionalLong_(JavaUtilOptionalLong *optional);

FOUNDATION_EXPORT id<JavaUtilStreamDoubleStream> ComGoogleCommonCollectStreams_streamWithJavaUtilOptionalDouble_(JavaUtilOptionalDouble *optional);

FOUNDATION_EXPORT id<JavaUtilStreamStream> ComGoogleCommonCollectStreams_concatWithJavaUtilStreamStreamArray_(IOSObjectArray *streams);

FOUNDATION_EXPORT id<JavaUtilStreamIntStream> ComGoogleCommonCollectStreams_concatWithJavaUtilStreamIntStreamArray_(IOSObjectArray *streams);

FOUNDATION_EXPORT id<JavaUtilStreamLongStream> ComGoogleCommonCollectStreams_concatWithJavaUtilStreamLongStreamArray_(IOSObjectArray *streams);

FOUNDATION_EXPORT id<JavaUtilStreamDoubleStream> ComGoogleCommonCollectStreams_concatWithJavaUtilStreamDoubleStreamArray_(IOSObjectArray *streams);

FOUNDATION_EXPORT id<JavaUtilStreamStream> ComGoogleCommonCollectStreams_zipWithJavaUtilStreamStream_withJavaUtilStreamStream_withJavaUtilFunctionBiFunction_(id<JavaUtilStreamStream> streamA, id<JavaUtilStreamStream> streamB, id<JavaUtilFunctionBiFunction> function);

FOUNDATION_EXPORT void ComGoogleCommonCollectStreams_forEachPairWithJavaUtilStreamStream_withJavaUtilStreamStream_withJavaUtilFunctionBiConsumer_(id<JavaUtilStreamStream> streamA, id<JavaUtilStreamStream> streamB, id<JavaUtilFunctionBiConsumer> consumer);

FOUNDATION_EXPORT id<JavaUtilStreamStream> ComGoogleCommonCollectStreams_mapWithIndexWithJavaUtilStreamStream_withComGoogleCommonCollectStreams_FunctionWithIndex_(id<JavaUtilStreamStream> stream, id<ComGoogleCommonCollectStreams_FunctionWithIndex> function);

FOUNDATION_EXPORT id<JavaUtilStreamStream> ComGoogleCommonCollectStreams_mapWithIndexWithJavaUtilStreamIntStream_withComGoogleCommonCollectStreams_IntFunctionWithIndex_(id<JavaUtilStreamIntStream> stream, id<ComGoogleCommonCollectStreams_IntFunctionWithIndex> function);

FOUNDATION_EXPORT id<JavaUtilStreamStream> ComGoogleCommonCollectStreams_mapWithIndexWithJavaUtilStreamLongStream_withComGoogleCommonCollectStreams_LongFunctionWithIndex_(id<JavaUtilStreamLongStream> stream, id<ComGoogleCommonCollectStreams_LongFunctionWithIndex> function);

FOUNDATION_EXPORT id<JavaUtilStreamStream> ComGoogleCommonCollectStreams_mapWithIndexWithJavaUtilStreamDoubleStream_withComGoogleCommonCollectStreams_DoubleFunctionWithIndex_(id<JavaUtilStreamDoubleStream> stream, id<ComGoogleCommonCollectStreams_DoubleFunctionWithIndex> function);

FOUNDATION_EXPORT JavaUtilOptional *ComGoogleCommonCollectStreams_findLastWithJavaUtilStreamStream_(id<JavaUtilStreamStream> stream);

FOUNDATION_EXPORT JavaUtilOptionalInt *ComGoogleCommonCollectStreams_findLastWithJavaUtilStreamIntStream_(id<JavaUtilStreamIntStream> stream);

FOUNDATION_EXPORT JavaUtilOptionalLong *ComGoogleCommonCollectStreams_findLastWithJavaUtilStreamLongStream_(id<JavaUtilStreamLongStream> stream);

FOUNDATION_EXPORT JavaUtilOptionalDouble *ComGoogleCommonCollectStreams_findLastWithJavaUtilStreamDoubleStream_(id<JavaUtilStreamDoubleStream> stream);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectStreams)

#endif

#if !defined (ComGoogleCommonCollectStreams_FunctionWithIndex_) && (INCLUDE_ALL_ComGoogleCommonCollectStreams || defined(INCLUDE_ComGoogleCommonCollectStreams_FunctionWithIndex))
#define ComGoogleCommonCollectStreams_FunctionWithIndex_

/*!
 @brief An analogue of <code>java.util.function.Function</code> also accepting an index.
 <p>This interface is only intended for use by callers of <code>mapWithIndex(Stream,
 FunctionWithIndex)</code>
 .
 @since 21.0
 */
@protocol ComGoogleCommonCollectStreams_FunctionWithIndex < JavaObject >

/*!
 @brief Applies this function to the given argument and its index within a stream.
 */
- (id)applyWithId:(id)from
         withLong:(jlong)index;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectStreams_FunctionWithIndex)

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectStreams_FunctionWithIndex)

#endif

#if !defined (ComGoogleCommonCollectStreams_IntFunctionWithIndex_) && (INCLUDE_ALL_ComGoogleCommonCollectStreams || defined(INCLUDE_ComGoogleCommonCollectStreams_IntFunctionWithIndex))
#define ComGoogleCommonCollectStreams_IntFunctionWithIndex_

/*!
 @brief An analogue of <code>java.util.function.IntFunction</code> also accepting an index.
 <p>This interface is only intended for use by callers of <code>mapWithIndex(IntStream,
 IntFunctionWithIndex)</code>
 .
 @since 21.0
 */
@protocol ComGoogleCommonCollectStreams_IntFunctionWithIndex < JavaObject >

/*!
 @brief Applies this function to the given argument and its index within a stream.
 */
- (id)applyWithInt:(jint)from
          withLong:(jlong)index;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectStreams_IntFunctionWithIndex)

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectStreams_IntFunctionWithIndex)

#endif

#if !defined (ComGoogleCommonCollectStreams_LongFunctionWithIndex_) && (INCLUDE_ALL_ComGoogleCommonCollectStreams || defined(INCLUDE_ComGoogleCommonCollectStreams_LongFunctionWithIndex))
#define ComGoogleCommonCollectStreams_LongFunctionWithIndex_

/*!
 @brief An analogue of <code>java.util.function.LongFunction</code> also accepting an index.
 <p>This interface is only intended for use by callers of <code>mapWithIndex(LongStream,
 LongFunctionWithIndex)</code>
 .
 @since 21.0
 */
@protocol ComGoogleCommonCollectStreams_LongFunctionWithIndex < JavaObject >

/*!
 @brief Applies this function to the given argument and its index within a stream.
 */
- (id)applyWithLong:(jlong)from
           withLong:(jlong)index;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectStreams_LongFunctionWithIndex)

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectStreams_LongFunctionWithIndex)

#endif

#if !defined (ComGoogleCommonCollectStreams_DoubleFunctionWithIndex_) && (INCLUDE_ALL_ComGoogleCommonCollectStreams || defined(INCLUDE_ComGoogleCommonCollectStreams_DoubleFunctionWithIndex))
#define ComGoogleCommonCollectStreams_DoubleFunctionWithIndex_

/*!
 @brief An analogue of <code>java.util.function.DoubleFunction</code> also accepting an index.
 <p>This interface is only intended for use by callers of <code>mapWithIndex(DoubleStream,
 DoubleFunctionWithIndex)</code>
 .
 @since 21.0
 */
@protocol ComGoogleCommonCollectStreams_DoubleFunctionWithIndex < JavaObject >

/*!
 @brief Applies this function to the given argument and its index within a stream.
 */
- (id)applyWithDouble:(jdouble)from
             withLong:(jlong)index;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectStreams_DoubleFunctionWithIndex)

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectStreams_DoubleFunctionWithIndex)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCollectStreams")
