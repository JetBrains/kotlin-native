//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/build_result/java/com/google/common/util/concurrent/AtomicDouble.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonUtilConcurrentAtomicDouble")
#ifdef RESTRICT_ComGoogleCommonUtilConcurrentAtomicDouble
#define INCLUDE_ALL_ComGoogleCommonUtilConcurrentAtomicDouble 0
#else
#define INCLUDE_ALL_ComGoogleCommonUtilConcurrentAtomicDouble 1
#endif
#undef RESTRICT_ComGoogleCommonUtilConcurrentAtomicDouble

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonUtilConcurrentAtomicDouble_) && (INCLUDE_ALL_ComGoogleCommonUtilConcurrentAtomicDouble || defined(INCLUDE_ComGoogleCommonUtilConcurrentAtomicDouble))
#define ComGoogleCommonUtilConcurrentAtomicDouble_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

/*!
 @brief A <code>double</code> value that may be updated atomically.See the <code>java.util.concurrent.atomic</code>
  package specification for description of the properties of atomic
  variables.
 An <code>AtomicDouble</code> is used in applications such as atomic accumulation, and
  cannot be used as a replacement for a <code>Double</code>. However, this class does extend <code>Number</code>
  to allow uniform access by tools and utilities that deal with numerically-based classes. 
 <p><a name="bitEquals"></a>This class compares primitive <code>double</code> values in methods such as 
 <code>compareAndSet</code> by comparing their bitwise representation using <code>Double.doubleToRawLongBits</code>
 , which differs from both the primitive double <code>==</code> operator and
  from <code>Double.equals</code>, as if implemented by: 
 @code
 static boolean bitEquals(double x, double y) {
    long xBits = Double.doubleToRawLongBits(x);
    long yBits = Double.doubleToRawLongBits(y);
    return xBits == yBits;
  } 
 
@endcode
  
 <p>It is possible to write a more scalable updater, at the cost of giving up strict atomicity.
  See for example <a href="http://gee.cs.oswego.edu/dl/jsr166/dist/jsr166edocs/jsr166e/DoubleAdder.html">
  DoubleAdder</a> and <a href="http://gee.cs.oswego.edu/dl/jsr166/dist/jsr166edocs/jsr166e/DoubleMaxUpdater.html">
  DoubleMaxUpdater</a>.
 @author Doug Lea
 @author Martin Buchholz
 @since 11.0
 */
@interface ComGoogleCommonUtilConcurrentAtomicDouble : NSNumber < JavaIoSerializable >

#pragma mark Public

/*!
 @brief Creates a new <code>AtomicDouble</code> with initial value <code>0.0</code>.
 */
- (instancetype __nonnull)init;

/*!
 @brief Creates a new <code>AtomicDouble</code> with the given initial value.
 @param initialValue the initial value
 */
- (instancetype __nonnull)initWithDouble:(jdouble)initialValue;

/*!
 @brief Atomically adds the given value to the current value.
 @param delta the value to add
 @return the updated value
 */
- (jdouble)addAndGetWithDouble:(jdouble)delta;

/*!
 @brief Atomically sets the value to the given updated value if the current value is <a href="#bitEquals">
 bitwise equal</a> to the expected value.
 @param expect the expected value
 @param update the new value
 @return <code>true</code> if successful. False return indicates that the actual value was not
      bitwise equal to the expected value.
 */
- (jboolean)compareAndSetWithDouble:(jdouble)expect
                         withDouble:(jdouble)update;

/*!
 @brief Returns the value of this <code>AtomicDouble</code> as a <code>double</code>.
 */
- (jdouble)doubleValue;

/*!
 @brief Returns the value of this <code>AtomicDouble</code> as a <code>float</code> after a narrowing primitive
  conversion.
 */
- (jfloat)floatValue;

/*!
 @brief Gets the current value.
 @return the current value
 */
- (jdouble)get;

/*!
 @brief Atomically adds the given value to the current value.
 @param delta the value to add
 @return the previous value
 */
- (jdouble)getAndAddWithDouble:(jdouble)delta;

/*!
 @brief Atomically sets to the given value and returns the old value.
 @param newValue the new value
 @return the previous value
 */
- (jdouble)getAndSetWithDouble:(jdouble)newValue;

- (NSUInteger)hash;

/*!
 @brief Returns the value of this <code>AtomicDouble</code> as an <code>int</code> after a narrowing primitive
  conversion.
 */
- (jint)intValue;

- (jboolean)isEqual:(id __nonnull)obj;

/*!
 @brief Eventually sets to the given value.
 @param newValue the new value
 */
- (void)lazySetWithDouble:(jdouble)newValue;

/*!
 @brief Returns the value of this <code>AtomicDouble</code> as a <code>long</code> after a narrowing primitive
  conversion.
 */
- (jlong)longLongValue;

/*!
 @brief Sets to the given value.
 @param newValue the new value
 */
- (void)setWithDouble:(jdouble)newValue;

/*!
 @brief Returns the String representation of the current value.
 @return the String representation of the current value
 */
- (NSString *)description;

/*!
 @brief Atomically sets the value to the given updated value if the current value is <a href="#bitEquals">
 bitwise equal</a> to the expected value.
 <p>May <a href="http://download.oracle.com/javase/7/docs/api/java/util/concurrent/atomic/package-summary.html#Spurious">
  fail spuriously</a> and does not provide ordering guarantees, so is only rarely an appropriate
  alternative to <code>compareAndSet</code>.
 @param expect the expected value
 @param update the new value
 @return <code>true</code> if successful
 */
- (jboolean)weakCompareAndSetWithDouble:(jdouble)expect
                             withDouble:(jdouble)update;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonUtilConcurrentAtomicDouble)

FOUNDATION_EXPORT void ComGoogleCommonUtilConcurrentAtomicDouble_initWithDouble_(ComGoogleCommonUtilConcurrentAtomicDouble *self, jdouble initialValue);

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentAtomicDouble *new_ComGoogleCommonUtilConcurrentAtomicDouble_initWithDouble_(jdouble initialValue) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentAtomicDouble *create_ComGoogleCommonUtilConcurrentAtomicDouble_initWithDouble_(jdouble initialValue);

FOUNDATION_EXPORT void ComGoogleCommonUtilConcurrentAtomicDouble_init(ComGoogleCommonUtilConcurrentAtomicDouble *self);

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentAtomicDouble *new_ComGoogleCommonUtilConcurrentAtomicDouble_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentAtomicDouble *create_ComGoogleCommonUtilConcurrentAtomicDouble_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentAtomicDouble)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonUtilConcurrentAtomicDouble")
