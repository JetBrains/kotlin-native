//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/build_result/java/com/google/common/base/Ascii.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonBaseAscii")
#ifdef RESTRICT_ComGoogleCommonBaseAscii
#define INCLUDE_ALL_ComGoogleCommonBaseAscii 0
#else
#define INCLUDE_ALL_ComGoogleCommonBaseAscii 1
#endif
#undef RESTRICT_ComGoogleCommonBaseAscii

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonBaseAscii_) && (INCLUDE_ALL_ComGoogleCommonBaseAscii || defined(INCLUDE_ComGoogleCommonBaseAscii))
#define ComGoogleCommonBaseAscii_

@protocol JavaLangCharSequence;

/*!
 @brief Static methods pertaining to ASCII characters (those in the range of values <code>0x00</code> through 
 <code>0x7F</code>), and to strings containing such characters.
 <p>ASCII utilities also exist in other classes of this package: 
 <ul>
    <!-- TODO(kevinb): how can we make this not produce a warning when building gwt javadoc? -->
    <li><code>Charsets.US_ASCII</code> specifies the <code>Charset</code> of ASCII characters.
    <li><code>CharMatcher.ascii</code> matches ASCII characters and provides text processing methods
        which operate only on the ASCII characters of a string. 
 </ul>
 @author Catherine Berry
 @author Gregory Kick
 @since 7.0
 */
@interface ComGoogleCommonBaseAscii : NSObject
@property (readonly, class) jbyte NUL NS_SWIFT_NAME(NUL);
@property (readonly, class) jbyte SOH NS_SWIFT_NAME(SOH);
@property (readonly, class) jbyte STX NS_SWIFT_NAME(STX);
@property (readonly, class) jbyte ETX NS_SWIFT_NAME(ETX);
@property (readonly, class) jbyte EOT NS_SWIFT_NAME(EOT);
@property (readonly, class) jbyte ENQ NS_SWIFT_NAME(ENQ);
@property (readonly, class) jbyte ACK NS_SWIFT_NAME(ACK);
@property (readonly, class) jbyte BEL NS_SWIFT_NAME(BEL);
@property (readonly, class) jbyte BS NS_SWIFT_NAME(BS);
@property (readonly, class) jbyte HT NS_SWIFT_NAME(HT);
@property (readonly, class) jbyte LF NS_SWIFT_NAME(LF);
@property (readonly, class) jbyte NL NS_SWIFT_NAME(NL);
@property (readonly, class) jbyte VT NS_SWIFT_NAME(VT);
@property (readonly, class) jbyte FF NS_SWIFT_NAME(FF);
@property (readonly, class) jbyte CR NS_SWIFT_NAME(CR);
@property (readonly, class) jbyte SO NS_SWIFT_NAME(SO);
@property (readonly, class) jbyte SI NS_SWIFT_NAME(SI);
@property (readonly, class) jbyte DLE NS_SWIFT_NAME(DLE);
@property (readonly, class) jbyte DC1 NS_SWIFT_NAME(DC1);
@property (readonly, class) jbyte XON NS_SWIFT_NAME(XON);
@property (readonly, class) jbyte DC2 NS_SWIFT_NAME(DC2);
@property (readonly, class) jbyte DC3 NS_SWIFT_NAME(DC3);
@property (readonly, class) jbyte XOFF NS_SWIFT_NAME(XOFF);
@property (readonly, class) jbyte DC4 NS_SWIFT_NAME(DC4);
@property (readonly, class) jbyte NAK NS_SWIFT_NAME(NAK);
@property (readonly, class) jbyte SYN NS_SWIFT_NAME(SYN);
@property (readonly, class) jbyte ETB NS_SWIFT_NAME(ETB);
@property (readonly, class) jbyte CAN NS_SWIFT_NAME(CAN);
@property (readonly, class) jbyte EM NS_SWIFT_NAME(EM);
@property (readonly, class) jbyte SUB NS_SWIFT_NAME(SUB);
@property (readonly, class) jbyte ESC NS_SWIFT_NAME(ESC);
@property (readonly, class) jbyte FS NS_SWIFT_NAME(FS);
@property (readonly, class) jbyte GS NS_SWIFT_NAME(GS);
@property (readonly, class) jbyte RS NS_SWIFT_NAME(RS);
@property (readonly, class) jbyte US NS_SWIFT_NAME(US);
@property (readonly, class) jbyte SP NS_SWIFT_NAME(SP);
@property (readonly, class) jbyte SPACE NS_SWIFT_NAME(SPACE);
@property (readonly, class) jbyte DEL NS_SWIFT_NAME(DEL);
@property (readonly, class) jchar MIN NS_SWIFT_NAME(MIN);
@property (readonly, class) jchar MAX NS_SWIFT_NAME(MAX);

+ (jbyte)NUL;

+ (jbyte)SOH;

+ (jbyte)STX;

+ (jbyte)ETX;

+ (jbyte)EOT;

+ (jbyte)ENQ;

+ (jbyte)ACK;

+ (jbyte)BEL;

+ (jbyte)BS;

+ (jbyte)HT;

+ (jbyte)LF;

+ (jbyte)NL;

+ (jbyte)VT;

+ (jbyte)FF;

+ (jbyte)CR;

+ (jbyte)SO;

+ (jbyte)SI;

+ (jbyte)DLE;

+ (jbyte)DC1;

+ (jbyte)XON;

+ (jbyte)DC2;

+ (jbyte)DC3;

+ (jbyte)XOFF;

+ (jbyte)DC4;

+ (jbyte)NAK;

+ (jbyte)SYN;

+ (jbyte)ETB;

+ (jbyte)CAN;

+ (jbyte)EM;

+ (jbyte)SUB;

+ (jbyte)ESC;

+ (jbyte)FS;

+ (jbyte)GS;

+ (jbyte)RS;

+ (jbyte)US;

+ (jbyte)SP;

+ (jbyte)SPACE;

+ (jbyte)DEL;

+ (jchar)MIN;

+ (jchar)MAX;

#pragma mark Public

/*!
 @brief Indicates whether the contents of the given character sequences <code>s1</code> and <code>s2</code> are
  equal, ignoring the case of any ASCII alphabetic characters between <code>'a'</code> and <code>'z'</code>
  or <code>'A'</code> and <code>'Z'</code> inclusive.
 <p>This method is significantly faster than <code>String.equalsIgnoreCase</code> and should be used
  in preference if at least one of the parameters is known to contain only ASCII characters. 
 <p>Note however that this method does not always behave identically to expressions such as: 
 <ul>
    <li><code>string.toUpperCase().equals("UPPER CASE ASCII")</code>
    <li><code>string.toLowerCase().equals("lower case ascii")</code>
  </ul>
  
 <p>due to case-folding of some non-ASCII characters (which does not occur in <code>String.equalsIgnoreCase</code>
 ). However in almost all cases that ASCII strings are used, the author
  probably wanted the behavior provided by this method rather than the subtle and sometimes
  surprising behavior of <code>toUpperCase()</code> and <code>toLowerCase()</code>.
 @since 16.0
 */
+ (jboolean)equalsIgnoreCaseWithJavaLangCharSequence:(id<JavaLangCharSequence> __nonnull)s1
                            withJavaLangCharSequence:(id<JavaLangCharSequence> __nonnull)s2;

/*!
 @brief Indicates whether <code>c</code> is one of the twenty-six lowercase ASCII alphabetic characters
  between <code>'a'</code> and <code>'z'</code> inclusive.All others (including non-ASCII characters)
  return <code>false</code>.
 */
+ (jboolean)isLowerCaseWithChar:(jchar)c;

/*!
 @brief Indicates whether <code>c</code> is one of the twenty-six uppercase ASCII alphabetic characters
  between <code>'A'</code> and <code>'Z'</code> inclusive.All others (including non-ASCII characters)
  return <code>false</code>.
 */
+ (jboolean)isUpperCaseWithChar:(jchar)c;

/*!
 @brief If the argument is an uppercase ASCII character returns the
  lowercase equivalent.Otherwise returns the argument.
 */
+ (jchar)toLowerCaseWithChar:(jchar)c;

/*!
 @brief Returns a copy of the input character sequence in which all uppercase ASCII characters
  have been converted to lowercase.All other characters are copied
  without modification.
 @since 14.0
 */
+ (NSString *)toLowerCaseWithJavaLangCharSequence:(id<JavaLangCharSequence> __nonnull)chars;

/*!
 @brief Returns a copy of the input string in which all uppercase ASCII
  characters
  have been converted to lowercase.All other characters are copied without
  modification.
 */
+ (NSString *)toLowerCaseWithNSString:(NSString * __nonnull)string;

/*!
 @brief If the argument is a lowercase ASCII character returns the
  uppercase equivalent.Otherwise returns the argument.
 */
+ (jchar)toUpperCaseWithChar:(jchar)c;

/*!
 @brief Returns a copy of the input character sequence in which all lowercase ASCII characters
  have been converted to uppercase.All other characters are copied
  without modification.
 @since 14.0
 */
+ (NSString *)toUpperCaseWithJavaLangCharSequence:(id<JavaLangCharSequence> __nonnull)chars;

/*!
 @brief Returns a copy of the input string in which all lowercase ASCII
  characters
  have been converted to uppercase.All other characters are copied without
  modification.
 */
+ (NSString *)toUpperCaseWithNSString:(NSString * __nonnull)string;

/*!
 @brief Truncates the given character sequence to the given maximum length.If the length of the
  sequence is greater than <code>maxLength</code>, the returned string will be exactly <code>maxLength</code>
  chars in length and will end with the given <code>truncationIndicator</code>.
 Otherwise,
  the sequence will be returned as a string with no changes to the content. 
 <p>Examples:
  
 @code
 Ascii.truncate("foobar", 7, "..."); // returns "foobar"
  Ascii.truncate("foobar", 5, "..."); // returns "fo..." 
 
@endcode
  
 <p><b>Note:</b> This method <i>may</i> work with certain non-ASCII text but is not safe for use
  with arbitrary Unicode text. It is mostly intended for use with text that is known to be safe
  for use with it (such as all-ASCII text) and for simple debugging text. When using this method,
  consider the following: 
 <ul>
    <li>it may split surrogate pairs
    <li>it may split characters and combining characters
    <li>it does not consider word boundaries
    <li>if truncating for display to users, there are other considerations that must be taken
        into account   
 <li>the appropriate truncation indicator may be locale-dependent
    <li>it is safe to use non-ASCII characters in the truncation indicator 
 </ul>
 @throw IllegalArgumentExceptionif <code>maxLength</code> is less than the length of <code>truncationIndicator</code>
 @since 16.0
 */
+ (NSString *)truncateWithJavaLangCharSequence:(id<JavaLangCharSequence> __nonnull)seq
                                       withInt:(jint)maxLength
                                  withNSString:(NSString * __nonnull)truncationIndicator;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBaseAscii)

/*!
 @brief Null ('\0'): The all-zeros character which may serve to accomplish time fill and media fill.
 Normally used as a C string terminator. 
 <p>Although RFC 20 names this as "Null", note that it is distinct from the C/C++ "NULL"
  pointer.
 @since 8.0
 */
inline jbyte ComGoogleCommonBaseAscii_get_NUL(void);
#define ComGoogleCommonBaseAscii_NUL 0
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, NUL, jbyte)

/*!
 @brief Start of Heading: A communication control character used at the beginning of a sequence of
  characters which constitute a machine-sensible address or routing information.Such a sequence
  is referred to as the "heading."
 An STX character has the effect of terminating a heading.
 @since 8.0
 */
inline jbyte ComGoogleCommonBaseAscii_get_SOH(void);
#define ComGoogleCommonBaseAscii_SOH 1
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, SOH, jbyte)

/*!
 @brief Start of Text: A communication control character which precedes a sequence of characters that
  is to be treated as an entity and entirely transmitted through to the ultimate destination.
 Such a sequence is referred to as "text." STX may be used to terminate a sequence of characters
  started by SOH.
 @since 8.0
 */
inline jbyte ComGoogleCommonBaseAscii_get_STX(void);
#define ComGoogleCommonBaseAscii_STX 2
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, STX, jbyte)

/*!
 @brief End of Text: A communication control character used to terminate a sequence of characters
  started with STX and transmitted as an entity.
 @since 8.0
 */
inline jbyte ComGoogleCommonBaseAscii_get_ETX(void);
#define ComGoogleCommonBaseAscii_ETX 3
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, ETX, jbyte)

/*!
 @brief End of Transmission: A communication control character used to indicate the conclusion of a
  transmission, which may have contained one or more texts and any associated headings.
 @since 8.0
 */
inline jbyte ComGoogleCommonBaseAscii_get_EOT(void);
#define ComGoogleCommonBaseAscii_EOT 4
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, EOT, jbyte)

/*!
 @brief Enquiry: A communication control character used in data communication systems as a request for
  a response from a remote station.It may be used as a "Who Are You" (WRU) to obtain
  identification, or may be used to obtain station status, or both.
 @since 8.0
 */
inline jbyte ComGoogleCommonBaseAscii_get_ENQ(void);
#define ComGoogleCommonBaseAscii_ENQ 5
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, ENQ, jbyte)

/*!
 @brief Acknowledge: A communication control character transmitted by a receiver as an affirmative
  response to a sender.
 @since 8.0
 */
inline jbyte ComGoogleCommonBaseAscii_get_ACK(void);
#define ComGoogleCommonBaseAscii_ACK 6
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, ACK, jbyte)

/*!
 @brief Bell ('\a'): A character for use when there is a need to call for human attention.It may
  control alarm or attention devices.
 @since 8.0
 */
inline jbyte ComGoogleCommonBaseAscii_get_BEL(void);
#define ComGoogleCommonBaseAscii_BEL 7
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, BEL, jbyte)

/*!
 @brief Backspace ('\b'): A format effector which controls the movement of the printing position one
  printing space backward on the same printing line.
 (Applicable also to display devices.)
 @since 8.0
 */
inline jbyte ComGoogleCommonBaseAscii_get_BS(void);
#define ComGoogleCommonBaseAscii_BS 8
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, BS, jbyte)

/*!
 @brief Horizontal Tabulation ('\t'): A format effector which controls the movement of the printing
  position to the next in a series of predetermined positions along the printing line.
 (Applicable also to display devices and the skip function on punched cards.)
 @since 8.0
 */
inline jbyte ComGoogleCommonBaseAscii_get_HT(void);
#define ComGoogleCommonBaseAscii_HT 9
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, HT, jbyte)

/*!
 @brief Line Feed ('\n'): A format effector which controls the movement of the printing position to the
  next printing line.
 (Applicable also to display devices.) Where appropriate, this character may
  have the meaning "New Line" (NL), a format effector which controls the movement of the printing
  point to the first printing position on the next printing line. Use of this convention requires
  agreement between sender and recipient of data.
 @since 8.0
 */
inline jbyte ComGoogleCommonBaseAscii_get_LF(void);
#define ComGoogleCommonBaseAscii_LF 10
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, LF, jbyte)

/*!
 @brief Alternate name for <code>LF</code>.
 (<code>LF</code> is preferred.)
 @since 8.0
 */
inline jbyte ComGoogleCommonBaseAscii_get_NL(void);
#define ComGoogleCommonBaseAscii_NL 10
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, NL, jbyte)

/*!
 @brief Vertical Tabulation ('\v'): A format effector which controls the movement of the printing
  position to the next in a series of predetermined printing lines.
 (Applicable also to display
  devices.)
 @since 8.0
 */
inline jbyte ComGoogleCommonBaseAscii_get_VT(void);
#define ComGoogleCommonBaseAscii_VT 11
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, VT, jbyte)

/*!
 @brief Form Feed ('\f'): A format effector which controls the movement of the printing position to the
  first pre-determined printing line on the next form or page.
 (Applicable also to display
  devices.)
 @since 8.0
 */
inline jbyte ComGoogleCommonBaseAscii_get_FF(void);
#define ComGoogleCommonBaseAscii_FF 12
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, FF, jbyte)

/*!
 @brief Carriage Return ('\r'): A format effector which controls the movement of the printing position
  to the first printing position on the same printing line.
 (Applicable also to display devices.)
 @since 8.0
 */
inline jbyte ComGoogleCommonBaseAscii_get_CR(void);
#define ComGoogleCommonBaseAscii_CR 13
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, CR, jbyte)

/*!
 @brief Shift Out: A control character indicating that the code combinations which follow shall be
  interpreted as outside of the character set of the standard code table until a Shift In
  character is reached.
 @since 8.0
 */
inline jbyte ComGoogleCommonBaseAscii_get_SO(void);
#define ComGoogleCommonBaseAscii_SO 14
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, SO, jbyte)

/*!
 @brief Shift In: A control character indicating that the code combinations which follow shall be
  interpreted according to the standard code table.
 @since 8.0
 */
inline jbyte ComGoogleCommonBaseAscii_get_SI(void);
#define ComGoogleCommonBaseAscii_SI 15
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, SI, jbyte)

/*!
 @brief Data Link Escape: A communication control character which will change the meaning of a limited
  number of contiguously following characters.It is used exclusively to provide supplementary
  controls in data communication networks.
 @since 8.0
 */
inline jbyte ComGoogleCommonBaseAscii_get_DLE(void);
#define ComGoogleCommonBaseAscii_DLE 16
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, DLE, jbyte)

/*!
 @brief Device Control 1.Characters for the control of ancillary devices associated with data
  processing or telecommunication systems, more especially switching devices "on" or "off."
 (If a
  single "stop" control is required to interrupt or turn off ancillary devices, DC4 is the
  preferred assignment.)
 @since 8.0
 */
inline jbyte ComGoogleCommonBaseAscii_get_DC1(void);
#define ComGoogleCommonBaseAscii_DC1 17
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, DC1, jbyte)

/*!
 @brief Transmission On: Although originally defined as DC1, this ASCII control character is now better
  known as the XON code used for software flow control in serial communications.The main use is
  restarting the transmission after the communication has been stopped by the XOFF control code.
 @since 8.0
 */
inline jbyte ComGoogleCommonBaseAscii_get_XON(void);
#define ComGoogleCommonBaseAscii_XON 17
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, XON, jbyte)

/*!
 @brief Device Control 2.Characters for the control of ancillary devices associated with data
  processing or telecommunication systems, more especially switching devices "on" or "off."
 (If a
  single "stop" control is required to interrupt or turn off ancillary devices, DC4 is the
  preferred assignment.)
 @since 8.0
 */
inline jbyte ComGoogleCommonBaseAscii_get_DC2(void);
#define ComGoogleCommonBaseAscii_DC2 18
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, DC2, jbyte)

/*!
 @brief Device Control 3.Characters for the control of ancillary devices associated with data
  processing or telecommunication systems, more especially switching devices "on" or "off."
 (If a
  single "stop" control is required to interrupt or turn off ancillary devices, DC4 is the
  preferred assignment.)
 @since 8.0
 */
inline jbyte ComGoogleCommonBaseAscii_get_DC3(void);
#define ComGoogleCommonBaseAscii_DC3 19
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, DC3, jbyte)

/*!
 @brief Transmission off.See <code>XON</code> for explanation.
 @since 8.0
 */
inline jbyte ComGoogleCommonBaseAscii_get_XOFF(void);
#define ComGoogleCommonBaseAscii_XOFF 19
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, XOFF, jbyte)

/*!
 @brief Device Control 4.Characters for the control of ancillary devices associated with data
  processing or telecommunication systems, more especially switching devices "on" or "off."
 (If a
  single "stop" control is required to interrupt or turn off ancillary devices, DC4 is the
  preferred assignment.)
 @since 8.0
 */
inline jbyte ComGoogleCommonBaseAscii_get_DC4(void);
#define ComGoogleCommonBaseAscii_DC4 20
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, DC4, jbyte)

/*!
 @brief Negative Acknowledge: A communication control character transmitted by a receiver as a negative
  response to the sender.
 @since 8.0
 */
inline jbyte ComGoogleCommonBaseAscii_get_NAK(void);
#define ComGoogleCommonBaseAscii_NAK 21
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, NAK, jbyte)

/*!
 @brief Synchronous Idle: A communication control character used by a synchronous transmission system
  in the absence of any other character to provide a signal from which synchronism may be
  achieved or retained.
 @since 8.0
 */
inline jbyte ComGoogleCommonBaseAscii_get_SYN(void);
#define ComGoogleCommonBaseAscii_SYN 22
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, SYN, jbyte)

/*!
 @brief End of Transmission Block: A communication control character used to indicate the end of a
  block of data for communication purposes.ETB is used for blocking data where the block
  structure is not necessarily related to the processing format.
 @since 8.0
 */
inline jbyte ComGoogleCommonBaseAscii_get_ETB(void);
#define ComGoogleCommonBaseAscii_ETB 23
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, ETB, jbyte)

/*!
 @brief Cancel: A control character used to indicate that the data with which it is sent is in error or
  is to be disregarded.
 @since 8.0
 */
inline jbyte ComGoogleCommonBaseAscii_get_CAN(void);
#define ComGoogleCommonBaseAscii_CAN 24
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, CAN, jbyte)

/*!
 @brief End of Medium: A control character associated with the sent data which may be used to identify
  the physical end of the medium, or the end of the used, or wanted, portion of information
  recorded on a medium.
 (The position of this character does not necessarily correspond to the
  physical end of the medium.)
 @since 8.0
 */
inline jbyte ComGoogleCommonBaseAscii_get_EM(void);
#define ComGoogleCommonBaseAscii_EM 25
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, EM, jbyte)

/*!
 @brief Substitute: A character that may be substituted for a character which is determined to be
  invalid or in error.
 @since 8.0
 */
inline jbyte ComGoogleCommonBaseAscii_get_SUB(void);
#define ComGoogleCommonBaseAscii_SUB 26
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, SUB, jbyte)

/*!
 @brief Escape: A control character intended to provide code extension (supplementary characters) in
  general information interchange.The Escape character itself is a prefix affecting the
  interpretation of a limited number of contiguously following characters.
 @since 8.0
 */
inline jbyte ComGoogleCommonBaseAscii_get_ESC(void);
#define ComGoogleCommonBaseAscii_ESC 27
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, ESC, jbyte)

/*!
 @brief File Separator: These four information separators may be used within data in optional fashion,
  except that their hierarchical relationship shall be: FS is the most inclusive, then GS, then
  RS, and US is least inclusive.
 (The content and length of a File, Group, Record, or Unit are
  not specified.)
 @since 8.0
 */
inline jbyte ComGoogleCommonBaseAscii_get_FS(void);
#define ComGoogleCommonBaseAscii_FS 28
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, FS, jbyte)

/*!
 @brief Group Separator: These four information separators may be used within data in optional fashion,
  except that their hierarchical relationship shall be: FS is the most inclusive, then GS, then
  RS, and US is least inclusive.
 (The content and length of a File, Group, Record, or Unit are
  not specified.)
 @since 8.0
 */
inline jbyte ComGoogleCommonBaseAscii_get_GS(void);
#define ComGoogleCommonBaseAscii_GS 29
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, GS, jbyte)

/*!
 @brief Record Separator: These four information separators may be used within data in optional
  fashion, except that their hierarchical relationship shall be: FS is the most inclusive, then
  GS, then RS, and US is least inclusive.
 (The content and length of a File, Group, Record, or
  Unit are not specified.)
 @since 8.0
 */
inline jbyte ComGoogleCommonBaseAscii_get_RS(void);
#define ComGoogleCommonBaseAscii_RS 30
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, RS, jbyte)

/*!
 @brief Unit Separator: These four information separators may be used within data in optional fashion,
  except that their hierarchical relationship shall be: FS is the most inclusive, then GS, then
  RS, and US is least inclusive.
 (The content and length of a File, Group, Record, or Unit are
  not specified.)
 @since 8.0
 */
inline jbyte ComGoogleCommonBaseAscii_get_US(void);
#define ComGoogleCommonBaseAscii_US 31
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, US, jbyte)

/*!
 @brief Space: A normally non-printing graphic character used to separate words.It is also a format
  effector which controls the movement of the printing position, one printing position forward.
 (Applicable also to display devices.)
 @since 8.0
 */
inline jbyte ComGoogleCommonBaseAscii_get_SP(void);
#define ComGoogleCommonBaseAscii_SP 32
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, SP, jbyte)

/*!
 @brief Alternate name for <code>SP</code>.
 @since 8.0
 */
inline jbyte ComGoogleCommonBaseAscii_get_SPACE(void);
#define ComGoogleCommonBaseAscii_SPACE 32
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, SPACE, jbyte)

/*!
 @brief Delete: This character is used primarily to "erase" or "obliterate" erroneous or unwanted
  characters in perforated tape.
 @since 8.0
 */
inline jbyte ComGoogleCommonBaseAscii_get_DEL(void);
#define ComGoogleCommonBaseAscii_DEL 127
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, DEL, jbyte)

/*!
 @brief The minimum value of an ASCII character.
 @since 9.0 (was type <code>int</code> before 12.0)
 */
inline jchar ComGoogleCommonBaseAscii_get_MIN(void);
#define ComGoogleCommonBaseAscii_MIN 0x0000
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, MIN, jchar)

/*!
 @brief The maximum value of an ASCII character.
 @since 9.0 (was type <code>int</code> before 12.0)
 */
inline jchar ComGoogleCommonBaseAscii_get_MAX(void);
#define ComGoogleCommonBaseAscii_MAX 0x007f
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseAscii, MAX, jchar)

FOUNDATION_EXPORT NSString *ComGoogleCommonBaseAscii_toLowerCaseWithNSString_(NSString *string);

FOUNDATION_EXPORT NSString *ComGoogleCommonBaseAscii_toLowerCaseWithJavaLangCharSequence_(id<JavaLangCharSequence> chars);

FOUNDATION_EXPORT jchar ComGoogleCommonBaseAscii_toLowerCaseWithChar_(jchar c);

FOUNDATION_EXPORT NSString *ComGoogleCommonBaseAscii_toUpperCaseWithNSString_(NSString *string);

FOUNDATION_EXPORT NSString *ComGoogleCommonBaseAscii_toUpperCaseWithJavaLangCharSequence_(id<JavaLangCharSequence> chars);

FOUNDATION_EXPORT jchar ComGoogleCommonBaseAscii_toUpperCaseWithChar_(jchar c);

FOUNDATION_EXPORT jboolean ComGoogleCommonBaseAscii_isLowerCaseWithChar_(jchar c);

FOUNDATION_EXPORT jboolean ComGoogleCommonBaseAscii_isUpperCaseWithChar_(jchar c);

FOUNDATION_EXPORT NSString *ComGoogleCommonBaseAscii_truncateWithJavaLangCharSequence_withInt_withNSString_(id<JavaLangCharSequence> seq, jint maxLength, NSString *truncationIndicator);

FOUNDATION_EXPORT jboolean ComGoogleCommonBaseAscii_equalsIgnoreCaseWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> s1, id<JavaLangCharSequence> s2);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBaseAscii)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonBaseAscii")
