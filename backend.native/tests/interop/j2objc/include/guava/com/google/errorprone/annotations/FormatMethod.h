//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/build_result/java/com/google/errorprone/annotations/FormatMethod.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleErrorproneAnnotationsFormatMethod")
#ifdef RESTRICT_ComGoogleErrorproneAnnotationsFormatMethod
#define INCLUDE_ALL_ComGoogleErrorproneAnnotationsFormatMethod 0
#else
#define INCLUDE_ALL_ComGoogleErrorproneAnnotationsFormatMethod 1
#endif
#undef RESTRICT_ComGoogleErrorproneAnnotationsFormatMethod

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleErrorproneAnnotationsFormatMethod_) && (INCLUDE_ALL_ComGoogleErrorproneAnnotationsFormatMethod || defined(INCLUDE_ComGoogleErrorproneAnnotationsFormatMethod))
#define ComGoogleErrorproneAnnotationsFormatMethod_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

/*!
 @brief Annotation for a method that takes a printf-style format string as an argument followed by
  arguments for that format string.
 <p>This annotation is used in conjunction with <code>FormatString</code> to denote a method that takes
  a printf-style format string and its format arguments. In any method annotated as <code>FormatMethod</code>
  without a <code>FormatString</code> parameter, the first <code>String</code> parameter is
  assumed to be the format string. For example, the following two methods are equivalent: 
 @code
 &#064;FormatMethod void log(Locale l, &#064;FormatString String logMessage, Object... args) {}
  &#064;FormatMethod void log(Locale l, String logMessage, Object... args) {} 
 
@endcode
  
 <p>Using <code>FormatMethod</code> on a method header will ensure the following for the parameters
  passed to the method: 
 <ol>
    <li>A format string is either:
        <ul>
          <li>A compile time constant value (see <code>CompileTimeConstant</code> for more info).
              <p>The following example is valid:
              @code
 public class Foo {
    static final String staticFinalLogMessage = "foo";
    &#064;FormatMethod void log(&#064;FormatString String format, Object... args) {}
    void validLogs() {
      log("String literal");
      log(staticFinalLogMessage);
    }  }  
 
@endcode
              <p>However the following would be invalid:
              @code
 public class Foo{
    &#064;FormatMethod void log(&#064;FormatString String format, Object... args) {}
    void invalidLog(String notCompileTimeConstant) {
      log(notCompileTimeConstant);
    }  }  
 
@endcode
          <li>An effectively final variable that was assigned to a compile time constant value.
              This is to permit the following common case:             
 @code
 String format = "Some long format string: %s";
  log(format, arg); 
 
@endcode
          <li>Another <code>FormatString</code> annotated parameter. Ex:
              @code
 public class Foo {
    static final String staticFinalLogMessage = "foo";
    &#064;FormatMethod void log(&#064;FormatString String format, Object... args) {}
    &#064;FormatMethod void validLog(&#064;FormatString String format, Object... args) {
      log(format, args);
    }  }  
 
@endcode
        </ul>
    <li>The format string will be valid for the input format arguments. In the case that the actual
        format string parameter has a compile time constant value, this will compare the actual
        format string value to the types of the passed in format arguments to ensure validity. In
        the case that the actual format string parameter is a parameter that was annotated <code>FormatString</code>
  itself, this will ensure that the types of the arguments passed to the callee
        match the types of the arguments in the caller. 
 </ol>
 */
@protocol ComGoogleErrorproneAnnotationsFormatMethod < JavaLangAnnotationAnnotation >

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface ComGoogleErrorproneAnnotationsFormatMethod : NSObject < ComGoogleErrorproneAnnotationsFormatMethod >

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleErrorproneAnnotationsFormatMethod)

FOUNDATION_EXPORT id<ComGoogleErrorproneAnnotationsFormatMethod> create_ComGoogleErrorproneAnnotationsFormatMethod(void);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleErrorproneAnnotationsFormatMethod)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleErrorproneAnnotationsFormatMethod")
