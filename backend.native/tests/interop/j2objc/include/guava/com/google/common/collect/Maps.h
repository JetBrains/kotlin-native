//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/build_result/java/com/google/common/collect/Maps.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCollectMaps")
#ifdef RESTRICT_ComGoogleCommonCollectMaps
#define INCLUDE_ALL_ComGoogleCommonCollectMaps 0
#else
#define INCLUDE_ALL_ComGoogleCommonCollectMaps 1
#endif
#undef RESTRICT_ComGoogleCommonCollectMaps
#ifdef INCLUDE_ComGoogleCommonCollectMaps_FilteredEntryBiMap
#define INCLUDE_ComGoogleCommonCollectMaps_FilteredEntryMap 1
#endif
#ifdef INCLUDE_ComGoogleCommonCollectMaps_NavigableKeySet
#define INCLUDE_ComGoogleCommonCollectMaps_SortedKeySet 1
#endif
#ifdef INCLUDE_ComGoogleCommonCollectMaps_SortedKeySet
#define INCLUDE_ComGoogleCommonCollectMaps_KeySet 1
#endif
#ifdef INCLUDE_ComGoogleCommonCollectMaps_FilteredEntryMap_KeySet
#define INCLUDE_ComGoogleCommonCollectMaps_KeySet 1
#endif
#ifdef INCLUDE_ComGoogleCommonCollectMaps_FilteredEntryMap
#define INCLUDE_ComGoogleCommonCollectMaps_AbstractFilteredMap 1
#endif
#ifdef INCLUDE_ComGoogleCommonCollectMaps_AbstractFilteredMap
#define INCLUDE_ComGoogleCommonCollectMaps_ViewCachingAbstractMap 1
#endif
#ifdef INCLUDE_ComGoogleCommonCollectMaps_TransformedEntriesSortedMap
#define INCLUDE_ComGoogleCommonCollectMaps_TransformedEntriesMap 1
#endif
#ifdef INCLUDE_ComGoogleCommonCollectMaps_TransformedEntriesMap
#define INCLUDE_ComGoogleCommonCollectMaps_IteratorBasedAbstractMap 1
#endif
#ifdef INCLUDE_ComGoogleCommonCollectMaps_UnmodifiableEntrySet
#define INCLUDE_ComGoogleCommonCollectMaps_UnmodifiableEntries 1
#endif
#ifdef INCLUDE_ComGoogleCommonCollectMaps_SortedMapDifferenceImpl
#define INCLUDE_ComGoogleCommonCollectMaps_MapDifferenceImpl 1
#endif

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCollectMaps_) && (INCLUDE_ALL_ComGoogleCommonCollectMaps || defined(INCLUDE_ComGoogleCommonCollectMaps))
#define ComGoogleCommonCollectMaps_

@class ComGoogleCommonBaseConverter;
@class ComGoogleCommonBaseEquivalence;
@class ComGoogleCommonCollectImmutableMap;
@class ComGoogleCommonCollectRange;
@class ComGoogleCommonCollectUnmodifiableIterator;
@class IOSClass;
@class JavaUtilEnumMap;
@class JavaUtilHashMap;
@class JavaUtilIdentityHashMap;
@class JavaUtilLinkedHashMap;
@class JavaUtilProperties;
@class JavaUtilTreeMap;
@protocol ComGoogleCommonBaseFunction;
@protocol ComGoogleCommonBasePredicate;
@protocol ComGoogleCommonCollectBiMap;
@protocol ComGoogleCommonCollectMapDifference;
@protocol ComGoogleCommonCollectMaps_EntryTransformer;
@protocol ComGoogleCommonCollectSortedMapDifference;
@protocol JavaLangIterable;
@protocol JavaUtilCollection;
@protocol JavaUtilComparator;
@protocol JavaUtilConcurrentConcurrentMap;
@protocol JavaUtilFunctionBinaryOperator;
@protocol JavaUtilFunctionFunction;
@protocol JavaUtilIterator;
@protocol JavaUtilMap;
@protocol JavaUtilMap_Entry;
@protocol JavaUtilNavigableMap;
@protocol JavaUtilNavigableSet;
@protocol JavaUtilSet;
@protocol JavaUtilSortedMap;
@protocol JavaUtilSortedSet;
@protocol JavaUtilStreamCollector;

/*!
 @brief Static utility methods pertaining to <code>Map</code> instances (including instances of <code>SortedMap</code>
 , <code>BiMap</code>, etc.).Also see this class's counterparts <code>Lists</code>, <code>Sets</code>
  and <code>Queues</code>.
 <p>See the Guava User Guide article on <a href="https://github.com/google/guava/wiki/CollectionUtilitiesExplained#maps">
  <code>Maps</code></a>.
 @author Kevin Bourrillion
 @author Mike Bostock
 @author Isaac Shum
 @author Louis Wasserman
 @since 2.0
 */
@interface ComGoogleCommonCollectMaps : NSObject

#pragma mark Public

/*!
 @brief Returns a <code>Converter</code> that converts values using <code>bimap.get()</code>, and whose
  inverse view converts values using <code>bimap.inverse()</code><code>.get()</code>.
 <p>To use a plain <code>Map</code> as a <code>Function</code>, see <code>com.google.common.base.Functions.forMap(Map)</code>
  or <code>com.google.common.base.Functions.forMap(Map, Object)</code>
 .
 @since 16.0
 */
+ (ComGoogleCommonBaseConverter *)asConverterWithComGoogleCommonCollectBiMap:(id<ComGoogleCommonCollectBiMap>)bimap;

/*!
 @brief Returns a view of the navigable set as a map, mapping keys from the set according to the
  specified function.
 <p>Specifically, for each <code>k</code> in the backing set, the returned map has an entry mapping 
 <code>k</code> to <code>function.apply(k)</code>. The <code>keySet</code>, <code>values</code>, and <code>entrySet</code>
  views of the returned map iterate in the same order as the backing set. 
 <p>Modifications to the backing set are read through to the returned map. The returned map
  supports removal operations if the backing set does. Removal operations write through to the
  backing set. The returned map does not support put operations. 
 <p><b>Warning:</b> If the function rejects <code>null</code>, caution is required to make sure the
  set does not contain <code>null</code>, because the view cannot stop <code>null</code> from being added
  to the set. 
 <p><b>Warning:</b> This method assumes that for any instance <code>k</code> of key type <code>K</code>,
  <code>k.equals(k2)</code> implies that <code>k2</code> is also of type <code>K</code>. Using a key type for
  which this may not hold, such as <code>ArrayList</code>, may risk a <code>ClassCastException</code> when
  calling methods on the resulting map view.
 @since 14.0
 */
+ (id<JavaUtilNavigableMap>)asMapWithJavaUtilNavigableSet:(id<JavaUtilNavigableSet>)set
                          withComGoogleCommonBaseFunction:(id<ComGoogleCommonBaseFunction>)function;

/*!
 @brief Returns a live <code>Map</code> view whose keys are the contents of <code>set</code> and whose values are
  computed on demand using <code>function</code>.To get an immutable <i>copy</i> instead, use <code>toMap(Iterable, Function)</code>
 .
 <p>Specifically, for each <code>k</code> in the backing set, the returned map has an entry mapping 
 <code>k</code> to <code>function.apply(k)</code>. The <code>keySet</code>, <code>values</code>, and <code>entrySet</code>
  views of the returned map iterate in the same order as the backing set. 
 <p>Modifications to the backing set are read through to the returned map. The returned map
  supports removal operations if the backing set does. Removal operations write through to the
  backing set. The returned map does not support put operations. 
 <p><b>Warning:</b> If the function rejects <code>null</code>, caution is required to make sure the
  set does not contain <code>null</code>, because the view cannot stop <code>null</code> from being added
  to the set. 
 <p><b>Warning:</b> This method assumes that for any instance <code>k</code> of key type <code>K</code>,
  <code>k.equals(k2)</code> implies that <code>k2</code> is also of type <code>K</code>. Using a key type for
  which this may not hold, such as <code>ArrayList</code>, may risk a <code>ClassCastException</code> when
  calling methods on the resulting map view.
 @since 14.0
 */
+ (id<JavaUtilMap>)asMapWithJavaUtilSet:(id<JavaUtilSet>)set
        withComGoogleCommonBaseFunction:(id<ComGoogleCommonBaseFunction>)function;

/*!
 @brief Returns a view of the sorted set as a map, mapping keys from the set according to the specified
  function.
 <p>Specifically, for each <code>k</code> in the backing set, the returned map has an entry mapping 
 <code>k</code> to <code>function.apply(k)</code>. The <code>keySet</code>, <code>values</code>, and <code>entrySet</code>
  views of the returned map iterate in the same order as the backing set. 
 <p>Modifications to the backing set are read through to the returned map. The returned map
  supports removal operations if the backing set does. Removal operations write through to the
  backing set. The returned map does not support put operations. 
 <p><b>Warning:</b> If the function rejects <code>null</code>, caution is required to make sure the
  set does not contain <code>null</code>, because the view cannot stop <code>null</code> from being added
  to the set. 
 <p><b>Warning:</b> This method assumes that for any instance <code>k</code> of key type <code>K</code>,
  <code>k.equals(k2)</code> implies that <code>k2</code> is also of type <code>K</code>. Using a key type for
  which this may not hold, such as <code>ArrayList</code>, may risk a <code>ClassCastException</code> when
  calling methods on the resulting map view.
 @since 14.0
 */
+ (id<JavaUtilSortedMap>)asMapWithJavaUtilSortedSet:(id<JavaUtilSortedSet>)set
                    withComGoogleCommonBaseFunction:(id<ComGoogleCommonBaseFunction>)function;

/*!
 @brief Computes the difference between two maps.This difference is an immutable snapshot of the state
  of the maps at the time this method is called.
 It will never change, even if the maps change at
  a later time. 
 <p>Since this method uses <code>HashMap</code> instances internally, the keys of the supplied maps
  must be well-behaved with respect to <code>Object.equals</code> and <code>Object.hashCode</code>.
  
 <p><b>Note:</b>If you only need to know whether two maps have the same mappings, call <code>left.equals(right)</code>
  instead of this method.
 @param left the map to treat as the "left" map for purposes of comparison
 @param right the map to treat as the "right" map for purposes of comparison
 @return the difference between the two maps
 */
+ (id<ComGoogleCommonCollectMapDifference>)differenceWithJavaUtilMap:(id<JavaUtilMap>)left
                                                     withJavaUtilMap:(id<JavaUtilMap>)right;

/*!
 @brief Computes the difference between two maps.This difference is an immutable snapshot of the state
  of the maps at the time this method is called.
 It will never change, even if the maps change at
  a later time. 
 <p>Since this method uses <code>HashMap</code> instances internally, the keys of the supplied maps
  must be well-behaved with respect to <code>Object.equals</code> and <code>Object.hashCode</code>.
 @param left the map to treat as the "left" map for purposes of comparison
 @param right the map to treat as the "right" map for purposes of comparison
 @param valueEquivalence the equivalence relationship to use to compare values
 @return the difference between the two maps
 @since 10.0
 */
+ (id<ComGoogleCommonCollectMapDifference>)differenceWithJavaUtilMap:(id<JavaUtilMap>)left
                                                     withJavaUtilMap:(id<JavaUtilMap>)right
                                  withComGoogleCommonBaseEquivalence:(ComGoogleCommonBaseEquivalence *)valueEquivalence;

/*!
 @brief Computes the difference between two sorted maps, using the comparator of the left map, or 
 <code>Ordering.natural()</code> if the left map uses the natural ordering of its elements.This
  difference is an immutable snapshot of the state of the maps at the time this method is called.
 It will never change, even if the maps change at a later time. 
 <p>Since this method uses <code>TreeMap</code> instances internally, the keys of the right map must
  all compare as distinct according to the comparator of the left map. 
 <p><b>Note:</b>If you only need to know whether two sorted maps have the same mappings, call 
 <code>left.equals(right)</code> instead of this method.
 @param left the map to treat as the "left" map for purposes of comparison
 @param right the map to treat as the "right" map for purposes of comparison
 @return the difference between the two maps
 @since 11.0
 */
+ (id<ComGoogleCommonCollectSortedMapDifference>)differenceWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)left
                                                                 withJavaUtilMap:(id<JavaUtilMap>)right;

/*!
 @brief Returns a bimap containing the mappings in <code>unfiltered</code> that satisfy a predicate.The
  returned bimap is a live view of <code>unfiltered</code>; changes to one affect the other.
 <p>The resulting bimap's <code>keySet()</code>, <code>entrySet()</code>, and <code>values()</code> views have
  iterators that don't support <code>remove()</code>, but all other methods are supported by the bimap
  and its views. When given a key/value pair that doesn't satisfy the predicate, the bimap's 
 <code>put()</code>, <code>forcePut()</code> and <code>putAll()</code> methods throw an <code>IllegalArgumentException</code>
 . Similarly, the map's entries have an <code>Entry.setValue</code> method
  that throws an <code>IllegalArgumentException</code> when the existing key and the provided value
  don't satisfy the predicate. 
 <p>When methods such as <code>removeAll()</code> and <code>clear()</code> are called on the filtered
  bimap or its views, only mappings that satisfy the filter will be removed from the underlying
  bimap. 
 <p>The returned bimap isn't threadsafe or serializable, even if <code>unfiltered</code> is. 
 <p>Many of the filtered bimap's methods, such as <code>size()</code>, iterate across every key/value
  mapping in the underlying bimap and determine which satisfy the filter. When a live view is 
 <i>not</i> needed, it may be faster to copy the filtered bimap and use the copy. 
 <p><b>Warning:</b> <code>entryPredicate</code> must be <i>consistent with equals </i>, as documented
  at <code>Predicate.apply</code>.
 @since 14.0
 */
+ (id<ComGoogleCommonCollectBiMap>)filterEntriesWithComGoogleCommonCollectBiMap:(id<ComGoogleCommonCollectBiMap>)unfiltered
                                               withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate>)entryPredicate;

/*!
 @brief Returns a map containing the mappings in <code>unfiltered</code> that satisfy a predicate.The
  returned map is a live view of <code>unfiltered</code>; changes to one affect the other.
 <p>The resulting map's <code>keySet()</code>, <code>entrySet()</code>, and <code>values()</code> views have
  iterators that don't support <code>remove()</code>, but all other methods are supported by the map
  and its views. When given a key/value pair that doesn't satisfy the predicate, the map's <code>put()</code>
  and <code>putAll()</code> methods throw an <code>IllegalArgumentException</code>. Similarly, the
  map's entries have a <code>Entry.setValue</code> method that throws an <code>IllegalArgumentException</code>
  when the existing key and the provided value don't satisfy the
  predicate. 
 <p>When methods such as <code>removeAll()</code> and <code>clear()</code> are called on the filtered map
  or its views, only mappings that satisfy the filter will be removed from the underlying map. 
 <p>The returned map isn't threadsafe or serializable, even if <code>unfiltered</code> is. 
 <p>Many of the filtered map's methods, such as <code>size()</code>, iterate across every key/value
  mapping in the underlying map and determine which satisfy the filter. When a live view is 
 <i>not</i> needed, it may be faster to copy the filtered map and use the copy. 
 <p><b>Warning:</b> <code>entryPredicate</code> must be <i>consistent with equals</i>, as documented
  at <code>Predicate.apply</code>.
 */
+ (id<JavaUtilMap>)filterEntriesWithJavaUtilMap:(id<JavaUtilMap>)unfiltered
               withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate>)entryPredicate;

/*!
 @brief Returns a sorted map containing the mappings in <code>unfiltered</code> that satisfy a predicate.
 The returned map is a live view of <code>unfiltered</code>; changes to one affect the other. 
 <p>The resulting map's <code>keySet()</code>, <code>entrySet()</code>, and <code>values()</code> views have
  iterators that don't support <code>remove()</code>, but all other methods are supported by the map
  and its views. When given a key/value pair that doesn't satisfy the predicate, the map's <code>put()</code>
  and <code>putAll()</code> methods throw an <code>IllegalArgumentException</code>. Similarly, the
  map's entries have a <code>Entry.setValue</code> method that throws an <code>IllegalArgumentException</code>
  when the existing key and the provided value don't satisfy the
  predicate. 
 <p>When methods such as <code>removeAll()</code> and <code>clear()</code> are called on the filtered map
  or its views, only mappings that satisfy the filter will be removed from the underlying map. 
 <p>The returned map isn't threadsafe or serializable, even if <code>unfiltered</code> is. 
 <p>Many of the filtered map's methods, such as <code>size()</code>, iterate across every key/value
  mapping in the underlying map and determine which satisfy the filter. When a live view is 
 <i>not</i> needed, it may be faster to copy the filtered map and use the copy. 
 <p><b>Warning:</b> <code>entryPredicate</code> must be <i>consistent with equals</i>, as documented
  at <code>Predicate.apply</code>.
 @since 14.0
 */
+ (id<JavaUtilNavigableMap>)filterEntriesWithJavaUtilNavigableMap:(id<JavaUtilNavigableMap>)unfiltered
                                 withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate>)entryPredicate;

/*!
 @brief Returns a sorted map containing the mappings in <code>unfiltered</code> that satisfy a predicate.
 The returned map is a live view of <code>unfiltered</code>; changes to one affect the other. 
 <p>The resulting map's <code>keySet()</code>, <code>entrySet()</code>, and <code>values()</code> views have
  iterators that don't support <code>remove()</code>, but all other methods are supported by the map
  and its views. When given a key/value pair that doesn't satisfy the predicate, the map's <code>put()</code>
  and <code>putAll()</code> methods throw an <code>IllegalArgumentException</code>. Similarly, the
  map's entries have a <code>Entry.setValue</code> method that throws an <code>IllegalArgumentException</code>
  when the existing key and the provided value don't satisfy the
  predicate. 
 <p>When methods such as <code>removeAll()</code> and <code>clear()</code> are called on the filtered map
  or its views, only mappings that satisfy the filter will be removed from the underlying map. 
 <p>The returned map isn't threadsafe or serializable, even if <code>unfiltered</code> is. 
 <p>Many of the filtered map's methods, such as <code>size()</code>, iterate across every key/value
  mapping in the underlying map and determine which satisfy the filter. When a live view is 
 <i>not</i> needed, it may be faster to copy the filtered map and use the copy. 
 <p><b>Warning:</b> <code>entryPredicate</code> must be <i>consistent with equals</i>, as documented
  at <code>Predicate.apply</code>.
 @since 11.0
 */
+ (id<JavaUtilSortedMap>)filterEntriesWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)unfiltered
                           withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate>)entryPredicate;

/*!
 @brief Returns a bimap containing the mappings in <code>unfiltered</code> whose keys satisfy a predicate.
 The returned bimap is a live view of <code>unfiltered</code>; changes to one affect the other. 
 <p>The resulting bimap's <code>keySet()</code>, <code>entrySet()</code>, and <code>values()</code> views have
  iterators that don't support <code>remove()</code>, but all other methods are supported by the bimap
  and its views. When given a key that doesn't satisfy the predicate, the bimap's <code>put()</code>,
  <code>forcePut()</code> and <code>putAll()</code> methods throw an <code>IllegalArgumentException</code>.
  
 <p>When methods such as <code>removeAll()</code> and <code>clear()</code> are called on the filtered
  bimap or its views, only mappings that satisfy the filter will be removed from the underlying
  bimap. 
 <p>The returned bimap isn't threadsafe or serializable, even if <code>unfiltered</code> is. 
 <p>Many of the filtered bimap's methods, such as <code>size()</code>, iterate across every key in
  the underlying bimap and determine which satisfy the filter. When a live view is <i>not</i>
  needed, it may be faster to copy the filtered bimap and use the copy. 
 <p><b>Warning:</b> <code>entryPredicate</code> must be <i>consistent with equals </i>, as documented
  at <code>Predicate.apply</code>.
 @since 14.0
 */
+ (id<ComGoogleCommonCollectBiMap>)filterKeysWithComGoogleCommonCollectBiMap:(id<ComGoogleCommonCollectBiMap>)unfiltered
                                            withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate>)keyPredicate;

/*!
 @brief Returns a map containing the mappings in <code>unfiltered</code> whose keys satisfy a predicate.The
  returned map is a live view of <code>unfiltered</code>; changes to one affect the other.
 <p>The resulting map's <code>keySet()</code>, <code>entrySet()</code>, and <code>values()</code> views have
  iterators that don't support <code>remove()</code>, but all other methods are supported by the map
  and its views. When given a key that doesn't satisfy the predicate, the map's <code>put()</code> and 
 <code>putAll()</code> methods throw an <code>IllegalArgumentException</code>.
  
 <p>When methods such as <code>removeAll()</code> and <code>clear()</code> are called on the filtered map
  or its views, only mappings whose keys satisfy the filter will be removed from the underlying
  map. 
 <p>The returned map isn't threadsafe or serializable, even if <code>unfiltered</code> is. 
 <p>Many of the filtered map's methods, such as <code>size()</code>, iterate across every key/value
  mapping in the underlying map and determine which satisfy the filter. When a live view is 
 <i>not</i> needed, it may be faster to copy the filtered map and use the copy. 
 <p><b>Warning:</b> <code>keyPredicate</code> must be <i>consistent with equals</i>, as documented at 
 <code>Predicate.apply</code>. Do not provide a predicate such as <code>Predicates.instanceOf(ArrayList.class)</code>
 , which is inconsistent with equals.
 */
+ (id<JavaUtilMap>)filterKeysWithJavaUtilMap:(id<JavaUtilMap>)unfiltered
            withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate>)keyPredicate;

/*!
 @brief Returns a navigable map containing the mappings in <code>unfiltered</code> whose keys satisfy a
  predicate.The returned map is a live view of <code>unfiltered</code>; changes to one affect the
  other.
 <p>The resulting map's <code>keySet()</code>, <code>entrySet()</code>, and <code>values()</code> views have
  iterators that don't support <code>remove()</code>, but all other methods are supported by the map
  and its views. When given a key that doesn't satisfy the predicate, the map's <code>put()</code> and 
 <code>putAll()</code> methods throw an <code>IllegalArgumentException</code>.
  
 <p>When methods such as <code>removeAll()</code> and <code>clear()</code> are called on the filtered map
  or its views, only mappings whose keys satisfy the filter will be removed from the underlying
  map. 
 <p>The returned map isn't threadsafe or serializable, even if <code>unfiltered</code> is. 
 <p>Many of the filtered map's methods, such as <code>size()</code>, iterate across every key/value
  mapping in the underlying map and determine which satisfy the filter. When a live view is 
 <i>not</i> needed, it may be faster to copy the filtered map and use the copy. 
 <p><b>Warning:</b> <code>keyPredicate</code> must be <i>consistent with equals</i>, as documented at 
 <code>Predicate.apply</code>. Do not provide a predicate such as <code>Predicates.instanceOf(ArrayList.class)</code>
 , which is inconsistent with equals.
 @since 14.0
 */
+ (id<JavaUtilNavigableMap>)filterKeysWithJavaUtilNavigableMap:(id<JavaUtilNavigableMap>)unfiltered
                              withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate>)keyPredicate;

/*!
 @brief Returns a sorted map containing the mappings in <code>unfiltered</code> whose keys satisfy a
  predicate.The returned map is a live view of <code>unfiltered</code>; changes to one affect the
  other.
 <p>The resulting map's <code>keySet()</code>, <code>entrySet()</code>, and <code>values()</code> views have
  iterators that don't support <code>remove()</code>, but all other methods are supported by the map
  and its views. When given a key that doesn't satisfy the predicate, the map's <code>put()</code> and 
 <code>putAll()</code> methods throw an <code>IllegalArgumentException</code>.
  
 <p>When methods such as <code>removeAll()</code> and <code>clear()</code> are called on the filtered map
  or its views, only mappings whose keys satisfy the filter will be removed from the underlying
  map. 
 <p>The returned map isn't threadsafe or serializable, even if <code>unfiltered</code> is. 
 <p>Many of the filtered map's methods, such as <code>size()</code>, iterate across every key/value
  mapping in the underlying map and determine which satisfy the filter. When a live view is 
 <i>not</i> needed, it may be faster to copy the filtered map and use the copy. 
 <p><b>Warning:</b> <code>keyPredicate</code> must be <i>consistent with equals</i>, as documented at 
 <code>Predicate.apply</code>. Do not provide a predicate such as <code>Predicates.instanceOf(ArrayList.class)</code>
 , which is inconsistent with equals.
 @since 11.0
 */
+ (id<JavaUtilSortedMap>)filterKeysWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)unfiltered
                        withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate>)keyPredicate;

/*!
 @brief Returns a bimap containing the mappings in <code>unfiltered</code> whose values satisfy a predicate.
 The returned bimap is a live view of <code>unfiltered</code>; changes to one affect the other. 
 <p>The resulting bimap's <code>keySet()</code>, <code>entrySet()</code>, and <code>values()</code> views have
  iterators that don't support <code>remove()</code>, but all other methods are supported by the bimap
  and its views. When given a value that doesn't satisfy the predicate, the bimap's <code>put()</code>
 , <code>forcePut()</code> and <code>putAll()</code> methods throw an <code>IllegalArgumentException</code>
 . Similarly, the map's entries have a <code>Entry.setValue</code> method
  that throws an <code>IllegalArgumentException</code> when the provided value doesn't satisfy the
  predicate. 
 <p>When methods such as <code>removeAll()</code> and <code>clear()</code> are called on the filtered
  bimap or its views, only mappings that satisfy the filter will be removed from the underlying
  bimap. 
 <p>The returned bimap isn't threadsafe or serializable, even if <code>unfiltered</code> is. 
 <p>Many of the filtered bimap's methods, such as <code>size()</code>, iterate across every value in
  the underlying bimap and determine which satisfy the filter. When a live view is <i>not</i>
  needed, it may be faster to copy the filtered bimap and use the copy. 
 <p><b>Warning:</b> <code>entryPredicate</code> must be <i>consistent with equals </i>, as documented
  at <code>Predicate.apply</code>.
 @since 14.0
 */
+ (id<ComGoogleCommonCollectBiMap>)filterValuesWithComGoogleCommonCollectBiMap:(id<ComGoogleCommonCollectBiMap>)unfiltered
                                              withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate>)valuePredicate;

/*!
 @brief Returns a map containing the mappings in <code>unfiltered</code> whose values satisfy a predicate.
 The returned map is a live view of <code>unfiltered</code>; changes to one affect the other. 
 <p>The resulting map's <code>keySet()</code>, <code>entrySet()</code>, and <code>values()</code> views have
  iterators that don't support <code>remove()</code>, but all other methods are supported by the map
  and its views. When given a value that doesn't satisfy the predicate, the map's <code>put()</code>,
  <code>putAll()</code>, and <code>Entry.setValue</code> methods throw an <code>IllegalArgumentException</code>.
  
 <p>When methods such as <code>removeAll()</code> and <code>clear()</code> are called on the filtered map
  or its views, only mappings whose values satisfy the filter will be removed from the underlying
  map. 
 <p>The returned map isn't threadsafe or serializable, even if <code>unfiltered</code> is. 
 <p>Many of the filtered map's methods, such as <code>size()</code>, iterate across every key/value
  mapping in the underlying map and determine which satisfy the filter. When a live view is 
 <i>not</i> needed, it may be faster to copy the filtered map and use the copy. 
 <p><b>Warning:</b> <code>valuePredicate</code> must be <i>consistent with equals</i>, as documented
  at <code>Predicate.apply</code>. Do not provide a predicate such as <code>Predicates.instanceOf(ArrayList.class)</code>
 , which is inconsistent with equals.
 */
+ (id<JavaUtilMap>)filterValuesWithJavaUtilMap:(id<JavaUtilMap>)unfiltered
              withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate>)valuePredicate;

/*!
 @brief Returns a navigable map containing the mappings in <code>unfiltered</code> whose values satisfy a
  predicate.The returned map is a live view of <code>unfiltered</code>; changes to one affect the
  other.
 <p>The resulting map's <code>keySet()</code>, <code>entrySet()</code>, and <code>values()</code> views have
  iterators that don't support <code>remove()</code>, but all other methods are supported by the map
  and its views. When given a value that doesn't satisfy the predicate, the map's <code>put()</code>,
  <code>putAll()</code>, and <code>Entry.setValue</code> methods throw an <code>IllegalArgumentException</code>.
  
 <p>When methods such as <code>removeAll()</code> and <code>clear()</code> are called on the filtered map
  or its views, only mappings whose values satisfy the filter will be removed from the underlying
  map. 
 <p>The returned map isn't threadsafe or serializable, even if <code>unfiltered</code> is. 
 <p>Many of the filtered map's methods, such as <code>size()</code>, iterate across every key/value
  mapping in the underlying map and determine which satisfy the filter. When a live view is 
 <i>not</i> needed, it may be faster to copy the filtered map and use the copy. 
 <p><b>Warning:</b> <code>valuePredicate</code> must be <i>consistent with equals</i>, as documented
  at <code>Predicate.apply</code>. Do not provide a predicate such as <code>Predicates.instanceOf(ArrayList.class)</code>
 , which is inconsistent with equals.
 @since 14.0
 */
+ (id<JavaUtilNavigableMap>)filterValuesWithJavaUtilNavigableMap:(id<JavaUtilNavigableMap>)unfiltered
                                withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate>)valuePredicate;

/*!
 @brief Returns a sorted map containing the mappings in <code>unfiltered</code> whose values satisfy a
  predicate.The returned map is a live view of <code>unfiltered</code>; changes to one affect the
  other.
 <p>The resulting map's <code>keySet()</code>, <code>entrySet()</code>, and <code>values()</code> views have
  iterators that don't support <code>remove()</code>, but all other methods are supported by the map
  and its views. When given a value that doesn't satisfy the predicate, the map's <code>put()</code>,
  <code>putAll()</code>, and <code>Entry.setValue</code> methods throw an <code>IllegalArgumentException</code>.
  
 <p>When methods such as <code>removeAll()</code> and <code>clear()</code> are called on the filtered map
  or its views, only mappings whose values satisfy the filter will be removed from the underlying
  map. 
 <p>The returned map isn't threadsafe or serializable, even if <code>unfiltered</code> is. 
 <p>Many of the filtered map's methods, such as <code>size()</code>, iterate across every key/value
  mapping in the underlying map and determine which satisfy the filter. When a live view is 
 <i>not</i> needed, it may be faster to copy the filtered map and use the copy. 
 <p><b>Warning:</b> <code>valuePredicate</code> must be <i>consistent with equals</i>, as documented
  at <code>Predicate.apply</code>. Do not provide a predicate such as <code>Predicates.instanceOf(ArrayList.class)</code>
 , which is inconsistent with equals.
 @since 11.0
 */
+ (id<JavaUtilSortedMap>)filterValuesWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)unfiltered
                          withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate>)valuePredicate;

/*!
 @brief Creates an <code>ImmutableMap<String, String></code> from a <code>Properties</code> instance.Properties
  normally derive from <code>Map<Object, Object></code>, but they typically contain strings, which is
  awkward.
 This method lets you get a plain-old-<code>Map</code> out of a <code>Properties</code>.
 @param properties a <code>Properties</code>  object to be converted
 @return an immutable map containing all the entries in <code>properties</code>
 @throw ClassCastExceptionif any key in <code>Properties</code> is not a <code>String</code>
 @throw NullPointerExceptionif any key or value in <code>Properties</code> is null
 */
+ (ComGoogleCommonCollectImmutableMap *)fromPropertiesWithJavaUtilProperties:(JavaUtilProperties *)properties;

/*!
 @brief Returns an immutable map entry with the specified key and value.The <code>Entry.setValue</code>
  operation throws an <code>UnsupportedOperationException</code>.
 <p>The returned entry is serializable.
 @param key the key to be associated with the returned entry
 @param value the value to be associated with the returned entry
 */
+ (id<JavaUtilMap_Entry>)immutableEntryWithId:(id)key
                                       withId:(id)value;

/*!
 @brief Returns an immutable map instance containing the given entries.Internally, the returned map
  will be backed by an <code>EnumMap</code>.
 <p>The iteration order of the returned map follows the enum's iteration order, not the order in
  which the elements appear in the given map.
 @param map the map to make an immutable copy of
 @return an immutable map containing those entries
 @since 14.0
 */
+ (ComGoogleCommonCollectImmutableMap *)immutableEnumMapWithJavaUtilMap:(id<JavaUtilMap>)map;

/*!
 @brief Creates a new empty <code>ConcurrentHashMap</code> instance.
 @since 3.0
 */
+ (id<JavaUtilConcurrentConcurrentMap>)newConcurrentMap OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Creates an <code>EnumMap</code> instance.
 @param type the key type for this map
 @return a new, empty <code>EnumMap</code>
 */
+ (JavaUtilEnumMap *)newEnumMapWithIOSClass:(IOSClass *)type OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Creates an <code>EnumMap</code> with the same mappings as the specified map.
 <p><b>Note for Java 7 and later:</b> this method is now unnecessary and should be treated as
  deprecated. Instead, use the <code>EnumMap</code> constructor directly, taking advantage of the new 
 <a href="http://goo.gl/iz2Wi">"diamond" syntax</a>.
 @param map the map from which to initialize this <code>EnumMap</code>
 @return a new <code>EnumMap</code> initialized with the mappings from <code>map</code>
 @throw IllegalArgumentExceptionif <code>m</code> is not an <code>EnumMap</code> instance and contains
      no mappings
 */
+ (JavaUtilEnumMap *)newEnumMapWithJavaUtilMap:(id<JavaUtilMap>)map OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Creates a <i>mutable</i>, empty <code>HashMap</code> instance.
 <p><b>Note:</b> if mutability is not required, use <code>ImmutableMap.of()</code> instead. 
 <p><b>Note:</b> if <code>K</code> is an <code>enum</code> type, use <code>newEnumMap</code> instead. 
 <p><b>Note for Java 7 and later:</b> this method is now unnecessary and should be treated as
  deprecated. Instead, use the <code>HashMap</code> constructor directly, taking advantage of the new 
 <a href="http://goo.gl/iz2Wi">"diamond" syntax</a>.
 @return a new, empty <code>HashMap</code>
 */
+ (JavaUtilHashMap *)newHashMap OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Creates a <i>mutable</i> <code>HashMap</code> instance with the same mappings as the specified map.
 <p><b>Note:</b> if mutability is not required, use <code>ImmutableMap.copyOf(Map)</code> instead. 
 <p><b>Note:</b> if <code>K</code> is an <code>Enum</code> type, use <code>newEnumMap</code> instead. 
 <p><b>Note for Java 7 and later:</b> this method is now unnecessary and should be treated as
  deprecated. Instead, use the <code>HashMap</code> constructor directly, taking advantage of the new 
 <a href="http://goo.gl/iz2Wi">"diamond" syntax</a>.
 @param map the mappings to be placed in the new map
 @return a new <code>HashMap</code> initialized with the mappings from <code>map</code>
 */
+ (JavaUtilHashMap *)newHashMapWithJavaUtilMap:(id<JavaUtilMap>)map OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Creates a <code>HashMap</code> instance, with a high enough "initial capacity" that it <i>should</i>
  hold <code>expectedSize</code> elements without growth.This behavior cannot be broadly guaranteed,
  but it is observed to be true for OpenJDK 1.7.
 It also can't be guaranteed that the method
  isn't inadvertently <i>oversizing</i> the returned map.
 @param expectedSize the number of entries you expect to add to the returned map
 @return a new, empty <code>HashMap</code> with enough capacity to hold <code>expectedSize</code> entries
      without resizing
 @throw IllegalArgumentExceptionif <code>expectedSize</code> is negative
 */
+ (JavaUtilHashMap *)newHashMapWithExpectedSizeWithInt:(jint)expectedSize OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Creates an <code>IdentityHashMap</code> instance.
 <p><b>Note for Java 7 and later:</b> this method is now unnecessary and should be treated as
  deprecated. Instead, use the <code>IdentityHashMap</code> constructor directly, taking advantage of
  the new <a href="http://goo.gl/iz2Wi">"diamond" syntax</a>.
 @return a new, empty <code>IdentityHashMap</code>
 */
+ (JavaUtilIdentityHashMap *)newIdentityHashMap OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Creates a <i>mutable</i>, empty, insertion-ordered <code>LinkedHashMap</code> instance.
 <p><b>Note:</b> if mutability is not required, use <code>ImmutableMap.of()</code> instead. 
 <p><b>Note for Java 7 and later:</b> this method is now unnecessary and should be treated as
  deprecated. Instead, use the <code>LinkedHashMap</code> constructor directly, taking advantage of
  the new <a href="http://goo.gl/iz2Wi">"diamond" syntax</a>.
 @return a new, empty <code>LinkedHashMap</code>
 */
+ (JavaUtilLinkedHashMap *)newLinkedHashMap OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Creates a <i>mutable</i>, insertion-ordered <code>LinkedHashMap</code> instance with the same
  mappings as the specified map.
 <p><b>Note:</b> if mutability is not required, use <code>ImmutableMap.copyOf(Map)</code> instead. 
 <p><b>Note for Java 7 and later:</b> this method is now unnecessary and should be treated as
  deprecated. Instead, use the <code>LinkedHashMap</code> constructor directly, taking advantage of
  the new <a href="http://goo.gl/iz2Wi">"diamond" syntax</a>.
 @param map the mappings to be placed in the new map
 @return a new, <code>LinkedHashMap</code> initialized with the mappings from <code>map</code>
 */
+ (JavaUtilLinkedHashMap *)newLinkedHashMapWithJavaUtilMap:(id<JavaUtilMap>)map OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Creates a <code>LinkedHashMap</code> instance, with a high enough "initial capacity" that it 
 <i>should</i> hold <code>expectedSize</code> elements without growth.This behavior cannot be
  broadly guaranteed, but it is observed to be true for OpenJDK 1.7.
 It also can't be guaranteed
  that the method isn't inadvertently <i>oversizing</i> the returned map.
 @param expectedSize the number of entries you expect to add to the returned map
 @return a new, empty <code>LinkedHashMap</code> with enough capacity to hold <code>expectedSize</code>
      entries without resizing
 @throw IllegalArgumentExceptionif <code>expectedSize</code> is negative
 @since 19.0
 */
+ (JavaUtilLinkedHashMap *)newLinkedHashMapWithExpectedSizeWithInt:(jint)expectedSize OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Creates a <i>mutable</i>, empty <code>TreeMap</code> instance using the natural ordering of its
  elements.
 <p><b>Note:</b> if mutability is not required, use <code>ImmutableSortedMap.of()</code> instead. 
 <p><b>Note for Java 7 and later:</b> this method is now unnecessary and should be treated as
  deprecated. Instead, use the <code>TreeMap</code> constructor directly, taking advantage of the new 
 <a href="http://goo.gl/iz2Wi">"diamond" syntax</a>.
 @return a new, empty <code>TreeMap</code>
 */
+ (JavaUtilTreeMap *)newTreeMap OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Creates a <i>mutable</i>, empty <code>TreeMap</code> instance using the given comparator.
 <p><b>Note:</b> if mutability is not required, use <code>ImmutableSortedMap.orderedBy(comparator).build()</code>
  instead. 
 <p><b>Note for Java 7 and later:</b> this method is now unnecessary and should be treated as
  deprecated. Instead, use the <code>TreeMap</code> constructor directly, taking advantage of the new 
 <a href="http://goo.gl/iz2Wi">"diamond" syntax</a>.
 @param comparator the comparator to sort the keys with
 @return a new, empty <code>TreeMap</code>
 */
+ (JavaUtilTreeMap *)newTreeMapWithJavaUtilComparator:(id<JavaUtilComparator> __nullable)comparator OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Creates a <i>mutable</i> <code>TreeMap</code> instance with the same mappings as the specified map
  and using the same ordering as the specified map.
 <p><b>Note:</b> if mutability is not required, use <code>ImmutableSortedMap.copyOfSorted(SortedMap)</code>
  instead. 
 <p><b>Note for Java 7 and later:</b> this method is now unnecessary and should be treated as
  deprecated. Instead, use the <code>TreeMap</code> constructor directly, taking advantage of the new 
 <a href="http://goo.gl/iz2Wi">"diamond" syntax</a>.
 @param map the sorted map whose mappings are to be placed in the new map and whose comparator      is to be used to sort the new map
 @return a new <code>TreeMap</code> initialized with the mappings from <code>map</code> and using the
      comparator of <code>map</code>
 */
+ (JavaUtilTreeMap *)newTreeMapWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)map OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns a view of the portion of <code>map</code> whose keys are contained by <code>range</code>.
 <p>This method delegates to the appropriate methods of <code>NavigableMap</code> (namely <code>subMap()</code>
 , <code>tailMap()</code>
 , and <code>headMap()</code>
 ) to actually construct the view. Consult these methods for a full
  description of the returned view's behavior. 
 <p><b>Warning:</b> <code>Range</code>s always represent a range of values using the values' natural
  ordering. <code>NavigableMap</code> on the other hand can specify a custom ordering via a <code>Comparator</code>
 , which can violate the natural ordering. Using this method (or in general using 
 <code>Range</code>) with unnaturally-ordered maps can lead to unexpected and undefined behavior.
 @since 20.0
 */
+ (id<JavaUtilNavigableMap>)subMapWithJavaUtilNavigableMap:(id<JavaUtilNavigableMap>)map
                           withComGoogleCommonCollectRange:(ComGoogleCommonCollectRange *)range;

/*!
 @brief Returns a synchronized (thread-safe) bimap backed by the specified bimap.In order to guarantee
  serial access, it is critical that <b>all</b> access to the backing bimap is accomplished
  through the returned bimap.
 <p>It is imperative that the user manually synchronize on the returned map when accessing any
  of its collection views: 
 @code
 BiMap<Long, String> map = Maps.synchronizedBiMap(
      HashBiMap.<Long, String>create());
  ...
  Set<Long> set = map.keySet();  // Needn't be in synchronized block
  ...
  synchronized (map) {  // Synchronizing on map, not set!
    Iterator<Long> it = set.iterator(); // Must be in synchronized block
    while (it.hasNext()) {
      foo(it.next());
    }  }  
 
@endcode
  
 <p>Failure to follow this advice may result in non-deterministic behavior. 
 <p>The returned bimap will be serializable if the specified bimap is serializable.
 @param bimap the bimap to be wrapped in a synchronized view
 @return a synchronized view of the specified bimap
 */
+ (id<ComGoogleCommonCollectBiMap>)synchronizedBiMapWithComGoogleCommonCollectBiMap:(id<ComGoogleCommonCollectBiMap>)bimap;

/*!
 @brief Returns a synchronized (thread-safe) navigable map backed by the specified navigable map.In
  order to guarantee serial access, it is critical that <b>all</b> access to the backing
  navigable map is accomplished through the returned navigable map (or its views).
 <p>It is imperative that the user manually synchronize on the returned navigable map when
  iterating over any of its collection views, or the collections views of any of its <code>descendingMap</code>
 , <code>subMap</code>, <code>headMap</code> or <code>tailMap</code> views. 
 @code
 NavigableMap<K, V> map = synchronizedNavigableMap(new TreeMap<K, V>());
  // Needn't be in synchronized block
  NavigableSet<K> set = map.navigableKeySet();
  synchronized (map) { // Synchronizing on map, not set!
    Iterator<K> it = set.iterator(); // Must be in synchronized block
    while (it.hasNext()) {
      foo(it.next());
    }  }  
 
@endcode
  
 <p>or:
  
 @code
 NavigableMap<K, V> map = synchronizedNavigableMap(new TreeMap<K, V>());
  NavigableMap<K, V> map2 = map.subMap(foo, false, bar, true);
  // Needn't be in synchronized block
  NavigableSet<K> set2 = map2.descendingKeySet();
  synchronized (map) { // Synchronizing on map, not map2 or set2!
    Iterator<K> it = set2.iterator(); // Must be in synchronized block
    while (it.hasNext()) {
      foo(it.next());
    }  }  
 
@endcode
  
 <p>Failure to follow this advice may result in non-deterministic behavior. 
 <p>The returned navigable map will be serializable if the specified navigable map is
  serializable.
 @param navigableMap the navigable map to be "wrapped" in a synchronized navigable map.
 @return a synchronized view of the specified navigable map.
 @since 13.0
 */
+ (id<JavaUtilNavigableMap>)synchronizedNavigableMapWithJavaUtilNavigableMap:(id<JavaUtilNavigableMap>)navigableMap;

/*!
 @brief Returns a <code>Collector</code> that accumulates elements into an <code>ImmutableMap</code> whose keys
  and values are the result of applying the provided mapping functions to the input elements.The
  resulting implementation is specialized for enum key types.
 The returned map and its views will
  iterate over keys in their enum definition order, not encounter order. 
 <p>If the mapped keys contain duplicates, an <code>IllegalArgumentException</code> is thrown when
  the collection operation is performed. (This differs from the <code>Collector</code> returned by 
 <code>Collectors.toMap(Function, Function)</code>
 , which throws an <code>IllegalStateException</code>
 .)
 @since 21.0
 */
+ (id<JavaUtilStreamCollector>)toImmutableEnumMapWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)keyFunction
                                                 withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)valueFunction;

/*!
 @brief Returns a <code>Collector</code> that accumulates elements into an <code>ImmutableMap</code> whose keys
  and values are the result of applying the provided mapping functions to the input elements.The
  resulting implementation is specialized for enum key types.
 The returned map and its views will
  iterate over keys in their enum definition order, not encounter order. 
 <p>If the mapped keys contain duplicates, the values are merged using the specified merging
  function.
 @since 21.0
 */
+ (id<JavaUtilStreamCollector>)toImmutableEnumMapWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)keyFunction
                                                 withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)valueFunction
                                           withJavaUtilFunctionBinaryOperator:(id<JavaUtilFunctionBinaryOperator>)mergeFunction;

/*!
 @brief Returns an immutable map whose keys are the distinct elements of <code>keys</code> and whose value
  for each key was computed by <code>valueFunction</code>.The map's iteration order is the order of
  the first appearance of each key in <code>keys</code>.
 <p>When there are multiple instances of a key in <code>keys</code>, it is unspecified whether <code>valueFunction</code>
  will be applied to more than one instance of that key and, if it is, which
  result will be mapped to that key in the returned map. 
 <p>If <code>keys</code> is a <code>Set</code>, a live view can be obtained instead of a copy using <code>Maps.asMap(Set, Function)</code>
 .
 @throw NullPointerExceptionif any element of <code>keys</code> is <code>null</code>, or if <code>valueFunction</code>
  produces <code>null</code> for any key
 @since 14.0
 */
+ (ComGoogleCommonCollectImmutableMap *)toMapWithJavaLangIterable:(id<JavaLangIterable>)keys
                                  withComGoogleCommonBaseFunction:(id<ComGoogleCommonBaseFunction>)valueFunction;

/*!
 @brief Returns an immutable map whose keys are the distinct elements of <code>keys</code> and whose value
  for each key was computed by <code>valueFunction</code>.The map's iteration order is the order of
  the first appearance of each key in <code>keys</code>.
 <p>When there are multiple instances of a key in <code>keys</code>, it is unspecified whether <code>valueFunction</code>
  will be applied to more than one instance of that key and, if it is, which
  result will be mapped to that key in the returned map.
 @throw NullPointerExceptionif any element of <code>keys</code> is <code>null</code>, or if <code>valueFunction</code>
  produces <code>null</code> for any key
 @since 14.0
 */
+ (ComGoogleCommonCollectImmutableMap *)toMapWithJavaUtilIterator:(id<JavaUtilIterator>)keys
                                  withComGoogleCommonBaseFunction:(id<ComGoogleCommonBaseFunction>)valueFunction;

/*!
 @brief Returns a view of a map whose values are derived from the original map's entries.In contrast
  to <code>transformValues</code>, this method's entry-transformation logic may depend on the key as
  well as the value.
 <p>All other properties of the transformed map, such as iteration order, are left intact. For
  example, the code: 
 @code
 Map<String, Boolean> options =
      ImmutableMap.of("verbose", true, "sort", false);
  EntryTransformer<String, Boolean, String> flagPrefixer =
      new EntryTransformer<String, Boolean, String>() {
        public String transformEntry(String key, Boolean value) {
          return value ? key : "no" + key;
        }
      };
  Map<String, String> transformed =
      Maps.transformEntries(options, flagPrefixer);
  System.out.println(transformed); 
 
@endcode
  ... prints <code>{verbose=verbose, sort=nosort}</code>.
  
 <p>Changes in the underlying map are reflected in this view. Conversely, this view supports
  removal operations, and these are reflected in the underlying map. 
 <p>It's acceptable for the underlying map to contain null keys and null values provided that
  the transformer is capable of accepting null inputs. The transformed map might contain null
  values if the transformer sometimes gives a null result. 
 <p>The returned map is not thread-safe or serializable, even if the underlying map is. 
 <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned
  map to be a view, but it means that the transformer will be applied many times for bulk
  operations like <code>Map.containsValue</code> and <code>Object.toString</code>. For this to perform
  well, <code>transformer</code> should be fast. To avoid lazy evaluation when the returned map
  doesn't need to be a view, copy the returned map into a new map of your choosing. 
 <p><b>Warning:</b> This method assumes that for any instance <code>k</code> of <code>EntryTransformer</code>
  key type <code>K</code>, <code>k.equals(k2)</code> implies that <code>k2</code> is also of
  type <code>K</code>. Using an <code>EntryTransformer</code> key type for which this may not hold, such as 
 <code>ArrayList</code>, may risk a <code>ClassCastException</code> when calling methods on the
  transformed map.
 @since 7.0
 */
+ (id<JavaUtilMap>)transformEntriesWithJavaUtilMap:(id<JavaUtilMap>)fromMap
   withComGoogleCommonCollectMaps_EntryTransformer:(id<ComGoogleCommonCollectMaps_EntryTransformer>)transformer;

/*!
 @brief Returns a view of a navigable map whose values are derived from the original navigable map's
  entries.In contrast to <code>transformValues</code>, this method's entry-transformation logic may
  depend on the key as well as the value.
 <p>All other properties of the transformed map, such as iteration order, are left intact. For
  example, the code: 
 @code
 NavigableMap<String, Boolean> options = Maps.newTreeMap();
  options.put("verbose", false);
  options.put("sort", true);
  EntryTransformer<String, Boolean, String> flagPrefixer =
      new EntryTransformer<String, Boolean, String>() {
        public String transformEntry(String key, Boolean value) {
          return value ? key : ("yes" + key);
        }
      };
  NavigableMap<String, String> transformed =
      LabsMaps.transformNavigableEntries(options, flagPrefixer);
  System.out.println(transformed); 
 
@endcode
  ... prints <code>{sort=yessort, verbose=verbose}</code>.
  
 <p>Changes in the underlying map are reflected in this view. Conversely, this view supports
  removal operations, and these are reflected in the underlying map. 
 <p>It's acceptable for the underlying map to contain null keys and null values provided that
  the transformer is capable of accepting null inputs. The transformed map might contain null
  values if the transformer sometimes gives a null result. 
 <p>The returned map is not thread-safe or serializable, even if the underlying map is. 
 <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned
  map to be a view, but it means that the transformer will be applied many times for bulk
  operations like <code>Map.containsValue</code> and <code>Object.toString</code>. For this to perform
  well, <code>transformer</code> should be fast. To avoid lazy evaluation when the returned map
  doesn't need to be a view, copy the returned map into a new map of your choosing. 
 <p><b>Warning:</b> This method assumes that for any instance <code>k</code> of <code>EntryTransformer</code>
  key type <code>K</code>, <code>k.equals(k2)</code> implies that <code>k2</code> is also of
  type <code>K</code>. Using an <code>EntryTransformer</code> key type for which this may not hold, such as 
 <code>ArrayList</code>, may risk a <code>ClassCastException</code> when calling methods on the
  transformed map.
 @since 13.0
 */
+ (id<JavaUtilNavigableMap>)transformEntriesWithJavaUtilNavigableMap:(id<JavaUtilNavigableMap>)fromMap
                     withComGoogleCommonCollectMaps_EntryTransformer:(id<ComGoogleCommonCollectMaps_EntryTransformer>)transformer;

/*!
 @brief Returns a view of a sorted map whose values are derived from the original sorted map's entries.
 In contrast to <code>transformValues</code>, this method's entry-transformation logic may depend on
  the key as well as the value. 
 <p>All other properties of the transformed map, such as iteration order, are left intact. For
  example, the code: 
 @code
 Map<String, Boolean> options =
      ImmutableSortedMap.of("verbose", true, "sort", false);
  EntryTransformer<String, Boolean, String> flagPrefixer =
      new EntryTransformer<String, Boolean, String>() {
        public String transformEntry(String key, Boolean value) {
          return value ? key : "yes" + key;
        }
      };
  SortedMap<String, String> transformed =
      Maps.transformEntries(options, flagPrefixer);
  System.out.println(transformed); 
 
@endcode
  ... prints <code>{sort=yessort, verbose=verbose}</code>.
  
 <p>Changes in the underlying map are reflected in this view. Conversely, this view supports
  removal operations, and these are reflected in the underlying map. 
 <p>It's acceptable for the underlying map to contain null keys and null values provided that
  the transformer is capable of accepting null inputs. The transformed map might contain null
  values if the transformer sometimes gives a null result. 
 <p>The returned map is not thread-safe or serializable, even if the underlying map is. 
 <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned
  map to be a view, but it means that the transformer will be applied many times for bulk
  operations like <code>Map.containsValue</code> and <code>Object.toString</code>. For this to perform
  well, <code>transformer</code> should be fast. To avoid lazy evaluation when the returned map
  doesn't need to be a view, copy the returned map into a new map of your choosing. 
 <p><b>Warning:</b> This method assumes that for any instance <code>k</code> of <code>EntryTransformer</code>
  key type <code>K</code>, <code>k.equals(k2)</code> implies that <code>k2</code> is also of
  type <code>K</code>. Using an <code>EntryTransformer</code> key type for which this may not hold, such as 
 <code>ArrayList</code>, may risk a <code>ClassCastException</code> when calling methods on the
  transformed map.
 @since 11.0
 */
+ (id<JavaUtilSortedMap>)transformEntriesWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)fromMap
               withComGoogleCommonCollectMaps_EntryTransformer:(id<ComGoogleCommonCollectMaps_EntryTransformer>)transformer;

/*!
 @brief Returns a view of a map where each value is transformed by a function.All other properties of
  the map, such as iteration order, are left intact.
 For example, the code: 
 @code
 Map<String, Integer> map = ImmutableMap.of("a", 4, "b", 9);
  Function<Integer, Double> sqrt =
      new Function<Integer, Double>() {
        public Double apply(Integer in) {
          return Math.sqrt((int) in);
        }
      };
  Map<String, Double> transformed = Maps.transformValues(map, sqrt);
  System.out.println(transformed); 
 
@endcode
  ... prints <code>{a=2.0, b=3.0}</code>.
  
 <p>Changes in the underlying map are reflected in this view. Conversely, this view supports
  removal operations, and these are reflected in the underlying map. 
 <p>It's acceptable for the underlying map to contain null keys, and even null values provided
  that the function is capable of accepting null input. The transformed map might contain null
  values, if the function sometimes gives a null result. 
 <p>The returned map is not thread-safe or serializable, even if the underlying map is. 
 <p>The function is applied lazily, invoked when needed. This is necessary for the returned map
  to be a view, but it means that the function will be applied many times for bulk operations
  like <code>Map.containsValue</code> and <code>Map.toString()</code>. For this to perform well, <code>function</code>
  should be fast. To avoid lazy evaluation when the returned map doesn't need to be a
  view, copy the returned map into a new map of your choosing.
 */
+ (id<JavaUtilMap>)transformValuesWithJavaUtilMap:(id<JavaUtilMap>)fromMap
                  withComGoogleCommonBaseFunction:(id<ComGoogleCommonBaseFunction>)function;

/*!
 @brief Returns a view of a navigable map where each value is transformed by a function.All other
  properties of the map, such as iteration order, are left intact.
 For example, the code: 
 @code
 NavigableMap<String, Integer> map = Maps.newTreeMap();
  map.put("a", 4);
  map.put("b", 9);
  Function<Integer, Double> sqrt =
      new Function<Integer, Double>() {
        public Double apply(Integer in) {
          return Math.sqrt((int) in);
        }
      };
  NavigableMap<String, Double> transformed =
       Maps.transformNavigableValues(map, sqrt);
  System.out.println(transformed); 
 
@endcode
  ... prints <code>{a=2.0, b=3.0}</code>.
  
 <p>Changes in the underlying map are reflected in this view. Conversely, this view supports
  removal operations, and these are reflected in the underlying map. 
 <p>It's acceptable for the underlying map to contain null keys, and even null values provided
  that the function is capable of accepting null input. The transformed map might contain null
  values, if the function sometimes gives a null result. 
 <p>The returned map is not thread-safe or serializable, even if the underlying map is. 
 <p>The function is applied lazily, invoked when needed. This is necessary for the returned map
  to be a view, but it means that the function will be applied many times for bulk operations
  like <code>Map.containsValue</code> and <code>Map.toString()</code>. For this to perform well, <code>function</code>
  should be fast. To avoid lazy evaluation when the returned map doesn't need to be a
  view, copy the returned map into a new map of your choosing.
 @since 13.0
 */
+ (id<JavaUtilNavigableMap>)transformValuesWithJavaUtilNavigableMap:(id<JavaUtilNavigableMap>)fromMap
                                    withComGoogleCommonBaseFunction:(id<ComGoogleCommonBaseFunction>)function;

/*!
 @brief Returns a view of a sorted map where each value is transformed by a function.All other
  properties of the map, such as iteration order, are left intact.
 For example, the code: 
 @code
 SortedMap<String, Integer> map = ImmutableSortedMap.of("a", 4, "b", 9);
  Function<Integer, Double> sqrt =
      new Function<Integer, Double>() {
        public Double apply(Integer in) {
          return Math.sqrt((int) in);
        }
      };
  SortedMap<String, Double> transformed =
       Maps.transformValues(map, sqrt);
  System.out.println(transformed); 
 
@endcode
  ... prints <code>{a=2.0, b=3.0}</code>.
  
 <p>Changes in the underlying map are reflected in this view. Conversely, this view supports
  removal operations, and these are reflected in the underlying map. 
 <p>It's acceptable for the underlying map to contain null keys, and even null values provided
  that the function is capable of accepting null input. The transformed map might contain null
  values, if the function sometimes gives a null result. 
 <p>The returned map is not thread-safe or serializable, even if the underlying map is. 
 <p>The function is applied lazily, invoked when needed. This is necessary for the returned map
  to be a view, but it means that the function will be applied many times for bulk operations
  like <code>Map.containsValue</code> and <code>Map.toString()</code>. For this to perform well, <code>function</code>
  should be fast. To avoid lazy evaluation when the returned map doesn't need to be a
  view, copy the returned map into a new map of your choosing.
 @since 11.0
 */
+ (id<JavaUtilSortedMap>)transformValuesWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)fromMap
                              withComGoogleCommonBaseFunction:(id<ComGoogleCommonBaseFunction>)function;

/*!
 @brief Returns a map with the given <code>values</code>, indexed by keys derived from those values.In
  other words, each input value produces an entry in the map whose key is the result of applying 
 <code>keyFunction</code> to that value.
 These entries appear in the same order as the input values.
  Example usage: 
 @code
 Color red = new Color("red", 255, 0, 0);
  ...
  ImmutableSet<Color> allColors = ImmutableSet.of(red, green, blue);
  Map<String, Color> colorForName =
      uniqueIndex(allColors, toStringFunction());
  assertThat(colorForName).containsEntry("red", red); 
 
@endcode
  
 <p>If your index may associate multiple values with each key, use <code>Multimaps.index</code>
 .
 @param values the values to use when constructing the <code>Map</code>
 @param keyFunction the function used to produce the key for each value
 @return a map mapping the result of evaluating the function <code>keyFunction</code> on each value
      in the input collection to that value
 @throw IllegalArgumentExceptionif <code>keyFunction</code> produces the same key for more than one
      value in the input collection
 @throw NullPointerExceptionif any element of <code>values</code> is <code>null</code>, or if <code>keyFunction</code>
  produces <code>null</code> for any value
 */
+ (ComGoogleCommonCollectImmutableMap *)uniqueIndexWithJavaLangIterable:(id<JavaLangIterable>)values
                                        withComGoogleCommonBaseFunction:(id<ComGoogleCommonBaseFunction>)keyFunction;

/*!
 @brief Returns a map with the given <code>values</code>, indexed by keys derived from those values.In
  other words, each input value produces an entry in the map whose key is the result of applying 
 <code>keyFunction</code> to that value.
 These entries appear in the same order as the input values.
  Example usage: 
 @code
 Color red = new Color("red", 255, 0, 0);
  ...
  Iterator<Color> allColors = ImmutableSet.of(red, green, blue).iterator();
  Map<String, Color> colorForName =
      uniqueIndex(allColors, toStringFunction());
  assertThat(colorForName).containsEntry("red", red); 
 
@endcode
  
 <p>If your index may associate multiple values with each key, use <code>Multimaps.index</code>
 .
 @param values the values to use when constructing the <code>Map</code>
 @param keyFunction the function used to produce the key for each value
 @return a map mapping the result of evaluating the function <code>keyFunction</code> on each value
      in the input collection to that value
 @throw IllegalArgumentExceptionif <code>keyFunction</code> produces the same key for more than one
      value in the input collection
 @throw NullPointerExceptionif any element of <code>values</code> is <code>null</code>, or if <code>keyFunction</code>
  produces <code>null</code> for any value
 @since 10.0
 */
+ (ComGoogleCommonCollectImmutableMap *)uniqueIndexWithJavaUtilIterator:(id<JavaUtilIterator>)values
                                        withComGoogleCommonBaseFunction:(id<ComGoogleCommonBaseFunction>)keyFunction;

/*!
 @brief Returns an unmodifiable view of the specified bimap.This method allows modules to provide
  users with "read-only" access to internal bimaps.
 Query operations on the returned bimap "read
  through" to the specified bimap, and attempts to modify the returned map, whether direct or via
  its collection views, result in an <code>UnsupportedOperationException</code>.
  
 <p>The returned bimap will be serializable if the specified bimap is serializable.
 @param bimap the bimap for which an unmodifiable view is to be returned
 @return an unmodifiable view of the specified bimap
 */
+ (id<ComGoogleCommonCollectBiMap>)unmodifiableBiMapWithComGoogleCommonCollectBiMap:(id<ComGoogleCommonCollectBiMap>)bimap;

/*!
 @brief Returns an unmodifiable view of the specified navigable map.Query operations on the returned
  map read through to the specified map, and attempts to modify the returned map, whether direct
  or via its views, result in an <code>UnsupportedOperationException</code>.
 <p>The returned navigable map will be serializable if the specified navigable map is
  serializable. 
 <p>This method's signature will not permit you to convert a <code>NavigableMap<? extends K,
  V></code>
  to a <code>NavigableMap<K, V></code>. If it permitted this, the returned map's <code>comparator()</code>
  method might return a <code>Comparator<? extends K></code>, which works only on a
  particular subtype of <code>K</code>, but promise that it's a <code>Comparator<? super K></code>, which
  must work on any type of <code>K</code>.
 @param map the navigable map for which an unmodifiable view is to be returned
 @return an unmodifiable view of the specified navigable map
 @since 12.0
 */
+ (id<JavaUtilNavigableMap>)unmodifiableNavigableMapWithJavaUtilNavigableMap:(id<JavaUtilNavigableMap>)map;

#pragma mark Package-Private

/*!
 @brief Views an entry transformer as a function from entries to entries.
 */
+ (id<ComGoogleCommonBaseFunction>)asEntryToEntryFunctionWithComGoogleCommonCollectMaps_EntryTransformer:(id<ComGoogleCommonCollectMaps_EntryTransformer>)transformer;

/*!
 @brief Views an entry transformer as a function from <code>Entry</code> to values.
 */
+ (id<ComGoogleCommonBaseFunction>)asEntryToValueFunctionWithComGoogleCommonCollectMaps_EntryTransformer:(id<ComGoogleCommonCollectMaps_EntryTransformer>)transformer;

/*!
 @brief Views a function as an entry transformer that ignores the entry key.
 */
+ (id<ComGoogleCommonCollectMaps_EntryTransformer>)asEntryTransformerWithComGoogleCommonBaseFunction:(id<ComGoogleCommonBaseFunction>)function;

+ (id<JavaUtilIterator>)asMapEntryIteratorWithJavaUtilSet:(id<JavaUtilSet>)set
                          withComGoogleCommonBaseFunction:(id<ComGoogleCommonBaseFunction>)function;

+ (id<ComGoogleCommonBaseFunction>)asValueToValueFunctionWithComGoogleCommonCollectMaps_EntryTransformer:(id<ComGoogleCommonCollectMaps_EntryTransformer>)transformer
                                                                                                  withId:(id)key;

/*!
 @brief Returns a capacity that is sufficient to keep the map from being resized as long as it grows no
  larger than expectedSize and the load factor is ≥ its default (0.75).
 */
+ (jint)capacityWithInt:(jint)expectedSize;

/*!
 @brief Implements <code>Collection.contains</code> safely for forwarding collections of map entries.If
  <code>o</code> is an instance of <code>Entry</code>, it is wrapped using <code>unmodifiableEntry</code> to
  protect against a possible nefarious equals method.
 <p>Note that <code>c</code> is the backing (delegate) collection, rather than the forwarding
  collection.
 @param c the delegate (unwrapped) collection of map entries
 @param o the object that might be contained in <code>c</code>
 @return <code>true</code> if <code>c</code> contains <code>o</code>
 */
+ (jboolean)containsEntryImplWithJavaUtilCollection:(id<JavaUtilCollection>)c
                                             withId:(id)o;

/*!
 @brief An admittedly inefficient implementation of <code>Map.containsKey</code>.
 */
+ (jboolean)containsKeyImplWithJavaUtilMap:(id<JavaUtilMap>)map
                                    withId:(id __nullable)key;

/*!
 @brief An implementation of <code>Map.containsValue</code>.
 */
+ (jboolean)containsValueImplWithJavaUtilMap:(id<JavaUtilMap>)map
                                      withId:(id __nullable)value;

/*!
 @brief An implementation of <code>Map.equals</code>.
 */
+ (jboolean)equalsImplWithJavaUtilMap:(id<JavaUtilMap>)map
                               withId:(id)object;

/*!
 @brief Returns a map from the ith element of list to i.
 */
+ (ComGoogleCommonCollectImmutableMap *)indexMapWithJavaUtilCollection:(id<JavaUtilCollection>)list;

+ (id<ComGoogleCommonBaseFunction>)keyFunction;

+ (id<JavaUtilIterator>)keyIteratorWithJavaUtilIterator:(id<JavaUtilIterator>)entryIterator;

+ (id)keyOrNullWithJavaUtilMap_Entry:(id<JavaUtilMap_Entry> __nullable)entry_;

+ (id<ComGoogleCommonBasePredicate>)keyPredicateOnEntriesWithComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate>)keyPredicate;

/*!
 @brief Returns the specified comparator if not null; otherwise returns <code>Ordering.natural()</code>.
 This method is an abomination of generics; the only purpose of this method is to contain the
  ugly type-casting in one place.
 */
+ (id<JavaUtilComparator>)orNaturalOrderWithJavaUtilComparator:(id<JavaUtilComparator> __nullable)comparator;

/*!
 @brief An implementation of <code>Map.putAll</code>.
 */
+ (void)putAllImplWithJavaUtilMap:(id<JavaUtilMap>)self_
                  withJavaUtilMap:(id<JavaUtilMap>)map;

/*!
 @brief Implements <code>Collection.remove</code> safely for forwarding collections of map entries.If
  <code>o</code> is an instance of <code>Entry</code>, it is wrapped using <code>unmodifiableEntry</code> to
  protect against a possible nefarious equals method.
 <p>Note that <code>c</code> is backing (delegate) collection, rather than the forwarding collection.
 @param c the delegate (unwrapped) collection of map entries
 @param o the object to remove from <code>c</code>
 @return <code>true</code> if <code>c</code> was changed
 */
+ (jboolean)removeEntryImplWithJavaUtilCollection:(id<JavaUtilCollection>)c
                                           withId:(id)o;

/*!
 @brief Delegates to <code>Map.containsKey</code>.Returns <code>false</code> on <code>ClassCastException</code> and 
 <code>NullPointerException</code>.
 */
+ (jboolean)safeContainsKeyWithJavaUtilMap:(id<JavaUtilMap>)map
                                    withId:(id)key;

/*!
 @brief Delegates to <code>Map.get</code>.Returns <code>null</code> on <code>ClassCastException</code> and <code>NullPointerException</code>
 .
 */
+ (id)safeGetWithJavaUtilMap:(id<JavaUtilMap>)map
                      withId:(id __nullable)key;

/*!
 @brief Delegates to <code>Map.remove</code>.Returns <code>null</code> on <code>ClassCastException</code> and <code>NullPointerException</code>
 .
 */
+ (id)safeRemoveWithJavaUtilMap:(id<JavaUtilMap>)map
                         withId:(id)key;

/*!
 @brief An implementation of <code>Map.toString</code>.
 */
+ (NSString *)toStringImplWithJavaUtilMap:(id<JavaUtilMap>)map;

/*!
 @brief Returns a view of an entry transformed by the specified transformer.
 */
+ (id<JavaUtilMap_Entry>)transformEntryWithComGoogleCommonCollectMaps_EntryTransformer:(id<ComGoogleCommonCollectMaps_EntryTransformer>)transformer
                                                                 withJavaUtilMap_Entry:(id<JavaUtilMap_Entry>)entry_;

/*!
 @brief Returns an unmodifiable view of the specified map entry.The <code>Entry.setValue</code> operation
  throws an <code>UnsupportedOperationException</code>.
 This also has the side-effect of redefining 
 <code>equals</code> to comply with the Entry contract, to avoid a possible nefarious implementation
  of equals.
 @param entry_ the entry for which to return an unmodifiable view
 @return an unmodifiable view of the entry
 */
+ (id<JavaUtilMap_Entry>)unmodifiableEntryWithJavaUtilMap_Entry:(id<JavaUtilMap_Entry>)entry_;

+ (ComGoogleCommonCollectUnmodifiableIterator *)unmodifiableEntryIteratorWithJavaUtilIterator:(id<JavaUtilIterator>)entryIterator;

/*!
 @brief Returns an unmodifiable view of the specified set of entries.The <code>Entry.setValue</code>
  operation throws an <code>UnsupportedOperationException</code>, as do any operations that would
  modify the returned set.
 @param entrySet the entries for which to return an unmodifiable view
 @return an unmodifiable view of the entries
 */
+ (id<JavaUtilSet>)unmodifiableEntrySetWithJavaUtilSet:(id<JavaUtilSet>)entrySet;

+ (id<ComGoogleCommonBaseFunction>)valueFunction;

+ (id<JavaUtilIterator>)valueIteratorWithJavaUtilIterator:(id<JavaUtilIterator>)entryIterator;

+ (id)valueOrNullWithJavaUtilMap_Entry:(id<JavaUtilMap_Entry> __nullable)entry_;

+ (id<ComGoogleCommonBasePredicate>)valuePredicateOnEntriesWithComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate>)valuePredicate;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectMaps)

FOUNDATION_EXPORT id<ComGoogleCommonBaseFunction> ComGoogleCommonCollectMaps_keyFunction(void);

FOUNDATION_EXPORT id<ComGoogleCommonBaseFunction> ComGoogleCommonCollectMaps_valueFunction(void);

FOUNDATION_EXPORT id<JavaUtilIterator> ComGoogleCommonCollectMaps_keyIteratorWithJavaUtilIterator_(id<JavaUtilIterator> entryIterator);

FOUNDATION_EXPORT id<JavaUtilIterator> ComGoogleCommonCollectMaps_valueIteratorWithJavaUtilIterator_(id<JavaUtilIterator> entryIterator);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableMap *ComGoogleCommonCollectMaps_immutableEnumMapWithJavaUtilMap_(id<JavaUtilMap> map);

FOUNDATION_EXPORT id<JavaUtilStreamCollector> ComGoogleCommonCollectMaps_toImmutableEnumMapWithJavaUtilFunctionFunction_withJavaUtilFunctionFunction_(id<JavaUtilFunctionFunction> keyFunction, id<JavaUtilFunctionFunction> valueFunction);

FOUNDATION_EXPORT id<JavaUtilStreamCollector> ComGoogleCommonCollectMaps_toImmutableEnumMapWithJavaUtilFunctionFunction_withJavaUtilFunctionFunction_withJavaUtilFunctionBinaryOperator_(id<JavaUtilFunctionFunction> keyFunction, id<JavaUtilFunctionFunction> valueFunction, id<JavaUtilFunctionBinaryOperator> mergeFunction);

FOUNDATION_EXPORT JavaUtilHashMap *ComGoogleCommonCollectMaps_newHashMap(void);

FOUNDATION_EXPORT JavaUtilHashMap *ComGoogleCommonCollectMaps_newHashMapWithJavaUtilMap_(id<JavaUtilMap> map);

FOUNDATION_EXPORT JavaUtilHashMap *ComGoogleCommonCollectMaps_newHashMapWithExpectedSizeWithInt_(jint expectedSize);

FOUNDATION_EXPORT jint ComGoogleCommonCollectMaps_capacityWithInt_(jint expectedSize);

FOUNDATION_EXPORT JavaUtilLinkedHashMap *ComGoogleCommonCollectMaps_newLinkedHashMap(void);

FOUNDATION_EXPORT JavaUtilLinkedHashMap *ComGoogleCommonCollectMaps_newLinkedHashMapWithJavaUtilMap_(id<JavaUtilMap> map);

FOUNDATION_EXPORT JavaUtilLinkedHashMap *ComGoogleCommonCollectMaps_newLinkedHashMapWithExpectedSizeWithInt_(jint expectedSize);

FOUNDATION_EXPORT id<JavaUtilConcurrentConcurrentMap> ComGoogleCommonCollectMaps_newConcurrentMap(void);

FOUNDATION_EXPORT JavaUtilTreeMap *ComGoogleCommonCollectMaps_newTreeMap(void);

FOUNDATION_EXPORT JavaUtilTreeMap *ComGoogleCommonCollectMaps_newTreeMapWithJavaUtilSortedMap_(id<JavaUtilSortedMap> map);

FOUNDATION_EXPORT JavaUtilTreeMap *ComGoogleCommonCollectMaps_newTreeMapWithJavaUtilComparator_(id<JavaUtilComparator> comparator);

FOUNDATION_EXPORT JavaUtilEnumMap *ComGoogleCommonCollectMaps_newEnumMapWithIOSClass_(IOSClass *type);

FOUNDATION_EXPORT JavaUtilEnumMap *ComGoogleCommonCollectMaps_newEnumMapWithJavaUtilMap_(id<JavaUtilMap> map);

FOUNDATION_EXPORT JavaUtilIdentityHashMap *ComGoogleCommonCollectMaps_newIdentityHashMap(void);

FOUNDATION_EXPORT id<ComGoogleCommonCollectMapDifference> ComGoogleCommonCollectMaps_differenceWithJavaUtilMap_withJavaUtilMap_(id<JavaUtilMap> left, id<JavaUtilMap> right);

FOUNDATION_EXPORT id<ComGoogleCommonCollectMapDifference> ComGoogleCommonCollectMaps_differenceWithJavaUtilMap_withJavaUtilMap_withComGoogleCommonBaseEquivalence_(id<JavaUtilMap> left, id<JavaUtilMap> right, ComGoogleCommonBaseEquivalence *valueEquivalence);

FOUNDATION_EXPORT id<ComGoogleCommonCollectSortedMapDifference> ComGoogleCommonCollectMaps_differenceWithJavaUtilSortedMap_withJavaUtilMap_(id<JavaUtilSortedMap> left, id<JavaUtilMap> right);

FOUNDATION_EXPORT id<JavaUtilComparator> ComGoogleCommonCollectMaps_orNaturalOrderWithJavaUtilComparator_(id<JavaUtilComparator> comparator);

FOUNDATION_EXPORT id<JavaUtilMap> ComGoogleCommonCollectMaps_asMapWithJavaUtilSet_withComGoogleCommonBaseFunction_(id<JavaUtilSet> set, id<ComGoogleCommonBaseFunction> function);

FOUNDATION_EXPORT id<JavaUtilSortedMap> ComGoogleCommonCollectMaps_asMapWithJavaUtilSortedSet_withComGoogleCommonBaseFunction_(id<JavaUtilSortedSet> set, id<ComGoogleCommonBaseFunction> function);

FOUNDATION_EXPORT id<JavaUtilNavigableMap> ComGoogleCommonCollectMaps_asMapWithJavaUtilNavigableSet_withComGoogleCommonBaseFunction_(id<JavaUtilNavigableSet> set, id<ComGoogleCommonBaseFunction> function);

FOUNDATION_EXPORT id<JavaUtilIterator> ComGoogleCommonCollectMaps_asMapEntryIteratorWithJavaUtilSet_withComGoogleCommonBaseFunction_(id<JavaUtilSet> set, id<ComGoogleCommonBaseFunction> function);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableMap *ComGoogleCommonCollectMaps_toMapWithJavaLangIterable_withComGoogleCommonBaseFunction_(id<JavaLangIterable> keys, id<ComGoogleCommonBaseFunction> valueFunction);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableMap *ComGoogleCommonCollectMaps_toMapWithJavaUtilIterator_withComGoogleCommonBaseFunction_(id<JavaUtilIterator> keys, id<ComGoogleCommonBaseFunction> valueFunction);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableMap *ComGoogleCommonCollectMaps_uniqueIndexWithJavaLangIterable_withComGoogleCommonBaseFunction_(id<JavaLangIterable> values, id<ComGoogleCommonBaseFunction> keyFunction);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableMap *ComGoogleCommonCollectMaps_uniqueIndexWithJavaUtilIterator_withComGoogleCommonBaseFunction_(id<JavaUtilIterator> values, id<ComGoogleCommonBaseFunction> keyFunction);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableMap *ComGoogleCommonCollectMaps_fromPropertiesWithJavaUtilProperties_(JavaUtilProperties *properties);

FOUNDATION_EXPORT id<JavaUtilMap_Entry> ComGoogleCommonCollectMaps_immutableEntryWithId_withId_(id key, id value);

FOUNDATION_EXPORT id<JavaUtilSet> ComGoogleCommonCollectMaps_unmodifiableEntrySetWithJavaUtilSet_(id<JavaUtilSet> entrySet);

FOUNDATION_EXPORT id<JavaUtilMap_Entry> ComGoogleCommonCollectMaps_unmodifiableEntryWithJavaUtilMap_Entry_(id<JavaUtilMap_Entry> entry_);

FOUNDATION_EXPORT ComGoogleCommonCollectUnmodifiableIterator *ComGoogleCommonCollectMaps_unmodifiableEntryIteratorWithJavaUtilIterator_(id<JavaUtilIterator> entryIterator);

FOUNDATION_EXPORT ComGoogleCommonBaseConverter *ComGoogleCommonCollectMaps_asConverterWithComGoogleCommonCollectBiMap_(id<ComGoogleCommonCollectBiMap> bimap);

FOUNDATION_EXPORT id<ComGoogleCommonCollectBiMap> ComGoogleCommonCollectMaps_synchronizedBiMapWithComGoogleCommonCollectBiMap_(id<ComGoogleCommonCollectBiMap> bimap);

FOUNDATION_EXPORT id<ComGoogleCommonCollectBiMap> ComGoogleCommonCollectMaps_unmodifiableBiMapWithComGoogleCommonCollectBiMap_(id<ComGoogleCommonCollectBiMap> bimap);

FOUNDATION_EXPORT id<JavaUtilMap> ComGoogleCommonCollectMaps_transformValuesWithJavaUtilMap_withComGoogleCommonBaseFunction_(id<JavaUtilMap> fromMap, id<ComGoogleCommonBaseFunction> function);

FOUNDATION_EXPORT id<JavaUtilSortedMap> ComGoogleCommonCollectMaps_transformValuesWithJavaUtilSortedMap_withComGoogleCommonBaseFunction_(id<JavaUtilSortedMap> fromMap, id<ComGoogleCommonBaseFunction> function);

FOUNDATION_EXPORT id<JavaUtilNavigableMap> ComGoogleCommonCollectMaps_transformValuesWithJavaUtilNavigableMap_withComGoogleCommonBaseFunction_(id<JavaUtilNavigableMap> fromMap, id<ComGoogleCommonBaseFunction> function);

FOUNDATION_EXPORT id<JavaUtilMap> ComGoogleCommonCollectMaps_transformEntriesWithJavaUtilMap_withComGoogleCommonCollectMaps_EntryTransformer_(id<JavaUtilMap> fromMap, id<ComGoogleCommonCollectMaps_EntryTransformer> transformer);

FOUNDATION_EXPORT id<JavaUtilSortedMap> ComGoogleCommonCollectMaps_transformEntriesWithJavaUtilSortedMap_withComGoogleCommonCollectMaps_EntryTransformer_(id<JavaUtilSortedMap> fromMap, id<ComGoogleCommonCollectMaps_EntryTransformer> transformer);

FOUNDATION_EXPORT id<JavaUtilNavigableMap> ComGoogleCommonCollectMaps_transformEntriesWithJavaUtilNavigableMap_withComGoogleCommonCollectMaps_EntryTransformer_(id<JavaUtilNavigableMap> fromMap, id<ComGoogleCommonCollectMaps_EntryTransformer> transformer);

FOUNDATION_EXPORT id<ComGoogleCommonCollectMaps_EntryTransformer> ComGoogleCommonCollectMaps_asEntryTransformerWithComGoogleCommonBaseFunction_(id<ComGoogleCommonBaseFunction> function);

FOUNDATION_EXPORT id<ComGoogleCommonBaseFunction> ComGoogleCommonCollectMaps_asValueToValueFunctionWithComGoogleCommonCollectMaps_EntryTransformer_withId_(id<ComGoogleCommonCollectMaps_EntryTransformer> transformer, id key);

FOUNDATION_EXPORT id<ComGoogleCommonBaseFunction> ComGoogleCommonCollectMaps_asEntryToValueFunctionWithComGoogleCommonCollectMaps_EntryTransformer_(id<ComGoogleCommonCollectMaps_EntryTransformer> transformer);

FOUNDATION_EXPORT id<JavaUtilMap_Entry> ComGoogleCommonCollectMaps_transformEntryWithComGoogleCommonCollectMaps_EntryTransformer_withJavaUtilMap_Entry_(id<ComGoogleCommonCollectMaps_EntryTransformer> transformer, id<JavaUtilMap_Entry> entry_);

FOUNDATION_EXPORT id<ComGoogleCommonBaseFunction> ComGoogleCommonCollectMaps_asEntryToEntryFunctionWithComGoogleCommonCollectMaps_EntryTransformer_(id<ComGoogleCommonCollectMaps_EntryTransformer> transformer);

FOUNDATION_EXPORT id<ComGoogleCommonBasePredicate> ComGoogleCommonCollectMaps_keyPredicateOnEntriesWithComGoogleCommonBasePredicate_(id<ComGoogleCommonBasePredicate> keyPredicate);

FOUNDATION_EXPORT id<ComGoogleCommonBasePredicate> ComGoogleCommonCollectMaps_valuePredicateOnEntriesWithComGoogleCommonBasePredicate_(id<ComGoogleCommonBasePredicate> valuePredicate);

FOUNDATION_EXPORT id<JavaUtilMap> ComGoogleCommonCollectMaps_filterKeysWithJavaUtilMap_withComGoogleCommonBasePredicate_(id<JavaUtilMap> unfiltered, id<ComGoogleCommonBasePredicate> keyPredicate);

FOUNDATION_EXPORT id<JavaUtilSortedMap> ComGoogleCommonCollectMaps_filterKeysWithJavaUtilSortedMap_withComGoogleCommonBasePredicate_(id<JavaUtilSortedMap> unfiltered, id<ComGoogleCommonBasePredicate> keyPredicate);

FOUNDATION_EXPORT id<JavaUtilNavigableMap> ComGoogleCommonCollectMaps_filterKeysWithJavaUtilNavigableMap_withComGoogleCommonBasePredicate_(id<JavaUtilNavigableMap> unfiltered, id<ComGoogleCommonBasePredicate> keyPredicate);

FOUNDATION_EXPORT id<ComGoogleCommonCollectBiMap> ComGoogleCommonCollectMaps_filterKeysWithComGoogleCommonCollectBiMap_withComGoogleCommonBasePredicate_(id<ComGoogleCommonCollectBiMap> unfiltered, id<ComGoogleCommonBasePredicate> keyPredicate);

FOUNDATION_EXPORT id<JavaUtilMap> ComGoogleCommonCollectMaps_filterValuesWithJavaUtilMap_withComGoogleCommonBasePredicate_(id<JavaUtilMap> unfiltered, id<ComGoogleCommonBasePredicate> valuePredicate);

FOUNDATION_EXPORT id<JavaUtilSortedMap> ComGoogleCommonCollectMaps_filterValuesWithJavaUtilSortedMap_withComGoogleCommonBasePredicate_(id<JavaUtilSortedMap> unfiltered, id<ComGoogleCommonBasePredicate> valuePredicate);

FOUNDATION_EXPORT id<JavaUtilNavigableMap> ComGoogleCommonCollectMaps_filterValuesWithJavaUtilNavigableMap_withComGoogleCommonBasePredicate_(id<JavaUtilNavigableMap> unfiltered, id<ComGoogleCommonBasePredicate> valuePredicate);

FOUNDATION_EXPORT id<ComGoogleCommonCollectBiMap> ComGoogleCommonCollectMaps_filterValuesWithComGoogleCommonCollectBiMap_withComGoogleCommonBasePredicate_(id<ComGoogleCommonCollectBiMap> unfiltered, id<ComGoogleCommonBasePredicate> valuePredicate);

FOUNDATION_EXPORT id<JavaUtilMap> ComGoogleCommonCollectMaps_filterEntriesWithJavaUtilMap_withComGoogleCommonBasePredicate_(id<JavaUtilMap> unfiltered, id<ComGoogleCommonBasePredicate> entryPredicate);

FOUNDATION_EXPORT id<JavaUtilSortedMap> ComGoogleCommonCollectMaps_filterEntriesWithJavaUtilSortedMap_withComGoogleCommonBasePredicate_(id<JavaUtilSortedMap> unfiltered, id<ComGoogleCommonBasePredicate> entryPredicate);

FOUNDATION_EXPORT id<JavaUtilNavigableMap> ComGoogleCommonCollectMaps_filterEntriesWithJavaUtilNavigableMap_withComGoogleCommonBasePredicate_(id<JavaUtilNavigableMap> unfiltered, id<ComGoogleCommonBasePredicate> entryPredicate);

FOUNDATION_EXPORT id<ComGoogleCommonCollectBiMap> ComGoogleCommonCollectMaps_filterEntriesWithComGoogleCommonCollectBiMap_withComGoogleCommonBasePredicate_(id<ComGoogleCommonCollectBiMap> unfiltered, id<ComGoogleCommonBasePredicate> entryPredicate);

FOUNDATION_EXPORT id<JavaUtilNavigableMap> ComGoogleCommonCollectMaps_unmodifiableNavigableMapWithJavaUtilNavigableMap_(id<JavaUtilNavigableMap> map);

FOUNDATION_EXPORT id<JavaUtilNavigableMap> ComGoogleCommonCollectMaps_synchronizedNavigableMapWithJavaUtilNavigableMap_(id<JavaUtilNavigableMap> navigableMap);

FOUNDATION_EXPORT id ComGoogleCommonCollectMaps_safeGetWithJavaUtilMap_withId_(id<JavaUtilMap> map, id key);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectMaps_safeContainsKeyWithJavaUtilMap_withId_(id<JavaUtilMap> map, id key);

FOUNDATION_EXPORT id ComGoogleCommonCollectMaps_safeRemoveWithJavaUtilMap_withId_(id<JavaUtilMap> map, id key);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectMaps_containsKeyImplWithJavaUtilMap_withId_(id<JavaUtilMap> map, id key);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectMaps_containsValueImplWithJavaUtilMap_withId_(id<JavaUtilMap> map, id value);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectMaps_containsEntryImplWithJavaUtilCollection_withId_(id<JavaUtilCollection> c, id o);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectMaps_removeEntryImplWithJavaUtilCollection_withId_(id<JavaUtilCollection> c, id o);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectMaps_equalsImplWithJavaUtilMap_withId_(id<JavaUtilMap> map, id object);

FOUNDATION_EXPORT NSString *ComGoogleCommonCollectMaps_toStringImplWithJavaUtilMap_(id<JavaUtilMap> map);

FOUNDATION_EXPORT void ComGoogleCommonCollectMaps_putAllImplWithJavaUtilMap_withJavaUtilMap_(id<JavaUtilMap> self_, id<JavaUtilMap> map);

FOUNDATION_EXPORT id ComGoogleCommonCollectMaps_keyOrNullWithJavaUtilMap_Entry_(id<JavaUtilMap_Entry> entry_);

FOUNDATION_EXPORT id ComGoogleCommonCollectMaps_valueOrNullWithJavaUtilMap_Entry_(id<JavaUtilMap_Entry> entry_);

FOUNDATION_EXPORT ComGoogleCommonCollectImmutableMap *ComGoogleCommonCollectMaps_indexMapWithJavaUtilCollection_(id<JavaUtilCollection> list);

FOUNDATION_EXPORT id<JavaUtilNavigableMap> ComGoogleCommonCollectMaps_subMapWithJavaUtilNavigableMap_withComGoogleCommonCollectRange_(id<JavaUtilNavigableMap> map, ComGoogleCommonCollectRange *range);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectMaps)

#endif

#if !defined (ComGoogleCommonCollectMaps_MapDifferenceImpl_) && (INCLUDE_ALL_ComGoogleCommonCollectMaps || defined(INCLUDE_ComGoogleCommonCollectMaps_MapDifferenceImpl))
#define ComGoogleCommonCollectMaps_MapDifferenceImpl_

#define RESTRICT_ComGoogleCommonCollectMapDifference 1
#define INCLUDE_ComGoogleCommonCollectMapDifference 1
#include "com/google/common/collect/MapDifference.h"

@protocol JavaUtilMap;

@interface ComGoogleCommonCollectMaps_MapDifferenceImpl : NSObject < ComGoogleCommonCollectMapDifference > {
 @public
  id<JavaUtilMap> onlyOnLeft_;
  id<JavaUtilMap> onlyOnRight_;
  id<JavaUtilMap> onBoth_;
  id<JavaUtilMap> differences_;
}

#pragma mark Public

- (jboolean)areEqual;

- (id<JavaUtilMap>)entriesDiffering;

- (id<JavaUtilMap>)entriesInCommon;

- (id<JavaUtilMap>)entriesOnlyOnLeft;

- (id<JavaUtilMap>)entriesOnlyOnRight;

- (jboolean)isEqual:(id)object;

- (NSUInteger)hash;

- (NSString *)description;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilMap:(id<JavaUtilMap>)onlyOnLeft
                              withJavaUtilMap:(id<JavaUtilMap>)onlyOnRight
                              withJavaUtilMap:(id<JavaUtilMap>)onBoth
                              withJavaUtilMap:(id<JavaUtilMap>)differences;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectMaps_MapDifferenceImpl)

J2OBJC_FIELD_SETTER(ComGoogleCommonCollectMaps_MapDifferenceImpl, onlyOnLeft_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ComGoogleCommonCollectMaps_MapDifferenceImpl, onlyOnRight_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ComGoogleCommonCollectMaps_MapDifferenceImpl, onBoth_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ComGoogleCommonCollectMaps_MapDifferenceImpl, differences_, id<JavaUtilMap>)

FOUNDATION_EXPORT void ComGoogleCommonCollectMaps_MapDifferenceImpl_initWithJavaUtilMap_withJavaUtilMap_withJavaUtilMap_withJavaUtilMap_(ComGoogleCommonCollectMaps_MapDifferenceImpl *self, id<JavaUtilMap> onlyOnLeft, id<JavaUtilMap> onlyOnRight, id<JavaUtilMap> onBoth, id<JavaUtilMap> differences);

FOUNDATION_EXPORT ComGoogleCommonCollectMaps_MapDifferenceImpl *new_ComGoogleCommonCollectMaps_MapDifferenceImpl_initWithJavaUtilMap_withJavaUtilMap_withJavaUtilMap_withJavaUtilMap_(id<JavaUtilMap> onlyOnLeft, id<JavaUtilMap> onlyOnRight, id<JavaUtilMap> onBoth, id<JavaUtilMap> differences) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectMaps_MapDifferenceImpl *create_ComGoogleCommonCollectMaps_MapDifferenceImpl_initWithJavaUtilMap_withJavaUtilMap_withJavaUtilMap_withJavaUtilMap_(id<JavaUtilMap> onlyOnLeft, id<JavaUtilMap> onlyOnRight, id<JavaUtilMap> onBoth, id<JavaUtilMap> differences);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectMaps_MapDifferenceImpl)

#endif

#if !defined (ComGoogleCommonCollectMaps_ValueDifferenceImpl_) && (INCLUDE_ALL_ComGoogleCommonCollectMaps || defined(INCLUDE_ComGoogleCommonCollectMaps_ValueDifferenceImpl))
#define ComGoogleCommonCollectMaps_ValueDifferenceImpl_

#define RESTRICT_ComGoogleCommonCollectMapDifference 1
#define INCLUDE_ComGoogleCommonCollectMapDifference_ValueDifference 1
#include "com/google/common/collect/MapDifference.h"

@interface ComGoogleCommonCollectMaps_ValueDifferenceImpl : NSObject < ComGoogleCommonCollectMapDifference_ValueDifference >

#pragma mark Public

- (jboolean)isEqual:(id __nullable)object;

- (NSUInteger)hash;

- (id)leftValue;

- (id)rightValue;

- (NSString *)description;

#pragma mark Package-Private

+ (id<ComGoogleCommonCollectMapDifference_ValueDifference>)createWithId:(id)left
                                                                 withId:(id)right;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectMaps_ValueDifferenceImpl)

FOUNDATION_EXPORT id<ComGoogleCommonCollectMapDifference_ValueDifference> ComGoogleCommonCollectMaps_ValueDifferenceImpl_createWithId_withId_(id left, id right);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectMaps_ValueDifferenceImpl)

#endif

#if !defined (ComGoogleCommonCollectMaps_SortedMapDifferenceImpl_) && (INCLUDE_ALL_ComGoogleCommonCollectMaps || defined(INCLUDE_ComGoogleCommonCollectMaps_SortedMapDifferenceImpl))
#define ComGoogleCommonCollectMaps_SortedMapDifferenceImpl_

#define RESTRICT_ComGoogleCommonCollectSortedMapDifference 1
#define INCLUDE_ComGoogleCommonCollectSortedMapDifference 1
#include "com/google/common/collect/SortedMapDifference.h"

@protocol JavaUtilMap;
@protocol JavaUtilSortedMap;

@interface ComGoogleCommonCollectMaps_SortedMapDifferenceImpl : ComGoogleCommonCollectMaps_MapDifferenceImpl < ComGoogleCommonCollectSortedMapDifference >

#pragma mark Public

- (id<JavaUtilSortedMap>)entriesDiffering;

- (id<JavaUtilSortedMap>)entriesInCommon;

- (id<JavaUtilSortedMap>)entriesOnlyOnLeft;

- (id<JavaUtilSortedMap>)entriesOnlyOnRight;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)onlyOnLeft
                              withJavaUtilSortedMap:(id<JavaUtilSortedMap>)onlyOnRight
                              withJavaUtilSortedMap:(id<JavaUtilSortedMap>)onBoth
                              withJavaUtilSortedMap:(id<JavaUtilSortedMap>)differences;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaUtilMap:(id<JavaUtilMap>)arg0
                              withJavaUtilMap:(id<JavaUtilMap>)arg1
                              withJavaUtilMap:(id<JavaUtilMap>)arg2
                              withJavaUtilMap:(id<JavaUtilMap>)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectMaps_SortedMapDifferenceImpl)

FOUNDATION_EXPORT void ComGoogleCommonCollectMaps_SortedMapDifferenceImpl_initWithJavaUtilSortedMap_withJavaUtilSortedMap_withJavaUtilSortedMap_withJavaUtilSortedMap_(ComGoogleCommonCollectMaps_SortedMapDifferenceImpl *self, id<JavaUtilSortedMap> onlyOnLeft, id<JavaUtilSortedMap> onlyOnRight, id<JavaUtilSortedMap> onBoth, id<JavaUtilSortedMap> differences);

FOUNDATION_EXPORT ComGoogleCommonCollectMaps_SortedMapDifferenceImpl *new_ComGoogleCommonCollectMaps_SortedMapDifferenceImpl_initWithJavaUtilSortedMap_withJavaUtilSortedMap_withJavaUtilSortedMap_withJavaUtilSortedMap_(id<JavaUtilSortedMap> onlyOnLeft, id<JavaUtilSortedMap> onlyOnRight, id<JavaUtilSortedMap> onBoth, id<JavaUtilSortedMap> differences) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectMaps_SortedMapDifferenceImpl *create_ComGoogleCommonCollectMaps_SortedMapDifferenceImpl_initWithJavaUtilSortedMap_withJavaUtilSortedMap_withJavaUtilSortedMap_withJavaUtilSortedMap_(id<JavaUtilSortedMap> onlyOnLeft, id<JavaUtilSortedMap> onlyOnRight, id<JavaUtilSortedMap> onBoth, id<JavaUtilSortedMap> differences);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectMaps_SortedMapDifferenceImpl)

#endif

#if !defined (ComGoogleCommonCollectMaps_ViewCachingAbstractMap_) && (INCLUDE_ALL_ComGoogleCommonCollectMaps || defined(INCLUDE_ComGoogleCommonCollectMaps_ViewCachingAbstractMap))
#define ComGoogleCommonCollectMaps_ViewCachingAbstractMap_

#define RESTRICT_JavaUtilAbstractMap 1
#define INCLUDE_JavaUtilAbstractMap 1
#include "java/util/AbstractMap.h"

@protocol JavaUtilCollection;
@protocol JavaUtilSet;

/*!
 @brief <code>AbstractMap</code> extension that makes it easy to cache customized keySet, values, and
  entrySet views.
 */
@interface ComGoogleCommonCollectMaps_ViewCachingAbstractMap : JavaUtilAbstractMap

#pragma mark Public

- (id<JavaUtilSet>)entrySet;

- (id<JavaUtilSet>)keySet;

- (id<JavaUtilCollection>)values;

#pragma mark Package-Private

- (instancetype __nonnull)init;

/*!
 @brief Creates the entry set to be returned by <code>entrySet()</code>.This method is invoked at most
  once on a given map, at the time when <code>entrySet</code> is first called.
 */
- (id<JavaUtilSet>)createEntrySet;

- (id<JavaUtilSet>)createKeySet;

- (id<JavaUtilCollection>)createValues;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectMaps_ViewCachingAbstractMap)

FOUNDATION_EXPORT void ComGoogleCommonCollectMaps_ViewCachingAbstractMap_init(ComGoogleCommonCollectMaps_ViewCachingAbstractMap *self);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectMaps_ViewCachingAbstractMap)

#endif

#if !defined (ComGoogleCommonCollectMaps_EntrySet_) && (INCLUDE_ALL_ComGoogleCommonCollectMaps || defined(INCLUDE_ComGoogleCommonCollectMaps_EntrySet))
#define ComGoogleCommonCollectMaps_EntrySet_

#define RESTRICT_ComGoogleCommonCollectSets 1
#define INCLUDE_ComGoogleCommonCollectSets_ImprovedAbstractSet 1
#include "com/google/common/collect/Sets.h"

@protocol JavaUtilCollection;
@protocol JavaUtilMap;

@interface ComGoogleCommonCollectMaps_EntrySet : ComGoogleCommonCollectSets_ImprovedAbstractSet

#pragma mark Public

- (void)clear;

- (jboolean)containsWithId:(id)o;

- (jboolean)isEmpty;

- (jboolean)removeWithId:(id)o;

- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)c;

- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)c;

- (jint)size;

#pragma mark Package-Private

- (instancetype __nonnull)init;

- (id<JavaUtilMap>)map;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectMaps_EntrySet)

FOUNDATION_EXPORT void ComGoogleCommonCollectMaps_EntrySet_init(ComGoogleCommonCollectMaps_EntrySet *self);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectMaps_EntrySet)

#endif

#if !defined (ComGoogleCommonCollectMaps_UnmodifiableEntries_) && (INCLUDE_ALL_ComGoogleCommonCollectMaps || defined(INCLUDE_ComGoogleCommonCollectMaps_UnmodifiableEntries))
#define ComGoogleCommonCollectMaps_UnmodifiableEntries_

#define RESTRICT_ComGoogleCommonCollectForwardingCollection 1
#define INCLUDE_ComGoogleCommonCollectForwardingCollection 1
#include "com/google/common/collect/ForwardingCollection.h"

@class IOSObjectArray;
@protocol JavaUtilCollection;
@protocol JavaUtilIterator;

/*!
 - seealso: Multimaps#unmodifiableEntries
 */
@interface ComGoogleCommonCollectMaps_UnmodifiableEntries : ComGoogleCommonCollectForwardingCollection

#pragma mark Public

- (id<JavaUtilIterator>)iterator;

- (IOSObjectArray *)toArray;

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)array;

#pragma mark Protected

- (id<JavaUtilCollection>)delegate;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilCollection:(id<JavaUtilCollection>)entries;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectMaps_UnmodifiableEntries)

FOUNDATION_EXPORT void ComGoogleCommonCollectMaps_UnmodifiableEntries_initWithJavaUtilCollection_(ComGoogleCommonCollectMaps_UnmodifiableEntries *self, id<JavaUtilCollection> entries);

FOUNDATION_EXPORT ComGoogleCommonCollectMaps_UnmodifiableEntries *new_ComGoogleCommonCollectMaps_UnmodifiableEntries_initWithJavaUtilCollection_(id<JavaUtilCollection> entries) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectMaps_UnmodifiableEntries *create_ComGoogleCommonCollectMaps_UnmodifiableEntries_initWithJavaUtilCollection_(id<JavaUtilCollection> entries);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectMaps_UnmodifiableEntries)

#endif

#if !defined (ComGoogleCommonCollectMaps_UnmodifiableEntrySet_) && (INCLUDE_ALL_ComGoogleCommonCollectMaps || defined(INCLUDE_ComGoogleCommonCollectMaps_UnmodifiableEntrySet))
#define ComGoogleCommonCollectMaps_UnmodifiableEntrySet_

#define RESTRICT_JavaUtilSet 1
#define INCLUDE_JavaUtilSet 1
#include "java/util/Set.h"

@protocol JavaUtilCollection;
@protocol JavaUtilSpliterator;

/*!
 - seealso: Maps#unmodifiableEntrySet(Set)
 */
@interface ComGoogleCommonCollectMaps_UnmodifiableEntrySet : ComGoogleCommonCollectMaps_UnmodifiableEntries < JavaUtilSet >

#pragma mark Public

- (jboolean)isEqual:(id __nullable)object;

- (NSUInteger)hash;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilSet:(id<JavaUtilSet>)entries;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaUtilCollection:(id<JavaUtilCollection>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectMaps_UnmodifiableEntrySet)

FOUNDATION_EXPORT void ComGoogleCommonCollectMaps_UnmodifiableEntrySet_initWithJavaUtilSet_(ComGoogleCommonCollectMaps_UnmodifiableEntrySet *self, id<JavaUtilSet> entries);

FOUNDATION_EXPORT ComGoogleCommonCollectMaps_UnmodifiableEntrySet *new_ComGoogleCommonCollectMaps_UnmodifiableEntrySet_initWithJavaUtilSet_(id<JavaUtilSet> entries) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectMaps_UnmodifiableEntrySet *create_ComGoogleCommonCollectMaps_UnmodifiableEntrySet_initWithJavaUtilSet_(id<JavaUtilSet> entries);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectMaps_UnmodifiableEntrySet)

#endif

#if !defined (ComGoogleCommonCollectMaps_EntryTransformer_) && (INCLUDE_ALL_ComGoogleCommonCollectMaps || defined(INCLUDE_ComGoogleCommonCollectMaps_EntryTransformer))
#define ComGoogleCommonCollectMaps_EntryTransformer_

/*!
 @brief A transformation of the value of a key-value pair, using both key and value as inputs.To apply
  the transformation to a map, use <code>Maps.transformEntries(Map, EntryTransformer)</code>.
 @since 7.0
 */
@protocol ComGoogleCommonCollectMaps_EntryTransformer < JavaObject >

/*!
 @brief Determines an output value based on a key-value pair.This method is <i>generally
  expected</i>, but not absolutely required, to have the following properties: 
 <ul>
    <li>Its execution does not cause any observable side effects.
 <li>The computation is <i>consistent with equals</i>; that is, <code>Objects.equal</code>
 <code>(k1, k2) &&</code> <code>Objects.equal</code><code>(v1, v2)</code> implies that
        <code>Objects.equal(transformer.transform(k1, v1), transformer.transform(k2, v2))</code>.
  </ul>
 @throw NullPointerExceptionif the key or value is null and this transformer does not accept
      null arguments
 */
- (id)transformEntryWithId:(id)key
                    withId:(id)value;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectMaps_EntryTransformer)

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectMaps_EntryTransformer)

#endif

#if !defined (ComGoogleCommonCollectMaps_IteratorBasedAbstractMap_) && (INCLUDE_ALL_ComGoogleCommonCollectMaps || defined(INCLUDE_ComGoogleCommonCollectMaps_IteratorBasedAbstractMap))
#define ComGoogleCommonCollectMaps_IteratorBasedAbstractMap_

#define RESTRICT_JavaUtilAbstractMap 1
#define INCLUDE_JavaUtilAbstractMap 1
#include "java/util/AbstractMap.h"

@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilIterator;
@protocol JavaUtilSet;
@protocol JavaUtilSpliterator;

@interface ComGoogleCommonCollectMaps_IteratorBasedAbstractMap : JavaUtilAbstractMap

#pragma mark Public

- (void)clear;

- (id<JavaUtilSet>)entrySet;

- (jint)size;

#pragma mark Package-Private

- (instancetype __nonnull)init;

- (id<JavaUtilIterator>)entryIterator;

- (id<JavaUtilSpliterator>)entrySpliterator;

- (void)forEachEntryWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectMaps_IteratorBasedAbstractMap)

FOUNDATION_EXPORT void ComGoogleCommonCollectMaps_IteratorBasedAbstractMap_init(ComGoogleCommonCollectMaps_IteratorBasedAbstractMap *self);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectMaps_IteratorBasedAbstractMap)

#endif

#if !defined (ComGoogleCommonCollectMaps_TransformedEntriesMap_) && (INCLUDE_ALL_ComGoogleCommonCollectMaps || defined(INCLUDE_ComGoogleCommonCollectMaps_TransformedEntriesMap))
#define ComGoogleCommonCollectMaps_TransformedEntriesMap_

@protocol ComGoogleCommonCollectMaps_EntryTransformer;
@protocol JavaUtilCollection;
@protocol JavaUtilFunctionBiConsumer;
@protocol JavaUtilIterator;
@protocol JavaUtilMap;
@protocol JavaUtilSet;
@protocol JavaUtilSpliterator;

@interface ComGoogleCommonCollectMaps_TransformedEntriesMap : ComGoogleCommonCollectMaps_IteratorBasedAbstractMap {
 @public
  id<JavaUtilMap> fromMap_;
  id<ComGoogleCommonCollectMaps_EntryTransformer> transformer_;
}

#pragma mark Public

- (void)clear;

- (jboolean)containsKeyWithId:(id)key;

- (void)forEachWithJavaUtilFunctionBiConsumer:(id<JavaUtilFunctionBiConsumer>)action;

- (id)getWithId:(id __nullable)key;

- (id)getOrDefaultWithId:(id __nullable)key
                  withId:(id)defaultValue;

- (id<JavaUtilSet>)keySet;

- (id)removeWithId:(id)key;

- (jint)size;

- (id<JavaUtilCollection>)values;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilMap:(id<JavaUtilMap>)fromMap
withComGoogleCommonCollectMaps_EntryTransformer:(id<ComGoogleCommonCollectMaps_EntryTransformer>)transformer;

- (id<JavaUtilIterator>)entryIterator;

- (id<JavaUtilSpliterator>)entrySpliterator;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectMaps_TransformedEntriesMap)

J2OBJC_FIELD_SETTER(ComGoogleCommonCollectMaps_TransformedEntriesMap, fromMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ComGoogleCommonCollectMaps_TransformedEntriesMap, transformer_, id<ComGoogleCommonCollectMaps_EntryTransformer>)

FOUNDATION_EXPORT void ComGoogleCommonCollectMaps_TransformedEntriesMap_initWithJavaUtilMap_withComGoogleCommonCollectMaps_EntryTransformer_(ComGoogleCommonCollectMaps_TransformedEntriesMap *self, id<JavaUtilMap> fromMap, id<ComGoogleCommonCollectMaps_EntryTransformer> transformer);

FOUNDATION_EXPORT ComGoogleCommonCollectMaps_TransformedEntriesMap *new_ComGoogleCommonCollectMaps_TransformedEntriesMap_initWithJavaUtilMap_withComGoogleCommonCollectMaps_EntryTransformer_(id<JavaUtilMap> fromMap, id<ComGoogleCommonCollectMaps_EntryTransformer> transformer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectMaps_TransformedEntriesMap *create_ComGoogleCommonCollectMaps_TransformedEntriesMap_initWithJavaUtilMap_withComGoogleCommonCollectMaps_EntryTransformer_(id<JavaUtilMap> fromMap, id<ComGoogleCommonCollectMaps_EntryTransformer> transformer);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectMaps_TransformedEntriesMap)

#endif

#if !defined (ComGoogleCommonCollectMaps_TransformedEntriesSortedMap_) && (INCLUDE_ALL_ComGoogleCommonCollectMaps || defined(INCLUDE_ComGoogleCommonCollectMaps_TransformedEntriesSortedMap))
#define ComGoogleCommonCollectMaps_TransformedEntriesSortedMap_

#define RESTRICT_JavaUtilSortedMap 1
#define INCLUDE_JavaUtilSortedMap 1
#include "java/util/SortedMap.h"

@protocol ComGoogleCommonCollectMaps_EntryTransformer;
@protocol JavaUtilComparator;
@protocol JavaUtilMap;

@interface ComGoogleCommonCollectMaps_TransformedEntriesSortedMap : ComGoogleCommonCollectMaps_TransformedEntriesMap < JavaUtilSortedMap >

#pragma mark Public

- (id<JavaUtilComparator>)comparator;

- (id)firstKey;

- (id<JavaUtilSortedMap>)headMapWithId:(id)toKey;

- (id)lastKey;

- (id<JavaUtilSortedMap>)subMapWithId:(id)fromKey
                               withId:(id)toKey;

- (id<JavaUtilSortedMap>)tailMapWithId:(id)fromKey;

#pragma mark Protected

- (id<JavaUtilSortedMap>)fromMap;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)fromMap
    withComGoogleCommonCollectMaps_EntryTransformer:(id<ComGoogleCommonCollectMaps_EntryTransformer>)transformer;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaUtilMap:(id<JavaUtilMap>)arg0
withComGoogleCommonCollectMaps_EntryTransformer:(id<ComGoogleCommonCollectMaps_EntryTransformer>)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectMaps_TransformedEntriesSortedMap)

FOUNDATION_EXPORT void ComGoogleCommonCollectMaps_TransformedEntriesSortedMap_initWithJavaUtilSortedMap_withComGoogleCommonCollectMaps_EntryTransformer_(ComGoogleCommonCollectMaps_TransformedEntriesSortedMap *self, id<JavaUtilSortedMap> fromMap, id<ComGoogleCommonCollectMaps_EntryTransformer> transformer);

FOUNDATION_EXPORT ComGoogleCommonCollectMaps_TransformedEntriesSortedMap *new_ComGoogleCommonCollectMaps_TransformedEntriesSortedMap_initWithJavaUtilSortedMap_withComGoogleCommonCollectMaps_EntryTransformer_(id<JavaUtilSortedMap> fromMap, id<ComGoogleCommonCollectMaps_EntryTransformer> transformer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectMaps_TransformedEntriesSortedMap *create_ComGoogleCommonCollectMaps_TransformedEntriesSortedMap_initWithJavaUtilSortedMap_withComGoogleCommonCollectMaps_EntryTransformer_(id<JavaUtilSortedMap> fromMap, id<ComGoogleCommonCollectMaps_EntryTransformer> transformer);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectMaps_TransformedEntriesSortedMap)

#endif

#if !defined (ComGoogleCommonCollectMaps_AbstractFilteredMap_) && (INCLUDE_ALL_ComGoogleCommonCollectMaps || defined(INCLUDE_ComGoogleCommonCollectMaps_AbstractFilteredMap))
#define ComGoogleCommonCollectMaps_AbstractFilteredMap_

@protocol ComGoogleCommonBasePredicate;
@protocol JavaUtilCollection;
@protocol JavaUtilMap;

@interface ComGoogleCommonCollectMaps_AbstractFilteredMap : ComGoogleCommonCollectMaps_ViewCachingAbstractMap {
 @public
  id<JavaUtilMap> unfiltered_;
  id<ComGoogleCommonBasePredicate> predicate_;
}

#pragma mark Public

- (jboolean)containsKeyWithId:(id)key;

- (id)getWithId:(id)key;

- (jboolean)isEmpty;

- (id)putWithId:(id)key
         withId:(id)value;

- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)map;

- (id)removeWithId:(id)key;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilMap:(id<JavaUtilMap>)unfiltered
             withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate>)predicate;

- (jboolean)applyWithId:(id __nullable)key
                 withId:(id)value;

- (id<JavaUtilCollection>)createValues;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectMaps_AbstractFilteredMap)

J2OBJC_FIELD_SETTER(ComGoogleCommonCollectMaps_AbstractFilteredMap, unfiltered_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ComGoogleCommonCollectMaps_AbstractFilteredMap, predicate_, id<ComGoogleCommonBasePredicate>)

FOUNDATION_EXPORT void ComGoogleCommonCollectMaps_AbstractFilteredMap_initWithJavaUtilMap_withComGoogleCommonBasePredicate_(ComGoogleCommonCollectMaps_AbstractFilteredMap *self, id<JavaUtilMap> unfiltered, id<ComGoogleCommonBasePredicate> predicate);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectMaps_AbstractFilteredMap)

#endif

#if !defined (ComGoogleCommonCollectMaps_Values_) && (INCLUDE_ALL_ComGoogleCommonCollectMaps || defined(INCLUDE_ComGoogleCommonCollectMaps_Values))
#define ComGoogleCommonCollectMaps_Values_

#define RESTRICT_JavaUtilAbstractCollection 1
#define INCLUDE_JavaUtilAbstractCollection 1
#include "java/util/AbstractCollection.h"

@protocol JavaUtilCollection;
@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilIterator;
@protocol JavaUtilMap;

@interface ComGoogleCommonCollectMaps_Values : JavaUtilAbstractCollection {
 @public
  __unsafe_unretained id<JavaUtilMap> map_;
}

#pragma mark Public

- (void)clear;

- (jboolean)containsWithId:(id __nullable)o;

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

- (jboolean)isEmpty;

- (id<JavaUtilIterator>)iterator;

- (jboolean)removeWithId:(id)o;

- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)c;

- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)c;

- (jint)size;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilMap:(id<JavaUtilMap>)map;

- (id<JavaUtilMap>)map;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectMaps_Values)

FOUNDATION_EXPORT void ComGoogleCommonCollectMaps_Values_initWithJavaUtilMap_(ComGoogleCommonCollectMaps_Values *self, id<JavaUtilMap> map);

FOUNDATION_EXPORT ComGoogleCommonCollectMaps_Values *new_ComGoogleCommonCollectMaps_Values_initWithJavaUtilMap_(id<JavaUtilMap> map) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectMaps_Values *create_ComGoogleCommonCollectMaps_Values_initWithJavaUtilMap_(id<JavaUtilMap> map);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectMaps_Values)

#endif

#if !defined (ComGoogleCommonCollectMaps_FilteredEntryMap_) && (INCLUDE_ALL_ComGoogleCommonCollectMaps || defined(INCLUDE_ComGoogleCommonCollectMaps_FilteredEntryMap))
#define ComGoogleCommonCollectMaps_FilteredEntryMap_

@protocol ComGoogleCommonBasePredicate;
@protocol JavaUtilCollection;
@protocol JavaUtilMap;
@protocol JavaUtilSet;

@interface ComGoogleCommonCollectMaps_FilteredEntryMap : ComGoogleCommonCollectMaps_AbstractFilteredMap {
 @public
  /*!
   @brief Entries in this set satisfy the predicate, but they don't validate the input to <code>Entry.setValue()</code>
 .
   */
  id<JavaUtilSet> filteredEntrySet_;
}

#pragma mark Protected

- (id<JavaUtilSet>)createEntrySet;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilMap:(id<JavaUtilMap>)unfiltered
             withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate>)entryPredicate;

- (id<JavaUtilSet>)createKeySet;

+ (jboolean)removeAllKeysWithJavaUtilMap:(id<JavaUtilMap>)map
        withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate>)entryPredicate
                  withJavaUtilCollection:(id<JavaUtilCollection>)keyCollection;

+ (jboolean)retainAllKeysWithJavaUtilMap:(id<JavaUtilMap>)map
        withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate>)entryPredicate
                  withJavaUtilCollection:(id<JavaUtilCollection>)keyCollection;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectMaps_FilteredEntryMap)

J2OBJC_FIELD_SETTER(ComGoogleCommonCollectMaps_FilteredEntryMap, filteredEntrySet_, id<JavaUtilSet>)

FOUNDATION_EXPORT void ComGoogleCommonCollectMaps_FilteredEntryMap_initWithJavaUtilMap_withComGoogleCommonBasePredicate_(ComGoogleCommonCollectMaps_FilteredEntryMap *self, id<JavaUtilMap> unfiltered, id<ComGoogleCommonBasePredicate> entryPredicate);

FOUNDATION_EXPORT ComGoogleCommonCollectMaps_FilteredEntryMap *new_ComGoogleCommonCollectMaps_FilteredEntryMap_initWithJavaUtilMap_withComGoogleCommonBasePredicate_(id<JavaUtilMap> unfiltered, id<ComGoogleCommonBasePredicate> entryPredicate) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectMaps_FilteredEntryMap *create_ComGoogleCommonCollectMaps_FilteredEntryMap_initWithJavaUtilMap_withComGoogleCommonBasePredicate_(id<JavaUtilMap> unfiltered, id<ComGoogleCommonBasePredicate> entryPredicate);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectMaps_FilteredEntryMap_removeAllKeysWithJavaUtilMap_withComGoogleCommonBasePredicate_withJavaUtilCollection_(id<JavaUtilMap> map, id<ComGoogleCommonBasePredicate> entryPredicate, id<JavaUtilCollection> keyCollection);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectMaps_FilteredEntryMap_retainAllKeysWithJavaUtilMap_withComGoogleCommonBasePredicate_withJavaUtilCollection_(id<JavaUtilMap> map, id<ComGoogleCommonBasePredicate> entryPredicate, id<JavaUtilCollection> keyCollection);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectMaps_FilteredEntryMap)

#endif

#if !defined (ComGoogleCommonCollectMaps_KeySet_) && (INCLUDE_ALL_ComGoogleCommonCollectMaps || defined(INCLUDE_ComGoogleCommonCollectMaps_KeySet))
#define ComGoogleCommonCollectMaps_KeySet_

#define RESTRICT_ComGoogleCommonCollectSets 1
#define INCLUDE_ComGoogleCommonCollectSets_ImprovedAbstractSet 1
#include "com/google/common/collect/Sets.h"

@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilIterator;
@protocol JavaUtilMap;

@interface ComGoogleCommonCollectMaps_KeySet : ComGoogleCommonCollectSets_ImprovedAbstractSet {
 @public
  __unsafe_unretained id<JavaUtilMap> map_;
}

#pragma mark Public

- (void)clear;

- (jboolean)containsWithId:(id)o;

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

- (jboolean)isEmpty;

- (id<JavaUtilIterator>)iterator;

- (jboolean)removeWithId:(id)o;

- (jint)size;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilMap:(id<JavaUtilMap>)map;

- (id<JavaUtilMap>)map;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectMaps_KeySet)

FOUNDATION_EXPORT void ComGoogleCommonCollectMaps_KeySet_initWithJavaUtilMap_(ComGoogleCommonCollectMaps_KeySet *self, id<JavaUtilMap> map);

FOUNDATION_EXPORT ComGoogleCommonCollectMaps_KeySet *new_ComGoogleCommonCollectMaps_KeySet_initWithJavaUtilMap_(id<JavaUtilMap> map) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectMaps_KeySet *create_ComGoogleCommonCollectMaps_KeySet_initWithJavaUtilMap_(id<JavaUtilMap> map);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectMaps_KeySet)

#endif

#if !defined (ComGoogleCommonCollectMaps_FilteredEntryMap_KeySet_) && (INCLUDE_ALL_ComGoogleCommonCollectMaps || defined(INCLUDE_ComGoogleCommonCollectMaps_FilteredEntryMap_KeySet))
#define ComGoogleCommonCollectMaps_FilteredEntryMap_KeySet_

@class ComGoogleCommonCollectMaps_FilteredEntryMap;
@class IOSObjectArray;
@protocol JavaUtilCollection;
@protocol JavaUtilMap;

@interface ComGoogleCommonCollectMaps_FilteredEntryMap_KeySet : ComGoogleCommonCollectMaps_KeySet

#pragma mark Public

- (jboolean)removeWithId:(id)o;

- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

- (IOSObjectArray *)toArray;

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)array;

#pragma mark Package-Private

- (instancetype __nonnull)initWithComGoogleCommonCollectMaps_FilteredEntryMap:(ComGoogleCommonCollectMaps_FilteredEntryMap *)outer$;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaUtilMap:(id<JavaUtilMap>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectMaps_FilteredEntryMap_KeySet)

FOUNDATION_EXPORT void ComGoogleCommonCollectMaps_FilteredEntryMap_KeySet_initWithComGoogleCommonCollectMaps_FilteredEntryMap_(ComGoogleCommonCollectMaps_FilteredEntryMap_KeySet *self, ComGoogleCommonCollectMaps_FilteredEntryMap *outer$);

FOUNDATION_EXPORT ComGoogleCommonCollectMaps_FilteredEntryMap_KeySet *new_ComGoogleCommonCollectMaps_FilteredEntryMap_KeySet_initWithComGoogleCommonCollectMaps_FilteredEntryMap_(ComGoogleCommonCollectMaps_FilteredEntryMap *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectMaps_FilteredEntryMap_KeySet *create_ComGoogleCommonCollectMaps_FilteredEntryMap_KeySet_initWithComGoogleCommonCollectMaps_FilteredEntryMap_(ComGoogleCommonCollectMaps_FilteredEntryMap *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectMaps_FilteredEntryMap_KeySet)

#endif

#if !defined (ComGoogleCommonCollectMaps_SortedKeySet_) && (INCLUDE_ALL_ComGoogleCommonCollectMaps || defined(INCLUDE_ComGoogleCommonCollectMaps_SortedKeySet))
#define ComGoogleCommonCollectMaps_SortedKeySet_

#define RESTRICT_JavaUtilSortedSet 1
#define INCLUDE_JavaUtilSortedSet 1
#include "java/util/SortedSet.h"

@protocol JavaUtilComparator;
@protocol JavaUtilMap;
@protocol JavaUtilSortedMap;
@protocol JavaUtilSpliterator;

@interface ComGoogleCommonCollectMaps_SortedKeySet : ComGoogleCommonCollectMaps_KeySet < JavaUtilSortedSet >

#pragma mark Public

- (id<JavaUtilComparator>)comparator;

- (id)first;

- (id<JavaUtilSortedSet>)headSetWithId:(id)toElement;

- (id)last;

- (id<JavaUtilSortedSet>)subSetWithId:(id)fromElement
                               withId:(id)toElement;

- (id<JavaUtilSortedSet>)tailSetWithId:(id)fromElement;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)map;

- (id<JavaUtilSortedMap>)map;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaUtilMap:(id<JavaUtilMap>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectMaps_SortedKeySet)

FOUNDATION_EXPORT void ComGoogleCommonCollectMaps_SortedKeySet_initWithJavaUtilSortedMap_(ComGoogleCommonCollectMaps_SortedKeySet *self, id<JavaUtilSortedMap> map);

FOUNDATION_EXPORT ComGoogleCommonCollectMaps_SortedKeySet *new_ComGoogleCommonCollectMaps_SortedKeySet_initWithJavaUtilSortedMap_(id<JavaUtilSortedMap> map) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectMaps_SortedKeySet *create_ComGoogleCommonCollectMaps_SortedKeySet_initWithJavaUtilSortedMap_(id<JavaUtilSortedMap> map);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectMaps_SortedKeySet)

#endif

#if !defined (ComGoogleCommonCollectMaps_NavigableKeySet_) && (INCLUDE_ALL_ComGoogleCommonCollectMaps || defined(INCLUDE_ComGoogleCommonCollectMaps_NavigableKeySet))
#define ComGoogleCommonCollectMaps_NavigableKeySet_

#define RESTRICT_JavaUtilNavigableSet 1
#define INCLUDE_JavaUtilNavigableSet 1
#include "java/util/NavigableSet.h"

@protocol JavaUtilIterator;
@protocol JavaUtilNavigableMap;
@protocol JavaUtilSortedMap;
@protocol JavaUtilSortedSet;

@interface ComGoogleCommonCollectMaps_NavigableKeySet : ComGoogleCommonCollectMaps_SortedKeySet < JavaUtilNavigableSet >

#pragma mark Public

- (id)ceilingWithId:(id)e;

- (id<JavaUtilIterator>)descendingIterator;

- (id<JavaUtilNavigableSet>)descendingSet;

- (id)floorWithId:(id)e;

- (id<JavaUtilSortedSet>)headSetWithId:(id)toElement;

- (id<JavaUtilNavigableSet>)headSetWithId:(id)toElement
                              withBoolean:(jboolean)inclusive;

- (id)higherWithId:(id)e;

- (id)lowerWithId:(id)e;

- (id)pollFirst;

- (id)pollLast;

- (id<JavaUtilNavigableSet>)subSetWithId:(id)fromElement
                             withBoolean:(jboolean)fromInclusive
                                  withId:(id)toElement
                             withBoolean:(jboolean)toInclusive;

- (id<JavaUtilSortedSet>)subSetWithId:(id)fromElement
                               withId:(id)toElement;

- (id<JavaUtilSortedSet>)tailSetWithId:(id)fromElement;

- (id<JavaUtilNavigableSet>)tailSetWithId:(id)fromElement
                              withBoolean:(jboolean)inclusive;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilNavigableMap:(id<JavaUtilNavigableMap>)map;

- (id<JavaUtilNavigableMap>)map;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectMaps_NavigableKeySet)

FOUNDATION_EXPORT void ComGoogleCommonCollectMaps_NavigableKeySet_initWithJavaUtilNavigableMap_(ComGoogleCommonCollectMaps_NavigableKeySet *self, id<JavaUtilNavigableMap> map);

FOUNDATION_EXPORT ComGoogleCommonCollectMaps_NavigableKeySet *new_ComGoogleCommonCollectMaps_NavigableKeySet_initWithJavaUtilNavigableMap_(id<JavaUtilNavigableMap> map) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectMaps_NavigableKeySet *create_ComGoogleCommonCollectMaps_NavigableKeySet_initWithJavaUtilNavigableMap_(id<JavaUtilNavigableMap> map);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectMaps_NavigableKeySet)

#endif

#if !defined (ComGoogleCommonCollectMaps_FilteredEntryBiMap_) && (INCLUDE_ALL_ComGoogleCommonCollectMaps || defined(INCLUDE_ComGoogleCommonCollectMaps_FilteredEntryBiMap))
#define ComGoogleCommonCollectMaps_FilteredEntryBiMap_

#define RESTRICT_ComGoogleCommonCollectBiMap 1
#define INCLUDE_ComGoogleCommonCollectBiMap 1
#include "com/google/common/collect/BiMap.h"

@protocol ComGoogleCommonBasePredicate;
@protocol JavaUtilFunctionBiFunction;
@protocol JavaUtilMap;
@protocol JavaUtilSet;

@interface ComGoogleCommonCollectMaps_FilteredEntryBiMap : ComGoogleCommonCollectMaps_FilteredEntryMap < ComGoogleCommonCollectBiMap >

#pragma mark Public

- (id)forcePutWithId:(id)key
              withId:(id)value;

- (id<ComGoogleCommonCollectBiMap>)inverse;

- (void)replaceAllWithJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)function;

- (id<JavaUtilSet>)values;

#pragma mark Package-Private

- (instancetype __nonnull)initWithComGoogleCommonCollectBiMap:(id<ComGoogleCommonCollectBiMap>)delegate
                             withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate>)predicate;

- (id<ComGoogleCommonCollectBiMap>)unfiltered;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaUtilMap:(id<JavaUtilMap>)arg0
             withComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate>)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectMaps_FilteredEntryBiMap)

FOUNDATION_EXPORT void ComGoogleCommonCollectMaps_FilteredEntryBiMap_initWithComGoogleCommonCollectBiMap_withComGoogleCommonBasePredicate_(ComGoogleCommonCollectMaps_FilteredEntryBiMap *self, id<ComGoogleCommonCollectBiMap> delegate, id<ComGoogleCommonBasePredicate> predicate);

FOUNDATION_EXPORT ComGoogleCommonCollectMaps_FilteredEntryBiMap *new_ComGoogleCommonCollectMaps_FilteredEntryBiMap_initWithComGoogleCommonCollectBiMap_withComGoogleCommonBasePredicate_(id<ComGoogleCommonCollectBiMap> delegate, id<ComGoogleCommonBasePredicate> predicate) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectMaps_FilteredEntryBiMap *create_ComGoogleCommonCollectMaps_FilteredEntryBiMap_initWithComGoogleCommonCollectBiMap_withComGoogleCommonBasePredicate_(id<ComGoogleCommonCollectBiMap> delegate, id<ComGoogleCommonBasePredicate> predicate);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectMaps_FilteredEntryBiMap)

#endif

#if !defined (ComGoogleCommonCollectMaps_UnmodifiableNavigableMap_) && (INCLUDE_ALL_ComGoogleCommonCollectMaps || defined(INCLUDE_ComGoogleCommonCollectMaps_UnmodifiableNavigableMap))
#define ComGoogleCommonCollectMaps_UnmodifiableNavigableMap_

#define RESTRICT_ComGoogleCommonCollectForwardingSortedMap 1
#define INCLUDE_ComGoogleCommonCollectForwardingSortedMap 1
#include "com/google/common/collect/ForwardingSortedMap.h"

#define RESTRICT_JavaUtilNavigableMap 1
#define INCLUDE_JavaUtilNavigableMap 1
#include "java/util/NavigableMap.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@protocol JavaUtilMap_Entry;
@protocol JavaUtilNavigableSet;
@protocol JavaUtilSet;
@protocol JavaUtilSortedMap;

@interface ComGoogleCommonCollectMaps_UnmodifiableNavigableMap : ComGoogleCommonCollectForwardingSortedMap < JavaUtilNavigableMap, JavaIoSerializable >

#pragma mark Public

- (id<JavaUtilMap_Entry>)ceilingEntryWithId:(id)key;

- (id)ceilingKeyWithId:(id)key;

- (id<JavaUtilNavigableSet>)descendingKeySet;

- (id<JavaUtilNavigableMap>)descendingMap;

- (id<JavaUtilMap_Entry>)firstEntry;

- (id<JavaUtilMap_Entry>)floorEntryWithId:(id)key;

- (id)floorKeyWithId:(id)key;

- (id<JavaUtilSortedMap>)headMapWithId:(id)toKey;

- (id<JavaUtilNavigableMap>)headMapWithId:(id)toKey
                              withBoolean:(jboolean)inclusive;

- (id<JavaUtilMap_Entry>)higherEntryWithId:(id)key;

- (id)higherKeyWithId:(id)key;

- (id<JavaUtilSet>)keySet;

- (id<JavaUtilMap_Entry>)lastEntry;

- (id<JavaUtilMap_Entry>)lowerEntryWithId:(id)key;

- (id)lowerKeyWithId:(id)key;

- (id<JavaUtilNavigableSet>)navigableKeySet;

- (id<JavaUtilMap_Entry>)pollFirstEntry;

- (id<JavaUtilMap_Entry>)pollLastEntry;

- (id<JavaUtilNavigableMap>)subMapWithId:(id)fromKey
                             withBoolean:(jboolean)fromInclusive
                                  withId:(id)toKey
                             withBoolean:(jboolean)toInclusive;

- (id<JavaUtilSortedMap>)subMapWithId:(id)fromKey
                               withId:(id)toKey;

- (id<JavaUtilSortedMap>)tailMapWithId:(id)fromKey;

- (id<JavaUtilNavigableMap>)tailMapWithId:(id)fromKey
                              withBoolean:(jboolean)inclusive;

#pragma mark Protected

- (id<JavaUtilSortedMap>)delegate;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilNavigableMap:(id<JavaUtilNavigableMap>)delegate;

- (instancetype __nonnull)initWithJavaUtilNavigableMap:(id<JavaUtilNavigableMap>)delegate
withComGoogleCommonCollectMaps_UnmodifiableNavigableMap:(ComGoogleCommonCollectMaps_UnmodifiableNavigableMap *)descendingMap;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectMaps_UnmodifiableNavigableMap)

FOUNDATION_EXPORT void ComGoogleCommonCollectMaps_UnmodifiableNavigableMap_initWithJavaUtilNavigableMap_(ComGoogleCommonCollectMaps_UnmodifiableNavigableMap *self, id<JavaUtilNavigableMap> delegate);

FOUNDATION_EXPORT ComGoogleCommonCollectMaps_UnmodifiableNavigableMap *new_ComGoogleCommonCollectMaps_UnmodifiableNavigableMap_initWithJavaUtilNavigableMap_(id<JavaUtilNavigableMap> delegate) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectMaps_UnmodifiableNavigableMap *create_ComGoogleCommonCollectMaps_UnmodifiableNavigableMap_initWithJavaUtilNavigableMap_(id<JavaUtilNavigableMap> delegate);

FOUNDATION_EXPORT void ComGoogleCommonCollectMaps_UnmodifiableNavigableMap_initWithJavaUtilNavigableMap_withComGoogleCommonCollectMaps_UnmodifiableNavigableMap_(ComGoogleCommonCollectMaps_UnmodifiableNavigableMap *self, id<JavaUtilNavigableMap> delegate, ComGoogleCommonCollectMaps_UnmodifiableNavigableMap *descendingMap);

FOUNDATION_EXPORT ComGoogleCommonCollectMaps_UnmodifiableNavigableMap *new_ComGoogleCommonCollectMaps_UnmodifiableNavigableMap_initWithJavaUtilNavigableMap_withComGoogleCommonCollectMaps_UnmodifiableNavigableMap_(id<JavaUtilNavigableMap> delegate, ComGoogleCommonCollectMaps_UnmodifiableNavigableMap *descendingMap) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleCommonCollectMaps_UnmodifiableNavigableMap *create_ComGoogleCommonCollectMaps_UnmodifiableNavigableMap_initWithJavaUtilNavigableMap_withComGoogleCommonCollectMaps_UnmodifiableNavigableMap_(id<JavaUtilNavigableMap> delegate, ComGoogleCommonCollectMaps_UnmodifiableNavigableMap *descendingMap);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectMaps_UnmodifiableNavigableMap)

#endif

#if !defined (ComGoogleCommonCollectMaps_DescendingMap_) && (INCLUDE_ALL_ComGoogleCommonCollectMaps || defined(INCLUDE_ComGoogleCommonCollectMaps_DescendingMap))
#define ComGoogleCommonCollectMaps_DescendingMap_

#define RESTRICT_ComGoogleCommonCollectForwardingMap 1
#define INCLUDE_ComGoogleCommonCollectForwardingMap 1
#include "com/google/common/collect/ForwardingMap.h"

#define RESTRICT_JavaUtilNavigableMap 1
#define INCLUDE_JavaUtilNavigableMap 1
#include "java/util/NavigableMap.h"

@protocol JavaUtilCollection;
@protocol JavaUtilComparator;
@protocol JavaUtilIterator;
@protocol JavaUtilMap;
@protocol JavaUtilMap_Entry;
@protocol JavaUtilNavigableSet;
@protocol JavaUtilSet;
@protocol JavaUtilSortedMap;

@interface ComGoogleCommonCollectMaps_DescendingMap : ComGoogleCommonCollectForwardingMap < JavaUtilNavigableMap >

#pragma mark Public

- (id<JavaUtilMap_Entry>)ceilingEntryWithId:(id)key;

- (id)ceilingKeyWithId:(id)key;

- (id<JavaUtilComparator>)comparator;

- (id<JavaUtilNavigableSet>)descendingKeySet;

- (id<JavaUtilNavigableMap>)descendingMap;

- (id<JavaUtilSet>)entrySet;

- (id<JavaUtilMap_Entry>)firstEntry;

- (id)firstKey;

- (id<JavaUtilMap_Entry>)floorEntryWithId:(id)key;

- (id)floorKeyWithId:(id)key;

- (id<JavaUtilSortedMap>)headMapWithId:(id)toKey;

- (id<JavaUtilNavigableMap>)headMapWithId:(id)toKey
                              withBoolean:(jboolean)inclusive;

- (id<JavaUtilMap_Entry>)higherEntryWithId:(id)key;

- (id)higherKeyWithId:(id)key;

- (id<JavaUtilSet>)keySet;

- (id<JavaUtilMap_Entry>)lastEntry;

- (id)lastKey;

- (id<JavaUtilMap_Entry>)lowerEntryWithId:(id)key;

- (id)lowerKeyWithId:(id)key;

- (id<JavaUtilNavigableSet>)navigableKeySet;

- (id<JavaUtilMap_Entry>)pollFirstEntry;

- (id<JavaUtilMap_Entry>)pollLastEntry;

- (id<JavaUtilNavigableMap>)subMapWithId:(id)fromKey
                             withBoolean:(jboolean)fromInclusive
                                  withId:(id)toKey
                             withBoolean:(jboolean)toInclusive;

- (id<JavaUtilSortedMap>)subMapWithId:(id)fromKey
                               withId:(id)toKey;

- (id<JavaUtilSortedMap>)tailMapWithId:(id)fromKey;

- (id<JavaUtilNavigableMap>)tailMapWithId:(id)fromKey
                              withBoolean:(jboolean)inclusive;

- (NSString *)description;

- (id<JavaUtilCollection>)values;

#pragma mark Protected

- (id<JavaUtilMap>)delegate;

#pragma mark Package-Private

- (instancetype __nonnull)init;

- (id<JavaUtilSet>)createEntrySet;

- (id<JavaUtilIterator>)entryIterator;

- (id<JavaUtilNavigableMap>)forward;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectMaps_DescendingMap)

FOUNDATION_EXPORT void ComGoogleCommonCollectMaps_DescendingMap_init(ComGoogleCommonCollectMaps_DescendingMap *self);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectMaps_DescendingMap)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCollectMaps")
