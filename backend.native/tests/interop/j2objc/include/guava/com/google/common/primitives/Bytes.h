//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/build_result/java/com/google/common/primitives/Bytes.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonPrimitivesBytes")
#ifdef RESTRICT_ComGoogleCommonPrimitivesBytes
#define INCLUDE_ALL_ComGoogleCommonPrimitivesBytes 0
#else
#define INCLUDE_ALL_ComGoogleCommonPrimitivesBytes 1
#endif
#undef RESTRICT_ComGoogleCommonPrimitivesBytes

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonPrimitivesBytes_) && (INCLUDE_ALL_ComGoogleCommonPrimitivesBytes || defined(INCLUDE_ComGoogleCommonPrimitivesBytes))
#define ComGoogleCommonPrimitivesBytes_

@class IOSByteArray;
@class IOSObjectArray;
@protocol JavaUtilCollection;
@protocol JavaUtilList;

/*!
 @brief Static utility methods pertaining to <code>byte</code> primitives, that are not already found in
  either <code>Byte</code> or <code>Arrays</code>, <i>and interpret bytes as neither signed nor unsigned</i>.
 The methods which specifically treat bytes as signed or unsigned are found in <code>SignedBytes</code>
  and <code>UnsignedBytes</code>.
  
 <p>See the Guava User Guide article on <a href="https://github.com/google/guava/wiki/PrimitivesExplained">
 primitive utilities</a>.
 @author Kevin Bourrillion
 @since 1.0
 */
@interface ComGoogleCommonPrimitivesBytes : NSObject

#pragma mark Public

/*!
 @brief Returns a fixed-size list backed by the specified array, similar to <code>Arrays.asList(Object[])</code>
 .The list supports <code>List.set(int, Object)</code>, but any attempt to
  set a value to <code>null</code> will result in a <code>NullPointerException</code>.
 <p>The returned list maintains the values, but not the identities, of <code>Byte</code> objects
  written to or read from it. For example, whether <code>list.get(0) == list.get(0)</code> is true for
  the returned list is unspecified.
 @param backingArray the array to back the list
 @return a list view of the array
 */
+ (id<JavaUtilList>)asListWithByteArray:(IOSByteArray * __nonnull)backingArray;

/*!
 @brief Returns the values from each provided array combined into a single array.For example, <code>concat(new byte[] {a, b}, new byte[] {}, new byte[] {c}</code>
  returns the array <code>{a, b, c}</code>.
 @param arrays zero or more <code>byte</code>  arrays
 @return a single array containing all the values from the source arrays, in order
 */
+ (IOSByteArray *)concatWithByteArray2:(IOSObjectArray * __nonnull)arrays;

/*!
 @brief Returns <code>true</code> if <code>target</code> is present as an element anywhere in <code>array</code>.
 @param array an array of <code>byte</code>  values, possibly empty
 @param target a primitive <code>byte</code>  value
 @return <code>true</code> if <code>array[i] == target</code> for some value of <code>i</code>
 */
+ (jboolean)containsWithByteArray:(IOSByteArray * __nonnull)array
                         withByte:(jbyte)target;

/*!
 @brief Returns an array containing the same values as <code>array</code>, but guaranteed to be of a
  specified minimum length.If <code>array</code> already has a length of at least <code>minLength</code>,
  it is returned directly.
 Otherwise, a new array of size <code>minLength + padding</code> is
  returned, containing the values of <code>array</code>, and zeroes in the remaining places.
 @param array the source array
 @param minLength the minimum length the returned array must guarantee
 @param padding an extra amount to "grow" the array by if growth is necessary
 @throw IllegalArgumentExceptionif <code>minLength</code> or <code>padding</code> is negative
 @return an array containing the values of <code>array</code>, with guaranteed minimum length <code>minLength</code>
 */
+ (IOSByteArray *)ensureCapacityWithByteArray:(IOSByteArray * __nonnull)array
                                      withInt:(jint)minLength
                                      withInt:(jint)padding;

/*!
 @brief Returns a hash code for <code>value</code>; equal to the result of invoking <code>((Byte)
  value).hashCode()</code>
 .
 <p><b>Java 8 users:</b> use <code>Byte.hashCode(byte)</code> instead.
 @param value a primitive <code>byte</code>  value
 @return a hash code for the value
 */
+ (jint)hashCodeWithByte:(jbyte)value;

/*!
 @brief Returns the index of the first appearance of the value <code>target</code> in <code>array</code>.
 @param array an array of <code>byte</code>  values, possibly empty
 @param target a primitive <code>byte</code>  value
 @return the least index <code>i</code> for which <code>array[i] == target</code>, or <code>-1</code> if no
      such index exists.
 */
+ (jint)indexOfWithByteArray:(IOSByteArray * __nonnull)array
                    withByte:(jbyte)target;

/*!
 @brief Returns the start position of the first occurrence of the specified <code>target</code> within 
 <code>array</code>, or <code>-1</code> if there is no such occurrence.
 <p>More formally, returns the lowest index <code>i</code> such that <code>Arrays.copyOfRange(array,
  i, i + target.length)</code>
  contains exactly the same elements as <code>target</code>.
 @param array the array to search for the sequence <code>target</code>
 @param target the array to search for as a sub-sequence of <code>array</code>
 */
+ (jint)indexOfWithByteArray:(IOSByteArray * __nonnull)array
               withByteArray:(IOSByteArray * __nonnull)target;

/*!
 @brief Returns the index of the last appearance of the value <code>target</code> in <code>array</code>.
 @param array an array of <code>byte</code>  values, possibly empty
 @param target a primitive <code>byte</code>  value
 @return the greatest index <code>i</code> for which <code>array[i] == target</code>, or <code>-1</code> if no
      such index exists.
 */
+ (jint)lastIndexOfWithByteArray:(IOSByteArray * __nonnull)array
                        withByte:(jbyte)target;

/*!
 @brief Reverses the elements of <code>array</code>.This is equivalent to <code>Collections.reverse(Bytes.asList(array))</code>
 , but is likely to be more efficient.
 @since 23.1
 */
+ (void)reverseWithByteArray:(IOSByteArray * __nonnull)array;

/*!
 @brief Reverses the elements of <code>array</code> between <code>fromIndex</code> inclusive and <code>toIndex</code>
  exclusive.This is equivalent to <code>Collections.reverse(Bytes.asList(array).subList(fromIndex, toIndex))</code>
 , but is likely to be more
  efficient.
 @throw IndexOutOfBoundsExceptionif <code>fromIndex < 0</code>, <code>toIndex > array.length</code>, or
      <code>toIndex > fromIndex</code>
 @since 23.1
 */
+ (void)reverseWithByteArray:(IOSByteArray * __nonnull)array
                     withInt:(jint)fromIndex
                     withInt:(jint)toIndex;

/*!
 @brief Returns an array containing each value of <code>collection</code>, converted to a <code>byte</code> value
  in the manner of <code>Number.byteValue</code>.
 <p>Elements are copied from the argument collection as if by <code>collection.toArray()</code>.
  Calling this method is as thread-safe as calling that method.
 @param collection a collection of <code>Number</code>  instances
 @return an array containing the same values as <code>collection</code>, in the same order, converted
      to primitives
 @throw NullPointerExceptionif <code>collection</code> or any of its elements is null
 @since 1.0 (parameter was <code>Collection<Byte></code> before 12.0)
 */
+ (IOSByteArray *)toArrayWithJavaUtilCollection:(id<JavaUtilCollection> __nonnull)collection;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonPrimitivesBytes)

FOUNDATION_EXPORT jint ComGoogleCommonPrimitivesBytes_hashCodeWithByte_(jbyte value);

FOUNDATION_EXPORT jboolean ComGoogleCommonPrimitivesBytes_containsWithByteArray_withByte_(IOSByteArray *array, jbyte target);

FOUNDATION_EXPORT jint ComGoogleCommonPrimitivesBytes_indexOfWithByteArray_withByte_(IOSByteArray *array, jbyte target);

FOUNDATION_EXPORT jint ComGoogleCommonPrimitivesBytes_indexOfWithByteArray_withByteArray_(IOSByteArray *array, IOSByteArray *target);

FOUNDATION_EXPORT jint ComGoogleCommonPrimitivesBytes_lastIndexOfWithByteArray_withByte_(IOSByteArray *array, jbyte target);

FOUNDATION_EXPORT IOSByteArray *ComGoogleCommonPrimitivesBytes_concatWithByteArray2_(IOSObjectArray *arrays);

FOUNDATION_EXPORT IOSByteArray *ComGoogleCommonPrimitivesBytes_ensureCapacityWithByteArray_withInt_withInt_(IOSByteArray *array, jint minLength, jint padding);

FOUNDATION_EXPORT IOSByteArray *ComGoogleCommonPrimitivesBytes_toArrayWithJavaUtilCollection_(id<JavaUtilCollection> collection);

FOUNDATION_EXPORT id<JavaUtilList> ComGoogleCommonPrimitivesBytes_asListWithByteArray_(IOSByteArray *backingArray);

FOUNDATION_EXPORT void ComGoogleCommonPrimitivesBytes_reverseWithByteArray_(IOSByteArray *array);

FOUNDATION_EXPORT void ComGoogleCommonPrimitivesBytes_reverseWithByteArray_withInt_withInt_(IOSByteArray *array, jint fromIndex, jint toIndex);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonPrimitivesBytes)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonPrimitivesBytes")
