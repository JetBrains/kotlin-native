//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/build_result/java/org/checkerframework/checker/nullness/qual/MonotonicNonNull.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgCheckerframeworkCheckerNullnessQualMonotonicNonNull")
#ifdef RESTRICT_OrgCheckerframeworkCheckerNullnessQualMonotonicNonNull
#define INCLUDE_ALL_OrgCheckerframeworkCheckerNullnessQualMonotonicNonNull 0
#else
#define INCLUDE_ALL_OrgCheckerframeworkCheckerNullnessQualMonotonicNonNull 1
#endif
#undef RESTRICT_OrgCheckerframeworkCheckerNullnessQualMonotonicNonNull

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgCheckerframeworkCheckerNullnessQualMonotonicNonNull_) && (INCLUDE_ALL_OrgCheckerframeworkCheckerNullnessQualMonotonicNonNull || defined(INCLUDE_OrgCheckerframeworkCheckerNullnessQualMonotonicNonNull))
#define OrgCheckerframeworkCheckerNullnessQualMonotonicNonNull_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

/*!
 @brief Indicates that a field (or variable) is lazily initialized to a non-null
  value.Once the field becomes non-null, it never becomes null again.
 There is no guarantee that the field ever becomes non-null, but if it
  does, it will stay non-null. 
 <p>
  A monotonically non-null field has these two properties: 
 <ol>
  <li>The field may be assigned only non-null values.</li>
  <li>The field may be re-assigned as often as desired.</li>
  </ol>
  <p>
  When the field is first read within a method, the field cannot be
  assumed to be non-null.  After a check that a <code>MonotonicNonNull</code> field
  holds a non-null value, all subsequent accesses <em>within that
  method</em> can be assumed to be non-null, even after arbitrary external
  method calls that might access the field. 
 <p>
  
 <code>MonotonicNonNull</code> gives stronger guarantees than <code>Nullable</code>.
  After a check that a <code>Nullable</code> field holds a non-null value, only
  accesses until the next non-<code>org.checkerframework.dataflow.qual.SideEffectFree</code> method is called can be assumed
  to be non-null. 
 <p>
  To indicate that a <code>MonotonicNonNull</code> or <code>Nullable</code> field is
  non-null whenever a particular method is called, use 
 <code>RequiresNonNull</code>.
  <p>
  Final fields are treated as MonotonicNonNull by default. 
 <p>
  This annotation is associated with the <code>AbstractNullnessChecker</code>.
 - seealso: EnsuresNonNull
 - seealso: RequiresNonNull
 - seealso: MonotonicQualifier
 - seealso: AbstractNullnessChecker
 */
@protocol OrgCheckerframeworkCheckerNullnessQualMonotonicNonNull < JavaLangAnnotationAnnotation >

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface OrgCheckerframeworkCheckerNullnessQualMonotonicNonNull : NSObject < OrgCheckerframeworkCheckerNullnessQualMonotonicNonNull >

@end

J2OBJC_EMPTY_STATIC_INIT(OrgCheckerframeworkCheckerNullnessQualMonotonicNonNull)

FOUNDATION_EXPORT id<OrgCheckerframeworkCheckerNullnessQualMonotonicNonNull> create_OrgCheckerframeworkCheckerNullnessQualMonotonicNonNull(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgCheckerframeworkCheckerNullnessQualMonotonicNonNull)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgCheckerframeworkCheckerNullnessQualMonotonicNonNull")
