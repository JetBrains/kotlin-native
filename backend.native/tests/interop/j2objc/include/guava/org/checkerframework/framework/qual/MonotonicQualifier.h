//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/guava/build_result/java/org/checkerframework/framework/qual/MonotonicQualifier.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgCheckerframeworkFrameworkQualMonotonicQualifier")
#ifdef RESTRICT_OrgCheckerframeworkFrameworkQualMonotonicQualifier
#define INCLUDE_ALL_OrgCheckerframeworkFrameworkQualMonotonicQualifier 0
#else
#define INCLUDE_ALL_OrgCheckerframeworkFrameworkQualMonotonicQualifier 1
#endif
#undef RESTRICT_OrgCheckerframeworkFrameworkQualMonotonicQualifier

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgCheckerframeworkFrameworkQualMonotonicQualifier_) && (INCLUDE_ALL_OrgCheckerframeworkFrameworkQualMonotonicQualifier || defined(INCLUDE_OrgCheckerframeworkFrameworkQualMonotonicQualifier))
#define OrgCheckerframeworkFrameworkQualMonotonicQualifier_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

/*!
 @brief A meta-annotation that indicates that a qualifier indicates that an
  expression goes monotonically from a type qualifier <code>T</code> to another
  qualifier <code>S</code>.The annotation <code>S</code> is called the <em>target</em>
  of the monotonic qualifier, and has to be indicated by 
 <code>MonotonicQualifier.value()</code>.
 <p>
  This meta-annotation can be used on the declaration of the monotonic
  qualifier used for the type-system at hand, and is often called <code>MonoT</code>
  if the target is <code>T</code>. The subtyping hierarchy has to be defined as
  follows: 
 @code

    T &lt;: MonoT &lt;: S 
  
@endcode
  where <code>&lt;:</code> indicates the subtyping relation. 
 <p>
  An expression of a monotonic type can only be assigned expressions of the
  target type <code>T</code>. This means that an expression of the monotonic type 
 <code>MonoT</code> cannot be assigned to a variable of the same type. 
 <p>
  Reading an expression of a monotonic type <code>MonoT</code> might always yield an
  expression of type <code>S</code>. However, once it has been observed that a
  variable has the target type <code>T</code>, the monotonic property ensures that
  it will stay of type <code>T</code> for the rest of the program execution. This is
  even true if arbitrary other code is executed. 
 <p>
  Note that variables of a monotonic type can be re-assigned arbitrarily often,
  but only with expressions of the target type.
 @author Stefan Heule
 */
@protocol OrgCheckerframeworkFrameworkQualMonotonicQualifier < JavaLangAnnotationAnnotation >

@property (readonly) IOSClass *value;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface OrgCheckerframeworkFrameworkQualMonotonicQualifier : NSObject < OrgCheckerframeworkFrameworkQualMonotonicQualifier > {
 @public
  IOSClass *value_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(OrgCheckerframeworkFrameworkQualMonotonicQualifier)

FOUNDATION_EXPORT id<OrgCheckerframeworkFrameworkQualMonotonicQualifier> create_OrgCheckerframeworkFrameworkQualMonotonicQualifier(IOSClass *value);

J2OBJC_TYPE_LITERAL_HEADER(OrgCheckerframeworkFrameworkQualMonotonicQualifier)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_OrgCheckerframeworkFrameworkQualMonotonicQualifier")
