//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/beans/IndexedPropertyChangeEvent.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaBeansIndexedPropertyChangeEvent")
#ifdef RESTRICT_JavaBeansIndexedPropertyChangeEvent
#define INCLUDE_ALL_JavaBeansIndexedPropertyChangeEvent 0
#else
#define INCLUDE_ALL_JavaBeansIndexedPropertyChangeEvent 1
#endif
#undef RESTRICT_JavaBeansIndexedPropertyChangeEvent

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaBeansIndexedPropertyChangeEvent_) && (INCLUDE_ALL_JavaBeansIndexedPropertyChangeEvent || defined(INCLUDE_JavaBeansIndexedPropertyChangeEvent))
#define JavaBeansIndexedPropertyChangeEvent_

#define RESTRICT_JavaBeansPropertyChangeEvent 1
#define INCLUDE_JavaBeansPropertyChangeEvent 1
#include "java/beans/PropertyChangeEvent.h"

@class JavaLangStringBuilder;

/*!
 @brief An "IndexedPropertyChange" event gets delivered whenever a component that
  conforms to the JavaBeans&trade; specification (a "bean") changes a bound
  indexed property.This class is an extension of <code>PropertyChangeEvent</code>
  but contains the index of the property that has changed.
 <P>
  Null values may be provided for the old and the new values if their
  true values are not known. 
 <P>
  An event source may send a null object as the name to indicate that an
  arbitrary set of if its properties have changed.  In this case the
  old and new values should also be null.
 @since 1.5
 @author Mark Davidson
 */
@interface JavaBeansIndexedPropertyChangeEvent : JavaBeansPropertyChangeEvent

#pragma mark Public

/*!
 @brief Constructs a new <code>IndexedPropertyChangeEvent</code> object.
 @param source The bean that fired the event.
 @param propertyName The programmatic name of the property that              was changed.
 @param oldValue The old value of the property.
 @param newValue The new value of the property.
 @param index index of the property element that was changed.
 */
- (instancetype __nonnull)initWithId:(id)source
                        withNSString:(NSString *)propertyName
                              withId:(id)oldValue
                              withId:(id)newValue
                             withInt:(jint)index;

/*!
 @brief Gets the index of the property that was changed.
 @return The index specifying the property element that was
          changed.
 */
- (jint)getIndex;

#pragma mark Package-Private

- (void)appendToWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithId:(id)arg0
                        withNSString:(NSString *)arg1
                              withId:(id)arg2
                              withId:(id)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaBeansIndexedPropertyChangeEvent)

FOUNDATION_EXPORT void JavaBeansIndexedPropertyChangeEvent_initWithId_withNSString_withId_withId_withInt_(JavaBeansIndexedPropertyChangeEvent *self, id source, NSString *propertyName, id oldValue, id newValue, jint index);

FOUNDATION_EXPORT JavaBeansIndexedPropertyChangeEvent *new_JavaBeansIndexedPropertyChangeEvent_initWithId_withNSString_withId_withId_withInt_(id source, NSString *propertyName, id oldValue, id newValue, jint index) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaBeansIndexedPropertyChangeEvent *create_JavaBeansIndexedPropertyChangeEvent_initWithId_withNSString_withId_withId_withInt_(id source, NSString *propertyName, id oldValue, id newValue, jint index);

J2OBJC_TYPE_LITERAL_HEADER(JavaBeansIndexedPropertyChangeEvent)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaBeansIndexedPropertyChangeEvent")
