//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/Calendar.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilCalendar")
#ifdef RESTRICT_JavaUtilCalendar
#define INCLUDE_ALL_JavaUtilCalendar 0
#else
#define INCLUDE_ALL_JavaUtilCalendar 1
#endif
#undef RESTRICT_JavaUtilCalendar

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilCalendar_) && (INCLUDE_ALL_JavaUtilCalendar || defined(INCLUDE_JavaUtilCalendar))
#define JavaUtilCalendar_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "java/lang/Comparable.h"

@class IOSBooleanArray;
@class IOSIntArray;
@class IOSObjectArray;
@class JavaUtilDate;
@class JavaUtilLocale;
@class JavaUtilTimeZone;
@protocol JavaUtilMap;
@protocol JavaUtilSet;

/*!
 @brief The <code>Calendar</code> class is an abstract class that provides methods
  for converting between a specific instant in time and a set of <code>calendar fields</code>
  such as <code>YEAR</code>, <code>MONTH</code>,
  <code>DAY_OF_MONTH</code>, <code>HOUR</code>, and so on, and for
  manipulating the calendar fields, such as getting the date of the next
  week.An instant in time can be represented by a millisecond value that is
  an offset from the <a name="Epoch"><em>Epoch</em></a>, January 1, 1970
  00:00:00.000 GMT (Gregorian).
 <p>The class also provides additional fields and methods for
  implementing a concrete calendar system outside the package. Those
  fields and methods are defined as <code>protected</code>.
  
 <p>
  Like other locale-sensitive classes, <code>Calendar</code> provides a
  class method, <code>getInstance</code>, for getting a generally useful
  object of this type. <code>Calendar</code>'s <code>getInstance</code> method
  returns a <code>Calendar</code> object whose
  calendar fields have been initialized with the current date and time: 
 <blockquote>
  @code

      Calendar rightNow = Calendar.getInstance(); 
  
@endcode
  </blockquote>
  
 <p>A <code>Calendar</code> object can produce all the calendar field values
  needed to implement the date-time formatting for a particular language and
  calendar style (for example, Japanese-Gregorian, Japanese-Traditional). 
 <code>Calendar</code> defines the range of values returned by
  certain calendar fields, as well as their meaning.  For example,
  the first month of the calendar system has value <code>MONTH ==
  JANUARY</code> for all calendars.  Other values are defined by the
  concrete subclass, such as <code>ERA</code>.  See individual field
  documentation and subclass documentation for details. 
 <h3>Getting and Setting Calendar Field Values</h3>
  
 <p>The calendar field values can be set by calling the <code>set</code>
  methods. Any field values set in a <code>Calendar</code> will not be
  interpreted until it needs to calculate its time value (milliseconds from
  the Epoch) or values of the calendar fields. Calling the 
 <code>get</code>, <code>getTimeInMillis</code>, <code>getTime</code>,
  <code>add</code> and <code>roll</code> involves such calculation. 
 <h4>Leniency</h4>
  
 <p><code>Calendar</code> has two modes for interpreting the calendar
  fields, <em>lenient</em> and <em>non-lenient</em>.  When a 
 <code>Calendar</code> is in lenient mode, it accepts a wider range of
  calendar field values than it produces.  When a <code>Calendar</code>
  recomputes calendar field values for return by <code>get()</code>, all of
  the calendar fields are normalized. For example, a lenient 
 <code>GregorianCalendar</code> interprets <code>MONTH == JANUARY</code>,
  <code>DAY_OF_MONTH == 32</code> as February 1. 
 <p>When a <code>Calendar</code> is in non-lenient mode, it throws an
  exception if there is any inconsistency in its calendar fields. For
  example, a <code>GregorianCalendar</code> always produces 
 <code>DAY_OF_MONTH</code> values between 1 and the length of the month. A
  non-lenient <code>GregorianCalendar</code> throws an exception upon
  calculating its time or calendar field values if any out-of-range field
  value has been set. 
 <h4><a name="first_week">First Week</a></h4>
  
 <code>Calendar</code> defines a locale-specific seven day week using two
  parameters: the first day of the week and the minimal days in first week
  (from 1 to 7).  These numbers are taken from the locale resource data when a 
 <code>Calendar</code> is constructed.  They may also be specified explicitly
  through the methods for setting their values. 
 <p>When setting or getting the <code>WEEK_OF_MONTH</code> or 
 <code>WEEK_OF_YEAR</code> fields, <code>Calendar</code> must determine the
  first week of the month or year as a reference point.  The first week of a
  month or year is defined as the earliest seven day period beginning on 
 <code>getFirstDayOfWeek()</code> and containing at least 
 <code>getMinimalDaysInFirstWeek()</code> days of that month or year.  Weeks
  numbered ..., -1, 0 precede the first week; weeks numbered 2, 3,... follow
  it.  Note that the normalized numbering returned by <code>get()</code> may be
  different.  For example, a specific <code>Calendar</code> subclass may
  designate the week before week 1 of a year as week <code><i>n</i></code> of
  the previous year. 
 <h4>Calendar Fields Resolution</h4>
  When computing a date and time from the calendar fields, there
  may be insufficient information for the computation (such as only
  year and month with no day of month), or there may be inconsistent
  information (such as Tuesday, July 15, 1996 (Gregorian) -- July 15,
  1996 is actually a Monday). <code>Calendar</code> will resolve
  calendar field values to determine the date and time in the
  following way. 
 <p><a name="resolution">If there is any conflict in calendar field values, 
 <code>Calendar</code> gives priorities to calendar fields that have been set
  more recently.</a> The following are the default combinations of the
  calendar fields. The most recent combination, as determined by the
  most recently set single field, will be used. 
 <p><a name="date_resolution">For the date fields</a>:
  <blockquote>
  @code

  YEAR + MONTH + DAY_OF_MONTH
  YEAR + MONTH + WEEK_OF_MONTH + DAY_OF_WEEK
  YEAR + MONTH + DAY_OF_WEEK_IN_MONTH + DAY_OF_WEEK
  YEAR + DAY_OF_YEAR
  YEAR + DAY_OF_WEEK + WEEK_OF_YEAR 
  
@endcode</blockquote>
  
 <a name="time_resolution">For the time of day fields</a>:
  <blockquote>
  @code

  HOUR_OF_DAY
  AM_PM + HOUR 
  
@endcode</blockquote>
  
 <p>If there are any calendar fields whose values haven't been set in the selected
  field combination, <code>Calendar</code> uses their default values. The default
  value of each field may vary by concrete calendar systems. For example, in 
 <code>GregorianCalendar</code>, the default of a field is the same as that
  of the start of the Epoch: i.e., <code>YEAR = 1970</code>, <code>MONTH =
  JANUARY</code>, <code>DAY_OF_MONTH = 1</code>, etc. 
 <p>
  <strong>Note:</strong> There are certain possible ambiguities in
  interpretation of certain singular times, which are resolved in the
  following ways: 
 <ol>
      <li> 23:59 is the last minute of the day and 00:00 is the first
           minute of the next day. Thus, 23:59 on Dec 31, 1999 &lt; 00:00 on
           Jan 1, 2000 &lt; 00:01 on Jan 1, 2000.
      <li> Although historically not precise, midnight also belongs to "am",
           and noon belongs to "pm", so on the same day,
           12:00 am (midnight) &lt; 12:01 am, and 12:00 pm (noon) &lt; 12:01 pm 
 </ol>
  
 <p>
  The date or time format strings are not part of the definition of a
  calendar, as those must be modifiable or overridable by the user at
  runtime. Use <code>DateFormat</code>
  to format dates. 
 <h4>Field Manipulation</h4>
  The calendar fields can be changed using three methods: 
 <code>set()</code>, <code>add()</code>, and <code>roll()</code>.
  
 <p><strong><code>set(f, value)</code></strong> changes calendar field 
 <code>f</code> to <code>value</code>.  In addition, it sets an
  internal member variable to indicate that calendar field <code>f</code> has
  been changed. Although calendar field <code>f</code> is changed immediately,
  the calendar's time value in milliseconds is not recomputed until the next call to 
 <code>get()</code>, <code>getTime()</code>, <code>getTimeInMillis()</code>,
  <code>add()</code>, or <code>roll()</code> is made. Thus, multiple calls to 
 <code>set()</code> do not trigger multiple, unnecessary
  computations. As a result of changing a calendar field using 
 <code>set()</code>, other calendar fields may also change, depending on the
  calendar field, the calendar field value, and the calendar system. In addition, 
 <code>get(f)</code> will not necessarily return <code>value</code> set by
  the call to the <code>set</code> method
  after the calendar fields have been recomputed. The specifics are determined by
  the concrete calendar class.</p>
  
 <p><em>Example</em>: Consider a <code>GregorianCalendar</code>
  originally set to August 31, 1999. Calling <code>set(Calendar.MONTH,
  Calendar.SEPTEMBER)</code> sets the date to September 31,
  1999. This is a temporary internal representation that resolves to
  October 1, 1999 if <code>getTime()</code>is then called. However, a
  call to <code>set(Calendar.DAY_OF_MONTH, 30)</code> before the call to 
 <code>getTime()</code> sets the date to September 30, 1999, since
  no recomputation occurs after <code>set()</code> itself.</p>
  
 <p><strong><code>add(f, delta)</code></strong> adds <code>delta</code>
  to field <code>f</code>.  This is equivalent to calling <code>set(f,
  get(f) + delta)</code> with two adjustments:</p>
  
 <blockquote>
    <p><strong>Add rule 1</strong>. The value of field <code>f</code>
    after the call minus the value of field <code>f</code> before the
    call is <code>delta</code>, modulo any overflow that has occurred in
    field <code>f</code>. Overflow occurs when a field value exceeds its
    range and, as a result, the next larger field is incremented or
    decremented and the field value is adjusted back into its range.</p>
    <p><strong>Add rule 2</strong>. If a smaller field is expected to be
    invariant, but it is impossible for it to be equal to its
    prior value because of changes in its minimum or maximum after field   
 <code>f</code> is changed or other constraints, such as time zone
    offset changes, then its value is adjusted to be as close
    as possible to its expected value. A smaller field represents a
    smaller unit of time. <code>HOUR</code> is a smaller field than
    <code>DAY_OF_MONTH</code>. No adjustment is made to smaller fields
    that are not expected to be invariant. The calendar system
    determines what fields are expected to be invariant.</p>
  </blockquote>
  
 <p>In addition, unlike <code>set()</code>, <code>add()</code> forces
  an immediate recomputation of the calendar's milliseconds and all
  fields.</p>
  
 <p><em>Example</em>: Consider a <code>GregorianCalendar</code>
  originally set to August 31, 1999. Calling <code>add(Calendar.MONTH,
  13)</code> sets the calendar to September 30, 2000. <strong>Add rule
  1</strong> sets the <code>MONTH</code> field to September, since
  adding 13 months to August gives September of the next year. Since 
 <code>DAY_OF_MONTH</code> cannot be 31 in September in a 
 <code>GregorianCalendar</code>, <strong>add rule 2</strong> sets the 
 <code>DAY_OF_MONTH</code> to 30, the closest possible value. Although
  it is a smaller field, <code>DAY_OF_WEEK</code> is not adjusted by
  rule 2, since it is expected to change when the month changes in a 
 <code>GregorianCalendar</code>.</p>
  
 <p><strong><code>roll(f, delta)</code></strong> adds 
 <code>delta</code> to field <code>f</code> without changing larger
  fields. This is equivalent to calling <code>add(f, delta)</code> with
  the following adjustment:</p>
  
 <blockquote>
    <p><strong>Roll rule</strong>. Larger fields are unchanged after the
    call. A larger field represents a larger unit of
    time. <code>DAY_OF_MONTH</code> is a larger field than
    <code>HOUR</code>.</p>
  </blockquote>
  
 <p><em>Example</em>: See <code>java.util.GregorianCalendar.roll(int, int)</code>.
  
 <p><strong>Usage model</strong>. To motivate the behavior of 
 <code>add()</code> and <code>roll()</code>, consider a user interface
  component with increment and decrement buttons for the month, day, and
  year, and an underlying <code>GregorianCalendar</code>. If the
  interface reads January 31, 1999 and the user presses the month
  increment button, what should it read? If the underlying
  implementation uses <code>set()</code>, it might read March 3, 1999. A
  better result would be February 28, 1999. Furthermore, if the user
  presses the month increment button again, it should read March 31,
  1999, not March 28, 1999. By saving the original date and using either 
 <code>add()</code> or <code>roll()</code>, depending on whether larger
  fields should be affected, the user interface can behave as most users
  will intuitively expect.</p>
 - seealso: java.lang.System#currentTimeMillis()
 - seealso: Date
 - seealso: GregorianCalendar
 - seealso: TimeZone
 - seealso: java.text.DateFormat
 @author Mark Davis, David Goldsmith, Chen-Lieh Huang, Alan Liu
 @since JDK1.1
 */
@interface JavaUtilCalendar : NSObject < JavaIoSerializable, NSCopying, JavaLangComparable > {
 @public
  /*!
   @brief The calendar field values for the currently set time for this calendar.
   This is an array of <code>FIELD_COUNT</code> integers, with index values 
 <code>ERA</code> through <code>DST_OFFSET</code>.
   */
  IOSIntArray *fields_;
  /*!
   @brief The flags which tell if a specified calendar field for the calendar is set.
   A new object has no fields set.  After the first call to a method
  which generates the fields, they all remain set after that.
  This is an array of <code>FIELD_COUNT</code> booleans, with index values 
 <code>ERA</code> through <code>DST_OFFSET</code>.
   */
  IOSBooleanArray *isSet_;
  /*!
   @brief The currently set time for this calendar, expressed in milliseconds after
  January 1, 1970, 0:00:00 GMT.
   - seealso: #isTimeSet
   */
  jlong time_;
  /*!
   @brief True if then the value of <code>time</code> is valid.
   The time is made invalid by a change to an item of <code>field[]</code>.
   - seealso: #time
   */
  jboolean isTimeSet_;
  /*!
   @brief True if <code>fields[]</code> are in sync with the currently set time.
   If false, then the next attempt to get the value of a field will
  force a recomputation of all fields from the current value of 
 <code>time</code>.
   */
  jboolean areFieldsSet_;
  /*!
   @brief True if all fields have been set.
   */
  jboolean areAllFieldsSet_;
}
@property (readonly, class) jint ERA NS_SWIFT_NAME(ERA);
@property (readonly, class) jint YEAR NS_SWIFT_NAME(YEAR);
@property (readonly, class) jint MONTH NS_SWIFT_NAME(MONTH);
@property (readonly, class) jint WEEK_OF_YEAR NS_SWIFT_NAME(WEEK_OF_YEAR);
@property (readonly, class) jint WEEK_OF_MONTH NS_SWIFT_NAME(WEEK_OF_MONTH);
@property (readonly, class) jint DATE NS_SWIFT_NAME(DATE);
@property (readonly, class) jint DAY_OF_MONTH NS_SWIFT_NAME(DAY_OF_MONTH);
@property (readonly, class) jint DAY_OF_YEAR NS_SWIFT_NAME(DAY_OF_YEAR);
@property (readonly, class) jint DAY_OF_WEEK NS_SWIFT_NAME(DAY_OF_WEEK);
@property (readonly, class) jint DAY_OF_WEEK_IN_MONTH NS_SWIFT_NAME(DAY_OF_WEEK_IN_MONTH);
@property (readonly, class) jint AM_PM NS_SWIFT_NAME(AM_PM);
@property (readonly, class) jint HOUR NS_SWIFT_NAME(HOUR);
@property (readonly, class) jint HOUR_OF_DAY NS_SWIFT_NAME(HOUR_OF_DAY);
@property (readonly, class) jint MINUTE NS_SWIFT_NAME(MINUTE);
@property (readonly, class) jint SECOND NS_SWIFT_NAME(SECOND);
@property (readonly, class) jint MILLISECOND NS_SWIFT_NAME(MILLISECOND);
@property (readonly, class) jint ZONE_OFFSET NS_SWIFT_NAME(ZONE_OFFSET);
@property (readonly, class) jint DST_OFFSET NS_SWIFT_NAME(DST_OFFSET);
@property (readonly, class) jint FIELD_COUNT NS_SWIFT_NAME(FIELD_COUNT);
@property (readonly, class) jint SUNDAY NS_SWIFT_NAME(SUNDAY);
@property (readonly, class) jint MONDAY NS_SWIFT_NAME(MONDAY);
@property (readonly, class) jint TUESDAY NS_SWIFT_NAME(TUESDAY);
@property (readonly, class) jint WEDNESDAY NS_SWIFT_NAME(WEDNESDAY);
@property (readonly, class) jint THURSDAY NS_SWIFT_NAME(THURSDAY);
@property (readonly, class) jint FRIDAY NS_SWIFT_NAME(FRIDAY);
@property (readonly, class) jint SATURDAY NS_SWIFT_NAME(SATURDAY);
@property (readonly, class) jint JANUARY NS_SWIFT_NAME(JANUARY);
@property (readonly, class) jint FEBRUARY NS_SWIFT_NAME(FEBRUARY);
@property (readonly, class) jint MARCH NS_SWIFT_NAME(MARCH);
@property (readonly, class) jint APRIL NS_SWIFT_NAME(APRIL);
@property (readonly, class) jint MAY NS_SWIFT_NAME(MAY);
@property (readonly, class) jint JUNE NS_SWIFT_NAME(JUNE);
@property (readonly, class) jint JULY NS_SWIFT_NAME(JULY);
@property (readonly, class) jint AUGUST NS_SWIFT_NAME(AUGUST);
@property (readonly, class) jint SEPTEMBER NS_SWIFT_NAME(SEPTEMBER);
@property (readonly, class) jint OCTOBER NS_SWIFT_NAME(OCTOBER);
@property (readonly, class) jint NOVEMBER NS_SWIFT_NAME(NOVEMBER);
@property (readonly, class) jint DECEMBER NS_SWIFT_NAME(DECEMBER);
@property (readonly, class) jint UNDECIMBER NS_SWIFT_NAME(UNDECIMBER);
@property (readonly, class) jint AM NS_SWIFT_NAME(AM);
@property (readonly, class) jint PM NS_SWIFT_NAME(PM);
@property (readonly, class) jint ALL_STYLES NS_SWIFT_NAME(ALL_STYLES);
@property (readonly, class) jint STANDALONE_MASK NS_SWIFT_NAME(STANDALONE_MASK);
@property (readonly, class) jint SHORT NS_SWIFT_NAME(SHORT);
@property (readonly, class) jint LONG NS_SWIFT_NAME(LONG);
@property (readonly, class) jint NARROW_FORMAT NS_SWIFT_NAME(NARROW_FORMAT);
@property (readonly, class) jint NARROW_STANDALONE NS_SWIFT_NAME(NARROW_STANDALONE);
@property (readonly, class) jint SHORT_FORMAT NS_SWIFT_NAME(SHORT_FORMAT);
@property (readonly, class) jint LONG_FORMAT NS_SWIFT_NAME(LONG_FORMAT);
@property (readonly, class) jint SHORT_STANDALONE NS_SWIFT_NAME(SHORT_STANDALONE);
@property (readonly, class) jint LONG_STANDALONE NS_SWIFT_NAME(LONG_STANDALONE);
@property (readonly, class) jint ALL_FIELDS NS_SWIFT_NAME(ALL_FIELDS);
@property (readonly, class) jint currentSerialVersion NS_SWIFT_NAME(currentSerialVersion);
@property (readonly, class) jlong serialVersionUID NS_SWIFT_NAME(serialVersionUID);
@property (readonly, class) jint ERA_MASK NS_SWIFT_NAME(ERA_MASK);
@property (readonly, class) jint YEAR_MASK NS_SWIFT_NAME(YEAR_MASK);
@property (readonly, class) jint MONTH_MASK NS_SWIFT_NAME(MONTH_MASK);
@property (readonly, class) jint WEEK_OF_YEAR_MASK NS_SWIFT_NAME(WEEK_OF_YEAR_MASK);
@property (readonly, class) jint WEEK_OF_MONTH_MASK NS_SWIFT_NAME(WEEK_OF_MONTH_MASK);
@property (readonly, class) jint DAY_OF_MONTH_MASK NS_SWIFT_NAME(DAY_OF_MONTH_MASK);
@property (readonly, class) jint DATE_MASK NS_SWIFT_NAME(DATE_MASK);
@property (readonly, class) jint DAY_OF_YEAR_MASK NS_SWIFT_NAME(DAY_OF_YEAR_MASK);
@property (readonly, class) jint DAY_OF_WEEK_MASK NS_SWIFT_NAME(DAY_OF_WEEK_MASK);
@property (readonly, class) jint DAY_OF_WEEK_IN_MONTH_MASK NS_SWIFT_NAME(DAY_OF_WEEK_IN_MONTH_MASK);
@property (readonly, class) jint AM_PM_MASK NS_SWIFT_NAME(AM_PM_MASK);
@property (readonly, class) jint HOUR_MASK NS_SWIFT_NAME(HOUR_MASK);
@property (readonly, class) jint HOUR_OF_DAY_MASK NS_SWIFT_NAME(HOUR_OF_DAY_MASK);
@property (readonly, class) jint MINUTE_MASK NS_SWIFT_NAME(MINUTE_MASK);
@property (readonly, class) jint SECOND_MASK NS_SWIFT_NAME(SECOND_MASK);
@property (readonly, class) jint MILLISECOND_MASK NS_SWIFT_NAME(MILLISECOND_MASK);
@property (readonly, class) jint ZONE_OFFSET_MASK NS_SWIFT_NAME(ZONE_OFFSET_MASK);
@property (readonly, class) jint DST_OFFSET_MASK NS_SWIFT_NAME(DST_OFFSET_MASK);

+ (jint)ERA;

+ (jint)YEAR;

+ (jint)MONTH;

+ (jint)WEEK_OF_YEAR;

+ (jint)WEEK_OF_MONTH;

+ (jint)DATE;

+ (jint)DAY_OF_MONTH;

+ (jint)DAY_OF_YEAR;

+ (jint)DAY_OF_WEEK;

+ (jint)DAY_OF_WEEK_IN_MONTH;

+ (jint)AM_PM;

+ (jint)HOUR;

+ (jint)HOUR_OF_DAY;

+ (jint)MINUTE;

+ (jint)SECOND;

+ (jint)MILLISECOND;

+ (jint)ZONE_OFFSET;

+ (jint)DST_OFFSET;

+ (jint)FIELD_COUNT;

+ (jint)SUNDAY;

+ (jint)MONDAY;

+ (jint)TUESDAY;

+ (jint)WEDNESDAY;

+ (jint)THURSDAY;

+ (jint)FRIDAY;

+ (jint)SATURDAY;

+ (jint)JANUARY;

+ (jint)FEBRUARY;

+ (jint)MARCH;

+ (jint)APRIL;

+ (jint)MAY;

+ (jint)JUNE;

+ (jint)JULY;

+ (jint)AUGUST;

+ (jint)SEPTEMBER;

+ (jint)OCTOBER;

+ (jint)NOVEMBER;

+ (jint)DECEMBER;

+ (jint)UNDECIMBER;

+ (jint)AM;

+ (jint)PM;

+ (jint)ALL_STYLES;

+ (jint)STANDALONE_MASK;

+ (jint)SHORT;

+ (jint)LONG;

+ (jint)NARROW_FORMAT;

+ (jint)NARROW_STANDALONE;

+ (jint)SHORT_FORMAT;

+ (jint)LONG_FORMAT;

+ (jint)SHORT_STANDALONE;

+ (jint)LONG_STANDALONE;

+ (jint)ALL_FIELDS;

+ (jint)currentSerialVersion;

+ (jlong)serialVersionUID;

+ (jint)ERA_MASK;

+ (jint)YEAR_MASK;

+ (jint)MONTH_MASK;

+ (jint)WEEK_OF_YEAR_MASK;

+ (jint)WEEK_OF_MONTH_MASK;

+ (jint)DAY_OF_MONTH_MASK;

+ (jint)DATE_MASK;

+ (jint)DAY_OF_YEAR_MASK;

+ (jint)DAY_OF_WEEK_MASK;

+ (jint)DAY_OF_WEEK_IN_MONTH_MASK;

+ (jint)AM_PM_MASK;

+ (jint)HOUR_MASK;

+ (jint)HOUR_OF_DAY_MASK;

+ (jint)MINUTE_MASK;

+ (jint)SECOND_MASK;

+ (jint)MILLISECOND_MASK;

+ (jint)ZONE_OFFSET_MASK;

+ (jint)DST_OFFSET_MASK;

#pragma mark Public

/*!
 @brief Adds or subtracts the specified amount of time to the given calendar field,
  based on the calendar's rules.For example, to subtract 5 days from
  the current time of the calendar, you can achieve it by calling: 
 <p><code>add(Calendar.DAY_OF_MONTH, -5)</code>.
 @param field the calendar field.
 @param amount the amount of date or time to be added to the field.
 - seealso: #roll(int,int)
 - seealso: #set(int,int)
 */
- (void)addWithInt:(jint)field
           withInt:(jint)amount;

/*!
 @brief Returns whether this <code>Calendar</code> represents a time
  after the time represented by the specified 
 <code>Object</code>.This method is equivalent to: 
 @code
        compareTo(when) > 0 
 
@endcode
  if and only if <code>when</code> is a <code>Calendar</code>
  instance.
 Otherwise, the method returns <code>false</code>.
 @param when the  <code> Object </code>  to be compared
 @return <code>true</code> if the time of this <code>Calendar</code> is
  after the time represented by <code>when</code>; <code>false</code>
  otherwise.
 - seealso: #compareTo(Calendar)
 */
- (jboolean)afterWithId:(id)when;

/*!
 @brief Returns whether this <code>Calendar</code> represents a time
  before the time represented by the specified 
 <code>Object</code>.This method is equivalent to: 
 @code
        compareTo(when) < 0 
 
@endcode
  if and only if <code>when</code> is a <code>Calendar</code>
  instance.
 Otherwise, the method returns <code>false</code>.
 @param when the  <code> Object </code>  to be compared
 @return <code>true</code> if the time of this 
 <code>Calendar</code> is before the time represented by 
 <code>when</code>; <code>false</code> otherwise.
 - seealso: #compareTo(Calendar)
 */
- (jboolean)beforeWithId:(id)when;

/*!
 @brief Sets all the calendar field values and the time value
  (millisecond offset from the <a href="#Epoch">Epoch</a>) of
  this <code>Calendar</code> undefined.This means that <code>isSet()</code>
  will return <code>false</code> for all the
  calendar fields, and the date and time calculations will treat
  the fields as if they had never been set.
 A 
 <code>Calendar</code> implementation class may use its specific
  default field values for date/time calculations. For example, 
 <code>GregorianCalendar</code> uses 1970 if the 
 <code>YEAR</code> field value is undefined.
 - seealso: #clear(int)
 */
- (void)clear;

/*!
 @brief Sets the given calendar field value and the time value
  (millisecond offset from the <a href="#Epoch">Epoch</a>) of
  this <code>Calendar</code> undefined.This means that <code>isSet(field)</code>
  will return <code>false</code>, and
  the date and time calculations will treat the field as if it
  had never been set.
 A <code>Calendar</code> implementation
  class may use the field's specific default value for date and
  time calculations. 
 <p>The <code>HOUR_OF_DAY</code>, <code>HOUR</code> and <code>AM_PM</code>
  fields are handled independently and the <a href="#time_resolution">
 the resolution rule for the time of
  day</a> is applied. Clearing one of the fields doesn't reset
  the hour of day value of this <code>Calendar</code>. Use <code>set(Calendar.HOUR_OF_DAY, 0)</code>
  to reset the hour
  value.
 @param field the calendar field to be cleared.
 - seealso: #clear()
 */
- (void)clearWithInt:(jint)field;

/*!
 @brief Creates and returns a copy of this object.
 @return a copy of this object.
 */
- (id __nonnull)java_clone;

/*!
 @brief Compares the time values (millisecond offsets from the <a href="#Epoch">
 Epoch</a>) represented by two 
 <code>Calendar</code> objects.
 @param anotherCalendar the  <code> Calendar </code>  to be compared.
 @return the value <code>0</code> if the time represented by the argument
  is equal to the time represented by this <code>Calendar</code>; a value
  less than <code>0</code> if the time of this <code>Calendar</code> is
  before the time represented by the argument; and a value greater than 
 <code>0</code> if the time of this <code>Calendar</code> is after the
  time represented by the argument.
 @throw NullPointerExceptionif the specified <code>Calendar</code> is
             <code>null</code>.
 @throw IllegalArgumentExceptionif the time value of the
  specified <code>Calendar</code> object can't be obtained due to
  any invalid calendar values.
 @since 1.5
 */
- (jint)compareToWithId:(JavaUtilCalendar *)anotherCalendar;

/*!
 @brief Compares this <code>Calendar</code> to the specified 
 <code>Object</code>.The result is <code>true</code> if and only if
  the argument is a <code>Calendar</code> object of the same calendar
  system that represents the same time value (millisecond offset from the 
 <a href="#Epoch">Epoch</a>) under the same 
 <code>Calendar</code> parameters as this object.
 <p>The <code>Calendar</code> parameters are the values represented
  by the <code>isLenient</code>, <code>getFirstDayOfWeek</code>,
  <code>getMinimalDaysInFirstWeek</code> and <code>getTimeZone</code>
  methods. If there is any difference in those parameters
  between the two <code>Calendar</code>s, this method returns 
 <code>false</code>.
  
 <p>Use the <code>compareTo</code> method to
  compare only the time values.
 @param obj the object to compare with.
 @return <code>true</code> if this object is equal to <code>obj</code>;
  <code>false</code> otherwise.
 */
- (jboolean)isEqual:(id)obj;

/*!
 @brief Returns the value of the given calendar field.In lenient mode,
  all calendar fields are normalized.
 In non-lenient mode, all
  calendar fields are validated and this method throws an
  exception if any calendar fields have out-of-range values. The
  normalization and validation are handled by the 
 <code>complete()</code> method, which process is calendar
  system dependent.
 @param field the given calendar field.
 @return the value for the given calendar field.
 @throw ArrayIndexOutOfBoundsExceptionif the specified field is out of range
              (<code>field &lt; 0 || field &gt;= FIELD_COUNT</code>).
 - seealso: #set(int,int)
 - seealso: #complete()
 */
- (jint)getWithInt:(jint)field;

/*!
 @brief Returns the maximum value that the specified calendar field
  could have, given the time value of this 
 <code>Calendar</code>.For example, the actual maximum value of the 
 <code>MONTH</code> field is 12 in some years, and 13 in
  other years in the Hebrew calendar system.
 <p>The default implementation of this method uses an iterative
  algorithm to determine the actual maximum value for the
  calendar field. Subclasses should, if possible, override this
  with a more efficient implementation.
 @param field the calendar field
 @return the maximum of the given calendar field for the time
  value of this <code>Calendar</code>
 - seealso: #getMinimum(int)
 - seealso: #getMaximum(int)
 - seealso: #getGreatestMinimum(int)
 - seealso: #getLeastMaximum(int)
 - seealso: #getActualMinimum(int)
 @since 1.2
 */
- (jint)getActualMaximumWithInt:(jint)field;

/*!
 @brief Returns the minimum value that the specified calendar field
  could have, given the time value of this <code>Calendar</code>.
 <p>The default implementation of this method uses an iterative
  algorithm to determine the actual minimum value for the
  calendar field. Subclasses should, if possible, override this
  with a more efficient implementation - in many cases, they can
  simply return <code>getMinimum()</code>.
 @param field the calendar field
 @return the minimum of the given calendar field for the time
  value of this <code>Calendar</code>
 - seealso: #getMinimum(int)
 - seealso: #getMaximum(int)
 - seealso: #getGreatestMinimum(int)
 - seealso: #getLeastMaximum(int)
 - seealso: #getActualMaximum(int)
 @since 1.2
 */
- (jint)getActualMinimumWithInt:(jint)field;

/*!
 @brief Returns an unmodifiable <code>Set</code> containing all calendar types
  supported by <code>Calendar</code> in the runtime environment.The available
  calendar types can be used for the <a href="Locale.html#def_locale_extension">
 Unicode locale extensions</a>.
 The <code>Set</code> returned contains at least <code>"gregory"</code>. The
  calendar types don't include aliases, such as <code>"gregorian"</code> for 
 <code>"gregory"</code>.
 @return an unmodifiable <code>Set</code> containing all available calendar types
 @since 1.8
 - seealso: #getCalendarType()
 - seealso: Calendar.Builder#setCalendarType(String)
 - seealso: Locale#getUnicodeLocaleType(String)
 */
+ (id<JavaUtilSet> __nonnull)getAvailableCalendarTypes;

/*!
 @brief Returns an array of all locales for which the <code>getInstance</code>
  methods of this class can return localized instances.
 The array returned must contain at least a <code>Locale</code>
  instance equal to <code>Locale.US</code>.
 @return An array of locales for which localized
          <code>Calendar</code> instances are available.
 */
+ (IOSObjectArray * __nonnull)getAvailableLocales;

/*!
 @brief Returns the calendar type of this <code>Calendar</code>.Calendar types are
  defined by the <em>Unicode Locale Data Markup Language (LDML)</em>
  specification.
 <p>The default implementation of this method returns the class name of this 
 <code>Calendar</code> instance. Any subclasses that implement
  LDML-defined calendar systems should override this method to return
  appropriate calendar types.
 @return the LDML-defined calendar type or the class name of this
          <code>Calendar</code> instance
 @since 1.8
 - seealso: <a href="Locale.html#def_extensions">Locale extensions</a>
 - seealso: Locale.Builder#setLocale(Locale)
 - seealso: Locale.Builder#setUnicodeLocaleKeyword(String, String)
 */
- (NSString * __nonnull)getCalendarType;

/*!
 @brief Returns the string representation of the calendar 
 <code>field</code> value in the given <code>style</code> and 
 <code>locale</code>.If no string representation is
  applicable, <code>null</code> is returned.
 This method calls 
 <code>get(field)</code> to get the calendar 
 <code>field</code> value if the string representation is
  applicable to the given calendar <code>field</code>.
  
 <p>For example, if this <code>Calendar</code> is a 
 <code>GregorianCalendar</code> and its date is 2005-01-01, then
  the string representation of the <code>MONTH</code> field would be
  "January" in the long style in an English locale or "Jan" in
  the short style. However, no string representation would be
  available for the <code>DAY_OF_MONTH</code> field, and this method
  would return <code>null</code>.
  
 <p>The default implementation supports the calendar fields for
  which a <code>DateFormatSymbols</code> has names in the given 
 <code>locale</code>.
 @param field the calendar field for which the string representation
          is returned
 @param style the style applied to the string representation; one of 
 <code>SHORT_FORMAT</code>
   (<code>SHORT</code> ), <code>SHORT_STANDALONE</code> ,         <code>LONG_FORMAT</code>
   (<code>LONG</code> ), <code>LONG_STANDALONE</code> ,         <code>NARROW_FORMAT</code>
  , or <code>NARROW_STANDALONE</code> .
 @param locale the locale for the string representation
          (any calendar types specified by 
 <code>locale</code>  are ignored)
 @return the string representation of the given
         <code>field</code> in the given <code>style</code>, or
         <code>null</code> if no string representation is
         applicable.
 @throw IllegalArgumentException
 if <code>field</code> or <code>style</code> is invalid,
         or if this <code>Calendar</code> is non-lenient and any
         of the calendar fields have invalid values
 @throw NullPointerException
 if <code>locale</code> is null
 @since 1.6
 */
- (NSString * __nullable)getDisplayNameWithInt:(jint)field
                                       withInt:(jint)style
                            withJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Returns a <code>Map</code> containing all names of the calendar 
 <code>field</code> in the given <code>style</code> and 
 <code>locale</code> and their corresponding field values.For
  example, if this <code>Calendar</code> is a <code>GregorianCalendar</code>
 , the returned map would contain "Jan" to 
 <code>JANUARY</code>, "Feb" to <code>FEBRUARY</code>, and so on, in the 
 short style in an English locale.
 <p>Narrow names may not be unique due to use of single characters,
  such as "S" for Sunday and Saturday. In that case narrow names are not
  included in the returned <code>Map</code>.
  
 <p>The values of other calendar fields may be taken into
  account to determine a set of display names. For example, if
  this <code>Calendar</code> is a lunisolar calendar system and
  the year value given by the <code>YEAR</code> field has a leap
  month, this method would return month names containing the leap
  month name, and month names are mapped to their values specific
  for the year. 
 <p>The default implementation supports display names contained in
  a <code>DateFormatSymbols</code>. For example, if <code>field</code>
  is <code>MONTH</code> and <code>style</code> is <code>ALL_STYLES</code>
 , this method returns a <code>Map</code> containing
  all strings returned by <code>DateFormatSymbols.getShortMonths()</code>
  and <code>DateFormatSymbols.getMonths()</code>.
 @param field the calendar field for which the display names are returned
 @param style the style applied to the string representation; one of 
 <code>SHORT_FORMAT</code>
   (<code>SHORT</code> ), <code>SHORT_STANDALONE</code> ,         <code>LONG_FORMAT</code>
   (<code>LONG</code> ), <code>LONG_STANDALONE</code> ,         <code>NARROW_FORMAT</code>
  , or <code>NARROW_STANDALONE</code>
 @param locale the locale for the display names
 @return a <code>Map</code> containing all display names in
         <code>style</code> and <code>locale</code> and their
         field values, or <code>null</code> if no display names
         are defined for <code>field</code>
 @throw IllegalArgumentException
 if <code>field</code> or <code>style</code> is invalid,
         or if this <code>Calendar</code> is non-lenient and any
         of the calendar fields have invalid values
 @throw NullPointerException
 if <code>locale</code> is null
 @since 1.6
 */
- (id<JavaUtilMap> __nullable)getDisplayNamesWithInt:(jint)field
                                             withInt:(jint)style
                                  withJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Gets what the first day of the week is; e.g., <code>SUNDAY</code> in the U.S., 
 <code>MONDAY</code> in France.
 @return the first day of the week.
 - seealso: #setFirstDayOfWeek(int)
 - seealso: #getMinimalDaysInFirstWeek()
 */
- (jint)getFirstDayOfWeek;

/*!
 @brief Returns the highest minimum value for the given calendar field
  of this <code>Calendar</code> instance.The highest minimum
  value is defined as the largest value returned by <code>getActualMinimum(int)</code>
  for any possible time value.
 The
  greatest minimum value depends on calendar system specific
  parameters of the instance.
 @param field the calendar field.
 @return the highest minimum value for the given calendar field.
 - seealso: #getMinimum(int)
 - seealso: #getMaximum(int)
 - seealso: #getLeastMaximum(int)
 - seealso: #getActualMinimum(int)
 - seealso: #getActualMaximum(int)
 */
- (jint)getGreatestMinimumWithInt:(jint)field;

/*!
 @brief Gets a calendar using the default time zone and locale.The
  <code>Calendar</code> returned is based on the current time
  in the default time zone with the default 
 <code>FORMAT</code> locale.
 @return a Calendar.
 */
+ (JavaUtilCalendar * __nonnull)getInstance;

/*!
 @brief Gets a calendar using the default time zone and specified locale.
 The <code>Calendar</code> returned is based on the current time
  in the default time zone with the given locale.
 @param aLocale the locale for the week data
 @return a Calendar.
 */
+ (JavaUtilCalendar * __nonnull)getInstanceWithJavaUtilLocale:(JavaUtilLocale *)aLocale;

/*!
 @brief Gets a calendar using the specified time zone and default locale.
 The <code>Calendar</code> returned is based on the current time
  in the given time zone with the default 
 <code>FORMAT</code> locale.
 @param zone the time zone to use
 @return a Calendar.
 */
+ (JavaUtilCalendar * __nonnull)getInstanceWithJavaUtilTimeZone:(JavaUtilTimeZone *)zone;

/*!
 @brief Gets a calendar with the specified time zone and locale.
 The <code>Calendar</code> returned is based on the current time
  in the given time zone with the given locale.
 @param zone the time zone to use
 @param aLocale the locale for the week data
 @return a Calendar.
 */
+ (JavaUtilCalendar * __nonnull)getInstanceWithJavaUtilTimeZone:(JavaUtilTimeZone *)zone
                                             withJavaUtilLocale:(JavaUtilLocale *)aLocale;

/*!
 @brief Returns the lowest maximum value for the given calendar field
  of this <code>Calendar</code> instance.The lowest maximum
  value is defined as the smallest value returned by <code>getActualMaximum(int)</code>
  for any possible time value.
 The least
  maximum value depends on calendar system specific parameters of
  the instance. For example, a <code>Calendar</code> for the
  Gregorian calendar system returns 28 for the 
 <code>DAY_OF_MONTH</code> field, because the 28th is the last
  day of the shortest month of this calendar, February in a
  common year.
 @param field the calendar field.
 @return the lowest maximum value for the given calendar field.
 - seealso: #getMinimum(int)
 - seealso: #getMaximum(int)
 - seealso: #getGreatestMinimum(int)
 - seealso: #getActualMinimum(int)
 - seealso: #getActualMaximum(int)
 */
- (jint)getLeastMaximumWithInt:(jint)field;

/*!
 @brief Returns the maximum value for the given calendar field of this 
 <code>Calendar</code> instance.The maximum value is defined as
  the largest value returned by the <code>get</code> method
  for any possible time value.
 The maximum value depends on
  calendar system specific parameters of the instance.
 @param field the calendar field.
 @return the maximum value for the given calendar field.
 - seealso: #getMinimum(int)
 - seealso: #getGreatestMinimum(int)
 - seealso: #getLeastMaximum(int)
 - seealso: #getActualMinimum(int)
 - seealso: #getActualMaximum(int)
 */
- (jint)getMaximumWithInt:(jint)field;

/*!
 @brief Gets what the minimal days required in the first week of the year are;
  e.g., if the first week is defined as one that contains the first day
  of the first month of a year, this method returns 1.If
  the minimal days required must be a full week, this method
  returns 7.
 @return the minimal days required in the first week of the year.
 - seealso: #setMinimalDaysInFirstWeek(int)
 */
- (jint)getMinimalDaysInFirstWeek;

/*!
 @brief Returns the minimum value for the given calendar field of this 
 <code>Calendar</code> instance.The minimum value is defined as
  the smallest value returned by the <code>get</code> method
  for any possible time value.
 The minimum value depends on
  calendar system specific parameters of the instance.
 @param field the calendar field.
 @return the minimum value for the given calendar field.
 - seealso: #getMaximum(int)
 - seealso: #getGreatestMinimum(int)
 - seealso: #getLeastMaximum(int)
 - seealso: #getActualMinimum(int)
 - seealso: #getActualMaximum(int)
 */
- (jint)getMinimumWithInt:(jint)field;

/*!
 @brief Returns a <code>Date</code> object representing this 
 <code>Calendar</code>'s time value (millisecond offset from the <a href="#Epoch">
 Epoch</a>").
 @return a <code>Date</code> representing the time value.
 - seealso: #setTime(Date)
 - seealso: #getTimeInMillis()
 */
- (JavaUtilDate * __nonnull)getTime;

/*!
 @brief Returns this Calendar's time value in milliseconds.
 @return the current time as UTC milliseconds from the epoch.
 - seealso: #getTime()
 - seealso: #setTimeInMillis(long)
 */
- (jlong)getTimeInMillis;

/*!
 @brief Gets the time zone.
 @return the time zone object associated with this calendar.
 */
- (JavaUtilTimeZone * __nonnull)getTimeZone;

/*!
 @brief Returns the number of weeks in the week year represented by this 
 <code>Calendar</code>.
 <p>The default implementation of this method throws an 
 <code>UnsupportedOperationException</code>.
 @return the number of weeks in the week year.
 @throw UnsupportedOperationException
 if any week year numbering isn't supported in this
             <code>Calendar</code>.
 - seealso: #WEEK_OF_YEAR
 - seealso: #isWeekDateSupported()
 - seealso: #getWeekYear()
 - seealso: #getActualMaximum(int)
 @since 1.7
 */
- (jint)getWeeksInWeekYear;

/*!
 @brief Returns the week year represented by this <code>Calendar</code>.The
  week year is in sync with the week cycle.
 The first day of the first week
  is the first
  day of the week year. 
 <p>The default implementation of this method throws an 
 <code>UnsupportedOperationException</code>.
 @return the week year of this <code>Calendar</code>
 @throw UnsupportedOperationException
 if any week year numbering isn't supported
             in this <code>Calendar</code>.
 - seealso: #isWeekDateSupported()
 - seealso: #getFirstDayOfWeek()
 - seealso: #getMinimalDaysInFirstWeek()
 @since 1.7
 */
- (jint)getWeekYear;

/*!
 @brief Returns a hash code for this calendar.
 @return a hash code value for this object.
 @since 1.2
 */
- (NSUInteger)hash;

/*!
 @brief Tells whether date/time interpretation is to be lenient.
 @return <code>true</code> if the interpretation mode of this calendar is lenient; 
 <code>false</code> otherwise.
 - seealso: #setLenient(boolean)
 */
- (jboolean)isLenient;

/*!
 @brief Determines if the given calendar field has a value set,
  including cases that the value has been set by internal fields
  calculations triggered by a <code>get</code> method call.
 @param field the calendar field to test
 @return <code>true</code> if the given calendar field has a value set; 
 <code>false</code> otherwise.
 */
- (jboolean)isSetWithInt:(jint)field;

/*!
 @brief Returns whether this <code>Calendar</code> supports week dates.
 <p>The default implementation of this method returns <code>false</code>.
 @return <code>true</code> if this <code>Calendar</code> supports week dates;
          <code>false</code> otherwise.
 - seealso: #getWeekYear()
 - seealso: #setWeekDate(int,int,int)
 - seealso: #getWeeksInWeekYear()
 @since 1.7
 */
- (jboolean)isWeekDateSupported;

/*!
 @brief Adds or subtracts (up/down) a single unit of time on the given time
  field without changing larger fields.For example, to roll the current
  date up by one day, you can achieve it by calling: 
 <p>roll(Calendar.DATE, true).
 When rolling on the year or Calendar.YEAR field, it will roll the year
  value in the range between 1 and the value returned by calling 
 <code>getMaximum(Calendar.YEAR)</code>.
  When rolling on the month or Calendar.MONTH field, other fields like
  date might conflict and, need to be changed. For instance,
  rolling the month on the date 01/31/96 will result in 02/29/96.
  When rolling on the hour-in-day or Calendar.HOUR_OF_DAY field, it will
  roll the hour value in the range between 0 and 23, which is zero-based.
 @param field the time field.
 @param up indicates if the value of the specified time field is to be  rolled up or rolled down. Use true if rolling up, false otherwise.
 - seealso: Calendar#add(int,int)
 - seealso: Calendar#set(int,int)
 */
- (void)rollWithInt:(jint)field
        withBoolean:(jboolean)up;

/*!
 @brief Adds the specified (signed) amount to the specified calendar field
  without changing larger fields.A negative amount means to roll
  down.
 <p>NOTE:  This default implementation on <code>Calendar</code> just repeatedly calls the
  version of <code>roll()</code> that rolls by one unit.  This may not
  always do the right thing.  For example, if the <code>DAY_OF_MONTH</code> field is 31,
  rolling through February will leave it set to 28.  The <code>GregorianCalendar</code>
  version of this function takes care of this problem.  Other subclasses
  should also provide overrides of this function that do the right thing.
 @param field the calendar field.
 @param amount the signed amount to add to the calendar  <code> field </code>
  .
 @since 1.2
 - seealso: #roll(int,boolean)
 - seealso: #add(int,int)
 - seealso: #set(int,int)
 */
- (void)rollWithInt:(jint)field
            withInt:(jint)amount;

/*!
 @brief Sets the given calendar field to the given value.The value is not
  interpreted by this method regardless of the leniency mode.
 @param field the given calendar field.
 @param value the value to be set for the given calendar field.
 @throw ArrayIndexOutOfBoundsExceptionif the specified field is out of range
              (<code>field &lt; 0 || field &gt;= FIELD_COUNT</code>).
  in non-lenient mode.
 - seealso: #set(int,int,int)
 - seealso: #set(int,int,int,int,int)
 - seealso: #set(int,int,int,int,int,int)
 - seealso: #get(int)
 */
- (void)setWithInt:(jint)field
           withInt:(jint)value;

/*!
 @brief Sets the values for the calendar fields <code>YEAR</code>,
  <code>MONTH</code>, and <code>DAY_OF_MONTH</code>.
 Previous values of other calendar fields are retained.  If this is not desired,
  call <code>clear()</code> first.
 @param year the value used to set the  <code> YEAR </code>  calendar field.
 @param month the value used to set the  <code> MONTH </code>  calendar field.
   Month value is 0-based. e.g., 0 for January.
 @param date the value used to set the  <code> DAY_OF_MONTH </code>  calendar field.
 - seealso: #set(int,int)
 - seealso: #set(int,int,int,int,int)
 - seealso: #set(int,int,int,int,int,int)
 */
- (void)setWithInt:(jint)year
           withInt:(jint)month
           withInt:(jint)date;

/*!
 @brief Sets the values for the calendar fields <code>YEAR</code>,
  <code>MONTH</code>, <code>DAY_OF_MONTH</code>,
  <code>HOUR_OF_DAY</code>, and <code>MINUTE</code>.
 Previous values of other fields are retained.  If this is not desired,
  call <code>clear()</code> first.
 @param year the value used to set the  <code> YEAR </code>  calendar field.
 @param month the value used to set the  <code> MONTH </code>  calendar field.
   Month value is 0-based. e.g., 0 for January.
 @param date the value used to set the  <code> DAY_OF_MONTH </code>  calendar field.
 @param hourOfDay the value used to set the  <code> HOUR_OF_DAY </code>  calendar field.
 @param minute the value used to set the  <code> MINUTE </code>  calendar field.
 - seealso: #set(int,int)
 - seealso: #set(int,int,int)
 - seealso: #set(int,int,int,int,int,int)
 */
- (void)setWithInt:(jint)year
           withInt:(jint)month
           withInt:(jint)date
           withInt:(jint)hourOfDay
           withInt:(jint)minute;

/*!
 @brief Sets the values for the fields <code>YEAR</code>, <code>MONTH</code>,
  <code>DAY_OF_MONTH</code>, <code>HOUR_OF_DAY</code>, <code>MINUTE</code>, and 
 <code>SECOND</code>.
 Previous values of other fields are retained.  If this is not desired,
  call <code>clear()</code> first.
 @param year the value used to set the  <code> YEAR </code>  calendar field.
 @param month the value used to set the  <code> MONTH </code>  calendar field.
   Month value is 0-based. e.g., 0 for January.
 @param date the value used to set the  <code> DAY_OF_MONTH </code>  calendar field.
 @param hourOfDay the value used to set the  <code> HOUR_OF_DAY </code>  calendar field.
 @param minute the value used to set the  <code> MINUTE </code>  calendar field.
 @param second the value used to set the  <code> SECOND </code>  calendar field.
 - seealso: #set(int,int)
 - seealso: #set(int,int,int)
 - seealso: #set(int,int,int,int,int)
 */
- (void)setWithInt:(jint)year
           withInt:(jint)month
           withInt:(jint)date
           withInt:(jint)hourOfDay
           withInt:(jint)minute
           withInt:(jint)second;

/*!
 @brief Sets what the first day of the week is; e.g., <code>SUNDAY</code> in the U.S., 
 <code>MONDAY</code> in France.
 @param value the given first day of the week.
 - seealso: #getFirstDayOfWeek()
 - seealso: #getMinimalDaysInFirstWeek()
 */
- (void)setFirstDayOfWeekWithInt:(jint)value;

/*!
 @brief Specifies whether or not date/time interpretation is to be lenient.With
  lenient interpretation, a date such as "February 942, 1996" will be
  treated as being equivalent to the 941st day after February 1, 1996.
 With strict (non-lenient) interpretation, such dates will cause an exception to be
  thrown. The default is lenient.
 @param lenient <code> true </code>  if the lenient mode is to be turned
   on;  <code> false </code>  if it is to be turned off.
 - seealso: #isLenient()
 - seealso: java.text.DateFormat#setLenient
 */
- (void)setLenientWithBoolean:(jboolean)lenient;

/*!
 @brief Sets what the minimal days required in the first week of the year are;
  For example, if the first week is defined as one that contains the first
  day of the first month of a year, call this method with value 1.If it
  must be a full week, use value 7.
 @param value the given minimal days required in the first week  of the year.
 - seealso: #getMinimalDaysInFirstWeek()
 */
- (void)setMinimalDaysInFirstWeekWithInt:(jint)value;

/*!
 @brief Sets this Calendar's time with the given <code>Date</code>.
 <p>
  Note: Calling <code>setTime()</code> with 
 <code>Date(Long.MAX_VALUE)</code> or <code>Date(Long.MIN_VALUE)</code>
  may yield incorrect field values from <code>get()</code>.
 @param date the given Date.
 - seealso: #getTime()
 - seealso: #setTimeInMillis(long)
 */
- (void)setTimeWithJavaUtilDate:(JavaUtilDate *)date;

/*!
 @brief Sets this Calendar's current time from the given long value.
 @param millis the new time in UTC milliseconds from the epoch.
 - seealso: #setTime(Date)
 - seealso: #getTimeInMillis()
 */
- (void)setTimeInMillisWithLong:(jlong)millis;

/*!
 @brief Sets the time zone with the given time zone value.
 @param value the given time zone.
 */
- (void)setTimeZoneWithJavaUtilTimeZone:(JavaUtilTimeZone *)value;

/*!
 @brief Sets the date of this <code>Calendar</code> with the the given date
  specifiers - week year, week of year, and day of week.
 <p>Unlike the <code>set</code> method, all of the calendar fields
  and <code>time</code> values are calculated upon return. 
 <p>If <code>weekOfYear</code> is out of the valid week-of-year range
  in <code>weekYear</code>, the <code>weekYear</code> and <code>weekOfYear</code>
  values are adjusted in lenient mode, or an <code>IllegalArgumentException</code>
  is thrown in non-lenient mode. 
 <p>The default implementation of this method throws an 
 <code>UnsupportedOperationException</code>.
 @param weekYear the week year
 @param weekOfYear the week number based on <code>weekYear</code>
 @param dayOfWeek the day of week value: one of the constants                    for the 
 <code>DAY_OF_WEEK</code>  field: <code>SUNDAY</code>
  , ..., <code>SATURDAY</code> .
 @throw IllegalArgumentException
 if any of the given date specifiers is invalid
             or any of the calendar fields are inconsistent
             with the given date specifiers in non-lenient mode
 @throw UnsupportedOperationException
 if any week year numbering isn't supported in this
             <code>Calendar</code>.
 - seealso: #isWeekDateSupported()
 - seealso: #getFirstDayOfWeek()
 - seealso: #getMinimalDaysInFirstWeek()
 @since 1.7
 */
- (void)setWeekDateWithInt:(jint)weekYear
                   withInt:(jint)weekOfYear
                   withInt:(jint)dayOfWeek;

/*!
 @brief Return a string representation of this calendar.This method
  is intended to be used only for debugging purposes, and the
  format of the returned string may vary between implementations.
 The returned string may be empty but may not be <code>null</code>.
 @return a string representation of this calendar.
 */
- (NSString * __nonnull)description;

#pragma mark Protected

/*!
 @brief Constructs a Calendar with the default time zone
  and the default <code>FORMAT</code>
  locale.
 - seealso: TimeZone#getDefault
 */
- (instancetype __nonnull)init;

/*!
 @brief Constructs a calendar with the specified time zone and locale.
 @param zone the time zone to use
 @param aLocale the locale for the week data
 */
- (instancetype __nonnull)initWithJavaUtilTimeZone:(JavaUtilTimeZone *)zone
                                withJavaUtilLocale:(JavaUtilLocale *)aLocale;

/*!
 @brief Fills in any unset fields in the calendar fields.First, the <code>computeTime()</code>
  method is called if the time value (millisecond offset
  from the <a href="#Epoch">Epoch</a>) has not been calculated from
  calendar field values.
 Then, the <code>computeFields()</code> method is
  called to calculate all calendar field values.
 */
- (void)complete;

/*!
 @brief Converts the current millisecond time value <code>time</code>
  to calendar field values in <code>fields[]</code>.
 This allows you to sync up the calendar field values with
  a new time that is set for the calendar.  The time is <em>not</em>
  recomputed first; to recompute the time, then the fields, call the 
 <code>complete()</code> method.
 - seealso: #computeTime()
 */
- (void)computeFields;

/*!
 @brief Converts the current calendar field values in <code>fields[]</code>
  to the millisecond time value 
 <code>time</code>.
 - seealso: #complete()
 - seealso: #computeFields()
 */
- (void)computeTime;

/*!
 @brief Returns the value of the given calendar field.This method does
  not involve normalization or validation of the field value.
 @param field the given calendar field.
 @return the value for the given calendar field.
 - seealso: #get(int)
 */
- (jint)internalGetWithInt:(jint)field;

#pragma mark Package-Private

- (jboolean)checkDisplayNameParamsWithInt:(jint)field
                                  withInt:(jint)style
                                  withInt:(jint)minStyle
                                  withInt:(jint)maxStyle
                       withJavaUtilLocale:(JavaUtilLocale *)locale
                                  withInt:(jint)fieldMask;

/*!
 @brief Returns the name of the specified calendar field.
 @param field the calendar field
 @return the calendar field name
 @throw IndexOutOfBoundsExceptionif <code>field</code> is negative,
  equal to or greater then <code>FIELD_COUNT</code>.
 */
+ (NSString *)getFieldNameWithInt:(jint)field;

/*!
 @brief Returns a field mask (bit mask) indicating all calendar fields that
  have the state of externally or internally set.
 @return a bit mask indicating set state fields
 */
- (jint)getSetStateFields;

/*!
 @brief Returns the time zone (without cloning).
 */
- (JavaUtilTimeZone *)getZone;

/*!
 @brief Sets the value of the given calendar field.This method does
  not affect any setting state of the field in this 
 <code>Calendar</code> instance.
 @throw IndexOutOfBoundsExceptionif the specified field is out of range
              (<code>field &lt; 0 || field &gt;= FIELD_COUNT</code>).
 - seealso: #areFieldsSet
 - seealso: #isTimeSet
 - seealso: #areAllFieldsSet
 - seealso: #set(int,int)
 */
- (void)internalSetWithInt:(jint)field
                   withInt:(jint)value;

/*!
 @brief Returns whether the value of the specified calendar field has been set
  externally by calling one of the setter methods rather than by the
  internal time calculation.
 @return <code>true</code> if the field has been set externally, 
 <code>false</code> otherwise.
 @throw IndexOutOfBoundsExceptionif the specified
                 <code>field</code> is out of range
                (<code>field &lt; 0 || field &gt;= FIELD_COUNT</code>).
 - seealso: #selectFields()
 - seealso: #setFieldsComputed(int)
 */
- (jboolean)isExternallySetWithInt:(jint)field;

/*!
 @brief Returns whether the specified <code>field</code> is on in the 
 <code>fieldMask</code>.
 */
+ (jboolean)isFieldSetWithInt:(jint)fieldMask
                      withInt:(jint)field;

/*!
 @brief Returns whether the calendar fields are fully in sync with the time
  value.
 */
- (jboolean)isFullyNormalized;

/*!
 @brief Returns whether the calendar fields are partially in sync with the time
  value or fully in sync but not stamp values are not normalized yet.
 */
- (jboolean)isPartiallyNormalized;

/*!
 @brief Returns a field mask indicating which calendar field values
  to be used to calculate the time value.The calendar fields are
  returned as a bit mask, each bit of which corresponds to a field, i.e.,
  the mask value of <code>field</code> is <code>(1 &lt;&lt;
  field)</code>.
 For example, 0x26 represents the <code>YEAR</code>,
  <code>MONTH</code>, and <code>DAY_OF_MONTH</code> fields (i.e., 0x26 is
  equal to 
 <code>(1&lt;&lt;YEAR)|(1&lt;&lt;MONTH)|(1&lt;&lt;DAY_OF_MONTH))</code>.
  
 <p>This method supports the calendar fields resolution as described in
  the class description. If the bit mask for a given field is on and its
  field has not been set (i.e., <code>isSet(field)</code> is 
 <code>false</code>), then the default value of the field has to be
  used, which case means that the field has been selected because the
  selected combination involves the field.
 @return a bit mask of selected fields
 - seealso: #isExternallySet(int)
 */
- (jint)selectFields;

/*!
 @brief Sets the state of the specified calendar fields to 
 <em>computed</em>.This state means that the specified calendar fields
  have valid values that have been set by internal time calculation
  rather than by calling one of the setter methods.
 @param fieldMask the field to be marked as computed.
 @throw IndexOutOfBoundsExceptionif the specified
                 <code>field</code> is out of range
                (<code>field &lt; 0 || field &gt;= FIELD_COUNT</code>).
 - seealso: #isExternallySet(int)
 - seealso: #selectFields()
 */
- (void)setFieldsComputedWithInt:(jint)fieldMask;

/*!
 @brief Sets the state of the calendar fields that are <em>not</em> specified
  by <code>fieldMask</code> to <em>unset</em>.If <code>fieldMask</code>
  specifies all the calendar fields, then the state of this 
 <code>Calendar</code> becomes that all the calendar fields are in sync
  with the time value (millisecond offset from the Epoch).
 @param fieldMask the field mask indicating which calendar fields are in  sync with the time value.
 @throw IndexOutOfBoundsExceptionif the specified
                 <code>field</code> is out of range
                (<code>field &lt; 0 || field &gt;= FIELD_COUNT</code>).
 - seealso: #isExternallySet(int)
 - seealso: #selectFields()
 */
- (void)setFieldsNormalizedWithInt:(jint)fieldMask;

/*!
 @brief Marks this Calendar as not sync'd.
 */
- (void)setUnnormalized;

/*!
 @brief Sets the sharedZone flag to <code>shared</code>.
 */
- (void)setZoneSharedWithBoolean:(jboolean)shared;

@end

J2OBJC_STATIC_INIT(JavaUtilCalendar)

J2OBJC_FIELD_SETTER(JavaUtilCalendar, fields_, IOSIntArray *)
J2OBJC_FIELD_SETTER(JavaUtilCalendar, isSet_, IOSBooleanArray *)

/*!
 @brief Field number for <code>get</code> and <code>set</code> indicating the
  era, e.g., AD or BC in the Julian calendar.This is a calendar-specific
  value; see subclass documentation.
 - seealso: GregorianCalendar#AD
 - seealso: GregorianCalendar#BC
 */
inline jint JavaUtilCalendar_get_ERA(void);
#define JavaUtilCalendar_ERA 0
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, ERA, jint)

/*!
 @brief Field number for <code>get</code> and <code>set</code> indicating the
  year.This is a calendar-specific value; see subclass documentation.
 */
inline jint JavaUtilCalendar_get_YEAR(void);
#define JavaUtilCalendar_YEAR 1
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, YEAR, jint)

/*!
 @brief Field number for <code>get</code> and <code>set</code> indicating the
  month.This is a calendar-specific value.
 The first month of
  the year in the Gregorian and Julian calendars is 
 <code>JANUARY</code> which is 0; the last depends on the number
  of months in a year.
 - seealso: #JANUARY
 - seealso: #FEBRUARY
 - seealso: #MARCH
 - seealso: #APRIL
 - seealso: #MAY
 - seealso: #JUNE
 - seealso: #JULY
 - seealso: #AUGUST
 - seealso: #SEPTEMBER
 - seealso: #OCTOBER
 - seealso: #NOVEMBER
 - seealso: #DECEMBER
 - seealso: #UNDECIMBER
 */
inline jint JavaUtilCalendar_get_MONTH(void);
#define JavaUtilCalendar_MONTH 2
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, MONTH, jint)

/*!
 @brief Field number for <code>get</code> and <code>set</code> indicating the
  week number within the current year.The first week of the year, as
  defined by <code>getFirstDayOfWeek()</code> and 
 <code>getMinimalDaysInFirstWeek()</code>, has value 1.
 Subclasses define
  the value of <code>WEEK_OF_YEAR</code> for days before the first week of
  the year.
 - seealso: #getFirstDayOfWeek
 - seealso: #getMinimalDaysInFirstWeek
 */
inline jint JavaUtilCalendar_get_WEEK_OF_YEAR(void);
#define JavaUtilCalendar_WEEK_OF_YEAR 3
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, WEEK_OF_YEAR, jint)

/*!
 @brief Field number for <code>get</code> and <code>set</code> indicating the
  week number within the current month.The first week of the month, as
  defined by <code>getFirstDayOfWeek()</code> and 
 <code>getMinimalDaysInFirstWeek()</code>, has value 1.
 Subclasses define
  the value of <code>WEEK_OF_MONTH</code> for days before the first week of
  the month.
 - seealso: #getFirstDayOfWeek
 - seealso: #getMinimalDaysInFirstWeek
 */
inline jint JavaUtilCalendar_get_WEEK_OF_MONTH(void);
#define JavaUtilCalendar_WEEK_OF_MONTH 4
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, WEEK_OF_MONTH, jint)

/*!
 @brief Field number for <code>get</code> and <code>set</code> indicating the
  day of the month.This is a synonym for <code>DAY_OF_MONTH</code>.
 The first day of the month has value 1.
 - seealso: #DAY_OF_MONTH
 */
inline jint JavaUtilCalendar_get_DATE(void);
#define JavaUtilCalendar_DATE 5
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, DATE, jint)

/*!
 @brief Field number for <code>get</code> and <code>set</code> indicating the
  day of the month.This is a synonym for <code>DATE</code>.
 The first day of the month has value 1.
 - seealso: #DATE
 */
inline jint JavaUtilCalendar_get_DAY_OF_MONTH(void);
#define JavaUtilCalendar_DAY_OF_MONTH 5
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, DAY_OF_MONTH, jint)

/*!
 @brief Field number for <code>get</code> and <code>set</code> indicating the day
  number within the current year.The first day of the year has value 1.
 */
inline jint JavaUtilCalendar_get_DAY_OF_YEAR(void);
#define JavaUtilCalendar_DAY_OF_YEAR 6
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, DAY_OF_YEAR, jint)

/*!
 @brief Field number for <code>get</code> and <code>set</code> indicating the day
  of the week.This field takes values <code>SUNDAY</code>,
  <code>MONDAY</code>, <code>TUESDAY</code>, <code>WEDNESDAY</code>,
  <code>THURSDAY</code>, <code>FRIDAY</code>, and <code>SATURDAY</code>.
 - seealso: #SUNDAY
 - seealso: #MONDAY
 - seealso: #TUESDAY
 - seealso: #WEDNESDAY
 - seealso: #THURSDAY
 - seealso: #FRIDAY
 - seealso: #SATURDAY
 */
inline jint JavaUtilCalendar_get_DAY_OF_WEEK(void);
#define JavaUtilCalendar_DAY_OF_WEEK 7
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, DAY_OF_WEEK, jint)

/*!
 @brief Field number for <code>get</code> and <code>set</code> indicating the
  ordinal number of the day of the week within the current month.Together
  with the <code>DAY_OF_WEEK</code> field, this uniquely specifies a day
  within a month.
 Unlike <code>WEEK_OF_MONTH</code> and 
 <code>WEEK_OF_YEAR</code>, this field's value does <em>not</em> depend on 
 <code>getFirstDayOfWeek()</code> or 
 <code>getMinimalDaysInFirstWeek()</code>.  <code>DAY_OF_MONTH 1</code>
  through <code>7</code> always correspond to <code>DAY_OF_WEEK_IN_MONTH
  1</code>; <code>8</code> through <code>14</code> correspond to 
 <code>DAY_OF_WEEK_IN_MONTH 2</code>, and so on. 
 <code>DAY_OF_WEEK_IN_MONTH 0</code> indicates the week before 
 <code>DAY_OF_WEEK_IN_MONTH 1</code>.  Negative values count back from the
  end of the month, so the last Sunday of a month is specified as 
 <code>DAY_OF_WEEK = SUNDAY, DAY_OF_WEEK_IN_MONTH = -1</code>.  Because
  negative values count backward they will usually be aligned differently
  within the month than positive values.  For example, if a month has 31
  days, <code>DAY_OF_WEEK_IN_MONTH -1</code> will overlap 
 <code>DAY_OF_WEEK_IN_MONTH 5</code> and the end of <code>4</code>.
 - seealso: #DAY_OF_WEEK
 - seealso: #WEEK_OF_MONTH
 */
inline jint JavaUtilCalendar_get_DAY_OF_WEEK_IN_MONTH(void);
#define JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH 8
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, DAY_OF_WEEK_IN_MONTH, jint)

/*!
 @brief Field number for <code>get</code> and <code>set</code> indicating
  whether the <code>HOUR</code> is before or after noon.
 E.g., at 10:04:15.250 PM the <code>AM_PM</code> is <code>PM</code>.
 - seealso: #AM
 - seealso: #PM
 - seealso: #HOUR
 */
inline jint JavaUtilCalendar_get_AM_PM(void);
#define JavaUtilCalendar_AM_PM 9
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, AM_PM, jint)

/*!
 @brief Field number for <code>get</code> and <code>set</code> indicating the
  hour of the morning or afternoon.
 <code>HOUR</code> is used for the
  12-hour clock (0 - 11). Noon and midnight are represented by 0, not by 12.
  E.g., at 10:04:15.250 PM the <code>HOUR</code> is 10.
 - seealso: #AM_PM
 - seealso: #HOUR_OF_DAY
 */
inline jint JavaUtilCalendar_get_HOUR(void);
#define JavaUtilCalendar_HOUR 10
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, HOUR, jint)

/*!
 @brief Field number for <code>get</code> and <code>set</code> indicating the
  hour of the day.
 <code>HOUR_OF_DAY</code> is used for the 24-hour clock.
  E.g., at 10:04:15.250 PM the <code>HOUR_OF_DAY</code> is 22.
 - seealso: #HOUR
 */
inline jint JavaUtilCalendar_get_HOUR_OF_DAY(void);
#define JavaUtilCalendar_HOUR_OF_DAY 11
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, HOUR_OF_DAY, jint)

/*!
 @brief Field number for <code>get</code> and <code>set</code> indicating the
  minute within the hour.
 E.g., at 10:04:15.250 PM the <code>MINUTE</code> is 4.
 */
inline jint JavaUtilCalendar_get_MINUTE(void);
#define JavaUtilCalendar_MINUTE 12
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, MINUTE, jint)

/*!
 @brief Field number for <code>get</code> and <code>set</code> indicating the
  second within the minute.
 E.g., at 10:04:15.250 PM the <code>SECOND</code> is 15.
 */
inline jint JavaUtilCalendar_get_SECOND(void);
#define JavaUtilCalendar_SECOND 13
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, SECOND, jint)

/*!
 @brief Field number for <code>get</code> and <code>set</code> indicating the
  millisecond within the second.
 E.g., at 10:04:15.250 PM the <code>MILLISECOND</code> is 250.
 */
inline jint JavaUtilCalendar_get_MILLISECOND(void);
#define JavaUtilCalendar_MILLISECOND 14
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, MILLISECOND, jint)

/*!
 @brief Field number for <code>get</code> and <code>set</code>
  indicating the raw offset from GMT in milliseconds.
 <p>
  This field reflects the correct GMT offset value of the time
  zone of this <code>Calendar</code> if the 
 <code>TimeZone</code> implementation subclass supports
  historical GMT offset changes.
 */
inline jint JavaUtilCalendar_get_ZONE_OFFSET(void);
#define JavaUtilCalendar_ZONE_OFFSET 15
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, ZONE_OFFSET, jint)

/*!
 @brief Field number for <code>get</code> and <code>set</code> indicating the
  daylight saving offset in milliseconds.
 <p>
  This field reflects the correct daylight saving offset value of
  the time zone of this <code>Calendar</code> if the 
 <code>TimeZone</code> implementation subclass supports
  historical Daylight Saving Time schedule changes.
 */
inline jint JavaUtilCalendar_get_DST_OFFSET(void);
#define JavaUtilCalendar_DST_OFFSET 16
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, DST_OFFSET, jint)

/*!
 @brief The number of distinct fields recognized by <code>get</code> and <code>set</code>.
 Field numbers range from <code>0..FIELD_COUNT-1</code>.
 */
inline jint JavaUtilCalendar_get_FIELD_COUNT(void);
#define JavaUtilCalendar_FIELD_COUNT 17
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, FIELD_COUNT, jint)

/*!
 @brief Value of the <code>DAY_OF_WEEK</code> field indicating
  Sunday.
 */
inline jint JavaUtilCalendar_get_SUNDAY(void);
#define JavaUtilCalendar_SUNDAY 1
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, SUNDAY, jint)

/*!
 @brief Value of the <code>DAY_OF_WEEK</code> field indicating
  Monday.
 */
inline jint JavaUtilCalendar_get_MONDAY(void);
#define JavaUtilCalendar_MONDAY 2
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, MONDAY, jint)

/*!
 @brief Value of the <code>DAY_OF_WEEK</code> field indicating
  Tuesday.
 */
inline jint JavaUtilCalendar_get_TUESDAY(void);
#define JavaUtilCalendar_TUESDAY 3
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, TUESDAY, jint)

/*!
 @brief Value of the <code>DAY_OF_WEEK</code> field indicating
  Wednesday.
 */
inline jint JavaUtilCalendar_get_WEDNESDAY(void);
#define JavaUtilCalendar_WEDNESDAY 4
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, WEDNESDAY, jint)

/*!
 @brief Value of the <code>DAY_OF_WEEK</code> field indicating
  Thursday.
 */
inline jint JavaUtilCalendar_get_THURSDAY(void);
#define JavaUtilCalendar_THURSDAY 5
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, THURSDAY, jint)

/*!
 @brief Value of the <code>DAY_OF_WEEK</code> field indicating
  Friday.
 */
inline jint JavaUtilCalendar_get_FRIDAY(void);
#define JavaUtilCalendar_FRIDAY 6
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, FRIDAY, jint)

/*!
 @brief Value of the <code>DAY_OF_WEEK</code> field indicating
  Saturday.
 */
inline jint JavaUtilCalendar_get_SATURDAY(void);
#define JavaUtilCalendar_SATURDAY 7
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, SATURDAY, jint)

/*!
 @brief Value of the <code>MONTH</code> field indicating the
  first month of the year in the Gregorian and Julian calendars.
 */
inline jint JavaUtilCalendar_get_JANUARY(void);
#define JavaUtilCalendar_JANUARY 0
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, JANUARY, jint)

/*!
 @brief Value of the <code>MONTH</code> field indicating the
  second month of the year in the Gregorian and Julian calendars.
 */
inline jint JavaUtilCalendar_get_FEBRUARY(void);
#define JavaUtilCalendar_FEBRUARY 1
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, FEBRUARY, jint)

/*!
 @brief Value of the <code>MONTH</code> field indicating the
  third month of the year in the Gregorian and Julian calendars.
 */
inline jint JavaUtilCalendar_get_MARCH(void);
#define JavaUtilCalendar_MARCH 2
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, MARCH, jint)

/*!
 @brief Value of the <code>MONTH</code> field indicating the
  fourth month of the year in the Gregorian and Julian calendars.
 */
inline jint JavaUtilCalendar_get_APRIL(void);
#define JavaUtilCalendar_APRIL 3
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, APRIL, jint)

/*!
 @brief Value of the <code>MONTH</code> field indicating the
  fifth month of the year in the Gregorian and Julian calendars.
 */
inline jint JavaUtilCalendar_get_MAY(void);
#define JavaUtilCalendar_MAY 4
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, MAY, jint)

/*!
 @brief Value of the <code>MONTH</code> field indicating the
  sixth month of the year in the Gregorian and Julian calendars.
 */
inline jint JavaUtilCalendar_get_JUNE(void);
#define JavaUtilCalendar_JUNE 5
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, JUNE, jint)

/*!
 @brief Value of the <code>MONTH</code> field indicating the
  seventh month of the year in the Gregorian and Julian calendars.
 */
inline jint JavaUtilCalendar_get_JULY(void);
#define JavaUtilCalendar_JULY 6
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, JULY, jint)

/*!
 @brief Value of the <code>MONTH</code> field indicating the
  eighth month of the year in the Gregorian and Julian calendars.
 */
inline jint JavaUtilCalendar_get_AUGUST(void);
#define JavaUtilCalendar_AUGUST 7
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, AUGUST, jint)

/*!
 @brief Value of the <code>MONTH</code> field indicating the
  ninth month of the year in the Gregorian and Julian calendars.
 */
inline jint JavaUtilCalendar_get_SEPTEMBER(void);
#define JavaUtilCalendar_SEPTEMBER 8
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, SEPTEMBER, jint)

/*!
 @brief Value of the <code>MONTH</code> field indicating the
  tenth month of the year in the Gregorian and Julian calendars.
 */
inline jint JavaUtilCalendar_get_OCTOBER(void);
#define JavaUtilCalendar_OCTOBER 9
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, OCTOBER, jint)

/*!
 @brief Value of the <code>MONTH</code> field indicating the
  eleventh month of the year in the Gregorian and Julian calendars.
 */
inline jint JavaUtilCalendar_get_NOVEMBER(void);
#define JavaUtilCalendar_NOVEMBER 10
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, NOVEMBER, jint)

/*!
 @brief Value of the <code>MONTH</code> field indicating the
  twelfth month of the year in the Gregorian and Julian calendars.
 */
inline jint JavaUtilCalendar_get_DECEMBER(void);
#define JavaUtilCalendar_DECEMBER 11
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, DECEMBER, jint)

/*!
 @brief Value of the <code>MONTH</code> field indicating the
  thirteenth month of the year.Although <code>GregorianCalendar</code>
  does not use this value, lunar calendars do.
 */
inline jint JavaUtilCalendar_get_UNDECIMBER(void);
#define JavaUtilCalendar_UNDECIMBER 12
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, UNDECIMBER, jint)

/*!
 @brief Value of the <code>AM_PM</code> field indicating the
  period of the day from midnight to just before noon.
 */
inline jint JavaUtilCalendar_get_AM(void);
#define JavaUtilCalendar_AM 0
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, AM, jint)

/*!
 @brief Value of the <code>AM_PM</code> field indicating the
  period of the day from noon to just before midnight.
 */
inline jint JavaUtilCalendar_get_PM(void);
#define JavaUtilCalendar_PM 1
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, PM, jint)

/*!
 @brief A style specifier for <code>getDisplayNames</code>
  indicating names in all styles, such as
  "January" and "Jan".
 - seealso: #SHORT_FORMAT
 - seealso: #LONG_FORMAT
 - seealso: #SHORT_STANDALONE
 - seealso: #LONG_STANDALONE
 - seealso: #SHORT
 - seealso: #LONG
 @since 1.6
 */
inline jint JavaUtilCalendar_get_ALL_STYLES(void);
#define JavaUtilCalendar_ALL_STYLES 0
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, ALL_STYLES, jint)

inline jint JavaUtilCalendar_get_STANDALONE_MASK(void);
#define JavaUtilCalendar_STANDALONE_MASK 32768
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, STANDALONE_MASK, jint)

/*!
 @brief A style specifier for <code>getDisplayName</code>
  and <code>getDisplayNames</code>
  equivalent to <code>SHORT_FORMAT</code>.
 - seealso: #SHORT_STANDALONE
 - seealso: #LONG
 @since 1.6
 */
inline jint JavaUtilCalendar_get_SHORT(void);
#define JavaUtilCalendar_SHORT 1
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, SHORT, jint)

/*!
 @brief A style specifier for <code>getDisplayName</code>
  and <code>getDisplayNames</code>
  equivalent to <code>LONG_FORMAT</code>.
 - seealso: #LONG_STANDALONE
 - seealso: #SHORT
 @since 1.6
 */
inline jint JavaUtilCalendar_get_LONG(void);
#define JavaUtilCalendar_LONG 2
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, LONG, jint)

/*!
 @brief A style specifier for <code>getDisplayName</code>
  and <code>getDisplayNames</code>
  indicating a narrow name used for format.Narrow names
  are typically single character strings, such as "M" for Monday.
 - seealso: #NARROW_STANDALONE
 - seealso: #SHORT_FORMAT
 - seealso: #LONG_FORMAT
 @since 1.8
 */
inline jint JavaUtilCalendar_get_NARROW_FORMAT(void);
#define JavaUtilCalendar_NARROW_FORMAT 4
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, NARROW_FORMAT, jint)

/*!
 @brief A style specifier for <code>getDisplayName</code>
  and <code>getDisplayNames</code>
  indicating a narrow name independently.Narrow names
  are typically single character strings, such as "M" for Monday.
 - seealso: #NARROW_FORMAT
 - seealso: #SHORT_STANDALONE
 - seealso: #LONG_STANDALONE
 @since 1.8
 */
inline jint JavaUtilCalendar_get_NARROW_STANDALONE(void);
#define JavaUtilCalendar_NARROW_STANDALONE 32772
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, NARROW_STANDALONE, jint)

/*!
 @brief A style specifier for <code>getDisplayName</code>
  and <code>getDisplayNames</code>
  indicating a short name used for format.
 - seealso: #SHORT_STANDALONE
 - seealso: #LONG_FORMAT
 - seealso: #LONG_STANDALONE
 @since 1.8
 */
inline jint JavaUtilCalendar_get_SHORT_FORMAT(void);
#define JavaUtilCalendar_SHORT_FORMAT 1
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, SHORT_FORMAT, jint)

/*!
 @brief A style specifier for <code>getDisplayName</code>
  and <code>getDisplayNames</code>
  indicating a long name used for format.
 - seealso: #LONG_STANDALONE
 - seealso: #SHORT_FORMAT
 - seealso: #SHORT_STANDALONE
 @since 1.8
 */
inline jint JavaUtilCalendar_get_LONG_FORMAT(void);
#define JavaUtilCalendar_LONG_FORMAT 2
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, LONG_FORMAT, jint)

/*!
 @brief A style specifier for <code>getDisplayName</code>
  and <code>getDisplayNames</code>
  indicating a short name used independently,
  such as a month abbreviation as calendar headers.
 - seealso: #SHORT_FORMAT
 - seealso: #LONG_FORMAT
 - seealso: #LONG_STANDALONE
 @since 1.8
 */
inline jint JavaUtilCalendar_get_SHORT_STANDALONE(void);
#define JavaUtilCalendar_SHORT_STANDALONE 32769
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, SHORT_STANDALONE, jint)

/*!
 @brief A style specifier for <code>getDisplayName</code>
  and <code>getDisplayNames</code>
  indicating a long name used independently,
  such as a month name as calendar headers.
 - seealso: #LONG_FORMAT
 - seealso: #SHORT_FORMAT
 - seealso: #SHORT_STANDALONE
 @since 1.8
 */
inline jint JavaUtilCalendar_get_LONG_STANDALONE(void);
#define JavaUtilCalendar_LONG_STANDALONE 32770
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, LONG_STANDALONE, jint)

/*!
 @brief The mask value that represents all of the fields.
 */
inline jint JavaUtilCalendar_get_ALL_FIELDS(void);
#define JavaUtilCalendar_ALL_FIELDS 131071
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, ALL_FIELDS, jint)

inline jint JavaUtilCalendar_get_currentSerialVersion(void);
#define JavaUtilCalendar_currentSerialVersion 1
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, currentSerialVersion, jint)

inline jlong JavaUtilCalendar_get_serialVersionUID(void);
#define JavaUtilCalendar_serialVersionUID -1807547505821590642LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, serialVersionUID, jlong)

inline jint JavaUtilCalendar_get_ERA_MASK(void);
#define JavaUtilCalendar_ERA_MASK 1
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, ERA_MASK, jint)

inline jint JavaUtilCalendar_get_YEAR_MASK(void);
#define JavaUtilCalendar_YEAR_MASK 2
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, YEAR_MASK, jint)

inline jint JavaUtilCalendar_get_MONTH_MASK(void);
#define JavaUtilCalendar_MONTH_MASK 4
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, MONTH_MASK, jint)

inline jint JavaUtilCalendar_get_WEEK_OF_YEAR_MASK(void);
#define JavaUtilCalendar_WEEK_OF_YEAR_MASK 8
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, WEEK_OF_YEAR_MASK, jint)

inline jint JavaUtilCalendar_get_WEEK_OF_MONTH_MASK(void);
#define JavaUtilCalendar_WEEK_OF_MONTH_MASK 16
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, WEEK_OF_MONTH_MASK, jint)

inline jint JavaUtilCalendar_get_DAY_OF_MONTH_MASK(void);
#define JavaUtilCalendar_DAY_OF_MONTH_MASK 32
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, DAY_OF_MONTH_MASK, jint)

inline jint JavaUtilCalendar_get_DATE_MASK(void);
#define JavaUtilCalendar_DATE_MASK 32
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, DATE_MASK, jint)

inline jint JavaUtilCalendar_get_DAY_OF_YEAR_MASK(void);
#define JavaUtilCalendar_DAY_OF_YEAR_MASK 64
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, DAY_OF_YEAR_MASK, jint)

inline jint JavaUtilCalendar_get_DAY_OF_WEEK_MASK(void);
#define JavaUtilCalendar_DAY_OF_WEEK_MASK 128
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, DAY_OF_WEEK_MASK, jint)

inline jint JavaUtilCalendar_get_DAY_OF_WEEK_IN_MONTH_MASK(void);
#define JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH_MASK 256
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, DAY_OF_WEEK_IN_MONTH_MASK, jint)

inline jint JavaUtilCalendar_get_AM_PM_MASK(void);
#define JavaUtilCalendar_AM_PM_MASK 512
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, AM_PM_MASK, jint)

inline jint JavaUtilCalendar_get_HOUR_MASK(void);
#define JavaUtilCalendar_HOUR_MASK 1024
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, HOUR_MASK, jint)

inline jint JavaUtilCalendar_get_HOUR_OF_DAY_MASK(void);
#define JavaUtilCalendar_HOUR_OF_DAY_MASK 2048
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, HOUR_OF_DAY_MASK, jint)

inline jint JavaUtilCalendar_get_MINUTE_MASK(void);
#define JavaUtilCalendar_MINUTE_MASK 4096
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, MINUTE_MASK, jint)

inline jint JavaUtilCalendar_get_SECOND_MASK(void);
#define JavaUtilCalendar_SECOND_MASK 8192
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, SECOND_MASK, jint)

inline jint JavaUtilCalendar_get_MILLISECOND_MASK(void);
#define JavaUtilCalendar_MILLISECOND_MASK 16384
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, MILLISECOND_MASK, jint)

inline jint JavaUtilCalendar_get_ZONE_OFFSET_MASK(void);
#define JavaUtilCalendar_ZONE_OFFSET_MASK 32768
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, ZONE_OFFSET_MASK, jint)

inline jint JavaUtilCalendar_get_DST_OFFSET_MASK(void);
#define JavaUtilCalendar_DST_OFFSET_MASK 65536
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilCalendar, DST_OFFSET_MASK, jint)

FOUNDATION_EXPORT void JavaUtilCalendar_init(JavaUtilCalendar *self);

FOUNDATION_EXPORT void JavaUtilCalendar_initWithJavaUtilTimeZone_withJavaUtilLocale_(JavaUtilCalendar *self, JavaUtilTimeZone *zone, JavaUtilLocale *aLocale);

FOUNDATION_EXPORT JavaUtilCalendar *JavaUtilCalendar_getInstance(void);

FOUNDATION_EXPORT JavaUtilCalendar *JavaUtilCalendar_getInstanceWithJavaUtilTimeZone_(JavaUtilTimeZone *zone);

FOUNDATION_EXPORT JavaUtilCalendar *JavaUtilCalendar_getInstanceWithJavaUtilLocale_(JavaUtilLocale *aLocale);

FOUNDATION_EXPORT JavaUtilCalendar *JavaUtilCalendar_getInstanceWithJavaUtilTimeZone_withJavaUtilLocale_(JavaUtilTimeZone *zone, JavaUtilLocale *aLocale);

FOUNDATION_EXPORT IOSObjectArray *JavaUtilCalendar_getAvailableLocales(void);

FOUNDATION_EXPORT jboolean JavaUtilCalendar_isFieldSetWithInt_withInt_(jint fieldMask, jint field);

FOUNDATION_EXPORT id<JavaUtilSet> JavaUtilCalendar_getAvailableCalendarTypes(void);

FOUNDATION_EXPORT NSString *JavaUtilCalendar_getFieldNameWithInt_(jint field);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilCalendar)

#endif

#if !defined (JavaUtilCalendar_Builder_) && (INCLUDE_ALL_JavaUtilCalendar || defined(INCLUDE_JavaUtilCalendar_Builder))
#define JavaUtilCalendar_Builder_

@class IOSIntArray;
@class JavaUtilCalendar;
@class JavaUtilDate;
@class JavaUtilLocale;
@class JavaUtilTimeZone;

/*!
 @brief <code>Calendar.Builder</code> is used for creating a <code>Calendar</code> from
  various date-time parameters.
 <p>There are two ways to set a <code>Calendar</code> to a date-time value. One
  is to set the instant parameter to a millisecond offset from the <a href="Calendar.html#Epoch">
 Epoch</a>. The other is to set individual
  field parameters, such as <code>YEAR</code>, to their desired
  values. These two ways can't be mixed. Trying to set both the instant and
  individual fields will cause an <code>IllegalStateException</code> to be
  thrown. However, it is permitted to override previous values of the
  instant or field parameters. 
 <p>If no enough field parameters are given for determining date and/or
  time, calendar specific default values are used when building a 
 <code>Calendar</code>. For example, if the <code>YEAR</code> value
  isn't given for the Gregorian calendar, 1970 will be used. If there are
  any conflicts among field parameters, the <a href="Calendar.html#resolution">
  resolution rules</a> are applied.
  Therefore, the order of field setting matters. 
 <p>In addition to the date-time parameters, the 
 locale,
  time zone,
  week definition, and 
 leniency mode parameters can be set. 
 <p><b>Examples</b>
  <p>The following are sample usages. Sample code assumes that the 
 <code>Calendar</code> constants are statically imported. 
 <p>The following code produces a <code>Calendar</code> with date 2012-12-31
  (Gregorian) because Monday is the first day of a week with the <a href="GregorianCalendar.html#iso8601_compatible_setting">
  ISO 8601
  compatible week parameters</a>.
  @code

    Calendar cal = new Calendar.Builder().setCalendarType("iso8601")
                         .setWeekDate(2013, 1, MONDAY).build();
@endcode
  <p>The following code produces a Japanese <code>Calendar</code> with date
  1989-01-08 (Gregorian), assuming that the default <code>ERA</code>
  is <em>Heisei</em> that started on that day. 
 @code

    Calendar cal = new Calendar.Builder().setCalendarType("japanese")
                         .setFields(YEAR, 1, DAY_OF_YEAR, 1).build();
@endcode
 @since 1.8
 - seealso: Calendar#getInstance(TimeZone, Locale)
 - seealso: Calendar#fields
 */
@interface JavaUtilCalendar_Builder : NSObject

#pragma mark Public

/*!
 @brief Constructs a <code>Calendar.Builder</code>.
 */
- (instancetype __nonnull)init;

/*!
 @brief Returns a <code>Calendar</code> built from the parameters set by the
  setter methods.The calendar type given by the <code>setCalendarType</code>
  method or the locale is
  used to determine what <code>Calendar</code> to be created.
 If no explicit
  calendar type is given, the locale's default calendar is created. 
 <p>If the calendar type is <code>"iso8601"</code>, the 
 Gregorian change date
  of a <code>GregorianCalendar</code> is set to <code>Date(Long.MIN_VALUE)</code>
  to be the <em>proleptic</em> Gregorian calendar. Its week definition
  parameters are also set to be <a href="GregorianCalendar.html#iso8601_compatible_setting">
 compatible
  with the ISO 8601 standard</a>. Note that the 
 <code>getCalendarType</code> method of
  a <code>GregorianCalendar</code> created with <code>"iso8601"</code> returns 
 <code>"gregory"</code>.
  
 <p>The default values are used for locale and time zone if these
  parameters haven't been given explicitly. 
 <p>Any out of range field values are either normalized in lenient
  mode or detected as an invalid value in non-lenient mode.
 @return a <code>Calendar</code> built with parameters of this <code>Calendar.Builder</code>
 @throw IllegalArgumentExceptionif the calendar type is unknown, or
              if any invalid field values are given in non-lenient mode, or
              if a week date is given for the calendar type that doesn't
              support week dates.
 - seealso: Calendar#getInstance(TimeZone, Locale)
 - seealso: Locale#getDefault(Locale.Category)
 - seealso: TimeZone#getDefault()
 */
- (JavaUtilCalendar * __nonnull)build;

/*!
 @brief Sets the <code>field</code> parameter to the given <code>value</code>.
 <code>field</code> is an index to the <code>Calendar.fields</code>, such as 
 <code>DAY_OF_MONTH</code>. Field value validation is
  not performed in this method. Any out of range values are either
  normalized in lenient mode or detected as an invalid value in
  non-lenient mode when building a <code>Calendar</code>.
 @param field an index to the <code>Calendar</code>  fields
 @param value the field value
 @return this <code>Calendar.Builder</code>
 @throw IllegalArgumentExceptionif <code>field</code> is invalid
 @throw IllegalStateExceptionif the instant value has already been set,
                       or if fields have been set too many
                       (approximately <code>Integer.MAX_VALUE</code>) times.
 - seealso: Calendar#set(int, int)
 */
- (JavaUtilCalendar_Builder * __nonnull)setWithInt:(jint)field
                                           withInt:(jint)value;

/*!
 @brief Sets the calendar type parameter to the given <code>type</code>.The
  calendar type given by this method has precedence over any explicit
  or implicit calendar type given by the 
 locale.
 <p>In addition to the available calendar types returned by the 
 <code>Calendar.getAvailableCalendarTypes</code>
  method, <code>"gregorian"</code> and <code>"iso8601"</code> as aliases of 
 <code>"gregory"</code> can be used with this method.
 @param type the calendar type
 @return this <code>Calendar.Builder</code>
 @throw NullPointerExceptionif <code>type</code> is <code>null</code>
 @throw IllegalArgumentExceptionif <code>type</code> is unknown
 @throw IllegalStateExceptionif another calendar type has already been set
 - seealso: Calendar#getCalendarType()
 - seealso: Calendar#getAvailableCalendarTypes()
 */
- (JavaUtilCalendar_Builder * __nonnull)setCalendarTypeWithNSString:(NSString *)type;

/*!
 @brief Sets the date field parameters to the values given by <code>year</code>,
  <code>month</code>, and <code>dayOfMonth</code>.This method is equivalent to
  a call to: 
 @code

    setFields(Calendar.YEAR, year,
              Calendar.MONTH, month,
              Calendar.DAY_OF_MONTH, dayOfMonth);
@endcode
 @param year the <code>YEAR</code>  value
 @param month the <code>MONTH</code>  value                    (the month numbering is 
  <em> 0-based </em> ).
 @param dayOfMonth the <code>DAY_OF_MONTH</code>  value
 @return this <code>Calendar.Builder</code>
 */
- (JavaUtilCalendar_Builder * __nonnull)setDateWithInt:(jint)year
                                               withInt:(jint)month
                                               withInt:(jint)dayOfMonth;

/*!
 @brief Sets field parameters to their values given by 
 <code>fieldValuePairs</code> that are pairs of a field and its value.
 For example, 
 @code

    setFields(Calendar.YEAR, 2013,
              Calendar.MONTH, Calendar.DECEMBER,
              Calendar.DAY_OF_MONTH, 23);
@endcode
  is equivalent to the sequence of the following 
 <code>set</code> calls: 
 @code

    set(Calendar.YEAR, 2013)
    .set(Calendar.MONTH, Calendar.DECEMBER)
    .set(Calendar.DAY_OF_MONTH, 23);
@endcode
 @param fieldValuePairs field-value pairs
 @return this <code>Calendar.Builder</code>
 @throw NullPointerExceptionif <code>fieldValuePairs</code> is <code>null</code>
 @throw IllegalArgumentExceptionif any of fields are invalid,
              or if <code>fieldValuePairs.length</code> is an odd number.
 @throw IllegalStateExceptionif the instant value has been set,
              or if fields have been set too many (approximately             
 <code>Integer.MAX_VALUE</code>) times.
 */
- (JavaUtilCalendar_Builder * __nonnull)setFieldsWithIntArray:(IOSIntArray *)fieldValuePairs;

/*!
 @brief Sets the instant parameter to the <code>instant</code> value given by a 
 <code>Date</code>.This method is equivalent to a call to 
 <code>setInstant(instant.getTime())</code>.
 @param instant a <code>Date</code>  representing a millisecond offset from
                  the Epoch
 @return this <code>Calendar.Builder</code>
 @throw NullPointerExceptionif <code>instant</code> is <code>null</code>
 @throw IllegalStateExceptionif any of the field parameters have
                                already been set
 - seealso: Calendar#setTime(Date)
 - seealso: Calendar#setTimeInMillis(long)
 - seealso: Calendar#time
 */
- (JavaUtilCalendar_Builder * __nonnull)setInstantWithJavaUtilDate:(JavaUtilDate *)instant;

/*!
 @brief Sets the instant parameter to the given <code>instant</code> value that is
  a millisecond offset from <a href="Calendar.html#Epoch">the
  Epoch</a>.
 @param instant a millisecond offset from the Epoch
 @return this <code>Calendar.Builder</code>
 @throw IllegalStateExceptionif any of the field parameters have
                                already been set
 - seealso: Calendar#setTime(Date)
 - seealso: Calendar#setTimeInMillis(long)
 - seealso: Calendar#time
 */
- (JavaUtilCalendar_Builder * __nonnull)setInstantWithLong:(jlong)instant;

/*!
 @brief Sets the lenient mode parameter to the value given by <code>lenient</code>.
 If no lenient parameter is given to this <code>Calendar.Builder</code>,
  lenient mode will be used in the <code>build</code> method.
 @param lenient<code>true</code>  for lenient mode;                 
 <code>false</code>  for non-lenient mode
 @return this <code>Calendar.Builder</code>
 - seealso: Calendar#setLenient(boolean)
 */
- (JavaUtilCalendar_Builder * __nonnull)setLenientWithBoolean:(jboolean)lenient;

/*!
 @brief Sets the locale parameter to the given <code>locale</code>.If no locale
  is given to this <code>Calendar.Builder</code>, the default <code>Locale</code>
  for <code>Locale.Category.FORMAT</code> will be used.
 <p>If no calendar type is explicitly given by a call to the 
 <code>setCalendarType</code> method,
  the <code>Locale</code> value is used to determine what type of 
 <code>Calendar</code> to be built. 
 <p>If no week definition parameters are explicitly given by a call to
  the <code>setWeekDefinition</code> method, the 
 <code>Locale</code>'s default values are used.
 @param locale the <code>Locale</code>
 @throw NullPointerExceptionif <code>locale</code> is <code>null</code>
 @return this <code>Calendar.Builder</code>
 - seealso: Calendar#getInstance(Locale)
 */
- (JavaUtilCalendar_Builder * __nonnull)setLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Sets the time of day field parameters to the values given by 
 <code>hourOfDay</code>, <code>minute</code>, and <code>second</code>.This method is
  equivalent to a call to: 
 @code

    setTimeOfDay(hourOfDay, minute, second, 0);
@endcode
 @param hourOfDay the <code>HOUR_OF_DAY</code>  value
                    (24-hour clock)
 @param minute the <code>MINUTE</code>  value
 @param second the <code>SECOND</code>  value
 @return this <code>Calendar.Builder</code>
 */
- (JavaUtilCalendar_Builder * __nonnull)setTimeOfDayWithInt:(jint)hourOfDay
                                                    withInt:(jint)minute
                                                    withInt:(jint)second;

/*!
 @brief Sets the time of day field parameters to the values given by 
 <code>hourOfDay</code>, <code>minute</code>, <code>second</code>, and 
 <code>millis</code>.This method is equivalent to a call to: 
 @code

    setFields(Calendar.HOUR_OF_DAY, hourOfDay,
              Calendar.MINUTE, minute,
              Calendar.SECOND, second,
              Calendar.MILLISECOND, millis);
@endcode
 @param hourOfDay the <code>HOUR_OF_DAY</code>  value
                    (24-hour clock)
 @param minute the <code>MINUTE</code>  value
 @param second the <code>SECOND</code>  value
 @param millis the <code>MILLISECOND</code>  value
 @return this <code>Calendar.Builder</code>
 */
- (JavaUtilCalendar_Builder * __nonnull)setTimeOfDayWithInt:(jint)hourOfDay
                                                    withInt:(jint)minute
                                                    withInt:(jint)second
                                                    withInt:(jint)millis;

/*!
 @brief Sets the time zone parameter to the given <code>zone</code>.If no time
  zone parameter is given to this <code>Caledar.Builder</code>, the 
 default
  <code>TimeZone</code>
  will be used in the <code>build</code>
  method.
 @param zone the <code>TimeZone</code>
 @return this <code>Calendar.Builder</code>
 @throw NullPointerExceptionif <code>zone</code> is <code>null</code>
 - seealso: Calendar#setTimeZone(TimeZone)
 */
- (JavaUtilCalendar_Builder * __nonnull)setTimeZoneWithJavaUtilTimeZone:(JavaUtilTimeZone *)zone;

/*!
 @brief Sets the week-based date parameters to the values with the given
  date specifiers - week year, week of year, and day of week.
 <p>If the specified calendar doesn't support week dates, the 
 <code>build</code> method will throw an <code>IllegalArgumentException</code>.
 @param weekYear the week year
 @param weekOfYear the week number based on <code>weekYear</code>
 @param dayOfWeek the day of week value: one of the constants      for the 
 <code>DAY_OF_WEEK</code>  field:      <code>SUNDAY</code>
  , ..., <code>SATURDAY</code> .
 @return this <code>Calendar.Builder</code>
 - seealso: Calendar#setWeekDate(int, int, int)
 - seealso: Calendar#isWeekDateSupported()
 */
- (JavaUtilCalendar_Builder * __nonnull)setWeekDateWithInt:(jint)weekYear
                                                   withInt:(jint)weekOfYear
                                                   withInt:(jint)dayOfWeek;

/*!
 @brief Sets the week definition parameters to the values given by 
 <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code> that are
  used to determine the <a href="Calendar.html#First_Week">first
  week</a> of a year.The parameters given by this method have
  precedence over the default values given by the 
 locale.
 @param firstDayOfWeek the first day of a week; one of                        
 <code>Calendar.SUNDAY</code>  to <code>Calendar.SATURDAY</code>
 @param minimalDaysInFirstWeek the minimal number of days in the first                                week (1..7)
 @return this <code>Calendar.Builder</code>
 @throw IllegalArgumentExceptionif <code>firstDayOfWeek</code> or
                                   <code>minimalDaysInFirstWeek</code> is invalid
 - seealso: Calendar#getFirstDayOfWeek()
 - seealso: Calendar#getMinimalDaysInFirstWeek()
 */
- (JavaUtilCalendar_Builder * __nonnull)setWeekDefinitionWithInt:(jint)firstDayOfWeek
                                                         withInt:(jint)minimalDaysInFirstWeek;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilCalendar_Builder)

FOUNDATION_EXPORT void JavaUtilCalendar_Builder_init(JavaUtilCalendar_Builder *self);

FOUNDATION_EXPORT JavaUtilCalendar_Builder *new_JavaUtilCalendar_Builder_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilCalendar_Builder *create_JavaUtilCalendar_Builder_init(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilCalendar_Builder)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilCalendar")
