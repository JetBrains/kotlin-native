//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/Formatter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilFormatter")
#ifdef RESTRICT_JavaUtilFormatter
#define INCLUDE_ALL_JavaUtilFormatter 0
#else
#define INCLUDE_ALL_JavaUtilFormatter 1
#endif
#undef RESTRICT_JavaUtilFormatter

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilFormatter_) && (INCLUDE_ALL_JavaUtilFormatter || defined(INCLUDE_JavaUtilFormatter))
#define JavaUtilFormatter_

#define RESTRICT_JavaIoCloseable 1
#define INCLUDE_JavaIoCloseable 1
#include "java/io/Closeable.h"

#define RESTRICT_JavaIoFlushable 1
#define INCLUDE_JavaIoFlushable 1
#include "java/io/Flushable.h"

@class IOSObjectArray;
@class JavaIoFile;
@class JavaIoIOException;
@class JavaIoOutputStream;
@class JavaIoPrintStream;
@class JavaUtilLocale;
@protocol JavaLangAppendable;

/*!
 @brief An interpreter for printf-style format strings.This class provides support
  for layout justification and alignment, common formats for numeric, string,
  and date/time data, and locale-specific output.
 Common Java types such as 
 <code>byte</code>, <code>BigDecimal</code>, and <code>Calendar</code>
  are supported.  Limited formatting customization for arbitrary user types is
  provided through the <code>Formattable</code> interface. 
 <p> Formatters are not necessarily safe for multithreaded access.  Thread
  safety is optional and is the responsibility of users of methods in this
  class. 
 <p> Formatted printing for the Java language is heavily inspired by C's 
 <code>printf</code>.  Although the format strings are similar to C, some
  customizations have been made to accommodate the Java language and exploit
  some of its features.  Also, Java formatting is more strict than C's; for
  example, if a conversion is incompatible with a flag, an exception will be
  thrown.  In C inapplicable flags are silently ignored.  The format strings
  are thus intended to be recognizable to C programmers but not necessarily
  completely compatible with those in C. 
 <p> Examples of expected usage: 
 <blockquote>@code

    StringBuilder sb = new StringBuilder();
    // Send all output to the Appendable object sb
    Formatter formatter = new Formatter(sb, Locale.US);
    // Explicit argument indices may be used to re-order output.
    formatter.format("%4$2s %3$2s %2$2s %1$2s", "a", "b", "c", "d")
    // -&gt; " d  c  b  a"
    // Optional locale as the first argument can be used to get
    // locale-specific formatting of numbers.  The precision and width can be
    // given to round and align the value.
    formatter.format(Locale.FRANCE, "e = %+10.4f", Math.E);
    // -&gt; "e =    +2,7183"
    // The '(' numeric flag may be used to format negative numbers with
    // parentheses rather than a minus sign.  Group separators are
    // automatically inserted.
    formatter.format("Amount gained or lost since last statement: $ %(,.2f",
                     balanceDelta);
    // -&gt; "Amount gained or lost since last statement: $ (6,217.58)" 
  
@endcode</blockquote>
  
 <p> Convenience methods for common formatting requests exist as illustrated
  by the following invocations: 
 <blockquote>@code

    // Writes a formatted string to System.out.
    System.out.format("Local time: %tT", Calendar.getInstance());
    // -&gt; "Local time: 13:34:18"
    // Writes formatted output to System.err.
    System.err.printf("Unable to open file '%1$s': %2$s",
                      fileName, exception.getMessage());
    // -&gt; "Unable to open file 'food': No such file or directory" 
  
@endcode</blockquote>
  
 <p> Like C's <code>sprintf(3)</code>, Strings may be formatted using the static
  method <code>String.format</code>:
  
 <blockquote>@code

    // Format a string containing a date.
    import java.util.Calendar;
    import java.util.GregorianCalendar;
    import static java.util.Calendar.*;
    Calendar c = new GregorianCalendar(1995, MAY, 23);
    String s = String.format("Duke's Birthday: %1$tb %1$te, %1$tY", c);
    // -&gt; s == "Duke's Birthday: May 23, 1995" 
  
@endcode</blockquote>
  
 <h3><a name="org">Organization</a></h3>
  
 <p> This specification is divided into two sections.  The first section, <a href="#summary">
 Summary</a>, covers the basic formatting concepts.  This
  section is intended for users who want to get started quickly and are
  familiar with formatted printing in other programming languages.  The second
  section, <a href="#detail">Details</a>, covers the specific implementation
  details.  It is intended for users who want more precise specification of
  formatting behavior. 
 <h3><a name="summary">Summary</a></h3>
  
 <p> This section is intended to provide a brief overview of formatting
  concepts.  For precise behavioral details, refer to the <a href="#detail">
 Details</a> section. 
 <h4><a name="syntax">Format String Syntax</a></h4>
  
 <p> Every method which produces formatted output requires a <i>format
  string</i> and an <i>argument list</i>.  The format string is a <code>String</code>
  which may contain fixed text and one or more embedded <i>format
  specifiers</i>.  Consider the following example: 
 <blockquote>@code

    Calendar c = ...;
    String s = String.format("Duke's Birthday: %1$tm %1$te,%1$tY", c); 
  
@endcode</blockquote>
  This format string is the first argument to the <code>format</code> method.  It
  contains three format specifiers "<code>%1$tm</code>", "<code>%1$te</code>", and
  "<code>%1$tY</code>" which indicate how the arguments should be processed and
  where they should be inserted in the text.  The remaining portions of the
  format string are fixed text including <code>"Dukes Birthday: "</code> and any
  other spaces or punctuation.
  The argument list consists of all arguments passed to the method after the
  format string.  In the above example, the argument list is of size one and
  consists of the <code>Calendar</code> object <code>c</code>.
  
 <ul>
  
 <li> The format specifiers for general, character, and numeric types have
  the following syntax: 
 <blockquote>@code

    %[argument_index$][flags][width][.precision]conversion 
  
@endcode</blockquote>
  
 <p> The optional <i>argument_index</i> is a decimal integer indicating the
  position of the argument in the argument list.  The first argument is
  referenced by "<code>1$</code>", the second by "<code>2$</code>", etc. 
 <p> The optional <i>flags</i> is a set of characters that modify the output
  format.  The set of valid flags depends on the conversion. 
 <p> The optional <i>width</i> is a positive decimal integer indicating
  the minimum number of characters to be written to the output. 
 <p> The optional <i>precision</i> is a non-negative decimal integer usually
  used to restrict the number of characters.  The specific behavior depends on
  the conversion. 
 <p> The required <i>conversion</i> is a character indicating how the
  argument should be formatted.  The set of valid conversions for a given
  argument depends on the argument's data type. 
 <li> The format specifiers for types which are used to represents dates and
  times have the following syntax: 
 <blockquote>@code

    %[argument_index$][flags][width]conversion 
  
@endcode</blockquote>
  
 <p> The optional <i>argument_index</i>, <i>flags</i> and <i>width</i> are
  defined as above. 
 <p> The required <i>conversion</i> is a two character sequence.  The first
  character is <code>'t'</code> or <code>'T'</code>.  The second character indicates
  the format to be used.  These characters are similar to but not completely
  identical to those defined by GNU <code>date</code> and POSIX 
 <code>strftime(3c)</code>.
  
 <li> The format specifiers which do not correspond to arguments have the
  following syntax: 
 <blockquote>@code

    %[flags][width]conversion 
  
@endcode</blockquote>
  
 <p> The optional <i>flags</i> and <i>width</i> is defined as above. 
 <p> The required <i>conversion</i> is a character indicating content to be
  inserted in the output. 
 </ul>
  
 <h4> Conversions </h4>
  
 <p> Conversions are divided into the following categories: 
 <ol>
  
 <li> <b>General</b> - may be applied to any argument
  type 
 <li> <b>Character</b> - may be applied to basic types which represent
  Unicode characters: <code>char</code>, <code>Character</code>, <code>byte</code>, <code>Byte</code>
 , <code>short</code>, and <code>Short</code>. This conversion may also be
  applied to the types <code>int</code> and <code>Integer</code> when <code>Character.isValidCodePoint</code>
  returns <code>true</code>
  
 <li> <b>Numeric</b>
  
 <ol>
  
 <li> <b>Integral</b> - may be applied to Java integral types: <code>byte</code>,
  <code>Byte</code>, <code>short</code>, <code>Short</code>, <code>int</code> and <code>Integer</code>
 , <code>long</code>, <code>Long</code>, and <code>BigInteger</code>
  (but not <code>char</code> or <code>Character</code>)
  
 <li><b>Floating Point</b> - may be applied to Java floating-point types: 
 <code>float</code>, <code>Float</code>, <code>double</code>, <code>Double</code>, and <code>BigDecimal</code>
  
 </ol>
  
 <li> <b>Date/Time</b> - may be applied to Java types which are capable of
  encoding a date or time: <code>long</code>, <code>Long</code>, <code>Calendar</code>,
  <code>Date</code> and <code>TemporalAccessor</code>
  
 <li> <b>Percent</b> - produces a literal <code>'%'</code>
  (<tt>'&#92;u0025'</tt>)
  
 <li> <b>Line Separator</b> - produces the platform-specific line separator 
 </ol>
  
 <p> The following table summarizes the supported conversions.  Conversions
  denoted by an upper-case character (i.e. <code>'B'</code>, <code>'H'</code>,
  <code>'S'</code>, <code>'C'</code>, <code>'X'</code>, <code>'E'</code>, <code>'G'</code>,
  <code>'A'</code>, and <code>'T'</code>) are the same as those for the corresponding
  lower-case conversion characters except that the result is converted to
  upper case according to the rules of the prevailing <code>Locale</code>
 .  The result is equivalent to the following invocation of <code>String.toUpperCase()</code>
  
 @code

     out.toUpperCase() 
@endcode
  
 <table cellpadding=5 summary="genConv">
  
 <tr><th valign="bottom"> Conversion
      <th valign="bottom"> Argument Category
      <th valign="bottom"> Description 
 <tr><td valign="top"> <code>'b'</code>, <code>'B'</code>
      <td valign="top"> general
      <td> If the argument <i>arg</i> is <code>null</code>, then the result is
      "<code>false</code>".  If <i>arg</i> is a <code>boolean</code> or <code>Boolean</code>
 , then the result is the string returned by <code>String.valueOf(arg)</code>
 .  Otherwise, the result is
      "true". 
 <tr><td valign="top"> <code>'h'</code>, <code>'H'</code>
      <td valign="top"> general
      <td> If the argument <i>arg</i> is <code>null</code>, then the result is
      "<code>null</code>".  Otherwise, the result is obtained by invoking
      <code>Integer.toHexString(arg.hashCode())</code>.
  
 <tr><td valign="top"> <code>'s'</code>, <code>'S'</code>
      <td valign="top"> general
      <td> If the argument <i>arg</i> is <code>null</code>, then the result is
      "<code>null</code>".  If <i>arg</i> implements <code>Formattable</code>, then
      <code>arg.formatTo</code> is invoked. Otherwise, the
      result is obtained by invoking <code>arg.toString()</code>.
  
 <tr><td valign="top"><code>'c'</code>, <code>'C'</code>
      <td valign="top"> character
      <td> The result is a Unicode character 
 <tr><td valign="top"><code>'d'</code>
      <td valign="top"> integral
      <td> The result is formatted as a decimal integer 
 <tr><td valign="top"><code>'o'</code>
      <td valign="top"> integral
      <td> The result is formatted as an octal integer 
 <tr><td valign="top"><code>'x'</code>, <code>'X'</code>
      <td valign="top"> integral
      <td> The result is formatted as a hexadecimal integer 
 <tr><td valign="top"><code>'e'</code>, <code>'E'</code>
      <td valign="top"> floating point
      <td> The result is formatted as a decimal number in computerized
      scientific notation 
 <tr><td valign="top"><code>'f'</code>
      <td valign="top"> floating point
      <td> The result is formatted as a decimal number 
 <tr><td valign="top"><code>'g'</code>, <code>'G'</code>
      <td valign="top"> floating point
      <td> The result is formatted using computerized scientific notation or
      decimal format, depending on the precision and the value after rounding. 
 <tr><td valign="top"><code>'a'</code>, <code>'A'</code>
      <td valign="top"> floating point
      <td> The result is formatted as a hexadecimal floating-point number with
      a significand and an exponent. This conversion is <b>not</b> supported
      for the <code>BigDecimal</code> type despite the latter's being in the
      <i>floating point</i> argument category. 
 <tr><td valign="top"><code>'t'</code>, <code>'T'</code>
      <td valign="top"> date/time
      <td> Prefix for date and time conversion characters.  See <a href="#dt">
 Date/Time Conversions</a>.
  
 <tr><td valign="top"><code>'%'</code>
      <td valign="top"> percent
      <td> The result is a literal <code>'%'</code> (<tt>'&#92;u0025'</tt>)
  
 <tr><td valign="top"><code>'n'</code>
      <td valign="top"> line separator
      <td> The result is the platform-specific line separator 
 </table>
  
 <p> Any characters not explicitly defined as conversions are illegal and are
  reserved for future extensions. 
 <h4><a name="dt">Date/Time Conversions</a></h4>
  
 <p> The following date and time conversion suffix characters are defined for
  the <code>'t'</code> and <code>'T'</code> conversions.  The types are similar to but
  not completely identical to those defined by GNU <code>date</code> and POSIX 
 <code>strftime(3c)</code>.  Additional conversion types are provided to access
  Java-specific functionality (e.g. <code>'L'</code> for milliseconds within the
  second). 
 <p> The following conversion characters are used for formatting times: 
 <table cellpadding=5 summary="time">
  
 <tr><td valign="top"> <code>'H'</code>
      <td> Hour of the day for the 24-hour clock, formatted as two digits with
      a leading zero as necessary i.e. <code>00 - 23</code>.
  
 <tr><td valign="top"><code>'I'</code>
      <td> Hour for the 12-hour clock, formatted as two digits with a leading
      zero as necessary, i.e.  <code>01 - 12</code>.
  
 <tr><td valign="top"><code>'k'</code>
      <td> Hour of the day for the 24-hour clock, i.e. <code>0 - 23</code>.
  
 <tr><td valign="top"><code>'l'</code>
      <td> Hour for the 12-hour clock, i.e. <code>1 - 12</code>.
  
 <tr><td valign="top"><code>'M'</code>
      <td> Minute within the hour formatted as two digits with a leading zero
      as necessary, i.e.  <code>00 - 59</code>.
  
 <tr><td valign="top"><code>'S'</code>
      <td> Seconds within the minute, formatted as two digits with a leading
      zero as necessary, i.e. <code>00 - 60</code> ("<code>60</code>" is a special
      value required to support leap seconds). 
 <tr><td valign="top"><code>'L'</code>
      <td> Millisecond within the second formatted as three digits with
      leading zeros as necessary, i.e. <code>000 - 999</code>.
  
 <tr><td valign="top"><code>'N'</code>
      <td> Nanosecond within the second, formatted as nine digits with leading
      zeros as necessary, i.e. <code>000000000 - 999999999</code>.
  
 <tr><td valign="top"><code>'p'</code>
      <td> Locale-specific morning or afternoon
  marker
      in lower case, e.g."<code>am</code>" or "<code>pm</code>". Use of the conversion
      prefix <code>'T'</code> forces this output to upper case. 
 <tr><td valign="top"><code>'z'</code>
      <td> <a href="http://www.ietf.org/rfc/rfc0822.txt">RFC&nbsp;822</a>
      style numeric time zone offset from GMT, e.g. <code>-0800</code>.  This
      value will be adjusted as necessary for Daylight Saving Time.  For     
 <code>long</code>, <code>Long</code>, and <code>Date</code> the time zone used is
      the default time zone for this
      instance of the Java virtual machine. 
 <tr><td valign="top"><code>'Z'</code>
      <td> A string representing the abbreviation for the time zone.  This
      value will be adjusted as necessary for Daylight Saving Time.  For     
 <code>long</code>, <code>Long</code>, and <code>Date</code> the  time zone used is
      the default time zone for this
      instance of the Java virtual machine.  The Formatter's locale will
      supersede the locale of the argument (if any). 
 <tr><td valign="top"><code>'s'</code>
      <td> Seconds since the beginning of the epoch starting at 1 January 1970
      <code>00:00:00</code> UTC, i.e. <code>Long.MIN_VALUE/1000</code> to
      <code>Long.MAX_VALUE/1000</code>.
  
 <tr><td valign="top"><code>'Q'</code>
      <td> Milliseconds since the beginning of the epoch starting at 1 January
      1970 <code>00:00:00</code> UTC, i.e. <code>Long.MIN_VALUE</code> to
      <code>Long.MAX_VALUE</code>.
  
 </table>
  
 <p> The following conversion characters are used for formatting dates: 
 <table cellpadding=5 summary="date">
  
 <tr><td valign="top"><code>'B'</code>
      <td> Locale-specific full month name
 , e.g. <code>"January"</code>, <code>"February"</code>.
  
 <tr><td valign="top"><code>'b'</code>
      <td> Locale-specific abbreviated month name
 ,
      e.g. <code>"Jan"</code>, <code>"Feb"</code>.
  
 <tr><td valign="top"><code>'h'</code>
      <td> Same as <code>'b'</code>.
  
 <tr><td valign="top"><code>'A'</code>
      <td> Locale-specific full name of the day of the week
 ,
      e.g. <code>"Sunday"</code>, <code>"Monday"</code>
  
 <tr><td valign="top"><code>'a'</code>
      <td> Locale-specific short name of the day of the week
 ,
      e.g. <code>"Sun"</code>, <code>"Mon"</code>
  
 <tr><td valign="top"><code>'C'</code>
      <td> Four-digit year divided by <code>100</code>, formatted as two digits
      with leading zero as necessary, i.e. <code>00 - 99</code>
  
 <tr><td valign="top"><code>'Y'</code>
      <td> Year, formatted as at least four digits with leading zeros as
      necessary, e.g. <code>0092</code> equals <code>92</code> CE for the Gregorian
      calendar. 
 <tr><td valign="top"><code>'y'</code>
      <td> Last two digits of the year, formatted with leading zeros as
      necessary, i.e. <code>00 - 99</code>.
  
 <tr><td valign="top"><code>'j'</code>
      <td> Day of year, formatted as three digits with leading zeros as
      necessary, e.g. <code>001 - 366</code> for the Gregorian calendar. 
 <tr><td valign="top"><code>'m'</code>
      <td> Month, formatted as two digits with leading zeros as necessary,
      i.e. <code>01 - 13</code>.
  
 <tr><td valign="top"><code>'d'</code>
      <td> Day of month, formatted as two digits with leading zeros as
      necessary, i.e. <code>01 - 31</code>
  
 <tr><td valign="top"><code>'e'</code>
      <td> Day of month, formatted as two digits, i.e. <code>1 - 31</code>.
  
 </table>
  
 <p> The following conversion characters are used for formatting common
  date/time compositions. 
 <table cellpadding=5 summary="composites">
  
 <tr><td valign="top"><code>'R'</code>
      <td> Time formatted for the 24-hour clock as <code>"%tH:%tM"</code>
  
 <tr><td valign="top"><code>'T'</code>
      <td> Time formatted for the 24-hour clock as <code>"%tH:%tM:%tS"</code>.
  
 <tr><td valign="top"><code>'r'</code>
      <td> Time formatted for the 12-hour clock as <code>"%tI:%tM:%tS %Tp"</code>.
      The location of the morning or afternoon marker (<code>'%Tp'</code>) may be
      locale-dependent. 
 <tr><td valign="top"><code>'D'</code>
      <td> Date formatted as <code>"%tm/%td/%ty"</code>.
  
 <tr><td valign="top"><code>'F'</code>
      <td> <a href="http://www.w3.org/TR/NOTE-datetime">ISO&nbsp;8601</a>
      complete date formatted as <code>"%tY-%tm-%td"</code>.
  
 <tr><td valign="top"><code>'c'</code>
      <td> Date and time formatted as <code>"%ta %tb %td %tT %tZ %tY"</code>,
      e.g. <code>"Sun Jul 20 16:17:00 EDT 1969"</code>.
  
 </table>
  
 <p> Any characters not explicitly defined as date/time conversion suffixes
  are illegal and are reserved for future extensions. 
 <h4> Flags </h4>
  
 <p> The following table summarizes the supported flags.  <i>y</i> means the
  flag is supported for the indicated argument types. 
 <table cellpadding=5 summary="genConv">
  
 <tr><th valign="bottom"> Flag <th valign="bottom"> General
      <th valign="bottom"> Character <th valign="bottom"> Integral
      <th valign="bottom"> Floating Point
      <th valign="bottom"> Date/Time
      <th valign="bottom"> Description 
 <tr><td> '-' <td align="center" valign="top"> y
      <td align="center" valign="top"> y
      <td align="center" valign="top"> y
      <td align="center" valign="top"> y
      <td align="center" valign="top"> y
      <td> The result will be left-justified. 
 <tr><td> '#' <td align="center" valign="top"> y<sup>1</sup>
      <td align="center" valign="top"> -
      <td align="center" valign="top"> y<sup>3</sup>
      <td align="center" valign="top"> y
      <td align="center" valign="top"> -
      <td> The result should use a conversion-dependent alternate form 
 <tr><td> '+' <td align="center" valign="top"> -
      <td align="center" valign="top"> -
      <td align="center" valign="top"> y<sup>4</sup>
      <td align="center" valign="top"> y
      <td align="center" valign="top"> -
      <td> The result will always include a sign 
 <tr><td> '&nbsp;&nbsp;' <td align="center" valign="top"> -
      <td align="center" valign="top"> -
      <td align="center" valign="top"> y<sup>4</sup>
      <td align="center" valign="top"> y
      <td align="center" valign="top"> -
      <td> The result will include a leading space for positive values 
 <tr><td> '0' <td align="center" valign="top"> -
      <td align="center" valign="top"> -
      <td align="center" valign="top"> y
      <td align="center" valign="top"> y
      <td align="center" valign="top"> -
      <td> The result will be zero-padded 
 <tr><td> ',' <td align="center" valign="top"> -
      <td align="center" valign="top"> -
      <td align="center" valign="top"> y<sup>2</sup>
      <td align="center" valign="top"> y<sup>5</sup>
      <td align="center" valign="top"> -
      <td> The result will include locale-specific grouping separators
  
 <tr><td> '(' <td align="center" valign="top"> -
      <td align="center" valign="top"> -
      <td align="center" valign="top"> y<sup>4</sup>
      <td align="center" valign="top"> y<sup>5</sup>
      <td align="center"> -
      <td> The result will enclose negative numbers in parentheses 
 </table>
  
 <p> <sup>1</sup> Depends on the definition of <code>Formattable</code>.
  
 <p> <sup>2</sup> For <code>'d'</code> conversion only. 
 <p> <sup>3</sup> For <code>'o'</code>, <code>'x'</code>, and <code>'X'</code>
  conversions only. 
 <p> <sup>4</sup> For <code>'d'</code>, <code>'o'</code>, <code>'x'</code>, and 
 <code>'X'</code> conversions applied to <code>BigInteger</code>
  or <code>'d'</code> applied to <code>byte</code>, <code>Byte</code>, <code>short</code>, <code>Short</code>
 , <code>int</code> and <code>Integer</code>, <code>long</code>, and <code>Long</code>.
  
 <p> <sup>5</sup> For <code>'e'</code>, <code>'E'</code>, <code>'f'</code>,
  <code>'g'</code>, and <code>'G'</code> conversions only. 
 <p> Any characters not explicitly defined as flags are illegal and are
  reserved for future extensions. 
 <h4> Width </h4>
  
 <p> The width is the minimum number of characters to be written to the
  output.  For the line separator conversion, width is not applicable; if it
  is provided, an exception will be thrown. 
 <h4> Precision </h4>
  
 <p> For general argument types, the precision is the maximum number of
  characters to be written to the output. 
 <p> For the floating-point conversions <code>'a'</code>, <code>'A'</code>, <code>'e'</code>,
  <code>'E'</code>, and <code>'f'</code> the precision is the number of digits after the
  radix point.  If the conversion is <code>'g'</code> or <code>'G'</code>, then the
  precision is the total number of digits in the resulting magnitude after
  rounding. 
 <p> For character, integral, and date/time argument types and the percent
  and line separator conversions, the precision is not applicable; if a
  precision is provided, an exception will be thrown. 
 <h4> Argument Index </h4>
  
 <p> The argument index is a decimal integer indicating the position of the
  argument in the argument list.  The first argument is referenced by
  "<code>1$</code>", the second by "<code>2$</code>", etc. 
 <p> Another way to reference arguments by position is to use the 
 <code>'<'</code> (<tt>'&#92;u003c'</tt>) flag, which causes the argument for
  the previous format specifier to be re-used.  For example, the following two
  statements would produce identical strings: 
 <blockquote>@code

    Calendar c = ...;
    String s1 = String.format("Duke's Birthday: %1$tm %1$te,%1$tY", c);
    String s2 = String.format("Duke's Birthday: %1$tm %&lt;te,%&lt;tY", c); 
  
@endcode</blockquote>
  
 <hr>
  <h3><a name="detail">Details</a></h3>
  
 <p> This section is intended to provide behavioral details for formatting,
  including conditions and exceptions, supported data types, localization, and
  interactions between flags, conversions, and data types.  For an overview of
  formatting concepts, refer to the <a href="#summary">Summary</a>
  
 <p> Any characters not explicitly defined as conversions, date/time
  conversion suffixes, or flags are illegal and are reserved for
  future extensions.  Use of such a character in a format string will
  cause an <code>UnknownFormatConversionException</code> or <code>UnknownFormatFlagsException</code>
  to be thrown. 
 <p> If the format specifier contains a width or precision with an invalid
  value or which is otherwise unsupported, then a <code>IllegalFormatWidthException</code>
  or <code>IllegalFormatPrecisionException</code>
  respectively will be thrown. 
 <p> If a format specifier contains a conversion character that is not
  applicable to the corresponding argument, then an <code>IllegalFormatConversionException</code>
  will be thrown. 
 <p> All specified exceptions may be thrown by any of the <code>format</code>
  methods of <code>Formatter</code> as well as by any <code>format</code> convenience
  methods such as <code>String.format</code> and 
 <code>PrintStream.printf</code>.
  
 <p> Conversions denoted by an upper-case character (i.e. <code>'B'</code>,
  <code>'H'</code>, <code>'S'</code>, <code>'C'</code>, <code>'X'</code>, <code>'E'</code>,
  <code>'G'</code>, <code>'A'</code>, and <code>'T'</code>) are the same as those for the
  corresponding lower-case conversion characters except that the result is
  converted to upper case according to the rules of the prevailing <code>Locale</code>
 .  The result is equivalent to the following
  invocation of <code>String.toUpperCase()</code>
  
 @code

     out.toUpperCase() 
@endcode
  
 <h4><a name="dgen">General</a></h4>
  
 <p> The following general conversions may be applied to any argument type: 
 <table cellpadding=5 summary="dgConv">
  
 <tr><td valign="top"> <code>'b'</code>
      <td valign="top"> <tt>'&#92;u0062'</tt>
      <td> Produces either "<code>true</code>" or "<code>false</code>" as returned by
      <code>Boolean.toString(boolean)</code>.
      <p> If the argument is <code>null</code>, then the result is
      "<code>false</code>".  If the argument is a <code>boolean</code> or <code>Boolean</code>
 , then the result is the string returned by <code>String.valueOf()</code>
 .  Otherwise, the result is
      "<code>true</code>".
      <p> If the <code>'#'</code> flag is given, then a <code>FormatFlagsConversionMismatchException</code>
  will be thrown. 
 <tr><td valign="top"> <code>'B'</code>
      <td valign="top"> <tt>'&#92;u0042'</tt>
      <td> The upper-case variant of <code>'b'</code>.
  
 <tr><td valign="top"> <code>'h'</code>
      <td valign="top"> <tt>'&#92;u0068'</tt>
      <td> Produces a string representing the hash code value of the object.
      <p> If the argument, <i>arg</i> is <code>null</code>, then the
      result is "<code>null</code>".  Otherwise, the result is obtained
      by invoking <code>Integer.toHexString(arg.hashCode())</code>.
      <p> If the <code>'#'</code> flag is given, then a <code>FormatFlagsConversionMismatchException</code>
  will be thrown. 
 <tr><td valign="top"> <code>'H'</code>
      <td valign="top"> <tt>'&#92;u0048'</tt>
      <td> The upper-case variant of <code>'h'</code>.
  
 <tr><td valign="top"> <code>'s'</code>
      <td valign="top"> <tt>'&#92;u0073'</tt>
      <td> Produces a string.
      <p> If the argument is <code>null</code>, then the result is
      "<code>null</code>".  If the argument implements <code>Formattable</code>, then
      its <code>formatTo</code> method is invoked.
      Otherwise, the result is obtained by invoking the argument's     
 <code>toString()</code> method.
      <p> If the <code>'#'</code> flag is given and the argument is not a <code>Formattable</code>
  , then a <code>FormatFlagsConversionMismatchException</code>
      will be thrown. 
 <tr><td valign="top"> <code>'S'</code>
      <td valign="top"> <tt>'&#92;u0053'</tt>
      <td> The upper-case variant of <code>'s'</code>.
  
 </table>
  
 <p> The following <a name="dFlags">flags</a> apply to general conversions: 
 <table cellpadding=5 summary="dFlags">
  
 <tr><td valign="top"> <code>'-'</code>
      <td valign="top"> <tt>'&#92;u002d'</tt>
      <td> Left justifies the output.  Spaces (<tt>'&#92;u0020'</tt>) will be
      added at the end of the converted value as required to fill the minimum
      width of the field.  If the width is not provided, then a <code>MissingFormatWidthException</code>
  will be thrown.  If this flag is not given
      then the output will be right-justified. 
 <tr><td valign="top"> <code>'#'</code>
      <td valign="top"> <tt>'&#92;u0023'</tt>
      <td> Requires the output use an alternate form.  The definition of the
      form is specified by the conversion. 
 </table>
  
 <p> The <a name="genWidth">width</a> is the minimum number of characters to
  be written to the
  output.  If the length of the converted value is less than the width then
  the output will be padded by <tt>'&nbsp;&nbsp;'</tt> (<tt>'&#92;u0020'</tt>)
  until the total number of characters equals the width.  The padding is on
  the left by default.  If the <code>'-'</code> flag is given, then the padding
  will be on the right.  If the width is not specified then there is no
  minimum. 
 <p> The precision is the maximum number of characters to be written to the
  output.  The precision is applied before the width, thus the output will be
  truncated to <code>precision</code> characters even if the width is greater than
  the precision.  If the precision is not specified then there is no explicit
  limit on the number of characters. 
 <h4><a name="dchar">Character</a></h4>
  This conversion may be applied to <code>char</code> and <code>Character</code>.  It
  may also be applied to the types <code>byte</code>, <code>Byte</code>,
  <code>short</code>, and <code>Short</code>, <code>int</code> and <code>Integer</code> when 
 <code>Character.isValidCodePoint</code> returns <code>true</code>.  If it returns 
 <code>false</code> then an <code>IllegalFormatCodePointException</code> will be
  thrown. 
 <table cellpadding=5 summary="charConv">
  
 <tr><td valign="top"> <code>'c'</code>
      <td valign="top"> <tt>'&#92;u0063'</tt>
      <td> Formats the argument as a Unicode character as described in <a href="../lang/Character.html#unicode">
 Unicode Character
      Representation</a>.  This may be more than one 16-bit <code>char</code> in
      the case where the argument represents a supplementary character.     
 <p> If the <code>'#'</code> flag is given, then a <code>FormatFlagsConversionMismatchException</code>
  will be thrown. 
 <tr><td valign="top"> <code>'C'</code>
      <td valign="top"> <tt>'&#92;u0043'</tt>
      <td> The upper-case variant of <code>'c'</code>.
  
 </table>
  
 <p> The <code>'-'</code> flag defined for <a href="#dFlags">General
  conversions</a> applies.  If the <code>'#'</code> flag is given, then a <code>FormatFlagsConversionMismatchException</code>
  will be thrown. 
 <p> The width is defined as for <a href="#genWidth">General conversions</a>.
  
 <p> The precision is not applicable.  If the precision is specified then an 
 <code>IllegalFormatPrecisionException</code> will be thrown. 
 <h4><a name="dnum">Numeric</a></h4>
  
 <p> Numeric conversions are divided into the following categories: 
 <ol>
  
 <li> <a href="#dnint"><b>Byte, Short, Integer, and Long</b></a>
  
 <li> <a href="#dnbint"><b>BigInteger</b></a>
  
 <li> <a href="#dndec"><b>Float and Double</b></a>
  
 <li> <a href="#dnbdec"><b>BigDecimal</b></a>
  
 </ol>
  
 <p> Numeric types will be formatted according to the following algorithm: 
 <p><b><a name="L10nAlgorithm"> Number Localization Algorithm</a></b>
  
 <p> After digits are obtained for the integer part, fractional part, and
  exponent (as appropriate for the data type), the following transformation
  is applied: 
 <ol>
  
 <li> Each digit character <i>d</i> in the string is replaced by a
  locale-specific digit computed relative to the current locale's 
 zero digit
  <i>z</i>; that is <i>d&nbsp;-&nbsp;</i> <code>'0'</code>
  <i>&nbsp;+&nbsp;z</i>.
  
 <li> If a decimal separator is present, a locale-specific decimal separator
  is
  substituted. 
 <li> If the <code>','</code> (<tt>'&#92;u002c'</tt>)
  <a name="L10nGroup">flag</a> is given, then the locale-specific grouping separator
  is
  inserted by scanning the integer part of the string from least significant
  to most significant digits and inserting a separator at intervals defined by
  the locale's grouping
  size
 .
  
 <li> If the <code>'0'</code> flag is given, then the locale-specific zero digits
  are inserted
  after the sign character, if any, and before the first non-zero digit, until
  the length of the string is equal to the requested field width. 
 <li> If the value is negative and the <code>'('</code> flag is given, then a 
 <code>'('</code> (<tt>'&#92;u0028'</tt>) is prepended and a <code>')'</code>
  (<tt>'&#92;u0029'</tt>) is appended. 
 <li> If the value is negative (or floating-point negative zero) and 
 <code>'('</code> flag is not given, then a <code>'-'</code> (<tt>'&#92;u002d'</tt>)
  is prepended. 
 <li> If the <code>'+'</code> flag is given and the value is positive or zero (or
  floating-point positive zero), then a <code>'+'</code> (<tt>'&#92;u002b'</tt>)
  will be prepended. 
 </ol>
  
 <p> If the value is NaN or positive infinity the literal strings "NaN" or
  "Infinity" respectively, will be output.  If the value is negative infinity,
  then the output will be "(Infinity)" if the <code>'('</code> flag is given
  otherwise the output will be "-Infinity".  These values are not localized. 
 <p><a name="dnint"><b> Byte, Short, Integer, and Long </b></a>
  
 <p> The following conversions may be applied to <code>byte</code>, <code>Byte</code>,
  <code>short</code>, <code>Short</code>, <code>int</code> and <code>Integer</code>,
  <code>long</code>, and <code>Long</code>.
  
 <table cellpadding=5 summary="IntConv">
  
 <tr><td valign="top"> <code>'d'</code>
      <td valign="top"> <tt>'&#92;u0064'</tt>
      <td> Formats the argument as a decimal integer. The <a href="#L10nAlgorithm">
 localization algorithm</a> is applied.
      <p> If the <code>'0'</code> flag is given and the value is negative, then
      the zero padding will occur after the sign.     
 <p> If the <code>'#'</code> flag is given then a <code>FormatFlagsConversionMismatchException</code>
  will be thrown. 
 <tr><td valign="top"> <code>'o'</code>
      <td valign="top"> <tt>'&#92;u006f'</tt>
      <td> Formats the argument as an integer in base eight.  No localization
      is applied.     
 <p> If <i>x</i> is negative then the result will be an unsigned value
      generated by adding 2<sup>n</sup> to the value where <code>n</code> is the
      number of bits in the type as returned by the static <code>SIZE</code> field
      in the Byte, Short,
      Integer, or Long
      classes as appropriate.     
 <p> If the <code>'#'</code> flag is given then the output will always begin
      with the radix indicator <code>'0'</code>.
      <p> If the <code>'0'</code> flag is given then the output will be padded
      with leading zeros to the field width following any indication of sign.     
 <p> If <code>'('</code>, <code>'+'</code>, '&nbsp;&nbsp;', or <code>','</code> flags
      are given then a <code>FormatFlagsConversionMismatchException</code> will be
      thrown. 
 <tr><td valign="top"> <code>'x'</code>
      <td valign="top"> <tt>'&#92;u0078'</tt>
      <td> Formats the argument as an integer in base sixteen. No
      localization is applied.     
 <p> If <i>x</i> is negative then the result will be an unsigned value
      generated by adding 2<sup>n</sup> to the value where <code>n</code> is the
      number of bits in the type as returned by the static <code>SIZE</code> field
      in the Byte, Short,
      Integer, or Long
      classes as appropriate.     
 <p> If the <code>'#'</code> flag is given then the output will always begin
      with the radix indicator <code>"0x"</code>.
      <p> If the <code>'0'</code> flag is given then the output will be padded to
      the field width with leading zeros after the radix indicator or sign (if
      present).     
 <p> If <code>'('</code>, <tt>'&nbsp;&nbsp;'</tt>, <code>'+'</code>, or
      <code>','</code> flags are given then a <code>FormatFlagsConversionMismatchException</code>
  will be thrown. 
 <tr><td valign="top"> <code>'X'</code>
      <td valign="top"> <tt>'&#92;u0058'</tt>
      <td> The upper-case variant of <code>'x'</code>.  The entire string
      representing the number will be converted to upper case
  including the <code>'x'</code> (if any) and
      all hexadecimal digits <code>'a'</code> - <code>'f'</code>
      (<tt>'&#92;u0061'</tt> -  <tt>'&#92;u0066'</tt>).
  
 </table>
  
 <p> If the conversion is <code>'o'</code>, <code>'x'</code>, or <code>'X'</code> and
  both the <code>'#'</code> and the <code>'0'</code> flags are given, then result will
  contain the radix indicator (<code>'0'</code> for octal and <code>"0x"</code> or 
 <code>"0X"</code> for hexadecimal), some number of zeros (based on the width),
  and the value. 
 <p> If the <code>'-'</code> flag is not given, then the space padding will occur
  before the sign. 
 <p> The following <a name="intFlags">flags</a> apply to numeric integral
  conversions: 
 <table cellpadding=5 summary="intFlags">
  
 <tr><td valign="top"> <code>'+'</code>
      <td valign="top"> <tt>'&#92;u002b'</tt>
      <td> Requires the output to include a positive sign for all positive
      numbers.  If this flag is not given then only negative values will
      include a sign.     
 <p> If both the <code>'+'</code> and <tt>'&nbsp;&nbsp;'</tt> flags are given
      then an <code>IllegalFormatFlagsException</code> will be thrown. 
 <tr><td valign="top"> <tt>'&nbsp;&nbsp;'</tt>
      <td valign="top"> <tt>'&#92;u0020'</tt>
      <td> Requires the output to include a single extra space
      (<tt>'&#92;u0020'</tt>) for non-negative values.
      <p> If both the <code>'+'</code> and <tt>'&nbsp;&nbsp;'</tt> flags are given
      then an <code>IllegalFormatFlagsException</code> will be thrown. 
 <tr><td valign="top"> <code>'0'</code>
      <td valign="top"> <tt>'&#92;u0030'</tt>
      <td> Requires the output to be padded with leading zeros
  to the minimum field
      width following any sign or radix indicator except when converting NaN
      or infinity.  If the width is not provided, then a <code>MissingFormatWidthException</code>
  will be thrown.
      <p> If both the <code>'-'</code> and <code>'0'</code> flags are given then an
      <code>IllegalFormatFlagsException</code> will be thrown. 
 <tr><td valign="top"> <code>','</code>
      <td valign="top"> <tt>'&#92;u002c'</tt>
      <td> Requires the output to include the locale-specific group separators
  as
      described in the <a href="#L10nGroup">"group" section</a> of the
      localization algorithm. 
 <tr><td valign="top"> <code>'('</code>
      <td valign="top"> <tt>'&#92;u0028'</tt>
      <td> Requires the output to prepend a <code>'('</code>
      (<tt>'&#92;u0028'</tt>) and append a <code>')'</code>
      (<tt>'&#92;u0029'</tt>) to negative values. 
 </table>
  
 <p> If no <a name="intdFlags">flags</a> are given the default formatting is
  as follows: 
 <ul>
  
 <li> The output is right-justified within the <code>width</code>
  
 <li> Negative numbers begin with a <code>'-'</code> (<tt>'&#92;u002d'</tt>)
  
 <li> Positive numbers and zero do not include a sign or extra leading
  space 
 <li> No grouping separators are included 
 </ul>
  
 <p> The <a name="intWidth">width</a> is the minimum number of characters to
  be written to the output.  This includes any signs, digits, grouping
  separators, radix indicator, and parentheses.  If the length of the
  converted value is less than the width then the output will be padded by
  spaces (<tt>'&#92;u0020'</tt>) until the total number of characters equals
  width.  The padding is on the left by default.  If <code>'-'</code> flag is
  given then the padding will be on the right.  If width is not specified then
  there is no minimum. 
 <p> The precision is not applicable.  If precision is specified then an 
 <code>IllegalFormatPrecisionException</code> will be thrown. 
 <p><a name="dnbint"><b> BigInteger </b></a>
  
 <p> The following conversions may be applied to <code>java.math.BigInteger</code>
 .
  
 <table cellpadding=5 summary="BIntConv">
  
 <tr><td valign="top"> <code>'d'</code>
      <td valign="top"> <tt>'&#92;u0064'</tt>
      <td> Requires the output to be formatted as a decimal integer. The <a href="#L10nAlgorithm">
 localization algorithm</a> is applied.
      <p> If the <code>'#'</code> flag is given <code>FormatFlagsConversionMismatchException</code>
  will be thrown. 
 <tr><td valign="top"> <code>'o'</code>
      <td valign="top"> <tt>'&#92;u006f'</tt>
      <td> Requires the output to be formatted as an integer in base eight.
      No localization is applied.     
 <p> If <i>x</i> is negative then the result will be a signed value
      beginning with <code>'-'</code> (<tt>'&#92;u002d'</tt>).  Signed output is
      allowed for this type because unlike the primitive types it is not
      possible to create an unsigned equivalent without assuming an explicit
      data-type size.     
 <p> If <i>x</i> is positive or zero and the <code>'+'</code> flag is given
      then the result will begin with <code>'+'</code> (<tt>'&#92;u002b'</tt>).
      <p> If the <code>'#'</code> flag is given then the output will always begin
      with <code>'0'</code> prefix.
      <p> If the <code>'0'</code> flag is given then the output will be padded
      with leading zeros to the field width following any indication of sign.     
 <p> If the <code>','</code> flag is given then a <code>FormatFlagsConversionMismatchException</code>
  will be thrown. 
 <tr><td valign="top"> <code>'x'</code>
      <td valign="top"> <tt>'&#92;u0078'</tt>
      <td> Requires the output to be formatted as an integer in base
      sixteen.  No localization is applied.     
 <p> If <i>x</i> is negative then the result will be a signed value
      beginning with <code>'-'</code> (<tt>'&#92;u002d'</tt>).  Signed output is
      allowed for this type because unlike the primitive types it is not
      possible to create an unsigned equivalent without assuming an explicit
      data-type size.     
 <p> If <i>x</i> is positive or zero and the <code>'+'</code> flag is given
      then the result will begin with <code>'+'</code> (<tt>'&#92;u002b'</tt>).
      <p> If the <code>'#'</code> flag is given then the output will always begin
      with the radix indicator <code>"0x"</code>.
      <p> If the <code>'0'</code> flag is given then the output will be padded to
      the field width with leading zeros after the radix indicator or sign (if
      present).     
 <p> If the <code>','</code> flag is given then a <code>FormatFlagsConversionMismatchException</code>
  will be thrown. 
 <tr><td valign="top"> <code>'X'</code>
      <td valign="top"> <tt>'&#92;u0058'</tt>
      <td> The upper-case variant of <code>'x'</code>.  The entire string
      representing the number will be converted to upper case
  including the <code>'x'</code> (if any) and
      all hexadecimal digits <code>'a'</code> - <code>'f'</code>
      (<tt>'&#92;u0061'</tt> - <tt>'&#92;u0066'</tt>).
  
 </table>
  
 <p> If the conversion is <code>'o'</code>, <code>'x'</code>, or <code>'X'</code> and
  both the <code>'#'</code> and the <code>'0'</code> flags are given, then result will
  contain the base indicator (<code>'0'</code> for octal and <code>"0x"</code> or 
 <code>"0X"</code> for hexadecimal), some number of zeros (based on the width),
  and the value. 
 <p> If the <code>'0'</code> flag is given and the value is negative, then the
  zero padding will occur after the sign. 
 <p> If the <code>'-'</code> flag is not given, then the space padding will occur
  before the sign. 
 <p> All <a href="#intFlags">flags</a> defined for Byte, Short, Integer, and
  Long apply.  The <a href="#intdFlags">default behavior</a> when no flags are
  given is the same as for Byte, Short, Integer, and Long. 
 <p> The specification of <a href="#intWidth">width</a> is the same as
  defined for Byte, Short, Integer, and Long. 
 <p> The precision is not applicable.  If precision is specified then an 
 <code>IllegalFormatPrecisionException</code> will be thrown. 
 <p><a name="dndec"><b> Float and Double</b></a>
  
 <p> The following conversions may be applied to <code>float</code>, <code>Float</code>
 , <code>double</code> and <code>Double</code>.
  
 <table cellpadding=5 summary="floatConv">
  
 <tr><td valign="top"> <code>'e'</code>
      <td valign="top"> <tt>'&#92;u0065'</tt>
      <td> Requires the output to be formatted using <a name="scientific">
 computerized scientific notation</a>.  The <a href="#L10nAlgorithm">
 localization algorithm</a> is applied.
      <p> The formatting of the magnitude <i>m</i> depends upon its value.
      <p> If <i>m</i> is NaN or infinite, the literal strings "NaN" or
      "Infinity", respectively, will be output.  These values are not
      localized.     
 <p> If <i>m</i> is positive-zero or negative-zero, then the exponent
      will be <code>"+00"</code>.
      <p> Otherwise, the result is a string that represents the sign and
      magnitude (absolute value) of the argument.  The formatting of the sign
      is described in the <a href="#L10nAlgorithm">localization
      algorithm</a>. The formatting of the magnitude <i>m</i> depends upon its
      value.     
 <p> Let <i>n</i> be the unique integer such that 10<sup><i>n</i></sup>
      &lt;= <i>m</i> &lt; 10<sup><i>n</i>+1</sup>; then let <i>a</i> be the
      mathematically exact quotient of <i>m</i> and 10<sup><i>n</i></sup> so
      that 1 &lt;= <i>a</i> &lt; 10. The magnitude is then represented as the
      integer part of <i>a</i>, as a single decimal digit, followed by the
      decimal separator followed by decimal digits representing the fractional
      part of <i>a</i>, followed by the lower-case locale-specific exponent separator
      (e.g. <code>'e'</code>), followed by the sign of the exponent, followed
      by a representation of <i>n</i> as a decimal integer, as produced by the
      method <code>Long.toString(long, int)</code>, and zero-padded to include at
      least two digits.     
 <p> The number of digits in the result for the fractional part of
      <i>m</i> or <i>a</i> is equal to the precision.  If the precision is not
      specified then the default value is <code>6</code>. If the precision is less
      than the number of digits which would appear after the decimal point in
      the string returned by <code>Float.toString(float)</code> or <code>Double.toString(double)</code>
  respectively, then the value will be rounded
      using the round half up
      algorithm
 .  Otherwise, zeros may be appended to reach the precision.
      For a canonical representation of the value, use <code>Float.toString(float)</code>
  or <code>Double.toString(double)</code> as
      appropriate.     
 <p>If the <code>','</code> flag is given, then an <code>FormatFlagsConversionMismatchException</code>
  will be thrown. 
 <tr><td valign="top"> <code>'E'</code>
      <td valign="top"> <tt>'&#92;u0045'</tt>
      <td> The upper-case variant of <code>'e'</code>.  The exponent symbol
      will be the upper-case locale-specific exponent separator
      (e.g. <code>'E'</code>).
  
 <tr><td valign="top"> <code>'g'</code>
      <td valign="top"> <tt>'&#92;u0067'</tt>
      <td> Requires the output to be formatted in general scientific notation
      as described below. The <a href="#L10nAlgorithm">localization
      algorithm</a> is applied.
      <p> After rounding for the precision, the formatting of the resulting
      magnitude <i>m</i> depends on its value.
      <p> If <i>m</i> is greater than or equal to 10<sup>-4</sup> but less
      than 10<sup>precision</sup> then it is represented in <i><a href="#decimal">
 decimal format</a></i>.
      <p> If <i>m</i> is less than 10<sup>-4</sup> or greater than or equal to
      10<sup>precision</sup>, then it is represented in <i><a href="#scientific">
 computerized scientific notation</a></i>.
      <p> The total number of significant digits in <i>m</i> is equal to the
      precision.  If the precision is not specified, then the default value is     
 <code>6</code>.  If the precision is <code>0</code>, then it is taken to be
      <code>1</code>.
      <p> If the <code>'#'</code> flag is given then an <code>FormatFlagsConversionMismatchException</code>
  will be thrown. 
 <tr><td valign="top"> <code>'G'</code>
      <td valign="top"> <tt>'&#92;u0047'</tt>
      <td> The upper-case variant of <code>'g'</code>.
  
 <tr><td valign="top"> <code>'f'</code>
      <td valign="top"> <tt>'&#92;u0066'</tt>
      <td> Requires the output to be formatted using <a name="decimal">decimal
      format</a>.  The <a href="#L10nAlgorithm">localization algorithm</a> is
      applied.     
 <p> The result is a string that represents the sign and magnitude
      (absolute value) of the argument.  The formatting of the sign is
      described in the <a href="#L10nAlgorithm">localization
      algorithm</a>. The formatting of the magnitude <i>m</i> depends upon its
      value.     
 <p> If <i>m</i> NaN or infinite, the literal strings "NaN" or
      "Infinity", respectively, will be output.  These values are not
      localized.     
 <p> The magnitude is formatted as the integer part of <i>m</i>, with no
      leading zeroes, followed by the decimal separator followed by one or
      more decimal digits representing the fractional part of <i>m</i>.
      <p> The number of digits in the result for the fractional part of
      <i>m</i> or <i>a</i> is equal to the precision.  If the precision is not
      specified then the default value is <code>6</code>. If the precision is less
      than the number of digits which would appear after the decimal point in
      the string returned by <code>Float.toString(float)</code> or <code>Double.toString(double)</code>
  respectively, then the value will be rounded
      using the round half up
      algorithm
 .  Otherwise, zeros may be appended to reach the precision.
      For a canonical representation of the value, use <code>Float.toString(float)</code>
  or <code>Double.toString(double)</code> as
      appropriate. 
 <tr><td valign="top"> <code>'a'</code>
      <td valign="top"> <tt>'&#92;u0061'</tt>
      <td> Requires the output to be formatted in hexadecimal exponential
      form.  No localization is applied.     
 <p> The result is a string that represents the sign and magnitude
      (absolute value) of the argument <i>x</i>.
      <p> If <i>x</i> is negative or a negative-zero value then the result
      will begin with <code>'-'</code> (<tt>'&#92;u002d'</tt>).
      <p> If <i>x</i> is positive or a positive-zero value and the
      <code>'+'</code> flag is given then the result will begin with <code>'+'</code>
      (<tt>'&#92;u002b'</tt>).
      <p> The formatting of the magnitude <i>m</i> depends upon its value.
      <ul>
      <li> If the value is NaN or infinite, the literal strings "NaN" or
      "Infinity", respectively, will be output.     
 <li> If <i>m</i> is zero then it is represented by the string
      <code>"0x0.0p0"</code>.
      <li> If <i>m</i> is a <code>double</code> value with a normalized
      representation then substrings are used to represent the significand and
      exponent fields.  The significand is represented by the characters     
 <code>"0x1."</code> followed by the hexadecimal representation of the rest
      of the significand as a fraction.  The exponent is represented by     
 <code>'p'</code> (<tt>'&#92;u0070'</tt>) followed by a decimal string of the
      unbiased exponent as if produced by invoking <code>Integer.toString</code>
  on the exponent value.  If the
      precision is specified, the value is rounded to the given number of
      hexadecimal digits.     
 <li> If <i>m</i> is a <code>double</code> value with a subnormal
      representation then, unless the precision is specified to be in the range
      1 through 12, inclusive, the significand is represented by the characters     
 <code>'0x0.'</code> followed by the hexadecimal representation of the rest of
      the significand as a fraction, and the exponent represented by     
 <code>'p-1022'</code>.  If the precision is in the interval
      [1,&nbsp;12], the subnormal value is normalized such that it
      begins with the characters <code>'0x1.'</code>, rounded to the number of
      hexadecimal digits of precision, and the exponent adjusted
      accordingly.  Note that there must be at least one nonzero digit in a
      subnormal significand.     
 </ul>
      <p> If the <code>'('</code> or <code>','</code> flags are given, then a <code>FormatFlagsConversionMismatchException</code>
  will be thrown. 
 <tr><td valign="top"> <code>'A'</code>
      <td valign="top"> <tt>'&#92;u0041'</tt>
      <td> The upper-case variant of <code>'a'</code>.  The entire string
      representing the number will be converted to upper case including the     
 <code>'x'</code> (<tt>'&#92;u0078'</tt>) and <code>'p'</code>
      (<tt>'&#92;u0070'</tt> and all hexadecimal digits <code>'a'</code> -
      <code>'f'</code> (<tt>'&#92;u0061'</tt> - <tt>'&#92;u0066'</tt>).
  
 </table>
  
 <p> All <a href="#intFlags">flags</a> defined for Byte, Short, Integer, and
  Long apply. 
 <p> If the <code>'#'</code> flag is given, then the decimal separator will
  always be present. 
 <p> If no <a name="floatdFlags">flags</a> are given the default formatting
  is as follows: 
 <ul>
  
 <li> The output is right-justified within the <code>width</code>
  
 <li> Negative numbers begin with a <code>'-'</code>
  
 <li> Positive numbers and positive zero do not include a sign or extra
  leading space 
 <li> No grouping separators are included 
 <li> The decimal separator will only appear if a digit follows it 
 </ul>
  
 <p> The <a name="floatDWidth">width</a> is the minimum number of characters
  to be written to the output.  This includes any signs, digits, grouping
  separators, decimal separators, exponential symbol, radix indicator,
  parentheses, and strings representing infinity and NaN as applicable.  If
  the length of the converted value is less than the width then the output
  will be padded by spaces (<tt>'&#92;u0020'</tt>) until the total number of
  characters equals width.  The padding is on the left by default.  If the 
 <code>'-'</code> flag is given then the padding will be on the right.  If width
  is not specified then there is no minimum. 
 <p> If the <a name="floatDPrec">conversion</a> is <code>'e'</code>,
  <code>'E'</code> or <code>'f'</code>, then the precision is the number of digits
  after the decimal separator.  If the precision is not specified, then it is
  assumed to be <code>6</code>.
  
 <p> If the conversion is <code>'g'</code> or <code>'G'</code>, then the precision is
  the total number of significant digits in the resulting magnitude after
  rounding.  If the precision is not specified, then the default value is 
 <code>6</code>.  If the precision is <code>0</code>, then it is taken to be 
 <code>1</code>.
  
 <p> If the conversion is <code>'a'</code> or <code>'A'</code>, then the precision
  is the number of hexadecimal digits after the radix point.  If the
  precision is not provided, then all of the digits as returned by <code>Double.toHexString(double)</code>
  will be output. 
 <p><a name="dnbdec"><b> BigDecimal </b></a>
  
 <p> The following conversions may be applied <code>BigDecimal</code>
 .
  
 <table cellpadding=5 summary="floatConv">
  
 <tr><td valign="top"> <code>'e'</code>
      <td valign="top"> <tt>'&#92;u0065'</tt>
      <td> Requires the output to be formatted using <a name="bscientific">
 computerized scientific notation</a>.  The <a href="#L10nAlgorithm">
 localization algorithm</a> is applied.
      <p> The formatting of the magnitude <i>m</i> depends upon its value.
      <p> If <i>m</i> is positive-zero or negative-zero, then the exponent
      will be <code>"+00"</code>.
      <p> Otherwise, the result is a string that represents the sign and
      magnitude (absolute value) of the argument.  The formatting of the sign
      is described in the <a href="#L10nAlgorithm">localization
      algorithm</a>. The formatting of the magnitude <i>m</i> depends upon its
      value.     
 <p> Let <i>n</i> be the unique integer such that 10<sup><i>n</i></sup>
      &lt;= <i>m</i> &lt; 10<sup><i>n</i>+1</sup>; then let <i>a</i> be the
      mathematically exact quotient of <i>m</i> and 10<sup><i>n</i></sup> so
      that 1 &lt;= <i>a</i> &lt; 10. The magnitude is then represented as the
      integer part of <i>a</i>, as a single decimal digit, followed by the
      decimal separator followed by decimal digits representing the fractional
      part of <i>a</i>, followed by the exponent symbol <code>'e'</code>
      (<tt>'&#92;u0065'</tt>), followed by the sign of the exponent, followed
      by a representation of <i>n</i> as a decimal integer, as produced by the
      method <code>Long.toString(long, int)</code>, and zero-padded to include at
      least two digits.     
 <p> The number of digits in the result for the fractional part of
      <i>m</i> or <i>a</i> is equal to the precision.  If the precision is not
      specified then the default value is <code>6</code>.  If the precision is
      less than the number of digits to the right of the decimal point then
      the value will be rounded using the     
 round half up
      algorithm
 .  Otherwise, zeros may be appended to reach the precision.
      For a canonical representation of the value, use <code>BigDecimal.toString()</code>
 .
      <p> If the <code>','</code> flag is given, then an <code>FormatFlagsConversionMismatchException</code>
  will be thrown. 
 <tr><td valign="top"> <code>'E'</code>
      <td valign="top"> <tt>'&#92;u0045'</tt>
      <td> The upper-case variant of <code>'e'</code>.  The exponent symbol
      will be <code>'E'</code> (<tt>'&#92;u0045'</tt>).
  
 <tr><td valign="top"> <code>'g'</code>
      <td valign="top"> <tt>'&#92;u0067'</tt>
      <td> Requires the output to be formatted in general scientific notation
      as described below. The <a href="#L10nAlgorithm">localization
      algorithm</a> is applied.
      <p> After rounding for the precision, the formatting of the resulting
      magnitude <i>m</i> depends on its value.
      <p> If <i>m</i> is greater than or equal to 10<sup>-4</sup> but less
      than 10<sup>precision</sup> then it is represented in <i><a href="#bdecimal">
 decimal format</a></i>.
      <p> If <i>m</i> is less than 10<sup>-4</sup> or greater than or equal to
      10<sup>precision</sup>, then it is represented in <i><a href="#bscientific">
 computerized scientific notation</a></i>.
      <p> The total number of significant digits in <i>m</i> is equal to the
      precision.  If the precision is not specified, then the default value is     
 <code>6</code>.  If the precision is <code>0</code>, then it is taken to be
      <code>1</code>.
      <p> If the <code>'#'</code> flag is given then an <code>FormatFlagsConversionMismatchException</code>
  will be thrown. 
 <tr><td valign="top"> <code>'G'</code>
      <td valign="top"> <tt>'&#92;u0047'</tt>
      <td> The upper-case variant of <code>'g'</code>.
  
 <tr><td valign="top"> <code>'f'</code>
      <td valign="top"> <tt>'&#92;u0066'</tt>
      <td> Requires the output to be formatted using <a name="bdecimal">decimal
      format</a>.  The <a href="#L10nAlgorithm">localization algorithm</a> is
      applied.     
 <p> The result is a string that represents the sign and magnitude
      (absolute value) of the argument.  The formatting of the sign is
      described in the <a href="#L10nAlgorithm">localization
      algorithm</a>. The formatting of the magnitude <i>m</i> depends upon its
      value.     
 <p> The magnitude is formatted as the integer part of <i>m</i>, with no
      leading zeroes, followed by the decimal separator followed by one or
      more decimal digits representing the fractional part of <i>m</i>.
      <p> The number of digits in the result for the fractional part of
      <i>m</i> or <i>a</i> is equal to the precision. If the precision is not
      specified then the default value is <code>6</code>.  If the precision is
      less than the number of digits to the right of the decimal point
      then the value will be rounded using the     
 round half up
      algorithm
 .  Otherwise, zeros may be appended to reach the precision.
      For a canonical representation of the value, use <code>BigDecimal.toString()</code>
 .
  
 </table>
  
 <p> All <a href="#intFlags">flags</a> defined for Byte, Short, Integer, and
  Long apply. 
 <p> If the <code>'#'</code> flag is given, then the decimal separator will
  always be present. 
 <p> The <a href="#floatdFlags">default behavior</a> when no flags are
  given is the same as for Float and Double. 
 <p> The specification of <a href="#floatDWidth">width</a> and <a href="#floatDPrec">
 precision</a> is the same as defined for Float and
  Double. 
 <h4><a name="ddt">Date/Time</a></h4>
  
 <p> This conversion may be applied to <code>long</code>, <code>Long</code>, <code>Calendar</code>
 , <code>Date</code> and <code>TemporalAccessor</code>
  
 <table cellpadding=5 summary="DTConv">
  
 <tr><td valign="top"> <code>'t'</code>
      <td valign="top"> <tt>'&#92;u0074'</tt>
      <td> Prefix for date and time conversion characters. 
 <tr><td valign="top"> <code>'T'</code>
      <td valign="top"> <tt>'&#92;u0054'</tt>
      <td> The upper-case variant of <code>'t'</code>.
  
 </table>
  
 <p> The following date and time conversion character suffixes are defined
  for the <code>'t'</code> and <code>'T'</code> conversions.  The types are similar to
  but not completely identical to those defined by GNU <code>date</code> and
  POSIX <code>strftime(3c)</code>.  Additional conversion types are provided to
  access Java-specific functionality (e.g. <code>'L'</code> for milliseconds
  within the second). 
 <p> The following conversion characters are used for formatting times: 
 <table cellpadding=5 summary="time">
  
 <tr><td valign="top"> <code>'H'</code>
      <td valign="top"> <tt>'&#92;u0048'</tt>
      <td> Hour of the day for the 24-hour clock, formatted as two digits with
      a leading zero as necessary i.e. <code>00 - 23</code>. <code>00</code>
      corresponds to midnight. 
 <tr><td valign="top"><code>'I'</code>
      <td valign="top"> <tt>'&#92;u0049'</tt>
      <td> Hour for the 12-hour clock, formatted as two digits with a leading
      zero as necessary, i.e.  <code>01 - 12</code>.  <code>01</code> corresponds to
      one o'clock (either morning or afternoon). 
 <tr><td valign="top"><code>'k'</code>
      <td valign="top"> <tt>'&#92;u006b'</tt>
      <td> Hour of the day for the 24-hour clock, i.e. <code>0 - 23</code>.
      <code>0</code> corresponds to midnight. 
 <tr><td valign="top"><code>'l'</code>
      <td valign="top"> <tt>'&#92;u006c'</tt>
      <td> Hour for the 12-hour clock, i.e. <code>1 - 12</code>.  <code>1</code>
      corresponds to one o'clock (either morning or afternoon). 
 <tr><td valign="top"><code>'M'</code>
      <td valign="top"> <tt>'&#92;u004d'</tt>
      <td> Minute within the hour formatted as two digits with a leading zero
      as necessary, i.e.  <code>00 - 59</code>.
  
 <tr><td valign="top"><code>'S'</code>
      <td valign="top"> <tt>'&#92;u0053'</tt>
      <td> Seconds within the minute, formatted as two digits with a leading
      zero as necessary, i.e. <code>00 - 60</code> ("<code>60</code>" is a special
      value required to support leap seconds). 
 <tr><td valign="top"><code>'L'</code>
      <td valign="top"> <tt>'&#92;u004c'</tt>
      <td> Millisecond within the second formatted as three digits with
      leading zeros as necessary, i.e. <code>000 - 999</code>.
  
 <tr><td valign="top"><code>'N'</code>
      <td valign="top"> <tt>'&#92;u004e'</tt>
      <td> Nanosecond within the second, formatted as nine digits with leading
      zeros as necessary, i.e. <code>000000000 - 999999999</code>.  The precision
      of this value is limited by the resolution of the underlying operating
      system or hardware. 
 <tr><td valign="top"><code>'p'</code>
      <td valign="top"> <tt>'&#92;u0070'</tt>
      <td> Locale-specific morning or afternoon
  marker
      in lower case, e.g."<code>am</code>" or "<code>pm</code>".  Use of the
      conversion prefix <code>'T'</code> forces this output to upper case.  (Note
      that <code>'p'</code> produces lower-case output.  This is different from
      GNU <code>date</code> and POSIX <code>strftime(3c)</code> which produce
      upper-case output.) 
 <tr><td valign="top"><code>'z'</code>
      <td valign="top"> <tt>'&#92;u007a'</tt>
      <td> <a href="http://www.ietf.org/rfc/rfc0822.txt">RFC&nbsp;822</a>
      style numeric time zone offset from GMT, e.g. <code>-0800</code>.  This
      value will be adjusted as necessary for Daylight Saving Time.  For     
 <code>long</code>, <code>Long</code>, and <code>Date</code> the time zone used is
      the default time zone for this
      instance of the Java virtual machine. 
 <tr><td valign="top"><code>'Z'</code>
      <td valign="top"> <tt>'&#92;u005a'</tt>
      <td> A string representing the abbreviation for the time zone.  This
      value will be adjusted as necessary for Daylight Saving Time.  For     
 <code>long</code>, <code>Long</code>, and <code>Date</code> the time zone used is
      the default time zone for this
      instance of the Java virtual machine.  The Formatter's locale will
      supersede the locale of the argument (if any). 
 <tr><td valign="top"><code>'s'</code>
      <td valign="top"> <tt>'&#92;u0073'</tt>
      <td> Seconds since the beginning of the epoch starting at 1 January 1970
      <code>00:00:00</code> UTC, i.e. <code>Long.MIN_VALUE/1000</code> to
      <code>Long.MAX_VALUE/1000</code>.
  
 <tr><td valign="top"><code>'Q'</code>
      <td valign="top"> <tt>'&#92;u004f'</tt>
      <td> Milliseconds since the beginning of the epoch starting at 1 January
      1970 <code>00:00:00</code> UTC, i.e. <code>Long.MIN_VALUE</code> to
      <code>Long.MAX_VALUE</code>. The precision of this value is limited by
      the resolution of the underlying operating system or hardware. 
 </table>
  
 <p> The following conversion characters are used for formatting dates: 
 <table cellpadding=5 summary="date">
  
 <tr><td valign="top"><code>'B'</code>
      <td valign="top"> <tt>'&#92;u0042'</tt>
      <td> Locale-specific full month name
 , e.g. <code>"January"</code>, <code>"February"</code>.
  
 <tr><td valign="top"><code>'b'</code>
      <td valign="top"> <tt>'&#92;u0062'</tt>
      <td> Locale-specific abbreviated month name
 ,
      e.g. <code>"Jan"</code>, <code>"Feb"</code>.
  
 <tr><td valign="top"><code>'h'</code>
      <td valign="top"> <tt>'&#92;u0068'</tt>
      <td> Same as <code>'b'</code>.
  
 <tr><td valign="top"><code>'A'</code>
      <td valign="top"> <tt>'&#92;u0041'</tt>
      <td> Locale-specific full name of the day of the week
 ,
      e.g. <code>"Sunday"</code>, <code>"Monday"</code>
  
 <tr><td valign="top"><code>'a'</code>
      <td valign="top"> <tt>'&#92;u0061'</tt>
      <td> Locale-specific short name of the day of the week
 ,
      e.g. <code>"Sun"</code>, <code>"Mon"</code>
  
 <tr><td valign="top"><code>'C'</code>
      <td valign="top"> <tt>'&#92;u0043'</tt>
      <td> Four-digit year divided by <code>100</code>, formatted as two digits
      with leading zero as necessary, i.e. <code>00 - 99</code>
  
 <tr><td valign="top"><code>'Y'</code>
      <td valign="top"> <tt>'&#92;u0059'</tt> <td> Year, formatted to at least
      four digits with leading zeros as necessary, e.g. <code>0092</code> equals
      <code>92</code> CE for the Gregorian calendar. 
 <tr><td valign="top"><code>'y'</code>
      <td valign="top"> <tt>'&#92;u0079'</tt>
      <td> Last two digits of the year, formatted with leading zeros as
      necessary, i.e. <code>00 - 99</code>.
  
 <tr><td valign="top"><code>'j'</code>
      <td valign="top"> <tt>'&#92;u006a'</tt>
      <td> Day of year, formatted as three digits with leading zeros as
      necessary, e.g. <code>001 - 366</code> for the Gregorian calendar.
      <code>001</code> corresponds to the first day of the year. 
 <tr><td valign="top"><code>'m'</code>
      <td valign="top"> <tt>'&#92;u006d'</tt>
      <td> Month, formatted as two digits with leading zeros as necessary,
      i.e. <code>01 - 13</code>, where "<code>01</code>" is the first month of the
      year and ("<code>13</code>" is a special value required to support lunar
      calendars). 
 <tr><td valign="top"><code>'d'</code>
      <td valign="top"> <tt>'&#92;u0064'</tt>
      <td> Day of month, formatted as two digits with leading zeros as
      necessary, i.e. <code>01 - 31</code>, where "<code>01</code>" is the first day
      of the month. 
 <tr><td valign="top"><code>'e'</code>
      <td valign="top"> <tt>'&#92;u0065'</tt>
      <td> Day of month, formatted as two digits, i.e. <code>1 - 31</code> where
      "<code>1</code>" is the first day of the month. 
 </table>
  
 <p> The following conversion characters are used for formatting common
  date/time compositions. 
 <table cellpadding=5 summary="composites">
  
 <tr><td valign="top"><code>'R'</code>
      <td valign="top"> <tt>'&#92;u0052'</tt>
      <td> Time formatted for the 24-hour clock as <code>"%tH:%tM"</code>
  
 <tr><td valign="top"><code>'T'</code>
      <td valign="top"> <tt>'&#92;u0054'</tt>
      <td> Time formatted for the 24-hour clock as <code>"%tH:%tM:%tS"</code>.
  
 <tr><td valign="top"><code>'r'</code>
      <td valign="top"> <tt>'&#92;u0072'</tt>
      <td> Time formatted for the 12-hour clock as <code>"%tI:%tM:%tS
      %Tp"</code>
 .  The location of the morning or afternoon marker
      (<code>'%Tp'</code>) may be locale-dependent. 
 <tr><td valign="top"><code>'D'</code>
      <td valign="top"> <tt>'&#92;u0044'</tt>
      <td> Date formatted as <code>"%tm/%td/%ty"</code>.
  
 <tr><td valign="top"><code>'F'</code>
      <td valign="top"> <tt>'&#92;u0046'</tt>
      <td> <a href="http://www.w3.org/TR/NOTE-datetime">ISO&nbsp;8601</a>
      complete date formatted as <code>"%tY-%tm-%td"</code>.
  
 <tr><td valign="top"><code>'c'</code>
      <td valign="top"> <tt>'&#92;u0063'</tt>
      <td> Date and time formatted as <code>"%ta %tb %td %tT %tZ %tY"</code>,
      e.g. <code>"Sun Jul 20 16:17:00 EDT 1969"</code>.
  
 </table>
  
 <p> The <code>'-'</code> flag defined for <a href="#dFlags">General
  conversions</a> applies.  If the <code>'#'</code> flag is given, then a <code>FormatFlagsConversionMismatchException</code>
  will be thrown. 
 <p> The width is the minimum number of characters to
  be written to the output.  If the length of the converted value is less than the 
 <code>width</code> then the output will be padded by spaces
  (<tt>'&#92;u0020'</tt>) until the total number of characters equals width.
  The padding is on the left by default.  If the <code>'-'</code> flag is given
  then the padding will be on the right.  If width is not specified then there
  is no minimum. 
 <p> The precision is not applicable.  If the precision is specified then an 
 <code>IllegalFormatPrecisionException</code> will be thrown. 
 <h4><a name="dper">Percent</a></h4>
  
 <p> The conversion does not correspond to any argument. 
 <table cellpadding=5 summary="DTConv">
  
 <tr><td valign="top"><code>'%'</code>
      <td> The result is a literal <code>'%'</code> (<tt>'&#92;u0025'</tt>)
  
 <p> The width is the minimum number of characters to
  be written to the output including the <code>'%'</code>.  If the length of the
  converted value is less than the <code>width</code> then the output will be
  padded by spaces (<tt>'&#92;u0020'</tt>) until the total number of
  characters equals width.  The padding is on the left.  If width is not
  specified then just the <code>'%'</code> is output. 
 <p> The <code>'-'</code> flag defined for <a href="#dFlags">General
  conversions</a> applies.  If any other flags are provided, then a 
 <code>FormatFlagsConversionMismatchException</code> will be thrown. 
 <p> The precision is not applicable.  If the precision is specified an 
 <code>IllegalFormatPrecisionException</code> will be thrown. 
 </table>
  
 <h4><a name="dls">Line Separator</a></h4>
  
 <p> The conversion does not correspond to any argument. 
 <table cellpadding=5 summary="DTConv">
  
 <tr><td valign="top"><code>'n'</code>
      <td> the platform-specific line separator as returned by <code>System.getProperty("line.separator")</code>
 .
  
 </table>
  
 <p> Flags, width, and precision are not applicable.  If any are provided an 
 <code>IllegalFormatFlagsException</code>, <code>IllegalFormatWidthException</code>,
  and <code>IllegalFormatPrecisionException</code>, respectively will be thrown. 
 <h4><a name="dpos">Argument Index</a></h4>
  
 <p> Format specifiers can reference arguments in three ways: 
 <ul>
  
 <li> <i>Explicit indexing</i> is used when the format specifier contains an
  argument index.  The argument index is a decimal integer indicating the
  position of the argument in the argument list.  The first argument is
  referenced by "<code>1$</code>", the second by "<code>2$</code>", etc.  An argument
  may be referenced more than once. 
 <p> For example: 
 <blockquote>@code

    formatter.format("%4$s %3$s %2$s %1$s %4$s %3$s %2$s %1$s",
                     "a", "b", "c", "d")
    // -&gt; "d c b a d c b a" 
  
@endcode</blockquote>
  
 <li> <i>Relative indexing</i> is used when the format specifier contains a 
 <code>'<'</code> (<tt>'&#92;u003c'</tt>) flag which causes the argument for
  the previous format specifier to be re-used.  If there is no previous
  argument, then a <code>MissingFormatArgumentException</code> is thrown. 
 <blockquote>@code

     formatter.format("%s %s %&lt;s %&lt;s", "a", "b", "c", "d")
     // -&gt; "a b b b"
     // "c" and "d" are ignored because they are not referenced 
  
@endcode</blockquote>
  
 <li> <i>Ordinary indexing</i> is used when the format specifier contains
  neither an argument index nor a <code>'<'</code> flag.  Each format specifier
  which uses ordinary indexing is assigned a sequential implicit index into
  argument list which is independent of the indices used by explicit or
  relative indexing. 
 <blockquote>@code

    formatter.format("%s %s %s %s", "a", "b", "c", "d")
    // -&gt; "a b c d" 
  
@endcode</blockquote>
  
 </ul>
  
 <p> It is possible to have a format string which uses all forms of indexing,
  for example: 
 <blockquote>@code

    formatter.format("%2$s %s %&lt;s %s", "a", "b", "c", "d")
    // -&gt; "b a a b"
    // "c" and "d" are ignored because they are not referenced 
  
@endcode</blockquote>
  
 <p> The maximum number of arguments is limited by the maximum dimension of a
  Java array as defined by 
 <cite>The Java&trade; Virtual Machine Specification</cite>.
  If the argument index is does not correspond to an
  available argument, then a <code>MissingFormatArgumentException</code> is thrown. 
 <p> If there are more arguments than format specifiers, the extra arguments
  are ignored. 
 <p> Unless otherwise specified, passing a <code>null</code> argument to any
  method or constructor in this class will cause a <code>NullPointerException</code>
  to be thrown.
 @author Iris Clark
 @since 1.5
 */
@interface JavaUtilFormatter : NSObject < JavaIoCloseable, JavaIoFlushable >

#pragma mark Public

/*!
 @brief Constructs a new formatter.
 <p> The destination of the formatted output is a <code>StringBuilder</code>
  which may be retrieved by invoking <code>out()</code> and whose
  current content may be converted into a string by invoking <code>toString()</code>
 .  The locale used is the default locale
  for 
 formatting for this instance of the Java
  virtual machine.
 */
- (instancetype __nonnull)init;

/*!
 @brief Constructs a new formatter with the specified destination.
 <p> The locale used is the default locale
  for 
 formatting for this instance of the Java
  virtual machine.
 @param a Destination for the formatted output.  If 
 <code>a</code>  is          <code>null</code>
   then a <code>StringBuilder</code>  will be created.
 */
- (instancetype __nonnull)initWithJavaLangAppendable:(id<JavaLangAppendable>)a;

/*!
 @brief Constructs a new formatter with the specified destination and locale.
 @param a Destination for the formatted output.  If 
 <code>a</code>  is          <code>null</code>
   then a <code>StringBuilder</code>  will be created.
 @param l The 
 locale  to apply during          formatting.  If 
 <code>l</code>  is <code>null</code>  then no localization          is applied.
 */
- (instancetype __nonnull)initWithJavaLangAppendable:(id<JavaLangAppendable>)a
                                  withJavaUtilLocale:(JavaUtilLocale *)l;

/*!
 @brief Constructs a new formatter with the specified file.
 <p> The charset used is the default charset
  for this
  instance of the Java virtual machine. 
 <p> The locale used is the default locale
  for 
 formatting for this instance of the Java
  virtual machine.
 @param file The file to use as the destination of this formatter.  If the
           file exists then it will be truncated to zero size; otherwise,
           a new file will be created.  The output will be written to the
           file and is buffered.
 @throw SecurityException
 If a security manager is present and <code>checkWrite(file.getPath())</code>
  denies
           write access to the file
 @throw FileNotFoundException
 If the given file object does not denote an existing, writable
           regular file and a new regular file of that name cannot be
           created, or if some other error occurs while opening or
           creating the file
 */
- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)file;

/*!
 @brief Constructs a new formatter with the specified file and charset.
 <p> The locale used is the default locale
  for 
 formatting for this instance of the Java
  virtual machine.
 @param file The file to use as the destination of this formatter.  If the
           file exists then it will be truncated to zero size; otherwise,
           a new file will be created.  The output will be written to the
           file and is buffered.
 @param csn The name of a supported 
 charset
 @throw FileNotFoundException
 If the given file object does not denote an existing, writable
           regular file and a new regular file of that name cannot be
           created, or if some other error occurs while opening or
           creating the file
 @throw SecurityException
 If a security manager is present and <code>checkWrite(file.getPath())</code>
  denies
           write access to the file
 @throw UnsupportedEncodingException
 If the named charset is not supported
 */
- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)file
                                withNSString:(NSString *)csn;

/*!
 @brief Constructs a new formatter with the specified file, charset, and
  locale.
 @param file The file to use as the destination of this formatter.  If the
           file exists then it will be truncated to zero size; otherwise,
           a new file will be created.  The output will be written to the
           file and is buffered.
 @param csn The name of a supported 
 charset
 @param l The 
 locale  to apply during          formatting.  If 
 <code>l</code>  is <code>null</code>  then no localization          is applied.
 @throw FileNotFoundException
 If the given file object does not denote an existing, writable
           regular file and a new regular file of that name cannot be
           created, or if some other error occurs while opening or
           creating the file
 @throw SecurityException
 If a security manager is present and <code>checkWrite(file.getPath())</code>
  denies
           write access to the file
 @throw UnsupportedEncodingException
 If the named charset is not supported
 */
- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)file
                                withNSString:(NSString *)csn
                          withJavaUtilLocale:(JavaUtilLocale *)l;

/*!
 @brief Constructs a new formatter with the specified locale.
 <p> The destination of the formatted output is a <code>StringBuilder</code>
  which may be retrieved by invoking <code>out()</code> and whose current
  content may be converted into a string by invoking <code>toString()</code>
 .
 @param l The 
 locale  to apply during          formatting.  If 
 <code>l</code>  is <code>null</code>  then no localization          is applied.
 */
- (instancetype __nonnull)initWithJavaUtilLocale:(JavaUtilLocale *)l;

/*!
 @brief Constructs a new formatter with the specified output stream.
 <p> The charset used is the default charset
  for this
  instance of the Java virtual machine. 
 <p> The locale used is the default locale
  for 
 formatting for this instance of the Java
  virtual machine.
 @param os The output stream to use as the destination of this formatter.
           The output will be buffered.
 */
- (instancetype __nonnull)initWithJavaIoOutputStream:(JavaIoOutputStream *)os;

/*!
 @brief Constructs a new formatter with the specified output stream and
  charset.
 <p> The locale used is the default locale
  for 
 formatting for this instance of the Java
  virtual machine.
 @param os The output stream to use as the destination of this formatter.
           The output will be buffered.
 @param csn The name of a supported 
 charset
 @throw UnsupportedEncodingException
 If the named charset is not supported
 */
- (instancetype __nonnull)initWithJavaIoOutputStream:(JavaIoOutputStream *)os
                                        withNSString:(NSString *)csn;

/*!
 @brief Constructs a new formatter with the specified output stream, charset,
  and locale.
 @param os The output stream to use as the destination of this formatter.
           The output will be buffered.
 @param csn The name of a supported 
 charset
 @param l The 
 locale  to apply during          formatting.  If 
 <code>l</code>  is <code>null</code>  then no localization          is applied.
 @throw UnsupportedEncodingException
 If the named charset is not supported
 */
- (instancetype __nonnull)initWithJavaIoOutputStream:(JavaIoOutputStream *)os
                                        withNSString:(NSString *)csn
                                  withJavaUtilLocale:(JavaUtilLocale *)l;

/*!
 @brief Constructs a new formatter with the specified print stream.
 <p> The locale used is the default locale
  for 
 formatting for this instance of the Java
  virtual machine. 
 <p> Characters are written to the given <code>PrintStream</code>
  object and are therefore encoded using that object's
  charset.
 @param ps The stream to use as the destination of this formatter.
 */
- (instancetype __nonnull)initWithJavaIoPrintStream:(JavaIoPrintStream *)ps;

/*!
 @brief Constructs a new formatter with the specified file name.
 <p> The charset used is the default charset
  for this
  instance of the Java virtual machine. 
 <p> The locale used is the default locale
  for 
 formatting for this instance of the Java
  virtual machine.
 @param fileName The name of the file to use as the destination of this
           formatter.  If the file exists then it will be truncated to
           zero size; otherwise, a new file will be created.  The output
           will be written to the file and is buffered.
 @throw SecurityException
 If a security manager is present and <code>checkWrite(fileName)</code>
  denies write
           access to the file
 @throw FileNotFoundException
 If the given file name does not denote an existing, writable
           regular file and a new regular file of that name cannot be
           created, or if some other error occurs while opening or
           creating the file
 */
- (instancetype __nonnull)initWithNSString:(NSString *)fileName;

/*!
 @brief Constructs a new formatter with the specified file name and charset.
 <p> The locale used is the default locale
  for 
 formatting for this instance of the Java
  virtual machine.
 @param fileName The name of the file to use as the destination of this
           formatter.  If the file exists then it will be truncated to
           zero size; otherwise, a new file will be created.  The output
           will be written to the file and is buffered.
 @param csn The name of a supported 
 charset
 @throw FileNotFoundException
 If the given file name does not denote an existing, writable
           regular file and a new regular file of that name cannot be
           created, or if some other error occurs while opening or
           creating the file
 @throw SecurityException
 If a security manager is present and <code>checkWrite(fileName)</code>
  denies write
           access to the file
 @throw UnsupportedEncodingException
 If the named charset is not supported
 */
- (instancetype __nonnull)initWithNSString:(NSString *)fileName
                              withNSString:(NSString *)csn;

/*!
 @brief Constructs a new formatter with the specified file name, charset, and
  locale.
 @param fileName The name of the file to use as the destination of this
           formatter.  If the file exists then it will be truncated to
           zero size; otherwise, a new file will be created.  The output
           will be written to the file and is buffered.
 @param csn The name of a supported 
 charset
 @param l The 
 locale  to apply during          formatting.  If 
 <code>l</code>  is <code>null</code>  then no localization          is applied.
 @throw FileNotFoundException
 If the given file name does not denote an existing, writable
           regular file and a new regular file of that name cannot be
           created, or if some other error occurs while opening or
           creating the file
 @throw SecurityException
 If a security manager is present and <code>checkWrite(fileName)</code>
  denies write
           access to the file
 @throw UnsupportedEncodingException
 If the named charset is not supported
 */
- (instancetype __nonnull)initWithNSString:(NSString *)fileName
                              withNSString:(NSString *)csn
                        withJavaUtilLocale:(JavaUtilLocale *)l;

/*!
 @brief Closes this formatter.If the destination implements the <code>java.io.Closeable</code>
  interface, its <code>close</code> method will be invoked.
 <p> Closing a formatter allows it to release resources it may be holding
  (such as open files).  If the formatter is already closed, then invoking
  this method has no effect. 
 <p> Attempting to invoke any methods except <code>ioException()</code> in
  this formatter after it has been closed will result in a <code>FormatterClosedException</code>
 .
 */
- (void)close;

/*!
 @brief Flushes this formatter.If the destination implements the <code>java.io.Flushable</code>
  interface, its <code>flush</code> method will be invoked.
 <p> Flushing a formatter writes any buffered output in the destination
  to the underlying stream.
 @throw FormatterClosedException
 If this formatter has been closed by invoking its <code>close()</code>
  method
 */
- (void)flush;

/*!
 @brief Writes a formatted string to this object's destination using the
  specified locale, format string, and arguments.
 @param l The 
 locale  to apply during          formatting.  If 
 <code>l</code>  is <code>null</code>  then no localization          is applied.  This does not change this object's locale that was
           set during construction.
 @param format A format string as described in 
  <a href="#syntax"> Format string          syntax
  </a>
 @param args Arguments referenced by the format specifiers in the format
           string.  If there are more arguments than format specifiers, the
           extra arguments are ignored.  The maximum number of arguments is
           limited by the maximum dimension of a Java array as defined by
            <cite> The Java &trade;  Virtual Machine Specification </cite> .
 @throw IllegalFormatException
 If a format string contains an illegal syntax, a format
           specifier that is incompatible with the given arguments,
           insufficient arguments given the format string, or other
           illegal conditions.  For specification of all possible
           formatting errors, see the <a href="#detail">Details</a>
           section of the formatter class specification.
 @throw FormatterClosedException
 If this formatter has been closed by invoking its <code>close()</code>
  method
 @return This formatter
 */
- (JavaUtilFormatter *)formatWithJavaUtilLocale:(JavaUtilLocale *)l
                                   withNSString:(NSString *)format
                              withNSObjectArray:(IOSObjectArray *)args;

/*!
 @brief Writes a formatted string to this object's destination using the
  specified format string and arguments.The locale used is the one
  defined during the construction of this formatter.
 @param format A format string as described in 
  <a href="#syntax"> Format string          syntax
  </a> .
 @param args Arguments referenced by the format specifiers in the format
           string.  If there are more arguments than format specifiers, the
           extra arguments are ignored.  The maximum number of arguments is
           limited by the maximum dimension of a Java array as defined by
            <cite> The Java &trade;  Virtual Machine Specification </cite> .
 @throw IllegalFormatException
 If a format string contains an illegal syntax, a format
           specifier that is incompatible with the given arguments,
           insufficient arguments given the format string, or other
           illegal conditions.  For specification of all possible
           formatting errors, see the <a href="#detail">Details</a>
           section of the formatter class specification.
 @throw FormatterClosedException
 If this formatter has been closed by invoking its <code>close()</code>
  method
 @return This formatter
 */
- (JavaUtilFormatter *)formatWithNSString:(NSString *)format
                        withNSObjectArray:(IOSObjectArray *)args;

/*!
 @brief Returns the <code>IOException</code> last thrown by this formatter's <code>Appendable</code>
 .
 <p> If the destination's <code>append()</code> method never throws 
 <code>IOException</code>, then this method will always return <code>null</code>.
 @return The last exception thrown by the Appendable or <code>null</code> if
           no such exception exists.
 */
- (JavaIoIOException *)ioException;

/*!
 @brief Returns the locale set by the construction of this formatter.
 <p> The <code>format</code> method
  for this object which has a locale argument does not change this value.
 @return <code>null</code> if no localization is applied, otherwise a
           locale
 @throw FormatterClosedException
 If this formatter has been closed by invoking its <code>close()</code>
  method
 */
- (JavaUtilLocale *)locale;

/*!
 @brief Returns the destination for the output.
 @return The destination for the output
 @throw FormatterClosedException
 If this formatter has been closed by invoking its <code>close()</code>
  method
 */
- (id<JavaLangAppendable>)out;

/*!
 @brief Returns the result of invoking <code>toString()</code> on the destination
  for the output.For example, the following code formats text into a 
 <code>StringBuilder</code> then retrieves the resultant string: 
 <blockquote>@code

    Formatter f = new Formatter();
    f.format("Last reboot at %tc", lastRebootDate);
    String s = f.toString();
    // -&gt; s == "Last reboot at Sat Jan 01 00:00:00 PST 2000" 
  
@endcode</blockquote>
  
 <p> An invocation of this method behaves in exactly the same way as the invocation 
 @code

      out().toString() 
@endcode
  
 <p> Depending on the specification of <code>toString</code> for the <code>Appendable</code>
 , the returned string may or may not contain the characters
  written to the destination.
 For instance, buffers typically return
  their contents in <code>toString()</code>, but streams cannot since the
  data is discarded.
 @return The result of invoking <code>toString()</code> on the destination
           for the output
 @throw FormatterClosedException
 If this formatter has been closed by invoking its <code>close()</code>
  method
 */
- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilFormatter)

FOUNDATION_EXPORT void JavaUtilFormatter_init(JavaUtilFormatter *self);

FOUNDATION_EXPORT JavaUtilFormatter *new_JavaUtilFormatter_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilFormatter *create_JavaUtilFormatter_init(void);

FOUNDATION_EXPORT void JavaUtilFormatter_initWithJavaLangAppendable_(JavaUtilFormatter *self, id<JavaLangAppendable> a);

FOUNDATION_EXPORT JavaUtilFormatter *new_JavaUtilFormatter_initWithJavaLangAppendable_(id<JavaLangAppendable> a) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilFormatter *create_JavaUtilFormatter_initWithJavaLangAppendable_(id<JavaLangAppendable> a);

FOUNDATION_EXPORT void JavaUtilFormatter_initWithJavaUtilLocale_(JavaUtilFormatter *self, JavaUtilLocale *l);

FOUNDATION_EXPORT JavaUtilFormatter *new_JavaUtilFormatter_initWithJavaUtilLocale_(JavaUtilLocale *l) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilFormatter *create_JavaUtilFormatter_initWithJavaUtilLocale_(JavaUtilLocale *l);

FOUNDATION_EXPORT void JavaUtilFormatter_initWithJavaLangAppendable_withJavaUtilLocale_(JavaUtilFormatter *self, id<JavaLangAppendable> a, JavaUtilLocale *l);

FOUNDATION_EXPORT JavaUtilFormatter *new_JavaUtilFormatter_initWithJavaLangAppendable_withJavaUtilLocale_(id<JavaLangAppendable> a, JavaUtilLocale *l) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilFormatter *create_JavaUtilFormatter_initWithJavaLangAppendable_withJavaUtilLocale_(id<JavaLangAppendable> a, JavaUtilLocale *l);

FOUNDATION_EXPORT void JavaUtilFormatter_initWithNSString_(JavaUtilFormatter *self, NSString *fileName);

FOUNDATION_EXPORT JavaUtilFormatter *new_JavaUtilFormatter_initWithNSString_(NSString *fileName) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilFormatter *create_JavaUtilFormatter_initWithNSString_(NSString *fileName);

FOUNDATION_EXPORT void JavaUtilFormatter_initWithNSString_withNSString_(JavaUtilFormatter *self, NSString *fileName, NSString *csn);

FOUNDATION_EXPORT JavaUtilFormatter *new_JavaUtilFormatter_initWithNSString_withNSString_(NSString *fileName, NSString *csn) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilFormatter *create_JavaUtilFormatter_initWithNSString_withNSString_(NSString *fileName, NSString *csn);

FOUNDATION_EXPORT void JavaUtilFormatter_initWithNSString_withNSString_withJavaUtilLocale_(JavaUtilFormatter *self, NSString *fileName, NSString *csn, JavaUtilLocale *l);

FOUNDATION_EXPORT JavaUtilFormatter *new_JavaUtilFormatter_initWithNSString_withNSString_withJavaUtilLocale_(NSString *fileName, NSString *csn, JavaUtilLocale *l) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilFormatter *create_JavaUtilFormatter_initWithNSString_withNSString_withJavaUtilLocale_(NSString *fileName, NSString *csn, JavaUtilLocale *l);

FOUNDATION_EXPORT void JavaUtilFormatter_initWithJavaIoFile_(JavaUtilFormatter *self, JavaIoFile *file);

FOUNDATION_EXPORT JavaUtilFormatter *new_JavaUtilFormatter_initWithJavaIoFile_(JavaIoFile *file) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilFormatter *create_JavaUtilFormatter_initWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT void JavaUtilFormatter_initWithJavaIoFile_withNSString_(JavaUtilFormatter *self, JavaIoFile *file, NSString *csn);

FOUNDATION_EXPORT JavaUtilFormatter *new_JavaUtilFormatter_initWithJavaIoFile_withNSString_(JavaIoFile *file, NSString *csn) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilFormatter *create_JavaUtilFormatter_initWithJavaIoFile_withNSString_(JavaIoFile *file, NSString *csn);

FOUNDATION_EXPORT void JavaUtilFormatter_initWithJavaIoFile_withNSString_withJavaUtilLocale_(JavaUtilFormatter *self, JavaIoFile *file, NSString *csn, JavaUtilLocale *l);

FOUNDATION_EXPORT JavaUtilFormatter *new_JavaUtilFormatter_initWithJavaIoFile_withNSString_withJavaUtilLocale_(JavaIoFile *file, NSString *csn, JavaUtilLocale *l) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilFormatter *create_JavaUtilFormatter_initWithJavaIoFile_withNSString_withJavaUtilLocale_(JavaIoFile *file, NSString *csn, JavaUtilLocale *l);

FOUNDATION_EXPORT void JavaUtilFormatter_initWithJavaIoPrintStream_(JavaUtilFormatter *self, JavaIoPrintStream *ps);

FOUNDATION_EXPORT JavaUtilFormatter *new_JavaUtilFormatter_initWithJavaIoPrintStream_(JavaIoPrintStream *ps) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilFormatter *create_JavaUtilFormatter_initWithJavaIoPrintStream_(JavaIoPrintStream *ps);

FOUNDATION_EXPORT void JavaUtilFormatter_initWithJavaIoOutputStream_(JavaUtilFormatter *self, JavaIoOutputStream *os);

FOUNDATION_EXPORT JavaUtilFormatter *new_JavaUtilFormatter_initWithJavaIoOutputStream_(JavaIoOutputStream *os) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilFormatter *create_JavaUtilFormatter_initWithJavaIoOutputStream_(JavaIoOutputStream *os);

FOUNDATION_EXPORT void JavaUtilFormatter_initWithJavaIoOutputStream_withNSString_(JavaUtilFormatter *self, JavaIoOutputStream *os, NSString *csn);

FOUNDATION_EXPORT JavaUtilFormatter *new_JavaUtilFormatter_initWithJavaIoOutputStream_withNSString_(JavaIoOutputStream *os, NSString *csn) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilFormatter *create_JavaUtilFormatter_initWithJavaIoOutputStream_withNSString_(JavaIoOutputStream *os, NSString *csn);

FOUNDATION_EXPORT void JavaUtilFormatter_initWithJavaIoOutputStream_withNSString_withJavaUtilLocale_(JavaUtilFormatter *self, JavaIoOutputStream *os, NSString *csn, JavaUtilLocale *l);

FOUNDATION_EXPORT JavaUtilFormatter *new_JavaUtilFormatter_initWithJavaIoOutputStream_withNSString_withJavaUtilLocale_(JavaIoOutputStream *os, NSString *csn, JavaUtilLocale *l) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilFormatter *create_JavaUtilFormatter_initWithJavaIoOutputStream_withNSString_withJavaUtilLocale_(JavaIoOutputStream *os, NSString *csn, JavaUtilLocale *l);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilFormatter)

#endif

#if !defined (JavaUtilFormatter_BigDecimalLayoutForm_) && (INCLUDE_ALL_JavaUtilFormatter || defined(INCLUDE_JavaUtilFormatter_BigDecimalLayoutForm))
#define JavaUtilFormatter_BigDecimalLayoutForm_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, JavaUtilFormatter_BigDecimalLayoutForm_Enum) {
  JavaUtilFormatter_BigDecimalLayoutForm_Enum_SCIENTIFIC = 0,
  JavaUtilFormatter_BigDecimalLayoutForm_Enum_DECIMAL_FLOAT = 1,
};

/*!
 @brief Enum for <code>BigDecimal</code> formatting.
 */
@interface JavaUtilFormatter_BigDecimalLayoutForm : JavaLangEnum

@property (readonly, class, nonnull) JavaUtilFormatter_BigDecimalLayoutForm *SCIENTIFIC NS_SWIFT_NAME(SCIENTIFIC);
@property (readonly, class, nonnull) JavaUtilFormatter_BigDecimalLayoutForm *DECIMAL_FLOAT NS_SWIFT_NAME(DECIMAL_FLOAT);
+ (JavaUtilFormatter_BigDecimalLayoutForm * __nonnull)SCIENTIFIC;

+ (JavaUtilFormatter_BigDecimalLayoutForm * __nonnull)DECIMAL_FLOAT;

#pragma mark Public

+ (JavaUtilFormatter_BigDecimalLayoutForm *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (JavaUtilFormatter_BigDecimalLayoutForm_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(JavaUtilFormatter_BigDecimalLayoutForm)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT JavaUtilFormatter_BigDecimalLayoutForm *JavaUtilFormatter_BigDecimalLayoutForm_values_[];

/*!
 @brief Format the <code>BigDecimal</code> in computerized scientific notation.
 */
inline JavaUtilFormatter_BigDecimalLayoutForm *JavaUtilFormatter_BigDecimalLayoutForm_get_SCIENTIFIC(void);
J2OBJC_ENUM_CONSTANT(JavaUtilFormatter_BigDecimalLayoutForm, SCIENTIFIC)

/*!
 @brief Format the <code>BigDecimal</code> as a decimal number.
 */
inline JavaUtilFormatter_BigDecimalLayoutForm *JavaUtilFormatter_BigDecimalLayoutForm_get_DECIMAL_FLOAT(void);
J2OBJC_ENUM_CONSTANT(JavaUtilFormatter_BigDecimalLayoutForm, DECIMAL_FLOAT)

FOUNDATION_EXPORT IOSObjectArray *JavaUtilFormatter_BigDecimalLayoutForm_values(void);

FOUNDATION_EXPORT JavaUtilFormatter_BigDecimalLayoutForm *JavaUtilFormatter_BigDecimalLayoutForm_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT JavaUtilFormatter_BigDecimalLayoutForm *JavaUtilFormatter_BigDecimalLayoutForm_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilFormatter_BigDecimalLayoutForm)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilFormatter")
