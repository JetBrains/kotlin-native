//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/IllegalFormatPrecisionException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilIllegalFormatPrecisionException")
#ifdef RESTRICT_JavaUtilIllegalFormatPrecisionException
#define INCLUDE_ALL_JavaUtilIllegalFormatPrecisionException 0
#else
#define INCLUDE_ALL_JavaUtilIllegalFormatPrecisionException 1
#endif
#undef RESTRICT_JavaUtilIllegalFormatPrecisionException

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilIllegalFormatPrecisionException_) && (INCLUDE_ALL_JavaUtilIllegalFormatPrecisionException || defined(INCLUDE_JavaUtilIllegalFormatPrecisionException))
#define JavaUtilIllegalFormatPrecisionException_

#define RESTRICT_JavaUtilIllegalFormatException 1
#define INCLUDE_JavaUtilIllegalFormatException 1
#include "java/util/IllegalFormatException.h"

/*!
 @brief Unchecked exception thrown when the precision is a negative value other than 
 <tt>-1</tt>, the conversion does not support a precision, or the value is
  otherwise unsupported.
 @since 1.5
 */
@interface JavaUtilIllegalFormatPrecisionException : JavaUtilIllegalFormatException

#pragma mark Public

/*!
 @brief Constructs an instance of this class with the specified precision.
 @param p The precision
 */
- (instancetype __nonnull)initWithInt:(jint)p;

- (NSString *)getMessage;

/*!
 @brief Returns the precision
 @return The precision
 */
- (jint)getPrecision;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilIllegalFormatPrecisionException)

FOUNDATION_EXPORT void JavaUtilIllegalFormatPrecisionException_initWithInt_(JavaUtilIllegalFormatPrecisionException *self, jint p);

FOUNDATION_EXPORT JavaUtilIllegalFormatPrecisionException *new_JavaUtilIllegalFormatPrecisionException_initWithInt_(jint p) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilIllegalFormatPrecisionException *create_JavaUtilIllegalFormatPrecisionException_initWithInt_(jint p);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilIllegalFormatPrecisionException)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilIllegalFormatPrecisionException")
