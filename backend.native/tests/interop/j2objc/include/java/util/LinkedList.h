//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/LinkedList.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilLinkedList")
#ifdef RESTRICT_JavaUtilLinkedList
#define INCLUDE_ALL_JavaUtilLinkedList 0
#else
#define INCLUDE_ALL_JavaUtilLinkedList 1
#endif
#undef RESTRICT_JavaUtilLinkedList

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilLinkedList_) && (INCLUDE_ALL_JavaUtilLinkedList || defined(INCLUDE_JavaUtilLinkedList))
#define JavaUtilLinkedList_

#define RESTRICT_JavaUtilAbstractSequentialList 1
#define INCLUDE_JavaUtilAbstractSequentialList 1
#include "java/util/AbstractSequentialList.h"

#define RESTRICT_JavaUtilList 1
#define INCLUDE_JavaUtilList 1
#include "java/util/List.h"

#define RESTRICT_JavaUtilDeque 1
#define INCLUDE_JavaUtilDeque 1
#include "java/util/Deque.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class IOSObjectArray;
@class JavaUtilLinkedList_Node;
@protocol JavaUtilCollection;
@protocol JavaUtilIterator;
@protocol JavaUtilListIterator;
@protocol JavaUtilSpliterator;

/*!
 @brief Doubly-linked list implementation of the <code>List</code> and <code>Deque</code>
  interfaces.Implements all optional list operations, and permits all
  elements (including <code>null</code>).
 <p>All of the operations perform as could be expected for a doubly-linked
  list.  Operations that index into the list will traverse the list from
  the beginning or the end, whichever is closer to the specified index. 
 <p><strong>Note that this implementation is not synchronized.</strong>
  If multiple threads access a linked list concurrently, and at least
  one of the threads modifies the list structurally, it <i>must</i> be
  synchronized externally.  (A structural modification is any operation
  that adds or deletes one or more elements; merely setting the value of
  an element is not a structural modification.)  This is typically
  accomplished by synchronizing on some object that naturally
  encapsulates the list.
  If no such object exists, the list should be "wrapped" using the 
 <code>Collections.synchronizedList</code>
  method.  This is best done at creation time, to prevent accidental
  unsynchronized access to the list:@code

    List list = Collections.synchronizedList(new LinkedList(...));
@endcode
  
 <p>The iterators returned by this class's <code>iterator</code> and 
 <code>listIterator</code> methods are <i>fail-fast</i>: if the list is
  structurally modified at any time after the iterator is created, in
  any way except through the Iterator's own <code>remove</code> or 
 <code>add</code> methods, the iterator will throw a <code>ConcurrentModificationException</code>
 .  Thus, in the face of concurrent
  modification, the iterator fails quickly and cleanly, rather than
  risking arbitrary, non-deterministic behavior at an undetermined
  time in the future. 
 <p>Note that the fail-fast behavior of an iterator cannot be guaranteed
  as it is, generally speaking, impossible to make any hard guarantees in the
  presence of unsynchronized concurrent modification.  Fail-fast iterators
  throw <code>ConcurrentModificationException</code> on a best-effort basis.
  Therefore, it would be wrong to write a program that depended on this
  exception for its correctness:   <i>the fail-fast behavior of iterators
  should be used only to detect bugs.</i>
  
 <p>This class is a member of the 
 <a href="{@@docRoot}/../technotes/guides/collections/index.html">
  Java Collections Framework</a>.
 @author Josh Bloch
 - seealso: List
 - seealso: ArrayList
 @since 1.2
 */
@interface JavaUtilLinkedList : JavaUtilAbstractSequentialList < JavaUtilList, JavaUtilDeque, NSCopying, JavaIoSerializable > {
 @public
  jint size_;
  /*!
   @brief Pointer to first node.
   Invariant: (first == null && last == null) ||
             (first.prev == null && first.item != null)
   */
  JavaUtilLinkedList_Node *first_;
  /*!
   @brief Pointer to last node.
   Invariant: (first == null && last == null) ||
             (last.next == null && last.item != null)
   */
  JavaUtilLinkedList_Node *last_;
}

#pragma mark Public

/*!
 @brief Constructs an empty list.
 */
- (instancetype __nonnull)init;

/*!
 @brief Constructs a list containing the elements of the specified
  collection, in the order they are returned by the collection's
  iterator.
 @param c the collection whose elements are to be placed into this list
 @throw NullPointerExceptionif the specified collection is null
 */
- (instancetype __nonnull)initWithJavaUtilCollection:(id<JavaUtilCollection>)c;

/*!
 @brief Appends the specified element to the end of this list.
 <p>This method is equivalent to <code>addLast</code>.
 @param e element to be appended to this list
 @return <code>true</code> (as specified by <code>Collection.add</code>)
 */
- (jboolean)addWithId:(id)e;

/*!
 @brief Inserts the specified element at the specified position in this list.
 Shifts the element currently at that position (if any) and any
  subsequent elements to the right (adds one to their indices).
 @param index index at which the specified element is to be inserted
 @param element element to be inserted
 @throw IndexOutOfBoundsException
 */
- (void)addWithInt:(jint)index
            withId:(id)element;

/*!
 @brief Appends all of the elements in the specified collection to the end of
  this list, in the order that they are returned by the specified
  collection's iterator.The behavior of this operation is undefined if
  the specified collection is modified while the operation is in
  progress.
 (Note that this will occur if the specified collection is
  this list, and it's nonempty.)
 @param c collection containing elements to be added to this list
 @return <code>true</code> if this list changed as a result of the call
 @throw NullPointerExceptionif the specified collection is null
 */
- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)c;

/*!
 @brief Inserts all of the elements in the specified collection into this
  list, starting at the specified position.Shifts the element
  currently at that position (if any) and any subsequent elements to
  the right (increases their indices).
 The new elements will appear
  in the list in the order that they are returned by the
  specified collection's iterator.
 @param index index at which to insert the first element               from the specified collection
 @param c collection containing elements to be added to this list
 @return <code>true</code> if this list changed as a result of the call
 @throw IndexOutOfBoundsException
 @throw NullPointerExceptionif the specified collection is null
 */
- (jboolean)addAllWithInt:(jint)index
   withJavaUtilCollection:(id<JavaUtilCollection>)c;

/*!
 @brief Inserts the specified element at the beginning of this list.
 @param e the element to add
 */
- (void)addFirstWithId:(id)e;

/*!
 @brief Appends the specified element to the end of this list.
 <p>This method is equivalent to <code>add</code>.
 @param e the element to add
 */
- (void)addLastWithId:(id)e;

/*!
 @brief Removes all of the elements from this list.
 The list will be empty after this call returns.
 */
- (void)clear;

/*!
 @brief Returns a shallow copy of this <code>LinkedList</code>.
 (The elements
  themselves are not cloned.)
 @return a shallow copy of this <code>LinkedList</code> instance
 */
- (id __nonnull)java_clone;

/*!
 @brief Returns <code>true</code> if this list contains the specified element.
 More formally, returns <code>true</code> if and only if this list contains
  at least one element <code>e</code> such that 
 <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.
 @param o element whose presence in this list is to be tested
 @return <code>true</code> if this list contains the specified element
 */
- (jboolean)containsWithId:(id)o;

/*!
 @since 1.6
 */
- (id<JavaUtilIterator> __nonnull)descendingIterator;

/*!
 @brief Retrieves, but does not remove, the head (first element) of this list.
 @return the head of this list
 @throw NoSuchElementExceptionif this list is empty
 @since 1.5
 */
- (id)element;

/*!
 @brief Returns the element at the specified position in this list.
 @param index index of the element to return
 @return the element at the specified position in this list
 @throw IndexOutOfBoundsException
 */
- (id)getWithInt:(jint)index;

/*!
 @brief Returns the first element in this list.
 @return the first element in this list
 @throw NoSuchElementExceptionif this list is empty
 */
- (id)getFirst;

/*!
 @brief Returns the last element in this list.
 @return the last element in this list
 @throw NoSuchElementExceptionif this list is empty
 */
- (id)getLast;

/*!
 @brief Returns the index of the first occurrence of the specified element
  in this list, or -1 if this list does not contain the element.
 More formally, returns the lowest index <code>i</code> such that 
 <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>,
  or -1 if there is no such index.
 @param o element to search for
 @return the index of the first occurrence of the specified element in
          this list, or -1 if this list does not contain the element
 */
- (jint)indexOfWithId:(id)o;

/*!
 @brief Returns the index of the last occurrence of the specified element
  in this list, or -1 if this list does not contain the element.
 More formally, returns the highest index <code>i</code> such that 
 <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>,
  or -1 if there is no such index.
 @param o element to search for
 @return the index of the last occurrence of the specified element in
          this list, or -1 if this list does not contain the element
 */
- (jint)lastIndexOfWithId:(id)o;

/*!
 @brief Returns a list-iterator of the elements in this list (in proper
  sequence), starting at the specified position in the list.
 Obeys the general contract of <code>List.listIterator(int)</code>.<p>
  The list-iterator is <i>fail-fast</i>: if the list is structurally
  modified at any time after the Iterator is created, in any way except
  through the list-iterator's own <code>remove</code> or <code>add</code>
  methods, the list-iterator will throw a 
 <code>ConcurrentModificationException</code>.  Thus, in the face of
  concurrent modification, the iterator fails quickly and cleanly, rather
  than risking arbitrary, non-deterministic behavior at an undetermined
  time in the future.
 @param index index of the first element to be returned from the               list-iterator (by a call to 
 <code>next</code> )
 @return a ListIterator of the elements in this list (in proper
          sequence), starting at the specified position in the list
 @throw IndexOutOfBoundsException
 - seealso: List#listIterator(int)
 */
- (id<JavaUtilListIterator> __nonnull)listIteratorWithInt:(jint)index;

/*!
 @brief Adds the specified element as the tail (last element) of this list.
 @param e the element to add
 @return <code>true</code> (as specified by <code>Queue.offer</code>)
 @since 1.5
 */
- (jboolean)offerWithId:(id)e;

/*!
 @brief Inserts the specified element at the front of this list.
 @param e the element to insert
 @return <code>true</code> (as specified by <code>Deque.offerFirst</code>)
 @since 1.6
 */
- (jboolean)offerFirstWithId:(id)e;

/*!
 @brief Inserts the specified element at the end of this list.
 @param e the element to insert
 @return <code>true</code> (as specified by <code>Deque.offerLast</code>)
 @since 1.6
 */
- (jboolean)offerLastWithId:(id)e;

/*!
 @brief Retrieves, but does not remove, the head (first element) of this list.
 @return the head of this list, or <code>null</code> if this list is empty
 @since 1.5
 */
- (id __nullable)peek;

/*!
 @brief Retrieves, but does not remove, the first element of this list,
  or returns <code>null</code> if this list is empty.
 @return the first element of this list, or <code>null</code>
          if this list is empty
 @since 1.6
 */
- (id __nullable)peekFirst;

/*!
 @brief Retrieves, but does not remove, the last element of this list,
  or returns <code>null</code> if this list is empty.
 @return the last element of this list, or <code>null</code>
          if this list is empty
 @since 1.6
 */
- (id __nullable)peekLast;

/*!
 @brief Retrieves and removes the head (first element) of this list.
 @return the head of this list, or <code>null</code> if this list is empty
 @since 1.5
 */
- (id __nullable)poll;

/*!
 @brief Retrieves and removes the first element of this list,
  or returns <code>null</code> if this list is empty.
 @return the first element of this list, or <code>null</code> if
      this list is empty
 @since 1.6
 */
- (id __nullable)pollFirst;

/*!
 @brief Retrieves and removes the last element of this list,
  or returns <code>null</code> if this list is empty.
 @return the last element of this list, or <code>null</code> if
      this list is empty
 @since 1.6
 */
- (id __nullable)pollLast;

/*!
 @brief Pops an element from the stack represented by this list.In other
  words, removes and returns the first element of this list.
 <p>This method is equivalent to <code>removeFirst()</code>.
 @return the element at the front of this list (which is the top
          of the stack represented by this list)
 @throw NoSuchElementExceptionif this list is empty
 @since 1.6
 */
- (id)pop;

/*!
 @brief Pushes an element onto the stack represented by this list.In other
  words, inserts the element at the front of this list.
 <p>This method is equivalent to <code>addFirst</code>.
 @param e the element to push
 @since 1.6
 */
- (void)pushWithId:(id)e;

/*!
 @brief Retrieves and removes the head (first element) of this list.
 @return the head of this list
 @throw NoSuchElementExceptionif this list is empty
 @since 1.5
 */
- (id)remove;

/*!
 @brief Removes the element at the specified position in this list.Shifts any
  subsequent elements to the left (subtracts one from their indices).
 Returns the element that was removed from the list.
 @param index the index of the element to be removed
 @return the element previously at the specified position
 @throw IndexOutOfBoundsException
 */
- (id)removeWithInt:(jint)index;

/*!
 @brief Removes the first occurrence of the specified element from this list,
  if it is present.If this list does not contain the element, it is
  unchanged.
 More formally, removes the element with the lowest index 
 <code>i</code> such that 
 <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>
  (if such an element exists).  Returns <code>true</code> if this list
  contained the specified element (or equivalently, if this list
  changed as a result of the call).
 @param o element to be removed from this list, if present
 @return <code>true</code> if this list contained the specified element
 */
- (jboolean)removeWithId:(id)o;

/*!
 @brief Removes and returns the first element from this list.
 @return the first element from this list
 @throw NoSuchElementExceptionif this list is empty
 */
- (id)removeFirst;

/*!
 @brief Removes the first occurrence of the specified element in this
  list (when traversing the list from head to tail).If the list
  does not contain the element, it is unchanged.
 @param o element to be removed from this list, if present
 @return <code>true</code> if the list contained the specified element
 @since 1.6
 */
- (jboolean)removeFirstOccurrenceWithId:(id)o;

/*!
 @brief Removes and returns the last element from this list.
 @return the last element from this list
 @throw NoSuchElementExceptionif this list is empty
 */
- (id)removeLast;

/*!
 @brief Removes the last occurrence of the specified element in this
  list (when traversing the list from head to tail).If the list
  does not contain the element, it is unchanged.
 @param o element to be removed from this list, if present
 @return <code>true</code> if the list contained the specified element
 @since 1.6
 */
- (jboolean)removeLastOccurrenceWithId:(id)o;

/*!
 @brief Replaces the element at the specified position in this list with the
  specified element.
 @param index index of the element to replace
 @param element element to be stored at the specified position
 @return the element previously at the specified position
 @throw IndexOutOfBoundsException
 */
- (id)setWithInt:(jint)index
          withId:(id)element;

/*!
 @brief Returns the number of elements in this list.
 @return the number of elements in this list
 */
- (jint)size;

/*!
 @brief Creates a <em><a href="Spliterator.html#binding">late-binding</a></em>
  and <em>fail-fast</em> <code>Spliterator</code> over the elements in this
  list.
 <p>The <code>Spliterator</code> reports <code>Spliterator.SIZED</code> and 
 <code>Spliterator.ORDERED</code>.  Overriding implementations should document
  the reporting of additional characteristic values.
 @return a <code>Spliterator</code> over the elements in this list
 @since 1.8
 */
- (id<JavaUtilSpliterator> __nonnull)spliterator;

/*!
 @brief Returns an array containing all of the elements in this list
  in proper sequence (from first to last element).
 <p>The returned array will be "safe" in that no references to it are
  maintained by this list.  (In other words, this method must allocate
  a new array).  The caller is thus free to modify the returned array. 
 <p>This method acts as bridge between array-based and collection-based
  APIs.
 @return an array containing all of the elements in this list
          in proper sequence
 */
- (IOSObjectArray * __nonnull)toArray;

/*!
 @brief Returns an array containing all of the elements in this list in
  proper sequence (from first to last element); the runtime type of
  the returned array is that of the specified array.If the list fits
  in the specified array, it is returned therein.
 Otherwise, a new
  array is allocated with the runtime type of the specified array and
  the size of this list. 
 <p>If the list fits in the specified array with room to spare (i.e.,
  the array has more elements than the list), the element in the array
  immediately following the end of the list is set to <code>null</code>.
  (This is useful in determining the length of the list <i>only</i> if
  the caller knows that the list does not contain any null elements.) 
 <p>Like the <code>toArray()</code> method, this method acts as bridge between
  array-based and collection-based APIs.  Further, this method allows
  precise control over the runtime type of the output array, and may,
  under certain circumstances, be used to save allocation costs. 
 <p>Suppose <code>x</code> is a list known to contain only strings.
  The following code can be used to dump the list into a newly
  allocated array of <code>String</code>:
  
 @code

      String[] y = x.toArray(new String[0]);
@endcode
  Note that <code>toArray(new Object[0])</code> is identical in function to 
 <code>toArray()</code>.
 @param a the array into which the elements of the list are to           be stored, if it is big enough; otherwise, a new array of the
            same runtime type is allocated for this purpose.
 @return an array containing the elements of the list
 @throw ArrayStoreExceptionif the runtime type of the specified array
          is not a supertype of the runtime type of every element in
          this list
 @throw NullPointerExceptionif the specified array is null
 */
- (IOSObjectArray * __nonnull)toArrayWithNSObjectArray:(IOSObjectArray *)a;

#pragma mark Protected

- (void)java_finalize;

#pragma mark Package-Private

/*!
 @brief Inserts element e before non-null Node succ.
 */
- (void)linkBeforeWithId:(id)e
withJavaUtilLinkedList_Node:(JavaUtilLinkedList_Node *)succ;

/*!
 @brief Links e as last element.
 */
- (void)linkLastWithId:(id)e;

/*!
 @brief Returns the (non-null) Node at the specified element index.
 */
- (JavaUtilLinkedList_Node *)nodeWithInt:(jint)index;

/*!
 @brief Unlinks non-null node x.
 */
- (id)unlinkWithJavaUtilLinkedList_Node:(JavaUtilLinkedList_Node *)x;

@end

J2OBJC_STATIC_INIT(JavaUtilLinkedList)

J2OBJC_FIELD_SETTER(JavaUtilLinkedList, first_, JavaUtilLinkedList_Node *)
J2OBJC_FIELD_SETTER(JavaUtilLinkedList, last_, JavaUtilLinkedList_Node *)

FOUNDATION_EXPORT void JavaUtilLinkedList_init(JavaUtilLinkedList *self);

FOUNDATION_EXPORT JavaUtilLinkedList *new_JavaUtilLinkedList_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilLinkedList *create_JavaUtilLinkedList_init(void);

FOUNDATION_EXPORT void JavaUtilLinkedList_initWithJavaUtilCollection_(JavaUtilLinkedList *self, id<JavaUtilCollection> c);

FOUNDATION_EXPORT JavaUtilLinkedList *new_JavaUtilLinkedList_initWithJavaUtilCollection_(id<JavaUtilCollection> c) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilLinkedList *create_JavaUtilLinkedList_initWithJavaUtilCollection_(id<JavaUtilCollection> c);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilLinkedList)

#endif

#if !defined (JavaUtilLinkedList_Node_) && (INCLUDE_ALL_JavaUtilLinkedList || defined(INCLUDE_JavaUtilLinkedList_Node))
#define JavaUtilLinkedList_Node_

@interface JavaUtilLinkedList_Node : NSObject {
 @public
  id item_;
  JavaUtilLinkedList_Node *next_;
  __unsafe_unretained JavaUtilLinkedList_Node *prev_;
}

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilLinkedList_Node:(JavaUtilLinkedList_Node *)prev
                                                   withId:(id)element
                              withJavaUtilLinkedList_Node:(JavaUtilLinkedList_Node *)next;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilLinkedList_Node)

J2OBJC_FIELD_SETTER(JavaUtilLinkedList_Node, item_, id)
J2OBJC_FIELD_SETTER(JavaUtilLinkedList_Node, next_, JavaUtilLinkedList_Node *)

FOUNDATION_EXPORT void JavaUtilLinkedList_Node_initWithJavaUtilLinkedList_Node_withId_withJavaUtilLinkedList_Node_(JavaUtilLinkedList_Node *self, JavaUtilLinkedList_Node *prev, id element, JavaUtilLinkedList_Node *next);

FOUNDATION_EXPORT JavaUtilLinkedList_Node *new_JavaUtilLinkedList_Node_initWithJavaUtilLinkedList_Node_withId_withJavaUtilLinkedList_Node_(JavaUtilLinkedList_Node *prev, id element, JavaUtilLinkedList_Node *next) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilLinkedList_Node *create_JavaUtilLinkedList_Node_initWithJavaUtilLinkedList_Node_withId_withJavaUtilLinkedList_Node_(JavaUtilLinkedList_Node *prev, id element, JavaUtilLinkedList_Node *next);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilLinkedList_Node)

#endif

#if !defined (JavaUtilLinkedList_LLSpliterator_) && (INCLUDE_ALL_JavaUtilLinkedList || defined(INCLUDE_JavaUtilLinkedList_LLSpliterator))
#define JavaUtilLinkedList_LLSpliterator_

#define RESTRICT_JavaUtilSpliterator 1
#define INCLUDE_JavaUtilSpliterator 1
#include "java/util/Spliterator.h"

@class JavaUtilLinkedList;
@class JavaUtilLinkedList_Node;
@protocol JavaUtilComparator;
@protocol JavaUtilFunctionConsumer;

/*!
 @brief A customized variant of Spliterators.IteratorSpliterator
 */
@interface JavaUtilLinkedList_LLSpliterator : NSObject < JavaUtilSpliterator > {
 @public
  JavaUtilLinkedList *list_;
  JavaUtilLinkedList_Node *current_;
  jint est_;
  jint expectedModCount_;
  jint batch_;
}
@property (readonly, class) jint BATCH_UNIT NS_SWIFT_NAME(BATCH_UNIT);
@property (readonly, class) jint MAX_BATCH NS_SWIFT_NAME(MAX_BATCH);

+ (jint)BATCH_UNIT;

+ (jint)MAX_BATCH;

#pragma mark Public

- (jint)characteristics;

- (jlong)estimateSize;

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

- (jboolean)tryAdvanceWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

- (id<JavaUtilSpliterator>)trySplit;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilLinkedList:(JavaUtilLinkedList *)list
                                             withInt:(jint)est
                                             withInt:(jint)expectedModCount;

- (jint)getEst;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilLinkedList_LLSpliterator)

J2OBJC_FIELD_SETTER(JavaUtilLinkedList_LLSpliterator, list_, JavaUtilLinkedList *)
J2OBJC_FIELD_SETTER(JavaUtilLinkedList_LLSpliterator, current_, JavaUtilLinkedList_Node *)

inline jint JavaUtilLinkedList_LLSpliterator_get_BATCH_UNIT(void);
#define JavaUtilLinkedList_LLSpliterator_BATCH_UNIT 1024
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilLinkedList_LLSpliterator, BATCH_UNIT, jint)

inline jint JavaUtilLinkedList_LLSpliterator_get_MAX_BATCH(void);
#define JavaUtilLinkedList_LLSpliterator_MAX_BATCH 33554432
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilLinkedList_LLSpliterator, MAX_BATCH, jint)

FOUNDATION_EXPORT void JavaUtilLinkedList_LLSpliterator_initWithJavaUtilLinkedList_withInt_withInt_(JavaUtilLinkedList_LLSpliterator *self, JavaUtilLinkedList *list, jint est, jint expectedModCount);

FOUNDATION_EXPORT JavaUtilLinkedList_LLSpliterator *new_JavaUtilLinkedList_LLSpliterator_initWithJavaUtilLinkedList_withInt_withInt_(JavaUtilLinkedList *list, jint est, jint expectedModCount) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilLinkedList_LLSpliterator *create_JavaUtilLinkedList_LLSpliterator_initWithJavaUtilLinkedList_withInt_withInt_(JavaUtilLinkedList *list, jint est, jint expectedModCount);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilLinkedList_LLSpliterator)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilLinkedList")
