//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/LinkedHashMap.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilLinkedHashMap")
#ifdef RESTRICT_JavaUtilLinkedHashMap
#define INCLUDE_ALL_JavaUtilLinkedHashMap 0
#else
#define INCLUDE_ALL_JavaUtilLinkedHashMap 1
#endif
#undef RESTRICT_JavaUtilLinkedHashMap
#ifdef INCLUDE_JavaUtilLinkedHashMap_LinkedEntryIterator
#define INCLUDE_JavaUtilLinkedHashMap_LinkedHashIterator 1
#endif
#ifdef INCLUDE_JavaUtilLinkedHashMap_LinkedValueIterator
#define INCLUDE_JavaUtilLinkedHashMap_LinkedHashIterator 1
#endif
#ifdef INCLUDE_JavaUtilLinkedHashMap_LinkedKeyIterator
#define INCLUDE_JavaUtilLinkedHashMap_LinkedHashIterator 1
#endif

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilLinkedHashMap_) && (INCLUDE_ALL_JavaUtilLinkedHashMap || defined(INCLUDE_JavaUtilLinkedHashMap))
#define JavaUtilLinkedHashMap_

#define RESTRICT_JavaUtilHashMap 1
#define INCLUDE_JavaUtilHashMap 1
#include "java/util/HashMap.h"

#define RESTRICT_JavaUtilMap 1
#define INCLUDE_JavaUtilMap 1
#include "java/util/Map.h"

@class JavaIoObjectOutputStream;
@class JavaUtilHashMap_Node;
@class JavaUtilHashMap_TreeNode;
@class JavaUtilLinkedHashMap_LinkedHashMapEntry;
@protocol JavaUtilCollection;
@protocol JavaUtilFunctionBiConsumer;
@protocol JavaUtilFunctionBiFunction;
@protocol JavaUtilMap_Entry;
@protocol JavaUtilSet;

/*!
 @brief <p>Hash table and linked list implementation of the <tt>Map</tt> interface,
  with predictable iteration order.
 This implementation differs from 
 <tt>HashMap</tt> in that it maintains a doubly-linked list running through
  all of its entries.  This linked list defines the iteration ordering,
  which is normally the order in which keys were inserted into the map
  (<i>insertion-order</i>).  Note that insertion order is not affected
  if a key is <i>re-inserted</i> into the map.  (A key <tt>k</tt> is
  reinserted into a map <tt>m</tt> if <tt>m.put(k, v)</tt> is invoked when 
 <tt>m.containsKey(k)</tt> would return <tt>true</tt> immediately prior to
  the invocation.) 
 <p>This implementation spares its clients from the unspecified, generally
  chaotic ordering provided by <code>HashMap</code> (and <code>Hashtable</code>),
  without incurring the increased cost associated with <code>TreeMap</code>.  It
  can be used to produce a copy of a map that has the same order as the
  original, regardless of the original map's implementation: 
 @code

      void foo(Map m) {
          Map copy = new LinkedHashMap(m);
          ...
      } 
  
@endcode
  This technique is particularly useful if a module takes a map on input,
  copies it, and later returns results whose order is determined by that of
  the copy.  (Clients generally appreciate having things returned in the same
  order they were presented.) 
 <p>A special <code>constructor</code> is
  provided to create a linked hash map whose order of iteration is the order
  in which its entries were last accessed, from least-recently accessed to
  most-recently (<i>access-order</i>).  This kind of map is well-suited to
  building LRU caches.  Invoking the <code>put</code>, <code>putIfAbsent</code>,
  <code>get</code>, <code>getOrDefault</code>, <code>compute</code>, <code>computeIfAbsent</code>,
  <code>computeIfPresent</code>, or <code>merge</code> methods results
  in an access to the corresponding entry (assuming it exists after the
  invocation completes). The <code>replace</code> methods only result in an access
  of the entry if the value is replaced.  The <code>putAll</code> method generates one
  entry access for each mapping in the specified map, in the order that
  key-value mappings are provided by the specified map's entry set iterator. 
 <i>No other methods generate entry accesses.</i>  In particular, operations
  on collection-views do <i>not</i> affect the order of iteration of the
  backing map. 
 <p>The <code>removeEldestEntry(Map.Entry)</code> method may be overridden to
  impose a policy for removing stale mappings automatically when new mappings
  are added to the map. 
 <p>This class provides all of the optional <tt>Map</tt> operations, and
  permits null elements.  Like <tt>HashMap</tt>, it provides constant-time
  performance for the basic operations (<tt>add</tt>, <tt>contains</tt> and 
 <tt>remove</tt>), assuming the hash function disperses elements
  properly among the buckets.  Performance is likely to be just slightly
  below that of <tt>HashMap</tt>, due to the added expense of maintaining the
  linked list, with one exception: Iteration over the collection-views
  of a <tt>LinkedHashMap</tt> requires time proportional to the <i>size</i>
  of the map, regardless of its capacity.  Iteration over a <tt>HashMap</tt>
  is likely to be more expensive, requiring time proportional to its 
 <i>capacity</i>.
  
 <p>A linked hash map has two parameters that affect its performance: 
 <i>initial capacity</i> and <i>load factor</i>.  They are defined precisely
  as for <tt>HashMap</tt>.  Note, however, that the penalty for choosing an
  excessively high value for initial capacity is less severe for this class
  than for <tt>HashMap</tt>, as iteration times for this class are unaffected
  by capacity. 
 <p><strong>Note that this implementation is not synchronized.</strong>
  If multiple threads access a linked hash map concurrently, and at least
  one of the threads modifies the map structurally, it <em>must</em> be
  synchronized externally.  This is typically accomplished by
  synchronizing on some object that naturally encapsulates the map.
  If no such object exists, the map should be "wrapped" using the 
 <code>Collections.synchronizedMap</code>
  method.  This is best done at creation time, to prevent accidental
  unsynchronized access to the map:@code

    Map m = Collections.synchronizedMap(new LinkedHashMap(...));
@endcode
  A structural modification is any operation that adds or deletes one or more
  mappings or, in the case of access-ordered linked hash maps, affects
  iteration order.  In insertion-ordered linked hash maps, merely changing
  the value associated with a key that is already contained in the map is not
  a structural modification.  <strong>In access-ordered linked hash maps,
  merely querying the map with <tt>get</tt> is a structural modification. 
 </strong>)
  
 <p>The iterators returned by the <tt>iterator</tt> method of the collections
  returned by all of this class's collection view methods are 
 <em>fail-fast</em>: if the map is structurally modified at any time after
  the iterator is created, in any way except through the iterator's own 
 <tt>remove</tt> method, the iterator will throw a <code>ConcurrentModificationException</code>
 .  Thus, in the face of concurrent
  modification, the iterator fails quickly and cleanly, rather than risking
  arbitrary, non-deterministic behavior at an undetermined time in the future. 
 <p>Note that the fail-fast behavior of an iterator cannot be guaranteed
  as it is, generally speaking, impossible to make any hard guarantees in the
  presence of unsynchronized concurrent modification.  Fail-fast iterators
  throw <tt>ConcurrentModificationException</tt> on a best-effort basis.
  Therefore, it would be wrong to write a program that depended on this
  exception for its correctness:   <i>the fail-fast behavior of iterators
  should be used only to detect bugs.</i>
  
 <p>The spliterators returned by the spliterator method of the collections
  returned by all of this class's collection view methods are 
 <em><a href="Spliterator.html#binding">late-binding</a></em>,
  <em>fail-fast</em>, and additionally report <code>Spliterator.ORDERED</code>.
  <em>Note</em>: The implementation of these spliterators in Android Nougat
  (API levels 24 and 25) uses the wrong order (inconsistent with the
  iterators, which use the correct order), despite reporting 
 <code>Spliterator.ORDERED</code>. You may use the following code fragments
  to obtain a correctly ordered Spliterator on API level 24 and 25: 
 <ul>
      <li>For a Collection view <code>c = lhm.keySet()</code>,
          <code>c = lhm.keySet()</code> or <code>c = lhm.values()</code>, use
          <code>java.util.Spliterators.spliterator(c, c.spliterator().characteristics())</code>
          instead of <code>c.spliterator()</code>.
      <li>Instead of <code>lhm.stream()</code> or <code>lhm.parallelStream()</code>, use
          <code>java.util.stream.StreamSupport.stream(spliterator, false)</code>
          to construct a (nonparallel) <code>java.util.stream.Stream</code> from
          such a <code>Spliterator</code>.
  </ul>
  Note that these workarounds are only suggested where <code>lhm</code> is a 
 <code>LinkedHashMap</code>.
  
 <p>This class is a member of the 
 <a href="{@@docRoot}/../technotes/guides/collections/index.html">
  Java Collections Framework</a>.
 @author Josh Bloch
 - seealso: Object#hashCode()
 - seealso: Collection
 - seealso: Map
 - seealso: HashMap
 - seealso: TreeMap
 - seealso: Hashtable
 @since 1.4
 */
@interface JavaUtilLinkedHashMap : JavaUtilHashMap < JavaUtilMap > {
 @public
  /*!
   @brief The head (eldest) of the doubly linked list.
   */
  JavaUtilLinkedHashMap_LinkedHashMapEntry *head_;
  /*!
   @brief The tail (youngest) of the doubly linked list.
   */
  JavaUtilLinkedHashMap_LinkedHashMapEntry *tail_;
  /*!
   @brief The iteration ordering method for this linked hash map: <tt>true</tt>
  for access-order, <tt>false</tt> for insertion-order.
   */
  jboolean accessOrder_;
}

#pragma mark Public

/*!
 @brief Constructs an empty insertion-ordered <tt>LinkedHashMap</tt> instance
  with the default initial capacity (16) and load factor (0.75).
 */
- (instancetype __nonnull)init;

/*!
 @brief Constructs an empty insertion-ordered <tt>LinkedHashMap</tt> instance
  with the specified initial capacity and a default load factor (0.75).
 @param initialCapacity the initial capacity
 @throw IllegalArgumentExceptionif the initial capacity is negative
 */
- (instancetype __nonnull)initWithInt:(jint)initialCapacity;

/*!
 @brief Constructs an empty insertion-ordered <tt>LinkedHashMap</tt> instance
  with the specified initial capacity and load factor.
 @param initialCapacity the initial capacity
 @param loadFactor the load factor
 @throw IllegalArgumentExceptionif the initial capacity is negative
          or the load factor is nonpositive
 */
- (instancetype __nonnull)initWithInt:(jint)initialCapacity
                            withFloat:(jfloat)loadFactor;

/*!
 @brief Constructs an empty <tt>LinkedHashMap</tt> instance with the
  specified initial capacity, load factor and ordering mode.
 @param initialCapacity the initial capacity
 @param loadFactor the load factor
 @param accessOrder the ordering mode -  <tt> true </tt>  for          access-order, 
  <tt> false </tt>  for insertion-order
 @throw IllegalArgumentExceptionif the initial capacity is negative
          or the load factor is nonpositive
 */
- (instancetype __nonnull)initWithInt:(jint)initialCapacity
                            withFloat:(jfloat)loadFactor
                          withBoolean:(jboolean)accessOrder;

/*!
 @brief Constructs an insertion-ordered <tt>LinkedHashMap</tt> instance with
  the same mappings as the specified map.The <tt>LinkedHashMap</tt>
  instance is created with a default load factor (0.75) and an initial
  capacity sufficient to hold the mappings in the specified map.
 @param m the map whose mappings are to be placed in this map
 @throw NullPointerExceptionif the specified map is null
 */
- (instancetype __nonnull)initWithJavaUtilMap:(id<JavaUtilMap>)m;

/*!
 */
- (void)clear;

/*!
 @brief Returns <tt>true</tt> if this map maps one or more keys to the
  specified value.
 @param value value whose presence in this map is to be tested
 @return <tt>true</tt> if this map maps one or more keys to the
          specified value
 */
- (jboolean)containsValueWithId:(id)value;

/*!
 @brief Returns the eldest entry in the map, or <code>null</code> if the map is empty.
 */
- (id<JavaUtilMap_Entry>)eldest;

/*!
 @brief Returns a <code>Set</code> view of the mappings contained in this map.
 The set is backed by the map, so changes to the map are
  reflected in the set, and vice-versa.  If the map is modified
  while an iteration over the set is in progress (except through
  the iterator's own <tt>remove</tt> operation, or through the 
 <tt>setValue</tt> operation on a map entry returned by the
  iterator) the results of the iteration are undefined.  The set
  supports element removal, which removes the corresponding
  mapping from the map, via the <tt>Iterator.remove</tt>,
  <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and 
 <tt>clear</tt> operations.  It does not support the 
 <tt>add</tt> or <tt>addAll</tt> operations.
  Its <code>Spliterator</code> typically provides faster sequential
  performance but much poorer parallel performance than that of 
 <code>HashMap</code>.
 @return a set view of the mappings contained in this map
 */
- (id<JavaUtilSet>)entrySet;

- (void)forEachWithJavaUtilFunctionBiConsumer:(id<JavaUtilFunctionBiConsumer>)action;

/*!
 @brief Returns the value to which the specified key is mapped,
  or <code>null</code> if this map contains no mapping for the key.
 <p>More formally, if this map contains a mapping from a key 
 <code>k</code> to a value <code>v</code> such that <code>(key==null ? k==null :
  key.equals(k))</code>
 , then this method returns <code>v</code>; otherwise
  it returns <code>null</code>.  (There can be at most one such mapping.) 
 <p>A return value of <code>null</code> does not <i>necessarily</i>
  indicate that the map contains no mapping for the key; it's also
  possible that the map explicitly maps the key to <code>null</code>.
  The <code>containsKey</code> operation may be used to
  distinguish these two cases.
 */
- (id)getWithId:(id)key;

/*!
 */
- (id)getOrDefaultWithId:(id)key
                  withId:(id)defaultValue;

/*!
 @brief Returns a <code>Set</code> view of the keys contained in this map.
 The set is backed by the map, so changes to the map are
  reflected in the set, and vice-versa.  If the map is modified
  while an iteration over the set is in progress (except through
  the iterator's own <tt>remove</tt> operation), the results of
  the iteration are undefined.  The set supports element removal,
  which removes the corresponding mapping from the map, via the 
 <tt>Iterator.remove</tt>, <tt>Set.remove</tt>,
  <tt>removeAll</tt>, <tt>retainAll</tt>, and <tt>clear</tt>
  operations.  It does not support the <tt>add</tt> or <tt>addAll</tt>
  operations.
  Its <code>Spliterator</code> typically provides faster sequential
  performance but much poorer parallel performance than that of 
 <code>HashMap</code>.
 @return a set view of the keys contained in this map
 */
- (id<JavaUtilSet>)keySet;

- (void)replaceAllWithJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)function;

/*!
 @brief Returns a <code>Collection</code> view of the values contained in this map.
 The collection is backed by the map, so changes to the map are
  reflected in the collection, and vice-versa.  If the map is
  modified while an iteration over the collection is in progress
  (except through the iterator's own <tt>remove</tt> operation),
  the results of the iteration are undefined.  The collection
  supports element removal, which removes the corresponding
  mapping from the map, via the <tt>Iterator.remove</tt>,
  <tt>Collection.remove</tt>, <tt>removeAll</tt>,
  <tt>retainAll</tt> and <tt>clear</tt> operations.  It does not
  support the <tt>add</tt> or <tt>addAll</tt> operations.
  Its <code>Spliterator</code> typically provides faster sequential
  performance but much poorer parallel performance than that of 
 <code>HashMap</code>.
 @return a view of the values contained in this map
 */
- (id<JavaUtilCollection>)values;

#pragma mark Protected

/*!
 @brief Returns <tt>true</tt> if this map should remove its eldest entry.
 This method is invoked by <tt>put</tt> and <tt>putAll</tt> after
  inserting a new entry into the map.  It provides the implementor
  with the opportunity to remove the eldest entry each time a new one
  is added.  This is useful if the map represents a cache: it allows
  the map to reduce memory consumption by deleting stale entries. 
 <p>Sample use: this override will allow the map to grow up to 100
  entries and then delete the eldest entry each time a new entry is
  added, maintaining a steady state of 100 entries. 
 @code

      private static final int MAX_ENTRIES = 100;
      protected boolean removeEldestEntry(Map.Entry eldest) {
         return size() &gt; MAX_ENTRIES;
      } 
  
@endcode
  
 <p>This method typically does not modify the map in any way,
  instead allowing the map to modify itself as directed by its
  return value.  It <i>is</i> permitted for this method to modify
  the map directly, but if it does so, it <i>must</i> return 
 <tt>false</tt> (indicating that the map should not attempt any
  further modification).  The effects of returning <tt>true</tt>
  after modifying the map from within this method are unspecified. 
 <p>This implementation merely returns <tt>false</tt> (so that this
  map acts like a normal map - the eldest element is never removed).
 @param eldest The least recently inserted entry in the map, or if            this is an access-ordered map, the least recently accessed
             entry.  This is the entry that will be removed it this
             method returns 
  <tt> true </tt> .  If the map was empty prior            to the 
  <tt> put </tt>  or  <tt> putAll </tt>  invocation resulting            in this invocation, this will be the entry that was just
             inserted; in other words, if the map contains a single
             entry, the eldest entry is also the newest.
 @return <tt>true</tt> if the eldest entry should be removed
            from the map; <tt>false</tt> if it should be retained.
 */
- (jboolean)removeEldestEntryWithJavaUtilMap_Entry:(id<JavaUtilMap_Entry>)eldest;

#pragma mark Package-Private

- (void)afterNodeAccessWithJavaUtilHashMap_Node:(JavaUtilHashMap_Node *)e;

- (void)afterNodeInsertionWithBoolean:(jboolean)evict;

- (void)afterNodeRemovalWithJavaUtilHashMap_Node:(JavaUtilHashMap_Node *)e;

- (void)internalWriteEntriesWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)s;

- (JavaUtilHashMap_Node *)newNodeWithInt:(jint)hash_
                                  withId:(id)key
                                  withId:(id)value
                withJavaUtilHashMap_Node:(JavaUtilHashMap_Node *)e OBJC_METHOD_FAMILY_NONE;

- (JavaUtilHashMap_TreeNode *)newTreeNodeWithInt:(jint)hash_
                                          withId:(id)key
                                          withId:(id)value
                        withJavaUtilHashMap_Node:(JavaUtilHashMap_Node *)next OBJC_METHOD_FAMILY_NONE;

- (void)reinitialize;

- (JavaUtilHashMap_Node *)replacementNodeWithJavaUtilHashMap_Node:(JavaUtilHashMap_Node *)p
                                         withJavaUtilHashMap_Node:(JavaUtilHashMap_Node *)next;

- (JavaUtilHashMap_TreeNode *)replacementTreeNodeWithJavaUtilHashMap_Node:(JavaUtilHashMap_Node *)p
                                                 withJavaUtilHashMap_Node:(JavaUtilHashMap_Node *)next;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilLinkedHashMap)

J2OBJC_FIELD_SETTER(JavaUtilLinkedHashMap, head_, JavaUtilLinkedHashMap_LinkedHashMapEntry *)
J2OBJC_FIELD_SETTER(JavaUtilLinkedHashMap, tail_, JavaUtilLinkedHashMap_LinkedHashMapEntry *)

FOUNDATION_EXPORT void JavaUtilLinkedHashMap_initWithInt_withFloat_(JavaUtilLinkedHashMap *self, jint initialCapacity, jfloat loadFactor);

FOUNDATION_EXPORT JavaUtilLinkedHashMap *new_JavaUtilLinkedHashMap_initWithInt_withFloat_(jint initialCapacity, jfloat loadFactor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilLinkedHashMap *create_JavaUtilLinkedHashMap_initWithInt_withFloat_(jint initialCapacity, jfloat loadFactor);

FOUNDATION_EXPORT void JavaUtilLinkedHashMap_initWithInt_(JavaUtilLinkedHashMap *self, jint initialCapacity);

FOUNDATION_EXPORT JavaUtilLinkedHashMap *new_JavaUtilLinkedHashMap_initWithInt_(jint initialCapacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilLinkedHashMap *create_JavaUtilLinkedHashMap_initWithInt_(jint initialCapacity);

FOUNDATION_EXPORT void JavaUtilLinkedHashMap_init(JavaUtilLinkedHashMap *self);

FOUNDATION_EXPORT JavaUtilLinkedHashMap *new_JavaUtilLinkedHashMap_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilLinkedHashMap *create_JavaUtilLinkedHashMap_init(void);

FOUNDATION_EXPORT void JavaUtilLinkedHashMap_initWithJavaUtilMap_(JavaUtilLinkedHashMap *self, id<JavaUtilMap> m);

FOUNDATION_EXPORT JavaUtilLinkedHashMap *new_JavaUtilLinkedHashMap_initWithJavaUtilMap_(id<JavaUtilMap> m) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilLinkedHashMap *create_JavaUtilLinkedHashMap_initWithJavaUtilMap_(id<JavaUtilMap> m);

FOUNDATION_EXPORT void JavaUtilLinkedHashMap_initWithInt_withFloat_withBoolean_(JavaUtilLinkedHashMap *self, jint initialCapacity, jfloat loadFactor, jboolean accessOrder);

FOUNDATION_EXPORT JavaUtilLinkedHashMap *new_JavaUtilLinkedHashMap_initWithInt_withFloat_withBoolean_(jint initialCapacity, jfloat loadFactor, jboolean accessOrder) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilLinkedHashMap *create_JavaUtilLinkedHashMap_initWithInt_withFloat_withBoolean_(jint initialCapacity, jfloat loadFactor, jboolean accessOrder);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilLinkedHashMap)

#endif

#if !defined (JavaUtilLinkedHashMap_LinkedHashMapEntry_) && (INCLUDE_ALL_JavaUtilLinkedHashMap || defined(INCLUDE_JavaUtilLinkedHashMap_LinkedHashMapEntry))
#define JavaUtilLinkedHashMap_LinkedHashMapEntry_

#define RESTRICT_JavaUtilHashMap 1
#define INCLUDE_JavaUtilHashMap_Node 1
#include "java/util/HashMap.h"

/*!
 @brief HashMap.Node subclass for normal LinkedHashMap entries.
 */
@interface JavaUtilLinkedHashMap_LinkedHashMapEntry : JavaUtilHashMap_Node {
 @public
  __unsafe_unretained JavaUtilLinkedHashMap_LinkedHashMapEntry *before_;
  __unsafe_unretained JavaUtilLinkedHashMap_LinkedHashMapEntry *after_;
}

#pragma mark Package-Private

- (instancetype __nonnull)initWithInt:(jint)hash_
                               withId:(id)key
                               withId:(id)value
             withJavaUtilHashMap_Node:(JavaUtilHashMap_Node *)next;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilLinkedHashMap_LinkedHashMapEntry)

FOUNDATION_EXPORT void JavaUtilLinkedHashMap_LinkedHashMapEntry_initWithInt_withId_withId_withJavaUtilHashMap_Node_(JavaUtilLinkedHashMap_LinkedHashMapEntry *self, jint hash_, id key, id value, JavaUtilHashMap_Node *next);

FOUNDATION_EXPORT JavaUtilLinkedHashMap_LinkedHashMapEntry *new_JavaUtilLinkedHashMap_LinkedHashMapEntry_initWithInt_withId_withId_withJavaUtilHashMap_Node_(jint hash_, id key, id value, JavaUtilHashMap_Node *next) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilLinkedHashMap_LinkedHashMapEntry *create_JavaUtilLinkedHashMap_LinkedHashMapEntry_initWithInt_withId_withId_withJavaUtilHashMap_Node_(jint hash_, id key, id value, JavaUtilHashMap_Node *next);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilLinkedHashMap_LinkedHashMapEntry)

#endif

#if !defined (JavaUtilLinkedHashMap_LinkedKeySet_) && (INCLUDE_ALL_JavaUtilLinkedHashMap || defined(INCLUDE_JavaUtilLinkedHashMap_LinkedKeySet))
#define JavaUtilLinkedHashMap_LinkedKeySet_

#define RESTRICT_JavaUtilAbstractSet 1
#define INCLUDE_JavaUtilAbstractSet 1
#include "java/util/AbstractSet.h"

@class JavaUtilLinkedHashMap;
@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilIterator;
@protocol JavaUtilSpliterator;

@interface JavaUtilLinkedHashMap_LinkedKeySet : JavaUtilAbstractSet

#pragma mark Public

- (void)clear;

- (jboolean)containsWithId:(id)o;

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

- (id<JavaUtilIterator>)iterator;

- (jboolean)removeWithId:(id)key;

- (jint)size;

- (id<JavaUtilSpliterator>)spliterator;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)outer$;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilLinkedHashMap_LinkedKeySet)

FOUNDATION_EXPORT void JavaUtilLinkedHashMap_LinkedKeySet_initWithJavaUtilLinkedHashMap_(JavaUtilLinkedHashMap_LinkedKeySet *self, JavaUtilLinkedHashMap *outer$);

FOUNDATION_EXPORT JavaUtilLinkedHashMap_LinkedKeySet *new_JavaUtilLinkedHashMap_LinkedKeySet_initWithJavaUtilLinkedHashMap_(JavaUtilLinkedHashMap *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilLinkedHashMap_LinkedKeySet *create_JavaUtilLinkedHashMap_LinkedKeySet_initWithJavaUtilLinkedHashMap_(JavaUtilLinkedHashMap *outer$);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilLinkedHashMap_LinkedKeySet)

#endif

#if !defined (JavaUtilLinkedHashMap_LinkedValues_) && (INCLUDE_ALL_JavaUtilLinkedHashMap || defined(INCLUDE_JavaUtilLinkedHashMap_LinkedValues))
#define JavaUtilLinkedHashMap_LinkedValues_

#define RESTRICT_JavaUtilAbstractCollection 1
#define INCLUDE_JavaUtilAbstractCollection 1
#include "java/util/AbstractCollection.h"

@class JavaUtilLinkedHashMap;
@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilIterator;
@protocol JavaUtilSpliterator;

@interface JavaUtilLinkedHashMap_LinkedValues : JavaUtilAbstractCollection

#pragma mark Public

- (void)clear;

- (jboolean)containsWithId:(id)o;

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

- (id<JavaUtilIterator>)iterator;

- (jint)size;

- (id<JavaUtilSpliterator>)spliterator;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)outer$;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilLinkedHashMap_LinkedValues)

FOUNDATION_EXPORT void JavaUtilLinkedHashMap_LinkedValues_initWithJavaUtilLinkedHashMap_(JavaUtilLinkedHashMap_LinkedValues *self, JavaUtilLinkedHashMap *outer$);

FOUNDATION_EXPORT JavaUtilLinkedHashMap_LinkedValues *new_JavaUtilLinkedHashMap_LinkedValues_initWithJavaUtilLinkedHashMap_(JavaUtilLinkedHashMap *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilLinkedHashMap_LinkedValues *create_JavaUtilLinkedHashMap_LinkedValues_initWithJavaUtilLinkedHashMap_(JavaUtilLinkedHashMap *outer$);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilLinkedHashMap_LinkedValues)

#endif

#if !defined (JavaUtilLinkedHashMap_LinkedEntrySet_) && (INCLUDE_ALL_JavaUtilLinkedHashMap || defined(INCLUDE_JavaUtilLinkedHashMap_LinkedEntrySet))
#define JavaUtilLinkedHashMap_LinkedEntrySet_

#define RESTRICT_JavaUtilAbstractSet 1
#define INCLUDE_JavaUtilAbstractSet 1
#include "java/util/AbstractSet.h"

@class JavaUtilLinkedHashMap;
@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilIterator;
@protocol JavaUtilSpliterator;

@interface JavaUtilLinkedHashMap_LinkedEntrySet : JavaUtilAbstractSet

#pragma mark Public

- (void)clear;

- (jboolean)containsWithId:(id)o;

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

- (id<JavaUtilIterator>)iterator;

- (jboolean)removeWithId:(id)o;

- (jint)size;

- (id<JavaUtilSpliterator>)spliterator;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)outer$;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilLinkedHashMap_LinkedEntrySet)

FOUNDATION_EXPORT void JavaUtilLinkedHashMap_LinkedEntrySet_initWithJavaUtilLinkedHashMap_(JavaUtilLinkedHashMap_LinkedEntrySet *self, JavaUtilLinkedHashMap *outer$);

FOUNDATION_EXPORT JavaUtilLinkedHashMap_LinkedEntrySet *new_JavaUtilLinkedHashMap_LinkedEntrySet_initWithJavaUtilLinkedHashMap_(JavaUtilLinkedHashMap *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilLinkedHashMap_LinkedEntrySet *create_JavaUtilLinkedHashMap_LinkedEntrySet_initWithJavaUtilLinkedHashMap_(JavaUtilLinkedHashMap *outer$);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilLinkedHashMap_LinkedEntrySet)

#endif

#if !defined (JavaUtilLinkedHashMap_LinkedHashIterator_) && (INCLUDE_ALL_JavaUtilLinkedHashMap || defined(INCLUDE_JavaUtilLinkedHashMap_LinkedHashIterator))
#define JavaUtilLinkedHashMap_LinkedHashIterator_

@class JavaUtilLinkedHashMap;
@class JavaUtilLinkedHashMap_LinkedHashMapEntry;

@interface JavaUtilLinkedHashMap_LinkedHashIterator : NSObject {
 @public
  JavaUtilLinkedHashMap_LinkedHashMapEntry *next_;
  JavaUtilLinkedHashMap_LinkedHashMapEntry *current_;
  jint expectedModCount_;
}

#pragma mark Public

- (jboolean)hasNext;

- (void)remove;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)outer$;

- (JavaUtilLinkedHashMap_LinkedHashMapEntry *)nextNode;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilLinkedHashMap_LinkedHashIterator)

J2OBJC_FIELD_SETTER(JavaUtilLinkedHashMap_LinkedHashIterator, next_, JavaUtilLinkedHashMap_LinkedHashMapEntry *)
J2OBJC_FIELD_SETTER(JavaUtilLinkedHashMap_LinkedHashIterator, current_, JavaUtilLinkedHashMap_LinkedHashMapEntry *)

FOUNDATION_EXPORT void JavaUtilLinkedHashMap_LinkedHashIterator_initWithJavaUtilLinkedHashMap_(JavaUtilLinkedHashMap_LinkedHashIterator *self, JavaUtilLinkedHashMap *outer$);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilLinkedHashMap_LinkedHashIterator)

#endif

#if !defined (JavaUtilLinkedHashMap_LinkedKeyIterator_) && (INCLUDE_ALL_JavaUtilLinkedHashMap || defined(INCLUDE_JavaUtilLinkedHashMap_LinkedKeyIterator))
#define JavaUtilLinkedHashMap_LinkedKeyIterator_

#define RESTRICT_JavaUtilIterator 1
#define INCLUDE_JavaUtilIterator 1
#include "java/util/Iterator.h"

@class JavaUtilLinkedHashMap;
@protocol JavaUtilFunctionConsumer;

@interface JavaUtilLinkedHashMap_LinkedKeyIterator : JavaUtilLinkedHashMap_LinkedHashIterator < JavaUtilIterator >

#pragma mark Public

- (id)next;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilLinkedHashMap_LinkedKeyIterator)

FOUNDATION_EXPORT void JavaUtilLinkedHashMap_LinkedKeyIterator_initWithJavaUtilLinkedHashMap_(JavaUtilLinkedHashMap_LinkedKeyIterator *self, JavaUtilLinkedHashMap *outer$);

FOUNDATION_EXPORT JavaUtilLinkedHashMap_LinkedKeyIterator *new_JavaUtilLinkedHashMap_LinkedKeyIterator_initWithJavaUtilLinkedHashMap_(JavaUtilLinkedHashMap *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilLinkedHashMap_LinkedKeyIterator *create_JavaUtilLinkedHashMap_LinkedKeyIterator_initWithJavaUtilLinkedHashMap_(JavaUtilLinkedHashMap *outer$);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilLinkedHashMap_LinkedKeyIterator)

#endif

#if !defined (JavaUtilLinkedHashMap_LinkedValueIterator_) && (INCLUDE_ALL_JavaUtilLinkedHashMap || defined(INCLUDE_JavaUtilLinkedHashMap_LinkedValueIterator))
#define JavaUtilLinkedHashMap_LinkedValueIterator_

#define RESTRICT_JavaUtilIterator 1
#define INCLUDE_JavaUtilIterator 1
#include "java/util/Iterator.h"

@class JavaUtilLinkedHashMap;
@protocol JavaUtilFunctionConsumer;

@interface JavaUtilLinkedHashMap_LinkedValueIterator : JavaUtilLinkedHashMap_LinkedHashIterator < JavaUtilIterator >

#pragma mark Public

- (id)next;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilLinkedHashMap_LinkedValueIterator)

FOUNDATION_EXPORT void JavaUtilLinkedHashMap_LinkedValueIterator_initWithJavaUtilLinkedHashMap_(JavaUtilLinkedHashMap_LinkedValueIterator *self, JavaUtilLinkedHashMap *outer$);

FOUNDATION_EXPORT JavaUtilLinkedHashMap_LinkedValueIterator *new_JavaUtilLinkedHashMap_LinkedValueIterator_initWithJavaUtilLinkedHashMap_(JavaUtilLinkedHashMap *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilLinkedHashMap_LinkedValueIterator *create_JavaUtilLinkedHashMap_LinkedValueIterator_initWithJavaUtilLinkedHashMap_(JavaUtilLinkedHashMap *outer$);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilLinkedHashMap_LinkedValueIterator)

#endif

#if !defined (JavaUtilLinkedHashMap_LinkedEntryIterator_) && (INCLUDE_ALL_JavaUtilLinkedHashMap || defined(INCLUDE_JavaUtilLinkedHashMap_LinkedEntryIterator))
#define JavaUtilLinkedHashMap_LinkedEntryIterator_

#define RESTRICT_JavaUtilIterator 1
#define INCLUDE_JavaUtilIterator 1
#include "java/util/Iterator.h"

@class JavaUtilLinkedHashMap;
@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilMap_Entry;

@interface JavaUtilLinkedHashMap_LinkedEntryIterator : JavaUtilLinkedHashMap_LinkedHashIterator < JavaUtilIterator >

#pragma mark Public

- (id<JavaUtilMap_Entry>)next;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilLinkedHashMap_LinkedEntryIterator)

FOUNDATION_EXPORT void JavaUtilLinkedHashMap_LinkedEntryIterator_initWithJavaUtilLinkedHashMap_(JavaUtilLinkedHashMap_LinkedEntryIterator *self, JavaUtilLinkedHashMap *outer$);

FOUNDATION_EXPORT JavaUtilLinkedHashMap_LinkedEntryIterator *new_JavaUtilLinkedHashMap_LinkedEntryIterator_initWithJavaUtilLinkedHashMap_(JavaUtilLinkedHashMap *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilLinkedHashMap_LinkedEntryIterator *create_JavaUtilLinkedHashMap_LinkedEntryIterator_initWithJavaUtilLinkedHashMap_(JavaUtilLinkedHashMap *outer$);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilLinkedHashMap_LinkedEntryIterator)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilLinkedHashMap")
