//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/concurrent/Future.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilConcurrentFuture")
#ifdef RESTRICT_JavaUtilConcurrentFuture
#define INCLUDE_ALL_JavaUtilConcurrentFuture 0
#else
#define INCLUDE_ALL_JavaUtilConcurrentFuture 1
#endif
#undef RESTRICT_JavaUtilConcurrentFuture

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilConcurrentFuture_) && (INCLUDE_ALL_JavaUtilConcurrentFuture || defined(INCLUDE_JavaUtilConcurrentFuture))
#define JavaUtilConcurrentFuture_

@class JavaUtilConcurrentTimeUnit;

/*!
 @brief A <code>Future</code> represents the result of an asynchronous
  computation.Methods are provided to check if the computation is
  complete, to wait for its completion, and to retrieve the result of
  the computation.
 The result can only be retrieved using method 
 <code>get</code> when the computation has completed, blocking if
  necessary until it is ready.  Cancellation is performed by the 
 <code>cancel</code> method.  Additional methods are provided to
  determine if the task completed normally or was cancelled. Once a
  computation has completed, the computation cannot be cancelled.
  If you would like to use a <code>Future</code> for the sake
  of cancellability but not provide a usable result, you can
  declare types of the form <code>Future<?></code> and
  return <code>null</code> as a result of the underlying task. 
 <p>
  <b>Sample Usage</b> (Note that the following classes are all
  made-up.) 
 @code
  interface ArchiveSearcher { String search(String target); }
  class App {
    ExecutorService executor = ...
    ArchiveSearcher searcher = ...
    void showSearch(final String target)
        throws InterruptedException {
      Future<String> future
        = executor.submit(new Callable<String>() {
          public String call() {
              return searcher.search(target);
          }});
      displayOtherThings(); // do other things while searching
      try {
        displayText(future.get()); // use future
      } catch (ExecutionException ex) { cleanup(); return; }    }    }
 
@endcode
  The <code>FutureTask</code> class is an implementation of <code>Future</code> that
  implements <code>Runnable</code>, and so may be executed by an <code>Executor</code>.
  For example, the above construction with <code>submit</code> could be replaced by: 
 @code
  FutureTask<String> future =
    new FutureTask<>(new Callable<String>() {
      public String call() {
        return searcher.search(target);
    }});
  executor.execute(future);
 
@endcode
  
 <p>Memory consistency effects: Actions taken by the asynchronous computation 
 <a href="package-summary.html#MemoryVisibility"> <i>happen-before</i></a>
  actions following the corresponding <code>Future.get()</code> in another thread.
 - seealso: FutureTask
 - seealso: Executor
 @since 1.5
 @author Doug Lea
 */
@protocol JavaUtilConcurrentFuture < JavaObject >

/*!
 @brief Attempts to cancel execution of this task.This attempt will
  fail if the task has already completed, has already been cancelled,
  or could not be cancelled for some other reason.
 If successful,
  and this task has not started when <code>cancel</code> is called,
  this task should never run.  If the task has already started,
  then the <code>mayInterruptIfRunning</code> parameter determines
  whether the thread executing this task should be interrupted in
  an attempt to stop the task. 
 <p>After this method returns, subsequent calls to <code>isDone</code> will
  always return <code>true</code>.  Subsequent calls to <code>isCancelled</code>
  will always return <code>true</code> if this method returned <code>true</code>.
 @param mayInterruptIfRunning<code>true</code>  if the thread executing this  task should be interrupted; otherwise, in-progress tasks are allowed
   to complete
 @return <code>false</code> if the task could not be cancelled,
  typically because it has already completed normally; 
 <code>true</code> otherwise
 */
- (jboolean)cancelWithBoolean:(jboolean)mayInterruptIfRunning;

/*!
 @brief Returns <code>true</code> if this task was cancelled before it completed
  normally.
 @return <code>true</code> if this task was cancelled before it completed
 */
- (jboolean)isCancelled;

/*!
 @brief Returns <code>true</code> if this task completed.
 Completion may be due to normal termination, an exception, or
  cancellation -- in all of these cases, this method will return 
 <code>true</code>.
 @return <code>true</code> if this task completed
 */
- (jboolean)isDone;

/*!
 @brief Waits if necessary for the computation to complete, and then
  retrieves its result.
 @return the computed result
 @throw CancellationExceptionif the computation was cancelled
 @throw ExecutionExceptionif the computation threw an
  exception
 @throw InterruptedExceptionif the current thread was interrupted
  while waiting
 */
- (id)get;

/*!
 @brief Waits if necessary for at most the given time for the computation
  to complete, and then retrieves its result, if available.
 @param timeout the maximum time to wait
 @param unit the time unit of the timeout argument
 @return the computed result
 @throw CancellationExceptionif the computation was cancelled
 @throw ExecutionExceptionif the computation threw an
  exception
 @throw InterruptedExceptionif the current thread was interrupted
  while waiting
 @throw TimeoutExceptionif the wait timed out
 */
- (id)getWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilConcurrentFuture)

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentFuture)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilConcurrentFuture")
