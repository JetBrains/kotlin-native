//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/concurrent/locks/AbstractOwnableSynchronizer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilConcurrentLocksAbstractOwnableSynchronizer")
#ifdef RESTRICT_JavaUtilConcurrentLocksAbstractOwnableSynchronizer
#define INCLUDE_ALL_JavaUtilConcurrentLocksAbstractOwnableSynchronizer 0
#else
#define INCLUDE_ALL_JavaUtilConcurrentLocksAbstractOwnableSynchronizer 1
#endif
#undef RESTRICT_JavaUtilConcurrentLocksAbstractOwnableSynchronizer

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilConcurrentLocksAbstractOwnableSynchronizer_) && (INCLUDE_ALL_JavaUtilConcurrentLocksAbstractOwnableSynchronizer || defined(INCLUDE_JavaUtilConcurrentLocksAbstractOwnableSynchronizer))
#define JavaUtilConcurrentLocksAbstractOwnableSynchronizer_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class JavaLangThread;

/*!
 @brief A synchronizer that may be exclusively owned by a thread.This
  class provides a basis for creating locks and related synchronizers
  that may entail a notion of ownership.
 The 
 <code>AbstractOwnableSynchronizer</code> class itself does not manage or
  use this information. However, subclasses and tools may use
  appropriately maintained values to help control and monitor access
  and provide diagnostics.
 @since 1.6
 @author Doug Lea
 */
@interface JavaUtilConcurrentLocksAbstractOwnableSynchronizer : NSObject < JavaIoSerializable >

#pragma mark Protected

/*!
 @brief Empty constructor for use by subclasses.
 */
- (instancetype __nonnull)init;

/*!
 @brief Returns the thread last set by <code>setExclusiveOwnerThread</code>,
  or <code>null</code> if never set.This method does not otherwise
  impose any synchronization or <code>volatile</code> field accesses.
 @return the owner thread
 */
- (JavaLangThread *)getExclusiveOwnerThread;

/*!
 @brief Sets the thread that currently owns exclusive access.
 A <code>null</code> argument indicates that no thread owns access.
  This method does not otherwise impose any synchronization or 
 <code>volatile</code> field accesses.
 @param thread the owner thread
 */
- (void)setExclusiveOwnerThreadWithJavaLangThread:(JavaLangThread *)thread;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilConcurrentLocksAbstractOwnableSynchronizer)

FOUNDATION_EXPORT void JavaUtilConcurrentLocksAbstractOwnableSynchronizer_init(JavaUtilConcurrentLocksAbstractOwnableSynchronizer *self);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentLocksAbstractOwnableSynchronizer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilConcurrentLocksAbstractOwnableSynchronizer")
