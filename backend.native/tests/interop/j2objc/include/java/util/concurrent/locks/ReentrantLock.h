//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/concurrent/locks/ReentrantLock.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilConcurrentLocksReentrantLock")
#ifdef RESTRICT_JavaUtilConcurrentLocksReentrantLock
#define INCLUDE_ALL_JavaUtilConcurrentLocksReentrantLock 0
#else
#define INCLUDE_ALL_JavaUtilConcurrentLocksReentrantLock 1
#endif
#undef RESTRICT_JavaUtilConcurrentLocksReentrantLock
#ifdef INCLUDE_JavaUtilConcurrentLocksReentrantLock_FairSync
#define INCLUDE_JavaUtilConcurrentLocksReentrantLock_Sync 1
#endif
#ifdef INCLUDE_JavaUtilConcurrentLocksReentrantLock_NonfairSync
#define INCLUDE_JavaUtilConcurrentLocksReentrantLock_Sync 1
#endif

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilConcurrentLocksReentrantLock_) && (INCLUDE_ALL_JavaUtilConcurrentLocksReentrantLock || defined(INCLUDE_JavaUtilConcurrentLocksReentrantLock))
#define JavaUtilConcurrentLocksReentrantLock_

#define RESTRICT_JavaUtilConcurrentLocksLock 1
#define INCLUDE_JavaUtilConcurrentLocksLock 1
#include "java/util/concurrent/locks/Lock.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class JavaLangThread;
@class JavaUtilConcurrentTimeUnit;
@protocol JavaUtilCollection;
@protocol JavaUtilConcurrentLocksCondition;

/*!
 @brief A reentrant mutual exclusion <code>Lock</code> with the same basic
  behavior and semantics as the implicit monitor lock accessed using 
 <code>synchronized</code> methods and statements, but with extended
  capabilities.
 <p>A <code>ReentrantLock</code> is <em>owned</em> by the thread last
  successfully locking, but not yet unlocking it. A thread invoking 
 <code>lock</code> will return, successfully acquiring the lock, when
  the lock is not owned by another thread. The method will return
  immediately if the current thread already owns the lock. This can
  be checked using methods <code>isHeldByCurrentThread</code>, and <code>getHoldCount</code>
 .
  
 <p>The constructor for this class accepts an optional 
 <em>fairness</em> parameter.  When set <code>true</code>, under
  contention, locks favor granting access to the longest-waiting
  thread.  Otherwise this lock does not guarantee any particular
  access order.  Programs using fair locks accessed by many threads
  may display lower overall throughput (i.e., are slower; often much
  slower) than those using the default setting, but have smaller
  variances in times to obtain locks and guarantee lack of
  starvation. Note however, that fairness of locks does not guarantee
  fairness of thread scheduling. Thus, one of many threads using a
  fair lock may obtain it multiple times in succession while other
  active threads are not progressing and not currently holding the
  lock.
  Also note that the untimed <code>tryLock()</code> method does not
  honor the fairness setting. It will succeed if the lock
  is available even if other threads are waiting. 
 <p>It is recommended practice to <em>always</em> immediately
  follow a call to <code>lock</code> with a <code>try</code> block, most
  typically in a before/after construction such as: 
 @code
  class X {
    private final ReentrantLock lock = new ReentrantLock();
    // ...
    public void m() {
      lock.lock();  // block until condition holds
      try {
        // ... method body
      } finally {
        lock.unlock()
      }    }    }
 
@endcode
  
 <p>In addition to implementing the <code>Lock</code> interface, this
  class defines a number of <code>public</code> and <code>protected</code>
  methods for inspecting the state of the lock.  Some of these
  methods are only useful for instrumentation and monitoring. 
 <p>Serialization of this class behaves in the same way as built-in
  locks: a deserialized lock is in the unlocked state, regardless of
  its state when serialized. 
 <p>This lock supports a maximum of 2147483647 recursive locks by
  the same thread. Attempts to exceed this limit result in 
 <code>Error</code> throws from locking methods.
 @since 1.5
 @author Doug Lea
 */
@interface JavaUtilConcurrentLocksReentrantLock : NSObject < JavaUtilConcurrentLocksLock, JavaIoSerializable >

#pragma mark Public

/*!
 @brief Creates an instance of <code>ReentrantLock</code>.
 This is equivalent to using <code>ReentrantLock(false)</code>.
 */
- (instancetype __nonnull)init;

/*!
 @brief Creates an instance of <code>ReentrantLock</code> with the
  given fairness policy.
 @param fair<code>true</code>  if this lock should use a fair ordering policy
 */
- (instancetype __nonnull)initWithBoolean:(jboolean)fair;

/*!
 @brief Queries the number of holds on this lock by the current thread.
 <p>A thread has a hold on a lock for each lock action that is not
  matched by an unlock action. 
 <p>The hold count information is typically only used for testing and
  debugging purposes. For example, if a certain section of code should
  not be entered with the lock already held then we can assert that
  fact: 
 @code
  class X {
    ReentrantLock lock = new ReentrantLock();
    // ...
    public void m() {
      assert lock.getHoldCount() == 0;
      lock.lock();
      try {
        // ... method body
      } finally {
        lock.unlock();
      }    }    }
 
@endcode
 @return the number of holds on this lock by the current thread,
          or zero if this lock is not held by the current thread
 */
- (jint)getHoldCount;

/*!
 @brief Returns an estimate of the number of threads waiting to acquire
  this lock.The value is only an estimate because the number of
  threads may change dynamically while this method traverses
  internal data structures.
 This method is designed for use in
  monitoring system state, not for synchronization control.
 @return the estimated number of threads waiting for this lock
 */
- (jint)getQueueLength;

/*!
 @brief Returns an estimate of the number of threads waiting on the
  given condition associated with this lock.Note that because
  timeouts and interrupts may occur at any time, the estimate
  serves only as an upper bound on the actual number of waiters.
 This method is designed for use in monitoring of the system
  state, not for synchronization control.
 @param condition the condition
 @return the estimated number of waiting threads
 @throw IllegalMonitorStateExceptionif this lock is not held
 @throw IllegalArgumentExceptionif the given condition is
          not associated with this lock
 @throw NullPointerExceptionif the condition is null
 */
- (jint)getWaitQueueLengthWithJavaUtilConcurrentLocksCondition:(id<JavaUtilConcurrentLocksCondition>)condition;

/*!
 @brief Queries whether the given thread is waiting to acquire this
  lock.Note that because cancellations may occur at any time, a 
 <code>true</code> return does not guarantee that this thread
  will ever acquire this lock.
 This method is designed primarily for use
  in monitoring of the system state.
 @param thread the thread
 @return <code>true</code> if the given thread is queued waiting for this lock
 @throw NullPointerExceptionif the thread is null
 */
- (jboolean)hasQueuedThreadWithJavaLangThread:(JavaLangThread *)thread;

/*!
 @brief Queries whether any threads are waiting to acquire this lock.Note that
  because cancellations may occur at any time, a <code>true</code>
  return does not guarantee that any other thread will ever
  acquire this lock.
 This method is designed primarily for use in
  monitoring of the system state.
 @return <code>true</code> if there may be other threads waiting to
          acquire the lock
 */
- (jboolean)hasQueuedThreads;

/*!
 @brief Queries whether any threads are waiting on the given condition
  associated with this lock.Note that because timeouts and
  interrupts may occur at any time, a <code>true</code> return does
  not guarantee that a future <code>signal</code> will awaken any
  threads.
 This method is designed primarily for use in
  monitoring of the system state.
 @param condition the condition
 @return <code>true</code> if there are any waiting threads
 @throw IllegalMonitorStateExceptionif this lock is not held
 @throw IllegalArgumentExceptionif the given condition is
          not associated with this lock
 @throw NullPointerExceptionif the condition is null
 */
- (jboolean)hasWaitersWithJavaUtilConcurrentLocksCondition:(id<JavaUtilConcurrentLocksCondition>)condition;

/*!
 @brief Returns <code>true</code> if this lock has fairness set true.
 @return <code>true</code> if this lock has fairness set true
 */
- (jboolean)isFair;

/*!
 @brief Queries if this lock is held by the current thread.
 <p>Analogous to the <code>Thread.holdsLock(Object)</code> method for
  built-in monitor locks, this method is typically used for
  debugging and testing. For example, a method that should only be
  called while a lock is held can assert that this is the case: 
 @code
  class X {
    ReentrantLock lock = new ReentrantLock();
    // ...
    public void m() {
        assert lock.isHeldByCurrentThread();
        // ... method body
    }  }
 
@endcode
  
 <p>It can also be used to ensure that a reentrant lock is used
  in a non-reentrant manner, for example: 
 @code
  class X {
    ReentrantLock lock = new ReentrantLock();
    // ...
    public void m() {
        assert !lock.isHeldByCurrentThread();
        lock.lock();
        try {
            // ... method body
        } finally {
            lock.unlock();
        }      }      }
 
@endcode
 @return <code>true</code> if current thread holds this lock and
          <code>false</code> otherwise
 */
- (jboolean)isHeldByCurrentThread;

/*!
 @brief Queries if this lock is held by any thread.This method is
  designed for use in monitoring of the system state,
  not for synchronization control.
 @return <code>true</code> if any thread holds this lock and
          <code>false</code> otherwise
 */
- (jboolean)isLocked;

/*!
 @brief Acquires the lock.
 <p>Acquires the lock if it is not held by another thread and returns
  immediately, setting the lock hold count to one. 
 <p>If the current thread already holds the lock then the hold
  count is incremented by one and the method returns immediately. 
 <p>If the lock is held by another thread then the
  current thread becomes disabled for thread scheduling
  purposes and lies dormant until the lock has been acquired,
  at which time the lock hold count is set to one.
 */
- (void)lock;

/*!
 @brief Acquires the lock unless the current thread is 
 interrupted.
 <p>Acquires the lock if it is not held by another thread and returns
  immediately, setting the lock hold count to one. 
 <p>If the current thread already holds this lock then the hold count
  is incremented by one and the method returns immediately. 
 <p>If the lock is held by another thread then the
  current thread becomes disabled for thread scheduling
  purposes and lies dormant until one of two things happens: 
 <ul>
  
 <li>The lock is acquired by the current thread; or 
 <li>Some other thread interrupts the
  current thread. 
 </ul>
  
 <p>If the lock is acquired by the current thread then the lock hold
  count is set to one. 
 <p>If the current thread: 
 <ul>
  
 <li>has its interrupted status set on entry to this method; or 
 <li>is interrupted while acquiring
  the lock, 
 </ul>
  then <code>InterruptedException</code> is thrown and the current thread's
  interrupted status is cleared. 
 <p>In this implementation, as this method is an explicit
  interruption point, preference is given to responding to the
  interrupt over normal or reentrant acquisition of the lock.
 @throw InterruptedExceptionif the current thread is interrupted
 */
- (void)lockInterruptibly;

/*!
 @brief Returns a <code>Condition</code> instance for use with this 
 <code>Lock</code> instance.
 <p>The returned <code>Condition</code> instance supports the same
  usages as do the <code>Object</code> monitor methods (<code>wait</code>
 , <code>notify</code>, and <code>notifyAll</code>
 ) when used with the built-in
  monitor lock. 
 <ul>
  
 <li>If this lock is not held when any of the <code>Condition</code>
  waiting or signalling
  methods are called, then an <code>IllegalMonitorStateException</code>
  is thrown. 
 <li>When the condition waiting
  methods are called the lock is released and, before they
  return, the lock is reacquired and the lock hold count restored
  to what it was when the method was called. 
 <li>If a thread is interrupted
  while waiting then the wait will terminate, an <code>InterruptedException</code>
  will be thrown, and the thread's
  interrupted status will be cleared. 
 <li>Waiting threads are signalled in FIFO order. 
 <li>The ordering of lock reacquisition for threads returning
  from waiting methods is the same as for threads initially
  acquiring the lock, which is in the default case not specified,
  but for <em>fair</em> locks favors those threads that have been
  waiting the longest. 
 </ul>
 @return the Condition object
 */
- (id<JavaUtilConcurrentLocksCondition>)newCondition OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns a string identifying this lock, as well as its lock state.
 The state, in brackets, includes either the String <code>"Unlocked"</code>
  or the String <code>"Locked by"</code> followed by the 
 name of the owning thread.
 @return a string identifying this lock, as well as its lock state
 */
- (NSString *)description;

/*!
 @brief Acquires the lock only if it is not held by another thread at the time
  of invocation.
 <p>Acquires the lock if it is not held by another thread and
  returns immediately with the value <code>true</code>, setting the
  lock hold count to one. Even when this lock has been set to use a
  fair ordering policy, a call to <code>tryLock()</code> <em>will</em>
  immediately acquire the lock if it is available, whether or not
  other threads are currently waiting for the lock.
  This &quot;barging&quot; behavior can be useful in certain
  circumstances, even though it breaks fairness. If you want to honor
  the fairness setting for this lock, then use 
 <code>tryLock(0, TimeUnit.SECONDS)</code>
  which is almost equivalent (it also detects interruption). 
 <p>If the current thread already holds this lock then the hold
  count is incremented by one and the method returns <code>true</code>.
  
 <p>If the lock is held by another thread then this method will return
  immediately with the value <code>false</code>.
 @return <code>true</code> if the lock was free and was acquired by the
          current thread, or the lock was already held by the current
          thread; and <code>false</code> otherwise
 */
- (jboolean)tryLock;

/*!
 @brief Acquires the lock if it is not held by another thread within the given
  waiting time and the current thread has not been 
 interrupted.
 <p>Acquires the lock if it is not held by another thread and returns
  immediately with the value <code>true</code>, setting the lock hold count
  to one. If this lock has been set to use a fair ordering policy then
  an available lock <em>will not</em> be acquired if any other threads
  are waiting for the lock. This is in contrast to the <code>tryLock()</code>
  method. If you want a timed <code>tryLock</code> that does permit barging on
  a fair lock then combine the timed and un-timed forms together: 
 @code
  if (lock.tryLock() ||
      lock.tryLock(timeout, unit)) {
    ...
  }
 
@endcode
  
 <p>If the current thread
  already holds this lock then the hold count is incremented by one and
  the method returns <code>true</code>.
  
 <p>If the lock is held by another thread then the
  current thread becomes disabled for thread scheduling
  purposes and lies dormant until one of three things happens: 
 <ul>
  
 <li>The lock is acquired by the current thread; or 
 <li>Some other thread interrupts
  the current thread; or 
 <li>The specified waiting time elapses 
 </ul>
  
 <p>If the lock is acquired then the value <code>true</code> is returned and
  the lock hold count is set to one. 
 <p>If the current thread: 
 <ul>
  
 <li>has its interrupted status set on entry to this method; or 
 <li>is interrupted while
  acquiring the lock, 
 </ul>
  then <code>InterruptedException</code> is thrown and the current thread's
  interrupted status is cleared. 
 <p>If the specified waiting time elapses then the value <code>false</code>
  is returned.  If the time is less than or equal to zero, the method
  will not wait at all. 
 <p>In this implementation, as this method is an explicit
  interruption point, preference is given to responding to the
  interrupt over normal or reentrant acquisition of the lock, and
  over reporting the elapse of the waiting time.
 @param timeout the time to wait for the lock
 @param unit the time unit of the timeout argument
 @return <code>true</code> if the lock was free and was acquired by the
          current thread, or the lock was already held by the current
          thread; and <code>false</code> if the waiting time elapsed before
          the lock could be acquired
 @throw InterruptedExceptionif the current thread is interrupted
 @throw NullPointerExceptionif the time unit is null
 */
- (jboolean)tryLockWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

/*!
 @brief Attempts to release this lock.
 <p>If the current thread is the holder of this lock then the hold
  count is decremented.  If the hold count is now zero then the lock
  is released.  If the current thread is not the holder of this
  lock then <code>IllegalMonitorStateException</code> is thrown.
 @throw IllegalMonitorStateExceptionif the current thread does not
          hold this lock
 */
- (void)unlock;

#pragma mark Protected

/*!
 @brief Returns the thread that currently owns this lock, or 
 <code>null</code> if not owned.When this method is called by a
  thread that is not the owner, the return value reflects a
  best-effort approximation of current lock status.
 For example,
  the owner may be momentarily <code>null</code> even if there are
  threads trying to acquire the lock but have not yet done so.
  This method is designed to facilitate construction of
  subclasses that provide more extensive lock monitoring
  facilities.
 @return the owner, or <code>null</code> if not owned
 */
- (JavaLangThread *)getOwner;

/*!
 @brief Returns a collection containing threads that may be waiting to
  acquire this lock.Because the actual set of threads may change
  dynamically while constructing this result, the returned
  collection is only a best-effort estimate.
 The elements of the
  returned collection are in no particular order.  This method is
  designed to facilitate construction of subclasses that provide
  more extensive monitoring facilities.
 @return the collection of threads
 */
- (id<JavaUtilCollection>)getQueuedThreads;

/*!
 @brief Returns a collection containing those threads that may be
  waiting on the given condition associated with this lock.
 Because the actual set of threads may change dynamically while
  constructing this result, the returned collection is only a
  best-effort estimate. The elements of the returned collection
  are in no particular order.  This method is designed to
  facilitate construction of subclasses that provide more
  extensive condition monitoring facilities.
 @param condition the condition
 @return the collection of threads
 @throw IllegalMonitorStateExceptionif this lock is not held
 @throw IllegalArgumentExceptionif the given condition is
          not associated with this lock
 @throw NullPointerExceptionif the condition is null
 */
- (id<JavaUtilCollection>)getWaitingThreadsWithJavaUtilConcurrentLocksCondition:(id<JavaUtilConcurrentLocksCondition>)condition;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilConcurrentLocksReentrantLock)

FOUNDATION_EXPORT void JavaUtilConcurrentLocksReentrantLock_init(JavaUtilConcurrentLocksReentrantLock *self);

FOUNDATION_EXPORT JavaUtilConcurrentLocksReentrantLock *new_JavaUtilConcurrentLocksReentrantLock_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilConcurrentLocksReentrantLock *create_JavaUtilConcurrentLocksReentrantLock_init(void);

FOUNDATION_EXPORT void JavaUtilConcurrentLocksReentrantLock_initWithBoolean_(JavaUtilConcurrentLocksReentrantLock *self, jboolean fair);

FOUNDATION_EXPORT JavaUtilConcurrentLocksReentrantLock *new_JavaUtilConcurrentLocksReentrantLock_initWithBoolean_(jboolean fair) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilConcurrentLocksReentrantLock *create_JavaUtilConcurrentLocksReentrantLock_initWithBoolean_(jboolean fair);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentLocksReentrantLock)

#endif

#if !defined (JavaUtilConcurrentLocksReentrantLock_Sync_) && (INCLUDE_ALL_JavaUtilConcurrentLocksReentrantLock || defined(INCLUDE_JavaUtilConcurrentLocksReentrantLock_Sync))
#define JavaUtilConcurrentLocksReentrantLock_Sync_

#define RESTRICT_JavaUtilConcurrentLocksAbstractQueuedSynchronizer 1
#define INCLUDE_JavaUtilConcurrentLocksAbstractQueuedSynchronizer 1
#include "java/util/concurrent/locks/AbstractQueuedSynchronizer.h"

@class JavaLangThread;
@class JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject;

/*!
 @brief Base of synchronization control for this lock.Subclassed
  into fair and nonfair versions below.
 Uses AQS state to
  represent the number of holds on the lock.
 */
@interface JavaUtilConcurrentLocksReentrantLock_Sync : JavaUtilConcurrentLocksAbstractQueuedSynchronizer

#pragma mark Protected

- (jboolean)isHeldExclusively;

- (jboolean)tryReleaseWithInt:(jint)releases;

#pragma mark Package-Private

- (instancetype __nonnull)init;

- (jint)getHoldCount;

- (JavaLangThread *)getOwner;

- (jboolean)isLocked;

/*!
 @brief Performs <code>Lock.lock</code>.The main reason for subclassing
  is to allow fast path for nonfair version.
 */
- (void)lock;

- (JavaUtilConcurrentLocksAbstractQueuedSynchronizer_ConditionObject *)newCondition OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Performs non-fair tryLock.tryAcquire is implemented in
  subclasses, but both need nonfair try for trylock method.
 */
- (jboolean)nonfairTryAcquireWithInt:(jint)acquires;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilConcurrentLocksReentrantLock_Sync)

FOUNDATION_EXPORT void JavaUtilConcurrentLocksReentrantLock_Sync_init(JavaUtilConcurrentLocksReentrantLock_Sync *self);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentLocksReentrantLock_Sync)

#endif

#if !defined (JavaUtilConcurrentLocksReentrantLock_NonfairSync_) && (INCLUDE_ALL_JavaUtilConcurrentLocksReentrantLock || defined(INCLUDE_JavaUtilConcurrentLocksReentrantLock_NonfairSync))
#define JavaUtilConcurrentLocksReentrantLock_NonfairSync_

/*!
 @brief Sync object for non-fair locks
 */
@interface JavaUtilConcurrentLocksReentrantLock_NonfairSync : JavaUtilConcurrentLocksReentrantLock_Sync

#pragma mark Protected

- (jboolean)tryAcquireWithInt:(jint)acquires;

#pragma mark Package-Private

- (instancetype __nonnull)init;

/*!
 @brief Performs lock.Try immediate barge, backing up to normal
  acquire on failure.
 */
- (void)lock;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilConcurrentLocksReentrantLock_NonfairSync)

FOUNDATION_EXPORT void JavaUtilConcurrentLocksReentrantLock_NonfairSync_init(JavaUtilConcurrentLocksReentrantLock_NonfairSync *self);

FOUNDATION_EXPORT JavaUtilConcurrentLocksReentrantLock_NonfairSync *new_JavaUtilConcurrentLocksReentrantLock_NonfairSync_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilConcurrentLocksReentrantLock_NonfairSync *create_JavaUtilConcurrentLocksReentrantLock_NonfairSync_init(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentLocksReentrantLock_NonfairSync)

#endif

#if !defined (JavaUtilConcurrentLocksReentrantLock_FairSync_) && (INCLUDE_ALL_JavaUtilConcurrentLocksReentrantLock || defined(INCLUDE_JavaUtilConcurrentLocksReentrantLock_FairSync))
#define JavaUtilConcurrentLocksReentrantLock_FairSync_

/*!
 @brief Sync object for fair locks
 */
@interface JavaUtilConcurrentLocksReentrantLock_FairSync : JavaUtilConcurrentLocksReentrantLock_Sync

#pragma mark Protected

/*!
 @brief Fair version of tryAcquire.Don't grant access unless
  recursive call or no waiters or is first.
 */
- (jboolean)tryAcquireWithInt:(jint)acquires;

#pragma mark Package-Private

- (instancetype __nonnull)init;

- (void)lock;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilConcurrentLocksReentrantLock_FairSync)

FOUNDATION_EXPORT void JavaUtilConcurrentLocksReentrantLock_FairSync_init(JavaUtilConcurrentLocksReentrantLock_FairSync *self);

FOUNDATION_EXPORT JavaUtilConcurrentLocksReentrantLock_FairSync *new_JavaUtilConcurrentLocksReentrantLock_FairSync_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilConcurrentLocksReentrantLock_FairSync *create_JavaUtilConcurrentLocksReentrantLock_FairSync_init(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentLocksReentrantLock_FairSync)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilConcurrentLocksReentrantLock")
