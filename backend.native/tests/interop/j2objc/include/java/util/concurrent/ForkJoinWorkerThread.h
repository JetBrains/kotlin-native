//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/concurrent/ForkJoinWorkerThread.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilConcurrentForkJoinWorkerThread")
#ifdef RESTRICT_JavaUtilConcurrentForkJoinWorkerThread
#define INCLUDE_ALL_JavaUtilConcurrentForkJoinWorkerThread 0
#else
#define INCLUDE_ALL_JavaUtilConcurrentForkJoinWorkerThread 1
#endif
#undef RESTRICT_JavaUtilConcurrentForkJoinWorkerThread

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilConcurrentForkJoinWorkerThread_) && (INCLUDE_ALL_JavaUtilConcurrentForkJoinWorkerThread || defined(INCLUDE_JavaUtilConcurrentForkJoinWorkerThread))
#define JavaUtilConcurrentForkJoinWorkerThread_

#define RESTRICT_JavaLangThread 1
#define INCLUDE_JavaLangThread 1
#include "java/lang/Thread.h"

@class JavaLangThreadGroup;
@class JavaLangThrowable;
@class JavaUtilConcurrentForkJoinPool;
@class JavaUtilConcurrentForkJoinPool_WorkQueue;
@protocol JavaLangRunnable;

/*!
 @brief A thread managed by a <code>ForkJoinPool</code>, which executes 
 <code>ForkJoinTask</code>s.
 This class is subclassable solely for the sake of adding
  functionality -- there are no overridable methods dealing with
  scheduling or execution.  However, you can override initialization
  and termination methods surrounding the main task processing loop.
  If you do create such a subclass, you will also need to supply a
  custom <code>ForkJoinPool.ForkJoinWorkerThreadFactory</code> to 
 use it in a <code>ForkJoinPool</code>.
 @since 1.7
 @author Doug Lea
 */
@interface JavaUtilConcurrentForkJoinWorkerThread : JavaLangThread {
 @public
  JavaUtilConcurrentForkJoinPool *pool_;
  __unsafe_unretained JavaUtilConcurrentForkJoinPool_WorkQueue *workQueue_;
}

#pragma mark Public

/*!
 @brief Returns the pool hosting this thread.
 @return the pool
 */
- (JavaUtilConcurrentForkJoinPool *)getPool;

/*!
 @brief Returns the unique index number of this thread in its pool.
 The returned value ranges from zero to the maximum number of
  threads (minus one) that may exist in the pool, and does not
  change during the lifetime of the thread.  This method may be
  useful for applications that track status or collect results
  per-worker-thread rather than per-task.
 @return the index number
 */
- (jint)getPoolIndex;

/*!
 @brief This method is required to be public, but should never be
  called explicitly.It performs the main run loop to execute 
 <code>ForkJoinTask</code>s.
 */
- (void)run;

#pragma mark Protected

/*!
 @brief Creates a ForkJoinWorkerThread operating in the given pool.
 @param pool the pool this thread works in
 @throw NullPointerExceptionif pool is null
 */
- (instancetype __nonnull)initWithJavaUtilConcurrentForkJoinPool:(JavaUtilConcurrentForkJoinPool *)pool;

/*!
 @brief Initializes internal state after construction but before
  processing any tasks.If you override this method, you must
  invoke <code>super.onStart()</code> at the beginning of the method.
 Initialization requires care: Most fields must have legal
  default values, to ensure that attempted accesses from other
  threads work correctly even before this thread starts
  processing tasks.
 */
- (void)onStart;

/*!
 @brief Performs cleanup associated with termination of this worker
  thread.If you override this method, you must invoke 
 <code>super.onTermination</code> at the end of the overridden method.
 @param exception the exception causing this thread to abort due  to an unrecoverable error, or 
 <code>null</code>  if completed normally
 */
- (void)onTerminationWithJavaLangThrowable:(JavaLangThrowable *)exception;

#pragma mark Package-Private

/*!
 @brief Non-public hook method for InnocuousForkJoinWorkerThread.
 */
- (void)afterTopLevelExec;

/*!
 @brief Erases ThreadLocals by nulling out Thread maps.
 */
- (void)eraseThreadLocals;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithJavaLangRunnable:(id<JavaLangRunnable>)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithJavaLangRunnable:(id<JavaLangRunnable>)arg0
                                      withNSString:(NSString *)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithJavaLangThreadGroup:(JavaLangThreadGroup *)arg0
                                 withJavaLangRunnable:(id<JavaLangRunnable>)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithJavaLangThreadGroup:(JavaLangThreadGroup *)arg0
                                 withJavaLangRunnable:(id<JavaLangRunnable>)arg1
                                         withNSString:(NSString *)arg2 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithJavaLangThreadGroup:(JavaLangThreadGroup *)arg0
                                 withJavaLangRunnable:(id<JavaLangRunnable>)arg1
                                         withNSString:(NSString *)arg2
                                             withLong:(jlong)arg3 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithJavaLangThreadGroup:(JavaLangThreadGroup *)arg0
                                         withNSString:(NSString *)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(JavaUtilConcurrentForkJoinWorkerThread)

J2OBJC_FIELD_SETTER(JavaUtilConcurrentForkJoinWorkerThread, pool_, JavaUtilConcurrentForkJoinPool *)

FOUNDATION_EXPORT void JavaUtilConcurrentForkJoinWorkerThread_initWithJavaUtilConcurrentForkJoinPool_(JavaUtilConcurrentForkJoinWorkerThread *self, JavaUtilConcurrentForkJoinPool *pool);

FOUNDATION_EXPORT JavaUtilConcurrentForkJoinWorkerThread *new_JavaUtilConcurrentForkJoinWorkerThread_initWithJavaUtilConcurrentForkJoinPool_(JavaUtilConcurrentForkJoinPool *pool) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilConcurrentForkJoinWorkerThread *create_JavaUtilConcurrentForkJoinWorkerThread_initWithJavaUtilConcurrentForkJoinPool_(JavaUtilConcurrentForkJoinPool *pool);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentForkJoinWorkerThread)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilConcurrentForkJoinWorkerThread")
