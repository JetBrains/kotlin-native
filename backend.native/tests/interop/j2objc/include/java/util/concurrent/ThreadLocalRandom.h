//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/concurrent/ThreadLocalRandom.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilConcurrentThreadLocalRandom")
#ifdef RESTRICT_JavaUtilConcurrentThreadLocalRandom
#define INCLUDE_ALL_JavaUtilConcurrentThreadLocalRandom 0
#else
#define INCLUDE_ALL_JavaUtilConcurrentThreadLocalRandom 1
#endif
#undef RESTRICT_JavaUtilConcurrentThreadLocalRandom

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilConcurrentThreadLocalRandom_) && (INCLUDE_ALL_JavaUtilConcurrentThreadLocalRandom || defined(INCLUDE_JavaUtilConcurrentThreadLocalRandom))
#define JavaUtilConcurrentThreadLocalRandom_

#define RESTRICT_JavaUtilRandom 1
#define INCLUDE_JavaUtilRandom 1
#include "java/util/Random.h"

@protocol JavaUtilStreamDoubleStream;
@protocol JavaUtilStreamIntStream;
@protocol JavaUtilStreamLongStream;

/*!
 @brief A random number generator isolated to the current thread.Like the
  global <code>java.util.Random</code> generator used by the <code>java.lang.Math</code>
  class, a <code>ThreadLocalRandom</code> is initialized
  with an internally generated seed that may not otherwise be
  modified.
 When applicable, use of <code>ThreadLocalRandom</code> rather
  than shared <code>Random</code> objects in concurrent programs will
  typically encounter much less overhead and contention.  Use of 
 <code>ThreadLocalRandom</code> is particularly appropriate when multiple
  tasks (for example, each a <code>ForkJoinTask</code>) use random numbers
  in parallel in thread pools. 
 <p>Usages of this class should typically be of the form: 
 <code>ThreadLocalRandom.current().nextX(...)</code> (where 
 <code>X</code> is <code>Int</code>, <code>Long</code>, etc).
  When all usages are of this form, it is never possible to
  accidently share a <code>ThreadLocalRandom</code> across multiple threads. 
 <p>This class also provides additional commonly used bounded random
  generation methods. 
 <p>Instances of <code>ThreadLocalRandom</code> are not cryptographically
  secure.  Consider instead using <code>java.security.SecureRandom</code>
  in security-sensitive applications. Additionally,
  default-constructed instances do not use a cryptographically random
  seed unless the system property
  <code>java.util.secureRandomSeed</code> is set to <code>true</code>.
 @since 1.7
 @author Doug Lea
 */
@interface JavaUtilConcurrentThreadLocalRandom : JavaUtilRandom {
 @public
  /*!
   @brief Field used only during singleton initialization.
   True when constructor completes.
   */
  jboolean initialized_;
}
@property (readonly, copy, class) NSString *BAD_BOUND NS_SWIFT_NAME(BAD_BOUND);
@property (readonly, copy, class) NSString *BAD_RANGE NS_SWIFT_NAME(BAD_RANGE);
@property (readonly, copy, class) NSString *BAD_SIZE NS_SWIFT_NAME(BAD_SIZE);
@property (readonly, class, strong) JavaUtilConcurrentThreadLocalRandom *instance NS_SWIFT_NAME(instance);

+ (NSString *)BAD_BOUND;

+ (NSString *)BAD_RANGE;

+ (NSString *)BAD_SIZE;

+ (JavaUtilConcurrentThreadLocalRandom *)instance;

#pragma mark Public

/*!
 @brief Returns the current thread's <code>ThreadLocalRandom</code>.
 @return the current thread's <code>ThreadLocalRandom</code>
 */
+ (JavaUtilConcurrentThreadLocalRandom *)current;

/*!
 @brief Returns an effectively unlimited stream of pseudorandom <code>double</code>
  values, each between zero (inclusive) and one
  (exclusive).
 @return a stream of pseudorandom <code>double</code> values
 @since 1.8
 */
- (id<JavaUtilStreamDoubleStream>)doubles;

/*!
 @brief Returns an effectively unlimited stream of pseudorandom <code>double</code>
  values, each conforming to the given origin (inclusive) and bound
  (exclusive).
 @param randomNumberOrigin the origin (inclusive) of each random value
 @param randomNumberBound the bound (exclusive) of each random value
 @return a stream of pseudorandom <code>double</code> values,
          each with the given origin (inclusive) and bound (exclusive)
 @throw IllegalArgumentExceptionif <code>randomNumberOrigin</code>
          is greater than or equal to <code>randomNumberBound</code>
 @since 1.8
 */
- (id<JavaUtilStreamDoubleStream>)doublesWithDouble:(jdouble)randomNumberOrigin
                                         withDouble:(jdouble)randomNumberBound;

/*!
 @brief Returns a stream producing the given <code>streamSize</code> number of
  pseudorandom <code>double</code> values, each between zero
  (inclusive) and one (exclusive).
 @param streamSize the number of values to generate
 @return a stream of <code>double</code> values
 @throw IllegalArgumentExceptionif <code>streamSize</code> is
          less than zero
 @since 1.8
 */
- (id<JavaUtilStreamDoubleStream>)doublesWithLong:(jlong)streamSize;

/*!
 @brief Returns a stream producing the given <code>streamSize</code> number of
  pseudorandom <code>double</code> values, each conforming to the given origin
  (inclusive) and bound (exclusive).
 @param streamSize the number of values to generate
 @param randomNumberOrigin the origin (inclusive) of each random value
 @param randomNumberBound the bound (exclusive) of each random value
 @return a stream of pseudorandom <code>double</code> values,
          each with the given origin (inclusive) and bound (exclusive)
 @throw IllegalArgumentExceptionif <code>streamSize</code> is
          less than zero
 @throw IllegalArgumentExceptionif <code>randomNumberOrigin</code>
          is greater than or equal to <code>randomNumberBound</code>
 @since 1.8
 */
- (id<JavaUtilStreamDoubleStream>)doublesWithLong:(jlong)streamSize
                                       withDouble:(jdouble)randomNumberOrigin
                                       withDouble:(jdouble)randomNumberBound;

/*!
 @brief Returns an effectively unlimited stream of pseudorandom <code>int</code>
  values.
 @return a stream of pseudorandom <code>int</code> values
 @since 1.8
 */
- (id<JavaUtilStreamIntStream>)ints;

/*!
 @brief Returns an effectively unlimited stream of pseudorandom <code>int</code>
  values, each conforming to the given origin (inclusive) and bound
  (exclusive).
 @param randomNumberOrigin the origin (inclusive) of each random value
 @param randomNumberBound the bound (exclusive) of each random value
 @return a stream of pseudorandom <code>int</code> values,
          each with the given origin (inclusive) and bound (exclusive)
 @throw IllegalArgumentExceptionif <code>randomNumberOrigin</code>
          is greater than or equal to <code>randomNumberBound</code>
 @since 1.8
 */
- (id<JavaUtilStreamIntStream>)intsWithInt:(jint)randomNumberOrigin
                                   withInt:(jint)randomNumberBound;

/*!
 @brief Returns a stream producing the given <code>streamSize</code> number of
  pseudorandom <code>int</code> values.
 @param streamSize the number of values to generate
 @return a stream of pseudorandom <code>int</code> values
 @throw IllegalArgumentExceptionif <code>streamSize</code> is
          less than zero
 @since 1.8
 */
- (id<JavaUtilStreamIntStream>)intsWithLong:(jlong)streamSize;

/*!
 @brief Returns a stream producing the given <code>streamSize</code> number
  of pseudorandom <code>int</code> values, each conforming to the given
  origin (inclusive) and bound (exclusive).
 @param streamSize the number of values to generate
 @param randomNumberOrigin the origin (inclusive) of each random value
 @param randomNumberBound the bound (exclusive) of each random value
 @return a stream of pseudorandom <code>int</code> values,
          each with the given origin (inclusive) and bound (exclusive)
 @throw IllegalArgumentExceptionif <code>streamSize</code> is
          less than zero, or <code>randomNumberOrigin</code>
          is greater than or equal to <code>randomNumberBound</code>
 @since 1.8
 */
- (id<JavaUtilStreamIntStream>)intsWithLong:(jlong)streamSize
                                    withInt:(jint)randomNumberOrigin
                                    withInt:(jint)randomNumberBound;

/*!
 @brief Returns an effectively unlimited stream of pseudorandom <code>long</code>
  values.
 @return a stream of pseudorandom <code>long</code> values
 @since 1.8
 */
- (id<JavaUtilStreamLongStream>)longs;

/*!
 @brief Returns a stream producing the given <code>streamSize</code> number of
  pseudorandom <code>long</code> values.
 @param streamSize the number of values to generate
 @return a stream of pseudorandom <code>long</code> values
 @throw IllegalArgumentExceptionif <code>streamSize</code> is
          less than zero
 @since 1.8
 */
- (id<JavaUtilStreamLongStream>)longsWithLong:(jlong)streamSize;

/*!
 @brief Returns an effectively unlimited stream of pseudorandom <code>long</code>
  values, each conforming to the given origin (inclusive) and bound
  (exclusive).
 @param randomNumberOrigin the origin (inclusive) of each random value
 @param randomNumberBound the bound (exclusive) of each random value
 @return a stream of pseudorandom <code>long</code> values,
          each with the given origin (inclusive) and bound (exclusive)
 @throw IllegalArgumentExceptionif <code>randomNumberOrigin</code>
          is greater than or equal to <code>randomNumberBound</code>
 @since 1.8
 */
- (id<JavaUtilStreamLongStream>)longsWithLong:(jlong)randomNumberOrigin
                                     withLong:(jlong)randomNumberBound;

/*!
 @brief Returns a stream producing the given <code>streamSize</code> number of
  pseudorandom <code>long</code>, each conforming to the given origin
  (inclusive) and bound (exclusive).
 @param streamSize the number of values to generate
 @param randomNumberOrigin the origin (inclusive) of each random value
 @param randomNumberBound the bound (exclusive) of each random value
 @return a stream of pseudorandom <code>long</code> values,
          each with the given origin (inclusive) and bound (exclusive)
 @throw IllegalArgumentExceptionif <code>streamSize</code> is
          less than zero, or <code>randomNumberOrigin</code>
          is greater than or equal to <code>randomNumberBound</code>
 @since 1.8
 */
- (id<JavaUtilStreamLongStream>)longsWithLong:(jlong)streamSize
                                     withLong:(jlong)randomNumberOrigin
                                     withLong:(jlong)randomNumberBound;

/*!
 @brief Returns a pseudorandom <code>boolean</code> value.
 @return a pseudorandom <code>boolean</code> value
 */
- (jboolean)nextBoolean;

/*!
 @brief Returns a pseudorandom <code>double</code> value between zero
  (inclusive) and one (exclusive).
 @return a pseudorandom <code>double</code> value between zero
          (inclusive) and one (exclusive)
 */
- (jdouble)nextDouble;

/*!
 @brief Returns a pseudorandom <code>double</code> value between 0.0
  (inclusive) and the specified bound (exclusive).
 @param bound the upper bound (exclusive).  Must be positive.
 @return a pseudorandom <code>double</code> value between zero
          (inclusive) and the bound (exclusive)
 @throw IllegalArgumentExceptionif <code>bound</code> is not positive
 */
- (jdouble)nextDoubleWithDouble:(jdouble)bound;

/*!
 @brief Returns a pseudorandom <code>double</code> value between the specified
  origin (inclusive) and bound (exclusive).
 @param origin the least value returned
 @param bound the upper bound (exclusive)
 @return a pseudorandom <code>double</code> value between the origin
          (inclusive) and the bound (exclusive)
 @throw IllegalArgumentExceptionif <code>origin</code> is greater than
          or equal to <code>bound</code>
 */
- (jdouble)nextDoubleWithDouble:(jdouble)origin
                     withDouble:(jdouble)bound;

/*!
 @brief Returns a pseudorandom <code>float</code> value between zero
  (inclusive) and one (exclusive).
 @return a pseudorandom <code>float</code> value between zero
          (inclusive) and one (exclusive)
 */
- (jfloat)nextFloat;

- (jdouble)nextGaussian;

/*!
 @brief Returns a pseudorandom <code>int</code> value.
 @return a pseudorandom <code>int</code> value
 */
- (jint)nextInt;

/*!
 @brief Returns a pseudorandom <code>int</code> value between zero (inclusive)
  and the specified bound (exclusive).
 @param bound the upper bound (exclusive).  Must be positive.
 @return a pseudorandom <code>int</code> value between zero
          (inclusive) and the bound (exclusive)
 @throw IllegalArgumentExceptionif <code>bound</code> is not positive
 */
- (jint)nextIntWithInt:(jint)bound;

/*!
 @brief Returns a pseudorandom <code>int</code> value between the specified
  origin (inclusive) and the specified bound (exclusive).
 @param origin the least value returned
 @param bound the upper bound (exclusive)
 @return a pseudorandom <code>int</code> value between the origin
          (inclusive) and the bound (exclusive)
 @throw IllegalArgumentExceptionif <code>origin</code> is greater than
          or equal to <code>bound</code>
 */
- (jint)nextIntWithInt:(jint)origin
               withInt:(jint)bound;

/*!
 @brief Returns a pseudorandom <code>long</code> value.
 @return a pseudorandom <code>long</code> value
 */
- (jlong)nextLong;

/*!
 @brief Returns a pseudorandom <code>long</code> value between zero (inclusive)
  and the specified bound (exclusive).
 @param bound the upper bound (exclusive).  Must be positive.
 @return a pseudorandom <code>long</code> value between zero
          (inclusive) and the bound (exclusive)
 @throw IllegalArgumentExceptionif <code>bound</code> is not positive
 */
- (jlong)nextLongWithLong:(jlong)bound;

/*!
 @brief Returns a pseudorandom <code>long</code> value between the specified
  origin (inclusive) and the specified bound (exclusive).
 @param origin the least value returned
 @param bound the upper bound (exclusive)
 @return a pseudorandom <code>long</code> value between the origin
          (inclusive) and the bound (exclusive)
 @throw IllegalArgumentExceptionif <code>origin</code> is greater than
          or equal to <code>bound</code>
 */
- (jlong)nextLongWithLong:(jlong)origin
                 withLong:(jlong)bound;

/*!
 @brief Throws <code>UnsupportedOperationException</code>.Setting seeds in
  this generator is not supported.
 @throw UnsupportedOperationExceptionalways
 */
- (void)setSeedWithLong:(jlong)seed;

#pragma mark Protected

- (jint)nextWithInt:(jint)bits;

#pragma mark Package-Private

/*!
 @brief Pseudo-randomly advances and records the given probe value for the
  given thread.
 */
+ (jint)advanceProbeWithInt:(jint)probe;

/*!
 @brief Returns the probe value for the current thread without forcing
  initialization.Note that invoking ThreadLocalRandom.current()
  can be used to force initialization on zero return.
 */
+ (jint)getProbe;

/*!
 @brief The form of nextDouble used by DoubleStream Spliterators.
 @param origin the least value, unless greater than bound
 @param bound the upper bound (exclusive), must not equal origin
 @return a pseudorandom value
 */
- (jdouble)internalNextDoubleWithDouble:(jdouble)origin
                             withDouble:(jdouble)bound;

/*!
 @brief The form of nextInt used by IntStream Spliterators.
 Exactly the same as long version, except for types.
 @param origin the least value, unless greater than bound
 @param bound the upper bound (exclusive), must not equal origin
 @return a pseudorandom value
 */
- (jint)internalNextIntWithInt:(jint)origin
                       withInt:(jint)bound;

/*!
 @brief The form of nextLong used by LongStream Spliterators.If
  origin is greater than bound, acts as unbounded form of
  nextLong, else as bounded form.
 @param origin the least value, unless greater than bound
 @param bound the upper bound (exclusive), must not equal origin
 @return a pseudorandom value
 */
- (jlong)internalNextLongWithLong:(jlong)origin
                         withLong:(jlong)bound;

/*!
 @brief Initialize Thread fields for the current thread.Called only
  when Thread.threadLocalRandomProbe is zero, indicating that a
  thread local seed value needs to be generated.
 Note that even
  though the initialization is purely thread-local, we need to
  rely on (static) atomic generators to initialize the values.
 */
+ (void)localInit;

/*!
 @brief Returns the pseudo-randomly initialized or updated secondary seed.
 */
+ (jint)nextSecondarySeed;

- (jlong)nextSeed;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithLong:(jlong)arg0 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(JavaUtilConcurrentThreadLocalRandom)

inline NSString *JavaUtilConcurrentThreadLocalRandom_get_BAD_BOUND(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *JavaUtilConcurrentThreadLocalRandom_BAD_BOUND;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaUtilConcurrentThreadLocalRandom, BAD_BOUND, NSString *)

inline NSString *JavaUtilConcurrentThreadLocalRandom_get_BAD_RANGE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *JavaUtilConcurrentThreadLocalRandom_BAD_RANGE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaUtilConcurrentThreadLocalRandom, BAD_RANGE, NSString *)

inline NSString *JavaUtilConcurrentThreadLocalRandom_get_BAD_SIZE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *JavaUtilConcurrentThreadLocalRandom_BAD_SIZE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaUtilConcurrentThreadLocalRandom, BAD_SIZE, NSString *)

/*!
 @brief The common ThreadLocalRandom
 */
inline JavaUtilConcurrentThreadLocalRandom *JavaUtilConcurrentThreadLocalRandom_get_instance(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilConcurrentThreadLocalRandom *JavaUtilConcurrentThreadLocalRandom_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaUtilConcurrentThreadLocalRandom, instance, JavaUtilConcurrentThreadLocalRandom *)

FOUNDATION_EXPORT void JavaUtilConcurrentThreadLocalRandom_localInit(void);

FOUNDATION_EXPORT JavaUtilConcurrentThreadLocalRandom *JavaUtilConcurrentThreadLocalRandom_current(void);

FOUNDATION_EXPORT jint JavaUtilConcurrentThreadLocalRandom_getProbe(void);

FOUNDATION_EXPORT jint JavaUtilConcurrentThreadLocalRandom_advanceProbeWithInt_(jint probe);

FOUNDATION_EXPORT jint JavaUtilConcurrentThreadLocalRandom_nextSecondarySeed(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentThreadLocalRandom)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilConcurrentThreadLocalRandom")
