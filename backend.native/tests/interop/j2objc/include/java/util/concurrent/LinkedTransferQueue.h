//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/concurrent/LinkedTransferQueue.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilConcurrentLinkedTransferQueue")
#ifdef RESTRICT_JavaUtilConcurrentLinkedTransferQueue
#define INCLUDE_ALL_JavaUtilConcurrentLinkedTransferQueue 0
#else
#define INCLUDE_ALL_JavaUtilConcurrentLinkedTransferQueue 1
#endif
#undef RESTRICT_JavaUtilConcurrentLinkedTransferQueue

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilConcurrentLinkedTransferQueue_) && (INCLUDE_ALL_JavaUtilConcurrentLinkedTransferQueue || defined(INCLUDE_JavaUtilConcurrentLinkedTransferQueue))
#define JavaUtilConcurrentLinkedTransferQueue_

#define RESTRICT_JavaUtilAbstractQueue 1
#define INCLUDE_JavaUtilAbstractQueue 1
#include "java/util/AbstractQueue.h"

#define RESTRICT_JavaUtilConcurrentTransferQueue 1
#define INCLUDE_JavaUtilConcurrentTransferQueue 1
#include "java/util/concurrent/TransferQueue.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class IOSObjectArray;
@class JavaUtilConcurrentLinkedTransferQueue_Node;
@class JavaUtilConcurrentTimeUnit;
@protocol JavaUtilCollection;
@protocol JavaUtilIterator;
@protocol JavaUtilSpliterator;

/*!
 @brief An unbounded <code>TransferQueue</code> based on linked nodes.
 This queue orders elements FIFO (first-in-first-out) with respect
  to any given producer.  The <em>head</em> of the queue is that
  element that has been on the queue the longest time for some
  producer.  The <em>tail</em> of the queue is that element that has
  been on the queue the shortest time for some producer. 
 <p>Beware that, unlike in most collections, the <code>size</code> method
  is <em>NOT</em> a constant-time operation. Because of the
  asynchronous nature of these queues, determining the current number
  of elements requires a traversal of the elements, and so may report
  inaccurate results if this collection is modified during traversal.
  Additionally, the bulk operations <code>addAll</code>,
  <code>removeAll</code>, <code>retainAll</code>, <code>containsAll</code>,
  <code>equals</code>, and <code>toArray</code> are <em>not</em> guaranteed
  to be performed atomically. For example, an iterator operating
  concurrently with an <code>addAll</code> operation might view only some
  of the added elements. 
 <p>This class and its iterator implement all of the 
 <em>optional</em> methods of the <code>Collection</code> and <code>Iterator</code>
  interfaces. 
 <p>Memory consistency effects: As with other concurrent
  collections, actions in a thread prior to placing an object into a 
 <code>LinkedTransferQueue</code>
  <a href="package-summary.html#MemoryVisibility"><i>happen-before</i></a>
  actions subsequent to the access or removal of that element from the 
 <code>LinkedTransferQueue</code> in another thread.
 @since 1.7
 @author Doug Lea
 */
@interface JavaUtilConcurrentLinkedTransferQueue : JavaUtilAbstractQueue < JavaUtilConcurrentTransferQueue, JavaIoSerializable > {
 @public
  /*!
   @brief head of the queue; null until first enqueue
   */
  volatile_id head_;
}
@property (readonly, class) jint SWEEP_THRESHOLD NS_SWIFT_NAME(SWEEP_THRESHOLD);

+ (jint)SWEEP_THRESHOLD;

#pragma mark Public

/*!
 @brief Creates an initially empty <code>LinkedTransferQueue</code>.
 */
- (instancetype __nonnull)init;

/*!
 @brief Creates a <code>LinkedTransferQueue</code>
  initially containing the elements of the given collection,
  added in traversal order of the collection's iterator.
 @param c the collection of elements to initially contain
 @throw NullPointerExceptionif the specified collection or any
          of its elements are null
 */
- (instancetype __nonnull)initWithJavaUtilCollection:(id<JavaUtilCollection>)c;

/*!
 @brief Inserts the specified element at the tail of this queue.
 As the queue is unbounded, this method will never throw 
 <code>IllegalStateException</code> or return <code>false</code>.
 @return <code>true</code> (as specified by <code>Collection.add</code>)
 @throw NullPointerExceptionif the specified element is null
 */
- (jboolean)addWithId:(id)e;

/*!
 @brief Returns <code>true</code> if this queue contains the specified element.
 More formally, returns <code>true</code> if and only if this queue contains
  at least one element <code>e</code> such that <code>o.equals(e)</code>.
 @param o object to be checked for containment in this queue
 @return <code>true</code> if this queue contains the specified element
 */
- (jboolean)containsWithId:(id)o;

/*!
 @throw NullPointerException
 @throw IllegalArgumentException
 */
- (jint)drainToWithJavaUtilCollection:(id<JavaUtilCollection>)c;

/*!
 @throw NullPointerException
 @throw IllegalArgumentException
 */
- (jint)drainToWithJavaUtilCollection:(id<JavaUtilCollection>)c
                              withInt:(jint)maxElements;

- (jint)getWaitingConsumerCount;

- (jboolean)hasWaitingConsumer;

/*!
 @brief Returns <code>true</code> if this queue contains no elements.
 @return <code>true</code> if this queue contains no elements
 */
- (jboolean)isEmpty;

/*!
 @brief Returns an iterator over the elements in this queue in proper sequence.
 The elements will be returned in order from first (head) to last (tail). 
 <p>The returned iterator is 
 <a href="package-summary.html#Weakly"><i>weakly consistent</i></a>.
 @return an iterator over the elements in this queue in proper sequence
 */
- (id<JavaUtilIterator>)iterator;

/*!
 @brief Inserts the specified element at the tail of this queue.
 As the queue is unbounded, this method will never return <code>false</code>.
 @return <code>true</code> (as specified by <code>Queue.offer</code>)
 @throw NullPointerExceptionif the specified element is null
 */
- (jboolean)offerWithId:(id)e;

/*!
 @brief Inserts the specified element at the tail of this queue.
 As the queue is unbounded, this method will never block or
  return <code>false</code>.
 @return <code>true</code> (as specified by
   <code>BlockingQueue.offer</code>
 )
 @throw NullPointerExceptionif the specified element is null
 */
- (jboolean)offerWithId:(id)e
               withLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (id)peek;

- (id)poll;

- (id)pollWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

/*!
 @brief Inserts the specified element at the tail of this queue.
 As the queue is unbounded, this method will never block.
 @throw NullPointerExceptionif the specified element is null
 */
- (void)putWithId:(id)e;

/*!
 @brief Always returns <code>Integer.MAX_VALUE</code> because a 
 <code>LinkedTransferQueue</code> is not capacity constrained.
 @return <code>Integer.MAX_VALUE</code> (as specified by
          <code>BlockingQueue.remainingCapacity</code>
 )
 */
- (jint)remainingCapacity;

/*!
 @brief Removes a single instance of the specified element from this queue,
  if it is present.More formally, removes an element <code>e</code> such
  that <code>o.equals(e)</code>, if this queue contains one or more such
  elements.
 Returns <code>true</code> if this queue contained the specified element
  (or equivalently, if this queue changed as a result of the call).
 @param o element to be removed from this queue, if present
 @return <code>true</code> if this queue changed as a result of the call
 */
- (jboolean)removeWithId:(id)o;

/*!
 @brief Returns the number of elements in this queue.If this queue
  contains more than <code>Integer.MAX_VALUE</code> elements, returns 
 <code>Integer.MAX_VALUE</code>.
 <p>Beware that, unlike in most collections, this method is 
 <em>NOT</em> a constant-time operation. Because of the
  asynchronous nature of these queues, determining the current
  number of elements requires an O(n) traversal.
 @return the number of elements in this queue
 */
- (jint)size;

/*!
 @brief Returns a <code>Spliterator</code> over the elements in this queue.
 <p>The returned spliterator is 
 <a href="package-summary.html#Weakly"><i>weakly consistent</i></a>.
  
 <p>The <code>Spliterator</code> reports <code>Spliterator.CONCURRENT</code>,
  <code>Spliterator.ORDERED</code>, and <code>Spliterator.NONNULL</code>.
 @return a <code>Spliterator</code> over the elements in this queue
 @since 1.8
 */
- (id<JavaUtilSpliterator>)spliterator;

- (id)take;

/*!
 @brief Returns an array containing all of the elements in this queue, in
  proper sequence.
 <p>The returned array will be "safe" in that no references to it are
  maintained by this queue.  (In other words, this method must allocate
  a new array).  The caller is thus free to modify the returned array. 
 <p>This method acts as bridge between array-based and collection-based
  APIs.
 @return an array containing all of the elements in this queue
 */
- (IOSObjectArray *)toArray;

/*!
 @brief Returns an array containing all of the elements in this queue, in
  proper sequence; the runtime type of the returned array is that of
  the specified array.If the queue fits in the specified array, it
  is returned therein.
 Otherwise, a new array is allocated with the
  runtime type of the specified array and the size of this queue. 
 <p>If this queue fits in the specified array with room to spare
  (i.e., the array has more elements than this queue), the element in
  the array immediately following the end of the queue is set to 
 <code>null</code>.
  
 <p>Like the <code>toArray()</code> method, this method acts as bridge between
  array-based and collection-based APIs.  Further, this method allows
  precise control over the runtime type of the output array, and may,
  under certain circumstances, be used to save allocation costs. 
 <p>Suppose <code>x</code> is a queue known to contain only strings.
  The following code can be used to dump the queue into a newly
  allocated array of <code>String</code>:
  
 @code
 String[] y = x.toArray(new String[0]);
@endcode
  Note that <code>toArray(new Object[0])</code> is identical in function to 
 <code>toArray()</code>.
 @param a the array into which the elements of the queue are to           be stored, if it is big enough; otherwise, a new array of the
            same runtime type is allocated for this purpose
 @return an array containing all of the elements in this queue
 @throw ArrayStoreExceptionif the runtime type of the specified array
          is not a supertype of the runtime type of every element in
          this queue
 @throw NullPointerExceptionif the specified array is null
 */
- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)a;

- (NSString *)description;

/*!
 @brief Transfers the element to a consumer, waiting if necessary to do so.
 <p>More precisely, transfers the specified element immediately
  if there exists a consumer already waiting to receive it (in 
 <code>take</code> or timed <code>poll</code>),
  else inserts the specified element at the tail of this queue
  and waits until the element is received by a consumer.
 @throw NullPointerExceptionif the specified element is null
 */
- (void)transferWithId:(id)e;

/*!
 @brief Transfers the element to a waiting consumer immediately, if possible.
 <p>More precisely, transfers the specified element immediately
  if there exists a consumer already waiting to receive it (in 
 <code>take</code> or timed <code>poll</code>),
  otherwise returning <code>false</code> without enqueuing the element.
 @throw NullPointerExceptionif the specified element is null
 */
- (jboolean)tryTransferWithId:(id)e;

/*!
 @brief Transfers the element to a consumer if it is possible to do so
  before the timeout elapses.
 <p>More precisely, transfers the specified element immediately
  if there exists a consumer already waiting to receive it (in 
 <code>take</code> or timed <code>poll</code>),
  else inserts the specified element at the tail of this queue
  and waits until the element is received by a consumer,
  returning <code>false</code> if the specified wait time elapses
  before the element can be transferred.
 @throw NullPointerExceptionif the specified element is null
 */
- (jboolean)tryTransferWithId:(id)e
                     withLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

#pragma mark Package-Private

/*!
 @brief Returns the first unmatched data node, or null if none.
 Callers must recheck if the returned node's item field is null
  or self-linked before using.
 */
- (JavaUtilConcurrentLinkedTransferQueue_Node *)firstDataNode;

/*!
 @brief Returns the successor of p, or the head node if p.next has been
  linked to self, which will only be true if traversing with a
  stale pointer that is now off the list.
 */
- (JavaUtilConcurrentLinkedTransferQueue_Node *)succWithJavaUtilConcurrentLinkedTransferQueue_Node:(JavaUtilConcurrentLinkedTransferQueue_Node *)p;

/*!
 @brief Unsplices (now or later) the given deleted/cancelled node with
  the given predecessor.
 @param pred a node that was at one time known to be the  predecessor of s, or null or s itself if s is/was at head
 @param s the node to be unspliced
 */
- (void)unspliceWithJavaUtilConcurrentLinkedTransferQueue_Node:(JavaUtilConcurrentLinkedTransferQueue_Node *)pred
                withJavaUtilConcurrentLinkedTransferQueue_Node:(JavaUtilConcurrentLinkedTransferQueue_Node *)s;

@end

J2OBJC_STATIC_INIT(JavaUtilConcurrentLinkedTransferQueue)

J2OBJC_VOLATILE_FIELD_SETTER(JavaUtilConcurrentLinkedTransferQueue, head_, JavaUtilConcurrentLinkedTransferQueue_Node *)

/*!
 @brief The maximum number of estimated removal failures (sweepVotes)
  to tolerate before sweeping through the queue unlinking
  cancelled nodes that were not unlinked upon initial
  removal.See above for explanation.
 The value must be at least
  two to avoid useless sweeps when removing trailing nodes.
 */
inline jint JavaUtilConcurrentLinkedTransferQueue_get_SWEEP_THRESHOLD(void);
#define JavaUtilConcurrentLinkedTransferQueue_SWEEP_THRESHOLD 32
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilConcurrentLinkedTransferQueue, SWEEP_THRESHOLD, jint)

FOUNDATION_EXPORT void JavaUtilConcurrentLinkedTransferQueue_init(JavaUtilConcurrentLinkedTransferQueue *self);

FOUNDATION_EXPORT JavaUtilConcurrentLinkedTransferQueue *new_JavaUtilConcurrentLinkedTransferQueue_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilConcurrentLinkedTransferQueue *create_JavaUtilConcurrentLinkedTransferQueue_init(void);

FOUNDATION_EXPORT void JavaUtilConcurrentLinkedTransferQueue_initWithJavaUtilCollection_(JavaUtilConcurrentLinkedTransferQueue *self, id<JavaUtilCollection> c);

FOUNDATION_EXPORT JavaUtilConcurrentLinkedTransferQueue *new_JavaUtilConcurrentLinkedTransferQueue_initWithJavaUtilCollection_(id<JavaUtilCollection> c) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilConcurrentLinkedTransferQueue *create_JavaUtilConcurrentLinkedTransferQueue_initWithJavaUtilCollection_(id<JavaUtilCollection> c);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentLinkedTransferQueue)

#endif

#if !defined (JavaUtilConcurrentLinkedTransferQueue_Node_) && (INCLUDE_ALL_JavaUtilConcurrentLinkedTransferQueue || defined(INCLUDE_JavaUtilConcurrentLinkedTransferQueue_Node))
#define JavaUtilConcurrentLinkedTransferQueue_Node_

@class JavaLangThread;

/*!
 @brief Queue nodes.Uses Object, not E, for items to allow forgetting
  them after use.
 Relies heavily on Unsafe mechanics to minimize
  unnecessary ordering constraints: Writes that are intrinsically
  ordered wrt other accesses or CASes use simple relaxed forms.
 */
@interface JavaUtilConcurrentLinkedTransferQueue_Node : NSObject {
 @public
  jboolean isData_;
  volatile_id item_;
  volatile_id next_;
  volatile_id waiter_;
}

#pragma mark Package-Private

/*!
 @brief Constructs a new node.Uses relaxed write because item can
  only be seen after publication via casNext.
 */
- (instancetype __nonnull)initWithId:(id)item
                         withBoolean:(jboolean)isData;

/*!
 @brief Returns true if a node with the given mode cannot be
  appended to this node because this node is unmatched and
  has opposite data mode.
 */
- (jboolean)cannotPrecedeWithBoolean:(jboolean)haveData;

- (jboolean)casItemWithId:(id)cmp
                   withId:(id)val;

- (jboolean)casNextWithJavaUtilConcurrentLinkedTransferQueue_Node:(JavaUtilConcurrentLinkedTransferQueue_Node *)cmp
                   withJavaUtilConcurrentLinkedTransferQueue_Node:(JavaUtilConcurrentLinkedTransferQueue_Node *)val;

/*!
 @brief Sets item to self and waiter to null, to avoid garbage
  retention after matching or cancelling.Uses relaxed writes
  because order is already constrained in the only calling
  contexts: item is forgotten only after volatile/atomic
  mechanics that extract items.
 Similarly, clearing waiter
  follows either CAS or return from park (if ever parked;
  else we don't care).
 */
- (void)forgetContents;

/*!
 @brief Links node to itself to avoid garbage retention.Called
  only after CASing head field, so uses relaxed write.
 */
- (void)forgetNext;

/*!
 @brief Returns true if this node has been matched, including the
  case of artificial matches due to cancellation.
 */
- (jboolean)isMatched;

/*!
 @brief Returns true if this is an unmatched request node.
 */
- (jboolean)isUnmatchedRequest;

/*!
 @brief Tries to artificially match a data node -- used by remove.
 */
- (jboolean)tryMatchData;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(JavaUtilConcurrentLinkedTransferQueue_Node)

J2OBJC_VOLATILE_FIELD_SETTER(JavaUtilConcurrentLinkedTransferQueue_Node, item_, id)
J2OBJC_VOLATILE_FIELD_SETTER(JavaUtilConcurrentLinkedTransferQueue_Node, next_, JavaUtilConcurrentLinkedTransferQueue_Node *)
J2OBJC_VOLATILE_FIELD_SETTER(JavaUtilConcurrentLinkedTransferQueue_Node, waiter_, JavaLangThread *)

FOUNDATION_EXPORT void JavaUtilConcurrentLinkedTransferQueue_Node_initWithId_withBoolean_(JavaUtilConcurrentLinkedTransferQueue_Node *self, id item, jboolean isData);

FOUNDATION_EXPORT JavaUtilConcurrentLinkedTransferQueue_Node *new_JavaUtilConcurrentLinkedTransferQueue_Node_initWithId_withBoolean_(id item, jboolean isData) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilConcurrentLinkedTransferQueue_Node *create_JavaUtilConcurrentLinkedTransferQueue_Node_initWithId_withBoolean_(id item, jboolean isData);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentLinkedTransferQueue_Node)

#endif

#if !defined (JavaUtilConcurrentLinkedTransferQueue_Itr_) && (INCLUDE_ALL_JavaUtilConcurrentLinkedTransferQueue || defined(INCLUDE_JavaUtilConcurrentLinkedTransferQueue_Itr))
#define JavaUtilConcurrentLinkedTransferQueue_Itr_

#define RESTRICT_JavaUtilIterator 1
#define INCLUDE_JavaUtilIterator 1
#include "java/util/Iterator.h"

@class JavaUtilConcurrentLinkedTransferQueue;
@protocol JavaUtilFunctionConsumer;

@interface JavaUtilConcurrentLinkedTransferQueue_Itr : NSObject < JavaUtilIterator >

#pragma mark Public

- (jboolean)hasNext;

- (id)next;

- (void)remove;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilConcurrentLinkedTransferQueue:(JavaUtilConcurrentLinkedTransferQueue *)outer$;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilConcurrentLinkedTransferQueue_Itr)

FOUNDATION_EXPORT void JavaUtilConcurrentLinkedTransferQueue_Itr_initWithJavaUtilConcurrentLinkedTransferQueue_(JavaUtilConcurrentLinkedTransferQueue_Itr *self, JavaUtilConcurrentLinkedTransferQueue *outer$);

FOUNDATION_EXPORT JavaUtilConcurrentLinkedTransferQueue_Itr *new_JavaUtilConcurrentLinkedTransferQueue_Itr_initWithJavaUtilConcurrentLinkedTransferQueue_(JavaUtilConcurrentLinkedTransferQueue *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilConcurrentLinkedTransferQueue_Itr *create_JavaUtilConcurrentLinkedTransferQueue_Itr_initWithJavaUtilConcurrentLinkedTransferQueue_(JavaUtilConcurrentLinkedTransferQueue *outer$);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentLinkedTransferQueue_Itr)

#endif

#if !defined (JavaUtilConcurrentLinkedTransferQueue_LTQSpliterator_) && (INCLUDE_ALL_JavaUtilConcurrentLinkedTransferQueue || defined(INCLUDE_JavaUtilConcurrentLinkedTransferQueue_LTQSpliterator))
#define JavaUtilConcurrentLinkedTransferQueue_LTQSpliterator_

#define RESTRICT_JavaUtilSpliterator 1
#define INCLUDE_JavaUtilSpliterator 1
#include "java/util/Spliterator.h"

@class JavaUtilConcurrentLinkedTransferQueue;
@class JavaUtilConcurrentLinkedTransferQueue_Node;
@protocol JavaUtilComparator;
@protocol JavaUtilFunctionConsumer;

/*!
 @brief A customized variant of Spliterators.IteratorSpliterator
 */
@interface JavaUtilConcurrentLinkedTransferQueue_LTQSpliterator : NSObject < JavaUtilSpliterator > {
 @public
  JavaUtilConcurrentLinkedTransferQueue_Node *current_;
  jint batch_;
  jboolean exhausted_;
}
@property (readonly, class) jint MAX_BATCH NS_SWIFT_NAME(MAX_BATCH);

+ (jint)MAX_BATCH;

#pragma mark Public

- (jint)characteristics;

- (jlong)estimateSize;

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

- (jboolean)tryAdvanceWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

- (id<JavaUtilSpliterator>)trySplit;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilConcurrentLinkedTransferQueue:(JavaUtilConcurrentLinkedTransferQueue *)outer$;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilConcurrentLinkedTransferQueue_LTQSpliterator)

J2OBJC_FIELD_SETTER(JavaUtilConcurrentLinkedTransferQueue_LTQSpliterator, current_, JavaUtilConcurrentLinkedTransferQueue_Node *)

inline jint JavaUtilConcurrentLinkedTransferQueue_LTQSpliterator_get_MAX_BATCH(void);
#define JavaUtilConcurrentLinkedTransferQueue_LTQSpliterator_MAX_BATCH 33554432
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilConcurrentLinkedTransferQueue_LTQSpliterator, MAX_BATCH, jint)

FOUNDATION_EXPORT void JavaUtilConcurrentLinkedTransferQueue_LTQSpliterator_initWithJavaUtilConcurrentLinkedTransferQueue_(JavaUtilConcurrentLinkedTransferQueue_LTQSpliterator *self, JavaUtilConcurrentLinkedTransferQueue *outer$);

FOUNDATION_EXPORT JavaUtilConcurrentLinkedTransferQueue_LTQSpliterator *new_JavaUtilConcurrentLinkedTransferQueue_LTQSpliterator_initWithJavaUtilConcurrentLinkedTransferQueue_(JavaUtilConcurrentLinkedTransferQueue *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilConcurrentLinkedTransferQueue_LTQSpliterator *create_JavaUtilConcurrentLinkedTransferQueue_LTQSpliterator_initWithJavaUtilConcurrentLinkedTransferQueue_(JavaUtilConcurrentLinkedTransferQueue *outer$);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentLinkedTransferQueue_LTQSpliterator)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilConcurrentLinkedTransferQueue")
