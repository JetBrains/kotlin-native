//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/concurrent/RejectedExecutionException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilConcurrentRejectedExecutionException")
#ifdef RESTRICT_JavaUtilConcurrentRejectedExecutionException
#define INCLUDE_ALL_JavaUtilConcurrentRejectedExecutionException 0
#else
#define INCLUDE_ALL_JavaUtilConcurrentRejectedExecutionException 1
#endif
#undef RESTRICT_JavaUtilConcurrentRejectedExecutionException

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilConcurrentRejectedExecutionException_) && (INCLUDE_ALL_JavaUtilConcurrentRejectedExecutionException || defined(INCLUDE_JavaUtilConcurrentRejectedExecutionException))
#define JavaUtilConcurrentRejectedExecutionException_

#define RESTRICT_JavaLangRuntimeException 1
#define INCLUDE_JavaLangRuntimeException 1
#include "java/lang/RuntimeException.h"

@class JavaLangThrowable;

/*!
 @brief Exception thrown by an <code>Executor</code> when a task cannot be
  accepted for execution.
 @since 1.5
 @author Doug Lea
 */
@interface JavaUtilConcurrentRejectedExecutionException : JavaLangRuntimeException

#pragma mark Public

/*!
 @brief Constructs a <code>RejectedExecutionException</code> with no detail message.
 The cause is not initialized, and may subsequently be
  initialized by a call to <code>initCause</code>.
 */
- (instancetype __nonnull)init;

/*!
 @brief Constructs a <code>RejectedExecutionException</code> with the
  specified detail message.The cause is not initialized, and may
  subsequently be initialized by a call to <code>initCause</code>
 .
 @param message the detail message
 */
- (instancetype __nonnull)initWithNSString:(NSString *)message;

/*!
 @brief Constructs a <code>RejectedExecutionException</code> with the
  specified detail message and cause.
 @param message the detail message
 @param cause the cause (which is saved for later retrieval by the          
 <code>getCause()</code>  method)
 */
- (instancetype __nonnull)initWithNSString:(NSString *)message
                     withJavaLangThrowable:(JavaLangThrowable *)cause;

/*!
 @brief Constructs a <code>RejectedExecutionException</code> with the
  specified cause.The detail message is set to <code>(cause ==
  null ?
 null : cause.toString())</code>
  (which typically contains
  the class and detail message of <code>cause</code>).
 @param cause the cause (which is saved for later retrieval by the          
 <code>getCause()</code>  method)
 */
- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)cause;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1
                               withBoolean:(jboolean)arg2
                               withBoolean:(jboolean)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilConcurrentRejectedExecutionException)

FOUNDATION_EXPORT void JavaUtilConcurrentRejectedExecutionException_init(JavaUtilConcurrentRejectedExecutionException *self);

FOUNDATION_EXPORT JavaUtilConcurrentRejectedExecutionException *new_JavaUtilConcurrentRejectedExecutionException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilConcurrentRejectedExecutionException *create_JavaUtilConcurrentRejectedExecutionException_init(void);

FOUNDATION_EXPORT void JavaUtilConcurrentRejectedExecutionException_initWithNSString_(JavaUtilConcurrentRejectedExecutionException *self, NSString *message);

FOUNDATION_EXPORT JavaUtilConcurrentRejectedExecutionException *new_JavaUtilConcurrentRejectedExecutionException_initWithNSString_(NSString *message) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilConcurrentRejectedExecutionException *create_JavaUtilConcurrentRejectedExecutionException_initWithNSString_(NSString *message);

FOUNDATION_EXPORT void JavaUtilConcurrentRejectedExecutionException_initWithNSString_withJavaLangThrowable_(JavaUtilConcurrentRejectedExecutionException *self, NSString *message, JavaLangThrowable *cause);

FOUNDATION_EXPORT JavaUtilConcurrentRejectedExecutionException *new_JavaUtilConcurrentRejectedExecutionException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilConcurrentRejectedExecutionException *create_JavaUtilConcurrentRejectedExecutionException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause);

FOUNDATION_EXPORT void JavaUtilConcurrentRejectedExecutionException_initWithJavaLangThrowable_(JavaUtilConcurrentRejectedExecutionException *self, JavaLangThrowable *cause);

FOUNDATION_EXPORT JavaUtilConcurrentRejectedExecutionException *new_JavaUtilConcurrentRejectedExecutionException_initWithJavaLangThrowable_(JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilConcurrentRejectedExecutionException *create_JavaUtilConcurrentRejectedExecutionException_initWithJavaLangThrowable_(JavaLangThrowable *cause);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentRejectedExecutionException)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilConcurrentRejectedExecutionException")
