//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/concurrent/atomic/AtomicStampedReference.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilConcurrentAtomicAtomicStampedReference")
#ifdef RESTRICT_JavaUtilConcurrentAtomicAtomicStampedReference
#define INCLUDE_ALL_JavaUtilConcurrentAtomicAtomicStampedReference 0
#else
#define INCLUDE_ALL_JavaUtilConcurrentAtomicAtomicStampedReference 1
#endif
#undef RESTRICT_JavaUtilConcurrentAtomicAtomicStampedReference

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilConcurrentAtomicAtomicStampedReference_) && (INCLUDE_ALL_JavaUtilConcurrentAtomicAtomicStampedReference || defined(INCLUDE_JavaUtilConcurrentAtomicAtomicStampedReference))
#define JavaUtilConcurrentAtomicAtomicStampedReference_

@class IOSIntArray;

/*!
 @brief An <code>AtomicStampedReference</code> maintains an object reference
  along with an integer "stamp", that can be updated atomically.
 <p>Implementation note: This implementation maintains stamped
  references by creating internal objects representing "boxed"
  [reference, integer] pairs.
 @since 1.5
 @author Doug Lea
 */
@interface JavaUtilConcurrentAtomicAtomicStampedReference : NSObject

#pragma mark Public

/*!
 @brief Creates a new <code>AtomicStampedReference</code> with the given
  initial values.
 @param initialRef the initial reference
 @param initialStamp the initial stamp
 */
- (instancetype __nonnull)initWithId:(id)initialRef
                             withInt:(jint)initialStamp;

/*!
 @brief Atomically sets the value of the stamp to the given update value
  if the current reference is <code>==</code> to the expected
  reference.Any given invocation of this operation may fail
  (return <code>false</code>) spuriously, but repeated invocation
  when the current value holds the expected value and no other
  thread is also attempting to set the value will eventually
  succeed.
 @param expectedReference the expected value of the reference
 @param newStamp the new value for the stamp
 @return <code>true</code> if successful
 */
- (jboolean)attemptStampWithId:(id)expectedReference
                       withInt:(jint)newStamp;

/*!
 @brief Atomically sets the value of both the reference and stamp
  to the given update values if the
  current reference is <code>==</code> to the expected reference
  and the current stamp is equal to the expected stamp.
 @param expectedReference the expected value of the reference
 @param newReference the new value for the reference
 @param expectedStamp the expected value of the stamp
 @param newStamp the new value for the stamp
 @return <code>true</code> if successful
 */
- (jboolean)compareAndSetWithId:(id)expectedReference
                         withId:(id)newReference
                        withInt:(jint)expectedStamp
                        withInt:(jint)newStamp;

/*!
 @brief Returns the current values of both the reference and the stamp.
 Typical usage is <code>int[1] holder; ref = v.get(holder);</code>.
 @param stampHolder an array of size of at least one.  On return,  
 <code>stampHolder[0]</code>  will hold the value of the stamp.
 @return the current value of the reference
 */
- (id)getWithIntArray:(IOSIntArray *)stampHolder;

/*!
 @brief Returns the current value of the reference.
 @return the current value of the reference
 */
- (id)getReference;

/*!
 @brief Returns the current value of the stamp.
 @return the current value of the stamp
 */
- (jint)getStamp;

/*!
 @brief Unconditionally sets the value of both the reference and stamp.
 @param newReference the new value for the reference
 @param newStamp the new value for the stamp
 */
- (void)setWithId:(id)newReference
          withInt:(jint)newStamp;

/*!
 @brief Atomically sets the value of both the reference and stamp
  to the given update values if the
  current reference is <code>==</code> to the expected reference
  and the current stamp is equal to the expected stamp.
 <p><a href="package-summary.html#weakCompareAndSet">May fail
  spuriously and does not provide ordering guarantees</a>, so is
  only rarely an appropriate alternative to <code>compareAndSet</code>.
 @param expectedReference the expected value of the reference
 @param newReference the new value for the reference
 @param expectedStamp the expected value of the stamp
 @param newStamp the new value for the stamp
 @return <code>true</code> if successful
 */
- (jboolean)weakCompareAndSetWithId:(id)expectedReference
                             withId:(id)newReference
                            withInt:(jint)expectedStamp
                            withInt:(jint)newStamp;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilConcurrentAtomicAtomicStampedReference)

FOUNDATION_EXPORT void JavaUtilConcurrentAtomicAtomicStampedReference_initWithId_withInt_(JavaUtilConcurrentAtomicAtomicStampedReference *self, id initialRef, jint initialStamp);

FOUNDATION_EXPORT JavaUtilConcurrentAtomicAtomicStampedReference *new_JavaUtilConcurrentAtomicAtomicStampedReference_initWithId_withInt_(id initialRef, jint initialStamp) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilConcurrentAtomicAtomicStampedReference *create_JavaUtilConcurrentAtomicAtomicStampedReference_initWithId_withInt_(id initialRef, jint initialStamp);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentAtomicAtomicStampedReference)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilConcurrentAtomicAtomicStampedReference")
