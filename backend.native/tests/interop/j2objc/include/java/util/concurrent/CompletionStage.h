//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/concurrent/CompletionStage.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilConcurrentCompletionStage")
#ifdef RESTRICT_JavaUtilConcurrentCompletionStage
#define INCLUDE_ALL_JavaUtilConcurrentCompletionStage 0
#else
#define INCLUDE_ALL_JavaUtilConcurrentCompletionStage 1
#endif
#undef RESTRICT_JavaUtilConcurrentCompletionStage

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilConcurrentCompletionStage_) && (INCLUDE_ALL_JavaUtilConcurrentCompletionStage || defined(INCLUDE_JavaUtilConcurrentCompletionStage))
#define JavaUtilConcurrentCompletionStage_

@class JavaUtilConcurrentCompletableFuture;
@protocol JavaLangRunnable;
@protocol JavaUtilConcurrentExecutor;
@protocol JavaUtilFunctionBiConsumer;
@protocol JavaUtilFunctionBiFunction;
@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilFunctionFunction;

/*!
 @brief A stage of a possibly asynchronous computation, that performs an
  action or computes a value when another CompletionStage completes.
 A stage completes upon termination of its computation, but this may
  in turn trigger other dependent stages.  The functionality defined
  in this interface takes only a few basic forms, which expand out to
  a larger set of methods to capture a range of usage styles: 
 <ul>
  
 <li>The computation performed by a stage may be expressed as a
  Function, Consumer, or Runnable (using methods with names including 
 <em>apply</em>, <em>accept</em>, or <em>run</em>, respectively)
  depending on whether it requires arguments and/or produces results.
  For example: 
 @code
  stage.thenApply(x -> square(x))
       .thenAccept(x -> System.out.print(x))
       .thenRun(() -> System.out.println());
 
@endcode
  An additional form (<em>compose</em>) allows the construction of
  computation pipelines from functions returning completion stages. 
 <p>Any argument to a stage's computation is the outcome of a
  triggering stage's computation. 
 <li>One stage's execution may be triggered by completion of a
  single stage, or both of two stages, or either of two stages.
  Dependencies on a single stage are arranged using methods with
  prefix <em>then</em>. Those triggered by completion of 
 <em>both</em> of two stages may <em>combine</em> their results or
  effects, using correspondingly named methods. Those triggered by 
 <em>either</em> of two stages make no guarantees about which of the
  results or effects are used for the dependent stage's computation. 
 <li>Dependencies among stages control the triggering of
  computations, but do not otherwise guarantee any particular
  ordering. Additionally, execution of a new stage's computations may
  be arranged in any of three ways: default execution, default
  asynchronous execution (using methods with suffix <em>async</em>
  that employ the stage's default asynchronous execution facility),
  or custom (via a supplied <code>Executor</code>).  The execution
  properties of default and async modes are specified by
  CompletionStage implementations, not this interface. Methods with
  explicit Executor arguments may have arbitrary execution
  properties, and might not even support concurrent execution, but
  are arranged for processing in a way that accommodates asynchrony. 
 <li>Two method forms (<code>handle</code> and <code>whenComplete</code>
 ) support unconditional computation
  whether the triggering stage completed normally or exceptionally.
  Method <code>exceptionally</code> supports computation
  only when the triggering stage completes exceptionally, computing a
  replacement result, similarly to the java <code>catch</code> keyword.
  In all other cases, if a stage's computation terminates abruptly
  with an (unchecked) exception or error, then all dependent stages
  requiring its completion complete exceptionally as well, with a 
 <code>CompletionException</code> holding the exception as its cause.  If
  a stage is dependent on <em>both</em> of two stages, and both
  complete exceptionally, then the CompletionException may correspond
  to either one of these exceptions.  If a stage is dependent on 
 <em>either</em> of two others, and only one of them completes
  exceptionally, no guarantees are made about whether the dependent
  stage completes normally or exceptionally. In the case of method 
 <code>whenComplete</code>, when the supplied action itself encounters an
  exception, then the stage completes exceptionally with this
  exception unless the source stage also completed exceptionally, in
  which case the exceptional completion from the source stage is
  given preference and propagated to the dependent stage. 
 </ul>
  
 <p>All methods adhere to the above triggering, execution, and
  exceptional completion specifications (which are not repeated in
  individual method specifications). Additionally, while arguments
  used to pass a completion result (that is, for parameters of type 
 <code>T</code>) for methods accepting them may be null, passing a null
  value for any other parameter will result in a <code>NullPointerException</code>
  being thrown. 
 <p>Method form <code>handle</code> is the most general way of
  creating a continuation stage, unconditionally performing a
  computation that is given both the result and exception (if any) of
  the triggering CompletionStage, and computing an arbitrary result.
  Method <code>whenComplete</code> is similar, but preserves
  the result of the triggering stage instead of computing a new one.
  Because a stage's normal result may be <code>null</code>, both methods
  should have a computation structured thus: 
 @code
(result, exception) -> {
    if (exception == null) {
      // triggering stage completed normally
    } else {
      // triggering stage completed exceptionally
    }  }
 
@endcode
  
 <p>This interface does not define methods for initially creating,
  forcibly completing normally or exceptionally, probing completion
  status or results, or awaiting completion of a stage.
  Implementations of CompletionStage may provide means of achieving
  such effects, as appropriate.  Method <code>toCompletableFuture</code>
  enables interoperability among different implementations of this
  interface by providing a common conversion type.
 @author Doug Lea
 @since 1.8
 */
@protocol JavaUtilConcurrentCompletionStage < JavaObject >

/*!
 @brief Returns a new CompletionStage that, when this stage completes
  normally, is executed with this stage's result as the argument
  to the supplied function.
 <p>This method is analogous to 
 <code>Optional.map</code> and 
 <code>Stream.map</code>.
  
 <p>See the <code>CompletionStage</code> documentation for rules
  covering exceptional completion.
 @param fn the function to use to compute the value of the  returned CompletionStage
 @return the new CompletionStage
 */
- (id<JavaUtilConcurrentCompletionStage>)thenApplyWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)fn;

/*!
 @brief Returns a new CompletionStage that, when this stage completes
  normally, is executed using this stage's default asynchronous
  execution facility, with this stage's result as the argument to
  the supplied function.
 See the <code>CompletionStage</code> documentation for rules
  covering exceptional completion.
 @param fn the function to use to compute the value of the  returned CompletionStage
 @return the new CompletionStage
 */
- (id<JavaUtilConcurrentCompletionStage>)thenApplyAsyncWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)fn;

/*!
 @brief Returns a new CompletionStage that, when this stage completes
  normally, is executed using the supplied Executor, with this
  stage's result as the argument to the supplied function.
 See the <code>CompletionStage</code> documentation for rules
  covering exceptional completion.
 @param fn the function to use to compute the value of the  returned CompletionStage
 @param executor the executor to use for asynchronous execution
 @return the new CompletionStage
 */
- (id<JavaUtilConcurrentCompletionStage>)thenApplyAsyncWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)fn
                                                     withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor;

/*!
 @brief Returns a new CompletionStage that, when this stage completes
  normally, is executed with this stage's result as the argument
  to the supplied action.
 See the <code>CompletionStage</code> documentation for rules
  covering exceptional completion.
 @param action the action to perform before completing the  returned CompletionStage
 @return the new CompletionStage
 */
- (id<JavaUtilConcurrentCompletionStage>)thenAcceptWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

/*!
 @brief Returns a new CompletionStage that, when this stage completes
  normally, is executed using this stage's default asynchronous
  execution facility, with this stage's result as the argument to
  the supplied action.
 See the <code>CompletionStage</code> documentation for rules
  covering exceptional completion.
 @param action the action to perform before completing the  returned CompletionStage
 @return the new CompletionStage
 */
- (id<JavaUtilConcurrentCompletionStage>)thenAcceptAsyncWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

/*!
 @brief Returns a new CompletionStage that, when this stage completes
  normally, is executed using the supplied Executor, with this
  stage's result as the argument to the supplied action.
 See the <code>CompletionStage</code> documentation for rules
  covering exceptional completion.
 @param action the action to perform before completing the  returned CompletionStage
 @param executor the executor to use for asynchronous execution
 @return the new CompletionStage
 */
- (id<JavaUtilConcurrentCompletionStage>)thenAcceptAsyncWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action
                                                      withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor;

/*!
 @brief Returns a new CompletionStage that, when this stage completes
  normally, executes the given action.
 See the <code>CompletionStage</code> documentation for rules
  covering exceptional completion.
 @param action the action to perform before completing the  returned CompletionStage
 @return the new CompletionStage
 */
- (id<JavaUtilConcurrentCompletionStage>)thenRunWithJavaLangRunnable:(id<JavaLangRunnable>)action;

/*!
 @brief Returns a new CompletionStage that, when this stage completes
  normally, executes the given action using this stage's default
  asynchronous execution facility.
 See the <code>CompletionStage</code> documentation for rules
  covering exceptional completion.
 @param action the action to perform before completing the  returned CompletionStage
 @return the new CompletionStage
 */
- (id<JavaUtilConcurrentCompletionStage>)thenRunAsyncWithJavaLangRunnable:(id<JavaLangRunnable>)action;

/*!
 @brief Returns a new CompletionStage that, when this stage completes
  normally, executes the given action using the supplied Executor.
 See the <code>CompletionStage</code> documentation for rules
  covering exceptional completion.
 @param action the action to perform before completing the  returned CompletionStage
 @param executor the executor to use for asynchronous execution
 @return the new CompletionStage
 */
- (id<JavaUtilConcurrentCompletionStage>)thenRunAsyncWithJavaLangRunnable:(id<JavaLangRunnable>)action
                                           withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor;

/*!
 @brief Returns a new CompletionStage that, when this and the other
  given stage both complete normally, is executed with the two
  results as arguments to the supplied function.
 See the <code>CompletionStage</code> documentation for rules
  covering exceptional completion.
 @param other the other CompletionStage
 @param fn the function to use to compute the value of the  returned CompletionStage
 @return the new CompletionStage
 */
- (id<JavaUtilConcurrentCompletionStage>)thenCombineWithJavaUtilConcurrentCompletionStage:(id<JavaUtilConcurrentCompletionStage>)other
                                                           withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)fn;

/*!
 @brief Returns a new CompletionStage that, when this and the other
  given stage both complete normally, is executed using this
  stage's default asynchronous execution facility, with the two
  results as arguments to the supplied function.
 See the <code>CompletionStage</code> documentation for rules
  covering exceptional completion.
 @param other the other CompletionStage
 @param fn the function to use to compute the value of the  returned CompletionStage
 @return the new CompletionStage
 */
- (id<JavaUtilConcurrentCompletionStage>)thenCombineAsyncWithJavaUtilConcurrentCompletionStage:(id<JavaUtilConcurrentCompletionStage>)other
                                                                withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)fn;

/*!
 @brief Returns a new CompletionStage that, when this and the other
  given stage both complete normally, is executed using the
  supplied executor, with the two results as arguments to the
  supplied function.
 See the <code>CompletionStage</code> documentation for rules
  covering exceptional completion.
 @param other the other CompletionStage
 @param fn the function to use to compute the value of the  returned CompletionStage
 @param executor the executor to use for asynchronous execution
 @return the new CompletionStage
 */
- (id<JavaUtilConcurrentCompletionStage>)thenCombineAsyncWithJavaUtilConcurrentCompletionStage:(id<JavaUtilConcurrentCompletionStage>)other
                                                                withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)fn
                                                                withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor;

/*!
 @brief Returns a new CompletionStage that, when this and the other
  given stage both complete normally, is executed with the two
  results as arguments to the supplied action.
 See the <code>CompletionStage</code> documentation for rules
  covering exceptional completion.
 @param other the other CompletionStage
 @param action the action to perform before completing the  returned CompletionStage
 @return the new CompletionStage
 */
- (id<JavaUtilConcurrentCompletionStage>)thenAcceptBothWithJavaUtilConcurrentCompletionStage:(id<JavaUtilConcurrentCompletionStage>)other
                                                              withJavaUtilFunctionBiConsumer:(id<JavaUtilFunctionBiConsumer>)action;

/*!
 @brief Returns a new CompletionStage that, when this and the other
  given stage both complete normally, is executed using this
  stage's default asynchronous execution facility, with the two
  results as arguments to the supplied action.
 See the <code>CompletionStage</code> documentation for rules
  covering exceptional completion.
 @param other the other CompletionStage
 @param action the action to perform before completing the  returned CompletionStage
 @return the new CompletionStage
 */
- (id<JavaUtilConcurrentCompletionStage>)thenAcceptBothAsyncWithJavaUtilConcurrentCompletionStage:(id<JavaUtilConcurrentCompletionStage>)other
                                                                   withJavaUtilFunctionBiConsumer:(id<JavaUtilFunctionBiConsumer>)action;

/*!
 @brief Returns a new CompletionStage that, when this and the other
  given stage both complete normally, is executed using the
  supplied executor, with the two results as arguments to the
  supplied action.
 See the <code>CompletionStage</code> documentation for rules
  covering exceptional completion.
 @param other the other CompletionStage
 @param action the action to perform before completing the  returned CompletionStage
 @param executor the executor to use for asynchronous execution
 @return the new CompletionStage
 */
- (id<JavaUtilConcurrentCompletionStage>)thenAcceptBothAsyncWithJavaUtilConcurrentCompletionStage:(id<JavaUtilConcurrentCompletionStage>)other
                                                                   withJavaUtilFunctionBiConsumer:(id<JavaUtilFunctionBiConsumer>)action
                                                                   withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor;

/*!
 @brief Returns a new CompletionStage that, when this and the other
  given stage both complete normally, executes the given action.
 See the <code>CompletionStage</code> documentation for rules
  covering exceptional completion.
 @param other the other CompletionStage
 @param action the action to perform before completing the  returned CompletionStage
 @return the new CompletionStage
 */
- (id<JavaUtilConcurrentCompletionStage>)runAfterBothWithJavaUtilConcurrentCompletionStage:(id<JavaUtilConcurrentCompletionStage>)other
                                                                      withJavaLangRunnable:(id<JavaLangRunnable>)action;

/*!
 @brief Returns a new CompletionStage that, when this and the other
  given stage both complete normally, executes the given action
  using this stage's default asynchronous execution facility.
 See the <code>CompletionStage</code> documentation for rules
  covering exceptional completion.
 @param other the other CompletionStage
 @param action the action to perform before completing the  returned CompletionStage
 @return the new CompletionStage
 */
- (id<JavaUtilConcurrentCompletionStage>)runAfterBothAsyncWithJavaUtilConcurrentCompletionStage:(id<JavaUtilConcurrentCompletionStage>)other
                                                                           withJavaLangRunnable:(id<JavaLangRunnable>)action;

/*!
 @brief Returns a new CompletionStage that, when this and the other
  given stage both complete normally, executes the given action
  using the supplied executor.
 See the <code>CompletionStage</code> documentation for rules
  covering exceptional completion.
 @param other the other CompletionStage
 @param action the action to perform before completing the  returned CompletionStage
 @param executor the executor to use for asynchronous execution
 @return the new CompletionStage
 */
- (id<JavaUtilConcurrentCompletionStage>)runAfterBothAsyncWithJavaUtilConcurrentCompletionStage:(id<JavaUtilConcurrentCompletionStage>)other
                                                                           withJavaLangRunnable:(id<JavaLangRunnable>)action
                                                                 withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor;

/*!
 @brief Returns a new CompletionStage that, when either this or the
  other given stage complete normally, is executed with the
  corresponding result as argument to the supplied function.
 See the <code>CompletionStage</code> documentation for rules
  covering exceptional completion.
 @param other the other CompletionStage
 @param fn the function to use to compute the value of the  returned CompletionStage
 @return the new CompletionStage
 */
- (id<JavaUtilConcurrentCompletionStage>)applyToEitherWithJavaUtilConcurrentCompletionStage:(id<JavaUtilConcurrentCompletionStage>)other
                                                               withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)fn;

/*!
 @brief Returns a new CompletionStage that, when either this or the
  other given stage complete normally, is executed using this
  stage's default asynchronous execution facility, with the
  corresponding result as argument to the supplied function.
 See the <code>CompletionStage</code> documentation for rules
  covering exceptional completion.
 @param other the other CompletionStage
 @param fn the function to use to compute the value of the  returned CompletionStage
 @return the new CompletionStage
 */
- (id<JavaUtilConcurrentCompletionStage>)applyToEitherAsyncWithJavaUtilConcurrentCompletionStage:(id<JavaUtilConcurrentCompletionStage>)other
                                                                    withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)fn;

/*!
 @brief Returns a new CompletionStage that, when either this or the
  other given stage complete normally, is executed using the
  supplied executor, with the corresponding result as argument to
  the supplied function.
 See the <code>CompletionStage</code> documentation for rules
  covering exceptional completion.
 @param other the other CompletionStage
 @param fn the function to use to compute the value of the  returned CompletionStage
 @param executor the executor to use for asynchronous execution
 @return the new CompletionStage
 */
- (id<JavaUtilConcurrentCompletionStage>)applyToEitherAsyncWithJavaUtilConcurrentCompletionStage:(id<JavaUtilConcurrentCompletionStage>)other
                                                                    withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)fn
                                                                  withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor;

/*!
 @brief Returns a new CompletionStage that, when either this or the
  other given stage complete normally, is executed with the
  corresponding result as argument to the supplied action.
 See the <code>CompletionStage</code> documentation for rules
  covering exceptional completion.
 @param other the other CompletionStage
 @param action the action to perform before completing the  returned CompletionStage
 @return the new CompletionStage
 */
- (id<JavaUtilConcurrentCompletionStage>)acceptEitherWithJavaUtilConcurrentCompletionStage:(id<JavaUtilConcurrentCompletionStage>)other
                                                              withJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

/*!
 @brief Returns a new CompletionStage that, when either this or the
  other given stage complete normally, is executed using this
  stage's default asynchronous execution facility, with the
  corresponding result as argument to the supplied action.
 See the <code>CompletionStage</code> documentation for rules
  covering exceptional completion.
 @param other the other CompletionStage
 @param action the action to perform before completing the  returned CompletionStage
 @return the new CompletionStage
 */
- (id<JavaUtilConcurrentCompletionStage>)acceptEitherAsyncWithJavaUtilConcurrentCompletionStage:(id<JavaUtilConcurrentCompletionStage>)other
                                                                   withJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

/*!
 @brief Returns a new CompletionStage that, when either this or the
  other given stage complete normally, is executed using the
  supplied executor, with the corresponding result as argument to
  the supplied action.
 See the <code>CompletionStage</code> documentation for rules
  covering exceptional completion.
 @param other the other CompletionStage
 @param action the action to perform before completing the  returned CompletionStage
 @param executor the executor to use for asynchronous execution
 @return the new CompletionStage
 */
- (id<JavaUtilConcurrentCompletionStage>)acceptEitherAsyncWithJavaUtilConcurrentCompletionStage:(id<JavaUtilConcurrentCompletionStage>)other
                                                                   withJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action
                                                                 withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor;

/*!
 @brief Returns a new CompletionStage that, when either this or the
  other given stage complete normally, executes the given action.
 See the <code>CompletionStage</code> documentation for rules
  covering exceptional completion.
 @param other the other CompletionStage
 @param action the action to perform before completing the  returned CompletionStage
 @return the new CompletionStage
 */
- (id<JavaUtilConcurrentCompletionStage>)runAfterEitherWithJavaUtilConcurrentCompletionStage:(id<JavaUtilConcurrentCompletionStage>)other
                                                                        withJavaLangRunnable:(id<JavaLangRunnable>)action;

/*!
 @brief Returns a new CompletionStage that, when either this or the
  other given stage complete normally, executes the given action
  using this stage's default asynchronous execution facility.
 See the <code>CompletionStage</code> documentation for rules
  covering exceptional completion.
 @param other the other CompletionStage
 @param action the action to perform before completing the  returned CompletionStage
 @return the new CompletionStage
 */
- (id<JavaUtilConcurrentCompletionStage>)runAfterEitherAsyncWithJavaUtilConcurrentCompletionStage:(id<JavaUtilConcurrentCompletionStage>)other
                                                                             withJavaLangRunnable:(id<JavaLangRunnable>)action;

/*!
 @brief Returns a new CompletionStage that, when either this or the
  other given stage complete normally, executes the given action
  using the supplied executor.
 See the <code>CompletionStage</code> documentation for rules
  covering exceptional completion.
 @param other the other CompletionStage
 @param action the action to perform before completing the  returned CompletionStage
 @param executor the executor to use for asynchronous execution
 @return the new CompletionStage
 */
- (id<JavaUtilConcurrentCompletionStage>)runAfterEitherAsyncWithJavaUtilConcurrentCompletionStage:(id<JavaUtilConcurrentCompletionStage>)other
                                                                             withJavaLangRunnable:(id<JavaLangRunnable>)action
                                                                   withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor;

/*!
 @brief Returns a new CompletionStage that is completed with the same
  value as the CompletionStage returned by the given function.
 <p>When this stage completes normally, the given function is
  invoked with this stage's result as the argument, returning
  another CompletionStage.  When that stage completes normally,
  the CompletionStage returned by this method is completed with
  the same value. 
 <p>To ensure progress, the supplied function must arrange
  eventual completion of its result. 
 <p>This method is analogous to 
 <code>Optional.flatMap</code> and 
 <code>Stream.flatMap</code>.
  
 <p>See the <code>CompletionStage</code> documentation for rules
  covering exceptional completion.
 @param fn the function to use to compute another CompletionStage
 @return the new CompletionStage
 */
- (id<JavaUtilConcurrentCompletionStage>)thenComposeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)fn;

/*!
 @brief Returns a new CompletionStage that is completed with the same
  value as the CompletionStage returned by the given function,
  executed using this stage's default asynchronous execution
  facility.
 <p>When this stage completes normally, the given function is
  invoked with this stage's result as the argument, returning
  another CompletionStage.  When that stage completes normally,
  the CompletionStage returned by this method is completed with
  the same value. 
 <p>To ensure progress, the supplied function must arrange
  eventual completion of its result. 
 <p>See the <code>CompletionStage</code> documentation for rules
  covering exceptional completion.
 @param fn the function to use to compute another CompletionStage
 @return the new CompletionStage
 */
- (id<JavaUtilConcurrentCompletionStage>)thenComposeAsyncWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)fn;

/*!
 @brief Returns a new CompletionStage that is completed with the same
  value as the CompletionStage returned by the given function,
  executed using the supplied Executor.
 <p>When this stage completes normally, the given function is
  invoked with this stage's result as the argument, returning
  another CompletionStage.  When that stage completes normally,
  the CompletionStage returned by this method is completed with
  the same value. 
 <p>To ensure progress, the supplied function must arrange
  eventual completion of its result. 
 <p>See the <code>CompletionStage</code> documentation for rules
  covering exceptional completion.
 @param fn the function to use to compute another CompletionStage
 @param executor the executor to use for asynchronous execution
 @return the new CompletionStage
 */
- (id<JavaUtilConcurrentCompletionStage>)thenComposeAsyncWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)fn
                                                       withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor;

/*!
 @brief Returns a new CompletionStage that, when this stage completes
  either normally or exceptionally, is executed with this stage's
  result and exception as arguments to the supplied function.
 <p>When this stage is complete, the given function is invoked
  with the result (or <code>null</code> if none) and the exception (or 
 <code>null</code> if none) of this stage as arguments, and the
  function's result is used to complete the returned stage.
 @param fn the function to use to compute the value of the  returned CompletionStage
 @return the new CompletionStage
 */
- (id<JavaUtilConcurrentCompletionStage>)handleWithJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)fn;

/*!
 @brief Returns a new CompletionStage that, when this stage completes
  either normally or exceptionally, is executed using this stage's
  default asynchronous execution facility, with this stage's
  result and exception as arguments to the supplied function.
 <p>When this stage is complete, the given function is invoked
  with the result (or <code>null</code> if none) and the exception (or 
 <code>null</code> if none) of this stage as arguments, and the
  function's result is used to complete the returned stage.
 @param fn the function to use to compute the value of the  returned CompletionStage
 @return the new CompletionStage
 */
- (id<JavaUtilConcurrentCompletionStage>)handleAsyncWithJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)fn;

/*!
 @brief Returns a new CompletionStage that, when this stage completes
  either normally or exceptionally, is executed using the
  supplied executor, with this stage's result and exception as
  arguments to the supplied function.
 <p>When this stage is complete, the given function is invoked
  with the result (or <code>null</code> if none) and the exception (or 
 <code>null</code> if none) of this stage as arguments, and the
  function's result is used to complete the returned stage.
 @param fn the function to use to compute the value of the  returned CompletionStage
 @param executor the executor to use for asynchronous execution
 @return the new CompletionStage
 */
- (id<JavaUtilConcurrentCompletionStage>)handleAsyncWithJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)fn
                                                    withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor;

/*!
 @brief Returns a new CompletionStage with the same result or exception as
  this stage, that executes the given action when this stage completes.
 <p>When this stage is complete, the given action is invoked
  with the result (or <code>null</code> if none) and the exception (or 
 <code>null</code> if none) of this stage as arguments.  The returned
  stage is completed when the action returns. 
 <p>Unlike method <code>handle</code>,
  this method is not designed to translate completion outcomes,
  so the supplied action should not throw an exception. However,
  if it does, the following rules apply: if this stage completed
  normally but the supplied action throws an exception, then the
  returned stage completes exceptionally with the supplied
  action's exception. Or, if this stage completed exceptionally
  and the supplied action throws an exception, then the returned
  stage completes exceptionally with this stage's exception.
 @param action the action to perform
 @return the new CompletionStage
 */
- (id<JavaUtilConcurrentCompletionStage>)whenCompleteWithJavaUtilFunctionBiConsumer:(id<JavaUtilFunctionBiConsumer>)action;

/*!
 @brief Returns a new CompletionStage with the same result or exception as
  this stage, that executes the given action using this stage's
  default asynchronous execution facility when this stage completes.
 <p>When this stage is complete, the given action is invoked with the
  result (or <code>null</code> if none) and the exception (or <code>null</code>
  if none) of this stage as arguments.  The returned stage is completed
  when the action returns. 
 <p>Unlike method <code>handleAsync</code>,
  this method is not designed to translate completion outcomes,
  so the supplied action should not throw an exception. However,
  if it does, the following rules apply: If this stage completed
  normally but the supplied action throws an exception, then the
  returned stage completes exceptionally with the supplied
  action's exception. Or, if this stage completed exceptionally
  and the supplied action throws an exception, then the returned
  stage completes exceptionally with this stage's exception.
 @param action the action to perform
 @return the new CompletionStage
 */
- (id<JavaUtilConcurrentCompletionStage>)whenCompleteAsyncWithJavaUtilFunctionBiConsumer:(id<JavaUtilFunctionBiConsumer>)action;

/*!
 @brief Returns a new CompletionStage with the same result or exception as
  this stage, that executes the given action using the supplied
  Executor when this stage completes.
 <p>When this stage is complete, the given action is invoked with the
  result (or <code>null</code> if none) and the exception (or <code>null</code>
  if none) of this stage as arguments.  The returned stage is completed
  when the action returns. 
 <p>Unlike method <code>handleAsync</code>,
  this method is not designed to translate completion outcomes,
  so the supplied action should not throw an exception. However,
  if it does, the following rules apply: If this stage completed
  normally but the supplied action throws an exception, then the
  returned stage completes exceptionally with the supplied
  action's exception. Or, if this stage completed exceptionally
  and the supplied action throws an exception, then the returned
  stage completes exceptionally with this stage's exception.
 @param action the action to perform
 @param executor the executor to use for asynchronous execution
 @return the new CompletionStage
 */
- (id<JavaUtilConcurrentCompletionStage>)whenCompleteAsyncWithJavaUtilFunctionBiConsumer:(id<JavaUtilFunctionBiConsumer>)action
                                                          withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor;

/*!
 @brief Returns a new CompletionStage that, when this stage completes
  exceptionally, is executed with this stage's exception as the
  argument to the supplied function.Otherwise, if this stage
  completes normally, then the returned stage also completes
  normally with the same value.
 @param fn the function to use to compute the value of the  returned CompletionStage if this CompletionStage completed
   exceptionally
 @return the new CompletionStage
 */
- (id<JavaUtilConcurrentCompletionStage>)exceptionallyWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)fn;

/*!
 @brief Returns a <code>CompletableFuture</code> maintaining the same
  completion properties as this stage.If this stage is already a
  CompletableFuture, this method may return this stage itself.
 Otherwise, invocation of this method may be equivalent in
  effect to <code>thenApply(x -> x)</code>, but returning an instance
  of type <code>CompletableFuture</code>. A CompletionStage
  implementation that does not choose to interoperate with others
  may throw <code>UnsupportedOperationException</code>.
 @return the CompletableFuture
 @throw UnsupportedOperationExceptionif this implementation
  does not interoperate with CompletableFuture
 */
- (JavaUtilConcurrentCompletableFuture *)toCompletableFuture;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilConcurrentCompletionStage)

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentCompletionStage)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilConcurrentCompletionStage")
