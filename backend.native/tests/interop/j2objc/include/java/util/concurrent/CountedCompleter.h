//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/concurrent/CountedCompleter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilConcurrentCountedCompleter")
#ifdef RESTRICT_JavaUtilConcurrentCountedCompleter
#define INCLUDE_ALL_JavaUtilConcurrentCountedCompleter 0
#else
#define INCLUDE_ALL_JavaUtilConcurrentCountedCompleter 1
#endif
#undef RESTRICT_JavaUtilConcurrentCountedCompleter

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilConcurrentCountedCompleter_) && (INCLUDE_ALL_JavaUtilConcurrentCountedCompleter || defined(INCLUDE_JavaUtilConcurrentCountedCompleter))
#define JavaUtilConcurrentCountedCompleter_

#define RESTRICT_JavaUtilConcurrentForkJoinTask 1
#define INCLUDE_JavaUtilConcurrentForkJoinTask 1
#include "java/util/concurrent/ForkJoinTask.h"

@class JavaLangThrowable;

/*!
 @brief A <code>ForkJoinTask</code> with a completion action performed when
  triggered and there are no remaining pending actions.
 CountedCompleters are in general more robust in the
  presence of subtask stalls and blockage than are other forms of
  ForkJoinTasks, but are less intuitive to program.  Uses of
  CountedCompleter are similar to those of other completion based
  components
  except that multiple <em>pending</em> completions may be necessary
  to trigger the completion action <code>onCompletion(CountedCompleter)</code>,
  not just one.
  Unless initialized otherwise, the pending
  count
  starts at zero, but may be (atomically) changed using
  methods <code>setPendingCount</code>, <code>addToPendingCount</code>, and 
 <code>compareAndSetPendingCount</code>. Upon invocation of <code>tryComplete</code>
 , if the pending action count is nonzero, it is
  decremented; otherwise, the completion action is performed, and if
  this completer itself has a completer, the process is continued
  with its completer.  As is the case with related synchronization
  components such as <code>Phaser</code> and 
 <code>Semaphore</code>, these methods
  affect only internal counts; they do not establish any further
  internal bookkeeping. In particular, the identities of pending
  tasks are not maintained. As illustrated below, you can create
  subclasses that do record some or all pending tasks or their
  results when needed.  As illustrated below, utility methods
  supporting customization of completion traversals are also
  provided. However, because CountedCompleters provide only basic
  synchronization mechanisms, it may be useful to create further
  abstract subclasses that maintain linkages, fields, and additional
  support methods appropriate for a set of related usages. 
 <p>A concrete CountedCompleter class must define method <code>compute</code>
 , that should in most cases (as illustrated below), invoke 
 <code>tryComplete()</code> once before returning. The class may also
  optionally override method <code>onCompletion(CountedCompleter)</code>
  to perform an action upon normal completion, and method 
 <code>onExceptionalCompletion(Throwable, CountedCompleter)</code> to
  perform an action upon any exception. 
 <p>CountedCompleters most often do not bear results, in which case
  they are normally declared as <code>CountedCompleter<Void></code>, and
  will always return <code>null</code> as a result value.  In other cases,
  you should override method <code>getRawResult</code> to provide a
  result from <code>join(), invoke()</code>, and related methods.  In
  general, this method should return the value of a field (or a
  function of one or more fields) of the CountedCompleter object that
  holds the result upon completion. Method <code>setRawResult</code> by
  default plays no role in CountedCompleters.  It is possible, but
  rarely applicable, to override this method to maintain other
  objects or fields holding result data. 
 <p>A CountedCompleter that does not itself have a completer (i.e.,
  one for which <code>getCompleter</code> returns <code>null</code>) can be
  used as a regular ForkJoinTask with this added functionality.
  However, any completer that in turn has another completer serves
  only as an internal helper for other computations, so its own task
  status (as reported in methods such as <code>ForkJoinTask.isDone</code>)
  is arbitrary; this status changes only upon explicit invocations of 
 <code>complete</code>, <code>ForkJoinTask.cancel</code>,
  <code>ForkJoinTask.completeExceptionally(Throwable)</code> or upon
  exceptional completion of method <code>compute</code>. Upon any
  exceptional completion, the exception may be relayed to a task's
  completer (and its completer, and so on), if one exists and it has
  not otherwise already completed. Similarly, cancelling an internal
  CountedCompleter has only a local effect on that completer, so is
  not often useful. 
 <p><b>Sample Usages.</b>
  
 <p><b>Parallel recursive decomposition.</b> CountedCompleters may
  be arranged in trees similar to those often used with <code>RecursiveAction</code>
 s, although the constructions involved in setting
  them up typically vary. Here, the completer of each task is its
  parent in the computation tree. Even though they entail a bit more
  bookkeeping, CountedCompleters may be better choices when applying
  a possibly time-consuming operation (that cannot be further
  subdivided) to each element of an array or collection; especially
  when the operation takes a significantly different amount of time
  to complete for some elements than others, either because of
  intrinsic variation (for example I/O) or auxiliary effects such as
  garbage collection.  Because CountedCompleters provide their own
  continuations, other threads need not block waiting to perform
  them. 
 <p>For example, here is an initial version of a class that uses
  divide-by-two recursive decomposition to divide work into single
  pieces (leaf tasks). Even when work is split into individual calls,
  tree-based techniques are usually preferable to directly forking
  leaf tasks, because they reduce inter-thread communication and
  improve load balancing. In the recursive case, the second of each
  pair of subtasks to finish triggers completion of its parent
  (because no result combination is performed, the default no-op
  implementation of method <code>onCompletion</code> is not overridden).
  A static utility method sets up the base task and invokes it
  (here, implicitly using the <code>ForkJoinPool.commonPool()</code>).
  
 @code
  class MyOperation<E> { void apply(E e) { ... }  }
  class ForEach<E> extends CountedCompleter<Void> {
    public static <E> void forEach(E[] array, MyOperation<E> op) {
      new ForEach<E>(null, array, op, 0, array.length).invoke();
    }
    final E[] array; final MyOperation<E> op; final int lo, hi;
    ForEach(CountedCompleter<?> p, E[] array, MyOperation<E> op, int lo, int hi) {
      super(p);
      this.array = array; this.op = op; this.lo = lo; this.hi = hi;
    }
    public void compute() { // version 1
      if (hi - lo >= 2) {
        int mid = (lo + hi) >>> 1;
        setPendingCount(2); // must set pending count before fork
        new ForEach(this, array, op, mid, hi).fork(); // right child
        new ForEach(this, array, op, lo, mid).fork(); // left child
      }
      else if (hi > lo)
        op.apply(array[lo]);
      tryComplete();
    }  }
 
@endcode
  This design can be improved by noticing that in the recursive case,
  the task has nothing to do after forking its right task, so can
  directly invoke its left task before returning. (This is an analog
  of tail recursion removal.)  Also, because the task returns upon
  executing its left task (rather than falling through to invoke 
 <code>tryComplete</code>) the pending count is set to one: 
 @code
  class ForEach<E> ... {
    ...
    public void compute() { // version 2
      if (hi - lo >= 2) {
        int mid = (lo + hi) >>> 1;
        setPendingCount(1); // only one pending
        new ForEach(this, array, op, mid, hi).fork(); // right child
        new ForEach(this, array, op, lo, mid).compute(); // direct invoke
      }
      else {
        if (hi > lo)
          op.apply(array[lo]);
        tryComplete();
      }    }    }
 
@endcode
  As a further optimization, notice that the left task need not even exist.
  Instead of creating a new one, we can iterate using the original task,
  and add a pending count for each fork.  Additionally, because no task
  in this tree implements an <code>onCompletion(CountedCompleter)</code> method, 
 <code>tryComplete()</code> can be replaced with <code>propagateCompletion</code>.
  
 @code
  class ForEach<E> ... {
    ...
    public void compute() { // version 3
      int l = lo, h = hi;
      while (h - l >= 2) {
        int mid = (l + h) >>> 1;
        addToPendingCount(1);
        new ForEach(this, array, op, mid, h).fork(); // right child
        h = mid;
      }
      if (h > l)
        op.apply(array[l]);
      propagateCompletion();
    }  }
 
@endcode
  Additional optimizations of such classes might entail precomputing
  pending counts so that they can be established in constructors,
  specializing classes for leaf steps, subdividing by say, four,
  instead of two per iteration, and using an adaptive threshold
  instead of always subdividing down to single elements. 
 <p><b>Searching.</b> A tree of CountedCompleters can search for a
  value or property in different parts of a data structure, and
  report a result in an <code>AtomicReference</code>
  as
  soon as one is found. The others can poll the result to avoid
  unnecessary work. (You could additionally cancel
  other tasks, but it is usually simpler and more efficient
  to just let them notice that the result is set and if so skip
  further processing.)  Illustrating again with an array using full
  partitioning (again, in practice, leaf tasks will almost always
  process more than one element): 
 @code
  class Searcher<E> extends CountedCompleter<E> {
    final E[] array; final AtomicReference<E> result; final int lo, hi;
    Searcher(CountedCompleter<?> p, E[] array, AtomicReference<E> result, int lo, int hi) {
      super(p);
      this.array = array; this.result = result; this.lo = lo; this.hi = hi;
    }
    public E getRawResult() { return result.get(); }
    public void compute() { // similar to ForEach version 3
      int l = lo, h = hi;
      while (result.get() == null && h >= l) {
        if (h - l >= 2) {
          int mid = (l + h) >>> 1;
          addToPendingCount(1);
          new Searcher(this, array, result, mid, h).fork();
          h = mid;
        }
        else {
          E x = array[l];
          if (matches(x) && result.compareAndSet(null, x))
            quietlyCompleteRoot(); // root task is now joinable
          break;
        }      }
      tryComplete(); // normally complete whether or not found
    }
    boolean matches(E e) { ... } // return true if found
    public static <E> E search(E[] array) {
        return new Searcher<E>(null, array, new AtomicReference<E>(), 0, array.length).invoke();
    }  }
 
@endcode
  In this example, as well as others in which tasks have no other
  effects except to <code>compareAndSet</code> a common result, the
  trailing unconditional invocation of <code>tryComplete</code> could be
  made conditional (<code>if (result.get() == null) tryComplete();</code>)
  because no further bookkeeping is required to manage completions
  once the root task completes. 
 <p><b>Recording subtasks.</b> CountedCompleter tasks that combine
  results of multiple subtasks usually need to access these results
  in method <code>onCompletion(CountedCompleter)</code>. As illustrated in the following
  class (that performs a simplified form of map-reduce where mappings
  and reductions are all of type <code>E</code>), one way to do this in
  divide and conquer designs is to have each subtask record its
  sibling, so that it can be accessed in method <code>onCompletion</code>.
  This technique applies to reductions in which the order of
  combining left and right results does not matter; ordered
  reductions require explicit left/right designations.  Variants of
  other streamlinings seen in the above examples may also apply. 
 @code
  class MyMapper<E> { E apply(E v) {  ...  } }
  class MyReducer<E> { E apply(E x, E y) {  ...  } }
  class MapReducer<E> extends CountedCompleter<E> {
    final E[] array; final MyMapper<E> mapper;
    final MyReducer<E> reducer; final int lo, hi;
    MapReducer<E> sibling;
    E result;
    MapReducer(CountedCompleter<?> p, E[] array, MyMapper<E> mapper,
               MyReducer<E> reducer, int lo, int hi) {
      super(p);
      this.array = array; this.mapper = mapper;
      this.reducer = reducer; this.lo = lo; this.hi = hi;
    }
    public void compute() {
      if (hi - lo >= 2) {
        int mid = (lo + hi) >>> 1;
        MapReducer<E> left = new MapReducer(this, array, mapper, reducer, lo, mid);
        MapReducer<E> right = new MapReducer(this, array, mapper, reducer, mid, hi);
        left.sibling = right;
        right.sibling = left;
        setPendingCount(1); // only right is pending
        right.fork();
        left.compute();     // directly execute left
      }
      else {
        if (hi > lo)
            result = mapper.apply(array[lo]);
        tryComplete();
      }    }
    public void onCompletion(CountedCompleter<?> caller) {
      if (caller != this) {
        MapReducer<E> child = (MapReducer<E>)caller;
        MapReducer<E> sib = child.sibling;
        if (sib == null || sib.result == null)
          result = child.result;
        else
          result = reducer.apply(child.result, sib.result);
      }    }
    public E getRawResult() { return result; }
    public static <E> E mapReduce(E[] array, MyMapper<E> mapper, MyReducer<E> reducer) {
      return new MapReducer<E>(null, array, mapper, reducer,
                               0, array.length).invoke();
    }  }
 
@endcode
  Here, method <code>onCompletion</code> takes a form common to many
  completion designs that combine results. This callback-style method
  is triggered once per task, in either of the two different contexts
  in which the pending count is, or becomes, zero: (1) by a task
  itself, if its pending count is zero upon invocation of <code>tryComplete</code>
 , or (2) by any of its subtasks when they complete and
  decrement the pending count to zero. The <code>caller</code> argument
  distinguishes cases.  Most often, when the caller is <code>this</code>,
  no action is necessary. Otherwise the caller argument can be used
  (usually via a cast) to supply a value (and/or links to other
  values) to be combined.  Assuming proper use of pending counts, the
  actions inside <code>onCompletion</code> occur (once) upon completion of
  a task and its subtasks. No additional synchronization is required
  within this method to ensure thread safety of accesses to fields of
  this task or other completed tasks. 
 <p><b>Completion Traversals</b>. If using <code>onCompletion</code> to
  process completions is inapplicable or inconvenient, you can use
  methods <code>firstComplete</code> and <code>nextComplete</code> to create
  custom traversals.  For example, to define a MapReducer that only
  splits out right-hand tasks in the form of the third ForEach
  example, the completions must cooperatively reduce along
  unexhausted subtask links, which can be done as follows: 
 @code
  class MapReducer<E> extends CountedCompleter<E> { // version 2
    final E[] array; final MyMapper<E> mapper;
    final MyReducer<E> reducer; final int lo, hi;
    MapReducer<E> forks, next; // record subtask forks in list
    E result;
    MapReducer(CountedCompleter<?> p, E[] array, MyMapper<E> mapper,
               MyReducer<E> reducer, int lo, int hi, MapReducer<E> next) {
      super(p);
      this.array = array; this.mapper = mapper;
      this.reducer = reducer; this.lo = lo; this.hi = hi;
      this.next = next;
    }
    public void compute() {
      int l = lo, h = hi;
      while (h - l >= 2) {
        int mid = (l + h) >>> 1;
        addToPendingCount(1);
        (forks = new MapReducer(this, array, mapper, reducer, mid, h, forks)).fork();
        h = mid;
      }
      if (h > l)
        result = mapper.apply(array[l]);
      // process completions by reducing along and advancing subtask links
      for (CountedCompleter<?> c = firstComplete(); c != null; c = c.nextComplete()) {
        for (MapReducer t = (MapReducer)c, s = t.forks; s != null; s = t.forks = s.next)
          t.result = reducer.apply(t.result, s.result);
      }    }
    public E getRawResult() { return result; }
    public static <E> E mapReduce(E[] array, MyMapper<E> mapper, MyReducer<E> reducer) {
      return new MapReducer<E>(null, array, mapper, reducer,
                               0, array.length, null).invoke();
    }  }
 
@endcode
  
 <p><b>Triggers.</b> Some CountedCompleters are themselves never
  forked, but instead serve as bits of plumbing in other designs;
  including those in which the completion of one or more async tasks
  triggers another async task. For example: 
 @code
  class HeaderBuilder extends CountedCompleter<...> { ... }
  class BodyBuilder extends CountedCompleter<...> { ... }
  class PacketSender extends CountedCompleter<...> {
    PacketSender(...) { super(null, 1); ... } // trigger on second completion
    public void compute() { } // never called
    public void onCompletion(CountedCompleter<?> caller) { sendPacket(); } }
  // sample use:
  PacketSender p = new PacketSender();
  new HeaderBuilder(p, ...).fork();
  new BodyBuilder(p, ...).fork();
 
@endcode
 @since 1.8
 @author Doug Lea
 */
@interface JavaUtilConcurrentCountedCompleter : JavaUtilConcurrentForkJoinTask {
 @public
  /*!
   @brief This task's completer, or null if none
   */
  JavaUtilConcurrentCountedCompleter *completer_;
  /*!
   @brief The number of pending tasks until completion
   */
  volatile_jint pending_;
}

#pragma mark Public

/*!
 @brief Adds (atomically) the given value to the pending count.
 @param delta the value to add
 */
- (void)addToPendingCountWithInt:(jint)delta;

/*!
 @brief Sets (atomically) the pending count to the given count only if
  it currently holds the given expected value.
 @param expected the expected value
 @param count the new value
 @return <code>true</code> if successful
 */
- (jboolean)compareAndSetPendingCountWithInt:(jint)expected
                                     withInt:(jint)count;

/*!
 @brief Regardless of pending count, invokes 
 <code>onCompletion(CountedCompleter)</code>, marks this task as
  complete and further triggers <code>tryComplete</code> on this
  task's completer, if one exists.The given rawResult is
  used as an argument to <code>setRawResult</code> before invoking 
 <code>onCompletion(CountedCompleter)</code> or marking this task
  as complete; its value is meaningful only for classes
  overriding <code>setRawResult</code>.
 This method does not modify
  the pending count. 
 <p>This method may be useful when forcing completion as soon as
  any one (versus all) of several subtask results are obtained.
  However, in the common (and recommended) case in which <code>setRawResult</code>
  is not overridden, this effect can be obtained
  more simply using <code>quietlyCompleteRoot()</code>.
 @param rawResult the raw result
 */
- (void)completeWithId:(id)rawResult;

/*!
 @brief The main computation performed by this task.
 */
- (void)compute;

/*!
 @brief If the pending count is nonzero, (atomically) decrements it.
 @return the initial (undecremented) pending count holding on entry
  to this method
 */
- (jint)decrementPendingCountUnlessZero;

/*!
 @brief If this task's pending count is zero, returns this task;
  otherwise decrements its pending count and returns <code>null</code>.
 This method is designed to be used with <code>nextComplete</code> in
  completion traversal loops.
 @return this task, if pending count was zero, else <code>null</code>
 */
- (JavaUtilConcurrentCountedCompleter *)firstComplete;

/*!
 @brief Returns the completer established in this task's constructor,
  or <code>null</code> if none.
 @return the completer
 */
- (JavaUtilConcurrentCountedCompleter *)getCompleter;

/*!
 @brief Returns the current pending count.
 @return the current pending count
 */
- (jint)getPendingCount;

/*!
 @brief Returns the result of the computation.By default,
  returns <code>null</code>, which is appropriate for <code>Void</code>
  actions, but in other cases should be overridden, almost
  always to return a field or function of a field that
  holds the result upon completion.
 @return the result of the computation
 */
- (id)getRawResult;

/*!
 @brief Returns the root of the current computation; i.e., this
  task if it has no completer, else its completer's root.
 @return the root of the current computation
 */
- (JavaUtilConcurrentCountedCompleter *)getRoot;

/*!
 @brief If this task has not completed, attempts to process at most the
  given number of other unprocessed tasks for which this task is
  on the completion path, if any are known to exist.
 @param maxTasks the maximum number of tasks to process.  If                  less than or equal to zero, then no tasks are
                   processed.
 */
- (void)helpCompleteWithInt:(jint)maxTasks;

/*!
 @brief If this task does not have a completer, invokes <code>ForkJoinTask.quietlyComplete</code>
  and returns <code>null</code>.Or, if
  the completer's pending count is non-zero, decrements that
  pending count and returns <code>null</code>.
 Otherwise, returns the
  completer.  This method can be used as part of a completion
  traversal loop for homogeneous task hierarchies: 
 @code
  for (CountedCompleter<?> c = firstComplete();
       c != null;
       c = c.nextComplete()) {
    // ... process c ...
  }
 
@endcode
 @return the completer, or <code>null</code> if none
 */
- (JavaUtilConcurrentCountedCompleter *)nextComplete;

/*!
 @brief Performs an action when method <code>tryComplete</code> is invoked
  and the pending count is zero, or when the unconditional
  method <code>complete</code> is invoked.By default, this method
  does nothing.
 You can distinguish cases by checking the
  identity of the given caller argument. If not equal to <code>this</code>
 , then it is typically a subtask that may contain results
  (and/or links to other results) to combine.
 @param caller the task invoking this method (which may  be this task itself)
 */
- (void)onCompletionWithJavaUtilConcurrentCountedCompleter:(JavaUtilConcurrentCountedCompleter *)caller;

/*!
 @brief Performs an action when method <code>completeExceptionally(Throwable)</code>
  is invoked or method <code>compute</code>
  throws an exception, and this task has not already
  otherwise completed normally.On entry to this method, this task 
 <code>ForkJoinTask.isCompletedAbnormally</code>.
 The return value
  of this method controls further propagation: If <code>true</code>
  and this task has a completer that has not completed, then that
  completer is also completed exceptionally, with the same
  exception as this completer.  The default implementation of
  this method does nothing except return <code>true</code>.
 @param ex the exception
 @param caller the task invoking this method (which may  be this task itself)
 @return <code>true</code> if this exception should be propagated to this
  task's completer, if one exists
 */
- (jboolean)onExceptionalCompletionWithJavaLangThrowable:(JavaLangThrowable *)ex
                  withJavaUtilConcurrentCountedCompleter:(JavaUtilConcurrentCountedCompleter *)caller;

/*!
 @brief Equivalent to <code>tryComplete</code> but does not invoke <code>onCompletion(CountedCompleter)</code>
  along the completion path:
  If the pending count is nonzero, decrements the count;
  otherwise, similarly tries to complete this task's completer, if
  one exists, else marks this task as complete.This method may be
  useful in cases where <code>onCompletion</code> should not, or need
  not, be invoked for each completer in a computation.
 */
- (void)propagateCompletion;

/*!
 @brief Equivalent to <code>getRoot().quietlyComplete()</code>.
 */
- (void)quietlyCompleteRoot;

/*!
 @brief Sets the pending count to the given value.
 @param count the count
 */
- (void)setPendingCountWithInt:(jint)count;

/*!
 @brief If the pending count is nonzero, decrements the count;
  otherwise invokes <code>onCompletion(CountedCompleter)</code>
  and then similarly tries to complete this task's completer,
  if one exists, else marks this task as complete.
 */
- (void)tryComplete;

#pragma mark Protected

/*!
 @brief Creates a new CountedCompleter with no completer
  and an initial pending count of zero.
 */
- (instancetype __nonnull)init;

/*!
 @brief Creates a new CountedCompleter with the given completer
  and an initial pending count of zero.
 @param completer this task's completer, or <code>null</code>  if none
 */
- (instancetype __nonnull)initWithJavaUtilConcurrentCountedCompleter:(JavaUtilConcurrentCountedCompleter *)completer;

/*!
 @brief Creates a new CountedCompleter with the given completer
  and initial pending count.
 @param completer this task's completer, or <code>null</code>  if none
 @param initialPendingCount the initial pending count
 */
- (instancetype __nonnull)initWithJavaUtilConcurrentCountedCompleter:(JavaUtilConcurrentCountedCompleter *)completer
                                                             withInt:(jint)initialPendingCount;

/*!
 @brief Implements execution conventions for CountedCompleters.
 */
- (jboolean)exec;

/*!
 @brief A method that result-bearing CountedCompleters may optionally
  use to help maintain result data.By default, does nothing.
 Overrides are not recommended. However, if this method is
  overridden to update existing objects or fields, then it must
  in general be defined to be thread-safe.
 */
- (void)setRawResultWithId:(id)t;

#pragma mark Package-Private

/*!
 @brief Supports ForkJoinTask exception propagation.
 */
- (void)internalPropagateExceptionWithJavaLangThrowable:(JavaLangThrowable *)ex;

@end

J2OBJC_STATIC_INIT(JavaUtilConcurrentCountedCompleter)

J2OBJC_FIELD_SETTER(JavaUtilConcurrentCountedCompleter, completer_, JavaUtilConcurrentCountedCompleter *)

FOUNDATION_EXPORT void JavaUtilConcurrentCountedCompleter_initWithJavaUtilConcurrentCountedCompleter_withInt_(JavaUtilConcurrentCountedCompleter *self, JavaUtilConcurrentCountedCompleter *completer, jint initialPendingCount);

FOUNDATION_EXPORT void JavaUtilConcurrentCountedCompleter_initWithJavaUtilConcurrentCountedCompleter_(JavaUtilConcurrentCountedCompleter *self, JavaUtilConcurrentCountedCompleter *completer);

FOUNDATION_EXPORT void JavaUtilConcurrentCountedCompleter_init(JavaUtilConcurrentCountedCompleter *self);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentCountedCompleter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilConcurrentCountedCompleter")
