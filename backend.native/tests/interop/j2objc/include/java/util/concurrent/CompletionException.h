//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/concurrent/CompletionException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilConcurrentCompletionException")
#ifdef RESTRICT_JavaUtilConcurrentCompletionException
#define INCLUDE_ALL_JavaUtilConcurrentCompletionException 0
#else
#define INCLUDE_ALL_JavaUtilConcurrentCompletionException 1
#endif
#undef RESTRICT_JavaUtilConcurrentCompletionException

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilConcurrentCompletionException_) && (INCLUDE_ALL_JavaUtilConcurrentCompletionException || defined(INCLUDE_JavaUtilConcurrentCompletionException))
#define JavaUtilConcurrentCompletionException_

#define RESTRICT_JavaLangRuntimeException 1
#define INCLUDE_JavaLangRuntimeException 1
#include "java/lang/RuntimeException.h"

@class JavaLangThrowable;

/*!
 @brief Exception thrown when an error or other exception is encountered
  in the course of completing a result or task.
 @since 1.8
 @author Doug Lea
 */
@interface JavaUtilConcurrentCompletionException : JavaLangRuntimeException

#pragma mark Public

/*!
 @brief Constructs a <code>CompletionException</code> with the specified detail
  message and cause.
 @param message the detail message
 @param cause the cause (which is saved for later retrieval by the          
 <code>getCause()</code>  method)
 */
- (instancetype __nonnull)initWithNSString:(NSString *)message
                     withJavaLangThrowable:(JavaLangThrowable *)cause;

/*!
 @brief Constructs a <code>CompletionException</code> with the specified cause.
 The detail message is set to <code>(cause == null ? null :
  cause.toString())</code>
  (which typically contains the class and
  detail message of <code>cause</code>).
 @param cause the cause (which is saved for later retrieval by the          
 <code>getCause()</code>  method)
 */
- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)cause;

#pragma mark Protected

/*!
 @brief Constructs a <code>CompletionException</code> with no detail message.
 The cause is not initialized, and may subsequently be
  initialized by a call to <code>initCause</code>.
 */
- (instancetype __nonnull)init;

/*!
 @brief Constructs a <code>CompletionException</code> with the specified detail
  message.The cause is not initialized, and may subsequently be
  initialized by a call to <code>initCause</code>.
 @param message the detail message
 */
- (instancetype __nonnull)initWithNSString:(NSString *)message;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1
                               withBoolean:(jboolean)arg2
                               withBoolean:(jboolean)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilConcurrentCompletionException)

FOUNDATION_EXPORT void JavaUtilConcurrentCompletionException_init(JavaUtilConcurrentCompletionException *self);

FOUNDATION_EXPORT JavaUtilConcurrentCompletionException *new_JavaUtilConcurrentCompletionException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilConcurrentCompletionException *create_JavaUtilConcurrentCompletionException_init(void);

FOUNDATION_EXPORT void JavaUtilConcurrentCompletionException_initWithNSString_(JavaUtilConcurrentCompletionException *self, NSString *message);

FOUNDATION_EXPORT JavaUtilConcurrentCompletionException *new_JavaUtilConcurrentCompletionException_initWithNSString_(NSString *message) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilConcurrentCompletionException *create_JavaUtilConcurrentCompletionException_initWithNSString_(NSString *message);

FOUNDATION_EXPORT void JavaUtilConcurrentCompletionException_initWithNSString_withJavaLangThrowable_(JavaUtilConcurrentCompletionException *self, NSString *message, JavaLangThrowable *cause);

FOUNDATION_EXPORT JavaUtilConcurrentCompletionException *new_JavaUtilConcurrentCompletionException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilConcurrentCompletionException *create_JavaUtilConcurrentCompletionException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause);

FOUNDATION_EXPORT void JavaUtilConcurrentCompletionException_initWithJavaLangThrowable_(JavaUtilConcurrentCompletionException *self, JavaLangThrowable *cause);

FOUNDATION_EXPORT JavaUtilConcurrentCompletionException *new_JavaUtilConcurrentCompletionException_initWithJavaLangThrowable_(JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilConcurrentCompletionException *create_JavaUtilConcurrentCompletionException_initWithJavaLangThrowable_(JavaLangThrowable *cause);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentCompletionException)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilConcurrentCompletionException")
