//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/concurrent/BlockingDeque.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilConcurrentBlockingDeque")
#ifdef RESTRICT_JavaUtilConcurrentBlockingDeque
#define INCLUDE_ALL_JavaUtilConcurrentBlockingDeque 0
#else
#define INCLUDE_ALL_JavaUtilConcurrentBlockingDeque 1
#endif
#undef RESTRICT_JavaUtilConcurrentBlockingDeque

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilConcurrentBlockingDeque_) && (INCLUDE_ALL_JavaUtilConcurrentBlockingDeque || defined(INCLUDE_JavaUtilConcurrentBlockingDeque))
#define JavaUtilConcurrentBlockingDeque_

#define RESTRICT_JavaUtilConcurrentBlockingQueue 1
#define INCLUDE_JavaUtilConcurrentBlockingQueue 1
#include "java/util/concurrent/BlockingQueue.h"

#define RESTRICT_JavaUtilDeque 1
#define INCLUDE_JavaUtilDeque 1
#include "java/util/Deque.h"

@class JavaUtilConcurrentTimeUnit;
@protocol JavaUtilIterator;

/*!
 @brief A <code>Deque</code> that additionally supports blocking operations that wait
  for the deque to become non-empty when retrieving an element, and wait for
  space to become available in the deque when storing an element.
 <p><code>BlockingDeque</code> methods come in four forms, with different ways
  of handling operations that cannot be satisfied immediately, but may be
  satisfied at some point in the future:
  one throws an exception, the second returns a special value (either 
 <code>null</code> or <code>false</code>, depending on the operation), the third
  blocks the current thread indefinitely until the operation can succeed,
  and the fourth blocks for only a given maximum time limit before giving
  up.  These methods are summarized in the following table: 
 <table BORDER CELLPADDING=3 CELLSPACING=1>
  <caption>Summary of BlockingDeque methods</caption>
   <tr>
     <td ALIGN=CENTER COLSPAN=5> <b>First Element (Head)</b></td>
   </tr>
   <tr>
     <td></td>
     <td ALIGN=CENTER><em>Throws exception</em></td>
     <td ALIGN=CENTER><em>Special value</em></td>
     <td ALIGN=CENTER><em>Blocks</em></td>
     <td ALIGN=CENTER><em>Times out</em></td>
   </tr>
   <tr>
     <td><b>Insert</b></td>
     <td><code>addFirst(e)</code></td>
     <td><code>offerFirst(e)</code></td>
     <td><code>putFirst(e)</code></td>
     <td><code>offerFirst(e, time, unit)</code></td>
   </tr>
   <tr>
     <td><b>Remove</b></td>
     <td><code>removeFirst()</code></td>
     <td><code>pollFirst()</code></td>
     <td><code>takeFirst()</code></td>
     <td><code>pollFirst(time, unit)</code></td>
   </tr>
   <tr>
     <td><b>Examine</b></td>
     <td><code>getFirst()</code></td>
     <td><code>peekFirst()</code></td>
     <td><em>not applicable</em></td>
     <td><em>not applicable</em></td>
   </tr>
   <tr>
     <td ALIGN=CENTER COLSPAN=5> <b>Last Element (Tail)</b></td>
   </tr>
   <tr>
     <td></td>
     <td ALIGN=CENTER><em>Throws exception</em></td>
     <td ALIGN=CENTER><em>Special value</em></td>
     <td ALIGN=CENTER><em>Blocks</em></td>
     <td ALIGN=CENTER><em>Times out</em></td>
   </tr>
   <tr>
     <td><b>Insert</b></td>
     <td><code>addLast(e)</code></td>
     <td><code>offerLast(e)</code></td>
     <td><code>putLast(e)</code></td>
     <td><code>offerLast(e, time, unit)</code></td>
   </tr>
   <tr>
     <td><b>Remove</b></td>
     <td><code>removeLast()</code></td>
     <td><code>pollLast()</code></td>
     <td><code>takeLast()</code></td>
     <td><code>pollLast(time, unit)</code></td>
   </tr>
   <tr>
     <td><b>Examine</b></td>
     <td><code>getLast()</code></td>
     <td><code>peekLast()</code></td>
     <td><em>not applicable</em></td>
     <td><em>not applicable</em></td>
   </tr>
  </table>
  
 <p>Like any <code>BlockingQueue</code>, a <code>BlockingDeque</code> is thread safe,
  does not permit null elements, and may (or may not) be
  capacity-constrained. 
 <p>A <code>BlockingDeque</code> implementation may be used directly as a FIFO 
 <code>BlockingQueue</code>. The methods inherited from the 
 <code>BlockingQueue</code> interface are precisely equivalent to 
 <code>BlockingDeque</code> methods as indicated in the following table: 
 <table BORDER CELLPADDING=3 CELLSPACING=1>
  <caption>Comparison of BlockingQueue and BlockingDeque methods</caption>
   <tr>
     <td ALIGN=CENTER> <b><code>BlockingQueue</code> Method</b></td>
     <td ALIGN=CENTER> <b>Equivalent <code>BlockingDeque</code> Method</b></td>
   </tr>
   <tr>
     <td ALIGN=CENTER COLSPAN=2> <b>Insert</b></td>
   </tr>
   <tr>
     <td><code>add(e)</code></td>
     <td><code>addLast(e)</code></td>
   </tr>
   <tr>
     <td><code>offer(e)</code></td>
     <td><code>offerLast(e)</code></td>
   </tr>
   <tr>
     <td><code>put(e)</code></td>
     <td><code>putLast(e)</code></td>
   </tr>
   <tr>
     <td><code>offer(e, time, unit)</code></td>
     <td><code>offerLast(e, time, unit)</code></td>
   </tr>
   <tr>
     <td ALIGN=CENTER COLSPAN=2> <b>Remove</b></td>
   </tr>
   <tr>
     <td><code>remove()</code></td>
     <td><code>removeFirst()</code></td>
   </tr>
   <tr>
     <td><code>poll()</code></td>
     <td><code>pollFirst()</code></td>
   </tr>
   <tr>
     <td><code>take()</code></td>
     <td><code>takeFirst()</code></td>
   </tr>
   <tr>
     <td><code>poll(time, unit)</code></td>
     <td><code>pollFirst(time, unit)</code></td>
   </tr>
   <tr>
     <td ALIGN=CENTER COLSPAN=2> <b>Examine</b></td>
   </tr>
   <tr>
     <td><code>element()</code></td>
     <td><code>getFirst()</code></td>
   </tr>
   <tr>
     <td><code>peek()</code></td>
     <td><code>peekFirst()</code></td>
   </tr>
  </table>
  
 <p>Memory consistency effects: As with other concurrent
  collections, actions in a thread prior to placing an object into a 
 <code>BlockingDeque</code>
  <a href="package-summary.html#MemoryVisibility"><i>happen-before</i></a>
  actions subsequent to the access or removal of that element from the 
 <code>BlockingDeque</code> in another thread. 
 <p>This interface is a member of the 
 <a href="{@@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/collections/index.html">
  Java Collections Framework</a>.
 @since 1.6
 @author Doug Lea
 */
@protocol JavaUtilConcurrentBlockingDeque < JavaUtilConcurrentBlockingQueue, JavaUtilDeque, JavaObject >

/*!
 @brief Inserts the specified element at the front of this deque if it is
  possible to do so immediately without violating capacity restrictions,
  throwing an <code>IllegalStateException</code> if no space is currently
  available.When using a capacity-restricted deque, it is generally
  preferable to use <code>offerFirst</code>.
 @param e the element to add
 @throw IllegalStateException
 @throw ClassCastException
 @throw NullPointerExceptionif the specified element is null
 @throw IllegalArgumentException
 */
- (void)addFirstWithId:(id)e;

/*!
 @brief Inserts the specified element at the end of this deque if it is
  possible to do so immediately without violating capacity restrictions,
  throwing an <code>IllegalStateException</code> if no space is currently
  available.When using a capacity-restricted deque, it is generally
  preferable to use <code>offerLast</code>.
 @param e the element to add
 @throw IllegalStateException
 @throw ClassCastException
 @throw NullPointerExceptionif the specified element is null
 @throw IllegalArgumentException
 */
- (void)addLastWithId:(id)e;

/*!
 @brief Inserts the specified element at the front of this deque if it is
  possible to do so immediately without violating capacity restrictions,
  returning <code>true</code> upon success and <code>false</code> if no space is
  currently available.
 When using a capacity-restricted deque, this method is generally
  preferable to the <code>addFirst</code> method, which can
  fail to insert an element only by throwing an exception.
 @param e the element to add
 @throw ClassCastException
 @throw NullPointerExceptionif the specified element is null
 @throw IllegalArgumentException
 */
- (jboolean)offerFirstWithId:(id)e;

/*!
 @brief Inserts the specified element at the end of this deque if it is
  possible to do so immediately without violating capacity restrictions,
  returning <code>true</code> upon success and <code>false</code> if no space is
  currently available.
 When using a capacity-restricted deque, this method is generally
  preferable to the <code>addLast</code> method, which can
  fail to insert an element only by throwing an exception.
 @param e the element to add
 @throw ClassCastException
 @throw NullPointerExceptionif the specified element is null
 @throw IllegalArgumentException
 */
- (jboolean)offerLastWithId:(id)e;

/*!
 @brief Inserts the specified element at the front of this deque,
  waiting if necessary for space to become available.
 @param e the element to add
 @throw InterruptedExceptionif interrupted while waiting
 @throw ClassCastExceptionif the class of the specified element
          prevents it from being added to this deque
 @throw NullPointerExceptionif the specified element is null
 @throw IllegalArgumentExceptionif some property of the specified
          element prevents it from being added to this deque
 */
- (void)putFirstWithId:(id)e;

/*!
 @brief Inserts the specified element at the end of this deque,
  waiting if necessary for space to become available.
 @param e the element to add
 @throw InterruptedExceptionif interrupted while waiting
 @throw ClassCastExceptionif the class of the specified element
          prevents it from being added to this deque
 @throw NullPointerExceptionif the specified element is null
 @throw IllegalArgumentExceptionif some property of the specified
          element prevents it from being added to this deque
 */
- (void)putLastWithId:(id)e;

/*!
 @brief Inserts the specified element at the front of this deque,
  waiting up to the specified wait time if necessary for space to
  become available.
 @param e the element to add
 @param timeout how long to wait before giving up, in units of         
 <code>unit</code>
 @param unit a <code>TimeUnit</code>  determining how to interpret the
          <code>timeout</code>  parameter
 @return <code>true</code> if successful, or <code>false</code> if
          the specified waiting time elapses before space is available
 @throw InterruptedExceptionif interrupted while waiting
 @throw ClassCastExceptionif the class of the specified element
          prevents it from being added to this deque
 @throw NullPointerExceptionif the specified element is null
 @throw IllegalArgumentExceptionif some property of the specified
          element prevents it from being added to this deque
 */
- (jboolean)offerFirstWithId:(id)e
                    withLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

/*!
 @brief Inserts the specified element at the end of this deque,
  waiting up to the specified wait time if necessary for space to
  become available.
 @param e the element to add
 @param timeout how long to wait before giving up, in units of         
 <code>unit</code>
 @param unit a <code>TimeUnit</code>  determining how to interpret the
          <code>timeout</code>  parameter
 @return <code>true</code> if successful, or <code>false</code> if
          the specified waiting time elapses before space is available
 @throw InterruptedExceptionif interrupted while waiting
 @throw ClassCastExceptionif the class of the specified element
          prevents it from being added to this deque
 @throw NullPointerExceptionif the specified element is null
 @throw IllegalArgumentExceptionif some property of the specified
          element prevents it from being added to this deque
 */
- (jboolean)offerLastWithId:(id)e
                   withLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

/*!
 @brief Retrieves and removes the first element of this deque, waiting
  if necessary until an element becomes available.
 @return the head of this deque
 @throw InterruptedExceptionif interrupted while waiting
 */
- (id)takeFirst;

/*!
 @brief Retrieves and removes the last element of this deque, waiting
  if necessary until an element becomes available.
 @return the tail of this deque
 @throw InterruptedExceptionif interrupted while waiting
 */
- (id)takeLast;

/*!
 @brief Retrieves and removes the first element of this deque, waiting
  up to the specified wait time if necessary for an element to
  become available.
 @param timeout how long to wait before giving up, in units of         
 <code>unit</code>
 @param unit a <code>TimeUnit</code>  determining how to interpret the
          <code>timeout</code>  parameter
 @return the head of this deque, or <code>null</code> if the specified
          waiting time elapses before an element is available
 @throw InterruptedExceptionif interrupted while waiting
 */
- (id)pollFirstWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

/*!
 @brief Retrieves and removes the last element of this deque, waiting
  up to the specified wait time if necessary for an element to
  become available.
 @param timeout how long to wait before giving up, in units of         
 <code>unit</code>
 @param unit a <code>TimeUnit</code>  determining how to interpret the
          <code>timeout</code>  parameter
 @return the tail of this deque, or <code>null</code> if the specified
          waiting time elapses before an element is available
 @throw InterruptedExceptionif interrupted while waiting
 */
- (id)pollLastWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

/*!
 @brief Removes the first occurrence of the specified element from this deque.
 If the deque does not contain the element, it is unchanged.
  More formally, removes the first element <code>e</code> such that 
 <code>o.equals(e)</code> (if such an element exists).
  Returns <code>true</code> if this deque contained the specified element
  (or equivalently, if this deque changed as a result of the call).
 @param o element to be removed from this deque, if present
 @return <code>true</code> if an element was removed as a result of this call
 @throw ClassCastExceptionif the class of the specified element
          is incompatible with this deque
  (<a href="../Collection.html#optional-restrictions">optional</a>)
 @throw NullPointerExceptionif the specified element is null
  (<a href="../Collection.html#optional-restrictions">optional</a>)
 */
- (jboolean)removeFirstOccurrenceWithId:(id)o;

/*!
 @brief Removes the last occurrence of the specified element from this deque.
 If the deque does not contain the element, it is unchanged.
  More formally, removes the last element <code>e</code> such that 
 <code>o.equals(e)</code> (if such an element exists).
  Returns <code>true</code> if this deque contained the specified element
  (or equivalently, if this deque changed as a result of the call).
 @param o element to be removed from this deque, if present
 @return <code>true</code> if an element was removed as a result of this call
 @throw ClassCastExceptionif the class of the specified element
          is incompatible with this deque
  (<a href="../Collection.html#optional-restrictions">optional</a>)
 @throw NullPointerExceptionif the specified element is null
  (<a href="../Collection.html#optional-restrictions">optional</a>)
 */
- (jboolean)removeLastOccurrenceWithId:(id)o;

/*!
 @brief Inserts the specified element into the queue represented by this deque
  (in other words, at the tail of this deque) if it is possible to do so
  immediately without violating capacity restrictions, returning 
 <code>true</code> upon success and throwing an 
 <code>IllegalStateException</code> if no space is currently available.
 When using a capacity-restricted deque, it is generally preferable to
  use <code>offer</code>.
  
 <p>This method is equivalent to <code>addLast</code>.
 @param e the element to add
 @throw IllegalStateException
 @throw ClassCastExceptionif the class of the specified element
          prevents it from being added to this deque
 @throw NullPointerExceptionif the specified element is null
 @throw IllegalArgumentExceptionif some property of the specified
          element prevents it from being added to this deque
 */
- (jboolean)addWithId:(id)e;

/*!
 @brief Inserts the specified element into the queue represented by this deque
  (in other words, at the tail of this deque) if it is possible to do so
  immediately without violating capacity restrictions, returning 
 <code>true</code> upon success and <code>false</code> if no space is currently
  available.When using a capacity-restricted deque, this method is
  generally preferable to the <code>add</code> method, which can fail to
  insert an element only by throwing an exception.
 <p>This method is equivalent to <code>offerLast</code>.
 @param e the element to add
 @throw ClassCastExceptionif the class of the specified element
          prevents it from being added to this deque
 @throw NullPointerExceptionif the specified element is null
 @throw IllegalArgumentExceptionif some property of the specified
          element prevents it from being added to this deque
 */
- (jboolean)offerWithId:(id)e;

/*!
 @brief Inserts the specified element into the queue represented by this deque
  (in other words, at the tail of this deque), waiting if necessary for
  space to become available.
 <p>This method is equivalent to <code>putLast</code>.
 @param e the element to add
 @throw InterruptedException
 @throw ClassCastExceptionif the class of the specified element
          prevents it from being added to this deque
 @throw NullPointerExceptionif the specified element is null
 @throw IllegalArgumentExceptionif some property of the specified
          element prevents it from being added to this deque
 */
- (void)putWithId:(id)e;

/*!
 @brief Inserts the specified element into the queue represented by this deque
  (in other words, at the tail of this deque), waiting up to the
  specified wait time if necessary for space to become available.
 <p>This method is equivalent to 
 <code>offerLast</code>.
 @param e the element to add
 @return <code>true</code> if the element was added to this deque, else
          <code>false</code>
 @throw InterruptedException
 @throw ClassCastExceptionif the class of the specified element
          prevents it from being added to this deque
 @throw NullPointerExceptionif the specified element is null
 @throw IllegalArgumentExceptionif some property of the specified
          element prevents it from being added to this deque
 */
- (jboolean)offerWithId:(id)e
               withLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

/*!
 @brief Retrieves and removes the head of the queue represented by this deque
  (in other words, the first element of this deque).
 This method differs from <code>poll</code> only in that it
  throws an exception if this deque is empty. 
 <p>This method is equivalent to <code>removeFirst</code>.
 @return the head of the queue represented by this deque
 @throw NoSuchElementExceptionif this deque is empty
 */
- (id)remove;

/*!
 @brief Retrieves and removes the head of the queue represented by this deque
  (in other words, the first element of this deque), or returns 
 <code>null</code> if this deque is empty.
 <p>This method is equivalent to <code>pollFirst()</code>.
 @return the head of this deque, or <code>null</code> if this deque is empty
 */
- (id)poll;

/*!
 @brief Retrieves and removes the head of the queue represented by this deque
  (in other words, the first element of this deque), waiting if
  necessary until an element becomes available.
 <p>This method is equivalent to <code>takeFirst</code>.
 @return the head of this deque
 @throw InterruptedExceptionif interrupted while waiting
 */
- (id)take;

/*!
 @brief Retrieves and removes the head of the queue represented by this deque
  (in other words, the first element of this deque), waiting up to the
  specified wait time if necessary for an element to become available.
 <p>This method is equivalent to 
 <code>pollFirst</code>.
 @return the head of this deque, or <code>null</code> if the
          specified waiting time elapses before an element is available
 @throw InterruptedExceptionif interrupted while waiting
 */
- (id)pollWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

/*!
 @brief Retrieves, but does not remove, the head of the queue represented by
  this deque (in other words, the first element of this deque).
 This method differs from <code>peek</code> only in that it throws an
  exception if this deque is empty. 
 <p>This method is equivalent to <code>getFirst</code>.
 @return the head of this deque
 @throw NoSuchElementExceptionif this deque is empty
 */
- (id)element;

/*!
 @brief Retrieves, but does not remove, the head of the queue represented by
  this deque (in other words, the first element of this deque), or
  returns <code>null</code> if this deque is empty.
 <p>This method is equivalent to <code>peekFirst</code>.
 @return the head of this deque, or <code>null</code> if this deque is empty
 */
- (id)peek;

/*!
 @brief Removes the first occurrence of the specified element from this deque.
 If the deque does not contain the element, it is unchanged.
  More formally, removes the first element <code>e</code> such that 
 <code>o.equals(e)</code> (if such an element exists).
  Returns <code>true</code> if this deque contained the specified element
  (or equivalently, if this deque changed as a result of the call). 
 <p>This method is equivalent to 
 <code>removeFirstOccurrence</code>.
 @param o element to be removed from this deque, if present
 @return <code>true</code> if this deque changed as a result of the call
 @throw ClassCastExceptionif the class of the specified element
          is incompatible with this deque
  (<a href="../Collection.html#optional-restrictions">optional</a>)
 @throw NullPointerExceptionif the specified element is null
  (<a href="../Collection.html#optional-restrictions">optional</a>)
 */
- (jboolean)removeWithId:(id)o;

/*!
 @brief Returns <code>true</code> if this deque contains the specified element.
 More formally, returns <code>true</code> if and only if this deque contains
  at least one element <code>e</code> such that <code>o.equals(e)</code>.
 @param o object to be checked for containment in this deque
 @return <code>true</code> if this deque contains the specified element
 @throw ClassCastExceptionif the class of the specified element
          is incompatible with this deque
  (<a href="../Collection.html#optional-restrictions">optional</a>)
 @throw NullPointerExceptionif the specified element is null
  (<a href="../Collection.html#optional-restrictions">optional</a>)
 */
- (jboolean)containsWithId:(id)o;

/*!
 @brief Returns the number of elements in this deque.
 @return the number of elements in this deque
 */
- (jint)size;

/*!
 @brief Returns an iterator over the elements in this deque in proper sequence.
 The elements will be returned in order from first (head) to last (tail).
 @return an iterator over the elements in this deque in proper sequence
 */
- (id<JavaUtilIterator>)iterator;

/*!
 @brief Pushes an element onto the stack represented by this deque (in other
  words, at the head of this deque) if it is possible to do so
  immediately without violating capacity restrictions, throwing an 
 <code>IllegalStateException</code> if no space is currently available.
 <p>This method is equivalent to <code>addFirst</code>.
 @throw IllegalStateException
 @throw ClassCastException
 @throw NullPointerExceptionif the specified element is null
 @throw IllegalArgumentException
 */
- (void)pushWithId:(id)e;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilConcurrentBlockingDeque)

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentBlockingDeque)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilConcurrentBlockingDeque")
