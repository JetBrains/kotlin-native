//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/concurrent/Callable.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilConcurrentCallable")
#ifdef RESTRICT_JavaUtilConcurrentCallable
#define INCLUDE_ALL_JavaUtilConcurrentCallable 0
#else
#define INCLUDE_ALL_JavaUtilConcurrentCallable 1
#endif
#undef RESTRICT_JavaUtilConcurrentCallable

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilConcurrentCallable_) && (INCLUDE_ALL_JavaUtilConcurrentCallable || defined(INCLUDE_JavaUtilConcurrentCallable))
#define JavaUtilConcurrentCallable_

/*!
 @brief A task that returns a result and may throw an exception.
 Implementors define a single method with no arguments called 
 <code>call</code>.
  
 <p>The <code>Callable</code> interface is similar to <code>java.lang.Runnable</code>
 , in that both are designed for classes whose
  instances are potentially executed by another thread.  A 
 <code>Runnable</code>, however, does not return a result and cannot
  throw a checked exception. 
 <p>The <code>Executors</code> class contains utility methods to
  convert from other common forms to <code>Callable</code> classes.
 - seealso: Executor
 @since 1.5
 @author Doug Lea
 */
@protocol JavaUtilConcurrentCallable < JavaObject >

/*!
 @brief Computes a result, or throws an exception if unable to do so.
 @return computed result
 @throw Exceptionif unable to compute a result
 */
- (id)call;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilConcurrentCallable)

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentCallable)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilConcurrentCallable")
