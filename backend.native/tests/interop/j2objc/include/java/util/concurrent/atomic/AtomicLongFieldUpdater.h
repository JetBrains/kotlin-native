//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/concurrent/atomic/AtomicLongFieldUpdater.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilConcurrentAtomicAtomicLongFieldUpdater")
#ifdef RESTRICT_JavaUtilConcurrentAtomicAtomicLongFieldUpdater
#define INCLUDE_ALL_JavaUtilConcurrentAtomicAtomicLongFieldUpdater 0
#else
#define INCLUDE_ALL_JavaUtilConcurrentAtomicAtomicLongFieldUpdater 1
#endif
#undef RESTRICT_JavaUtilConcurrentAtomicAtomicLongFieldUpdater

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilConcurrentAtomicAtomicLongFieldUpdater_) && (INCLUDE_ALL_JavaUtilConcurrentAtomicAtomicLongFieldUpdater || defined(INCLUDE_JavaUtilConcurrentAtomicAtomicLongFieldUpdater))
#define JavaUtilConcurrentAtomicAtomicLongFieldUpdater_

@class IOSClass;
@protocol JavaUtilFunctionLongBinaryOperator;
@protocol JavaUtilFunctionLongUnaryOperator;

/*!
 @brief A reflection-based utility that enables atomic updates to
  designated <code>volatile long</code> fields of designated classes.
 This class is designed for use in atomic data structures in which
  several fields of the same node are independently subject to atomic
  updates. 
 <p>Note that the guarantees of the <code>compareAndSet</code>
  method in this class are weaker than in other atomic classes.
  Because this class cannot ensure that all uses of the field
  are appropriate for purposes of atomic access, it can
  guarantee atomicity only with respect to other invocations of 
 <code>compareAndSet</code> and <code>set</code> on the same updater.
 @since 1.5
 @author Doug Lea
 */
@interface JavaUtilConcurrentAtomicAtomicLongFieldUpdater : NSObject

#pragma mark Public

/*!
 @brief Atomically updates the field of the given object managed by this
  updater with the results of applying the given function to the
  current and given values, returning the updated value.The
  function should be side-effect-free, since it may be re-applied
  when attempted updates fail due to contention among threads.
 The
  function is applied with the current value as its first argument,
  and the given update as the second argument.
 @param obj An object whose field to get and set
 @param x the update value
 @param accumulatorFunction a side-effect-free function of two arguments
 @return the updated value
 @since 1.8
 */
- (jlong)accumulateAndGetWithId:(id)obj
                       withLong:(jlong)x
withJavaUtilFunctionLongBinaryOperator:(id<JavaUtilFunctionLongBinaryOperator>)accumulatorFunction;

/*!
 @brief Atomically adds the given value to the current value of the field of
  the given object managed by this updater.
 @param obj An object whose field to get and set
 @param delta the value to add
 @return the updated value
 */
- (jlong)addAndGetWithId:(id)obj
                withLong:(jlong)delta;

/*!
 @brief Atomically sets the field of the given object managed by this updater
  to the given updated value if the current value <code>==</code> the
  expected value.This method is guaranteed to be atomic with respect to
  other calls to <code>compareAndSet</code> and <code>set</code>, but not
  necessarily with respect to other changes in the field.
 @param obj An object whose field to conditionally set
 @param expect the expected value
 @param update the new value
 @return <code>true</code> if successful
 @throw ClassCastExceptionif <code>obj</code> is not an instance
  of the class possessing the field established in the constructor
 */
- (jboolean)compareAndSetWithId:(id)obj
                       withLong:(jlong)expect
                       withLong:(jlong)update;

/*!
 @brief Atomically decrements by one the current value of the field of the
  given object managed by this updater.
 @param obj An object whose field to get and set
 @return the updated value
 */
- (jlong)decrementAndGetWithId:(id)obj;

/*!
 @brief Gets the current value held in the field of the given object managed
  by this updater.
 @param obj An object whose field to get
 @return the current value
 */
- (jlong)getWithId:(id)obj;

/*!
 @brief Atomically updates the field of the given object managed by this
  updater with the results of applying the given function to the
  current and given values, returning the previous value.The
  function should be side-effect-free, since it may be re-applied
  when attempted updates fail due to contention among threads.
 The
  function is applied with the current value as its first argument,
  and the given update as the second argument.
 @param obj An object whose field to get and set
 @param x the update value
 @param accumulatorFunction a side-effect-free function of two arguments
 @return the previous value
 @since 1.8
 */
- (jlong)getAndAccumulateWithId:(id)obj
                       withLong:(jlong)x
withJavaUtilFunctionLongBinaryOperator:(id<JavaUtilFunctionLongBinaryOperator>)accumulatorFunction;

/*!
 @brief Atomically adds the given value to the current value of the field of
  the given object managed by this updater.
 @param obj An object whose field to get and set
 @param delta the value to add
 @return the previous value
 */
- (jlong)getAndAddWithId:(id)obj
                withLong:(jlong)delta;

/*!
 @brief Atomically decrements by one the current value of the field of the
  given object managed by this updater.
 @param obj An object whose field to get and set
 @return the previous value
 */
- (jlong)getAndDecrementWithId:(id)obj;

/*!
 @brief Atomically increments by one the current value of the field of the
  given object managed by this updater.
 @param obj An object whose field to get and set
 @return the previous value
 */
- (jlong)getAndIncrementWithId:(id)obj;

/*!
 @brief Atomically sets the field of the given object managed by this updater
  to the given value and returns the old value.
 @param obj An object whose field to get and set
 @param newValue the new value
 @return the previous value
 */
- (jlong)getAndSetWithId:(id)obj
                withLong:(jlong)newValue;

/*!
 @brief Atomically updates the field of the given object managed by this updater
  with the results of applying the given function, returning the previous
  value.The function should be side-effect-free, since it may be
  re-applied when attempted updates fail due to contention among threads.
 @param obj An object whose field to get and set
 @param updateFunction a side-effect-free function
 @return the previous value
 @since 1.8
 */
- (jlong)getAndUpdateWithId:(id)obj
withJavaUtilFunctionLongUnaryOperator:(id<JavaUtilFunctionLongUnaryOperator>)updateFunction;

/*!
 @brief Atomically increments by one the current value of the field of the
  given object managed by this updater.
 @param obj An object whose field to get and set
 @return the updated value
 */
- (jlong)incrementAndGetWithId:(id)obj;

/*!
 @brief Eventually sets the field of the given object managed by this
  updater to the given updated value.
 @param obj An object whose field to set
 @param newValue the new value
 @since 1.6
 */
- (void)lazySetWithId:(id)obj
             withLong:(jlong)newValue;

/*!
 @brief Creates and returns an updater for objects with the given field.
 The Class argument is needed to check that reflective types and
  generic types match.
 @param tclass the class of the objects holding the field
 @param fieldName the name of the field to be updated
 @return the updater
 @throw IllegalArgumentExceptionif the field is not a
  volatile long type
 @throw RuntimeExceptionwith a nested reflection-based
  exception if the class does not hold field or is the wrong type,
  or the field is inaccessible to the caller according to Java language
  access control
 */
+ (JavaUtilConcurrentAtomicAtomicLongFieldUpdater *)newUpdaterWithIOSClass:(IOSClass *)tclass
                                                              withNSString:(NSString *)fieldName OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Sets the field of the given object managed by this updater to the
  given updated value.This operation is guaranteed to act as a volatile
  store with respect to subsequent invocations of <code>compareAndSet</code>.
 @param obj An object whose field to set
 @param newValue the new value
 */
- (void)setWithId:(id)obj
         withLong:(jlong)newValue;

/*!
 @brief Atomically updates the field of the given object managed by this updater
  with the results of applying the given function, returning the updated
  value.The function should be side-effect-free, since it may be
  re-applied when attempted updates fail due to contention among threads.
 @param obj An object whose field to get and set
 @param updateFunction a side-effect-free function
 @return the updated value
 @since 1.8
 */
- (jlong)updateAndGetWithId:(id)obj
withJavaUtilFunctionLongUnaryOperator:(id<JavaUtilFunctionLongUnaryOperator>)updateFunction;

/*!
 @brief Atomically sets the field of the given object managed by this updater
  to the given updated value if the current value <code>==</code> the
  expected value.This method is guaranteed to be atomic with respect to
  other calls to <code>compareAndSet</code> and <code>set</code>, but not
  necessarily with respect to other changes in the field.
 <p><a href="package-summary.html#weakCompareAndSet">May fail
  spuriously and does not provide ordering guarantees</a>, so is
  only rarely an appropriate alternative to <code>compareAndSet</code>.
 @param obj An object whose field to conditionally set
 @param expect the expected value
 @param update the new value
 @return <code>true</code> if successful
 @throw ClassCastExceptionif <code>obj</code> is not an instance
  of the class possessing the field established in the constructor
 */
- (jboolean)weakCompareAndSetWithId:(id)obj
                           withLong:(jlong)expect
                           withLong:(jlong)update;

#pragma mark Protected

/*!
 @brief Protected do-nothing constructor for use by subclasses.
 */
- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilConcurrentAtomicAtomicLongFieldUpdater)

FOUNDATION_EXPORT JavaUtilConcurrentAtomicAtomicLongFieldUpdater *JavaUtilConcurrentAtomicAtomicLongFieldUpdater_newUpdaterWithIOSClass_withNSString_(IOSClass *tclass, NSString *fieldName);

FOUNDATION_EXPORT void JavaUtilConcurrentAtomicAtomicLongFieldUpdater_init(JavaUtilConcurrentAtomicAtomicLongFieldUpdater *self);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilConcurrentAtomicAtomicLongFieldUpdater)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilConcurrentAtomicAtomicLongFieldUpdater")
