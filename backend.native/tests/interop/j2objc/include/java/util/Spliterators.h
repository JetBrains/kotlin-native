//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/Spliterators.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilSpliterators")
#ifdef RESTRICT_JavaUtilSpliterators
#define INCLUDE_ALL_JavaUtilSpliterators 0
#else
#define INCLUDE_ALL_JavaUtilSpliterators 1
#endif
#undef RESTRICT_JavaUtilSpliterators

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilSpliterators_) && (INCLUDE_ALL_JavaUtilSpliterators || defined(INCLUDE_JavaUtilSpliterators))
#define JavaUtilSpliterators_

@class IOSDoubleArray;
@class IOSIntArray;
@class IOSLongArray;
@class IOSObjectArray;
@protocol JavaUtilCollection;
@protocol JavaUtilIterator;
@protocol JavaUtilPrimitiveIterator_OfDouble;
@protocol JavaUtilPrimitiveIterator_OfInt;
@protocol JavaUtilPrimitiveIterator_OfLong;
@protocol JavaUtilSpliterator;
@protocol JavaUtilSpliterator_OfDouble;
@protocol JavaUtilSpliterator_OfInt;
@protocol JavaUtilSpliterator_OfLong;

/*!
 @brief Static classes and methods for operating on or creating instances of 
 <code>Spliterator</code> and its primitive specializations 
 <code>Spliterator.OfInt</code>, <code>Spliterator.OfLong</code>, and 
 <code>Spliterator.OfDouble</code>.
 - seealso: Spliterator
 @since 1.8
 */
@interface JavaUtilSpliterators : NSObject

#pragma mark Public

/*!
 @brief Creates an empty <code>Spliterator.OfDouble</code>
 <p>The empty spliterator reports <code>Spliterator.SIZED</code> and 
 <code>Spliterator.SUBSIZED</code>.
 Calls to 
 <code>java.util.Spliterator.trySplit()</code> always return <code>null</code>.
 @return An empty spliterator
 */
+ (id<JavaUtilSpliterator_OfDouble>)emptyDoubleSpliterator;

/*!
 @brief Creates an empty <code>Spliterator.OfInt</code>
 <p>The empty spliterator reports <code>Spliterator.SIZED</code> and 
 <code>Spliterator.SUBSIZED</code>.
 Calls to 
 <code>java.util.Spliterator.trySplit()</code> always return <code>null</code>.
 @return An empty spliterator
 */
+ (id<JavaUtilSpliterator_OfInt>)emptyIntSpliterator;

/*!
 @brief Creates an empty <code>Spliterator.OfLong</code>
 <p>The empty spliterator reports <code>Spliterator.SIZED</code> and 
 <code>Spliterator.SUBSIZED</code>.
 Calls to 
 <code>java.util.Spliterator.trySplit()</code> always return <code>null</code>.
 @return An empty spliterator
 */
+ (id<JavaUtilSpliterator_OfLong>)emptyLongSpliterator;

/*!
 @brief Creates an empty <code>Spliterator</code>
 <p>The empty spliterator reports <code>Spliterator.SIZED</code> and 
 <code>Spliterator.SUBSIZED</code>.
 Calls to 
 <code>java.util.Spliterator.trySplit()</code> always return <code>null</code>.
 @return An empty spliterator
 */
+ (id<JavaUtilSpliterator>)emptySpliterator;

/*!
 @brief Creates an <code>PrimitiveIterator.OfDouble</code> from a 
 <code>Spliterator.OfDouble</code>.
 <p>Traversal of elements should be accomplished through the iterator.
  The behaviour of traversal is undefined if the spliterator is operated
  after the iterator is returned.
 @param spliterator The spliterator
 @return An iterator
 @throw NullPointerExceptionif the given spliterator is <code>null</code>
 */
+ (id<JavaUtilPrimitiveIterator_OfDouble>)iteratorWithJavaUtilSpliterator_OfDouble:(id<JavaUtilSpliterator_OfDouble>)spliterator;

/*!
 @brief Creates an <code>PrimitiveIterator.OfInt</code> from a 
 <code>Spliterator.OfInt</code>.
 <p>Traversal of elements should be accomplished through the iterator.
  The behaviour of traversal is undefined if the spliterator is operated
  after the iterator is returned.
 @param spliterator The spliterator
 @return An iterator
 @throw NullPointerExceptionif the given spliterator is <code>null</code>
 */
+ (id<JavaUtilPrimitiveIterator_OfInt>)iteratorWithJavaUtilSpliterator_OfInt:(id<JavaUtilSpliterator_OfInt>)spliterator;

/*!
 @brief Creates an <code>PrimitiveIterator.OfLong</code> from a 
 <code>Spliterator.OfLong</code>.
 <p>Traversal of elements should be accomplished through the iterator.
  The behaviour of traversal is undefined if the spliterator is operated
  after the iterator is returned.
 @param spliterator The spliterator
 @return An iterator
 @throw NullPointerExceptionif the given spliterator is <code>null</code>
 */
+ (id<JavaUtilPrimitiveIterator_OfLong>)iteratorWithJavaUtilSpliterator_OfLong:(id<JavaUtilSpliterator_OfLong>)spliterator;

/*!
 @brief Creates an <code>Iterator</code> from a <code>Spliterator</code>.
 <p>Traversal of elements should be accomplished through the iterator.
  The behaviour of traversal is undefined if the spliterator is operated
  after the iterator is returned.
 @param spliterator The spliterator
 @return An iterator
 @throw NullPointerExceptionif the given spliterator is <code>null</code>
 */
+ (id<JavaUtilIterator>)iteratorWithJavaUtilSpliterator:(id<JavaUtilSpliterator>)spliterator;

/*!
 @brief Creates a <code>Spliterator</code> using the given collection's 
 <code>java.util.Collection.iterator()</code> as the source of elements, and
  reporting its <code>java.util.Collection.size()</code> as its initial size.
 <p>The spliterator is 
 <em><a href="Spliterator.html#binding">late-binding</a></em>, inherits
  the <em>fail-fast</em> properties of the collection's iterator, and
  implements <code>trySplit</code> to permit limited parallelism.
 @param c The collection
 @param characteristics Characteristics of this spliterator's source or         elements.  The characteristics 
 <code>SIZED</code>  and <code>SUBSIZED</code>         are additionally reported unless 
 <code>CONCURRENT</code>  is supplied.
 @return A spliterator from an iterator
 @throw NullPointerExceptionif the given collection is <code>null</code>
 */
+ (id<JavaUtilSpliterator>)spliteratorWithJavaUtilCollection:(id<JavaUtilCollection>)c
                                                     withInt:(jint)characteristics;

/*!
 @brief Creates a <code>Spliterator.OfDouble</code> covering the elements of a given array,
  using a customized set of spliterator characteristics.
 <p>This method is provided as an implementation convenience for
  Spliterators which store portions of their elements in arrays, and need
  fine control over Spliterator characteristics.  Most other situations in
  which a Spliterator for an array is needed should use 
 <code>Arrays.spliterator(double[])</code>.
  
 <p>The returned spliterator always reports the characteristics 
 <code>SIZED</code> and <code>SUBSIZED</code>.  The caller may provide additional
  characteristics for the spliterator to report; it is common to
  additionally specify <code>IMMUTABLE</code> and <code>ORDERED</code>.
 @param array The array, assumed to be unmodified during use
 @param additionalCharacteristics Additional spliterator characteristics         of this spliterator's source or elements beyond 
 <code>SIZED</code>  and         
 <code>SUBSIZED</code>  which are are always reported
 @return A spliterator for an array
 @throw NullPointerExceptionif the given array is <code>null</code>
 - seealso: Arrays#spliterator(double[])
 */
+ (id<JavaUtilSpliterator_OfDouble>)spliteratorWithDoubleArray:(IOSDoubleArray *)array
                                                       withInt:(jint)additionalCharacteristics;

/*!
 @brief Creates a <code>Spliterator.OfDouble</code> covering a range of elements of a
  given array, using a customized set of spliterator characteristics.
 <p>This method is provided as an implementation convenience for
  Spliterators which store portions of their elements in arrays, and need
  fine control over Spliterator characteristics.  Most other situations in
  which a Spliterator for an array is needed should use 
 <code>Arrays.spliterator(double[], int, int)</code>.
  
 <p>The returned spliterator always reports the characteristics 
 <code>SIZED</code> and <code>SUBSIZED</code>.  The caller may provide additional
  characteristics for the spliterator to report.  (For example, if it is
  known the array will not be further modified, specify <code>IMMUTABLE</code>;
  if the array data is considered to have an an encounter order, specify 
 <code>ORDERED</code>).  The method <code>Arrays.spliterator(long[], int, int)</code> can
  often be used instead, which returns a spliterator that reports 
 <code>SIZED</code>, <code>SUBSIZED</code>, <code>IMMUTABLE</code>, and <code>ORDERED</code>.
 @param array The array, assumed to be unmodified during use
 @param fromIndex The least index (inclusive) to cover
 @param toIndex One past the greatest index to cover
 @param additionalCharacteristics Additional spliterator characteristics         of this spliterator's source or elements beyond 
 <code>SIZED</code>  and         
 <code>SUBSIZED</code>  which are are always reported
 @return A spliterator for an array
 @throw NullPointerExceptionif the given array is <code>null</code>
 @throw ArrayIndexOutOfBoundsExceptionif <code>fromIndex</code> is negative,
          <code>toIndex</code> is less than <code>fromIndex</code>, or
          <code>toIndex</code> is greater than the array size
 - seealso: Arrays#spliterator(double[], int, int)
 */
+ (id<JavaUtilSpliterator_OfDouble>)spliteratorWithDoubleArray:(IOSDoubleArray *)array
                                                       withInt:(jint)fromIndex
                                                       withInt:(jint)toIndex
                                                       withInt:(jint)additionalCharacteristics;

/*!
 @brief Creates a <code>Spliterator.OfInt</code> covering the elements of a given array,
  using a customized set of spliterator characteristics.
 <p>This method is provided as an implementation convenience for
  Spliterators which store portions of their elements in arrays, and need
  fine control over Spliterator characteristics.  Most other situations in
  which a Spliterator for an array is needed should use 
 <code>Arrays.spliterator(int[])</code>.
  
 <p>The returned spliterator always reports the characteristics 
 <code>SIZED</code> and <code>SUBSIZED</code>.  The caller may provide additional
  characteristics for the spliterator to report; it is common to
  additionally specify <code>IMMUTABLE</code> and <code>ORDERED</code>.
 @param array The array, assumed to be unmodified during use
 @param additionalCharacteristics Additional spliterator characteristics         of this spliterator's source or elements beyond 
 <code>SIZED</code>  and         
 <code>SUBSIZED</code>  which are are always reported
 @return A spliterator for an array
 @throw NullPointerExceptionif the given array is <code>null</code>
 - seealso: Arrays#spliterator(int[])
 */
+ (id<JavaUtilSpliterator_OfInt>)spliteratorWithIntArray:(IOSIntArray *)array
                                                 withInt:(jint)additionalCharacteristics;

/*!
 @brief Creates a <code>Spliterator.OfInt</code> covering a range of elements of a
  given array, using a customized set of spliterator characteristics.
 <p>This method is provided as an implementation convenience for
  Spliterators which store portions of their elements in arrays, and need
  fine control over Spliterator characteristics.  Most other situations in
  which a Spliterator for an array is needed should use 
 <code>Arrays.spliterator(int[], int, int)</code>.
  
 <p>The returned spliterator always reports the characteristics 
 <code>SIZED</code> and <code>SUBSIZED</code>.  The caller may provide additional
  characteristics for the spliterator to report; it is common to
  additionally specify <code>IMMUTABLE</code> and <code>ORDERED</code>.
 @param array The array, assumed to be unmodified during use
 @param fromIndex The least index (inclusive) to cover
 @param toIndex One past the greatest index to cover
 @param additionalCharacteristics Additional spliterator characteristics         of this spliterator's source or elements beyond 
 <code>SIZED</code>  and         
 <code>SUBSIZED</code>  which are are always reported
 @return A spliterator for an array
 @throw NullPointerExceptionif the given array is <code>null</code>
 @throw ArrayIndexOutOfBoundsExceptionif <code>fromIndex</code> is negative,
          <code>toIndex</code> is less than <code>fromIndex</code>, or
          <code>toIndex</code> is greater than the array size
 - seealso: Arrays#spliterator(int[], int, int)
 */
+ (id<JavaUtilSpliterator_OfInt>)spliteratorWithIntArray:(IOSIntArray *)array
                                                 withInt:(jint)fromIndex
                                                 withInt:(jint)toIndex
                                                 withInt:(jint)additionalCharacteristics;

/*!
 @brief Creates a <code>Spliterator</code> using a given <code>Iterator</code>
  as the source of elements, and with a given initially reported size.
 <p>The spliterator is not 
 <em><a href="Spliterator.html#binding">late-binding</a></em>, inherits
  the <em>fail-fast</em> properties of the iterator, and implements 
 <code>trySplit</code> to permit limited parallelism. 
 <p>Traversal of elements should be accomplished through the spliterator.
  The behaviour of splitting and traversal is undefined if the iterator is
  operated on after the spliterator is returned, or the initially reported
  size is not equal to the actual number of elements in the source.
 @param iterator The iterator for the source
 @param size The number of elements in the source, to be reported as         initial 
 <code>estimateSize</code>
 @param characteristics Characteristics of this spliterator's source or         elements.  The characteristics 
 <code>SIZED</code>  and <code>SUBSIZED</code>         are additionally reported unless 
 <code>CONCURRENT</code>  is supplied.
 @return A spliterator from an iterator
 @throw NullPointerExceptionif the given iterator is <code>null</code>
 */
+ (id<JavaUtilSpliterator>)spliteratorWithJavaUtilIterator:(id<JavaUtilIterator>)iterator
                                                  withLong:(jlong)size
                                                   withInt:(jint)characteristics;

/*!
 @brief Creates a <code>Spliterator.OfLong</code> covering the elements of a given array,
  using a customized set of spliterator characteristics.
 <p>This method is provided as an implementation convenience for
  Spliterators which store portions of their elements in arrays, and need
  fine control over Spliterator characteristics.  Most other situations in
  which a Spliterator for an array is needed should use 
 <code>Arrays.spliterator(long[])</code>.
  
 <p>The returned spliterator always reports the characteristics 
 <code>SIZED</code> and <code>SUBSIZED</code>.  The caller may provide additional
  characteristics for the spliterator to report; it is common to
  additionally specify <code>IMMUTABLE</code> and <code>ORDERED</code>.
 @param array The array, assumed to be unmodified during use
 @param additionalCharacteristics Additional spliterator characteristics         of this spliterator's source or elements beyond 
 <code>SIZED</code>  and         
 <code>SUBSIZED</code>  which are are always reported
 @return A spliterator for an array
 @throw NullPointerExceptionif the given array is <code>null</code>
 - seealso: Arrays#spliterator(long[])
 */
+ (id<JavaUtilSpliterator_OfLong>)spliteratorWithLongArray:(IOSLongArray *)array
                                                   withInt:(jint)additionalCharacteristics;

/*!
 @brief Creates a <code>Spliterator.OfLong</code> covering a range of elements of a
  given array, using a customized set of spliterator characteristics.
 <p>This method is provided as an implementation convenience for
  Spliterators which store portions of their elements in arrays, and need
  fine control over Spliterator characteristics.  Most other situations in
  which a Spliterator for an array is needed should use 
 <code>Arrays.spliterator(long[], int, int)</code>.
  
 <p>The returned spliterator always reports the characteristics 
 <code>SIZED</code> and <code>SUBSIZED</code>.  The caller may provide additional
  characteristics for the spliterator to report.  (For example, if it is
  known the array will not be further modified, specify <code>IMMUTABLE</code>;
  if the array data is considered to have an an encounter order, specify 
 <code>ORDERED</code>).  The method <code>Arrays.spliterator(long[], int, int)</code> can
  often be used instead, which returns a spliterator that reports 
 <code>SIZED</code>, <code>SUBSIZED</code>, <code>IMMUTABLE</code>, and <code>ORDERED</code>.
 @param array The array, assumed to be unmodified during use
 @param fromIndex The least index (inclusive) to cover
 @param toIndex One past the greatest index to cover
 @param additionalCharacteristics Additional spliterator characteristics         of this spliterator's source or elements beyond 
 <code>SIZED</code>  and         
 <code>SUBSIZED</code>  which are are always reported
 @return A spliterator for an array
 @throw NullPointerExceptionif the given array is <code>null</code>
 @throw ArrayIndexOutOfBoundsExceptionif <code>fromIndex</code> is negative,
          <code>toIndex</code> is less than <code>fromIndex</code>, or
          <code>toIndex</code> is greater than the array size
 - seealso: Arrays#spliterator(long[], int, int)
 */
+ (id<JavaUtilSpliterator_OfLong>)spliteratorWithLongArray:(IOSLongArray *)array
                                                   withInt:(jint)fromIndex
                                                   withInt:(jint)toIndex
                                                   withInt:(jint)additionalCharacteristics;

/*!
 @brief Creates a <code>Spliterator</code> covering the elements of a given array,
  using a customized set of spliterator characteristics.
 <p>This method is provided as an implementation convenience for
  Spliterators which store portions of their elements in arrays, and need
  fine control over Spliterator characteristics.  Most other situations in
  which a Spliterator for an array is needed should use 
 <code>Arrays.spliterator(Object[])</code>.
  
 <p>The returned spliterator always reports the characteristics 
 <code>SIZED</code> and <code>SUBSIZED</code>.  The caller may provide additional
  characteristics for the spliterator to report; it is common to
  additionally specify <code>IMMUTABLE</code> and <code>ORDERED</code>.
 @param array The array, assumed to be unmodified during use
 @param additionalCharacteristics Additional spliterator characteristics         of this spliterator's source or elements beyond 
 <code>SIZED</code>  and         
 <code>SUBSIZED</code>  which are are always reported
 @return A spliterator for an array
 @throw NullPointerExceptionif the given array is <code>null</code>
 - seealso: Arrays#spliterator(Object[])
 */
+ (id<JavaUtilSpliterator>)spliteratorWithNSObjectArray:(IOSObjectArray *)array
                                                withInt:(jint)additionalCharacteristics;

/*!
 @brief Creates a <code>Spliterator</code> covering a range of elements of a given
  array, using a customized set of spliterator characteristics.
 <p>This method is provided as an implementation convenience for
  Spliterators which store portions of their elements in arrays, and need
  fine control over Spliterator characteristics.  Most other situations in
  which a Spliterator for an array is needed should use 
 <code>Arrays.spliterator(Object[])</code>.
  
 <p>The returned spliterator always reports the characteristics 
 <code>SIZED</code> and <code>SUBSIZED</code>.  The caller may provide additional
  characteristics for the spliterator to report; it is common to
  additionally specify <code>IMMUTABLE</code> and <code>ORDERED</code>.
 @param array The array, assumed to be unmodified during use
 @param fromIndex The least index (inclusive) to cover
 @param toIndex One past the greatest index to cover
 @param additionalCharacteristics Additional spliterator characteristics         of this spliterator's source or elements beyond 
 <code>SIZED</code>  and         
 <code>SUBSIZED</code>  which are are always reported
 @return A spliterator for an array
 @throw NullPointerExceptionif the given array is <code>null</code>
 @throw ArrayIndexOutOfBoundsExceptionif <code>fromIndex</code> is negative,
          <code>toIndex</code> is less than <code>fromIndex</code>, or
          <code>toIndex</code> is greater than the array size
 - seealso: Arrays#spliterator(Object[], int, int)
 */
+ (id<JavaUtilSpliterator>)spliteratorWithNSObjectArray:(IOSObjectArray *)array
                                                withInt:(jint)fromIndex
                                                withInt:(jint)toIndex
                                                withInt:(jint)additionalCharacteristics;

/*!
 @brief Creates a <code>Spliterator.OfDouble</code> using a given 
 <code>DoubleStream.DoubleIterator</code> as the source of elements, and with a
  given initially reported size.
 <p>The spliterator is not 
 <em><a href="Spliterator.html#binding">late-binding</a></em>, inherits
  the <em>fail-fast</em> properties of the iterator, and implements 
 <code>trySplit</code> to permit limited parallelism. 
 <p>Traversal of elements should be accomplished through the spliterator.
  The behaviour of splitting and traversal is undefined if the iterator is
  operated on after the spliterator is returned, or the initially reported
  size is not equal to the actual number of elements in the source.
 @param iterator The iterator for the source
 @param size The number of elements in the source, to be reported as         initial 
 <code>estimateSize</code>
 @param characteristics Characteristics of this spliterator's source or         elements.  The characteristics 
 <code>SIZED</code>  and <code>SUBSIZED</code>         are additionally reported unless 
 <code>CONCURRENT</code>  is supplied.
 @return A spliterator from an iterator
 @throw NullPointerExceptionif the given iterator is <code>null</code>
 */
+ (id<JavaUtilSpliterator_OfDouble>)spliteratorWithJavaUtilPrimitiveIterator_OfDouble:(id<JavaUtilPrimitiveIterator_OfDouble>)iterator
                                                                             withLong:(jlong)size
                                                                              withInt:(jint)characteristics;

/*!
 @brief Creates a <code>Spliterator.OfInt</code> using a given 
 <code>IntStream.IntIterator</code> as the source of elements, and with a given
  initially reported size.
 <p>The spliterator is not 
 <em><a href="Spliterator.html#binding">late-binding</a></em>, inherits
  the <em>fail-fast</em> properties of the iterator, and implements 
 <code>trySplit</code> to permit limited parallelism. 
 <p>Traversal of elements should be accomplished through the spliterator.
  The behaviour of splitting and traversal is undefined if the iterator is
  operated on after the spliterator is returned, or the initially reported
  size is not equal to the actual number of elements in the source.
 @param iterator The iterator for the source
 @param size The number of elements in the source, to be reported as         initial 
 <code>estimateSize</code> .
 @param characteristics Characteristics of this spliterator's source or         elements.  The characteristics 
 <code>SIZED</code>  and <code>SUBSIZED</code>         are additionally reported unless 
 <code>CONCURRENT</code>  is supplied.
 @return A spliterator from an iterator
 @throw NullPointerExceptionif the given iterator is <code>null</code>
 */
+ (id<JavaUtilSpliterator_OfInt>)spliteratorWithJavaUtilPrimitiveIterator_OfInt:(id<JavaUtilPrimitiveIterator_OfInt>)iterator
                                                                       withLong:(jlong)size
                                                                        withInt:(jint)characteristics;

/*!
 @brief Creates a <code>Spliterator.OfLong</code> using a given 
 <code>LongStream.LongIterator</code> as the source of elements, and with a
  given initially reported size.
 <p>The spliterator is not 
 <em><a href="Spliterator.html#binding">late-binding</a></em>, inherits
  the <em>fail-fast</em> properties of the iterator, and implements 
 <code>trySplit</code> to permit limited parallelism. 
 <p>Traversal of elements should be accomplished through the spliterator.
  The behaviour of splitting and traversal is undefined if the iterator is
  operated on after the spliterator is returned, or the initially reported
  size is not equal to the actual number of elements in the source.
 @param iterator The iterator for the source
 @param size The number of elements in the source, to be reported as         initial 
 <code>estimateSize</code> .
 @param characteristics Characteristics of this spliterator's source or         elements.  The characteristics 
 <code>SIZED</code>  and <code>SUBSIZED</code>         are additionally reported unless 
 <code>CONCURRENT</code>  is supplied.
 @return A spliterator from an iterator
 @throw NullPointerExceptionif the given iterator is <code>null</code>
 */
+ (id<JavaUtilSpliterator_OfLong>)spliteratorWithJavaUtilPrimitiveIterator_OfLong:(id<JavaUtilPrimitiveIterator_OfLong>)iterator
                                                                         withLong:(jlong)size
                                                                          withInt:(jint)characteristics;

/*!
 @brief Creates a <code>Spliterator</code> using a given <code>Iterator</code>
  as the source of elements, with no initial size estimate.
 <p>The spliterator is not 
 <em><a href="Spliterator.html#binding">late-binding</a></em>, inherits
  the <em>fail-fast</em> properties of the iterator, and implements 
 <code>trySplit</code> to permit limited parallelism. 
 <p>Traversal of elements should be accomplished through the spliterator.
  The behaviour of splitting and traversal is undefined if the iterator is
  operated on after the spliterator is returned.
 @param iterator The iterator for the source
 @param characteristics Characteristics of this spliterator's source         or elements (
 <code>SIZED</code>  and <code>SUBSIZED</code> , if supplied, are         ignored and are not reported.)
 @return A spliterator from an iterator
 @throw NullPointerExceptionif the given iterator is <code>null</code>
 */
+ (id<JavaUtilSpliterator>)spliteratorUnknownSizeWithJavaUtilIterator:(id<JavaUtilIterator>)iterator
                                                              withInt:(jint)characteristics;

/*!
 @brief Creates a <code>Spliterator.OfDouble</code> using a given 
 <code>DoubleStream.DoubleIterator</code> as the source of elements, with no
  initial size estimate.
 <p>The spliterator is not 
 <em><a href="Spliterator.html#binding">late-binding</a></em>, inherits
  the <em>fail-fast</em> properties of the iterator, and implements 
 <code>trySplit</code> to permit limited parallelism. 
 <p>Traversal of elements should be accomplished through the spliterator.
  The behaviour of splitting and traversal is undefined if the iterator is
  operated on after the spliterator is returned.
 @param iterator The iterator for the source
 @param characteristics Characteristics of this spliterator's source         or elements (
 <code>SIZED</code>  and <code>SUBSIZED</code> , if supplied, are         ignored and are not reported.)
 @return A spliterator from an iterator
 @throw NullPointerExceptionif the given iterator is <code>null</code>
 */
+ (id<JavaUtilSpliterator_OfDouble>)spliteratorUnknownSizeWithJavaUtilPrimitiveIterator_OfDouble:(id<JavaUtilPrimitiveIterator_OfDouble>)iterator
                                                                                         withInt:(jint)characteristics;

/*!
 @brief Creates a <code>Spliterator.OfInt</code> using a given 
 <code>IntStream.IntIterator</code> as the source of elements, with no initial
  size estimate.
 <p>The spliterator is not 
 <em><a href="Spliterator.html#binding">late-binding</a></em>, inherits
  the <em>fail-fast</em> properties of the iterator, and implements 
 <code>trySplit</code> to permit limited parallelism. 
 <p>Traversal of elements should be accomplished through the spliterator.
  The behaviour of splitting and traversal is undefined if the iterator is
  operated on after the spliterator is returned.
 @param iterator The iterator for the source
 @param characteristics Characteristics of this spliterator's source         or elements (
 <code>SIZED</code>  and <code>SUBSIZED</code> , if supplied, are         ignored and are not reported.)
 @return A spliterator from an iterator
 @throw NullPointerExceptionif the given iterator is <code>null</code>
 */
+ (id<JavaUtilSpliterator_OfInt>)spliteratorUnknownSizeWithJavaUtilPrimitiveIterator_OfInt:(id<JavaUtilPrimitiveIterator_OfInt>)iterator
                                                                                   withInt:(jint)characteristics;

/*!
 @brief Creates a <code>Spliterator.OfLong</code> using a given 
 <code>LongStream.LongIterator</code> as the source of elements, with no
  initial size estimate.
 <p>The spliterator is not 
 <em><a href="Spliterator.html#binding">late-binding</a></em>, inherits
  the <em>fail-fast</em> properties of the iterator, and implements 
 <code>trySplit</code> to permit limited parallelism. 
 <p>Traversal of elements should be accomplished through the spliterator.
  The behaviour of splitting and traversal is undefined if the iterator is
  operated on after the spliterator is returned.
 @param iterator The iterator for the source
 @param characteristics Characteristics of this spliterator's source         or elements (
 <code>SIZED</code>  and <code>SUBSIZED</code> , if supplied, are         ignored and are not reported.)
 @return A spliterator from an iterator
 @throw NullPointerExceptionif the given iterator is <code>null</code>
 */
+ (id<JavaUtilSpliterator_OfLong>)spliteratorUnknownSizeWithJavaUtilPrimitiveIterator_OfLong:(id<JavaUtilPrimitiveIterator_OfLong>)iterator
                                                                                     withInt:(jint)characteristics;

@end

J2OBJC_STATIC_INIT(JavaUtilSpliterators)

FOUNDATION_EXPORT id<JavaUtilSpliterator> JavaUtilSpliterators_emptySpliterator(void);

FOUNDATION_EXPORT id<JavaUtilSpliterator_OfInt> JavaUtilSpliterators_emptyIntSpliterator(void);

FOUNDATION_EXPORT id<JavaUtilSpliterator_OfLong> JavaUtilSpliterators_emptyLongSpliterator(void);

FOUNDATION_EXPORT id<JavaUtilSpliterator_OfDouble> JavaUtilSpliterators_emptyDoubleSpliterator(void);

FOUNDATION_EXPORT id<JavaUtilSpliterator> JavaUtilSpliterators_spliteratorWithNSObjectArray_withInt_(IOSObjectArray *array, jint additionalCharacteristics);

FOUNDATION_EXPORT id<JavaUtilSpliterator> JavaUtilSpliterators_spliteratorWithNSObjectArray_withInt_withInt_withInt_(IOSObjectArray *array, jint fromIndex, jint toIndex, jint additionalCharacteristics);

FOUNDATION_EXPORT id<JavaUtilSpliterator_OfInt> JavaUtilSpliterators_spliteratorWithIntArray_withInt_(IOSIntArray *array, jint additionalCharacteristics);

FOUNDATION_EXPORT id<JavaUtilSpliterator_OfInt> JavaUtilSpliterators_spliteratorWithIntArray_withInt_withInt_withInt_(IOSIntArray *array, jint fromIndex, jint toIndex, jint additionalCharacteristics);

FOUNDATION_EXPORT id<JavaUtilSpliterator_OfLong> JavaUtilSpliterators_spliteratorWithLongArray_withInt_(IOSLongArray *array, jint additionalCharacteristics);

FOUNDATION_EXPORT id<JavaUtilSpliterator_OfLong> JavaUtilSpliterators_spliteratorWithLongArray_withInt_withInt_withInt_(IOSLongArray *array, jint fromIndex, jint toIndex, jint additionalCharacteristics);

FOUNDATION_EXPORT id<JavaUtilSpliterator_OfDouble> JavaUtilSpliterators_spliteratorWithDoubleArray_withInt_(IOSDoubleArray *array, jint additionalCharacteristics);

FOUNDATION_EXPORT id<JavaUtilSpliterator_OfDouble> JavaUtilSpliterators_spliteratorWithDoubleArray_withInt_withInt_withInt_(IOSDoubleArray *array, jint fromIndex, jint toIndex, jint additionalCharacteristics);

FOUNDATION_EXPORT id<JavaUtilSpliterator> JavaUtilSpliterators_spliteratorWithJavaUtilCollection_withInt_(id<JavaUtilCollection> c, jint characteristics);

FOUNDATION_EXPORT id<JavaUtilSpliterator> JavaUtilSpliterators_spliteratorWithJavaUtilIterator_withLong_withInt_(id<JavaUtilIterator> iterator, jlong size, jint characteristics);

FOUNDATION_EXPORT id<JavaUtilSpliterator> JavaUtilSpliterators_spliteratorUnknownSizeWithJavaUtilIterator_withInt_(id<JavaUtilIterator> iterator, jint characteristics);

FOUNDATION_EXPORT id<JavaUtilSpliterator_OfInt> JavaUtilSpliterators_spliteratorWithJavaUtilPrimitiveIterator_OfInt_withLong_withInt_(id<JavaUtilPrimitiveIterator_OfInt> iterator, jlong size, jint characteristics);

FOUNDATION_EXPORT id<JavaUtilSpliterator_OfInt> JavaUtilSpliterators_spliteratorUnknownSizeWithJavaUtilPrimitiveIterator_OfInt_withInt_(id<JavaUtilPrimitiveIterator_OfInt> iterator, jint characteristics);

FOUNDATION_EXPORT id<JavaUtilSpliterator_OfLong> JavaUtilSpliterators_spliteratorWithJavaUtilPrimitiveIterator_OfLong_withLong_withInt_(id<JavaUtilPrimitiveIterator_OfLong> iterator, jlong size, jint characteristics);

FOUNDATION_EXPORT id<JavaUtilSpliterator_OfLong> JavaUtilSpliterators_spliteratorUnknownSizeWithJavaUtilPrimitiveIterator_OfLong_withInt_(id<JavaUtilPrimitiveIterator_OfLong> iterator, jint characteristics);

FOUNDATION_EXPORT id<JavaUtilSpliterator_OfDouble> JavaUtilSpliterators_spliteratorWithJavaUtilPrimitiveIterator_OfDouble_withLong_withInt_(id<JavaUtilPrimitiveIterator_OfDouble> iterator, jlong size, jint characteristics);

FOUNDATION_EXPORT id<JavaUtilSpliterator_OfDouble> JavaUtilSpliterators_spliteratorUnknownSizeWithJavaUtilPrimitiveIterator_OfDouble_withInt_(id<JavaUtilPrimitiveIterator_OfDouble> iterator, jint characteristics);

FOUNDATION_EXPORT id<JavaUtilIterator> JavaUtilSpliterators_iteratorWithJavaUtilSpliterator_(id<JavaUtilSpliterator> spliterator);

FOUNDATION_EXPORT id<JavaUtilPrimitiveIterator_OfInt> JavaUtilSpliterators_iteratorWithJavaUtilSpliterator_OfInt_(id<JavaUtilSpliterator_OfInt> spliterator);

FOUNDATION_EXPORT id<JavaUtilPrimitiveIterator_OfLong> JavaUtilSpliterators_iteratorWithJavaUtilSpliterator_OfLong_(id<JavaUtilSpliterator_OfLong> spliterator);

FOUNDATION_EXPORT id<JavaUtilPrimitiveIterator_OfDouble> JavaUtilSpliterators_iteratorWithJavaUtilSpliterator_OfDouble_(id<JavaUtilSpliterator_OfDouble> spliterator);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilSpliterators)

#endif

#if !defined (JavaUtilSpliterators_ArraySpliterator_) && (INCLUDE_ALL_JavaUtilSpliterators || defined(INCLUDE_JavaUtilSpliterators_ArraySpliterator))
#define JavaUtilSpliterators_ArraySpliterator_

#define RESTRICT_JavaUtilSpliterator 1
#define INCLUDE_JavaUtilSpliterator 1
#include "java/util/Spliterator.h"

@class IOSObjectArray;
@protocol JavaUtilComparator;
@protocol JavaUtilFunctionConsumer;

/*!
 @brief A Spliterator designed for use by sources that traverse and split
  elements maintained in an unmodifiable <code>Object[]</code> array.
 */
@interface JavaUtilSpliterators_ArraySpliterator : NSObject < JavaUtilSpliterator >

#pragma mark Public

/*!
 @brief Creates a spliterator covering all of the given array.
 @param array the array, assumed to be unmodified during use
 @param additionalCharacteristics Additional spliterator characteristics  of this spliterator's source or elements beyond 
 <code>SIZED</code>  and  <code>SUBSIZED</code>
   which are are always reported
 */
- (instancetype __nonnull)initWithNSObjectArray:(IOSObjectArray *)array
                                        withInt:(jint)additionalCharacteristics;

/*!
 @brief Creates a spliterator covering the given array and range
 @param array the array, assumed to be unmodified during use
 @param origin the least index (inclusive) to cover
 @param fence one past the greatest index to cover
 @param additionalCharacteristics Additional spliterator characteristics  of this spliterator's source or elements beyond 
 <code>SIZED</code>  and  <code>SUBSIZED</code>
   which are are always reported
 */
- (instancetype __nonnull)initWithNSObjectArray:(IOSObjectArray *)array
                                        withInt:(jint)origin
                                        withInt:(jint)fence
                                        withInt:(jint)additionalCharacteristics;

- (jint)characteristics;

- (jlong)estimateSize;

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

- (id<JavaUtilComparator>)getComparator;

- (jboolean)tryAdvanceWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

- (id<JavaUtilSpliterator>)trySplit;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilSpliterators_ArraySpliterator)

FOUNDATION_EXPORT void JavaUtilSpliterators_ArraySpliterator_initWithNSObjectArray_withInt_(JavaUtilSpliterators_ArraySpliterator *self, IOSObjectArray *array, jint additionalCharacteristics);

FOUNDATION_EXPORT JavaUtilSpliterators_ArraySpliterator *new_JavaUtilSpliterators_ArraySpliterator_initWithNSObjectArray_withInt_(IOSObjectArray *array, jint additionalCharacteristics) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilSpliterators_ArraySpliterator *create_JavaUtilSpliterators_ArraySpliterator_initWithNSObjectArray_withInt_(IOSObjectArray *array, jint additionalCharacteristics);

FOUNDATION_EXPORT void JavaUtilSpliterators_ArraySpliterator_initWithNSObjectArray_withInt_withInt_withInt_(JavaUtilSpliterators_ArraySpliterator *self, IOSObjectArray *array, jint origin, jint fence, jint additionalCharacteristics);

FOUNDATION_EXPORT JavaUtilSpliterators_ArraySpliterator *new_JavaUtilSpliterators_ArraySpliterator_initWithNSObjectArray_withInt_withInt_withInt_(IOSObjectArray *array, jint origin, jint fence, jint additionalCharacteristics) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilSpliterators_ArraySpliterator *create_JavaUtilSpliterators_ArraySpliterator_initWithNSObjectArray_withInt_withInt_withInt_(IOSObjectArray *array, jint origin, jint fence, jint additionalCharacteristics);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilSpliterators_ArraySpliterator)

#endif

#if !defined (JavaUtilSpliterators_IntArraySpliterator_) && (INCLUDE_ALL_JavaUtilSpliterators || defined(INCLUDE_JavaUtilSpliterators_IntArraySpliterator))
#define JavaUtilSpliterators_IntArraySpliterator_

#define RESTRICT_JavaUtilSpliterator 1
#define INCLUDE_JavaUtilSpliterator_OfInt 1
#include "java/util/Spliterator.h"

@class IOSIntArray;
@protocol JavaUtilComparator;
@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilFunctionIntConsumer;

/*!
 @brief A Spliterator.OfInt designed for use by sources that traverse and split
  elements maintained in an unmodifiable <code>int[]</code> array.
 */
@interface JavaUtilSpliterators_IntArraySpliterator : NSObject < JavaUtilSpliterator_OfInt >

#pragma mark Public

/*!
 @brief Creates a spliterator covering all of the given array.
 @param array the array, assumed to be unmodified during use
 @param additionalCharacteristics Additional spliterator characteristics         of this spliterator's source or elements beyond 
 <code>SIZED</code>  and         <code>SUBSIZED</code>
   which are are always reported
 */
- (instancetype __nonnull)initWithIntArray:(IOSIntArray *)array
                                   withInt:(jint)additionalCharacteristics;

/*!
 @brief Creates a spliterator covering the given array and range
 @param array the array, assumed to be unmodified during use
 @param origin the least index (inclusive) to cover
 @param fence one past the greatest index to cover
 @param additionalCharacteristics Additional spliterator characteristics         of this spliterator's source or elements beyond 
 <code>SIZED</code>  and         <code>SUBSIZED</code>
   which are are always reported
 */
- (instancetype __nonnull)initWithIntArray:(IOSIntArray *)array
                                   withInt:(jint)origin
                                   withInt:(jint)fence
                                   withInt:(jint)additionalCharacteristics;

- (jint)characteristics;

- (jlong)estimateSize;

- (void)forEachRemainingWithId:(id<JavaUtilFunctionIntConsumer>)action;

- (id<JavaUtilComparator>)getComparator;

- (jboolean)tryAdvanceWithId:(id<JavaUtilFunctionIntConsumer>)action;

- (id<JavaUtilSpliterator_OfInt>)trySplit;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilSpliterators_IntArraySpliterator)

FOUNDATION_EXPORT void JavaUtilSpliterators_IntArraySpliterator_initWithIntArray_withInt_(JavaUtilSpliterators_IntArraySpliterator *self, IOSIntArray *array, jint additionalCharacteristics);

FOUNDATION_EXPORT JavaUtilSpliterators_IntArraySpliterator *new_JavaUtilSpliterators_IntArraySpliterator_initWithIntArray_withInt_(IOSIntArray *array, jint additionalCharacteristics) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilSpliterators_IntArraySpliterator *create_JavaUtilSpliterators_IntArraySpliterator_initWithIntArray_withInt_(IOSIntArray *array, jint additionalCharacteristics);

FOUNDATION_EXPORT void JavaUtilSpliterators_IntArraySpliterator_initWithIntArray_withInt_withInt_withInt_(JavaUtilSpliterators_IntArraySpliterator *self, IOSIntArray *array, jint origin, jint fence, jint additionalCharacteristics);

FOUNDATION_EXPORT JavaUtilSpliterators_IntArraySpliterator *new_JavaUtilSpliterators_IntArraySpliterator_initWithIntArray_withInt_withInt_withInt_(IOSIntArray *array, jint origin, jint fence, jint additionalCharacteristics) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilSpliterators_IntArraySpliterator *create_JavaUtilSpliterators_IntArraySpliterator_initWithIntArray_withInt_withInt_withInt_(IOSIntArray *array, jint origin, jint fence, jint additionalCharacteristics);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilSpliterators_IntArraySpliterator)

#endif

#if !defined (JavaUtilSpliterators_LongArraySpliterator_) && (INCLUDE_ALL_JavaUtilSpliterators || defined(INCLUDE_JavaUtilSpliterators_LongArraySpliterator))
#define JavaUtilSpliterators_LongArraySpliterator_

#define RESTRICT_JavaUtilSpliterator 1
#define INCLUDE_JavaUtilSpliterator_OfLong 1
#include "java/util/Spliterator.h"

@class IOSLongArray;
@protocol JavaUtilComparator;
@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilFunctionLongConsumer;

/*!
 @brief A Spliterator.OfLong designed for use by sources that traverse and split
  elements maintained in an unmodifiable <code>int[]</code> array.
 */
@interface JavaUtilSpliterators_LongArraySpliterator : NSObject < JavaUtilSpliterator_OfLong >

#pragma mark Public

/*!
 @brief Creates a spliterator covering all of the given array.
 @param array the array, assumed to be unmodified during use
 @param additionalCharacteristics Additional spliterator characteristics         of this spliterator's source or elements beyond 
 <code>SIZED</code>  and         <code>SUBSIZED</code>
   which are are always reported
 */
- (instancetype __nonnull)initWithLongArray:(IOSLongArray *)array
                                    withInt:(jint)additionalCharacteristics;

/*!
 @brief Creates a spliterator covering the given array and range
 @param array the array, assumed to be unmodified during use
 @param origin the least index (inclusive) to cover
 @param fence one past the greatest index to cover
 @param additionalCharacteristics Additional spliterator characteristics         of this spliterator's source or elements beyond 
 <code>SIZED</code>  and         <code>SUBSIZED</code>
   which are are always reported
 */
- (instancetype __nonnull)initWithLongArray:(IOSLongArray *)array
                                    withInt:(jint)origin
                                    withInt:(jint)fence
                                    withInt:(jint)additionalCharacteristics;

- (jint)characteristics;

- (jlong)estimateSize;

- (void)forEachRemainingWithId:(id<JavaUtilFunctionLongConsumer>)action;

- (id<JavaUtilComparator>)getComparator;

- (jboolean)tryAdvanceWithId:(id<JavaUtilFunctionLongConsumer>)action;

- (id<JavaUtilSpliterator_OfLong>)trySplit;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilSpliterators_LongArraySpliterator)

FOUNDATION_EXPORT void JavaUtilSpliterators_LongArraySpliterator_initWithLongArray_withInt_(JavaUtilSpliterators_LongArraySpliterator *self, IOSLongArray *array, jint additionalCharacteristics);

FOUNDATION_EXPORT JavaUtilSpliterators_LongArraySpliterator *new_JavaUtilSpliterators_LongArraySpliterator_initWithLongArray_withInt_(IOSLongArray *array, jint additionalCharacteristics) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilSpliterators_LongArraySpliterator *create_JavaUtilSpliterators_LongArraySpliterator_initWithLongArray_withInt_(IOSLongArray *array, jint additionalCharacteristics);

FOUNDATION_EXPORT void JavaUtilSpliterators_LongArraySpliterator_initWithLongArray_withInt_withInt_withInt_(JavaUtilSpliterators_LongArraySpliterator *self, IOSLongArray *array, jint origin, jint fence, jint additionalCharacteristics);

FOUNDATION_EXPORT JavaUtilSpliterators_LongArraySpliterator *new_JavaUtilSpliterators_LongArraySpliterator_initWithLongArray_withInt_withInt_withInt_(IOSLongArray *array, jint origin, jint fence, jint additionalCharacteristics) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilSpliterators_LongArraySpliterator *create_JavaUtilSpliterators_LongArraySpliterator_initWithLongArray_withInt_withInt_withInt_(IOSLongArray *array, jint origin, jint fence, jint additionalCharacteristics);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilSpliterators_LongArraySpliterator)

#endif

#if !defined (JavaUtilSpliterators_DoubleArraySpliterator_) && (INCLUDE_ALL_JavaUtilSpliterators || defined(INCLUDE_JavaUtilSpliterators_DoubleArraySpliterator))
#define JavaUtilSpliterators_DoubleArraySpliterator_

#define RESTRICT_JavaUtilSpliterator 1
#define INCLUDE_JavaUtilSpliterator_OfDouble 1
#include "java/util/Spliterator.h"

@class IOSDoubleArray;
@protocol JavaUtilComparator;
@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilFunctionDoubleConsumer;

/*!
 @brief A Spliterator.OfDouble designed for use by sources that traverse and split
  elements maintained in an unmodifiable <code>int[]</code> array.
 */
@interface JavaUtilSpliterators_DoubleArraySpliterator : NSObject < JavaUtilSpliterator_OfDouble >

#pragma mark Public

/*!
 @brief Creates a spliterator covering all of the given array.
 @param array the array, assumed to be unmodified during use
 @param additionalCharacteristics Additional spliterator characteristics         of this spliterator's source or elements beyond 
 <code>SIZED</code>  and         <code>SUBSIZED</code>
   which are are always reported
 */
- (instancetype __nonnull)initWithDoubleArray:(IOSDoubleArray *)array
                                      withInt:(jint)additionalCharacteristics;

/*!
 @brief Creates a spliterator covering the given array and range
 @param array the array, assumed to be unmodified during use
 @param origin the least index (inclusive) to cover
 @param fence one past the greatest index to cover
 @param additionalCharacteristics Additional spliterator characteristics         of this spliterator's source or elements beyond 
 <code>SIZED</code>  and         <code>SUBSIZED</code>
   which are are always reported
 */
- (instancetype __nonnull)initWithDoubleArray:(IOSDoubleArray *)array
                                      withInt:(jint)origin
                                      withInt:(jint)fence
                                      withInt:(jint)additionalCharacteristics;

- (jint)characteristics;

- (jlong)estimateSize;

- (void)forEachRemainingWithId:(id<JavaUtilFunctionDoubleConsumer>)action;

- (id<JavaUtilComparator>)getComparator;

- (jboolean)tryAdvanceWithId:(id<JavaUtilFunctionDoubleConsumer>)action;

- (id<JavaUtilSpliterator_OfDouble>)trySplit;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilSpliterators_DoubleArraySpliterator)

FOUNDATION_EXPORT void JavaUtilSpliterators_DoubleArraySpliterator_initWithDoubleArray_withInt_(JavaUtilSpliterators_DoubleArraySpliterator *self, IOSDoubleArray *array, jint additionalCharacteristics);

FOUNDATION_EXPORT JavaUtilSpliterators_DoubleArraySpliterator *new_JavaUtilSpliterators_DoubleArraySpliterator_initWithDoubleArray_withInt_(IOSDoubleArray *array, jint additionalCharacteristics) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilSpliterators_DoubleArraySpliterator *create_JavaUtilSpliterators_DoubleArraySpliterator_initWithDoubleArray_withInt_(IOSDoubleArray *array, jint additionalCharacteristics);

FOUNDATION_EXPORT void JavaUtilSpliterators_DoubleArraySpliterator_initWithDoubleArray_withInt_withInt_withInt_(JavaUtilSpliterators_DoubleArraySpliterator *self, IOSDoubleArray *array, jint origin, jint fence, jint additionalCharacteristics);

FOUNDATION_EXPORT JavaUtilSpliterators_DoubleArraySpliterator *new_JavaUtilSpliterators_DoubleArraySpliterator_initWithDoubleArray_withInt_withInt_withInt_(IOSDoubleArray *array, jint origin, jint fence, jint additionalCharacteristics) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilSpliterators_DoubleArraySpliterator *create_JavaUtilSpliterators_DoubleArraySpliterator_initWithDoubleArray_withInt_withInt_withInt_(IOSDoubleArray *array, jint origin, jint fence, jint additionalCharacteristics);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilSpliterators_DoubleArraySpliterator)

#endif

#if !defined (JavaUtilSpliterators_AbstractSpliterator_) && (INCLUDE_ALL_JavaUtilSpliterators || defined(INCLUDE_JavaUtilSpliterators_AbstractSpliterator))
#define JavaUtilSpliterators_AbstractSpliterator_

#define RESTRICT_JavaUtilSpliterator 1
#define INCLUDE_JavaUtilSpliterator 1
#include "java/util/Spliterator.h"

@protocol JavaUtilComparator;
@protocol JavaUtilFunctionConsumer;

/*!
 @brief An abstract <code>Spliterator</code> that implements <code>trySplit</code> to
  permit limited parallelism.
 <p>An extending class need only
  implement <code>tryAdvance</code>.
  The extending class should override 
 <code>forEach</code> if it can
  provide a more performant implementation.
 - seealso: #spliterator(Iterator, long, int)
 @since 1.8
 */
@interface JavaUtilSpliterators_AbstractSpliterator : NSObject < JavaUtilSpliterator >
@property (readonly, class) jint BATCH_UNIT NS_SWIFT_NAME(BATCH_UNIT);
@property (readonly, class) jint MAX_BATCH NS_SWIFT_NAME(MAX_BATCH);

+ (jint)BATCH_UNIT;

+ (jint)MAX_BATCH;

#pragma mark Public

/*!
 */
- (jint)characteristics;

/*!
 */
- (jlong)estimateSize;

/*!
 @brief  This implementation permits limited parallelism.
 */
- (id<JavaUtilSpliterator>)trySplit;

#pragma mark Protected

/*!
 @brief Creates a spliterator reporting the given estimated size and
  additionalCharacteristics.
 @param est the estimated size of this spliterator if known, otherwise         
 <code>Long.MAX_VALUE</code> .
 @param additionalCharacteristics properties of this spliterator's         source or elements.  If 
 <code>SIZED</code>  is reported then this         spliterator will additionally report 
 <code>SUBSIZED</code> .
 */
- (instancetype __nonnull)initWithLong:(jlong)est
                               withInt:(jint)additionalCharacteristics;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilSpliterators_AbstractSpliterator)

inline jint JavaUtilSpliterators_AbstractSpliterator_get_BATCH_UNIT(void);
#define JavaUtilSpliterators_AbstractSpliterator_BATCH_UNIT 1024
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilSpliterators_AbstractSpliterator, BATCH_UNIT, jint)

inline jint JavaUtilSpliterators_AbstractSpliterator_get_MAX_BATCH(void);
#define JavaUtilSpliterators_AbstractSpliterator_MAX_BATCH 33554432
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilSpliterators_AbstractSpliterator, MAX_BATCH, jint)

FOUNDATION_EXPORT void JavaUtilSpliterators_AbstractSpliterator_initWithLong_withInt_(JavaUtilSpliterators_AbstractSpliterator *self, jlong est, jint additionalCharacteristics);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilSpliterators_AbstractSpliterator)

#endif

#if !defined (JavaUtilSpliterators_AbstractSpliterator_HoldingConsumer_) && (INCLUDE_ALL_JavaUtilSpliterators || defined(INCLUDE_JavaUtilSpliterators_AbstractSpliterator_HoldingConsumer))
#define JavaUtilSpliterators_AbstractSpliterator_HoldingConsumer_

#define RESTRICT_JavaUtilFunctionConsumer 1
#define INCLUDE_JavaUtilFunctionConsumer 1
#include "java/util/function/Consumer.h"

@interface JavaUtilSpliterators_AbstractSpliterator_HoldingConsumer : NSObject < JavaUtilFunctionConsumer > {
 @public
  id value_;
}

#pragma mark Public

- (void)acceptWithId:(id)value;

#pragma mark Package-Private

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilSpliterators_AbstractSpliterator_HoldingConsumer)

J2OBJC_FIELD_SETTER(JavaUtilSpliterators_AbstractSpliterator_HoldingConsumer, value_, id)

FOUNDATION_EXPORT void JavaUtilSpliterators_AbstractSpliterator_HoldingConsumer_init(JavaUtilSpliterators_AbstractSpliterator_HoldingConsumer *self);

FOUNDATION_EXPORT JavaUtilSpliterators_AbstractSpliterator_HoldingConsumer *new_JavaUtilSpliterators_AbstractSpliterator_HoldingConsumer_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilSpliterators_AbstractSpliterator_HoldingConsumer *create_JavaUtilSpliterators_AbstractSpliterator_HoldingConsumer_init(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilSpliterators_AbstractSpliterator_HoldingConsumer)

#endif

#if !defined (JavaUtilSpliterators_AbstractIntSpliterator_) && (INCLUDE_ALL_JavaUtilSpliterators || defined(INCLUDE_JavaUtilSpliterators_AbstractIntSpliterator))
#define JavaUtilSpliterators_AbstractIntSpliterator_

#define RESTRICT_JavaUtilSpliterator 1
#define INCLUDE_JavaUtilSpliterator_OfInt 1
#include "java/util/Spliterator.h"

@protocol JavaUtilComparator;
@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilFunctionIntConsumer;

/*!
 @brief An abstract <code>Spliterator.OfInt</code> that implements <code>trySplit</code> to
  permit limited parallelism.
 <p>To implement a spliterator an extending class need only implement 
 <code>tryAdvance(java.util.function.IntConsumer)</code>
  tryAdvance}.  The extending class should override 
 <code>forEachRemaining(java.util.function.IntConsumer)</code> forEach} if it
  can provide a more performant implementation.
 - seealso: #spliterator(java.util.PrimitiveIterator.OfInt, long, int)
 @since 1.8
 */
@interface JavaUtilSpliterators_AbstractIntSpliterator : NSObject < JavaUtilSpliterator_OfInt >
@property (readonly, class) jint MAX_BATCH NS_SWIFT_NAME(MAX_BATCH);
@property (readonly, class) jint BATCH_UNIT NS_SWIFT_NAME(BATCH_UNIT);

+ (jint)MAX_BATCH;

+ (jint)BATCH_UNIT;

#pragma mark Public

/*!
 */
- (jint)characteristics;

/*!
 */
- (jlong)estimateSize;

/*!
 @brief  This implementation permits limited parallelism.
 */
- (id<JavaUtilSpliterator_OfInt>)trySplit;

#pragma mark Protected

/*!
 @brief Creates a spliterator reporting the given estimated size and
  characteristics.
 @param est the estimated size of this spliterator if known, otherwise         
 <code>Long.MAX_VALUE</code> .
 @param additionalCharacteristics properties of this spliterator's         source or elements.  If 
 <code>SIZED</code>  is reported then this         spliterator will additionally report 
 <code>SUBSIZED</code> .
 */
- (instancetype __nonnull)initWithLong:(jlong)est
                               withInt:(jint)additionalCharacteristics;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilSpliterators_AbstractIntSpliterator)

inline jint JavaUtilSpliterators_AbstractIntSpliterator_get_MAX_BATCH(void);
#define JavaUtilSpliterators_AbstractIntSpliterator_MAX_BATCH 33554432
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilSpliterators_AbstractIntSpliterator, MAX_BATCH, jint)

inline jint JavaUtilSpliterators_AbstractIntSpliterator_get_BATCH_UNIT(void);
#define JavaUtilSpliterators_AbstractIntSpliterator_BATCH_UNIT 1024
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilSpliterators_AbstractIntSpliterator, BATCH_UNIT, jint)

FOUNDATION_EXPORT void JavaUtilSpliterators_AbstractIntSpliterator_initWithLong_withInt_(JavaUtilSpliterators_AbstractIntSpliterator *self, jlong est, jint additionalCharacteristics);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilSpliterators_AbstractIntSpliterator)

#endif

#if !defined (JavaUtilSpliterators_AbstractIntSpliterator_HoldingIntConsumer_) && (INCLUDE_ALL_JavaUtilSpliterators || defined(INCLUDE_JavaUtilSpliterators_AbstractIntSpliterator_HoldingIntConsumer))
#define JavaUtilSpliterators_AbstractIntSpliterator_HoldingIntConsumer_

#define RESTRICT_JavaUtilFunctionIntConsumer 1
#define INCLUDE_JavaUtilFunctionIntConsumer 1
#include "java/util/function/IntConsumer.h"

@interface JavaUtilSpliterators_AbstractIntSpliterator_HoldingIntConsumer : NSObject < JavaUtilFunctionIntConsumer > {
 @public
  jint value_;
}

#pragma mark Public

- (void)acceptWithInt:(jint)value;

#pragma mark Package-Private

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilSpliterators_AbstractIntSpliterator_HoldingIntConsumer)

FOUNDATION_EXPORT void JavaUtilSpliterators_AbstractIntSpliterator_HoldingIntConsumer_init(JavaUtilSpliterators_AbstractIntSpliterator_HoldingIntConsumer *self);

FOUNDATION_EXPORT JavaUtilSpliterators_AbstractIntSpliterator_HoldingIntConsumer *new_JavaUtilSpliterators_AbstractIntSpliterator_HoldingIntConsumer_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilSpliterators_AbstractIntSpliterator_HoldingIntConsumer *create_JavaUtilSpliterators_AbstractIntSpliterator_HoldingIntConsumer_init(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilSpliterators_AbstractIntSpliterator_HoldingIntConsumer)

#endif

#if !defined (JavaUtilSpliterators_AbstractLongSpliterator_) && (INCLUDE_ALL_JavaUtilSpliterators || defined(INCLUDE_JavaUtilSpliterators_AbstractLongSpliterator))
#define JavaUtilSpliterators_AbstractLongSpliterator_

#define RESTRICT_JavaUtilSpliterator 1
#define INCLUDE_JavaUtilSpliterator_OfLong 1
#include "java/util/Spliterator.h"

@protocol JavaUtilComparator;
@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilFunctionLongConsumer;

/*!
 @brief An abstract <code>Spliterator.OfLong</code> that implements <code>trySplit</code>
  to permit limited parallelism.
 <p>To implement a spliterator an extending class need only implement 
 <code>tryAdvance(java.util.function.LongConsumer)</code>
  tryAdvance}.  The extending class should override 
 <code>forEachRemaining(java.util.function.LongConsumer)</code> forEach} if it
  can provide a more performant implementation.
 - seealso: #spliterator(java.util.PrimitiveIterator.OfLong, long, int)
 @since 1.8
 */
@interface JavaUtilSpliterators_AbstractLongSpliterator : NSObject < JavaUtilSpliterator_OfLong >
@property (readonly, class) jint MAX_BATCH NS_SWIFT_NAME(MAX_BATCH);
@property (readonly, class) jint BATCH_UNIT NS_SWIFT_NAME(BATCH_UNIT);

+ (jint)MAX_BATCH;

+ (jint)BATCH_UNIT;

#pragma mark Public

/*!
 */
- (jint)characteristics;

/*!
 */
- (jlong)estimateSize;

/*!
 @brief  This implementation permits limited parallelism.
 */
- (id<JavaUtilSpliterator_OfLong>)trySplit;

#pragma mark Protected

/*!
 @brief Creates a spliterator reporting the given estimated size and
  characteristics.
 @param est the estimated size of this spliterator if known, otherwise         
 <code>Long.MAX_VALUE</code> .
 @param additionalCharacteristics properties of this spliterator's         source or elements.  If 
 <code>SIZED</code>  is reported then this         spliterator will additionally report 
 <code>SUBSIZED</code> .
 */
- (instancetype __nonnull)initWithLong:(jlong)est
                               withInt:(jint)additionalCharacteristics;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilSpliterators_AbstractLongSpliterator)

inline jint JavaUtilSpliterators_AbstractLongSpliterator_get_MAX_BATCH(void);
#define JavaUtilSpliterators_AbstractLongSpliterator_MAX_BATCH 33554432
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilSpliterators_AbstractLongSpliterator, MAX_BATCH, jint)

inline jint JavaUtilSpliterators_AbstractLongSpliterator_get_BATCH_UNIT(void);
#define JavaUtilSpliterators_AbstractLongSpliterator_BATCH_UNIT 1024
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilSpliterators_AbstractLongSpliterator, BATCH_UNIT, jint)

FOUNDATION_EXPORT void JavaUtilSpliterators_AbstractLongSpliterator_initWithLong_withInt_(JavaUtilSpliterators_AbstractLongSpliterator *self, jlong est, jint additionalCharacteristics);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilSpliterators_AbstractLongSpliterator)

#endif

#if !defined (JavaUtilSpliterators_AbstractLongSpliterator_HoldingLongConsumer_) && (INCLUDE_ALL_JavaUtilSpliterators || defined(INCLUDE_JavaUtilSpliterators_AbstractLongSpliterator_HoldingLongConsumer))
#define JavaUtilSpliterators_AbstractLongSpliterator_HoldingLongConsumer_

#define RESTRICT_JavaUtilFunctionLongConsumer 1
#define INCLUDE_JavaUtilFunctionLongConsumer 1
#include "java/util/function/LongConsumer.h"

@interface JavaUtilSpliterators_AbstractLongSpliterator_HoldingLongConsumer : NSObject < JavaUtilFunctionLongConsumer > {
 @public
  jlong value_;
}

#pragma mark Public

- (void)acceptWithLong:(jlong)value;

#pragma mark Package-Private

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilSpliterators_AbstractLongSpliterator_HoldingLongConsumer)

FOUNDATION_EXPORT void JavaUtilSpliterators_AbstractLongSpliterator_HoldingLongConsumer_init(JavaUtilSpliterators_AbstractLongSpliterator_HoldingLongConsumer *self);

FOUNDATION_EXPORT JavaUtilSpliterators_AbstractLongSpliterator_HoldingLongConsumer *new_JavaUtilSpliterators_AbstractLongSpliterator_HoldingLongConsumer_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilSpliterators_AbstractLongSpliterator_HoldingLongConsumer *create_JavaUtilSpliterators_AbstractLongSpliterator_HoldingLongConsumer_init(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilSpliterators_AbstractLongSpliterator_HoldingLongConsumer)

#endif

#if !defined (JavaUtilSpliterators_AbstractDoubleSpliterator_) && (INCLUDE_ALL_JavaUtilSpliterators || defined(INCLUDE_JavaUtilSpliterators_AbstractDoubleSpliterator))
#define JavaUtilSpliterators_AbstractDoubleSpliterator_

#define RESTRICT_JavaUtilSpliterator 1
#define INCLUDE_JavaUtilSpliterator_OfDouble 1
#include "java/util/Spliterator.h"

@protocol JavaUtilComparator;
@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilFunctionDoubleConsumer;

/*!
 @brief An abstract <code>Spliterator.OfDouble</code> that implements 
 <code>trySplit</code> to permit limited parallelism.
 <p>To implement a spliterator an extending class need only implement 
 <code>tryAdvance(java.util.function.DoubleConsumer)</code>
  tryAdvance}.  The extending class should override 
 <code>forEachRemaining(java.util.function.DoubleConsumer)</code> forEach} if
  it can provide a more performant implementation.
 - seealso: #spliterator(java.util.PrimitiveIterator.OfDouble, long, int)
 @since 1.8
 */
@interface JavaUtilSpliterators_AbstractDoubleSpliterator : NSObject < JavaUtilSpliterator_OfDouble >
@property (readonly, class) jint MAX_BATCH NS_SWIFT_NAME(MAX_BATCH);
@property (readonly, class) jint BATCH_UNIT NS_SWIFT_NAME(BATCH_UNIT);

+ (jint)MAX_BATCH;

+ (jint)BATCH_UNIT;

#pragma mark Public

/*!
 */
- (jint)characteristics;

/*!
 */
- (jlong)estimateSize;

/*!
 @brief  This implementation permits limited parallelism.
 */
- (id<JavaUtilSpliterator_OfDouble>)trySplit;

#pragma mark Protected

/*!
 @brief Creates a spliterator reporting the given estimated size and
  characteristics.
 @param est the estimated size of this spliterator if known, otherwise         
 <code>Long.MAX_VALUE</code> .
 @param additionalCharacteristics properties of this spliterator's         source or elements.  If 
 <code>SIZED</code>  is reported then this         spliterator will additionally report 
 <code>SUBSIZED</code> .
 */
- (instancetype __nonnull)initWithLong:(jlong)est
                               withInt:(jint)additionalCharacteristics;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilSpliterators_AbstractDoubleSpliterator)

inline jint JavaUtilSpliterators_AbstractDoubleSpliterator_get_MAX_BATCH(void);
#define JavaUtilSpliterators_AbstractDoubleSpliterator_MAX_BATCH 33554432
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilSpliterators_AbstractDoubleSpliterator, MAX_BATCH, jint)

inline jint JavaUtilSpliterators_AbstractDoubleSpliterator_get_BATCH_UNIT(void);
#define JavaUtilSpliterators_AbstractDoubleSpliterator_BATCH_UNIT 1024
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilSpliterators_AbstractDoubleSpliterator, BATCH_UNIT, jint)

FOUNDATION_EXPORT void JavaUtilSpliterators_AbstractDoubleSpliterator_initWithLong_withInt_(JavaUtilSpliterators_AbstractDoubleSpliterator *self, jlong est, jint additionalCharacteristics);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilSpliterators_AbstractDoubleSpliterator)

#endif

#if !defined (JavaUtilSpliterators_AbstractDoubleSpliterator_HoldingDoubleConsumer_) && (INCLUDE_ALL_JavaUtilSpliterators || defined(INCLUDE_JavaUtilSpliterators_AbstractDoubleSpliterator_HoldingDoubleConsumer))
#define JavaUtilSpliterators_AbstractDoubleSpliterator_HoldingDoubleConsumer_

#define RESTRICT_JavaUtilFunctionDoubleConsumer 1
#define INCLUDE_JavaUtilFunctionDoubleConsumer 1
#include "java/util/function/DoubleConsumer.h"

@interface JavaUtilSpliterators_AbstractDoubleSpliterator_HoldingDoubleConsumer : NSObject < JavaUtilFunctionDoubleConsumer > {
 @public
  jdouble value_;
}

#pragma mark Public

- (void)acceptWithDouble:(jdouble)value;

#pragma mark Package-Private

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilSpliterators_AbstractDoubleSpliterator_HoldingDoubleConsumer)

FOUNDATION_EXPORT void JavaUtilSpliterators_AbstractDoubleSpliterator_HoldingDoubleConsumer_init(JavaUtilSpliterators_AbstractDoubleSpliterator_HoldingDoubleConsumer *self);

FOUNDATION_EXPORT JavaUtilSpliterators_AbstractDoubleSpliterator_HoldingDoubleConsumer *new_JavaUtilSpliterators_AbstractDoubleSpliterator_HoldingDoubleConsumer_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilSpliterators_AbstractDoubleSpliterator_HoldingDoubleConsumer *create_JavaUtilSpliterators_AbstractDoubleSpliterator_HoldingDoubleConsumer_init(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilSpliterators_AbstractDoubleSpliterator_HoldingDoubleConsumer)

#endif

#if !defined (JavaUtilSpliterators_IteratorSpliterator_) && (INCLUDE_ALL_JavaUtilSpliterators || defined(INCLUDE_JavaUtilSpliterators_IteratorSpliterator))
#define JavaUtilSpliterators_IteratorSpliterator_

#define RESTRICT_JavaUtilSpliterator 1
#define INCLUDE_JavaUtilSpliterator 1
#include "java/util/Spliterator.h"

@protocol JavaUtilCollection;
@protocol JavaUtilComparator;
@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilIterator;

/*!
 @brief A Spliterator using a given Iterator for element
  operations.The spliterator implements <code>trySplit</code> to
  permit limited parallelism.
 */
@interface JavaUtilSpliterators_IteratorSpliterator : NSObject < JavaUtilSpliterator >
@property (readonly, class) jint BATCH_UNIT NS_SWIFT_NAME(BATCH_UNIT);
@property (readonly, class) jint MAX_BATCH NS_SWIFT_NAME(MAX_BATCH);

+ (jint)BATCH_UNIT;

+ (jint)MAX_BATCH;

#pragma mark Public

/*!
 @brief Creates a spliterator using the given given
  collection's {@@link java.util.Collection#iterator()) for traversal,
 and reporting its {@@link java.util.Collection#size()) as its initial
 size.
 @param c the collection
 @param characteristics properties of this spliterator's         source or elements.
 */
- (instancetype __nonnull)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection
                                             withInt:(jint)characteristics;

/*!
 @brief Creates a spliterator using the given iterator
  for traversal, and reporting the given initial size
  and characteristics.
 @param iterator the iterator for the source
 @param characteristics properties of this spliterator's  source or elements.
 */
- (instancetype __nonnull)initWithJavaUtilIterator:(id<JavaUtilIterator>)iterator
                                           withInt:(jint)characteristics;

/*!
 @brief Creates a spliterator using the given iterator
  for traversal, and reporting the given initial size
  and characteristics.
 @param iterator the iterator for the source
 @param size the number of elements in the source
 @param characteristics properties of this spliterator's  source or elements.
 */
- (instancetype __nonnull)initWithJavaUtilIterator:(id<JavaUtilIterator>)iterator
                                          withLong:(jlong)size
                                           withInt:(jint)characteristics;

- (jint)characteristics;

- (jlong)estimateSize;

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

- (id<JavaUtilComparator>)getComparator;

- (jboolean)tryAdvanceWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

- (id<JavaUtilSpliterator>)trySplit;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilSpliterators_IteratorSpliterator)

inline jint JavaUtilSpliterators_IteratorSpliterator_get_BATCH_UNIT(void);
#define JavaUtilSpliterators_IteratorSpliterator_BATCH_UNIT 1024
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilSpliterators_IteratorSpliterator, BATCH_UNIT, jint)

inline jint JavaUtilSpliterators_IteratorSpliterator_get_MAX_BATCH(void);
#define JavaUtilSpliterators_IteratorSpliterator_MAX_BATCH 33554432
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilSpliterators_IteratorSpliterator, MAX_BATCH, jint)

FOUNDATION_EXPORT void JavaUtilSpliterators_IteratorSpliterator_initWithJavaUtilCollection_withInt_(JavaUtilSpliterators_IteratorSpliterator *self, id<JavaUtilCollection> collection, jint characteristics);

FOUNDATION_EXPORT JavaUtilSpliterators_IteratorSpliterator *new_JavaUtilSpliterators_IteratorSpliterator_initWithJavaUtilCollection_withInt_(id<JavaUtilCollection> collection, jint characteristics) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilSpliterators_IteratorSpliterator *create_JavaUtilSpliterators_IteratorSpliterator_initWithJavaUtilCollection_withInt_(id<JavaUtilCollection> collection, jint characteristics);

FOUNDATION_EXPORT void JavaUtilSpliterators_IteratorSpliterator_initWithJavaUtilIterator_withLong_withInt_(JavaUtilSpliterators_IteratorSpliterator *self, id<JavaUtilIterator> iterator, jlong size, jint characteristics);

FOUNDATION_EXPORT JavaUtilSpliterators_IteratorSpliterator *new_JavaUtilSpliterators_IteratorSpliterator_initWithJavaUtilIterator_withLong_withInt_(id<JavaUtilIterator> iterator, jlong size, jint characteristics) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilSpliterators_IteratorSpliterator *create_JavaUtilSpliterators_IteratorSpliterator_initWithJavaUtilIterator_withLong_withInt_(id<JavaUtilIterator> iterator, jlong size, jint characteristics);

FOUNDATION_EXPORT void JavaUtilSpliterators_IteratorSpliterator_initWithJavaUtilIterator_withInt_(JavaUtilSpliterators_IteratorSpliterator *self, id<JavaUtilIterator> iterator, jint characteristics);

FOUNDATION_EXPORT JavaUtilSpliterators_IteratorSpliterator *new_JavaUtilSpliterators_IteratorSpliterator_initWithJavaUtilIterator_withInt_(id<JavaUtilIterator> iterator, jint characteristics) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilSpliterators_IteratorSpliterator *create_JavaUtilSpliterators_IteratorSpliterator_initWithJavaUtilIterator_withInt_(id<JavaUtilIterator> iterator, jint characteristics);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilSpliterators_IteratorSpliterator)

#endif

#if !defined (JavaUtilSpliterators_IntIteratorSpliterator_) && (INCLUDE_ALL_JavaUtilSpliterators || defined(INCLUDE_JavaUtilSpliterators_IntIteratorSpliterator))
#define JavaUtilSpliterators_IntIteratorSpliterator_

#define RESTRICT_JavaUtilSpliterator 1
#define INCLUDE_JavaUtilSpliterator_OfInt 1
#include "java/util/Spliterator.h"

@protocol JavaUtilComparator;
@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilFunctionIntConsumer;
@protocol JavaUtilPrimitiveIterator_OfInt;

/*!
 @brief A Spliterator.OfInt using a given IntStream.IntIterator for element
  operations.The spliterator implements <code>trySplit</code> to
  permit limited parallelism.
 */
@interface JavaUtilSpliterators_IntIteratorSpliterator : NSObject < JavaUtilSpliterator_OfInt >
@property (readonly, class) jint BATCH_UNIT NS_SWIFT_NAME(BATCH_UNIT);
@property (readonly, class) jint MAX_BATCH NS_SWIFT_NAME(MAX_BATCH);

+ (jint)BATCH_UNIT;

+ (jint)MAX_BATCH;

#pragma mark Public

/*!
 @brief Creates a spliterator using the given iterator for a
  source of unknown size, reporting the given
  characteristics.
 @param iterator the iterator for the source
 @param characteristics properties of this spliterator's  source or elements.
 */
- (instancetype __nonnull)initWithJavaUtilPrimitiveIterator_OfInt:(id<JavaUtilPrimitiveIterator_OfInt>)iterator
                                                          withInt:(jint)characteristics;

/*!
 @brief Creates a spliterator using the given iterator
  for traversal, and reporting the given initial size
  and characteristics.
 @param iterator the iterator for the source
 @param size the number of elements in the source
 @param characteristics properties of this spliterator's  source or elements.
 */
- (instancetype __nonnull)initWithJavaUtilPrimitiveIterator_OfInt:(id<JavaUtilPrimitiveIterator_OfInt>)iterator
                                                         withLong:(jlong)size
                                                          withInt:(jint)characteristics;

- (jint)characteristics;

- (jlong)estimateSize;

- (void)forEachRemainingWithId:(id<JavaUtilFunctionIntConsumer>)action;

- (id<JavaUtilComparator>)getComparator;

- (jboolean)tryAdvanceWithId:(id<JavaUtilFunctionIntConsumer>)action;

- (id<JavaUtilSpliterator_OfInt>)trySplit;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilSpliterators_IntIteratorSpliterator)

inline jint JavaUtilSpliterators_IntIteratorSpliterator_get_BATCH_UNIT(void);
#define JavaUtilSpliterators_IntIteratorSpliterator_BATCH_UNIT 1024
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilSpliterators_IntIteratorSpliterator, BATCH_UNIT, jint)

inline jint JavaUtilSpliterators_IntIteratorSpliterator_get_MAX_BATCH(void);
#define JavaUtilSpliterators_IntIteratorSpliterator_MAX_BATCH 33554432
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilSpliterators_IntIteratorSpliterator, MAX_BATCH, jint)

FOUNDATION_EXPORT void JavaUtilSpliterators_IntIteratorSpliterator_initWithJavaUtilPrimitiveIterator_OfInt_withLong_withInt_(JavaUtilSpliterators_IntIteratorSpliterator *self, id<JavaUtilPrimitiveIterator_OfInt> iterator, jlong size, jint characteristics);

FOUNDATION_EXPORT JavaUtilSpliterators_IntIteratorSpliterator *new_JavaUtilSpliterators_IntIteratorSpliterator_initWithJavaUtilPrimitiveIterator_OfInt_withLong_withInt_(id<JavaUtilPrimitiveIterator_OfInt> iterator, jlong size, jint characteristics) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilSpliterators_IntIteratorSpliterator *create_JavaUtilSpliterators_IntIteratorSpliterator_initWithJavaUtilPrimitiveIterator_OfInt_withLong_withInt_(id<JavaUtilPrimitiveIterator_OfInt> iterator, jlong size, jint characteristics);

FOUNDATION_EXPORT void JavaUtilSpliterators_IntIteratorSpliterator_initWithJavaUtilPrimitiveIterator_OfInt_withInt_(JavaUtilSpliterators_IntIteratorSpliterator *self, id<JavaUtilPrimitiveIterator_OfInt> iterator, jint characteristics);

FOUNDATION_EXPORT JavaUtilSpliterators_IntIteratorSpliterator *new_JavaUtilSpliterators_IntIteratorSpliterator_initWithJavaUtilPrimitiveIterator_OfInt_withInt_(id<JavaUtilPrimitiveIterator_OfInt> iterator, jint characteristics) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilSpliterators_IntIteratorSpliterator *create_JavaUtilSpliterators_IntIteratorSpliterator_initWithJavaUtilPrimitiveIterator_OfInt_withInt_(id<JavaUtilPrimitiveIterator_OfInt> iterator, jint characteristics);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilSpliterators_IntIteratorSpliterator)

#endif

#if !defined (JavaUtilSpliterators_LongIteratorSpliterator_) && (INCLUDE_ALL_JavaUtilSpliterators || defined(INCLUDE_JavaUtilSpliterators_LongIteratorSpliterator))
#define JavaUtilSpliterators_LongIteratorSpliterator_

#define RESTRICT_JavaUtilSpliterator 1
#define INCLUDE_JavaUtilSpliterator_OfLong 1
#include "java/util/Spliterator.h"

@protocol JavaUtilComparator;
@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilFunctionLongConsumer;
@protocol JavaUtilPrimitiveIterator_OfLong;

@interface JavaUtilSpliterators_LongIteratorSpliterator : NSObject < JavaUtilSpliterator_OfLong >
@property (readonly, class) jint BATCH_UNIT NS_SWIFT_NAME(BATCH_UNIT);
@property (readonly, class) jint MAX_BATCH NS_SWIFT_NAME(MAX_BATCH);

+ (jint)BATCH_UNIT;

+ (jint)MAX_BATCH;

#pragma mark Public

/*!
 @brief Creates a spliterator using the given iterator for a
  source of unknown size, reporting the given
  characteristics.
 @param iterator the iterator for the source
 @param characteristics properties of this spliterator's  source or elements.
 */
- (instancetype __nonnull)initWithJavaUtilPrimitiveIterator_OfLong:(id<JavaUtilPrimitiveIterator_OfLong>)iterator
                                                           withInt:(jint)characteristics;

/*!
 @brief Creates a spliterator using the given iterator
  for traversal, and reporting the given initial size
  and characteristics.
 @param iterator the iterator for the source
 @param size the number of elements in the source
 @param characteristics properties of this spliterator's  source or elements.
 */
- (instancetype __nonnull)initWithJavaUtilPrimitiveIterator_OfLong:(id<JavaUtilPrimitiveIterator_OfLong>)iterator
                                                          withLong:(jlong)size
                                                           withInt:(jint)characteristics;

- (jint)characteristics;

- (jlong)estimateSize;

- (void)forEachRemainingWithId:(id<JavaUtilFunctionLongConsumer>)action;

- (id<JavaUtilComparator>)getComparator;

- (jboolean)tryAdvanceWithId:(id<JavaUtilFunctionLongConsumer>)action;

- (id<JavaUtilSpliterator_OfLong>)trySplit;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilSpliterators_LongIteratorSpliterator)

inline jint JavaUtilSpliterators_LongIteratorSpliterator_get_BATCH_UNIT(void);
#define JavaUtilSpliterators_LongIteratorSpliterator_BATCH_UNIT 1024
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilSpliterators_LongIteratorSpliterator, BATCH_UNIT, jint)

inline jint JavaUtilSpliterators_LongIteratorSpliterator_get_MAX_BATCH(void);
#define JavaUtilSpliterators_LongIteratorSpliterator_MAX_BATCH 33554432
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilSpliterators_LongIteratorSpliterator, MAX_BATCH, jint)

FOUNDATION_EXPORT void JavaUtilSpliterators_LongIteratorSpliterator_initWithJavaUtilPrimitiveIterator_OfLong_withLong_withInt_(JavaUtilSpliterators_LongIteratorSpliterator *self, id<JavaUtilPrimitiveIterator_OfLong> iterator, jlong size, jint characteristics);

FOUNDATION_EXPORT JavaUtilSpliterators_LongIteratorSpliterator *new_JavaUtilSpliterators_LongIteratorSpliterator_initWithJavaUtilPrimitiveIterator_OfLong_withLong_withInt_(id<JavaUtilPrimitiveIterator_OfLong> iterator, jlong size, jint characteristics) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilSpliterators_LongIteratorSpliterator *create_JavaUtilSpliterators_LongIteratorSpliterator_initWithJavaUtilPrimitiveIterator_OfLong_withLong_withInt_(id<JavaUtilPrimitiveIterator_OfLong> iterator, jlong size, jint characteristics);

FOUNDATION_EXPORT void JavaUtilSpliterators_LongIteratorSpliterator_initWithJavaUtilPrimitiveIterator_OfLong_withInt_(JavaUtilSpliterators_LongIteratorSpliterator *self, id<JavaUtilPrimitiveIterator_OfLong> iterator, jint characteristics);

FOUNDATION_EXPORT JavaUtilSpliterators_LongIteratorSpliterator *new_JavaUtilSpliterators_LongIteratorSpliterator_initWithJavaUtilPrimitiveIterator_OfLong_withInt_(id<JavaUtilPrimitiveIterator_OfLong> iterator, jint characteristics) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilSpliterators_LongIteratorSpliterator *create_JavaUtilSpliterators_LongIteratorSpliterator_initWithJavaUtilPrimitiveIterator_OfLong_withInt_(id<JavaUtilPrimitiveIterator_OfLong> iterator, jint characteristics);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilSpliterators_LongIteratorSpliterator)

#endif

#if !defined (JavaUtilSpliterators_DoubleIteratorSpliterator_) && (INCLUDE_ALL_JavaUtilSpliterators || defined(INCLUDE_JavaUtilSpliterators_DoubleIteratorSpliterator))
#define JavaUtilSpliterators_DoubleIteratorSpliterator_

#define RESTRICT_JavaUtilSpliterator 1
#define INCLUDE_JavaUtilSpliterator_OfDouble 1
#include "java/util/Spliterator.h"

@protocol JavaUtilComparator;
@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilFunctionDoubleConsumer;
@protocol JavaUtilPrimitiveIterator_OfDouble;

@interface JavaUtilSpliterators_DoubleIteratorSpliterator : NSObject < JavaUtilSpliterator_OfDouble >
@property (readonly, class) jint BATCH_UNIT NS_SWIFT_NAME(BATCH_UNIT);
@property (readonly, class) jint MAX_BATCH NS_SWIFT_NAME(MAX_BATCH);

+ (jint)BATCH_UNIT;

+ (jint)MAX_BATCH;

#pragma mark Public

/*!
 @brief Creates a spliterator using the given iterator for a
  source of unknown size, reporting the given
  characteristics.
 @param iterator the iterator for the source
 @param characteristics properties of this spliterator's  source or elements.
 */
- (instancetype __nonnull)initWithJavaUtilPrimitiveIterator_OfDouble:(id<JavaUtilPrimitiveIterator_OfDouble>)iterator
                                                             withInt:(jint)characteristics;

/*!
 @brief Creates a spliterator using the given iterator
  for traversal, and reporting the given initial size
  and characteristics.
 @param iterator the iterator for the source
 @param size the number of elements in the source
 @param characteristics properties of this spliterator's  source or elements.
 */
- (instancetype __nonnull)initWithJavaUtilPrimitiveIterator_OfDouble:(id<JavaUtilPrimitiveIterator_OfDouble>)iterator
                                                            withLong:(jlong)size
                                                             withInt:(jint)characteristics;

- (jint)characteristics;

- (jlong)estimateSize;

- (void)forEachRemainingWithId:(id<JavaUtilFunctionDoubleConsumer>)action;

- (id<JavaUtilComparator>)getComparator;

- (jboolean)tryAdvanceWithId:(id<JavaUtilFunctionDoubleConsumer>)action;

- (id<JavaUtilSpliterator_OfDouble>)trySplit;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilSpliterators_DoubleIteratorSpliterator)

inline jint JavaUtilSpliterators_DoubleIteratorSpliterator_get_BATCH_UNIT(void);
#define JavaUtilSpliterators_DoubleIteratorSpliterator_BATCH_UNIT 1024
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilSpliterators_DoubleIteratorSpliterator, BATCH_UNIT, jint)

inline jint JavaUtilSpliterators_DoubleIteratorSpliterator_get_MAX_BATCH(void);
#define JavaUtilSpliterators_DoubleIteratorSpliterator_MAX_BATCH 33554432
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilSpliterators_DoubleIteratorSpliterator, MAX_BATCH, jint)

FOUNDATION_EXPORT void JavaUtilSpliterators_DoubleIteratorSpliterator_initWithJavaUtilPrimitiveIterator_OfDouble_withLong_withInt_(JavaUtilSpliterators_DoubleIteratorSpliterator *self, id<JavaUtilPrimitiveIterator_OfDouble> iterator, jlong size, jint characteristics);

FOUNDATION_EXPORT JavaUtilSpliterators_DoubleIteratorSpliterator *new_JavaUtilSpliterators_DoubleIteratorSpliterator_initWithJavaUtilPrimitiveIterator_OfDouble_withLong_withInt_(id<JavaUtilPrimitiveIterator_OfDouble> iterator, jlong size, jint characteristics) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilSpliterators_DoubleIteratorSpliterator *create_JavaUtilSpliterators_DoubleIteratorSpliterator_initWithJavaUtilPrimitiveIterator_OfDouble_withLong_withInt_(id<JavaUtilPrimitiveIterator_OfDouble> iterator, jlong size, jint characteristics);

FOUNDATION_EXPORT void JavaUtilSpliterators_DoubleIteratorSpliterator_initWithJavaUtilPrimitiveIterator_OfDouble_withInt_(JavaUtilSpliterators_DoubleIteratorSpliterator *self, id<JavaUtilPrimitiveIterator_OfDouble> iterator, jint characteristics);

FOUNDATION_EXPORT JavaUtilSpliterators_DoubleIteratorSpliterator *new_JavaUtilSpliterators_DoubleIteratorSpliterator_initWithJavaUtilPrimitiveIterator_OfDouble_withInt_(id<JavaUtilPrimitiveIterator_OfDouble> iterator, jint characteristics) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilSpliterators_DoubleIteratorSpliterator *create_JavaUtilSpliterators_DoubleIteratorSpliterator_initWithJavaUtilPrimitiveIterator_OfDouble_withInt_(id<JavaUtilPrimitiveIterator_OfDouble> iterator, jint characteristics);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilSpliterators_DoubleIteratorSpliterator)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilSpliterators")
