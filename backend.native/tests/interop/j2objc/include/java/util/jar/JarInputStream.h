//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/jar/JarInputStream.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilJarJarInputStream")
#ifdef RESTRICT_JavaUtilJarJarInputStream
#define INCLUDE_ALL_JavaUtilJarJarInputStream 0
#else
#define INCLUDE_ALL_JavaUtilJarJarInputStream 1
#endif
#undef RESTRICT_JavaUtilJarJarInputStream

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilJarJarInputStream_) && (INCLUDE_ALL_JavaUtilJarJarInputStream || defined(INCLUDE_JavaUtilJarJarInputStream))
#define JavaUtilJarJarInputStream_

#define RESTRICT_JavaUtilZipZipInputStream 1
#define INCLUDE_JavaUtilZipZipInputStream 1
#include "java/util/zip/ZipInputStream.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaNioCharsetCharset;
@class JavaUtilJarJarEntry;
@class JavaUtilJarManifest;
@class JavaUtilZipZipEntry;

/*!
 @brief The <code>JarInputStream</code> class is used to read the contents of
  a JAR file from any input stream.It extends the class 
 <code>java.util.zip.ZipInputStream</code> with support for reading
  an optional <code>Manifest</code> entry.
 The <code>Manifest</code>
  can be used to store meta-information about the JAR file and its entries.
 @author David Connelly
 - seealso: Manifest
 - seealso: java.util.zip.ZipInputStream
 @since 1.2
 */
@interface JavaUtilJarJarInputStream : JavaUtilZipZipInputStream

#pragma mark Public

/*!
 @brief Creates a new <code>JarInputStream</code> and reads the optional
  manifest.If a manifest is present, also attempts to verify
  the signatures if the JarInputStream is signed.
 @param inArg the actual input stream
 @throw IOExceptionif an I/O error has occurred
 */
- (instancetype __nonnull)initWithJavaIoInputStream:(JavaIoInputStream *)inArg;

/*!
 @brief Creates a new <code>JarInputStream</code> and reads the optional
  manifest.If a manifest is present and verify is true, also attempts
  to verify the signatures if the JarInputStream is signed.
 @param inArg the actual input stream
 @param verify whether or not to verify the JarInputStream if  it is signed.
 @throw IOExceptionif an I/O error has occurred
 */
- (instancetype __nonnull)initWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                        withBoolean:(jboolean)verify;

/*!
 @brief Returns the <code>Manifest</code> for this JAR file, or 
 <code>null</code> if none.
 @return the <code>Manifest</code> for this JAR file, or
          <code>null</code> if none.
 */
- (JavaUtilJarManifest *)getManifest;

/*!
 @brief Reads the next ZIP file entry and positions the stream at the
  beginning of the entry data.If verification has been enabled,
  any invalid signature detected while positioning the stream for
  the next entry will result in an exception.
 @throw ZipExceptionif a ZIP file error has occurred
 @throw IOExceptionif an I/O error has occurred
 @throw SecurityExceptionif any of the jar file entries
          are incorrectly signed.
 */
- (JavaUtilZipZipEntry *)getNextEntry;

/*!
 @brief Reads the next JAR file entry and positions the stream at the
  beginning of the entry data.If verification has been enabled,
  any invalid signature detected while positioning the stream for
  the next entry will result in an exception.
 @return the next JAR file entry, or null if there are no more entries
 @throw ZipExceptionif a ZIP file error has occurred
 @throw IOExceptionif an I/O error has occurred
 @throw SecurityExceptionif any of the jar file entries
          are incorrectly signed.
 */
- (JavaUtilJarJarEntry *)getNextJarEntry;

/*!
 @brief Reads from the current JAR file entry into an array of bytes.
 If <code>len</code> is not zero, the method
  blocks until some input is available; otherwise, no
  bytes are read and <code>0</code> is returned.
  If verification has been enabled, any invalid signature
  on the current entry will be reported at some point before the
  end of the entry is reached.
 @param b the buffer into which the data is read
 @param off the start offset in the destination array  <code> b </code>
 @param len the maximum number of bytes to read
 @return the actual number of bytes read, or -1 if the end of the
          entry is reached
 @throw NullPointerExceptionIf <code>b</code> is <code>null</code>.
 @throw IndexOutOfBoundsExceptionIf <code>off</code> is negative, 
 <code>len</code> is negative, or <code>len</code> is greater than 
 <code>b.length - off</code>
 @throw ZipExceptionif a ZIP file error has occurred
 @throw IOExceptionif an I/O error has occurred
 @throw SecurityExceptionif any of the jar file entries
          are incorrectly signed.
 */
- (jint)readWithByteArray:(IOSByteArray *)b
                  withInt:(jint)off
                  withInt:(jint)len;

#pragma mark Protected

/*!
 @brief Creates a new <code>JarEntry</code> (<code>ZipEntry</code>) for the
  specified JAR file entry name.The manifest attributes of
  the specified JAR file entry name will be copied to the new 
 <CODE>JarEntry</CODE>.
 @param name the name of the JAR/ZIP file entry
 @return the <code>JarEntry</code> object just created
 */
- (JavaUtilZipZipEntry *)createZipEntryWithNSString:(NSString *)name;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaIoInputStream:(JavaIoInputStream *)arg0
                          withJavaNioCharsetCharset:(JavaNioCharsetCharset *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(JavaUtilJarJarInputStream)

FOUNDATION_EXPORT void JavaUtilJarJarInputStream_initWithJavaIoInputStream_(JavaUtilJarJarInputStream *self, JavaIoInputStream *inArg);

FOUNDATION_EXPORT JavaUtilJarJarInputStream *new_JavaUtilJarJarInputStream_initWithJavaIoInputStream_(JavaIoInputStream *inArg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilJarJarInputStream *create_JavaUtilJarJarInputStream_initWithJavaIoInputStream_(JavaIoInputStream *inArg);

FOUNDATION_EXPORT void JavaUtilJarJarInputStream_initWithJavaIoInputStream_withBoolean_(JavaUtilJarJarInputStream *self, JavaIoInputStream *inArg, jboolean verify);

FOUNDATION_EXPORT JavaUtilJarJarInputStream *new_JavaUtilJarJarInputStream_initWithJavaIoInputStream_withBoolean_(JavaIoInputStream *inArg, jboolean verify) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilJarJarInputStream *create_JavaUtilJarJarInputStream_initWithJavaIoInputStream_withBoolean_(JavaIoInputStream *inArg, jboolean verify);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilJarJarInputStream)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilJarJarInputStream")
