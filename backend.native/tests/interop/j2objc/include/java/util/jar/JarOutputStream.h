//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/jar/JarOutputStream.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilJarJarOutputStream")
#ifdef RESTRICT_JavaUtilJarJarOutputStream
#define INCLUDE_ALL_JavaUtilJarJarOutputStream 0
#else
#define INCLUDE_ALL_JavaUtilJarJarOutputStream 1
#endif
#undef RESTRICT_JavaUtilJarJarOutputStream

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilJarJarOutputStream_) && (INCLUDE_ALL_JavaUtilJarJarOutputStream || defined(INCLUDE_JavaUtilJarJarOutputStream))
#define JavaUtilJarJarOutputStream_

#define RESTRICT_JavaUtilZipZipOutputStream 1
#define INCLUDE_JavaUtilZipZipOutputStream 1
#include "java/util/zip/ZipOutputStream.h"

@class JavaIoOutputStream;
@class JavaNioCharsetCharset;
@class JavaUtilJarManifest;
@class JavaUtilZipZipEntry;

/*!
 @brief The <code>JarOutputStream</code> class is used to write the contents
  of a JAR file to any output stream.It extends the class 
 <code>java.util.zip.ZipOutputStream</code> with support
  for writing an optional <code>Manifest</code> entry.
 The 
 <code>Manifest</code> can be used to specify meta-information about
  the JAR file and its entries.
 @author David Connelly
 - seealso: Manifest
 - seealso: java.util.zip.ZipOutputStream
 @since 1.2
 */
@interface JavaUtilJarJarOutputStream : JavaUtilZipZipOutputStream

#pragma mark Public

/*!
 @brief Creates a new <code>JarOutputStream</code> with no manifest.
 @param outArg the actual output stream
 @throw IOExceptionif an I/O error has occurred
 */
- (instancetype __nonnull)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

/*!
 @brief Creates a new <code>JarOutputStream</code> with the specified 
 <code>Manifest</code>.The manifest is written as the first
  entry to the output stream.
 @param outArg the actual output stream
 @param man the optional  <code> Manifest </code>
 @throw IOExceptionif an I/O error has occurred
 */
- (instancetype __nonnull)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                             withJavaUtilJarManifest:(JavaUtilJarManifest *)man;

/*!
 @brief Begins writing a new JAR file entry and positions the stream
  to the start of the entry data.This method will also close
  any previous entry.
 The default compression method will be
  used if no compression method was specified for the entry.
  The current time will be used if the entry has no set modification
  time.
 @param ze the ZIP/JAR entry to be written
 @throw ZipExceptionif a ZIP error has occurred
 @throw IOExceptionif an I/O error has occurred
 */
- (void)putNextEntryWithJavaUtilZipZipEntry:(JavaUtilZipZipEntry *)ze;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaIoOutputStream:(JavaIoOutputStream *)arg0
                           withJavaNioCharsetCharset:(JavaNioCharsetCharset *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilJarJarOutputStream)

FOUNDATION_EXPORT void JavaUtilJarJarOutputStream_initWithJavaIoOutputStream_withJavaUtilJarManifest_(JavaUtilJarJarOutputStream *self, JavaIoOutputStream *outArg, JavaUtilJarManifest *man);

FOUNDATION_EXPORT JavaUtilJarJarOutputStream *new_JavaUtilJarJarOutputStream_initWithJavaIoOutputStream_withJavaUtilJarManifest_(JavaIoOutputStream *outArg, JavaUtilJarManifest *man) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilJarJarOutputStream *create_JavaUtilJarJarOutputStream_initWithJavaIoOutputStream_withJavaUtilJarManifest_(JavaIoOutputStream *outArg, JavaUtilJarManifest *man);

FOUNDATION_EXPORT void JavaUtilJarJarOutputStream_initWithJavaIoOutputStream_(JavaUtilJarJarOutputStream *self, JavaIoOutputStream *outArg);

FOUNDATION_EXPORT JavaUtilJarJarOutputStream *new_JavaUtilJarJarOutputStream_initWithJavaIoOutputStream_(JavaIoOutputStream *outArg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilJarJarOutputStream *create_JavaUtilJarJarOutputStream_initWithJavaIoOutputStream_(JavaIoOutputStream *outArg);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilJarJarOutputStream)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilJarJarOutputStream")
