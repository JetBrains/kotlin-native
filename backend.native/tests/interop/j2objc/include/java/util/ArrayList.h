//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/ArrayList.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilArrayList")
#ifdef RESTRICT_JavaUtilArrayList
#define INCLUDE_ALL_JavaUtilArrayList 0
#else
#define INCLUDE_ALL_JavaUtilArrayList 1
#endif
#undef RESTRICT_JavaUtilArrayList

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilArrayList_) && (INCLUDE_ALL_JavaUtilArrayList || defined(INCLUDE_JavaUtilArrayList))
#define JavaUtilArrayList_

#define RESTRICT_JavaUtilAbstractList 1
#define INCLUDE_JavaUtilAbstractList 1
#include "java/util/AbstractList.h"

#define RESTRICT_JavaUtilList 1
#define INCLUDE_JavaUtilList 1
#include "java/util/List.h"

#define RESTRICT_JavaUtilRandomAccess 1
#define INCLUDE_JavaUtilRandomAccess 1
#include "java/util/RandomAccess.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class IOSObjectArray;
@protocol JavaUtilCollection;
@protocol JavaUtilComparator;
@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilFunctionPredicate;
@protocol JavaUtilFunctionUnaryOperator;
@protocol JavaUtilIterator;
@protocol JavaUtilListIterator;
@protocol JavaUtilSpliterator;

/*!
 @brief Resizable-array implementation of the <tt>List</tt> interface.Implements
  all optional list operations, and permits all elements, including 
 <tt>null</tt>.
 In addition to implementing the <tt>List</tt> interface,
  this class provides methods to manipulate the size of the array that is
  used internally to store the list.  (This class is roughly equivalent to 
 <tt>Vector</tt>, except that it is unsynchronized.) 
 <p>The <tt>size</tt>, <tt>isEmpty</tt>, <tt>get</tt>, <tt>set</tt>,
  <tt>iterator</tt>, and <tt>listIterator</tt> operations run in constant
  time.  The <tt>add</tt> operation runs in <i>amortized constant time</i>,
  that is, adding n elements requires O(n) time.  All of the other operations
  run in linear time (roughly speaking).  The constant factor is low compared
  to that for the <tt>LinkedList</tt> implementation. 
 <p>Each <tt>ArrayList</tt> instance has a <i>capacity</i>.  The capacity is
  the size of the array used to store the elements in the list.  It is always
  at least as large as the list size.  As elements are added to an ArrayList,
  its capacity grows automatically.  The details of the growth policy are not
  specified beyond the fact that adding an element has constant amortized
  time cost. 
 <p>An application can increase the capacity of an <tt>ArrayList</tt> instance
  before adding a large number of elements using the <tt>ensureCapacity</tt>
  operation.  This may reduce the amount of incremental reallocation. 
 <p><strong>Note that this implementation is not synchronized.</strong>
  If multiple threads access an <tt>ArrayList</tt> instance concurrently,
  and at least one of the threads modifies the list structurally, it 
 <i>must</i> be synchronized externally.  (A structural modification is
  any operation that adds or deletes one or more elements, or explicitly
  resizes the backing array; merely setting the value of an element is not
  a structural modification.)  This is typically accomplished by
  synchronizing on some object that naturally encapsulates the list.
  If no such object exists, the list should be "wrapped" using the 
 <code>Collections.synchronizedList</code>
  method.  This is best done at creation time, to prevent accidental
  unsynchronized access to the list:@code

    List list = Collections.synchronizedList(new ArrayList(...));
@endcode
  
 <p><a name="fail-fast">
  The iterators returned by this class's <code>iterator</code> and 
 <code>listIterator</code> methods are <em>fail-fast</em>:</a>
  if the list is structurally modified at any time after the iterator is
  created, in any way except through the iterator's own 
 <code>remove</code> or 
 <code>add</code> methods, the iterator will throw a 
 <code>ConcurrentModificationException</code>.  Thus, in the face of
  concurrent modification, the iterator fails quickly and cleanly, rather
  than risking arbitrary, non-deterministic behavior at an undetermined
  time in the future. 
 <p>Note that the fail-fast behavior of an iterator cannot be guaranteed
  as it is, generally speaking, impossible to make any hard guarantees in the
  presence of unsynchronized concurrent modification.  Fail-fast iterators
  throw <code>ConcurrentModificationException</code> on a best-effort basis.
  Therefore, it would be wrong to write a program that depended on this
  exception for its correctness:  <i>the fail-fast behavior of iterators
  should be used only to detect bugs.</i>
  
 <p>This class is a member of the 
 <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/collections/index.html">
  Java Collections Framework</a>.
 @author Josh Bloch
 @author Neal Gafter
 - seealso: Collection
 - seealso: List
 - seealso: LinkedList
 - seealso: Vector
 @since 1.2
 */
@interface JavaUtilArrayList : JavaUtilAbstractList < JavaUtilList, JavaUtilRandomAccess, NSCopying, JavaIoSerializable > {
 @public
  /*!
   @brief The array buffer into which the elements of the ArrayList are stored.
   The capacity of the ArrayList is the length of this array buffer. Any
  empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA
  will be expanded to DEFAULT_CAPACITY when the first element is added.
   */
  IOSObjectArray *elementData_;
}

#pragma mark Public

/*!
 @brief Constructs an empty list with an initial capacity of ten.
 */
- (instancetype __nonnull)init;

/*!
 @brief Constructs a list containing the elements of the specified
  collection, in the order they are returned by the collection's
  iterator.
 @param c the collection whose elements are to be placed into this list
 @throw NullPointerExceptionif the specified collection is null
 */
- (instancetype __nonnull)initWithJavaUtilCollection:(id<JavaUtilCollection>)c;

/*!
 @brief Constructs an empty list with the specified initial capacity.
 @param initialCapacity the initial capacity of the list
 @throw IllegalArgumentExceptionif the specified initial capacity
          is negative
 */
- (instancetype __nonnull)initWithInt:(jint)initialCapacity;

/*!
 @brief Appends the specified element to the end of this list.
 @param e element to be appended to this list
 @return <tt>true</tt> (as specified by <code>Collection.add</code>)
 */
- (jboolean)addWithId:(id)e;

/*!
 @brief Inserts the specified element at the specified position in this
  list.Shifts the element currently at that position (if any) and
  any subsequent elements to the right (adds one to their indices).
 @param index index at which the specified element is to be inserted
 @param element element to be inserted
 @throw IndexOutOfBoundsException
 */
- (void)addWithInt:(jint)index
            withId:(id)element;

/*!
 @brief Appends all of the elements in the specified collection to the end of
  this list, in the order that they are returned by the
  specified collection's Iterator.The behavior of this operation is
  undefined if the specified collection is modified while the operation
  is in progress.
 (This implies that the behavior of this call is
  undefined if the specified collection is this list, and this
  list is nonempty.)
 @param c collection containing elements to be added to this list
 @return <tt>true</tt> if this list changed as a result of the call
 @throw NullPointerExceptionif the specified collection is null
 */
- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)c;

/*!
 @brief Inserts all of the elements in the specified collection into this
  list, starting at the specified position.Shifts the element
  currently at that position (if any) and any subsequent elements to
  the right (increases their indices).
 The new elements will appear
  in the list in the order that they are returned by the
  specified collection's iterator.
 @param index index at which to insert the first element from the               specified collection
 @param c collection containing elements to be added to this list
 @return <tt>true</tt> if this list changed as a result of the call
 @throw IndexOutOfBoundsException
 @throw NullPointerExceptionif the specified collection is null
 */
- (jboolean)addAllWithInt:(jint)index
   withJavaUtilCollection:(id<JavaUtilCollection>)c;

/*!
 @brief Removes all of the elements from this list.The list will
  be empty after this call returns.
 */
- (void)clear;

/*!
 @brief Returns a shallow copy of this <tt>ArrayList</tt> instance.
 (The
  elements themselves are not copied.)
 @return a clone of this <tt>ArrayList</tt> instance
 */
- (id __nonnull)java_clone;

/*!
 @brief Returns <tt>true</tt> if this list contains the specified element.
 More formally, returns <tt>true</tt> if and only if this list contains
  at least one element <tt>e</tt> such that 
 <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.
 @param o element whose presence in this list is to be tested
 @return <tt>true</tt> if this list contains the specified element
 */
- (jboolean)containsWithId:(id)o;

/*!
 @brief Increases the capacity of this <tt>ArrayList</tt> instance, if
  necessary, to ensure that it can hold at least the number of elements
  specified by the minimum capacity argument.
 @param minCapacity the desired minimum capacity
 */
- (void)ensureCapacityWithInt:(jint)minCapacity;

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

/*!
 @brief Returns the element at the specified position in this list.
 @param index index of the element to return
 @return the element at the specified position in this list
 @throw IndexOutOfBoundsException
 */
- (id)getWithInt:(jint)index;

/*!
 @brief Returns the index of the first occurrence of the specified element
  in this list, or -1 if this list does not contain the element.
 More formally, returns the lowest index <tt>i</tt> such that 
 <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>,
  or -1 if there is no such index.
 */
- (jint)indexOfWithId:(id)o;

/*!
 @brief Returns <tt>true</tt> if this list contains no elements.
 @return <tt>true</tt> if this list contains no elements
 */
- (jboolean)isEmpty;

/*!
 @brief Returns an iterator over the elements in this list in proper sequence.
 <p>The returned iterator is <a href="#fail-fast"><i>fail-fast</i></a>.
 @return an iterator over the elements in this list in proper sequence
 */
- (id<JavaUtilIterator> __nonnull)iterator;

/*!
 @brief Returns the index of the last occurrence of the specified element
  in this list, or -1 if this list does not contain the element.
 More formally, returns the highest index <tt>i</tt> such that 
 <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>,
  or -1 if there is no such index.
 */
- (jint)lastIndexOfWithId:(id)o;

/*!
 @brief Returns a list iterator over the elements in this list (in proper
  sequence).
 <p>The returned list iterator is <a href="#fail-fast"><i>fail-fast</i></a>.
 - seealso: #listIterator(int)
 */
- (id<JavaUtilListIterator> __nonnull)listIterator;

/*!
 @brief Returns a list iterator over the elements in this list (in proper
  sequence), starting at the specified position in the list.
 The specified index indicates the first element that would be
  returned by an initial call to <code>next</code>.
  An initial call to <code>previous</code> would
  return the element with the specified index minus one. 
 <p>The returned list iterator is <a href="#fail-fast"><i>fail-fast</i></a>.
 @throw IndexOutOfBoundsException
 */
- (id<JavaUtilListIterator> __nonnull)listIteratorWithInt:(jint)index;

/*!
 @brief Removes the element at the specified position in this list.
 Shifts any subsequent elements to the left (subtracts one from their
  indices).
 @param index the index of the element to be removed
 @return the element that was removed from the list
 @throw IndexOutOfBoundsException
 */
- (id)removeWithInt:(jint)index;

/*!
 @brief Removes the first occurrence of the specified element from this list,
  if it is present.If the list does not contain the element, it is
  unchanged.
 More formally, removes the element with the lowest index 
 <tt>i</tt> such that 
 <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>
  (if such an element exists).  Returns <tt>true</tt> if this list
  contained the specified element (or equivalently, if this list
  changed as a result of the call).
 @param o element to be removed from this list, if present
 @return <tt>true</tt> if this list contained the specified element
 */
- (jboolean)removeWithId:(id)o;

/*!
 @brief Removes from this list all of its elements that are contained in the
  specified collection.
 @param c collection containing elements to be removed from this list
 @return <code>true</code> if this list changed as a result of the call
 @throw ClassCastExceptionif the class of an element of this list
          is incompatible with the specified collection
  (<a href="Collection.html#optional-restrictions">optional</a>)
 @throw NullPointerExceptionif this list contains a null element and the
          specified collection does not permit null elements
  (<a href="Collection.html#optional-restrictions">optional</a>),
          or if the specified collection is null
 - seealso: Collection#contains(Object)
 */
- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)c;

- (jboolean)removeIfWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)filter;

- (void)replaceAllWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)operator_;

/*!
 @brief Retains only the elements in this list that are contained in the
  specified collection.In other words, removes from this list all
  of its elements that are not contained in the specified collection.
 @param c collection containing elements to be retained in this list
 @return <code>true</code> if this list changed as a result of the call
 @throw ClassCastExceptionif the class of an element of this list
          is incompatible with the specified collection
  (<a href="Collection.html#optional-restrictions">optional</a>)
 @throw NullPointerExceptionif this list contains a null element and the
          specified collection does not permit null elements
  (<a href="Collection.html#optional-restrictions">optional</a>),
          or if the specified collection is null
 - seealso: Collection#contains(Object)
 */
- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)c;

/*!
 @brief Replaces the element at the specified position in this list with
  the specified element.
 @param index index of the element to replace
 @param element element to be stored at the specified position
 @return the element previously at the specified position
 @throw IndexOutOfBoundsException
 */
- (id)setWithInt:(jint)index
          withId:(id)element;

/*!
 @brief Returns the number of elements in this list.
 @return the number of elements in this list
 */
- (jint)size;

- (void)sortWithJavaUtilComparator:(id<JavaUtilComparator>)c;

/*!
 @brief Creates a <em><a href="Spliterator.html#binding">late-binding</a></em>
  and <em>fail-fast</em> <code>Spliterator</code> over the elements in this
  list.
 <p>The <code>Spliterator</code> reports <code>Spliterator.SIZED</code>,
  <code>Spliterator.SUBSIZED</code>, and <code>Spliterator.ORDERED</code>.
  Overriding implementations should document the reporting of additional
  characteristic values.
 @return a <code>Spliterator</code> over the elements in this list
 @since 1.8
 */
- (id<JavaUtilSpliterator> __nonnull)spliterator;

/*!
 @brief Returns a view of the portion of this list between the specified 
 <code>fromIndex</code>, inclusive, and <code>toIndex</code>, exclusive.
 (If
  <code>fromIndex</code> and <code>toIndex</code> are equal, the returned list is
  empty.)  The returned list is backed by this list, so non-structural
  changes in the returned list are reflected in this list, and vice-versa.
  The returned list supports all of the optional list operations. 
 <p>This method eliminates the need for explicit range operations (of
  the sort that commonly exist for arrays).  Any operation that expects
  a list can be used as a range operation by passing a subList view
  instead of a whole list.  For example, the following idiom
  removes a range of elements from a list: 
 @code

       list.subList(from, to).clear(); 
  
@endcode
  Similar idioms may be constructed for <code>indexOf(Object)</code> and 
 <code>lastIndexOf(Object)</code>, and all of the algorithms in the 
 <code>Collections</code> class can be applied to a subList. 
 <p>The semantics of the list returned by this method become undefined if
  the backing list (i.e., this list) is <i>structurally modified</i> in
  any way other than via the returned list.  (Structural modifications are
  those that change the size of this list, or otherwise perturb it in such
  a fashion that iterations in progress may yield incorrect results.)
 @throw IndexOutOfBoundsException
 @throw IllegalArgumentException
 */
- (id<JavaUtilList> __nonnull)subListWithInt:(jint)fromIndex
                                     withInt:(jint)toIndex;

/*!
 @brief Returns an array containing all of the elements in this list
  in proper sequence (from first to last element).
 <p>The returned array will be "safe" in that no references to it are
  maintained by this list.  (In other words, this method must allocate
  a new array).  The caller is thus free to modify the returned array. 
 <p>This method acts as bridge between array-based and collection-based
  APIs.
 @return an array containing all of the elements in this list in
          proper sequence
 */
- (IOSObjectArray * __nonnull)toArray;

/*!
 @brief Returns an array containing all of the elements in this list in proper
  sequence (from first to last element); the runtime type of the returned
  array is that of the specified array.If the list fits in the
  specified array, it is returned therein.
 Otherwise, a new array is
  allocated with the runtime type of the specified array and the size of
  this list. 
 <p>If the list fits in the specified array with room to spare
  (i.e., the array has more elements than the list), the element in
  the array immediately following the end of the collection is set to 
 <tt>null</tt>.  (This is useful in determining the length of the
  list <i>only</i> if the caller knows that the list does not contain
  any null elements.)
 @param a the array into which the elements of the list are to           be stored, if it is big enough; otherwise, a new array of the
            same runtime type is allocated for this purpose.
 @return an array containing the elements of the list
 @throw ArrayStoreExceptionif the runtime type of the specified array
          is not a supertype of the runtime type of every element in
          this list
 @throw NullPointerExceptionif the specified array is null
 */
- (IOSObjectArray * __nonnull)toArrayWithNSObjectArray:(IOSObjectArray *)a;

/*!
 @brief Trims the capacity of this <tt>ArrayList</tt> instance to be the
  list's current size.An application can use this operation to minimize
  the storage of an <tt>ArrayList</tt> instance.
 */
- (void)trimToSize;

#pragma mark Protected

/*!
 @brief Removes from this list all of the elements whose index is between 
 <code>fromIndex</code>, inclusive, and <code>toIndex</code>, exclusive.
 Shifts any succeeding elements to the left (reduces their index).
  This call shortens the list by <code>(toIndex - fromIndex)</code> elements.
  (If <code>toIndex==fromIndex</code>, this operation has no effect.)
 @throw IndexOutOfBoundsExceptionif <code>fromIndex</code> or
          <code>toIndex</code> is out of range
          (<code>fromIndex < 0 ||
           fromIndex >= size() ||
           toIndex > size() ||
           toIndex < fromIndex</code>
 )
 */
- (void)removeRangeWithInt:(jint)fromIndex
                   withInt:(jint)toIndex;

#pragma mark Package-Private

+ (void)subListRangeCheckWithInt:(jint)fromIndex
                         withInt:(jint)toIndex
                         withInt:(jint)size;

@end

J2OBJC_STATIC_INIT(JavaUtilArrayList)

J2OBJC_FIELD_SETTER(JavaUtilArrayList, elementData_, IOSObjectArray *)

FOUNDATION_EXPORT void JavaUtilArrayList_initWithInt_(JavaUtilArrayList *self, jint initialCapacity);

FOUNDATION_EXPORT JavaUtilArrayList *new_JavaUtilArrayList_initWithInt_(jint initialCapacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilArrayList *create_JavaUtilArrayList_initWithInt_(jint initialCapacity);

FOUNDATION_EXPORT void JavaUtilArrayList_init(JavaUtilArrayList *self);

FOUNDATION_EXPORT JavaUtilArrayList *new_JavaUtilArrayList_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilArrayList *create_JavaUtilArrayList_init(void);

FOUNDATION_EXPORT void JavaUtilArrayList_initWithJavaUtilCollection_(JavaUtilArrayList *self, id<JavaUtilCollection> c);

FOUNDATION_EXPORT JavaUtilArrayList *new_JavaUtilArrayList_initWithJavaUtilCollection_(id<JavaUtilCollection> c) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilArrayList *create_JavaUtilArrayList_initWithJavaUtilCollection_(id<JavaUtilCollection> c);

FOUNDATION_EXPORT void JavaUtilArrayList_subListRangeCheckWithInt_withInt_withInt_(jint fromIndex, jint toIndex, jint size);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilArrayList)

#endif

#if !defined (JavaUtilArrayList_ArrayListSpliterator_) && (INCLUDE_ALL_JavaUtilArrayList || defined(INCLUDE_JavaUtilArrayList_ArrayListSpliterator))
#define JavaUtilArrayList_ArrayListSpliterator_

#define RESTRICT_JavaUtilSpliterator 1
#define INCLUDE_JavaUtilSpliterator 1
#include "java/util/Spliterator.h"

@class JavaUtilArrayList;
@protocol JavaUtilComparator;
@protocol JavaUtilFunctionConsumer;

/*!
 @brief Index-based split-by-two, lazily initialized Spliterator
 */
@interface JavaUtilArrayList_ArrayListSpliterator : NSObject < JavaUtilSpliterator >

#pragma mark Public

- (jint)characteristics;

- (jlong)estimateSize;

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

- (jboolean)tryAdvanceWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

- (JavaUtilArrayList_ArrayListSpliterator *)trySplit;

#pragma mark Package-Private

/*!
 @brief Create new spliterator covering the given  range
 */
- (instancetype __nonnull)initWithJavaUtilArrayList:(JavaUtilArrayList *)list
                                            withInt:(jint)origin
                                            withInt:(jint)fence
                                            withInt:(jint)expectedModCount;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilArrayList_ArrayListSpliterator)

FOUNDATION_EXPORT void JavaUtilArrayList_ArrayListSpliterator_initWithJavaUtilArrayList_withInt_withInt_withInt_(JavaUtilArrayList_ArrayListSpliterator *self, JavaUtilArrayList *list, jint origin, jint fence, jint expectedModCount);

FOUNDATION_EXPORT JavaUtilArrayList_ArrayListSpliterator *new_JavaUtilArrayList_ArrayListSpliterator_initWithJavaUtilArrayList_withInt_withInt_withInt_(JavaUtilArrayList *list, jint origin, jint fence, jint expectedModCount) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilArrayList_ArrayListSpliterator *create_JavaUtilArrayList_ArrayListSpliterator_initWithJavaUtilArrayList_withInt_withInt_withInt_(JavaUtilArrayList *list, jint origin, jint fence, jint expectedModCount);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilArrayList_ArrayListSpliterator)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilArrayList")
