//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/ListIterator.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilListIterator")
#ifdef RESTRICT_JavaUtilListIterator
#define INCLUDE_ALL_JavaUtilListIterator 0
#else
#define INCLUDE_ALL_JavaUtilListIterator 1
#endif
#undef RESTRICT_JavaUtilListIterator

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilListIterator_) && (INCLUDE_ALL_JavaUtilListIterator || defined(INCLUDE_JavaUtilListIterator))
#define JavaUtilListIterator_

#define RESTRICT_JavaUtilIterator 1
#define INCLUDE_JavaUtilIterator 1
#include "java/util/Iterator.h"

/*!
 @brief An iterator for lists that allows the programmer
  to traverse the list in either direction, modify
  the list during iteration, and obtain the iterator's
  current position in the list.A <code>ListIterator</code>
  has no current element; its <I>cursor position</I> always
  lies between the element that would be returned by a call
  to <code>previous()</code> and the element that would be
  returned by a call to <code>next()</code>.
 An iterator for a list of length <code>n</code> has <code>n+1</code> possible
  cursor positions, as illustrated by the carets (<code>^</code>) below: 
 @code

                       Element(0)   Element(1)   Element(2)   ... Element(n-1)
  cursor positions:  ^            ^            ^            ^                  ^ 
  
@endcode
  Note that the <code>remove</code> and <code>set(Object)</code> methods are 
 <i>not</i> defined in terms of the cursor position;  they are defined to
  operate on the last element returned by a call to <code>next</code> or 
 <code>previous()</code>.
  
 <p>This interface is a member of the 
 <a href="{@@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/collections/index.html">
  Java Collections Framework</a>.
 @author Josh Bloch
 - seealso: Collection
 - seealso: List
 - seealso: Iterator
 - seealso: Enumeration
 - seealso: List#listIterator()
 @since 1.2
 */
@protocol JavaUtilListIterator < JavaUtilIterator, JavaObject >

/*!
 @brief Returns <code>true</code> if this list iterator has more elements when
  traversing the list in the forward direction.
 (In other words,
  returns <code>true</code> if <code>next</code> would return an element rather
  than throwing an exception.)
 @return <code>true</code> if the list iterator has more elements when
          traversing the list in the forward direction
 */
- (jboolean)hasNext;

/*!
 @brief Returns the next element in the list and advances the cursor position.
 This method may be called repeatedly to iterate through the list,
  or intermixed with calls to <code>previous</code> to go back and forth.
  (Note that alternating calls to <code>next</code> and <code>previous</code>
  will return the same element repeatedly.)
 @return the next element in the list
 @throw NoSuchElementExceptionif the iteration has no next element
 */
- (id)next;

/*!
 @brief Returns <code>true</code> if this list iterator has more elements when
  traversing the list in the reverse direction.
 (In other words,
  returns <code>true</code> if <code>previous</code> would return an element
  rather than throwing an exception.)
 @return <code>true</code> if the list iterator has more elements when
          traversing the list in the reverse direction
 */
- (jboolean)hasPrevious;

/*!
 @brief Returns the previous element in the list and moves the cursor
  position backwards.This method may be called repeatedly to
  iterate through the list backwards, or intermixed with calls to 
 <code>next</code> to go back and forth.
 (Note that alternating calls to 
 <code>next</code> and <code>previous</code> will return the same
  element repeatedly.)
 @return the previous element in the list
 @throw NoSuchElementExceptionif the iteration has no previous
          element
 */
- (id)previous;

/*!
 @brief Returns the index of the element that would be returned by a
  subsequent call to <code>next</code>.
 (Returns list size if the list
  iterator is at the end of the list.)
 @return the index of the element that would be returned by a
          subsequent call to <code>next</code>, or list size if the list
          iterator is at the end of the list
 */
- (jint)nextIndex;

/*!
 @brief Returns the index of the element that would be returned by a
  subsequent call to <code>previous</code>.
 (Returns -1 if the list
  iterator is at the beginning of the list.)
 @return the index of the element that would be returned by a
          subsequent call to <code>previous</code>, or -1 if the list
          iterator is at the beginning of the list
 */
- (jint)previousIndex;

/*!
 @brief Removes from the list the last element that was returned by <code>next</code>
  or <code>previous</code> (optional operation).This call can
  only be made once per call to <code>next</code> or <code>previous</code>.
 It can be made only if <code>add</code> has not been
  called after the last call to <code>next</code> or <code>previous</code>.
 @throw UnsupportedOperationExceptionif the <code>remove</code>
          operation is not supported by this list iterator
 @throw IllegalStateExceptionif neither <code>next</code> nor
          <code>previous</code> have been called, or <code>remove</code> or
          <code>add</code> have been called after the last call to
          <code>next</code> or <code>previous</code>
 */
- (void)remove;

/*!
 @brief Replaces the last element returned by <code>next</code> or 
 <code>previous</code> with the specified element (optional operation).
 This call can be made only if neither <code>remove</code> nor <code>add</code>
  have been called after the last call to <code>next</code> or 
 <code>previous</code>.
 @param e the element with which to replace the last element returned by           
 <code>next</code>  or <code>previous</code>
 @throw UnsupportedOperationExceptionif the <code>set</code> operation
          is not supported by this list iterator
 @throw ClassCastExceptionif the class of the specified element
          prevents it from being added to this list
 @throw IllegalArgumentExceptionif some aspect of the specified
          element prevents it from being added to this list
 @throw IllegalStateExceptionif neither <code>next</code> nor
          <code>previous</code> have been called, or <code>remove</code> or
          <code>add</code> have been called after the last call to
          <code>next</code> or <code>previous</code>
 */
- (void)setWithId:(id)e;

/*!
 @brief Inserts the specified element into the list (optional operation).
 The element is inserted immediately before the element that
  would be returned by <code>next</code>, if any, and after the element
  that would be returned by <code>previous</code>, if any.  (If the
  list contains no elements, the new element becomes the sole element
  on the list.)  The new element is inserted before the implicit
  cursor: a subsequent call to <code>next</code> would be unaffected, and a
  subsequent call to <code>previous</code> would return the new element.
  (This call increases by one the value that would be returned by a
  call to <code>nextIndex</code> or <code>previousIndex</code>.)
 @param e the element to insert
 @throw UnsupportedOperationExceptionif the <code>add</code> method is
          not supported by this list iterator
 @throw ClassCastExceptionif the class of the specified element
          prevents it from being added to this list
 @throw IllegalArgumentExceptionif some aspect of this element
          prevents it from being added to this list
 */
- (void)addWithId:(id)e;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilListIterator)

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilListIterator)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilListIterator")
