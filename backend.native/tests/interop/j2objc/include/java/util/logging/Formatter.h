//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/logging/Formatter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilLoggingFormatter")
#ifdef RESTRICT_JavaUtilLoggingFormatter
#define INCLUDE_ALL_JavaUtilLoggingFormatter 0
#else
#define INCLUDE_ALL_JavaUtilLoggingFormatter 1
#endif
#undef RESTRICT_JavaUtilLoggingFormatter

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilLoggingFormatter_) && (INCLUDE_ALL_JavaUtilLoggingFormatter || defined(INCLUDE_JavaUtilLoggingFormatter))
#define JavaUtilLoggingFormatter_

@class JavaUtilLoggingHandler;
@class JavaUtilLoggingLogRecord;

/*!
 @brief A Formatter provides support for formatting LogRecords.
 <p>
  Typically each logging Handler will have a Formatter associated
  with it.  The Formatter takes a LogRecord and converts it to
  a string. 
 <p>
  Some formatters (such as the XMLFormatter) need to wrap head
  and tail strings around a set of formatted records. The getHeader
  and getTail methods can be used to obtain these strings.
 @since 1.4
 */
@interface JavaUtilLoggingFormatter : NSObject

#pragma mark Public

/*!
 @brief Format the given log record and return the formatted string.
 <p>
  The resulting formatted String will normally include a
  localized and formatted version of the LogRecord's message field.
  It is recommended to use the <code>Formatter.formatMessage</code>
  convenience method to localize and format the message field.
 @param record the log record to be formatted.
 @return the formatted log record
 */
- (NSString *)formatWithJavaUtilLoggingLogRecord:(JavaUtilLoggingLogRecord *)record;

/*!
 @brief Localize and format the message string from a log record.This
  method is provided as a convenience for Formatter subclasses to
  use when they are performing formatting.
 <p>
  The message string is first localized to a format string using
  the record's ResourceBundle.  (If there is no ResourceBundle,
  or if the message key is not found, then the key is used as the
  format string.)  The format String uses java.text style
  formatting. 
 <ul>
  <li>If there are no parameters, no formatter is used. 
 <li>Otherwise, if the string contains "{0" then
      java.text.MessageFormat  is used to format the string. 
 <li>Otherwise no formatting is performed. 
 </ul>
  <p>
 @param record the log record containing the raw message
 @return a localized and formatted message
 */
- (NSString *)formatMessageWithJavaUtilLoggingLogRecord:(JavaUtilLoggingLogRecord *)record;

/*!
 @brief Return the header string for a set of formatted records.
 <p>
  This base class returns an empty string, but this may be
  overridden by subclasses.
 @param h The target handler (can be null)
 @return header string
 */
- (NSString *)getHeadWithJavaUtilLoggingHandler:(JavaUtilLoggingHandler *)h;

/*!
 @brief Return the tail string for a set of formatted records.
 <p>
  This base class returns an empty string, but this may be
  overridden by subclasses.
 @param h The target handler (can be null)
 @return tail string
 */
- (NSString *)getTailWithJavaUtilLoggingHandler:(JavaUtilLoggingHandler *)h;

#pragma mark Protected

/*!
 @brief Construct a new formatter.
 */
- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilLoggingFormatter)

FOUNDATION_EXPORT void JavaUtilLoggingFormatter_init(JavaUtilLoggingFormatter *self);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilLoggingFormatter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilLoggingFormatter")
