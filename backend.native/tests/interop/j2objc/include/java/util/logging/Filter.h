//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/logging/Filter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilLoggingFilter")
#ifdef RESTRICT_JavaUtilLoggingFilter
#define INCLUDE_ALL_JavaUtilLoggingFilter 0
#else
#define INCLUDE_ALL_JavaUtilLoggingFilter 1
#endif
#undef RESTRICT_JavaUtilLoggingFilter

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilLoggingFilter_) && (INCLUDE_ALL_JavaUtilLoggingFilter || defined(INCLUDE_JavaUtilLoggingFilter))
#define JavaUtilLoggingFilter_

@class JavaUtilLoggingLogRecord;

/*!
 @brief A Filter can be used to provide fine grain control over
  what is logged, beyond the control provided by log levels.
 <p>
  Each Logger and each Handler can have a filter associated with it.
  The Logger or Handler will call the isLoggable method to check
  if a given LogRecord should be published.  If isLoggable returns
  false, the LogRecord will be discarded.
 @since 1.4
 */
@protocol JavaUtilLoggingFilter < JavaObject >

/*!
 @brief Check if a given log record should be published.
 @param record a LogRecord
 @return true if the log record should be published.
 */
- (jboolean)isLoggableWithJavaUtilLoggingLogRecord:(JavaUtilLoggingLogRecord *)record;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilLoggingFilter)

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilLoggingFilter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilLoggingFilter")
