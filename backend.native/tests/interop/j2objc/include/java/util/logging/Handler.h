//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/logging/Handler.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilLoggingHandler")
#ifdef RESTRICT_JavaUtilLoggingHandler
#define INCLUDE_ALL_JavaUtilLoggingHandler 0
#else
#define INCLUDE_ALL_JavaUtilLoggingHandler 1
#endif
#undef RESTRICT_JavaUtilLoggingHandler

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilLoggingHandler_) && (INCLUDE_ALL_JavaUtilLoggingHandler || defined(INCLUDE_JavaUtilLoggingHandler))
#define JavaUtilLoggingHandler_

@class JavaLangException;
@class JavaUtilLoggingErrorManager;
@class JavaUtilLoggingFormatter;
@class JavaUtilLoggingLevel;
@class JavaUtilLoggingLogRecord;
@protocol JavaUtilLoggingFilter;

/*!
 @brief A <tt>Handler</tt> object takes log messages from a <tt>Logger</tt> and
  exports them.It might for example, write them to a console
  or write them to a file, or send them to a network logging service,
  or forward them to an OS log, or whatever.
 <p>
  A <tt>Handler</tt> can be disabled by doing a <tt>setLevel(Level.OFF)</tt>
  and can  be re-enabled by doing a <tt>setLevel</tt> with an appropriate level. 
 <p>
  <tt>Handler</tt> classes typically use <tt>LogManager</tt> properties to set
  default values for the <tt>Handler</tt>'s <tt>Filter</tt>, <tt>Formatter</tt>,
  and <tt>Level</tt>.  See the specific documentation for each concrete 
 <tt>Handler</tt> class.
 @since 1.4
 */
@interface JavaUtilLoggingHandler : NSObject {
 @public
  jboolean sealed_;
}

#pragma mark Public

/*!
 @brief Close the <tt>Handler</tt> and free all associated resources.
 <p>
  The close method will perform a <tt>flush</tt> and then close the 
 <tt>Handler</tt>.   After close has been called this <tt>Handler</tt>
  should no longer be used.  Method calls may either be silently
  ignored or may throw runtime exceptions.
 @throw SecurityExceptionif a security manager exists and if
              the caller does not have <tt>LoggingPermission("control")</tt>.
 */
- (void)close;

/*!
 @brief Flush any buffered output.
 */
- (void)flush;

/*!
 @brief Return the character encoding for this <tt>Handler</tt>.
 @return The encoding name.  May be null, which indicates the
           default encoding should be used.
 */
- (NSString *)getEncoding;

/*!
 @brief Retrieves the ErrorManager for this Handler.
 @return the ErrorManager for this Handler
 @throw SecurityExceptionif a security manager exists and if
              the caller does not have <tt>LoggingPermission("control")</tt>.
 */
- (JavaUtilLoggingErrorManager *)getErrorManager;

/*!
 @brief Get the current <tt>Filter</tt> for this <tt>Handler</tt>.
 @return a <tt>Filter</tt> object (may be null)
 */
- (id<JavaUtilLoggingFilter>)getFilter;

/*!
 @brief Return the <tt>Formatter</tt> for this <tt>Handler</tt>.
 @return the <tt>Formatter</tt> (may be null).
 */
- (JavaUtilLoggingFormatter *)getFormatter;

/*!
 @brief Get the log level specifying which messages will be
  logged by this <tt>Handler</tt>.Message levels lower
  than this level will be discarded.
 @return the level of messages being logged.
 */
- (JavaUtilLoggingLevel *)getLevel;

/*!
 @brief Check if this <tt>Handler</tt> would actually log a given <tt>LogRecord</tt>.
 <p>
  This method checks if the <tt>LogRecord</tt> has an appropriate 
 <tt>Level</tt> and  whether it satisfies any <tt>Filter</tt>.  It also
  may make other <tt>Handler</tt> specific checks that might prevent a
  handler from logging the <tt>LogRecord</tt>. It will return false if
  the <tt>LogRecord</tt> is null. 
 <p>
 @param record a  <tt> LogRecord </tt>
 @return true if the <tt>LogRecord</tt> would be logged.
 */
- (jboolean)isLoggableWithJavaUtilLoggingLogRecord:(JavaUtilLoggingLogRecord *)record;

/*!
 @brief Publish a <tt>LogRecord</tt>.
 <p>
  The logging request was made initially to a <tt>Logger</tt> object,
  which initialized the <tt>LogRecord</tt> and forwarded it here. 
 <p>
  The <tt>Handler</tt>  is responsible for formatting the message, when and
  if necessary.  The formatting should include localization.
 @param record description of the log event. A null record is                  silently ignored and is not published
 */
- (void)publishWithJavaUtilLoggingLogRecord:(JavaUtilLoggingLogRecord *)record;

/*!
 @brief Set the character encoding used by this <tt>Handler</tt>.
 <p>
  The encoding should be set before any <tt>LogRecords</tt> are written
  to the <tt>Handler</tt>.
 @param encoding The name of a supported character encoding.         May be null, to indicate the default platform encoding.
 @throw SecurityExceptionif a security manager exists and if
              the caller does not have <tt>LoggingPermission("control")</tt>.
 @throw UnsupportedEncodingExceptionif the named encoding is
           not supported.
 */
- (void)setEncodingWithNSString:(NSString *)encoding;

/*!
 @brief Define an ErrorManager for this Handler.
 <p>
  The ErrorManager's "error" method will be invoked if any
  errors occur while using this Handler.
 @param em the new ErrorManager
 @throw SecurityExceptionif a security manager exists and if
              the caller does not have <tt>LoggingPermission("control")</tt>.
 */
- (void)setErrorManagerWithJavaUtilLoggingErrorManager:(JavaUtilLoggingErrorManager *)em;

/*!
 @brief Set a <tt>Filter</tt> to control output on this <tt>Handler</tt>.
 <P>
  For each call of <tt>publish</tt> the <tt>Handler</tt> will call
  this <tt>Filter</tt> (if it is non-null) to check if the 
 <tt>LogRecord</tt> should be published or discarded.
 @param newFilter a  <tt> Filter </tt>  object (may be null)
 @throw SecurityExceptionif a security manager exists and if
              the caller does not have <tt>LoggingPermission("control")</tt>.
 */
- (void)setFilterWithJavaUtilLoggingFilter:(id<JavaUtilLoggingFilter>)newFilter;

/*!
 @brief Set a <tt>Formatter</tt>.This <tt>Formatter</tt> will be used
  to format <tt>LogRecords</tt> for this <tt>Handler</tt>.
 <p>
  Some <tt>Handlers</tt> may not use <tt>Formatters</tt>, in
  which case the <tt>Formatter</tt> will be remembered, but not used. 
 <p>
 @param newFormatter the  <tt> Formatter </tt>  to use (may not be null)
 @throw SecurityExceptionif a security manager exists and if
              the caller does not have <tt>LoggingPermission("control")</tt>.
 */
- (void)setFormatterWithJavaUtilLoggingFormatter:(JavaUtilLoggingFormatter *)newFormatter;

/*!
 @brief Set the log level specifying which message levels will be
  logged by this <tt>Handler</tt>.Message levels lower than this
  value will be discarded.
 <p>
  The intention is to allow developers to turn on voluminous
  logging, but to limit the messages that are sent to certain 
 <tt>Handlers</tt>.
 @param newLevel the new value for the log level
 @throw SecurityExceptionif a security manager exists and if
              the caller does not have <tt>LoggingPermission("control")</tt>.
 */
- (void)setLevelWithJavaUtilLoggingLevel:(JavaUtilLoggingLevel *)newLevel;

#pragma mark Protected

/*!
 @brief Default constructor.The resulting <tt>Handler</tt> has a log
  level of <tt>Level.ALL</tt>, no <tt>Formatter</tt>, and no 
 <tt>Filter</tt>.
 A default <tt>ErrorManager</tt> instance is installed
  as the <tt>ErrorManager</tt>.
 */
- (instancetype __nonnull)init;

/*!
 @brief Protected convenience method to report an error to this Handler's
  ErrorManager.Note that this method retrieves and uses the ErrorManager
  without doing a security check.
 It can therefore be used in
  environments where the caller may be non-privileged.
 @param msg a descriptive string (may be null)
 @param ex an exception (may be null)
 @param code an error code defined in ErrorManager
 */
- (void)reportErrorWithNSString:(NSString *)msg
          withJavaLangException:(JavaLangException *)ex
                        withInt:(jint)code;

#pragma mark Package-Private

- (void)checkPermission;

@end

J2OBJC_STATIC_INIT(JavaUtilLoggingHandler)

FOUNDATION_EXPORT void JavaUtilLoggingHandler_init(JavaUtilLoggingHandler *self);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilLoggingHandler)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilLoggingHandler")
