//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/stream/DoubleStream.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilStreamDoubleStream")
#ifdef RESTRICT_JavaUtilStreamDoubleStream
#define INCLUDE_ALL_JavaUtilStreamDoubleStream 0
#else
#define INCLUDE_ALL_JavaUtilStreamDoubleStream 1
#endif
#undef RESTRICT_JavaUtilStreamDoubleStream

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilStreamDoubleStream_) && (INCLUDE_ALL_JavaUtilStreamDoubleStream || defined(INCLUDE_JavaUtilStreamDoubleStream))
#define JavaUtilStreamDoubleStream_

#define RESTRICT_JavaUtilStreamBaseStream 1
#define INCLUDE_JavaUtilStreamBaseStream 1
#include "java/util/stream/BaseStream.h"

@class IOSDoubleArray;
@class JavaUtilDoubleSummaryStatistics;
@class JavaUtilOptionalDouble;
@protocol JavaLangRunnable;
@protocol JavaUtilFunctionBiConsumer;
@protocol JavaUtilFunctionDoubleBinaryOperator;
@protocol JavaUtilFunctionDoubleConsumer;
@protocol JavaUtilFunctionDoubleFunction;
@protocol JavaUtilFunctionDoublePredicate;
@protocol JavaUtilFunctionDoubleSupplier;
@protocol JavaUtilFunctionDoubleToIntFunction;
@protocol JavaUtilFunctionDoubleToLongFunction;
@protocol JavaUtilFunctionDoubleUnaryOperator;
@protocol JavaUtilFunctionObjDoubleConsumer;
@protocol JavaUtilFunctionSupplier;
@protocol JavaUtilPrimitiveIterator_OfDouble;
@protocol JavaUtilSpliterator_OfDouble;
@protocol JavaUtilStreamDoubleStream_Builder;
@protocol JavaUtilStreamIntStream;
@protocol JavaUtilStreamLongStream;
@protocol JavaUtilStreamStream;

/*!
 @brief A sequence of primitive double-valued elements supporting sequential and parallel
  aggregate operations.This is the <code>double</code> primitive specialization of 
 <code>Stream</code>.
 <p>The following example illustrates an aggregate operation using 
 <code>Stream</code> and <code>DoubleStream</code>, computing the sum of the weights of the
  red widgets: 
 @code
    double sum = widgets.stream()
                          .filter(w -> w.getColor() == RED)
                          .mapToDouble(w -> w.getWeight())
                          .sum(); 
 
@endcode
  See the class documentation for <code>Stream</code> and the package documentation
  for <a href="package-summary.html">java.util.stream</a> for additional
  specification of streams, stream operations, stream pipelines, and
  parallelism.
 @since 1.8
 - seealso: Stream
 - seealso: <a href="package-summary.html">java.util.stream</a>
 */
@protocol JavaUtilStreamDoubleStream < JavaUtilStreamBaseStream, JavaObject >

/*!
 @brief Returns a stream consisting of the elements of this stream that match
  the given predicate.
 <p>This is an <a href="package-summary.html#StreamOps">intermediate
  operation</a>.
 @param predicate a  <a href="package-summary.html#NonInterference"> non-interfering </a>
  ,                    <a href="package-summary.html#Statelessness"> stateless </a>
                    predicate to apply to each element to determine if it                   should be included
 @return the new stream
 */
- (id<JavaUtilStreamDoubleStream>)filterWithJavaUtilFunctionDoublePredicate:(id<JavaUtilFunctionDoublePredicate>)predicate;

/*!
 @brief Returns a stream consisting of the results of applying the given
  function to the elements of this stream.
 <p>This is an <a href="package-summary.html#StreamOps">intermediate
  operation</a>.
 @param mapper a  <a href="package-summary.html#NonInterference"> non-interfering </a>
  ,                 <a href="package-summary.html#Statelessness"> stateless </a>
                 function to apply to each element
 @return the new stream
 */
- (id<JavaUtilStreamDoubleStream>)mapWithJavaUtilFunctionDoubleUnaryOperator:(id<JavaUtilFunctionDoubleUnaryOperator>)mapper;

/*!
 @brief Returns an object-valued <code>Stream</code> consisting of the results of
  applying the given function to the elements of this stream.
 <p>This is an <a href="package-summary.html#StreamOps">
      intermediate operation</a>.
 @param mapper a  <a href="package-summary.html#NonInterference"> non-interfering </a>
  ,                 <a href="package-summary.html#Statelessness"> stateless </a>
                 function to apply to each element
 @return the new stream
 */
- (id<JavaUtilStreamStream>)mapToObjWithJavaUtilFunctionDoubleFunction:(id<JavaUtilFunctionDoubleFunction>)mapper;

/*!
 @brief Returns an <code>IntStream</code> consisting of the results of applying the
  given function to the elements of this stream.
 <p>This is an <a href="package-summary.html#StreamOps">intermediate
  operation</a>.
 @param mapper a  <a href="package-summary.html#NonInterference"> non-interfering </a>
  ,                 <a href="package-summary.html#Statelessness"> stateless </a>
                 function to apply to each element
 @return the new stream
 */
- (id<JavaUtilStreamIntStream>)mapToIntWithJavaUtilFunctionDoubleToIntFunction:(id<JavaUtilFunctionDoubleToIntFunction>)mapper;

/*!
 @brief Returns a <code>LongStream</code> consisting of the results of applying the
  given function to the elements of this stream.
 <p>This is an <a href="package-summary.html#StreamOps">intermediate
  operation</a>.
 @param mapper a  <a href="package-summary.html#NonInterference"> non-interfering </a>
  ,                 <a href="package-summary.html#Statelessness"> stateless </a>
                 function to apply to each element
 @return the new stream
 */
- (id<JavaUtilStreamLongStream>)mapToLongWithJavaUtilFunctionDoubleToLongFunction:(id<JavaUtilFunctionDoubleToLongFunction>)mapper;

/*!
 @brief Returns a stream consisting of the results of replacing each element of
  this stream with the contents of a mapped stream produced by applying
  the provided mapping function to each element.Each mapped stream is 
 <code>closed</code> after its contents
  have been placed into this stream.
 (If a mapped stream is <code>null</code>
  an empty stream is used, instead.) 
 <p>This is an <a href="package-summary.html#StreamOps">intermediate
  operation</a>.
 @param mapper a  <a href="package-summary.html#NonInterference"> non-interfering </a>
  ,                 <a href="package-summary.html#Statelessness"> stateless </a>
                 function to apply to each element which produces a                
 <code>DoubleStream</code>  of new values
 @return the new stream
 - seealso: Stream#flatMap(Function)
 */
- (id<JavaUtilStreamDoubleStream>)flatMapWithJavaUtilFunctionDoubleFunction:(id<JavaUtilFunctionDoubleFunction>)mapper;

/*!
 @brief Returns a stream consisting of the distinct elements of this stream.The
  elements are compared for equality according to 
 <code>java.lang.Double.compare(double, double)</code>.
 <p>This is a <a href="package-summary.html#StreamOps">stateful
  intermediate operation</a>.
 @return the result stream
 */
- (id<JavaUtilStreamDoubleStream>)distinct;

/*!
 @brief Returns a stream consisting of the elements of this stream in sorted
  order.The elements are compared for equality according to 
 <code>java.lang.Double.compare(double, double)</code>.
 <p>This is a <a href="package-summary.html#StreamOps">stateful
  intermediate operation</a>.
 @return the result stream
 */
- (id<JavaUtilStreamDoubleStream>)sorted;

/*!
 @brief Returns a stream consisting of the elements of this stream, additionally
  performing the provided action on each element as elements are consumed
  from the resulting stream.
 <p>This is an <a href="package-summary.html#StreamOps">intermediate
  operation</a>.
  
 <p>For parallel stream pipelines, the action may be called at
  whatever time and in whatever thread the element is made available by the
  upstream operation.  If the action modifies shared state,
  it is responsible for providing the required synchronization.
 @param action a  <a href="package-summary.html#NonInterference">
                 non-interfering </a>  action to perform on the elements as                they are consumed from the stream
 @return the new stream
 */
- (id<JavaUtilStreamDoubleStream>)peekWithJavaUtilFunctionDoubleConsumer:(id<JavaUtilFunctionDoubleConsumer>)action;

/*!
 @brief Returns a stream consisting of the elements of this stream, truncated
  to be no longer than <code>maxSize</code> in length.
 <p>This is a <a href="package-summary.html#StreamOps">short-circuiting
  stateful intermediate operation</a>.
 @param maxSize the number of elements the stream should be limited to
 @return the new stream
 @throw IllegalArgumentExceptionif <code>maxSize</code> is negative
 */
- (id<JavaUtilStreamDoubleStream>)limitWithLong:(jlong)maxSize;

/*!
 @brief Returns a stream consisting of the remaining elements of this stream
  after discarding the first <code>n</code> elements of the stream.
 If this stream contains fewer than <code>n</code> elements then an
  empty stream will be returned. 
 <p>This is a <a href="package-summary.html#StreamOps">stateful
  intermediate operation</a>.
 @param n the number of leading elements to skip
 @return the new stream
 @throw IllegalArgumentExceptionif <code>n</code> is negative
 */
- (id<JavaUtilStreamDoubleStream>)skipWithLong:(jlong)n;

/*!
 @brief Performs an action for each element of this stream.
 <p>This is a <a href="package-summary.html#StreamOps">terminal
  operation</a>.
  
 <p>For parallel stream pipelines, this operation does <em>not</em>
  guarantee to respect the encounter order of the stream, as doing so
  would sacrifice the benefit of parallelism.  For any given element, the
  action may be performed at whatever time and in whatever thread the
  library chooses.  If the action accesses shared state, it is
  responsible for providing the required synchronization.
 @param action a  <a href="package-summary.html#NonInterference">
                 non-interfering </a>  action to perform on the elements
 */
- (void)forEachWithJavaUtilFunctionDoubleConsumer:(id<JavaUtilFunctionDoubleConsumer>)action;

/*!
 @brief Performs an action for each element of this stream, guaranteeing that
  each element is processed in encounter order for streams that have a
  defined encounter order.
 <p>This is a <a href="package-summary.html#StreamOps">terminal
  operation</a>.
 @param action a  <a href="package-summary.html#NonInterference">
                 non-interfering </a>  action to perform on the elements
 - seealso: #forEach(DoubleConsumer)
 */
- (void)forEachOrderedWithJavaUtilFunctionDoubleConsumer:(id<JavaUtilFunctionDoubleConsumer>)action;

/*!
 @brief Returns an array containing the elements of this stream.
 <p>This is a <a href="package-summary.html#StreamOps">terminal
  operation</a>.
 @return an array containing the elements of this stream
 */
- (IOSDoubleArray *)toArray;

/*!
 @brief Performs a <a href="package-summary.html#Reduction">reduction</a> on the
  elements of this stream, using the provided identity value and an 
 <a href="package-summary.html#Associativity">associative</a>
  accumulation function, and returns the reduced value.This is equivalent
  to: 
 @code
    double result = identity;
      for (double element : this stream)
          result = accumulator.applyAsDouble(result, element)
      return result; 
 
@endcode
  but is not constrained to execute sequentially.
 <p>The <code>identity</code> value must be an identity for the accumulator
  function. This means that for all <code>x</code>,
  <code>accumulator.apply(identity, x)</code> is equal to <code>x</code>.
  The <code>accumulator</code> function must be an 
 <a href="package-summary.html#Associativity">associative</a> function. 
 <p>This is a <a href="package-summary.html#StreamOps">terminal
  operation</a>.
 @param identity the identity value for the accumulating function
 @param op an  <a href="package-summary.html#Associativity"> associative </a>
  ,             <a href="package-summary.html#NonInterference"> non-interfering </a> ,
              <a href="package-summary.html#Statelessness"> stateless </a>            function for combining two values
 @return the result of the reduction
 - seealso: #sum()
 - seealso: #min()
 - seealso: #max()
 - seealso: #average()
 */
- (jdouble)reduceWithDouble:(jdouble)identity
withJavaUtilFunctionDoubleBinaryOperator:(id<JavaUtilFunctionDoubleBinaryOperator>)op;

/*!
 @brief Performs a <a href="package-summary.html#Reduction">reduction</a> on the
  elements of this stream, using an 
 <a href="package-summary.html#Associativity">associative</a> accumulation
  function, and returns an <code>OptionalDouble</code> describing the reduced
  value, if any.This is equivalent to: 
 @code
    boolean foundAny = false;
      double result = null;
      for (double element : this stream) {
          if (!
 foundAny) {
              foundAny = true;
              result = element;
          }
          else
              result = accumulator.applyAsDouble(result, element);
      }
      return foundAny ? OptionalDouble.of(result) : OptionalDouble.empty(); 
 
@endcode
  but is not constrained to execute sequentially. 
 <p>The <code>accumulator</code> function must be an 
 <a href="package-summary.html#Associativity">associative</a> function. 
 <p>This is a <a href="package-summary.html#StreamOps">terminal
  operation</a>.
 @param op an  <a href="package-summary.html#Associativity"> associative </a>
  ,             <a href="package-summary.html#NonInterference"> non-interfering </a> ,
              <a href="package-summary.html#Statelessness"> stateless </a>            function for combining two values
 @return the result of the reduction
 - seealso: #reduce(double, DoubleBinaryOperator)
 */
- (JavaUtilOptionalDouble *)reduceWithJavaUtilFunctionDoubleBinaryOperator:(id<JavaUtilFunctionDoubleBinaryOperator>)op;

/*!
 @brief Performs a <a href="package-summary.html#MutableReduction">mutable
  reduction</a> operation on the elements of this stream.A mutable
  reduction is one in which the reduced value is a mutable result container,
  such as an <code>ArrayList</code>, and elements are incorporated by updating
  the state of the result rather than by replacing the result.
 This
  produces a result equivalent to: 
 @code
    R result = supplier.get();
      for (double element : this stream)
          accumulator.accept(result, element);
      return result; 
 
@endcode
  
 <p>Like <code>reduce(double, DoubleBinaryOperator)</code>, <code>collect</code>
  operations can be parallelized without requiring additional
  synchronization. 
 <p>This is a <a href="package-summary.html#StreamOps">terminal
  operation</a>.
 @param supplier a function that creates a new result container. For a                  parallel execution, this function may be called
                   multiple times and must return a fresh value each time.
 @param accumulator an  <a href="package-summary.html#Associativity"> associative </a>
  ,                      <a href="package-summary.html#NonInterference"> non-interfering </a> ,
                       <a href="package-summary.html#Statelessness"> stateless </a>                     function for incorporating an additional element into a result
 @param combiner an  <a href="package-summary.html#Associativity"> associative </a>
  ,                      <a href="package-summary.html#NonInterference"> non-interfering </a> ,
                       <a href="package-summary.html#Statelessness"> stateless </a>                     function for combining two values, which must be
                      compatible with the accumulator function
 @return the result of the reduction
 - seealso: Stream#collect(Supplier, BiConsumer, BiConsumer)
 */
- (id)collectWithJavaUtilFunctionSupplier:(id<JavaUtilFunctionSupplier>)supplier
    withJavaUtilFunctionObjDoubleConsumer:(id<JavaUtilFunctionObjDoubleConsumer>)accumulator
           withJavaUtilFunctionBiConsumer:(id<JavaUtilFunctionBiConsumer>)combiner;

/*!
 @brief Returns the sum of elements in this stream.
 Summation is a special case of a <a href="package-summary.html#Reduction">
 reduction</a>. If
  floating-point summation were exact, this method would be
  equivalent to: 
 @code
    return reduce(0, Double::sum); 
 
@endcode
  However, since floating-point summation is not exact, the above
  code is not necessarily equivalent to the summation computation
  done by this method. 
 <p>If any stream element is a NaN or the sum is at any point a NaN
  then the sum will be NaN.
  The value of a floating-point sum is a function both
  of the input values as well as the order of addition
  operations. The order of addition operations of this method is
  intentionally not defined to allow for implementation
  flexibility to improve the speed and accuracy of the computed
  result.
  In particular, this method may be implemented using compensated
  summation or other technique to reduce the error bound in the
  numerical sum compared to a simple summation of <code>double</code>
  values. 
 <p>This is a <a href="package-summary.html#StreamOps">terminal
  operation</a>.
 @return the sum of elements in this stream
 */
- (jdouble)sum;

/*!
 @brief Returns an <code>OptionalDouble</code> describing the minimum element of this
  stream, or an empty OptionalDouble if this stream is empty.The minimum
  element will be <code>Double.NaN</code> if any stream element was NaN.
 Unlike
  the numerical comparison operators, this method considers negative zero
  to be strictly smaller than positive zero. This is a special case of a 
 <a href="package-summary.html#Reduction">reduction</a> and is
  equivalent to: 
 @code
    return reduce(Double::min); 
 
@endcode
  
 <p>This is a <a href="package-summary.html#StreamOps">terminal
  operation</a>.
 @return an <code>OptionalDouble</code> containing the minimum element of this
  stream, or an empty optional if the stream is empty
 */
- (JavaUtilOptionalDouble *)min;

/*!
 @brief Returns an <code>OptionalDouble</code> describing the maximum element of this
  stream, or an empty OptionalDouble if this stream is empty.The maximum
  element will be <code>Double.NaN</code> if any stream element was NaN.
 Unlike
  the numerical comparison operators, this method considers negative zero
  to be strictly smaller than positive zero. This is a
  special case of a 
 <a href="package-summary.html#Reduction">reduction</a> and is
  equivalent to: 
 @code
    return reduce(Double::max); 
 
@endcode
  
 <p>This is a <a href="package-summary.html#StreamOps">terminal
  operation</a>.
 @return an <code>OptionalDouble</code> containing the maximum element of this
  stream, or an empty optional if the stream is empty
 */
- (JavaUtilOptionalDouble *)max;

/*!
 @brief Returns the count of elements in this stream.This is a special case of a 
 <a href="package-summary.html#Reduction">reduction</a> and is
  equivalent to: 
 @code
    return mapToLong(e -> 1L).sum(); 
 
@endcode
  
 <p>This is a <a href="package-summary.html#StreamOps">terminal operation</a>.
 @return the count of elements in this stream
 */
- (jlong)count;

/*!
 @brief Returns an <code>OptionalDouble</code> describing the arithmetic
  mean of elements of this stream, or an empty optional if this
  stream is empty.
 If any recorded value is a NaN or the sum is at any point a NaN
  then the average will be NaN. 
 <p>The average returned can vary depending upon the order in
  which values are recorded.
  This method may be implemented using compensated summation or
  other technique to reduce the error bound in the <code>numerical sum</code>
  used to compute the average.
   
 <p>The average is a special case of a <a href="package-summary.html#Reduction">
 reduction</a>.
  
 <p>This is a <a href="package-summary.html#StreamOps">terminal
  operation</a>.
 @return an <code>OptionalDouble</code> containing the average element of this
  stream, or an empty optional if the stream is empty
 */
- (JavaUtilOptionalDouble *)average;

/*!
 @brief Returns a <code>DoubleSummaryStatistics</code> describing various summary data
  about the elements of this stream.This is a special
  case of a <a href="package-summary.html#Reduction">reduction</a>.
 <p>This is a <a href="package-summary.html#StreamOps">terminal
  operation</a>.
 @return a <code>DoubleSummaryStatistics</code> describing various summary data
  about the elements of this stream
 */
- (JavaUtilDoubleSummaryStatistics *)summaryStatistics;

/*!
 @brief Returns whether any elements of this stream match the provided
  predicate.May not evaluate the predicate on all elements if not
  necessary for determining the result.
 If the stream is empty then 
 <code>false</code> is returned and the predicate is not evaluated. 
 <p>This is a <a href="package-summary.html#StreamOps">short-circuiting
  terminal operation</a>.
 @param predicate a  <a href="package-summary.html#NonInterference"> non-interfering </a>
  ,                    <a href="package-summary.html#Statelessness"> stateless </a>
                    predicate to apply to elements of this stream
 @return <code>true</code> if any elements of the stream match the provided
  predicate, otherwise <code>false</code>
 */
- (jboolean)anyMatchWithJavaUtilFunctionDoublePredicate:(id<JavaUtilFunctionDoublePredicate>)predicate;

/*!
 @brief Returns whether all elements of this stream match the provided predicate.
 May not evaluate the predicate on all elements if not necessary for
  determining the result.  If the stream is empty then <code>true</code> is
  returned and the predicate is not evaluated. 
 <p>This is a <a href="package-summary.html#StreamOps">short-circuiting
  terminal operation</a>.
 @param predicate a  <a href="package-summary.html#NonInterference"> non-interfering </a>
  ,                    <a href="package-summary.html#Statelessness"> stateless </a>
                    predicate to apply to elements of this stream
 @return <code>true</code> if either all elements of the stream match the
  provided predicate or the stream is empty, otherwise <code>false</code>
 */
- (jboolean)allMatchWithJavaUtilFunctionDoublePredicate:(id<JavaUtilFunctionDoublePredicate>)predicate;

/*!
 @brief Returns whether no elements of this stream match the provided predicate.
 May not evaluate the predicate on all elements if not necessary for
  determining the result.  If the stream is empty then <code>true</code> is
  returned and the predicate is not evaluated. 
 <p>This is a <a href="package-summary.html#StreamOps">short-circuiting
  terminal operation</a>.
 @param predicate a  <a href="package-summary.html#NonInterference"> non-interfering </a>
  ,                    <a href="package-summary.html#Statelessness"> stateless </a>
                    predicate to apply to elements of this stream
 @return <code>true</code> if either no elements of the stream match the
  provided predicate or the stream is empty, otherwise <code>false</code>
 */
- (jboolean)noneMatchWithJavaUtilFunctionDoublePredicate:(id<JavaUtilFunctionDoublePredicate>)predicate;

/*!
 @brief Returns an <code>OptionalDouble</code> describing the first element of this
  stream, or an empty <code>OptionalDouble</code> if the stream is empty.If
  the stream has no encounter order, then any element may be returned.
 <p>This is a <a href="package-summary.html#StreamOps">short-circuiting
  terminal operation</a>.
 @return an <code>OptionalDouble</code> describing the first element of this
  stream, or an empty <code>OptionalDouble</code> if the stream is empty
 */
- (JavaUtilOptionalDouble *)findFirst;

/*!
 @brief Returns an <code>OptionalDouble</code> describing some element of the stream,
  or an empty <code>OptionalDouble</code> if the stream is empty.
 <p>This is a <a href="package-summary.html#StreamOps">short-circuiting
  terminal operation</a>.
  
 <p>The behavior of this operation is explicitly nondeterministic; it is
  free to select any element in the stream.  This is to allow for maximal
  performance in parallel operations; the cost is that multiple invocations
  on the same source may not return the same result.  (If a stable result
  is desired, use <code>findFirst()</code> instead.)
 @return an <code>OptionalDouble</code> describing some element of this stream,
  or an empty <code>OptionalDouble</code> if the stream is empty
 - seealso: #findFirst()
 */
- (JavaUtilOptionalDouble *)findAny;

/*!
 @brief Returns a <code>Stream</code> consisting of the elements of this stream,
  boxed to <code>Double</code>.
 <p>This is an <a href="package-summary.html#StreamOps">intermediate
  operation</a>.
 @return a <code>Stream</code> consistent of the elements of this stream,
  each boxed to a <code>Double</code>
 */
- (id<JavaUtilStreamStream>)boxed;

- (id<JavaUtilStreamDoubleStream>)sequential;

- (id<JavaUtilStreamDoubleStream>)parallel;

- (id<JavaUtilPrimitiveIterator_OfDouble>)iterator;

- (id<JavaUtilSpliterator_OfDouble>)spliterator;

- (id<JavaUtilStreamDoubleStream>)unordered;

- (id<JavaUtilStreamDoubleStream>)onCloseWithJavaLangRunnable:(id<JavaLangRunnable>)arg0;

@end

@interface JavaUtilStreamDoubleStream : NSObject

/*!
 @brief Returns a builder for a <code>DoubleStream</code>.
 @return a stream builder
 */
+ (id<JavaUtilStreamDoubleStream_Builder>)builder;

/*!
 @brief Returns an empty sequential <code>DoubleStream</code>.
 @return an empty sequential stream
 */
+ (id<JavaUtilStreamDoubleStream>)empty;

/*!
 @brief Returns a sequential <code>DoubleStream</code> containing a single element.
 @param t the single element
 @return a singleton sequential stream
 */
+ (id<JavaUtilStreamDoubleStream>)ofWithDouble:(jdouble)t;

/*!
 @brief Returns a sequential ordered stream whose elements are the specified values.
 @param values the elements of the new stream
 @return the new stream
 */
+ (id<JavaUtilStreamDoubleStream>)ofWithDoubleArray:(IOSDoubleArray *)values;

/*!
 @brief Returns an infinite sequential ordered <code>DoubleStream</code> produced by iterative
  application of a function <code>f</code> to an initial element <code>seed</code>,
  producing a <code>Stream</code> consisting of <code>seed</code>, <code>f(seed)</code>,
  <code>f(f(seed))</code>, etc.
 <p>The first element (position <code>0</code>) in the <code>DoubleStream</code>
  will be the provided <code>seed</code>.  For <code>n > 0</code>, the element at
  position <code>n</code>, will be the result of applying the function <code>f</code>
   to the element at position <code>n - 1</code>.
 @param seed the initial element
 @param f a function to be applied to to the previous element to produce           a new element
 @return a new sequential <code>DoubleStream</code>
 */
+ (id<JavaUtilStreamDoubleStream>)iterateWithDouble:(jdouble)seed
            withJavaUtilFunctionDoubleUnaryOperator:(id<JavaUtilFunctionDoubleUnaryOperator>)f;

/*!
 @brief Returns an infinite sequential unordered stream where each element is
  generated by the provided <code>DoubleSupplier</code>.This is suitable for
  generating constant streams, streams of random elements, etc.
 @param s the <code>DoubleSupplier</code>  for generated elements
 @return a new infinite sequential unordered <code>DoubleStream</code>
 */
+ (id<JavaUtilStreamDoubleStream>)generateWithJavaUtilFunctionDoubleSupplier:(id<JavaUtilFunctionDoubleSupplier>)s;

/*!
 @brief Creates a lazily concatenated stream whose elements are all the
  elements of the first stream followed by all the elements of the
  second stream.The resulting stream is ordered if both
  of the input streams are ordered, and parallel if either of the input
  streams is parallel.
 When the resulting stream is closed, the close
  handlers for both input streams are invoked.
 @param a the first stream
 @param b the second stream
 @return the concatenation of the two input streams
 */
+ (id<JavaUtilStreamDoubleStream>)concatWithJavaUtilStreamDoubleStream:(id<JavaUtilStreamDoubleStream>)a
                                        withJavaUtilStreamDoubleStream:(id<JavaUtilStreamDoubleStream>)b;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilStreamDoubleStream)

FOUNDATION_EXPORT id<JavaUtilStreamDoubleStream_Builder> JavaUtilStreamDoubleStream_builder(void);

FOUNDATION_EXPORT id<JavaUtilStreamDoubleStream> JavaUtilStreamDoubleStream_empty(void);

FOUNDATION_EXPORT id<JavaUtilStreamDoubleStream> JavaUtilStreamDoubleStream_ofWithDouble_(jdouble t);

FOUNDATION_EXPORT id<JavaUtilStreamDoubleStream> JavaUtilStreamDoubleStream_ofWithDoubleArray_(IOSDoubleArray *values);

FOUNDATION_EXPORT id<JavaUtilStreamDoubleStream> JavaUtilStreamDoubleStream_iterateWithDouble_withJavaUtilFunctionDoubleUnaryOperator_(jdouble seed, id<JavaUtilFunctionDoubleUnaryOperator> f);

FOUNDATION_EXPORT id<JavaUtilStreamDoubleStream> JavaUtilStreamDoubleStream_generateWithJavaUtilFunctionDoubleSupplier_(id<JavaUtilFunctionDoubleSupplier> s);

FOUNDATION_EXPORT id<JavaUtilStreamDoubleStream> JavaUtilStreamDoubleStream_concatWithJavaUtilStreamDoubleStream_withJavaUtilStreamDoubleStream_(id<JavaUtilStreamDoubleStream> a, id<JavaUtilStreamDoubleStream> b);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilStreamDoubleStream)

#endif

#if !defined (JavaUtilStreamDoubleStream_Builder_) && (INCLUDE_ALL_JavaUtilStreamDoubleStream || defined(INCLUDE_JavaUtilStreamDoubleStream_Builder))
#define JavaUtilStreamDoubleStream_Builder_

#define RESTRICT_JavaUtilFunctionDoubleConsumer 1
#define INCLUDE_JavaUtilFunctionDoubleConsumer 1
#include "java/util/function/DoubleConsumer.h"

@protocol JavaUtilStreamDoubleStream;

/*!
 @brief A mutable builder for a <code>DoubleStream</code>.
 <p>A stream builder has a lifecycle, which starts in a building
  phase, during which elements can be added, and then transitions to a built
  phase, after which elements may not be added.  The built phase
  begins when the <code>build()</code> method is called, which creates an
  ordered stream whose elements are the elements that were added to the
  stream builder, in the order they were added.
 - seealso: DoubleStream#builder()
 @since 1.8
 */
@protocol JavaUtilStreamDoubleStream_Builder < JavaUtilFunctionDoubleConsumer, JavaObject >

/*!
 @brief Adds an element to the stream being built.
 @throw IllegalStateExceptionif the builder has already transitioned
  to the built state
 */
- (void)acceptWithDouble:(jdouble)t;

/*!
 @brief Adds an element to the stream being built.
 @param t the element to add
 @return <code>this</code> builder
 @throw IllegalStateExceptionif the builder has already transitioned
  to the built state
 */
- (id<JavaUtilStreamDoubleStream_Builder>)addWithDouble:(jdouble)t;

/*!
 @brief Builds the stream, transitioning this builder to the built state.
 An <code>IllegalStateException</code> is thrown if there are further
  attempts to operate on the builder after it has entered the built
  state.
 @return the built stream
 @throw IllegalStateExceptionif the builder has already transitioned
  to the built state
 */
- (id<JavaUtilStreamDoubleStream>)build;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilStreamDoubleStream_Builder)

FOUNDATION_EXPORT id<JavaUtilStreamDoubleStream_Builder> JavaUtilStreamDoubleStream_Builder_addWithDouble_(id<JavaUtilStreamDoubleStream_Builder> self, jdouble t);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilStreamDoubleStream_Builder)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilStreamDoubleStream")
