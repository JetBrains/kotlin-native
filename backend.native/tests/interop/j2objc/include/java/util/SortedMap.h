//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/SortedMap.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilSortedMap")
#ifdef RESTRICT_JavaUtilSortedMap
#define INCLUDE_ALL_JavaUtilSortedMap 0
#else
#define INCLUDE_ALL_JavaUtilSortedMap 1
#endif
#undef RESTRICT_JavaUtilSortedMap

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilSortedMap_) && (INCLUDE_ALL_JavaUtilSortedMap || defined(INCLUDE_JavaUtilSortedMap))
#define JavaUtilSortedMap_

#define RESTRICT_JavaUtilMap 1
#define INCLUDE_JavaUtilMap 1
#include "java/util/Map.h"

@protocol JavaUtilCollection;
@protocol JavaUtilComparator;
@protocol JavaUtilSet;

/*!
 @brief A <code>Map</code> that further provides a <em>total ordering</em> on its keys.
 The map is ordered according to the natural
  ordering
  of its keys, or by a <code>Comparator</code> typically
  provided at sorted map creation time.  This order is reflected when
  iterating over the sorted map's collection views (returned by the 
 <code>entrySet</code>, <code>keySet</code> and <code>values</code> methods).
  Several additional operations are provided to take advantage of the
  ordering.  (This interface is the map analogue of <code>SortedSet</code>.)
  
 <p>All keys inserted into a sorted map must implement the <code>Comparable</code>
  interface (or be accepted by the specified comparator).  Furthermore, all
  such keys must be <em>mutually comparable</em>: <code>k1.compareTo(k2)</code> (or 
 <code>comparator.compare(k1, k2)</code>) must not throw a 
 <code>ClassCastException</code> for any keys <code>k1</code> and <code>k2</code> in
  the sorted map.  Attempts to violate this restriction will cause the
  offending method or constructor invocation to throw a 
 <code>ClassCastException</code>.
  
 <p>Note that the ordering maintained by a sorted map (whether or not an
  explicit comparator is provided) must be <em>consistent with equals</em> if
  the sorted map is to correctly implement the <code>Map</code> interface.  (See
  the <code>Comparable</code> interface or <code>Comparator</code> interface for a
  precise definition of <em>consistent with equals</em>.)  This is so because
  the <code>Map</code> interface is defined in terms of the <code>equals</code>
  operation, but a sorted map performs all key comparisons using its 
 <code>compareTo</code> (or <code>compare</code>) method, so two keys that are
  deemed equal by this method are, from the standpoint of the sorted map,
  equal.  The behavior of a tree map <em>is</em> well-defined even if its
  ordering is inconsistent with equals; it just fails to obey the general
  contract of the <code>Map</code> interface. 
 <p>All general-purpose sorted map implementation classes should provide four
  "standard" constructors. It is not possible to enforce this recommendation
  though as required constructors cannot be specified by interfaces. The
  expected "standard" constructors for all sorted map implementations are: 
 <ol>
    <li>A void (no arguments) constructor, which creates an empty sorted map
    sorted according to the natural ordering of its keys.</li>
    <li>A constructor with a single argument of type <code>Comparator</code>, which
    creates an empty sorted map sorted according to the specified comparator.</li>
    <li>A constructor with a single argument of type <code>Map</code>, which creates
    a new map with the same key-value mappings as its argument, sorted
    according to the keys' natural ordering.</li>
    <li>A constructor with a single argument of type <code>SortedMap</code>, which
    creates a new sorted map with the same key-value mappings and the same
    ordering as the input sorted map.</li>
  </ol>
  
 <p><strong>Note</strong>: several methods return submaps with restricted key
  ranges. Such ranges are <em>half-open</em>, that is, they include their low
  endpoint but not their high endpoint (where applicable).  If you need a 
 <em>closed range</em> (which includes both endpoints), and the key type
  allows for calculation of the successor of a given key, merely request
  the subrange from <code>lowEndpoint</code> to 
 <code>successor(highEndpoint)</code>.  For example, suppose that <code>m</code>
  is a map whose keys are strings.  The following idiom obtains a view
  containing all of the key-value mappings in <code>m</code> whose keys are
  between <code>low</code> and <code>high</code>, inclusive:@code

    SortedMap&lt;String, V&gt; sub = m.subMap(low, high+"\0");
@endcode
  A similar technique can be used to generate an <em>open range</em>
  (which contains neither endpoint).  The following idiom obtains a
  view containing all of the key-value mappings in <code>m</code> whose keys
  are between <code>low</code> and <code>high</code>, exclusive:@code

    SortedMap&lt;String, V&gt; sub = m.subMap(low+"\0", high);
@endcode
  
 <p>This interface is a member of the 
 <a href="{@@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/collections/index.html">
  Java Collections Framework</a>.
 @author Josh Bloch
 - seealso: Map
 - seealso: TreeMap
 - seealso: SortedSet
 - seealso: Comparator
 - seealso: Comparable
 - seealso: Collection
 - seealso: ClassCastException
 @since 1.2
 */
@protocol JavaUtilSortedMap < JavaUtilMap, JavaObject >

/*!
 @brief Returns the comparator used to order the keys in this map, or 
 <code>null</code> if this map uses the natural ordering
  of its keys.
 @return the comparator used to order the keys in this map,
          or <code>null</code> if this map uses the natural ordering
          of its keys
 */
- (id<JavaUtilComparator> __nullable)comparator;

/*!
 @brief Returns a view of the portion of this map whose keys range from 
 <code>fromKey</code>, inclusive, to <code>toKey</code>, exclusive.
 (If
  <code>fromKey</code> and <code>toKey</code> are equal, the returned map
  is empty.)  The returned map is backed by this map, so changes
  in the returned map are reflected in this map, and vice-versa.
  The returned map supports all optional map operations that this
  map supports. 
 <p>The returned map will throw an <code>IllegalArgumentException</code>
  on an attempt to insert a key outside its range.
 @param fromKey low endpoint (inclusive) of the keys in the returned map
 @param toKey high endpoint (exclusive) of the keys in the returned map
 @return a view of the portion of this map whose keys range from
          <code>fromKey</code>, inclusive, to <code>toKey</code>, exclusive
 @throw ClassCastExceptionif <code>fromKey</code> and <code>toKey</code>
          cannot be compared to one another using this map's comparator
          (or, if the map has no comparator, using natural ordering).
          Implementations may, but are not required to, throw this
          exception if <code>fromKey</code> or <code>toKey</code>
          cannot be compared to keys currently in the map.
 @throw NullPointerExceptionif <code>fromKey</code> or <code>toKey</code>
          is null and this map does not permit null keys
 @throw IllegalArgumentExceptionif <code>fromKey</code> is greater than
          <code>toKey</code>; or if this map itself has a restricted
          range, and <code>fromKey</code> or <code>toKey</code> lies
          outside the bounds of the range
 */
- (id<JavaUtilSortedMap> __nonnull)subMapWithId:(id)fromKey
                                         withId:(id)toKey;

/*!
 @brief Returns a view of the portion of this map whose keys are
  strictly less than <code>toKey</code>.The returned map is backed
  by this map, so changes in the returned map are reflected in
  this map, and vice-versa.
 The returned map supports all
  optional map operations that this map supports. 
 <p>The returned map will throw an <code>IllegalArgumentException</code>
  on an attempt to insert a key outside its range.
 @param toKey high endpoint (exclusive) of the keys in the returned map
 @return a view of the portion of this map whose keys are strictly
          less than <code>toKey</code>
 @throw ClassCastExceptionif <code>toKey</code> is not compatible
          with this map's comparator (or, if the map has no comparator,
          if <code>toKey</code> does not implement <code>Comparable</code>).
          Implementations may, but are not required to, throw this
          exception if <code>toKey</code> cannot be compared to keys
          currently in the map.
 @throw NullPointerExceptionif <code>toKey</code> is null and
          this map does not permit null keys
 @throw IllegalArgumentExceptionif this map itself has a
          restricted range, and <code>toKey</code> lies outside the
          bounds of the range
 */
- (id<JavaUtilSortedMap> __nonnull)headMapWithId:(id)toKey;

/*!
 @brief Returns a view of the portion of this map whose keys are
  greater than or equal to <code>fromKey</code>.The returned map is
  backed by this map, so changes in the returned map are
  reflected in this map, and vice-versa.
 The returned map
  supports all optional map operations that this map supports. 
 <p>The returned map will throw an <code>IllegalArgumentException</code>
  on an attempt to insert a key outside its range.
 @param fromKey low endpoint (inclusive) of the keys in the returned map
 @return a view of the portion of this map whose keys are greater
          than or equal to <code>fromKey</code>
 @throw ClassCastExceptionif <code>fromKey</code> is not compatible
          with this map's comparator (or, if the map has no comparator,
          if <code>fromKey</code> does not implement <code>Comparable</code>).
          Implementations may, but are not required to, throw this
          exception if <code>fromKey</code> cannot be compared to keys
          currently in the map.
 @throw NullPointerExceptionif <code>fromKey</code> is null and
          this map does not permit null keys
 @throw IllegalArgumentExceptionif this map itself has a
          restricted range, and <code>fromKey</code> lies outside the
          bounds of the range
 */
- (id<JavaUtilSortedMap> __nonnull)tailMapWithId:(id)fromKey;

/*!
 @brief Returns the first (lowest) key currently in this map.
 @return the first (lowest) key currently in this map
 @throw NoSuchElementExceptionif this map is empty
 */
- (id)firstKey;

/*!
 @brief Returns the last (highest) key currently in this map.
 @return the last (highest) key currently in this map
 @throw NoSuchElementExceptionif this map is empty
 */
- (id)lastKey;

/*!
 @brief Returns a <code>Set</code> view of the keys contained in this map.
 The set's iterator returns the keys in ascending order.
  The set is backed by the map, so changes to the map are
  reflected in the set, and vice-versa.  If the map is modified
  while an iteration over the set is in progress (except through
  the iterator's own <code>remove</code> operation), the results of
  the iteration are undefined.  The set supports element removal,
  which removes the corresponding mapping from the map, via the 
 <code>Iterator.remove</code>, <code>Set.remove</code>,
  <code>removeAll</code>, <code>retainAll</code>, and <code>clear</code>
  operations.  It does not support the <code>add</code> or <code>addAll</code>
  operations.
 @return a set view of the keys contained in this map, sorted in
          ascending order
 */
- (id<JavaUtilSet> __nonnull)keySet;

/*!
 @brief Returns a <code>Collection</code> view of the values contained in this map.
 The collection's iterator returns the values in ascending order
  of the corresponding keys.
  The collection is backed by the map, so changes to the map are
  reflected in the collection, and vice-versa.  If the map is
  modified while an iteration over the collection is in progress
  (except through the iterator's own <code>remove</code> operation),
  the results of the iteration are undefined.  The collection
  supports element removal, which removes the corresponding
  mapping from the map, via the <code>Iterator.remove</code>,
  <code>Collection.remove</code>, <code>removeAll</code>,
  <code>retainAll</code> and <code>clear</code> operations.  It does not
  support the <code>add</code> or <code>addAll</code> operations.
 @return a collection view of the values contained in this map,
          sorted in ascending key order
 */
- (id<JavaUtilCollection> __nonnull)values;

/*!
 @brief Returns a <code>Set</code> view of the mappings contained in this map.
 The set's iterator returns the entries in ascending key order.
  The set is backed by the map, so changes to the map are
  reflected in the set, and vice-versa.  If the map is modified
  while an iteration over the set is in progress (except through
  the iterator's own <code>remove</code> operation, or through the 
 <code>setValue</code> operation on a map entry returned by the
  iterator) the results of the iteration are undefined.  The set
  supports element removal, which removes the corresponding
  mapping from the map, via the <code>Iterator.remove</code>,
  <code>Set.remove</code>, <code>removeAll</code>, <code>retainAll</code> and 
 <code>clear</code> operations.  It does not support the 
 <code>add</code> or <code>addAll</code> operations.
 @return a set view of the mappings contained in this map,
          sorted in ascending key order
 */
- (id<JavaUtilSet> __nonnull)entrySet;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilSortedMap)

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilSortedMap)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilSortedMap")
