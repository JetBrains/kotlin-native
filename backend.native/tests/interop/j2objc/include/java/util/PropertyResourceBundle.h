//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/PropertyResourceBundle.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilPropertyResourceBundle")
#ifdef RESTRICT_JavaUtilPropertyResourceBundle
#define INCLUDE_ALL_JavaUtilPropertyResourceBundle 0
#else
#define INCLUDE_ALL_JavaUtilPropertyResourceBundle 1
#endif
#undef RESTRICT_JavaUtilPropertyResourceBundle

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilPropertyResourceBundle_) && (INCLUDE_ALL_JavaUtilPropertyResourceBundle || defined(INCLUDE_JavaUtilPropertyResourceBundle))
#define JavaUtilPropertyResourceBundle_

#define RESTRICT_JavaUtilResourceBundle 1
#define INCLUDE_JavaUtilResourceBundle 1
#include "java/util/ResourceBundle.h"

@class JavaIoInputStream;
@class JavaIoReader;
@protocol JavaUtilEnumeration;
@protocol JavaUtilSet;

/*!
 @brief <code>PropertyResourceBundle</code> is a concrete subclass of 
 <code>ResourceBundle</code> that manages resources for a locale
  using a set of static strings from a property file.See
  <code>ResourceBundle</code> for more information about resource
  bundles.
 <p>
  Unlike other types of resource bundle, you don't subclass 
 <code>PropertyResourceBundle</code>.  Instead, you supply properties
  files containing the resource data.  <code>ResourceBundle.getBundle</code>
  will automatically look for the appropriate properties file and create a 
 <code>PropertyResourceBundle</code> that refers to it. See 
 <code>ResourceBundle.getBundle</code>
  for a complete description of the search and instantiation strategy. 
 <p>
  The following <a name="sample">example</a> shows a member of a resource
  bundle family with the base name "MyResources".
  The text defines the bundle "MyResources_de",
  the German member of the bundle family.
  This member is based on <code>PropertyResourceBundle</code>, and the text
  therefore is the content of the file "MyResources_de.properties"
  (a related <a href="ListResourceBundle.html#sample">example</a> shows
  how you can add bundles to this family that are implemented as subclasses
  of <code>ListResourceBundle</code>).
  The keys in this example are of the form "s1" etc. The actual
  keys are entirely up to your choice, so long as they are the same as
  the keys you use in your program to retrieve the objects from the bundle.
  Keys are case-sensitive. 
 <blockquote>
  @code

  # MessageFormat pattern
  s1=Die Platte \"{1}\" enth&auml;lt {0}.
  # location of {0} in pattern
  s2=1
  # sample disk name
  s3=Meine Platte
  # first ChoiceFormat choice
  s4=keine Dateien
  # second ChoiceFormat choice
  s5=eine Datei
  # third ChoiceFormat choice
  s6={0,number} Dateien
  # sample date
  s7=3. M&auml;rz 1996 
  
@endcode
  </blockquote>
  
 <p>
  The implementation of a <code>PropertyResourceBundle</code> subclass must be
  thread-safe if it's simultaneously used by multiple threads. The default
  implementations of the non-abstract methods in this class are thread-safe. 
 <p>
  <strong>Note:</strong> PropertyResourceBundle can be constructed either
  from an InputStream or a Reader, which represents a property file.
  Constructing a PropertyResourceBundle instance from an InputStream requires
  that the input stream be encoded in ISO-8859-1.  In that case, characters
  that cannot be represented in ISO-8859-1 encoding must be represented by Unicode Escapes
  as defined in section 3.3 of 
 <cite>The Java&trade; Language Specification</cite>
  whereas the other constructor which takes a Reader does not have that limitation.
 - seealso: ResourceBundle
 - seealso: ListResourceBundle
 - seealso: Properties
 @since JDK1.1
 */
@interface JavaUtilPropertyResourceBundle : JavaUtilResourceBundle

#pragma mark Public

/*!
 @brief Creates a property resource bundle from an <code>InputStream</code>
 .The property file read with this constructor
  must be encoded in ISO-8859-1.
 @param stream an InputStream that represents a property file         to read from.
 @throw IOExceptionif an I/O error occurs
 @throw NullPointerExceptionif <code>stream</code> is null
 @throw IllegalArgumentExceptionif <code>stream</code> contains a
      malformed Unicode escape sequence.
 */
- (instancetype __nonnull)initWithJavaIoInputStream:(JavaIoInputStream *)stream;

/*!
 @brief Creates a property resource bundle from a <code>Reader</code>
 .Unlike the constructor 
 <code>PropertyResourceBundle(InputStream)</code>,
  there is no limitation as to the encoding of the input property file.
 @param reader a Reader that represents a property file to         read from.
 @throw IOExceptionif an I/O error occurs
 @throw NullPointerExceptionif <code>reader</code> is null
 @throw IllegalArgumentExceptionif a malformed Unicode escape sequence appears
      from <code>reader</code>.
 @since 1.6
 */
- (instancetype __nonnull)initWithJavaIoReader:(JavaIoReader *)reader;

/*!
 @brief Returns an <code>Enumeration</code> of the keys contained in
  this <code>ResourceBundle</code> and its parent bundles.
 @return an <code>Enumeration</code> of the keys contained in
          this <code>ResourceBundle</code> and its parent bundles.
 - seealso: #keySet()
 */
- (id<JavaUtilEnumeration>)getKeys;

- (id)handleGetObjectWithNSString:(NSString *)key;

#pragma mark Protected

/*!
 @brief Returns a <code>Set</code> of the keys contained 
 <em>only</em> in this <code>ResourceBundle</code>.
 @return a <code>Set</code> of the keys contained only in this
          <code>ResourceBundle</code>
 @since 1.6
 - seealso: #keySet()
 */
- (id<JavaUtilSet>)handleKeySet;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilPropertyResourceBundle)

FOUNDATION_EXPORT void JavaUtilPropertyResourceBundle_initWithJavaIoInputStream_(JavaUtilPropertyResourceBundle *self, JavaIoInputStream *stream);

FOUNDATION_EXPORT JavaUtilPropertyResourceBundle *new_JavaUtilPropertyResourceBundle_initWithJavaIoInputStream_(JavaIoInputStream *stream) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilPropertyResourceBundle *create_JavaUtilPropertyResourceBundle_initWithJavaIoInputStream_(JavaIoInputStream *stream);

FOUNDATION_EXPORT void JavaUtilPropertyResourceBundle_initWithJavaIoReader_(JavaUtilPropertyResourceBundle *self, JavaIoReader *reader);

FOUNDATION_EXPORT JavaUtilPropertyResourceBundle *new_JavaUtilPropertyResourceBundle_initWithJavaIoReader_(JavaIoReader *reader) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilPropertyResourceBundle *create_JavaUtilPropertyResourceBundle_initWithJavaIoReader_(JavaIoReader *reader);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilPropertyResourceBundle)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilPropertyResourceBundle")
