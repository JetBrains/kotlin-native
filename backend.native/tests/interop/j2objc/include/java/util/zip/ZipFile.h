//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/zip/ZipFile.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilZipZipFile")
#ifdef RESTRICT_JavaUtilZipZipFile
#define INCLUDE_ALL_JavaUtilZipZipFile 0
#else
#define INCLUDE_ALL_JavaUtilZipZipFile 1
#endif
#undef RESTRICT_JavaUtilZipZipFile

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilZipZipFile_) && (INCLUDE_ALL_JavaUtilZipZipFile || defined(INCLUDE_JavaUtilZipZipFile))
#define JavaUtilZipZipFile_

#define RESTRICT_JavaUtilZipZipConstants 1
#define INCLUDE_JavaUtilZipZipConstants 1
#include "java/util/zip/ZipConstants.h"

#define RESTRICT_JavaIoCloseable 1
#define INCLUDE_JavaIoCloseable 1
#include "java/io/Closeable.h"

@class JavaIoFile;
@class JavaIoInputStream;
@class JavaNioCharsetCharset;
@class JavaUtilZipZipEntry;
@protocol JavaUtilEnumeration;

/*!
 @brief This class is used to read entries from a zip file.
 <p> Unless otherwise noted, passing a <tt>null</tt> argument to a constructor
  or method in this class will cause a <code>NullPointerException</code> to be
  thrown.
 @author David Connelly
 */
@interface JavaUtilZipZipFile : NSObject < JavaUtilZipZipConstants, JavaIoCloseable > {
 @public
  jlong jzfile_;
}
@property (readonly, class) jint OPEN_READ NS_SWIFT_NAME(OPEN_READ);
@property (readonly, class) jint OPEN_DELETE NS_SWIFT_NAME(OPEN_DELETE);

+ (jint)OPEN_READ;

+ (jint)OPEN_DELETE;

#pragma mark Public

/*!
 @brief Opens a ZIP file for reading given the specified File object.
 <p>The UTF-8 <code>charset</code> is used to
  decode the entry names and comments.
 @param file the ZIP file to be opened for reading
 @throw ZipExceptionif a ZIP format error has occurred
 @throw IOExceptionif an I/O error has occurred
 */
- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)file;

/*!
 @brief Opens a ZIP file for reading given the specified File object.
 @param file the ZIP file to be opened for reading
 @param charset The 
 charset  to be         used to decode the ZIP entry name and comment (ignored if
          the  <a href="package-summary.html#lang_encoding">
   language         encoding bit </a>
   of the ZIP entry's general purpose bit         flag is set).
 @throw ZipExceptionif a ZIP format error has occurred
 @throw IOExceptionif an I/O error has occurred
 @since 1.7
 */
- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)file
                   withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset;

/*!
 @brief Opens a new <code>ZipFile</code> to read from the specified 
 <code>File</code> object in the specified mode.The mode argument
  must be either <tt>OPEN_READ</tt> or <tt>OPEN_READ | OPEN_DELETE</tt>.
 <p>First, if there is a security manager, its <code>checkRead</code>
  method is called with the <code>name</code> argument as its argument to
  ensure the read is allowed. 
 <p>The UTF-8 <code>charset</code> is used to
  decode the entry names and comments
 @param file the ZIP file to be opened for reading
 @param mode the mode in which the file is to be opened
 @throw ZipExceptionif a ZIP format error has occurred
 @throw IOExceptionif an I/O error has occurred
 @throw SecurityExceptionif a security manager exists and
          its <code>checkRead</code> method
          doesn't allow read access to the file,
          or its <code>checkDelete</code> method doesn't allow deleting
          the file when the <tt>OPEN_DELETE</tt> flag is set.
 @throw IllegalArgumentExceptionif the <tt>mode</tt> argument is invalid
 - seealso: SecurityManager#checkRead(java.lang.String)
 @since 1.3
 */
- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)file
                                     withInt:(jint)mode;

/*!
 @brief Opens a new <code>ZipFile</code> to read from the specified 
 <code>File</code> object in the specified mode.The mode argument
  must be either <tt>OPEN_READ</tt> or <tt>OPEN_READ | OPEN_DELETE</tt>.
 <p>First, if there is a security manager, its <code>checkRead</code>
  method is called with the <code>name</code> argument as its argument to
  ensure the read is allowed.
 @param file the ZIP file to be opened for reading
 @param mode the mode in which the file is to be opened
 @param charset the 
 charset  to         be used to decode the ZIP entry name and comment that are not
          encoded by using UTF-8 encoding (indicated by entry's general
          purpose flag).
 @throw ZipExceptionif a ZIP format error has occurred
 @throw IOExceptionif an I/O error has occurred
 @throw SecurityException
 if a security manager exists and its <code>checkRead</code>
          method doesn't allow read access to the file,or its         
 <code>checkDelete</code> method doesn't allow deleting the
          file when the <tt>OPEN_DELETE</tt> flag is set
 @throw IllegalArgumentExceptionif the <tt>mode</tt> argument is invalid
 - seealso: SecurityManager#checkRead(java.lang.String)
 @since 1.7
 */
- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)file
                                     withInt:(jint)mode
                   withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset;

/*!
 @brief Opens a zip file for reading.
 <p>First, if there is a security manager, its <code>checkRead</code>
  method is called with the <code>name</code> argument as its argument
  to ensure the read is allowed. 
 <p>The UTF-8 <code>charset</code> is used to
  decode the entry names and comments.
 @param name the name of the zip file
 @throw ZipExceptionif a ZIP format error has occurred
 @throw IOExceptionif an I/O error has occurred
 @throw SecurityExceptionif a security manager exists and its
          <code>checkRead</code> method doesn't allow read access to the file.
 - seealso: SecurityManager#checkRead(java.lang.String)
 */
- (instancetype __nonnull)initWithNSString:(NSString *)name;

/*!
 @brief Opens a zip file for reading.
 <p>First, if there is a security manager, its <code>checkRead</code>
  method is called with the <code>name</code> argument as its argument
  to ensure the read is allowed.
 @param name the name of the zip file
 @param charset the 
 charset  to         be used to decode the ZIP entry name and comment that are not
          encoded by using UTF-8 encoding (indicated by entry's general
          purpose flag).
 @throw ZipExceptionif a ZIP format error has occurred
 @throw IOExceptionif an I/O error has occurred
 @throw SecurityException
 if a security manager exists and its <code>checkRead</code>
          method doesn't allow read access to the file
 - seealso: SecurityManager#checkRead(java.lang.String)
 @since 1.7
 */
- (instancetype __nonnull)initWithNSString:(NSString *)name
                 withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset;

/*!
 @brief Closes the ZIP file.
 <p> Closing this ZIP file will close all of the input streams
  previously returned by invocations of the <code>getInputStream</code>
  method.
 @throw IOExceptionif an I/O error has occurred
 */
- (void)close;

/*!
 @brief Returns an enumeration of the ZIP file entries.
 @return an enumeration of the ZIP file entries
 @throw IllegalStateExceptionif the zip file has been closed
 */
- (id<JavaUtilEnumeration>)entries;

/*!
 @brief Returns the zip file comment, or null if none.
 @return the comment string for the zip file, or null if none
 @throw IllegalStateExceptionif the zip file has been closed
  Since 1.7
 */
- (NSString *)getComment;

/*!
 @brief Returns the zip file entry for the specified name, or null
  if not found.
 @param name the name of the entry
 @return the zip file entry, or null if not found
 @throw IllegalStateExceptionif the zip file has been closed
 */
- (JavaUtilZipZipEntry *)getEntryWithNSString:(NSString *)name;

/*!
 @brief Returns an input stream for reading the contents of the specified
  zip file entry.
 <p> Closing this ZIP file will, in turn, close all input
  streams that have been returned by invocations of this method.
 @param entry_ the zip file entry
 @return the input stream for reading the contents of the specified
  zip file entry.
 @throw ZipExceptionif a ZIP format error has occurred
 @throw IOExceptionif an I/O error has occurred
 @throw IllegalStateExceptionif the zip file has been closed
 */
- (JavaIoInputStream *)getInputStreamWithJavaUtilZipZipEntry:(JavaUtilZipZipEntry *)entry_;

/*!
 @brief Returns the path name of the ZIP file.
 @return the path name of the ZIP file
 */
- (NSString *)getName;

/*!
 @brief Returns the number of entries in the ZIP file.
 @return the number of entries in the ZIP file
 @throw IllegalStateExceptionif the zip file has been closed
 */
- (jint)size;

/*!
 @brief Returns <code>true</code> if, and only if, the zip file begins with <code>LOCSIG</code>
 .
 */
- (jboolean)startsWithLocHeader;

#pragma mark Protected

/*!
 @brief Ensures that the system resources held by this ZipFile object are
  released when there are no more references to it.
 <p>
  Since the time when GC would invoke this method is undetermined,
  it is strongly recommended that applications invoke the <code>close</code>
  method as soon they have finished accessing this <code>ZipFile</code>.
  This will prevent holding up system resources for an undetermined
  length of time.
 @throw IOExceptionif an I/O error has occurred
 - seealso: java.util.zip.ZipFile#close()
 */
- (void)java_finalize;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(JavaUtilZipZipFile)

/*!
 @brief Mode flag to open a zip file for reading.
 */
inline jint JavaUtilZipZipFile_get_OPEN_READ(void);
#define JavaUtilZipZipFile_OPEN_READ 1
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilZipZipFile, OPEN_READ, jint)

/*!
 @brief Mode flag to open a zip file and mark it for deletion.The file will be
  deleted some time between the moment that it is opened and the moment
  that it is closed, but its contents will remain accessible via the 
 <tt>ZipFile</tt> object until either the close method is invoked or the
  virtual machine exits.
 */
inline jint JavaUtilZipZipFile_get_OPEN_DELETE(void);
#define JavaUtilZipZipFile_OPEN_DELETE 4
J2OBJC_STATIC_FIELD_CONSTANT(JavaUtilZipZipFile, OPEN_DELETE, jint)

FOUNDATION_EXPORT void JavaUtilZipZipFile_initWithNSString_(JavaUtilZipZipFile *self, NSString *name);

FOUNDATION_EXPORT JavaUtilZipZipFile *new_JavaUtilZipZipFile_initWithNSString_(NSString *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilZipZipFile *create_JavaUtilZipZipFile_initWithNSString_(NSString *name);

FOUNDATION_EXPORT void JavaUtilZipZipFile_initWithJavaIoFile_withInt_(JavaUtilZipZipFile *self, JavaIoFile *file, jint mode);

FOUNDATION_EXPORT JavaUtilZipZipFile *new_JavaUtilZipZipFile_initWithJavaIoFile_withInt_(JavaIoFile *file, jint mode) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilZipZipFile *create_JavaUtilZipZipFile_initWithJavaIoFile_withInt_(JavaIoFile *file, jint mode);

FOUNDATION_EXPORT void JavaUtilZipZipFile_initWithJavaIoFile_(JavaUtilZipZipFile *self, JavaIoFile *file);

FOUNDATION_EXPORT JavaUtilZipZipFile *new_JavaUtilZipZipFile_initWithJavaIoFile_(JavaIoFile *file) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilZipZipFile *create_JavaUtilZipZipFile_initWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT void JavaUtilZipZipFile_initWithJavaIoFile_withInt_withJavaNioCharsetCharset_(JavaUtilZipZipFile *self, JavaIoFile *file, jint mode, JavaNioCharsetCharset *charset);

FOUNDATION_EXPORT JavaUtilZipZipFile *new_JavaUtilZipZipFile_initWithJavaIoFile_withInt_withJavaNioCharsetCharset_(JavaIoFile *file, jint mode, JavaNioCharsetCharset *charset) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilZipZipFile *create_JavaUtilZipZipFile_initWithJavaIoFile_withInt_withJavaNioCharsetCharset_(JavaIoFile *file, jint mode, JavaNioCharsetCharset *charset);

FOUNDATION_EXPORT void JavaUtilZipZipFile_initWithNSString_withJavaNioCharsetCharset_(JavaUtilZipZipFile *self, NSString *name, JavaNioCharsetCharset *charset);

FOUNDATION_EXPORT JavaUtilZipZipFile *new_JavaUtilZipZipFile_initWithNSString_withJavaNioCharsetCharset_(NSString *name, JavaNioCharsetCharset *charset) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilZipZipFile *create_JavaUtilZipZipFile_initWithNSString_withJavaNioCharsetCharset_(NSString *name, JavaNioCharsetCharset *charset);

FOUNDATION_EXPORT void JavaUtilZipZipFile_initWithJavaIoFile_withJavaNioCharsetCharset_(JavaUtilZipZipFile *self, JavaIoFile *file, JavaNioCharsetCharset *charset);

FOUNDATION_EXPORT JavaUtilZipZipFile *new_JavaUtilZipZipFile_initWithJavaIoFile_withJavaNioCharsetCharset_(JavaIoFile *file, JavaNioCharsetCharset *charset) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilZipZipFile *create_JavaUtilZipZipFile_initWithJavaIoFile_withJavaNioCharsetCharset_(JavaIoFile *file, JavaNioCharsetCharset *charset);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilZipZipFile)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilZipZipFile")
