//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/zip/CheckedOutputStream.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilZipCheckedOutputStream")
#ifdef RESTRICT_JavaUtilZipCheckedOutputStream
#define INCLUDE_ALL_JavaUtilZipCheckedOutputStream 0
#else
#define INCLUDE_ALL_JavaUtilZipCheckedOutputStream 1
#endif
#undef RESTRICT_JavaUtilZipCheckedOutputStream

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilZipCheckedOutputStream_) && (INCLUDE_ALL_JavaUtilZipCheckedOutputStream || defined(INCLUDE_JavaUtilZipCheckedOutputStream))
#define JavaUtilZipCheckedOutputStream_

#define RESTRICT_JavaIoFilterOutputStream 1
#define INCLUDE_JavaIoFilterOutputStream 1
#include "java/io/FilterOutputStream.h"

@class IOSByteArray;
@class JavaIoOutputStream;
@protocol JavaUtilZipChecksum;

/*!
 @brief An output stream that also maintains a checksum of the data being
  written.The checksum can then be used to verify the integrity of
  the output data.
 - seealso: Checksum
 @author David Connelly
 */
@interface JavaUtilZipCheckedOutputStream : JavaIoFilterOutputStream

#pragma mark Public

/*!
 @brief Creates an output stream with the specified Checksum.
 @param outArg the output stream
 @param cksum the checksum
 */
- (instancetype __nonnull)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                             withJavaUtilZipChecksum:(id<JavaUtilZipChecksum>)cksum;

/*!
 @brief Returns the Checksum for this output stream.
 @return the Checksum
 */
- (id<JavaUtilZipChecksum>)getChecksum;

/*!
 @brief Writes an array of bytes.Will block until the bytes are
  actually written.
 @param b the data to be written
 @param off the start offset of the data
 @param len the number of bytes to be written
 @throw IOExceptionif an I/O error has occurred
 */
- (void)writeWithByteArray:(IOSByteArray *)b
                   withInt:(jint)off
                   withInt:(jint)len;

/*!
 @brief Writes a byte.Will block until the byte is actually written.
 @param b the byte to be written
 @throw IOExceptionif an I/O error has occurred
 */
- (void)writeWithInt:(jint)b;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaIoOutputStream:(JavaIoOutputStream *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilZipCheckedOutputStream)

FOUNDATION_EXPORT void JavaUtilZipCheckedOutputStream_initWithJavaIoOutputStream_withJavaUtilZipChecksum_(JavaUtilZipCheckedOutputStream *self, JavaIoOutputStream *outArg, id<JavaUtilZipChecksum> cksum);

FOUNDATION_EXPORT JavaUtilZipCheckedOutputStream *new_JavaUtilZipCheckedOutputStream_initWithJavaIoOutputStream_withJavaUtilZipChecksum_(JavaIoOutputStream *outArg, id<JavaUtilZipChecksum> cksum) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilZipCheckedOutputStream *create_JavaUtilZipCheckedOutputStream_initWithJavaIoOutputStream_withJavaUtilZipChecksum_(JavaIoOutputStream *outArg, id<JavaUtilZipChecksum> cksum);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilZipCheckedOutputStream)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilZipCheckedOutputStream")
