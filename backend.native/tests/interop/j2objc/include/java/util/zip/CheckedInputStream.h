//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/zip/CheckedInputStream.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilZipCheckedInputStream")
#ifdef RESTRICT_JavaUtilZipCheckedInputStream
#define INCLUDE_ALL_JavaUtilZipCheckedInputStream 0
#else
#define INCLUDE_ALL_JavaUtilZipCheckedInputStream 1
#endif
#undef RESTRICT_JavaUtilZipCheckedInputStream

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilZipCheckedInputStream_) && (INCLUDE_ALL_JavaUtilZipCheckedInputStream || defined(INCLUDE_JavaUtilZipCheckedInputStream))
#define JavaUtilZipCheckedInputStream_

#define RESTRICT_JavaIoFilterInputStream 1
#define INCLUDE_JavaIoFilterInputStream 1
#include "java/io/FilterInputStream.h"

@class IOSByteArray;
@class JavaIoInputStream;
@protocol JavaUtilZipChecksum;

/*!
 @brief An input stream that also maintains a checksum of the data being read.
 The checksum can then be used to verify the integrity of the input data.
 - seealso: Checksum
 @author David Connelly
 */
@interface JavaUtilZipCheckedInputStream : JavaIoFilterInputStream

#pragma mark Public

/*!
 @brief Creates an input stream using the specified Checksum.
 @param inArg the input stream
 @param cksum the Checksum
 */
- (instancetype __nonnull)initWithJavaIoInputStream:(JavaIoInputStream *)inArg
                            withJavaUtilZipChecksum:(id<JavaUtilZipChecksum>)cksum;

/*!
 @brief Returns the Checksum for this input stream.
 @return the Checksum value
 */
- (id<JavaUtilZipChecksum>)getChecksum;

/*!
 @brief Reads a byte.Will block if no input is available.
 @return the byte read, or -1 if the end of the stream is reached.
 @throw IOExceptionif an I/O error has occurred
 */
- (jint)read;

/*!
 @brief Reads into an array of bytes.If <code>len</code> is not zero, the method
  blocks until some input is available; otherwise, no
  bytes are read and <code>0</code> is returned.
 @param buf the buffer into which the data is read
 @param off the start offset in the destination array  <code> b </code>
 @param len the maximum number of bytes read
 @return the actual number of bytes read, or -1 if the end
             of the stream is reached.
 @throw NullPointerExceptionIf <code>buf</code> is <code>null</code>.
 @throw IndexOutOfBoundsExceptionIf <code>off</code> is negative, 
 <code>len</code> is negative, or <code>len</code> is greater than 
 <code>buf.length - off</code>
 @throw IOExceptionif an I/O error has occurred
 */
- (jint)readWithByteArray:(IOSByteArray *)buf
                  withInt:(jint)off
                  withInt:(jint)len;

/*!
 @brief Skips specified number of bytes of input.
 @param n the number of bytes to skip
 @return the actual number of bytes skipped
 @throw IOExceptionif an I/O error has occurred
 */
- (jlong)skipWithLong:(jlong)n;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaIoInputStream:(JavaIoInputStream *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilZipCheckedInputStream)

FOUNDATION_EXPORT void JavaUtilZipCheckedInputStream_initWithJavaIoInputStream_withJavaUtilZipChecksum_(JavaUtilZipCheckedInputStream *self, JavaIoInputStream *inArg, id<JavaUtilZipChecksum> cksum);

FOUNDATION_EXPORT JavaUtilZipCheckedInputStream *new_JavaUtilZipCheckedInputStream_initWithJavaIoInputStream_withJavaUtilZipChecksum_(JavaIoInputStream *inArg, id<JavaUtilZipChecksum> cksum) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilZipCheckedInputStream *create_JavaUtilZipCheckedInputStream_initWithJavaIoInputStream_withJavaUtilZipChecksum_(JavaIoInputStream *inArg, id<JavaUtilZipChecksum> cksum);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilZipCheckedInputStream)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilZipCheckedInputStream")
