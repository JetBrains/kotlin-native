//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/zip/DeflaterInputStream.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilZipDeflaterInputStream")
#ifdef RESTRICT_JavaUtilZipDeflaterInputStream
#define INCLUDE_ALL_JavaUtilZipDeflaterInputStream 0
#else
#define INCLUDE_ALL_JavaUtilZipDeflaterInputStream 1
#endif
#undef RESTRICT_JavaUtilZipDeflaterInputStream

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilZipDeflaterInputStream_) && (INCLUDE_ALL_JavaUtilZipDeflaterInputStream || defined(INCLUDE_JavaUtilZipDeflaterInputStream))
#define JavaUtilZipDeflaterInputStream_

#define RESTRICT_JavaIoFilterInputStream 1
#define INCLUDE_JavaIoFilterInputStream 1
#include "java/io/FilterInputStream.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaUtilZipDeflater;

/*!
 @brief Implements an input stream filter for compressing data in the "deflate"
  compression format.
 @since 1.6
 @author David R Tribble (david@@tribble.com)
 - seealso: DeflaterOutputStream
 - seealso: InflaterOutputStream
 - seealso: InflaterInputStream
 */
@interface JavaUtilZipDeflaterInputStream : JavaIoFilterInputStream {
 @public
  /*!
   @brief Compressor for this stream.
   */
  JavaUtilZipDeflater *def_;
  /*!
   @brief Input buffer for reading compressed data.
   */
  IOSByteArray *buf_;
}

#pragma mark Public

/*!
 @brief Creates a new input stream with a default compressor and buffer
  size.
 @param inArg input stream to read the uncompressed data to
 @throw NullPointerExceptionif <code>in</code> is null
 */
- (instancetype __nonnull)initWithJavaIoInputStream:(JavaIoInputStream *)inArg;

/*!
 @brief Creates a new input stream with the specified compressor and a
  default buffer size.
 @param inArg input stream to read the uncompressed data to
 @param defl compressor ("deflater") for this stream
 @throw NullPointerExceptionif <code>in</code> or <code>defl</code> is null
 */
- (instancetype __nonnull)initWithJavaIoInputStream:(JavaIoInputStream *)inArg
                            withJavaUtilZipDeflater:(JavaUtilZipDeflater *)defl;

/*!
 @brief Creates a new input stream with the specified compressor and buffer
  size.
 @param inArg input stream to read the uncompressed data to
 @param defl compressor ("deflater") for this stream
 @param bufLen compression buffer size
 @throw IllegalArgumentExceptionif <code>bufLen <= 0</code>
 @throw NullPointerExceptionif <code>in</code> or <code>defl</code> is null
 */
- (instancetype __nonnull)initWithJavaIoInputStream:(JavaIoInputStream *)inArg
                            withJavaUtilZipDeflater:(JavaUtilZipDeflater *)defl
                                            withInt:(jint)bufLen;

/*!
 @brief Returns 0 after EOF has been reached, otherwise always return 1.
 <p>
  Programs should not count on this method to return the actual number
  of bytes that could be read without blocking
 @return zero after the end of the underlying input stream has been
  reached, otherwise always returns 1
 @throw IOExceptionif an I/O error occurs or if this stream is
  already closed
 */
- (jint)available;

/*!
 @brief Closes this input stream and its underlying input stream, discarding
  any pending uncompressed data.
 @throw IOExceptionif an I/O error occurs
 */
- (void)close;

/*!
 @brief <i>This operation is not supported</i>.
 @param limit maximum bytes that can be read before invalidating the position marker
 */
- (void)markWithInt:(jint)limit;

/*!
 @brief Always returns <code>false</code> because this input stream does not support
  the <code>mark()</code> and <code>reset()</code> methods.
 @return false, always
 */
- (jboolean)markSupported;

/*!
 @brief Reads a single byte of compressed data from the input stream.
 This method will block until some input can be read and compressed.
 @return a single byte of compressed data, or -1 if the end of the
  uncompressed input stream is reached
 @throw IOExceptionif an I/O error occurs or if this stream is
  already closed
 */
- (jint)read;

/*!
 @brief Reads compressed data into a byte array.
 This method will block until some input can be read and compressed.
 @param b buffer into which the data is read
 @param off starting offset of the data within <code>b</code>
 @param len maximum number of compressed bytes to read into <code>b</code>
 @return the actual number of bytes read, or -1 if the end of the
  uncompressed input stream is reached
 @throw IndexOutOfBoundsExceptionif <code>len > b.length - off</code>
 @throw IOExceptionif an I/O error occurs or if this input stream is
  already closed
 */
- (jint)readWithByteArray:(IOSByteArray *)b
                  withInt:(jint)off
                  withInt:(jint)len;

/*!
 @brief <i>This operation is not supported</i>.
 @throw IOExceptionalways thrown
 */
- (void)reset;

/*!
 @brief Skips over and discards data from the input stream.
 This method may block until the specified number of bytes are read and
  skipped. <em>Note:</em> While <code>n</code> is given as a <code>long</code>,
  the maximum number of bytes which can be skipped is 
 <code>Integer.MAX_VALUE</code>.
 @param n number of bytes to be skipped
 @return the actual number of bytes skipped
 @throw IOExceptionif an I/O error occurs or if this stream is
  already closed
 */
- (jlong)skipWithLong:(jlong)n;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilZipDeflaterInputStream)

J2OBJC_FIELD_SETTER(JavaUtilZipDeflaterInputStream, def_, JavaUtilZipDeflater *)
J2OBJC_FIELD_SETTER(JavaUtilZipDeflaterInputStream, buf_, IOSByteArray *)

FOUNDATION_EXPORT void JavaUtilZipDeflaterInputStream_initWithJavaIoInputStream_(JavaUtilZipDeflaterInputStream *self, JavaIoInputStream *inArg);

FOUNDATION_EXPORT JavaUtilZipDeflaterInputStream *new_JavaUtilZipDeflaterInputStream_initWithJavaIoInputStream_(JavaIoInputStream *inArg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilZipDeflaterInputStream *create_JavaUtilZipDeflaterInputStream_initWithJavaIoInputStream_(JavaIoInputStream *inArg);

FOUNDATION_EXPORT void JavaUtilZipDeflaterInputStream_initWithJavaIoInputStream_withJavaUtilZipDeflater_(JavaUtilZipDeflaterInputStream *self, JavaIoInputStream *inArg, JavaUtilZipDeflater *defl);

FOUNDATION_EXPORT JavaUtilZipDeflaterInputStream *new_JavaUtilZipDeflaterInputStream_initWithJavaIoInputStream_withJavaUtilZipDeflater_(JavaIoInputStream *inArg, JavaUtilZipDeflater *defl) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilZipDeflaterInputStream *create_JavaUtilZipDeflaterInputStream_initWithJavaIoInputStream_withJavaUtilZipDeflater_(JavaIoInputStream *inArg, JavaUtilZipDeflater *defl);

FOUNDATION_EXPORT void JavaUtilZipDeflaterInputStream_initWithJavaIoInputStream_withJavaUtilZipDeflater_withInt_(JavaUtilZipDeflaterInputStream *self, JavaIoInputStream *inArg, JavaUtilZipDeflater *defl, jint bufLen);

FOUNDATION_EXPORT JavaUtilZipDeflaterInputStream *new_JavaUtilZipDeflaterInputStream_initWithJavaIoInputStream_withJavaUtilZipDeflater_withInt_(JavaIoInputStream *inArg, JavaUtilZipDeflater *defl, jint bufLen) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilZipDeflaterInputStream *create_JavaUtilZipDeflaterInputStream_initWithJavaIoInputStream_withJavaUtilZipDeflater_withInt_(JavaIoInputStream *inArg, JavaUtilZipDeflater *defl, jint bufLen);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilZipDeflaterInputStream)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilZipDeflaterInputStream")
