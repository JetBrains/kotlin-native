//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/Observable.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilObservable")
#ifdef RESTRICT_JavaUtilObservable
#define INCLUDE_ALL_JavaUtilObservable 0
#else
#define INCLUDE_ALL_JavaUtilObservable 1
#endif
#undef RESTRICT_JavaUtilObservable

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilObservable_) && (INCLUDE_ALL_JavaUtilObservable || defined(INCLUDE_JavaUtilObservable))
#define JavaUtilObservable_

@protocol JavaUtilObserver;

/*!
 @brief This class represents an observable object, or "data"
  in the model-view paradigm.It can be subclassed to represent an
  object that the application wants to have observed.
 <p>
  An observable object can have one or more observers. An observer
  may be any object that implements interface <tt>Observer</tt>. After an
  observable instance changes, an application calling the 
 <code>Observable</code>'s <code>notifyObservers</code> method
  causes all of its observers to be notified of the change by a call
  to their <code>update</code> method. 
 <p>
  The order in which notifications will be delivered is unspecified.
  The default implementation provided in the Observable class will
  notify Observers in the order in which they registered interest, but
  subclasses may change this order, use no guaranteed order, deliver
  notifications on separate threads, or may guarantee that their
  subclass follows this order, as they choose. 
 <p>
  Note that this notification mechanism is has nothing to do with threads
  and is completely separate from the <tt>wait</tt> and <tt>notify</tt>
  mechanism of class <tt>Object</tt>.
  <p>
  When an observable object is newly created, its set of observers is
  empty. Two observers are considered the same if and only if the 
 <tt>equals</tt> method returns true for them.
 @author Chris Warth
 - seealso: java.util.Observable#notifyObservers()
 - seealso: java.util.Observable#notifyObservers(java.lang.Object)
 - seealso: java.util.Observer
 - seealso: java.util.Observer#update(java.util.Observable, java.lang.Object)
 @since JDK1.0
 */
@interface JavaUtilObservable : NSObject

#pragma mark Public

/*!
 @brief Construct an Observable with zero Observers.
 */
- (instancetype __nonnull)init;

/*!
 @brief Adds an observer to the set of observers for this object, provided
  that it is not the same as some observer already in the set.
 The order in which notifications will be delivered to multiple
  observers is not specified. See the class comment.
 @param o an observer to be added.
 @throw NullPointerExceptionif the parameter o is null.
 */
- (void)addObserverWithJavaUtilObserver:(id<JavaUtilObserver>)o;

/*!
 @brief Returns the number of observers of this <tt>Observable</tt> object.
 @return the number of observers of this object.
 */
- (jint)countObservers;

/*!
 @brief Deletes an observer from the set of observers of this object.
 Passing <CODE>null</CODE> to this method will have no effect.
 @param o the observer to be deleted.
 */
- (void)deleteObserverWithJavaUtilObserver:(id<JavaUtilObserver>)o;

/*!
 @brief Clears the observer list so that this object no longer has any observers.
 */
- (void)deleteObservers;

/*!
 @brief Tests if this object has changed.
 @return <code>true</code> if and only if the <code>setChanged</code>
           method has been called more recently than the          
 <code>clearChanged</code> method on this object;
           <code>false</code> otherwise.
 - seealso: java.util.Observable#clearChanged()
 - seealso: java.util.Observable#setChanged()
 */
- (jboolean)hasChanged;

/*!
 @brief If this object has changed, as indicated by the 
 <code>hasChanged</code> method, then notify all of its observers
  and then call the <code>clearChanged</code> method to
  indicate that this object has no longer changed.
 <p>
  Each observer has its <code>update</code> method called with two
  arguments: this observable object and <code>null</code>. In other
  words, this method is equivalent to: 
 <blockquote><tt>
  notifyObservers(null)</tt></blockquote>
 - seealso: java.util.Observable#clearChanged()
 - seealso: java.util.Observable#hasChanged()
 - seealso: java.util.Observer#update(java.util.Observable, java.lang.Object)
 */
- (void)notifyObservers;

/*!
 @brief If this object has changed, as indicated by the 
 <code>hasChanged</code> method, then notify all of its observers
  and then call the <code>clearChanged</code> method to indicate
  that this object has no longer changed.
 <p>
  Each observer has its <code>update</code> method called with two
  arguments: this observable object and the <code>arg</code> argument.
 @param arg any object.
 - seealso: java.util.Observable#clearChanged()
 - seealso: java.util.Observable#hasChanged()
 - seealso: java.util.Observer#update(java.util.Observable, java.lang.Object)
 */
- (void)notifyObserversWithId:(id)arg;

#pragma mark Protected

/*!
 @brief Indicates that this object has no longer changed, or that it has
  already notified all of its observers of its most recent change,
  so that the <tt>hasChanged</tt> method will now return <tt>false</tt>.
 This method is called automatically by the 
 <code>notifyObservers</code> methods.
 - seealso: java.util.Observable#notifyObservers()
 - seealso: java.util.Observable#notifyObservers(java.lang.Object)
 */
- (void)clearChanged;

/*!
 @brief Marks this <tt>Observable</tt> object as having been changed; the 
 <tt>hasChanged</tt> method will now return <tt>true</tt>.
 */
- (void)setChanged;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilObservable)

FOUNDATION_EXPORT void JavaUtilObservable_init(JavaUtilObservable *self);

FOUNDATION_EXPORT JavaUtilObservable *new_JavaUtilObservable_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilObservable *create_JavaUtilObservable_init(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilObservable)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilObservable")
