//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/Vector.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilVector")
#ifdef RESTRICT_JavaUtilVector
#define INCLUDE_ALL_JavaUtilVector 0
#else
#define INCLUDE_ALL_JavaUtilVector 1
#endif
#undef RESTRICT_JavaUtilVector
#ifdef INCLUDE_JavaUtilVector_ListItr
#define INCLUDE_JavaUtilVector_Itr 1
#endif

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilVector_) && (INCLUDE_ALL_JavaUtilVector || defined(INCLUDE_JavaUtilVector))
#define JavaUtilVector_

#define RESTRICT_JavaUtilAbstractList 1
#define INCLUDE_JavaUtilAbstractList 1
#include "java/util/AbstractList.h"

#define RESTRICT_JavaUtilList 1
#define INCLUDE_JavaUtilList 1
#include "java/util/List.h"

#define RESTRICT_JavaUtilRandomAccess 1
#define INCLUDE_JavaUtilRandomAccess 1
#include "java/util/RandomAccess.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class IOSObjectArray;
@protocol JavaUtilCollection;
@protocol JavaUtilComparator;
@protocol JavaUtilEnumeration;
@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilFunctionPredicate;
@protocol JavaUtilFunctionUnaryOperator;
@protocol JavaUtilIterator;
@protocol JavaUtilListIterator;
@protocol JavaUtilSpliterator;

/*!
 @brief The <code>Vector</code> class implements a growable array of
  objects.Like an array, it contains components that can be
  accessed using an integer index.
 However, the size of a 
 <code>Vector</code> can grow or shrink as needed to accommodate
  adding and removing items after the <code>Vector</code> has been created. 
 <p>Each vector tries to optimize storage management by maintaining a 
 <code>capacity</code> and a <code>capacityIncrement</code>. The 
 <code>capacity</code> is always at least as large as the vector
  size; it is usually larger because as components are added to the
  vector, the vector's storage increases in chunks the size of 
 <code>capacityIncrement</code>. An application can increase the
  capacity of a vector before inserting a large number of
  components; this reduces the amount of incremental reallocation. 
 <p><a name="fail-fast">
  The iterators returned by this class's <code>iterator</code> and 
 <code>listIterator</code> methods are <em>fail-fast</em></a>:
  if the vector is structurally modified at any time after the iterator is
  created, in any way except through the iterator's own 
 <code>remove</code> or 
 <code>add</code> methods, the iterator will throw a 
 <code>ConcurrentModificationException</code>.  Thus, in the face of
  concurrent modification, the iterator fails quickly and cleanly, rather
  than risking arbitrary, non-deterministic behavior at an undetermined
  time in the future.  The <code>Enumerations</code> returned by
  the <code>elements</code> method are <em>not</em> fail-fast. 
 <p>Note that the fail-fast behavior of an iterator cannot be guaranteed
  as it is, generally speaking, impossible to make any hard guarantees in the
  presence of unsynchronized concurrent modification.  Fail-fast iterators
  throw <code>ConcurrentModificationException</code> on a best-effort basis.
  Therefore, it would be wrong to write a program that depended on this
  exception for its correctness:  <i>the fail-fast behavior of iterators
  should be used only to detect bugs.</i>
  
 <p>As of the Java 2 platform v1.2, this class was retrofitted to
  implement the <code>List</code> interface, making it a member of the 
 <a href="{@@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/collections/index.html">
  Java Collections Framework</a>.  Unlike the new collection
  implementations, <code>Vector</code> is synchronized.  If a thread-safe
  implementation is not needed, it is recommended to use <code>ArrayList</code>
  in place of <code>Vector</code>.
 @author Lee Boynton
 @author Jonathan Payne
 - seealso: Collection
 - seealso: LinkedList
 @since JDK1.0
 */
@interface JavaUtilVector : JavaUtilAbstractList < JavaUtilList, JavaUtilRandomAccess, NSCopying, JavaIoSerializable > {
 @public
  /*!
   @brief The array buffer into which the components of the vector are
  stored.The capacity of the vector is the length of this array buffer,
  and is at least large enough to contain all the vector's elements.
   <p>Any array elements following the last element in the Vector are null.
   */
  IOSObjectArray *elementData_;
  /*!
   @brief The number of valid components in this <code>Vector</code> object.
   Components <code>elementData[0]</code> through 
 <code>elementData[elementCount-1]</code> are the actual items.
   */
  jint elementCount_;
  /*!
   @brief The amount by which the capacity of the vector is automatically
  incremented when its size becomes greater than its capacity.If
  the capacity increment is less than or equal to zero, the capacity
  of the vector is doubled each time it needs to grow.
   */
  jint capacityIncrement_;
}

#pragma mark Public

/*!
 @brief Constructs an empty vector so that its internal data array
  has size <code>10</code> and its standard capacity increment is
  zero.
 */
- (instancetype __nonnull)init;

/*!
 @brief Constructs a vector containing the elements of the specified
  collection, in the order they are returned by the collection's
  iterator.
 @param c the collection whose elements are to be placed into this        vector
 @throw NullPointerExceptionif the specified collection is null
 @since 1.2
 */
- (instancetype __nonnull)initWithJavaUtilCollection:(id<JavaUtilCollection>)c;

/*!
 @brief Constructs an empty vector with the specified initial capacity and
  with its capacity increment equal to zero.
 @param initialCapacity the initial capacity of the vector
 @throw IllegalArgumentExceptionif the specified initial capacity
          is negative
 */
- (instancetype __nonnull)initWithInt:(jint)initialCapacity;

/*!
 @brief Constructs an empty vector with the specified initial capacity and
  capacity increment.
 @param initialCapacity the initial capacity of the vector
 @param capacityIncrement the amount by which the capacity is                               increased when the vector overflows
 @throw IllegalArgumentExceptionif the specified initial capacity
          is negative
 */
- (instancetype __nonnull)initWithInt:(jint)initialCapacity
                              withInt:(jint)capacityIncrement;

/*!
 @brief Appends the specified element to the end of this Vector.
 @param e element to be appended to this Vector
 @return <code>true</code> (as specified by <code>Collection.add</code>)
 @since 1.2
 */
- (jboolean)addWithId:(id)e;

/*!
 @brief Inserts the specified element at the specified position in this Vector.
 Shifts the element currently at that position (if any) and any
  subsequent elements to the right (adds one to their indices).
 @param index index at which the specified element is to be inserted
 @param element element to be inserted
 @throw ArrayIndexOutOfBoundsExceptionif the index is out of range
          (<code>index < 0 || index > size()</code>)
 @since 1.2
 */
- (void)addWithInt:(jint)index
            withId:(id)element;

/*!
 @brief Appends all of the elements in the specified Collection to the end of
  this Vector, in the order that they are returned by the specified
  Collection's Iterator.The behavior of this operation is undefined if
  the specified Collection is modified while the operation is in progress.
 (This implies that the behavior of this call is undefined if the
  specified Collection is this Vector, and this Vector is nonempty.)
 @param c elements to be inserted into this Vector
 @return <code>true</code> if this Vector changed as a result of the call
 @throw NullPointerExceptionif the specified collection is null
 @since 1.2
 */
- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)c;

/*!
 @brief Inserts all of the elements in the specified Collection into this
  Vector at the specified position.Shifts the element currently at
  that position (if any) and any subsequent elements to the right
  (increases their indices).
 The new elements will appear in the Vector
  in the order that they are returned by the specified Collection's
  iterator.
 @param index index at which to insert the first element from the               specified collection
 @param c elements to be inserted into this Vector
 @return <code>true</code> if this Vector changed as a result of the call
 @throw ArrayIndexOutOfBoundsExceptionif the index is out of range
          (<code>index < 0 || index > size()</code>)
 @throw NullPointerExceptionif the specified collection is null
 @since 1.2
 */
- (jboolean)addAllWithInt:(jint)index
   withJavaUtilCollection:(id<JavaUtilCollection>)c;

/*!
 @brief Adds the specified component to the end of this vector,
  increasing its size by one.The capacity of this vector is
  increased if its size becomes greater than its capacity.
 <p>This method is identical in functionality to the 
 <code>add(E)</code>
  method (which is part of the <code>List</code> interface).
 @param obj the component to be added
 */
- (void)addElementWithId:(id)obj;

/*!
 @brief Returns the current capacity of this vector.
 @return the current capacity (the length of its internal
           data array, kept in the field <code>elementData</code>
           of this vector)
 */
- (jint)capacity;

/*!
 @brief Removes all of the elements from this Vector.The Vector will
  be empty after this call returns (unless it throws an exception).
 @since 1.2
 */
- (void)clear;

/*!
 @brief Returns a clone of this vector.The copy will contain a
  reference to a clone of the internal data array, not a reference
  to the original internal data array of this <code>Vector</code> object.
 @return a clone of this vector
 */
- (id __nonnull)java_clone;

/*!
 @brief Returns <code>true</code> if this vector contains the specified element.
 More formally, returns <code>true</code> if and only if this vector
  contains at least one element <code>e</code> such that 
 <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.
 @param o element whose presence in this vector is to be tested
 @return <code>true</code> if this vector contains the specified element
 */
- (jboolean)containsWithId:(id)o;

/*!
 @brief Returns true if this Vector contains all of the elements in the
  specified Collection.
 @param c a collection whose elements will be tested for containment           in this Vector
 @return true if this Vector contains all of the elements in the
          specified collection
 @throw NullPointerExceptionif the specified collection is null
 */
- (jboolean)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)c;

/*!
 @brief Copies the components of this vector into the specified array.
 The item at index <code>k</code> in this vector is copied into
  component <code>k</code> of <code>anArray</code>.
 @param anArray the array into which the components get copied
 @throw NullPointerExceptionif the given array is null
 @throw IndexOutOfBoundsExceptionif the specified array is not
          large enough to hold all the components of this vector
 @throw ArrayStoreExceptionif a component of this vector is not of
          a runtime type that can be stored in the specified array
 - seealso: #toArray(Object[])
 */
- (void)copyIntoWithNSObjectArray:(IOSObjectArray *)anArray OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns the component at the specified index.
 <p>This method is identical in functionality to the <code>get(int)</code>
  method (which is part of the <code>List</code> interface).
 @param index an index into this vector
 @return the component at the specified index
 @throw ArrayIndexOutOfBoundsExceptionif the index is out of range
          (<code>index < 0 || index >= size()</code>)
 */
- (id)elementAtWithInt:(jint)index;

/*!
 @brief Returns an enumeration of the components of this vector.The
  returned <code>Enumeration</code> object will generate all items in
  this vector.
 The first item generated is the item at index <code>0</code>,
  then the item at index <code>1</code>, and so on.
 @return an enumeration of the components of this vector
 - seealso: Iterator
 */
- (id<JavaUtilEnumeration> __nonnull)elements;

/*!
 @brief Increases the capacity of this vector, if necessary, to ensure
  that it can hold at least the number of components specified by
  the minimum capacity argument.
 <p>If the current capacity of this vector is less than 
 <code>minCapacity</code>, then its capacity is increased by replacing its
  internal data array, kept in the field <code>elementData</code>, with a
  larger one.  The size of the new data array will be the old size plus 
 <code>capacityIncrement</code>, unless the value of 
 <code>capacityIncrement</code> is less than or equal to zero, in which case
  the new capacity will be twice the old capacity; but if this new size
  is still smaller than <code>minCapacity</code>, then the new capacity will
  be <code>minCapacity</code>.
 @param minCapacity the desired minimum capacity
 */
- (void)ensureCapacityWithInt:(jint)minCapacity;

/*!
 @brief Compares the specified Object with this Vector for equality.Returns
  true if and only if the specified Object is also a List, both Lists
  have the same size, and all corresponding pairs of elements in the two
  Lists are <em>equal</em>.
 (Two elements <code>e1</code> and 
 <code>e2</code> are <em>equal</em> if <code>(e1==null ? e2==null :
  e1.equals(e2))</code>
 .)  In other words, two Lists are defined to be
  equal if they contain the same elements in the same order.
 @param o the Object to be compared for equality with this Vector
 @return true if the specified Object is equal to this Vector
 */
- (jboolean)isEqual:(id)o;

/*!
 @brief Returns the first component (the item at index <code>0</code>) of
  this vector.
 @return the first component of this vector
 @throw NoSuchElementExceptionif this vector has no components
 */
- (id)firstElement;

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

/*!
 @brief Returns the element at the specified position in this Vector.
 @param index index of the element to return
 @return object at the specified index
 @throw ArrayIndexOutOfBoundsExceptionif the index is out of range
             (<code>index < 0 || index >= size()</code>)
 @since 1.2
 */
- (id)getWithInt:(jint)index;

/*!
 @brief Returns the hash code value for this Vector.
 */
- (NSUInteger)hash;

/*!
 @brief Returns the index of the first occurrence of the specified element
  in this vector, or -1 if this vector does not contain the element.
 More formally, returns the lowest index <code>i</code> such that 
 <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>,
  or -1 if there is no such index.
 @param o element to search for
 @return the index of the first occurrence of the specified element in
          this vector, or -1 if this vector does not contain the element
 */
- (jint)indexOfWithId:(id)o;

/*!
 @brief Returns the index of the first occurrence of the specified element in
  this vector, searching forwards from <code>index</code>, or returns -1 if
  the element is not found.
 More formally, returns the lowest index <code>i</code> such that 
 <tt>(i&nbsp;&gt;=&nbsp;index&nbsp;&amp;&amp;&nbsp;(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i))))</tt>,
  or -1 if there is no such index.
 @param o element to search for
 @param index index to start searching from
 @return the index of the first occurrence of the element in
          this vector at position <code>index</code> or later in the vector;
          <code>-1</code> if the element is not found.
 @throw IndexOutOfBoundsExceptionif the specified index is negative
 - seealso: Object#equals(Object)
 */
- (jint)indexOfWithId:(id)o
              withInt:(jint)index;

/*!
 @brief Inserts the specified object as a component in this vector at the specified 
 <code>index</code>.Each component in this vector with
  an index greater or equal to the specified <code>index</code> is
  shifted upward to have an index one greater than the value it had
  previously.
 <p>The index must be a value greater than or equal to <code>0</code>
  and less than or equal to the current size of the vector. (If the
  index is equal to the current size of the vector, the new element
  is appended to the Vector.) 
 <p>This method is identical in functionality to the 
 <code>add(int, E)</code>
  method (which is part of the <code>List</code> interface).  Note that the 
 <code>add</code> method reverses the order of the parameters, to more closely
  match array usage.
 @param obj the component to insert
 @param index where to insert the new component
 @throw ArrayIndexOutOfBoundsExceptionif the index is out of range
          (<code>index < 0 || index > size()</code>)
 */
- (void)insertElementAtWithId:(id)obj
                      withInt:(jint)index;

/*!
 @brief Tests if this vector has no components.
 @return <code>true</code> if and only if this vector has
           no components, that is, its size is zero;          
 <code>false</code> otherwise.
 */
- (jboolean)isEmpty;

/*!
 @brief Returns an iterator over the elements in this list in proper sequence.
 <p>The returned iterator is <a href="#fail-fast"><i>fail-fast</i></a>.
 @return an iterator over the elements in this list in proper sequence
 */
- (id<JavaUtilIterator> __nonnull)iterator;

/*!
 @brief Returns the last component of the vector.
 @return the last component of the vector, i.e., the component at index
           <code>size()&nbsp;-&nbsp;1</code>.
 @throw NoSuchElementExceptionif this vector is empty
 */
- (id)lastElement;

/*!
 @brief Returns the index of the last occurrence of the specified element
  in this vector, or -1 if this vector does not contain the element.
 More formally, returns the highest index <code>i</code> such that 
 <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>,
  or -1 if there is no such index.
 @param o element to search for
 @return the index of the last occurrence of the specified element in
          this vector, or -1 if this vector does not contain the element
 */
- (jint)lastIndexOfWithId:(id)o;

/*!
 @brief Returns the index of the last occurrence of the specified element in
  this vector, searching backwards from <code>index</code>, or returns -1 if
  the element is not found.
 More formally, returns the highest index <code>i</code> such that 
 <tt>(i&nbsp;&lt;=&nbsp;index&nbsp;&amp;&amp;&nbsp;(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i))))</tt>,
  or -1 if there is no such index.
 @param o element to search for
 @param index index to start searching backwards from
 @return the index of the last occurrence of the element at position
          less than or equal to <code>index</code> in this vector;
          -1 if the element is not found.
 @throw IndexOutOfBoundsExceptionif the specified index is greater
          than or equal to the current size of this vector
 */
- (jint)lastIndexOfWithId:(id)o
                  withInt:(jint)index;

/*!
 @brief Returns a list iterator over the elements in this list (in proper
  sequence).
 <p>The returned list iterator is <a href="#fail-fast"><i>fail-fast</i></a>.
 - seealso: #listIterator(int)
 */
- (id<JavaUtilListIterator> __nonnull)listIterator;

/*!
 @brief Returns a list iterator over the elements in this list (in proper
  sequence), starting at the specified position in the list.
 The specified index indicates the first element that would be
  returned by an initial call to <code>next</code>.
  An initial call to <code>previous</code> would
  return the element with the specified index minus one. 
 <p>The returned list iterator is <a href="#fail-fast"><i>fail-fast</i></a>.
 @throw IndexOutOfBoundsException
 */
- (id<JavaUtilListIterator> __nonnull)listIteratorWithInt:(jint)index;

/*!
 @brief Removes the element at the specified position in this Vector.
 Shifts any subsequent elements to the left (subtracts one from their
  indices).  Returns the element that was removed from the Vector.
 @throw ArrayIndexOutOfBoundsExceptionif the index is out of range
          (<code>index < 0 || index >= size()</code>)
 @param index the index of the element to be removed
 @return element that was removed
 @since 1.2
 */
- (id)removeWithInt:(jint)index;

/*!
 @brief Removes the first occurrence of the specified element in this Vector
  If the Vector does not contain the element, it is unchanged.More
  formally, removes the element with the lowest index i such that 
 <code>(o==null ?
 get(i)==null : o.equals(get(i)))</code> (if such
  an element exists).
 @param o element to be removed from this Vector, if present
 @return true if the Vector contained the specified element
 @since 1.2
 */
- (jboolean)removeWithId:(id)o;

/*!
 @brief Removes from this Vector all of its elements that are contained in the
  specified Collection.
 @param c a collection of elements to be removed from the Vector
 @return true if this Vector changed as a result of the call
 @throw ClassCastExceptionif the types of one or more elements
          in this vector are incompatible with the specified
          collection
  (<a href="Collection.html#optional-restrictions">optional</a>)
 @throw NullPointerExceptionif this vector contains one or more null
          elements and the specified collection does not support null         elements
  (<a href="Collection.html#optional-restrictions">optional</a>),
          or if the specified collection is null
 @since 1.2
 */
- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)c;

/*!
 @brief Removes all components from this vector and sets its size to zero.
 <p>This method is identical in functionality to the <code>clear</code>
  method (which is part of the <code>List</code> interface).
 */
- (void)removeAllElements;

/*!
 @brief Removes the first (lowest-indexed) occurrence of the argument
  from this vector.If the object is found in this vector, each
  component in the vector with an index greater or equal to the
  object's index is shifted downward to have an index one smaller
  than the value it had previously.
 <p>This method is identical in functionality to the 
 <code>remove(Object)</code> method (which is part of the 
 <code>List</code> interface).
 @param obj the component to be removed
 @return <code>true</code> if the argument was a component of this
           vector; <code>false</code> otherwise.
 */
- (jboolean)removeElementWithId:(id)obj;

/*!
 @brief Deletes the component at the specified index.Each component in
  this vector with an index greater or equal to the specified 
 <code>index</code> is shifted downward to have an index one
  smaller than the value it had previously.
 The size of this vector
  is decreased by <code>1</code>.
  
 <p>The index must be a value greater than or equal to <code>0</code>
  and less than the current size of the vector. 
 <p>This method is identical in functionality to the <code>remove(int)</code>
  method (which is part of the <code>List</code> interface).  Note that the 
 <code>remove</code> method returns the old value that was stored at the
  specified position.
 @param index the index of the object to remove
 @throw ArrayIndexOutOfBoundsExceptionif the index is out of range
          (<code>index < 0 || index >= size()</code>)
 */
- (void)removeElementAtWithInt:(jint)index;

- (jboolean)removeIfWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)filter;

- (void)replaceAllWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)operator_;

/*!
 @brief Retains only the elements in this Vector that are contained in the
  specified Collection.In other words, removes from this Vector all
  of its elements that are not contained in the specified Collection.
 @param c a collection of elements to be retained in this Vector           (all other elements are removed)
 @return true if this Vector changed as a result of the call
 @throw ClassCastExceptionif the types of one or more elements
          in this vector are incompatible with the specified
          collection
  (<a href="Collection.html#optional-restrictions">optional</a>)
 @throw NullPointerExceptionif this vector contains one or more null
          elements and the specified collection does not support null         elements
          (<a href="Collection.html#optional-restrictions">optional</a>),
          or if the specified collection is null
 @since 1.2
 */
- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)c;

/*!
 @brief Replaces the element at the specified position in this Vector with the
  specified element.
 @param index index of the element to replace
 @param element element to be stored at the specified position
 @return the element previously at the specified position
 @throw ArrayIndexOutOfBoundsExceptionif the index is out of range
          (<code>index < 0 || index >= size()</code>)
 @since 1.2
 */
- (id)setWithInt:(jint)index
          withId:(id)element;

/*!
 @brief Sets the component at the specified <code>index</code> of this
  vector to be the specified object.The previous component at that
  position is discarded.
 <p>The index must be a value greater than or equal to <code>0</code>
  and less than the current size of the vector. 
 <p>This method is identical in functionality to the 
 <code>set(int, E)</code>
  method (which is part of the <code>List</code> interface). Note that the 
 <code>set</code> method reverses the order of the parameters, to more closely
  match array usage.  Note also that the <code>set</code> method returns the
  old value that was stored at the specified position.
 @param obj what the component is to be set to
 @param index the specified index
 @throw ArrayIndexOutOfBoundsExceptionif the index is out of range
          (<code>index < 0 || index >= size()</code>)
 */
- (void)setElementAtWithId:(id)obj
                   withInt:(jint)index;

/*!
 @brief Sets the size of this vector.If the new size is greater than the
  current size, new <code>null</code> items are added to the end of
  the vector.
 If the new size is less than the current size, all
  components at index <code>newSize</code> and greater are discarded.
 @param newSize the new size of this vector
 @throw ArrayIndexOutOfBoundsExceptionif the new size is negative
 */
- (void)setSizeWithInt:(jint)newSize;

/*!
 @brief Returns the number of components in this vector.
 @return the number of components in this vector
 */
- (jint)size;

- (void)sortWithJavaUtilComparator:(id<JavaUtilComparator>)c;

/*!
 @brief Creates a <em><a href="Spliterator.html#binding">late-binding</a></em>
  and <em>fail-fast</em> <code>Spliterator</code> over the elements in this
  list.
 <p>The <code>Spliterator</code> reports <code>Spliterator.SIZED</code>,
  <code>Spliterator.SUBSIZED</code>, and <code>Spliterator.ORDERED</code>.
  Overriding implementations should document the reporting of additional
  characteristic values.
 @return a <code>Spliterator</code> over the elements in this list
 @since 1.8
 */
- (id<JavaUtilSpliterator> __nonnull)spliterator;

/*!
 @brief Returns a view of the portion of this List between fromIndex,
  inclusive, and toIndex, exclusive.
 (If fromIndex and toIndex are
  equal, the returned List is empty.)  The returned List is backed by this
  List, so changes in the returned List are reflected in this List, and
  vice-versa.  The returned List supports all of the optional List
  operations supported by this List. 
 <p>This method eliminates the need for explicit range operations (of
  the sort that commonly exist for arrays).  Any operation that expects
  a List can be used as a range operation by operating on a subList view
  instead of a whole List.  For example, the following idiom
  removes a range of elements from a List: 
 @code

       list.subList(from, to).clear(); 
  
@endcode
  Similar idioms may be constructed for indexOf and lastIndexOf,
  and all of the algorithms in the Collections class can be applied to
  a subList. 
 <p>The semantics of the List returned by this method become undefined if
  the backing list (i.e., this List) is <i>structurally modified</i> in
  any way other than via the returned List.  (Structural modifications are
  those that change the size of the List, or otherwise perturb it in such
  a fashion that iterations in progress may yield incorrect results.)
 @param fromIndex low endpoint (inclusive) of the subList
 @param toIndex high endpoint (exclusive) of the subList
 @return a view of the specified range within this List
 @throw IndexOutOfBoundsExceptionif an endpoint index value is out of range
          <code>(fromIndex < 0 || toIndex > size)</code>
 @throw IllegalArgumentExceptionif the endpoint indices are out of order
          <code>(fromIndex > toIndex)</code>
 */
- (id<JavaUtilList> __nonnull)subListWithInt:(jint)fromIndex
                                     withInt:(jint)toIndex;

/*!
 @brief Returns an array containing all of the elements in this Vector
  in the correct order.
 @since 1.2
 */
- (IOSObjectArray * __nonnull)toArray;

/*!
 @brief Returns an array containing all of the elements in this Vector in the
  correct order; the runtime type of the returned array is that of the
  specified array.If the Vector fits in the specified array, it is
  returned therein.
 Otherwise, a new array is allocated with the runtime
  type of the specified array and the size of this Vector. 
 <p>If the Vector fits in the specified array with room to spare
  (i.e., the array has more elements than the Vector),
  the element in the array immediately following the end of the
  Vector is set to null.  (This is useful in determining the length
  of the Vector <em>only</em> if the caller knows that the Vector
  does not contain any null elements.)
 @param a the array into which the elements of the Vector are to           be stored, if it is big enough; otherwise, a new array of the
            same runtime type is allocated for this purpose.
 @return an array containing the elements of the Vector
 @throw ArrayStoreExceptionif the runtime type of a is not a supertype
  of the runtime type of every element in this Vector
 @throw NullPointerExceptionif the given array is null
 @since 1.2
 */
- (IOSObjectArray * __nonnull)toArrayWithNSObjectArray:(IOSObjectArray *)a;

/*!
 @brief Returns a string representation of this Vector, containing
  the String representation of each element.
 */
- (NSString * __nonnull)description;

/*!
 @brief Trims the capacity of this vector to be the vector's current
  size.If the capacity of this vector is larger than its current
  size, then the capacity is changed to equal the size by replacing
  its internal data array, kept in the field <code>elementData</code>,
  with a smaller one.
 An application can use this operation to
  minimize the storage of a vector.
 */
- (void)trimToSize;

#pragma mark Protected

/*!
 @brief Removes from this list all of the elements whose index is between 
 <code>fromIndex</code>, inclusive, and <code>toIndex</code>, exclusive.
 Shifts any succeeding elements to the left (reduces their index).
  This call shortens the list by <code>(toIndex - fromIndex)</code> elements.
  (If <code>toIndex==fromIndex</code>, this operation has no effect.)
 */
- (void)removeRangeWithInt:(jint)fromIndex
                   withInt:(jint)toIndex;

#pragma mark Package-Private

- (id)elementDataWithInt:(jint)index;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilVector)

J2OBJC_FIELD_SETTER(JavaUtilVector, elementData_, IOSObjectArray *)

FOUNDATION_EXPORT void JavaUtilVector_initWithInt_withInt_(JavaUtilVector *self, jint initialCapacity, jint capacityIncrement);

FOUNDATION_EXPORT JavaUtilVector *new_JavaUtilVector_initWithInt_withInt_(jint initialCapacity, jint capacityIncrement) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilVector *create_JavaUtilVector_initWithInt_withInt_(jint initialCapacity, jint capacityIncrement);

FOUNDATION_EXPORT void JavaUtilVector_initWithInt_(JavaUtilVector *self, jint initialCapacity);

FOUNDATION_EXPORT JavaUtilVector *new_JavaUtilVector_initWithInt_(jint initialCapacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilVector *create_JavaUtilVector_initWithInt_(jint initialCapacity);

FOUNDATION_EXPORT void JavaUtilVector_init(JavaUtilVector *self);

FOUNDATION_EXPORT JavaUtilVector *new_JavaUtilVector_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilVector *create_JavaUtilVector_init(void);

FOUNDATION_EXPORT void JavaUtilVector_initWithJavaUtilCollection_(JavaUtilVector *self, id<JavaUtilCollection> c);

FOUNDATION_EXPORT JavaUtilVector *new_JavaUtilVector_initWithJavaUtilCollection_(id<JavaUtilCollection> c) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilVector *create_JavaUtilVector_initWithJavaUtilCollection_(id<JavaUtilCollection> c);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilVector)

#endif

#if !defined (JavaUtilVector_Itr_) && (INCLUDE_ALL_JavaUtilVector || defined(INCLUDE_JavaUtilVector_Itr))
#define JavaUtilVector_Itr_

#define RESTRICT_JavaUtilIterator 1
#define INCLUDE_JavaUtilIterator 1
#include "java/util/Iterator.h"

@protocol JavaUtilFunctionConsumer;

/*!
 @brief An optimized version of AbstractList.Itr
 */
@interface JavaUtilVector_Itr : NSObject < JavaUtilIterator > {
 @public
  jint limit_;
  jint cursor_;
  jint lastRet_;
  jint expectedModCount_;
}

#pragma mark Public

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

- (jboolean)hasNext;

- (id)next;

- (void)remove;

#pragma mark Package-Private

- (void)checkForComodification;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilVector_Itr)

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilVector_Itr)

#endif

#if !defined (JavaUtilVector_ListItr_) && (INCLUDE_ALL_JavaUtilVector || defined(INCLUDE_JavaUtilVector_ListItr))
#define JavaUtilVector_ListItr_

#define RESTRICT_JavaUtilListIterator 1
#define INCLUDE_JavaUtilListIterator 1
#include "java/util/ListIterator.h"

@class JavaUtilVector;

/*!
 @brief An optimized version of AbstractList.ListItr
 */
@interface JavaUtilVector_ListItr : JavaUtilVector_Itr < JavaUtilListIterator >

#pragma mark Public

- (void)addWithId:(id)e;

- (jboolean)hasPrevious;

- (jint)nextIndex;

- (id)previous;

- (jint)previousIndex;

- (void)setWithId:(id)e;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilVector:(JavaUtilVector *)outer$
                                         withInt:(jint)index;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilVector_ListItr)

FOUNDATION_EXPORT void JavaUtilVector_ListItr_initWithJavaUtilVector_withInt_(JavaUtilVector_ListItr *self, JavaUtilVector *outer$, jint index);

FOUNDATION_EXPORT JavaUtilVector_ListItr *new_JavaUtilVector_ListItr_initWithJavaUtilVector_withInt_(JavaUtilVector *outer$, jint index) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilVector_ListItr *create_JavaUtilVector_ListItr_initWithJavaUtilVector_withInt_(JavaUtilVector *outer$, jint index);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilVector_ListItr)

#endif

#if !defined (JavaUtilVector_VectorSpliterator_) && (INCLUDE_ALL_JavaUtilVector || defined(INCLUDE_JavaUtilVector_VectorSpliterator))
#define JavaUtilVector_VectorSpliterator_

#define RESTRICT_JavaUtilSpliterator 1
#define INCLUDE_JavaUtilSpliterator 1
#include "java/util/Spliterator.h"

@class IOSObjectArray;
@class JavaUtilVector;
@protocol JavaUtilComparator;
@protocol JavaUtilFunctionConsumer;

/*!
 @brief Similar to ArrayList Spliterator
 */
@interface JavaUtilVector_VectorSpliterator : NSObject < JavaUtilSpliterator >

#pragma mark Public

- (jint)characteristics;

- (jlong)estimateSize;

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

- (jboolean)tryAdvanceWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

- (id<JavaUtilSpliterator>)trySplit;

#pragma mark Package-Private

/*!
 @brief Create new spliterator covering the given  range
 */
- (instancetype __nonnull)initWithJavaUtilVector:(JavaUtilVector *)list
                               withNSObjectArray:(IOSObjectArray *)array
                                         withInt:(jint)origin
                                         withInt:(jint)fence
                                         withInt:(jint)expectedModCount;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilVector_VectorSpliterator)

FOUNDATION_EXPORT void JavaUtilVector_VectorSpliterator_initWithJavaUtilVector_withNSObjectArray_withInt_withInt_withInt_(JavaUtilVector_VectorSpliterator *self, JavaUtilVector *list, IOSObjectArray *array, jint origin, jint fence, jint expectedModCount);

FOUNDATION_EXPORT JavaUtilVector_VectorSpliterator *new_JavaUtilVector_VectorSpliterator_initWithJavaUtilVector_withNSObjectArray_withInt_withInt_withInt_(JavaUtilVector *list, IOSObjectArray *array, jint origin, jint fence, jint expectedModCount) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilVector_VectorSpliterator *create_JavaUtilVector_VectorSpliterator_initWithJavaUtilVector_withNSObjectArray_withInt_withInt_withInt_(JavaUtilVector *list, IOSObjectArray *array, jint origin, jint fence, jint expectedModCount);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilVector_VectorSpliterator)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilVector")
