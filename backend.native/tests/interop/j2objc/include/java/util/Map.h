//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/Map.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilMap")
#ifdef RESTRICT_JavaUtilMap
#define INCLUDE_ALL_JavaUtilMap 0
#else
#define INCLUDE_ALL_JavaUtilMap 1
#endif
#undef RESTRICT_JavaUtilMap

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilMap_) && (INCLUDE_ALL_JavaUtilMap || defined(INCLUDE_JavaUtilMap))
#define JavaUtilMap_

@protocol JavaUtilCollection;
@protocol JavaUtilFunctionBiConsumer;
@protocol JavaUtilFunctionBiFunction;
@protocol JavaUtilFunctionFunction;
@protocol JavaUtilSet;

/*!
 @brief An object that maps keys to values.A map cannot contain duplicate keys;
  each key can map to at most one value.
 <p>This interface takes the place of the <code>Dictionary</code> class, which
  was a totally abstract class rather than an interface. 
 <p>The <code>Map</code> interface provides three <i>collection views</i>, which
  allow a map's contents to be viewed as a set of keys, collection of values,
  or set of key-value mappings.  The <i>order</i> of a map is defined as
  the order in which the iterators on the map's collection views return their
  elements.  Some map implementations, like the <code>TreeMap</code> class, make
  specific guarantees as to their order; others, like the <code>HashMap</code>
  class, do not. 
 <p>Note: great care must be exercised if mutable objects are used as map
  keys.  The behavior of a map is not specified if the value of an object is
  changed in a manner that affects <code>equals</code> comparisons while the
  object is a key in the map.  A special case of this prohibition is that it
  is not permissible for a map to contain itself as a key.  While it is
  permissible for a map to contain itself as a value, extreme caution is
  advised: the <code>equals</code> and <code>hashCode</code> methods are no longer
  well defined on such a map. 
 <p>All general-purpose map implementation classes should provide two
  "standard" constructors: a void (no arguments) constructor which creates an
  empty map, and a constructor with a single argument of type <code>Map</code>,
  which creates a new map with the same key-value mappings as its argument.
  In effect, the latter constructor allows the user to copy any map,
  producing an equivalent map of the desired class.  There is no way to
  enforce this recommendation (as interfaces cannot contain constructors) but
  all of the general-purpose map implementations in the JDK comply. 
 <p>The "destructive" methods contained in this interface, that is, the
  methods that modify the map on which they operate, are specified to throw 
 <code>UnsupportedOperationException</code> if this map does not support the
  operation.  If this is the case, these methods may, but are not required
  to, throw an <code>UnsupportedOperationException</code> if the invocation would
  have no effect on the map.  For example, invoking the <code>putAll(Map)</code>
  method on an unmodifiable map may, but is not required to, throw the
  exception if the map whose mappings are to be "superimposed" is empty. 
 <p>Some map implementations have restrictions on the keys and values they
  may contain.  For example, some implementations prohibit null keys and
  values, and some have restrictions on the types of their keys.  Attempting
  to insert an ineligible key or value throws an unchecked exception,
  typically <code>NullPointerException</code> or <code>ClassCastException</code>.
  Attempting to query the presence of an ineligible key or value may throw an
  exception, or it may simply return false; some implementations will exhibit
  the former behavior and some will exhibit the latter.  More generally,
  attempting an operation on an ineligible key or value whose completion
  would not result in the insertion of an ineligible element into the map may
  throw an exception or it may succeed, at the option of the implementation.
  Such exceptions are marked as "optional" in the specification for this
  interface. 
 <p>Many methods in Collections Framework interfaces are defined
  in terms of the <code>equals</code> method.  For
  example, the specification for the <code>containsKey(Object key)</code>
  method says: "returns <code>true</code> if and
  only if this map contains a mapping for a key <code>k</code> such that 
 <code>(key==null ? k==null : key.equals(k))</code>." This specification should 
 <i>not</i> be construed to imply that invoking <code>Map.containsKey</code>
  with a non-null argument <code>key</code> will cause <code>key.equals(k)</code> to
  be invoked for any key <code>k</code>.  Implementations are free to
  implement optimizations whereby the <code>equals</code> invocation is avoided,
  for example, by first comparing the hash codes of the two keys.  (The 
 <code>Object.hashCode()</code> specification guarantees that two objects with
  unequal hash codes cannot be equal.)  More generally, implementations of
  the various Collections Framework interfaces are free to take advantage of
  the specified behavior of underlying <code>Object</code> methods wherever the
  implementor deems it appropriate. 
 <p>Some map operations which perform recursive traversal of the map may fail
  with an exception for self-referential instances where the map directly or
  indirectly contains itself. This includes the <code>clone()</code>,
  <code>equals()</code>, <code>hashCode()</code> and <code>toString()</code> methods.
  Implementations may optionally handle the self-referential scenario, however
  most current implementations do not do so.
 @author Josh Bloch
 - seealso: HashMap
 - seealso: TreeMap
 - seealso: Hashtable
 - seealso: SortedMap
 - seealso: Collection
 - seealso: Set
 @since 1.2
 */
@protocol JavaUtilMap < JavaObject >

/*!
 @brief Returns the number of key-value mappings in this map.If the
  map contains more than <code>Integer.MAX_VALUE</code> elements, returns 
 <code>Integer.MAX_VALUE</code>.
 @return the number of key-value mappings in this map
 */
- (jint)size;

/*!
 @brief Returns <code>true</code> if this map contains no key-value mappings.
 @return <code>true</code> if this map contains no key-value mappings
 */
- (jboolean)isEmpty;

/*!
 @brief Returns <code>true</code> if this map contains a mapping for the specified
  key.More formally, returns <code>true</code> if and only if
  this map contains a mapping for a key <code>k</code> such that 
 <code>Objects.equals(key, k)</code>.
 (There can be
  at most one such mapping.)
 @param key key whose presence in this map is to be tested
 @return <code>true</code> if this map contains a mapping for the specified
          key
 @throw ClassCastExceptionif the key is of an inappropriate type for
          this map
  (<a href="Collection.html#optional-restrictions">optional</a>)
 @throw NullPointerExceptionif the specified key is null and this map
          does not permit null keys
  (<a href="Collection.html#optional-restrictions">optional</a>)
 */
- (jboolean)containsKeyWithId:(id)key;

/*!
 @brief Returns <code>true</code> if this map maps one or more keys to the
  specified value.More formally, returns <code>true</code> if and only if
  this map contains at least one mapping to a value <code>v</code> such that 
 <code>Objects.equals(value, v)</code>.
 This operation
  will probably require time linear in the map size for most
  implementations of the <code>Map</code> interface.
 @param value value whose presence in this map is to be tested
 @return <code>true</code> if this map maps one or more keys to the
          specified value
 @throw ClassCastExceptionif the value is of an inappropriate type for
          this map
  (<a href="Collection.html#optional-restrictions">optional</a>)
 @throw NullPointerExceptionif the specified value is null and this
          map does not permit null values
  (<a href="Collection.html#optional-restrictions">optional</a>)
 */
- (jboolean)containsValueWithId:(id)value;

/*!
 @brief Returns the value to which the specified key is mapped,
  or <code>null</code> if this map contains no mapping for the key.
 <p>More formally, if this map contains a mapping from a key 
 <code>k</code> to a value <code>v</code> such that 
 <code>Objects.equals(key, k)</code>,
  then this method returns <code>v</code>; otherwise
  it returns <code>null</code>.  (There can be at most one such mapping.) 
 <p>If this map permits null values, then a return value of 
 <code>null</code> does not <i>necessarily</i> indicate that the map
  contains no mapping for the key; it's also possible that the map
  explicitly maps the key to <code>null</code>.  The <code>containsKey</code>
  operation may be used to distinguish these two cases.
 @param key the key whose associated value is to be returned
 @return the value to which the specified key is mapped, or
          <code>null</code> if this map contains no mapping for the key
 @throw ClassCastExceptionif the key is of an inappropriate type for
          this map
  (<a href="Collection.html#optional-restrictions">optional</a>)
 @throw NullPointerExceptionif the specified key is null and this map
          does not permit null keys
  (<a href="Collection.html#optional-restrictions">optional</a>)
 */
- (id __nullable)getWithId:(id)key;

/*!
 @brief Associates the specified value with the specified key in this map
  (optional operation).If the map previously contained a mapping for
  the key, the old value is replaced by the specified value.
 (A map 
 <code>m</code> is said to contain a mapping for a key <code>k</code> if and only if 
 <code>m.containsKey(k)</code> would return 
 <code>true</code>.)
 @param key key with which the specified value is to be associated
 @param value value to be associated with the specified key
 @return the previous value associated with <code>key</code>, or
          <code>null</code> if there was no mapping for <code>key</code>.
          (A <code>null</code> return can also indicate that the map
          previously associated <code>null</code> with <code>key</code>,
          if the implementation supports <code>null</code> values.)
 @throw UnsupportedOperationExceptionif the <code>put</code> operation
          is not supported by this map
 @throw ClassCastExceptionif the class of the specified key or value
          prevents it from being stored in this map
 @throw NullPointerExceptionif the specified key or value is null
          and this map does not permit null keys or values
 @throw IllegalArgumentExceptionif some property of the specified key
          or value prevents it from being stored in this map
 */
- (id __nullable)putWithId:(id)key
                    withId:(id)value;

/*!
 @brief Removes the mapping for a key from this map if it is present
  (optional operation).More formally, if this map contains a mapping
  from key <code>k</code> to value <code>v</code> such that 
 <code>Objects.equals(key, k)</code>, that mapping
  is removed.
 (The map can contain at most one such mapping.) 
 <p>Returns the value to which this map previously associated the key,
  or <code>null</code> if the map contained no mapping for the key. 
 <p>If this map permits null values, then a return value of 
 <code>null</code> does not <i>necessarily</i> indicate that the map
  contained no mapping for the key; it's also possible that the map
  explicitly mapped the key to <code>null</code>.
  
 <p>The map will not contain a mapping for the specified key once the
  call returns.
 @param key key whose mapping is to be removed from the map
 @return the previous value associated with <code>key</code>, or
          <code>null</code> if there was no mapping for <code>key</code>.
 @throw UnsupportedOperationExceptionif the <code>remove</code> operation
          is not supported by this map
 @throw ClassCastExceptionif the key is of an inappropriate type for
          this map
  (<a href="Collection.html#optional-restrictions">optional</a>)
 @throw NullPointerExceptionif the specified key is null and this
          map does not permit null keys
  (<a href="Collection.html#optional-restrictions">optional</a>)
 */
- (id __nullable)removeWithId:(id)key;

/*!
 @brief Copies all of the mappings from the specified map to this map
  (optional operation).The effect of this call is equivalent to that
  of calling <code>put(k, v)</code> on this map once
  for each mapping from key <code>k</code> to value <code>v</code> in the
  specified map.
 The behavior of this operation is undefined if the
  specified map is modified while the operation is in progress.
 @param m mappings to be stored in this map
 @throw UnsupportedOperationExceptionif the <code>putAll</code> operation
          is not supported by this map
 @throw ClassCastExceptionif the class of a key or value in the
          specified map prevents it from being stored in this map
 @throw NullPointerExceptionif the specified map is null, or if
          this map does not permit null keys or values, and the
          specified map contains null keys or values
 @throw IllegalArgumentExceptionif some property of a key or value in
          the specified map prevents it from being stored in this map
 */
- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)m;

/*!
 @brief Removes all of the mappings from this map (optional operation).
 The map will be empty after this call returns.
 @throw UnsupportedOperationExceptionif the <code>clear</code> operation
          is not supported by this map
 */
- (void)clear;

/*!
 @brief Returns a <code>Set</code> view of the keys contained in this map.
 The set is backed by the map, so changes to the map are
  reflected in the set, and vice-versa.  If the map is modified
  while an iteration over the set is in progress (except through
  the iterator's own <code>remove</code> operation), the results of
  the iteration are undefined.  The set supports element removal,
  which removes the corresponding mapping from the map, via the 
 <code>Iterator.remove</code>, <code>Set.remove</code>,
  <code>removeAll</code>, <code>retainAll</code>, and <code>clear</code>
  operations.  It does not support the <code>add</code> or <code>addAll</code>
  operations.
 @return a set view of the keys contained in this map
 */
- (id<JavaUtilSet> __nonnull)keySet;

/*!
 @brief Returns a <code>Collection</code> view of the values contained in this map.
 The collection is backed by the map, so changes to the map are
  reflected in the collection, and vice-versa.  If the map is
  modified while an iteration over the collection is in progress
  (except through the iterator's own <code>remove</code> operation),
  the results of the iteration are undefined.  The collection
  supports element removal, which removes the corresponding
  mapping from the map, via the <code>Iterator.remove</code>,
  <code>Collection.remove</code>, <code>removeAll</code>,
  <code>retainAll</code> and <code>clear</code> operations.  It does not
  support the <code>add</code> or <code>addAll</code> operations.
 @return a collection view of the values contained in this map
 */
- (id<JavaUtilCollection> __nonnull)values;

/*!
 @brief Returns a <code>Set</code> view of the mappings contained in this map.
 The set is backed by the map, so changes to the map are
  reflected in the set, and vice-versa.  If the map is modified
  while an iteration over the set is in progress (except through
  the iterator's own <code>remove</code> operation, or through the 
 <code>setValue</code> operation on a map entry returned by the
  iterator) the results of the iteration are undefined.  The set
  supports element removal, which removes the corresponding
  mapping from the map, via the <code>Iterator.remove</code>,
  <code>Set.remove</code>, <code>removeAll</code>, <code>retainAll</code> and 
 <code>clear</code> operations.  It does not support the 
 <code>add</code> or <code>addAll</code> operations.
 @return a set view of the mappings contained in this map
 */
- (id<JavaUtilSet> __nonnull)entrySet;

/*!
 @brief Compares the specified object with this map for equality.Returns
  <code>true</code> if the given object is also a map and the two maps
  represent the same mappings.
 More formally, two maps <code>m1</code> and 
 <code>m2</code> represent the same mappings if 
 <code>m1.entrySet().equals(m2.entrySet())</code>.  This ensures that the 
 <code>equals</code> method works properly across different implementations
  of the <code>Map</code> interface.
 @param o object to be compared for equality with this map
 @return <code>true</code> if the specified object is equal to this map
 */
- (jboolean)isEqual:(id)o;

/*!
 @brief Returns the hash code value for this map.The hash code of a map is
  defined to be the sum of the hash codes of each entry in the map's 
 <code>entrySet()</code> view.
 This ensures that <code>m1.equals(m2)</code>
  implies that <code>m1.hashCode()==m2.hashCode()</code> for any two maps 
 <code>m1</code> and <code>m2</code>, as required by the general contract of 
 <code>Object.hashCode</code>.
 @return the hash code value for this map
 - seealso: Map.Entry#hashCode()
 - seealso: Object#equals(Object)
 - seealso: #equals(Object)
 */
- (NSUInteger)hash;

/*!
 @brief Returns the value to which the specified key is mapped, or 
 <code>defaultValue</code> if this map contains no mapping for the key.
 @param key the key whose associated value is to be returned
 @param defaultValue the default mapping of the key
 @return the value to which the specified key is mapped, or 
 <code>defaultValue</code> if this map contains no mapping for the key
 @throw ClassCastExceptionif the key is of an inappropriate type for
  this map
  (<a href="Collection.html#optional-restrictions">optional</a>)
 @throw NullPointerExceptionif the specified key is null and this map
  does not permit null keys
  (<a href="Collection.html#optional-restrictions">optional</a>)
 @since 1.8
 */
- (id __nullable)getOrDefaultWithId:(id)key
                             withId:(id)defaultValue;

/*!
 @brief Performs the given action for each entry in this map until all entries
  have been processed or the action throws an exception.Unless
  otherwise specified by the implementing class, actions are performed in
  the order of entry set iteration (if an iteration order is specified.)
 Exceptions thrown by the action are relayed to the caller.
 @param action The action to be performed for each entry
 @throw NullPointerExceptionif the specified action is null
 @throw ConcurrentModificationExceptionif an entry is found to be
  removed during iteration
 @since 1.8
 */
- (void)forEachWithJavaUtilFunctionBiConsumer:(id<JavaUtilFunctionBiConsumer>)action;

/*!
 @brief Replaces each entry's value with the result of invoking the given
  function on that entry until all entries have been processed or the
  function throws an exception.Exceptions thrown by the function are
  relayed to the caller.
 @param function the function to apply to each entry
 @throw UnsupportedOperationExceptionif the <code>set</code> operation
  is not supported by this map's entry set iterator.
 @throw ClassCastExceptionif the class of a replacement value
  prevents it from being stored in this map
 @throw NullPointerExceptionif the specified function is null, or the
  specified replacement value is null, and this map does not permit null
  values
 @throw ClassCastExceptionif a replacement value is of an inappropriate
          type for this map
          (<a href="Collection.html#optional-restrictions">optional</a>)
 @throw NullPointerExceptionif function or a replacement value is null,
          and this map does not permit null keys or values
          (<a href="Collection.html#optional-restrictions">optional</a>)
 @throw IllegalArgumentExceptionif some property of a replacement value
          prevents it from being stored in this map
          (<a href="Collection.html#optional-restrictions">optional</a>)
 @throw ConcurrentModificationExceptionif an entry is found to be
  removed during iteration
 @since 1.8
 */
- (void)replaceAllWithJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)function;

/*!
 @brief If the specified key is not already associated with a value (or is mapped
  to <code>null</code>) associates it with the given value and returns 
 <code>null</code>, else returns the current value.
 @param key key with which the specified value is to be associated
 @param value value to be associated with the specified key
 @return the previous value associated with the specified key, or
          <code>null</code> if there was no mapping for the key.
          (A <code>null</code> return can also indicate that the map
          previously associated <code>null</code> with the key,
          if the implementation supports null values.)
 @throw UnsupportedOperationExceptionif the <code>put</code> operation
          is not supported by this map
          (<a href="Collection.html#optional-restrictions">optional</a>)
 @throw ClassCastExceptionif the key or value is of an inappropriate
          type for this map
          (<a href="Collection.html#optional-restrictions">optional</a>)
 @throw NullPointerExceptionif the specified key or value is null,
          and this map does not permit null keys or values
          (<a href="Collection.html#optional-restrictions">optional</a>)
 @throw IllegalArgumentExceptionif some property of the specified key
          or value prevents it from being stored in this map
          (<a href="Collection.html#optional-restrictions">optional</a>)
 @since 1.8
 */
- (id __nullable)putIfAbsentWithId:(id)key
                            withId:(id)value;

/*!
 @brief Removes the entry for the specified key only if it is currently
  mapped to the specified value.
 @param key key with which the specified value is associated
 @param value value expected to be associated with the specified key
 @return <code>true</code> if the value was removed
 @throw UnsupportedOperationExceptionif the <code>remove</code> operation
          is not supported by this map
          (<a href="Collection.html#optional-restrictions">optional</a>)
 @throw ClassCastExceptionif the key or value is of an inappropriate
          type for this map
          (<a href="Collection.html#optional-restrictions">optional</a>)
 @throw NullPointerExceptionif the specified key or value is null,
          and this map does not permit null keys or values
          (<a href="Collection.html#optional-restrictions">optional</a>)
 @since 1.8
 */
- (jboolean)removeWithId:(id)key
                  withId:(id)value;

/*!
 @brief Replaces the entry for the specified key only if currently
  mapped to the specified value.
 @param key key with which the specified value is associated
 @param oldValue value expected to be associated with the specified key
 @param newValue value to be associated with the specified key
 @return <code>true</code> if the value was replaced
 @throw UnsupportedOperationExceptionif the <code>put</code> operation
          is not supported by this map
          (<a href="Collection.html#optional-restrictions">optional</a>)
 @throw ClassCastExceptionif the class of a specified key or value
          prevents it from being stored in this map
 @throw NullPointerExceptionif a specified key or newValue is null,
          and this map does not permit null keys or values
 @throw NullPointerExceptionif oldValue is null and this map does not
          permit null values
          (<a href="Collection.html#optional-restrictions">optional</a>)
 @throw IllegalArgumentExceptionif some property of a specified key
          or value prevents it from being stored in this map
 @since 1.8
 */
- (jboolean)replaceWithId:(id)key
                   withId:(id)oldValue
                   withId:(id)newValue;

/*!
 @brief Replaces the entry for the specified key only if it is
  currently mapped to some value.
 @param key key with which the specified value is associated
 @param value value to be associated with the specified key
 @return the previous value associated with the specified key, or
          <code>null</code> if there was no mapping for the key.
          (A <code>null</code> return can also indicate that the map
          previously associated <code>null</code> with the key,
          if the implementation supports null values.)
 @throw UnsupportedOperationExceptionif the <code>put</code> operation
          is not supported by this map
          (<a href="Collection.html#optional-restrictions">optional</a>)
 @throw ClassCastExceptionif the class of the specified key or value
          prevents it from being stored in this map
          (<a href="Collection.html#optional-restrictions">optional</a>)
 @throw NullPointerExceptionif the specified key or value is null,
          and this map does not permit null keys or values
 @throw IllegalArgumentExceptionif some property of the specified key
          or value prevents it from being stored in this map
 @since 1.8
 */
- (id __nullable)replaceWithId:(id)key
                        withId:(id)value;

/*!
 @brief If the specified key is not already associated with a value (or is mapped
  to <code>null</code>), attempts to compute its value using the given mapping
  function and enters it into this map unless <code>null</code>.
 <p>If the mapping function returns <code>null</code>, no mapping is recorded.
  If the mapping function itself throws an (unchecked) exception, the
  exception is rethrown, and no mapping is recorded.  The most
  common usage is to construct a new object serving as an initial
  mapped value or memoized result, as in: 
 @code
  map.computeIfAbsent(key, k -> new Value(f(k))); 
 
@endcode
  
 <p>Or to implement a multi-value map, <code>Map<K,Collection<V>></code>,
  supporting multiple values per key: 
 @code
  map.computeIfAbsent(key, k -> new HashSet<V>()).add(v); 
 
@endcode
  
 <p>The mapping function should not modify this map during computation.
 @param key key with which the specified value is to be associated
 @param mappingFunction the mapping function to compute a value
 @return the current (existing or computed) value associated with
          the specified key, or null if the computed value is null
 @throw NullPointerExceptionif the specified key is null and
          this map does not support null keys, or the mappingFunction
          is null
 @throw UnsupportedOperationExceptionif the <code>put</code> operation
          is not supported by this map
          (<a href="Collection.html#optional-restrictions">optional</a>)
 @throw ClassCastExceptionif the class of the specified key or value
          prevents it from being stored in this map
          (<a href="Collection.html#optional-restrictions">optional</a>)
 @throw IllegalArgumentExceptionif some property of the specified key
          or value prevents it from being stored in this map
          (<a href="Collection.html#optional-restrictions">optional</a>)
 @since 1.8
 */
- (id __nullable)computeIfAbsentWithId:(id)key
          withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)mappingFunction;

/*!
 @brief If the value for the specified key is present and non-null, attempts to
  compute a new mapping given the key and its current mapped value.
 <p>If the remapping function returns <code>null</code>, the mapping is removed.
  If the remapping function itself throws an (unchecked) exception, the
  exception is rethrown, and the current mapping is left unchanged. 
 <p>The remapping function should not modify this map during computation.
 @param key key with which the specified value is to be associated
 @param remappingFunction the remapping function to compute a value
 @return the new value associated with the specified key, or null if none
 @throw NullPointerExceptionif the specified key is null and
          this map does not support null keys, or the
          remappingFunction is null
 @throw UnsupportedOperationExceptionif the <code>put</code> operation
          is not supported by this map
          (<a href="Collection.html#optional-restrictions">optional</a>)
 @throw ClassCastExceptionif the class of the specified key or value
          prevents it from being stored in this map
          (<a href="Collection.html#optional-restrictions">optional</a>)
 @throw IllegalArgumentExceptionif some property of the specified key
          or value prevents it from being stored in this map
          (<a href="Collection.html#optional-restrictions">optional</a>)
 @since 1.8
 */
- (id __nullable)computeIfPresentWithId:(id)key
         withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)remappingFunction;

/*!
 @brief Attempts to compute a mapping for the specified key and its current
  mapped value (or <code>null</code> if there is no current mapping).For
  example, to either create or append a <code>String</code> msg to a value
  mapping: 
 @code
  map.compute(key, (k, v) -> (v == null) ?
 msg : v.concat(msg))
 
@endcode
  (Method <code>merge()</code> is often simpler to use for such purposes.) 
 <p>If the remapping function returns <code>null</code>, the mapping is removed
  (or remains absent if initially absent).  If the remapping function
  itself throws an (unchecked) exception, the exception is rethrown, and
  the current mapping is left unchanged. 
 <p>The remapping function should not modify this map during computation.
 @param key key with which the specified value is to be associated
 @param remappingFunction the remapping function to compute a value
 @return the new value associated with the specified key, or null if none
 @throw NullPointerExceptionif the specified key is null and
          this map does not support null keys, or the
          remappingFunction is null
 @throw UnsupportedOperationExceptionif the <code>put</code> operation
          is not supported by this map
          (<a href="Collection.html#optional-restrictions">optional</a>)
 @throw ClassCastExceptionif the class of the specified key or value
          prevents it from being stored in this map
          (<a href="Collection.html#optional-restrictions">optional</a>)
 @throw IllegalArgumentExceptionif some property of the specified key
          or value prevents it from being stored in this map
          (<a href="Collection.html#optional-restrictions">optional</a>)
 @since 1.8
 */
- (id __nullable)computeWithId:(id)key
withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)remappingFunction;

/*!
 @brief If the specified key is not already associated with a value or is
  associated with null, associates it with the given non-null value.
 Otherwise, replaces the associated value with the results of the given
  remapping function, or removes if the result is <code>null</code>. This
  method may be of use when combining multiple mapped values for a key.
  For example, to either create or append a <code>String msg</code> to a
  value mapping: 
 @code
  map.merge(key, msg, String::concat) 
 
@endcode
  
 <p>If the remapping function returns <code>null</code>, the mapping is removed.
  If the remapping function itself throws an (unchecked) exception, the
  exception is rethrown, and the current mapping is left unchanged. 
 <p>The remapping function should not modify this map during computation.
 @param key key with which the resulting value is to be associated
 @param value the non-null value to be merged with the existing value         associated with the key or, if no existing value or a null value
          is associated with the key, to be associated with the key
 @param remappingFunction the remapping function to recompute a value if         present
 @return the new value associated with the specified key, or null if no
          value is associated with the key
 @throw UnsupportedOperationExceptionif the <code>put</code> operation
          is not supported by this map
          (<a href="Collection.html#optional-restrictions">optional</a>)
 @throw ClassCastExceptionif the class of the specified key or value
          prevents it from being stored in this map
          (<a href="Collection.html#optional-restrictions">optional</a>)
 @throw IllegalArgumentExceptionif some property of the specified key
          or value prevents it from being stored in this map
          (<a href="Collection.html#optional-restrictions">optional</a>)
 @throw NullPointerExceptionif the specified key is null and this map
          does not support null keys or the value or remappingFunction is
          null
 @since 1.8
 */
- (id __nullable)mergeWithId:(id)key
                      withId:(id)value
withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)remappingFunction;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilMap)

FOUNDATION_EXPORT id JavaUtilMap_getOrDefaultWithId_withId_(id<JavaUtilMap> self, id key, id defaultValue);

FOUNDATION_EXPORT void JavaUtilMap_forEachWithJavaUtilFunctionBiConsumer_(id<JavaUtilMap> self, id<JavaUtilFunctionBiConsumer> action);

FOUNDATION_EXPORT void JavaUtilMap_replaceAllWithJavaUtilFunctionBiFunction_(id<JavaUtilMap> self, id<JavaUtilFunctionBiFunction> function);

FOUNDATION_EXPORT id JavaUtilMap_putIfAbsentWithId_withId_(id<JavaUtilMap> self, id key, id value);

FOUNDATION_EXPORT jboolean JavaUtilMap_removeWithId_withId_(id<JavaUtilMap> self, id key, id value);

FOUNDATION_EXPORT jboolean JavaUtilMap_replaceWithId_withId_withId_(id<JavaUtilMap> self, id key, id oldValue, id newValue);

FOUNDATION_EXPORT id JavaUtilMap_replaceWithId_withId_(id<JavaUtilMap> self, id key, id value);

FOUNDATION_EXPORT id JavaUtilMap_computeIfAbsentWithId_withJavaUtilFunctionFunction_(id<JavaUtilMap> self, id key, id<JavaUtilFunctionFunction> mappingFunction);

FOUNDATION_EXPORT id JavaUtilMap_computeIfPresentWithId_withJavaUtilFunctionBiFunction_(id<JavaUtilMap> self, id key, id<JavaUtilFunctionBiFunction> remappingFunction);

FOUNDATION_EXPORT id JavaUtilMap_computeWithId_withJavaUtilFunctionBiFunction_(id<JavaUtilMap> self, id key, id<JavaUtilFunctionBiFunction> remappingFunction);

FOUNDATION_EXPORT id JavaUtilMap_mergeWithId_withId_withJavaUtilFunctionBiFunction_(id<JavaUtilMap> self, id key, id value, id<JavaUtilFunctionBiFunction> remappingFunction);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilMap)

#endif

#if !defined (JavaUtilMap_Entry_) && (INCLUDE_ALL_JavaUtilMap || defined(INCLUDE_JavaUtilMap_Entry))
#define JavaUtilMap_Entry_

@protocol JavaUtilComparator;

/*!
 @brief A map entry (key-value pair).The <code>Map.entrySet</code> method returns
  a collection-view of the map, whose elements are of this class.
 The 
 <i>only</i> way to obtain a reference to a map entry is from the
  iterator of this collection-view.  These <code>Map.Entry</code> objects are
  valid <i>only</i> for the duration of the iteration; more formally,
  the behavior of a map entry is undefined if the backing map has been
  modified after the entry was returned by the iterator, except through the 
 <code>setValue</code> operation on the map entry.
 - seealso: Map#entrySet()
 @since 1.2
 */
@protocol JavaUtilMap_Entry < JavaObject >

/*!
 @brief Returns the key corresponding to this entry.
 @return the key corresponding to this entry
 @throw IllegalStateExceptionimplementations may, but are not
          required to, throw this exception if the entry has been
          removed from the backing map.
 */
- (id)getKey;

/*!
 @brief Returns the value corresponding to this entry.If the mapping
  has been removed from the backing map (by the iterator's 
 <code>remove</code> operation), the results of this call are undefined.
 @return the value corresponding to this entry
 @throw IllegalStateExceptionimplementations may, but are not
          required to, throw this exception if the entry has been
          removed from the backing map.
 */
- (id)getValue;

/*!
 @brief Replaces the value corresponding to this entry with the specified
  value (optional operation).
 (Writes through to the map.)  The
  behavior of this call is undefined if the mapping has already been
  removed from the map (by the iterator's <code>remove</code> operation).
 @param value new value to be stored in this entry
 @return old value corresponding to the entry
 @throw UnsupportedOperationExceptionif the <code>put</code> operation
          is not supported by the backing map
 @throw ClassCastExceptionif the class of the specified value
          prevents it from being stored in the backing map
 @throw NullPointerExceptionif the backing map does not permit
          null values, and the specified value is null
 @throw IllegalArgumentExceptionif some property of this value
          prevents it from being stored in the backing map
 @throw IllegalStateExceptionimplementations may, but are not
          required to, throw this exception if the entry has been
          removed from the backing map.
 */
- (id)setValueWithId:(id)value;

/*!
 @brief Compares the specified object with this entry for equality.
 Returns <code>true</code> if the given object is also a map entry and
  the two entries represent the same mapping.  More formally, two entries 
 <code>e1</code> and <code>e2</code> represent the same mapping
  if@code

      (e1.getKey()==null ?
       e2.getKey()==null : e1.getKey().equals(e2.getKey()))  &amp;&amp;
      (e1.getValue()==null ?
       e2.getValue()==null : e1.getValue().equals(e2.getValue())) 
  
@endcode
  This ensures that the <code>equals</code> method works properly across
  different implementations of the <code>Map.Entry</code> interface.
 @param o object to be compared for equality with this map entry
 @return <code>true</code> if the specified object is equal to this map
          entry
 */
- (jboolean)isEqual:(id)o;

/*!
 @brief Returns the hash code value for this map entry.The hash code
  of a map entry <code>e</code> is defined to be: @code

      (e.getKey()==null   ?
 0 : e.getKey().hashCode()) ^
      (e.getValue()==null ? 0 : e.getValue().hashCode()) 
  
@endcode
  This ensures that <code>e1.equals(e2)</code> implies that 
 <code>e1.hashCode()==e2.hashCode()</code> for any two Entries 
 <code>e1</code> and <code>e2</code>, as required by the general
  contract of <code>Object.hashCode</code>.
 @return the hash code value for this map entry
 - seealso: Object#hashCode()
 - seealso: Object#equals(Object)
 - seealso: #equals(Object)
 */
- (NSUInteger)hash;

@end

@interface JavaUtilMap_Entry : NSObject

/*!
 @brief Returns a comparator that compares <code>Map.Entry</code> in natural order on key.
 <p>The returned comparator is serializable and throws <code>NullPointerException</code>
  when comparing an entry with a null key.
 @return a comparator that compares <code>Map.Entry</code> in natural order on key.
 - seealso: Comparable
 @since 1.8
 */
+ (id<JavaUtilComparator> __nonnull)comparingByKey;

/*!
 @brief Returns a comparator that compares <code>Map.Entry</code> in natural order on value.
 <p>The returned comparator is serializable and throws <code>NullPointerException</code>
  when comparing an entry with null values.
 @return a comparator that compares <code>Map.Entry</code> in natural order on value.
 - seealso: Comparable
 @since 1.8
 */
+ (id<JavaUtilComparator> __nonnull)comparingByValue;

/*!
 @brief Returns a comparator that compares <code>Map.Entry</code> by key using the given 
 <code>Comparator</code>.
 <p>The returned comparator is serializable if the specified comparator
  is also serializable.
 @param cmp the key <code>Comparator</code>
 @return a comparator that compares <code>Map.Entry</code> by the key.
 @since 1.8
 */
+ (id<JavaUtilComparator> __nonnull)comparingByKeyWithJavaUtilComparator:(id<JavaUtilComparator>)cmp;

/*!
 @brief Returns a comparator that compares <code>Map.Entry</code> by value using the given 
 <code>Comparator</code>.
 <p>The returned comparator is serializable if the specified comparator
  is also serializable.
 @param cmp the value <code>Comparator</code>
 @return a comparator that compares <code>Map.Entry</code> by the value.
 @since 1.8
 */
+ (id<JavaUtilComparator> __nonnull)comparingByValueWithJavaUtilComparator:(id<JavaUtilComparator>)cmp;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilMap_Entry)

FOUNDATION_EXPORT id<JavaUtilComparator> JavaUtilMap_Entry_comparingByKey(void);

FOUNDATION_EXPORT id<JavaUtilComparator> JavaUtilMap_Entry_comparingByValue(void);

FOUNDATION_EXPORT id<JavaUtilComparator> JavaUtilMap_Entry_comparingByKeyWithJavaUtilComparator_(id<JavaUtilComparator> cmp);

FOUNDATION_EXPORT id<JavaUtilComparator> JavaUtilMap_Entry_comparingByValueWithJavaUtilComparator_(id<JavaUtilComparator> cmp);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilMap_Entry)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilMap")
