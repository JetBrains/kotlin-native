//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/function/BiConsumer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilFunctionBiConsumer")
#ifdef RESTRICT_JavaUtilFunctionBiConsumer
#define INCLUDE_ALL_JavaUtilFunctionBiConsumer 0
#else
#define INCLUDE_ALL_JavaUtilFunctionBiConsumer 1
#endif
#undef RESTRICT_JavaUtilFunctionBiConsumer

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilFunctionBiConsumer_) && (INCLUDE_ALL_JavaUtilFunctionBiConsumer || defined(INCLUDE_JavaUtilFunctionBiConsumer))
#define JavaUtilFunctionBiConsumer_

/*!
 @brief Represents an operation that accepts two input arguments and returns no
  result.This is the two-arity specialization of <code>Consumer</code>.
 Unlike most other functional interfaces, <code>BiConsumer</code> is expected
  to operate via side-effects. 
 <p>This is a <a href="package-summary.html">functional interface</a>
  whose functional method is <code>accept(Object, Object)</code>.
 - seealso: Consumer
 @since 1.8
 */
@protocol JavaUtilFunctionBiConsumer < JavaObject >

/*!
 @brief Performs this operation on the given arguments.
 @param t the first input argument
 @param u the second input argument
 */
- (void)acceptWithId:(id)t
              withId:(id)u;

/*!
 @brief Returns a composed <code>BiConsumer</code> that performs, in sequence, this
  operation followed by the <code>after</code> operation.If performing either
  operation throws an exception, it is relayed to the caller of the
  composed operation.
 If performing this operation throws an exception,
  the <code>after</code> operation will not be performed.
 @param after the operation to perform after this operation
 @return a composed <code>BiConsumer</code> that performs in sequence this
  operation followed by the <code>after</code> operation
 @throw NullPointerExceptionif <code>after</code> is null
 */
- (id<JavaUtilFunctionBiConsumer>)andThenWithJavaUtilFunctionBiConsumer:(id<JavaUtilFunctionBiConsumer>)after;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilFunctionBiConsumer)

FOUNDATION_EXPORT id<JavaUtilFunctionBiConsumer> JavaUtilFunctionBiConsumer_andThenWithJavaUtilFunctionBiConsumer_(id<JavaUtilFunctionBiConsumer> self, id<JavaUtilFunctionBiConsumer> after);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilFunctionBiConsumer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilFunctionBiConsumer")
