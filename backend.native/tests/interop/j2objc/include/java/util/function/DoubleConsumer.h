//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/function/DoubleConsumer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilFunctionDoubleConsumer")
#ifdef RESTRICT_JavaUtilFunctionDoubleConsumer
#define INCLUDE_ALL_JavaUtilFunctionDoubleConsumer 0
#else
#define INCLUDE_ALL_JavaUtilFunctionDoubleConsumer 1
#endif
#undef RESTRICT_JavaUtilFunctionDoubleConsumer

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilFunctionDoubleConsumer_) && (INCLUDE_ALL_JavaUtilFunctionDoubleConsumer || defined(INCLUDE_JavaUtilFunctionDoubleConsumer))
#define JavaUtilFunctionDoubleConsumer_

/*!
 @brief Represents an operation that accepts a single <code>double</code>-valued argument and
  returns no result.This is the primitive type specialization of 
 <code>Consumer</code> for <code>double</code>.
 Unlike most other functional interfaces, 
 <code>DoubleConsumer</code> is expected to operate via side-effects. 
 <p>This is a <a href="package-summary.html">functional interface</a>
  whose functional method is <code>accept(double)</code>.
 - seealso: Consumer
 @since 1.8
 */
@protocol JavaUtilFunctionDoubleConsumer < JavaObject >

/*!
 @brief Performs this operation on the given argument.
 @param value the input argument
 */
- (void)acceptWithDouble:(jdouble)value;

/*!
 @brief Returns a composed <code>DoubleConsumer</code> that performs, in sequence, this
  operation followed by the <code>after</code> operation.If performing either
  operation throws an exception, it is relayed to the caller of the
  composed operation.
 If performing this operation throws an exception,
  the <code>after</code> operation will not be performed.
 @param after the operation to perform after this operation
 @return a composed <code>DoubleConsumer</code> that performs in sequence this
  operation followed by the <code>after</code> operation
 @throw NullPointerExceptionif <code>after</code> is null
 */
- (id<JavaUtilFunctionDoubleConsumer>)andThenWithJavaUtilFunctionDoubleConsumer:(id<JavaUtilFunctionDoubleConsumer>)after;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilFunctionDoubleConsumer)

FOUNDATION_EXPORT id<JavaUtilFunctionDoubleConsumer> JavaUtilFunctionDoubleConsumer_andThenWithJavaUtilFunctionDoubleConsumer_(id<JavaUtilFunctionDoubleConsumer> self, id<JavaUtilFunctionDoubleConsumer> after);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilFunctionDoubleConsumer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilFunctionDoubleConsumer")
