//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/function/BiFunction.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilFunctionBiFunction")
#ifdef RESTRICT_JavaUtilFunctionBiFunction
#define INCLUDE_ALL_JavaUtilFunctionBiFunction 0
#else
#define INCLUDE_ALL_JavaUtilFunctionBiFunction 1
#endif
#undef RESTRICT_JavaUtilFunctionBiFunction

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilFunctionBiFunction_) && (INCLUDE_ALL_JavaUtilFunctionBiFunction || defined(INCLUDE_JavaUtilFunctionBiFunction))
#define JavaUtilFunctionBiFunction_

@protocol JavaUtilFunctionFunction;

/*!
 @brief Represents a function that accepts two arguments and produces a result.
 This is the two-arity specialization of <code>Function</code>.
  
 <p>This is a <a href="package-summary.html">functional interface</a>
  whose functional method is <code>apply(Object, Object)</code>.
 - seealso: Function
 @since 1.8
 */
@protocol JavaUtilFunctionBiFunction < JavaObject >

/*!
 @brief Applies this function to the given arguments.
 @param t the first function argument
 @param u the second function argument
 @return the function result
 */
- (id)applyWithId:(id)t
           withId:(id)u;

/*!
 @brief Returns a composed function that first applies this function to
  its input, and then applies the <code>after</code> function to the result.
 If evaluation of either function throws an exception, it is relayed to
  the caller of the composed function.
 @param after the function to apply after this function is applied
 @return a composed function that first applies this function and then
  applies the <code>after</code> function
 @throw NullPointerExceptionif after is null
 */
- (id<JavaUtilFunctionBiFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)after;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilFunctionBiFunction)

FOUNDATION_EXPORT id<JavaUtilFunctionBiFunction> JavaUtilFunctionBiFunction_andThenWithJavaUtilFunctionFunction_(id<JavaUtilFunctionBiFunction> self, id<JavaUtilFunctionFunction> after);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilFunctionBiFunction)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilFunctionBiFunction")
