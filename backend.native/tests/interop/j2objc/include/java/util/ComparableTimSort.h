//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/ComparableTimSort.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilComparableTimSort")
#ifdef RESTRICT_JavaUtilComparableTimSort
#define INCLUDE_ALL_JavaUtilComparableTimSort 0
#else
#define INCLUDE_ALL_JavaUtilComparableTimSort 1
#endif
#undef RESTRICT_JavaUtilComparableTimSort

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilComparableTimSort_) && (INCLUDE_ALL_JavaUtilComparableTimSort || defined(INCLUDE_JavaUtilComparableTimSort))
#define JavaUtilComparableTimSort_

@class IOSObjectArray;

/*!
 @brief This is a near duplicate of <code>TimSort</code>, modified for use with
  arrays of objects that implement <code>Comparable</code>, instead of using
  explicit comparators.
 <p>If you are using an optimizing VM, you may find that ComparableTimSort
  offers no performance benefit over TimSort in conjunction with a
  comparator that simply returns <code>((Comparable)first).compareTo(Second)</code>.
  If this is the case, you are better off deleting ComparableTimSort to
  eliminate the code duplication.  (See Arrays.java for details.)
 @author Josh Bloch
 */
@interface JavaUtilComparableTimSort : NSObject

#pragma mark Package-Private

/*!
 @brief Sorts the given range, using the given workspace array slice
  for temp storage when possible.This method is designed to be
  invoked from public methods (in class Arrays) after performing
  any necessary array bounds checks and expanding parameters into
  the required forms.
 @param a the array to be sorted
 @param lo the index of the first element, inclusive, to be sorted
 @param hi the index of the last element, exclusive, to be sorted
 @param work a workspace array (slice)
 @param workBase origin of usable space in work array
 @param workLen usable size of work array
 @since 1.8
 */
+ (void)sortWithNSObjectArray:(IOSObjectArray *)a
                      withInt:(jint)lo
                      withInt:(jint)hi
            withNSObjectArray:(IOSObjectArray *)work
                      withInt:(jint)workBase
                      withInt:(jint)workLen;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilComparableTimSort)

FOUNDATION_EXPORT void JavaUtilComparableTimSort_sortWithNSObjectArray_withInt_withInt_withNSObjectArray_withInt_withInt_(IOSObjectArray *a, jint lo, jint hi, IOSObjectArray *work, jint workBase, jint workLen);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilComparableTimSort)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilComparableTimSort")
