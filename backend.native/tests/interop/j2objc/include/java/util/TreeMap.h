//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/util/TreeMap.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaUtilTreeMap")
#ifdef RESTRICT_JavaUtilTreeMap
#define INCLUDE_ALL_JavaUtilTreeMap 0
#else
#define INCLUDE_ALL_JavaUtilTreeMap 1
#endif
#undef RESTRICT_JavaUtilTreeMap
#ifdef INCLUDE_JavaUtilTreeMap_EntrySpliterator
#define INCLUDE_JavaUtilTreeMap_TreeMapSpliterator 1
#endif
#ifdef INCLUDE_JavaUtilTreeMap_ValueSpliterator
#define INCLUDE_JavaUtilTreeMap_TreeMapSpliterator 1
#endif
#ifdef INCLUDE_JavaUtilTreeMap_DescendingKeySpliterator
#define INCLUDE_JavaUtilTreeMap_TreeMapSpliterator 1
#endif
#ifdef INCLUDE_JavaUtilTreeMap_KeySpliterator
#define INCLUDE_JavaUtilTreeMap_TreeMapSpliterator 1
#endif
#ifdef INCLUDE_JavaUtilTreeMap_DescendingSubMap_DescendingEntrySetView
#define INCLUDE_JavaUtilTreeMap_NavigableSubMap_EntrySetView 1
#endif
#ifdef INCLUDE_JavaUtilTreeMap_DescendingSubMap
#define INCLUDE_JavaUtilTreeMap_NavigableSubMap 1
#endif
#ifdef INCLUDE_JavaUtilTreeMap_AscendingSubMap_AscendingEntrySetView
#define INCLUDE_JavaUtilTreeMap_NavigableSubMap_EntrySetView 1
#endif
#ifdef INCLUDE_JavaUtilTreeMap_AscendingSubMap
#define INCLUDE_JavaUtilTreeMap_NavigableSubMap 1
#endif
#ifdef INCLUDE_JavaUtilTreeMap_NavigableSubMap_DescendingSubMapKeyIterator
#define INCLUDE_JavaUtilTreeMap_NavigableSubMap_SubMapIterator 1
#endif
#ifdef INCLUDE_JavaUtilTreeMap_NavigableSubMap_SubMapKeyIterator
#define INCLUDE_JavaUtilTreeMap_NavigableSubMap_SubMapIterator 1
#endif
#ifdef INCLUDE_JavaUtilTreeMap_NavigableSubMap_DescendingSubMapEntryIterator
#define INCLUDE_JavaUtilTreeMap_NavigableSubMap_SubMapIterator 1
#endif
#ifdef INCLUDE_JavaUtilTreeMap_NavigableSubMap_SubMapEntryIterator
#define INCLUDE_JavaUtilTreeMap_NavigableSubMap_SubMapIterator 1
#endif
#ifdef INCLUDE_JavaUtilTreeMap_DescendingKeyIterator
#define INCLUDE_JavaUtilTreeMap_PrivateEntryIterator 1
#endif
#ifdef INCLUDE_JavaUtilTreeMap_KeyIterator
#define INCLUDE_JavaUtilTreeMap_PrivateEntryIterator 1
#endif
#ifdef INCLUDE_JavaUtilTreeMap_ValueIterator
#define INCLUDE_JavaUtilTreeMap_PrivateEntryIterator 1
#endif
#ifdef INCLUDE_JavaUtilTreeMap_EntryIterator
#define INCLUDE_JavaUtilTreeMap_PrivateEntryIterator 1
#endif

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaUtilTreeMap_) && (INCLUDE_ALL_JavaUtilTreeMap || defined(INCLUDE_JavaUtilTreeMap))
#define JavaUtilTreeMap_

#define RESTRICT_JavaUtilAbstractMap 1
#define INCLUDE_JavaUtilAbstractMap 1
#include "java/util/AbstractMap.h"

#define RESTRICT_JavaUtilNavigableMap 1
#define INCLUDE_JavaUtilNavigableMap 1
#include "java/util/NavigableMap.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class JavaIoObjectInputStream;
@class JavaUtilTreeMap_TreeMapEntry;
@protocol JavaUtilCollection;
@protocol JavaUtilComparator;
@protocol JavaUtilFunctionBiConsumer;
@protocol JavaUtilFunctionBiFunction;
@protocol JavaUtilIterator;
@protocol JavaUtilMap;
@protocol JavaUtilMap_Entry;
@protocol JavaUtilNavigableSet;
@protocol JavaUtilSet;
@protocol JavaUtilSortedMap;
@protocol JavaUtilSortedSet;
@protocol JavaUtilSpliterator;

/*!
 @brief A Red-Black tree based <code>NavigableMap</code> implementation.
 The map is sorted according to the natural
  ordering
  of its keys, or by a <code>Comparator</code> provided at map
  creation time, depending on which constructor is used. 
 <p>This implementation provides guaranteed log(n) time cost for the 
 <code>containsKey</code>, <code>get</code>, <code>put</code> and <code>remove</code>
  operations.  Algorithms are adaptations of those in Cormen, Leiserson, and
  Rivest's <em>Introduction to Algorithms</em>.
  
 <p>Note that the ordering maintained by a tree map, like any sorted map, and
  whether or not an explicit comparator is provided, must be <em>consistent
  with <code>equals</code></em> if this sorted map is to correctly implement the 
 <code>Map</code> interface.  (See <code>Comparable</code> or <code>Comparator</code> for a
  precise definition of <em>consistent with equals</em>.)  This is so because
  the <code>Map</code> interface is defined in terms of the <code>equals</code>
  operation, but a sorted map performs all key comparisons using its <code>compareTo</code>
  (or <code>compare</code>) method, so two keys that are deemed equal by
  this method are, from the standpoint of the sorted map, equal.  The behavior
  of a sorted map <em>is</em> well-defined even if its ordering is
  inconsistent with <code>equals</code>; it just fails to obey the general contract
  of the <code>Map</code> interface. 
 <p><strong>Note that this implementation is not synchronized.</strong>
  If multiple threads access a map concurrently, and at least one of the
  threads modifies the map structurally, it <em>must</em> be synchronized
  externally.  (A structural modification is any operation that adds or
  deletes one or more mappings; merely changing the value associated
  with an existing key is not a structural modification.)  This is
  typically accomplished by synchronizing on some object that naturally
  encapsulates the map.
  If no such object exists, the map should be "wrapped" using the 
 <code>Collections.synchronizedSortedMap</code>
  method.  This is best done at creation time, to prevent accidental
  unsynchronized access to the map: @code

    SortedMap m = Collections.synchronizedSortedMap(new TreeMap(...));
@endcode
  
 <p>The iterators returned by the <code>iterator</code> method of the collections
  returned by all of this class's "collection view methods" are 
 <em>fail-fast</em>: if the map is structurally modified at any time after
  the iterator is created, in any way except through the iterator's own 
 <code>remove</code> method, the iterator will throw a <code>ConcurrentModificationException</code>
 .  Thus, in the face of concurrent
  modification, the iterator fails quickly and cleanly, rather than risking
  arbitrary, non-deterministic behavior at an undetermined time in the future. 
 <p>Note that the fail-fast behavior of an iterator cannot be guaranteed
  as it is, generally speaking, impossible to make any hard guarantees in the
  presence of unsynchronized concurrent modification.  Fail-fast iterators
  throw <code>ConcurrentModificationException</code> on a best-effort basis.
  Therefore, it would be wrong to write a program that depended on this
  exception for its correctness:   <em>the fail-fast behavior of iterators
  should be used only to detect bugs.</em>
  
 <p>All <code>Map.Entry</code> pairs returned by methods in this class
  and its views represent snapshots of mappings at the time they were
  produced. They do <strong>not</strong> support the <code>Entry.setValue</code>
  method. (Note however that it is possible to change mappings in the
  associated map using <code>put</code>.)
  
 <p>This class is a member of the 
 <a href="{@@docRoot}/../technotes/guides/collections/index.html">
  Java Collections Framework</a>.
 @author Josh Bloch and Doug Lea
 - seealso: Map
 - seealso: HashMap
 - seealso: Hashtable
 - seealso: Comparable
 - seealso: Comparator
 - seealso: Collection
 @since 1.2
 */
@interface JavaUtilTreeMap : JavaUtilAbstractMap < JavaUtilNavigableMap, NSCopying, JavaIoSerializable >

#pragma mark Public

/*!
 @brief Constructs a new, empty tree map, using the natural ordering of its
  keys.All keys inserted into the map must implement the <code>Comparable</code>
  interface.
 Furthermore, all such keys must be 
 <em>mutually comparable</em>: <code>k1.compareTo(k2)</code> must not throw
  a <code>ClassCastException</code> for any keys <code>k1</code> and 
 <code>k2</code> in the map.  If the user attempts to put a key into the
  map that violates this constraint (for example, the user attempts to
  put a string key into a map whose keys are integers), the 
 <code>put(Object key, Object value)</code> call will throw a 
 <code>ClassCastException</code>.
 */
- (instancetype __nonnull)init;

/*!
 @brief Constructs a new, empty tree map, ordered according to the given
  comparator.All keys inserted into the map must be <em>mutually
  comparable</em> by the given comparator: <code>comparator.compare(k1,
  k2)</code>
  must not throw a <code>ClassCastException</code> for any keys 
 <code>k1</code> and <code>k2</code> in the map.
 If the user attempts to put
  a key into the map that violates this constraint, the <code>put(Object
  key, Object value)</code>
  call will throw a 
 <code>ClassCastException</code>.
 @param comparator the comparator that will be used to order this map.         If 
 <code>null</code> , the natural
         ordering
   of the keys will be used.
 */
- (instancetype __nonnull)initWithJavaUtilComparator:(id<JavaUtilComparator>)comparator;

/*!
 @brief Constructs a new tree map containing the same mappings as the given
  map, ordered according to the <em>natural ordering</em> of its keys.
 All keys inserted into the new map must implement the <code>Comparable</code>
  interface.  Furthermore, all such keys must be 
 <em>mutually comparable</em>: <code>k1.compareTo(k2)</code> must not throw
  a <code>ClassCastException</code> for any keys <code>k1</code> and 
 <code>k2</code> in the map.  This method runs in n*log(n) time.
 @param m the map whose mappings are to be placed in this map
 @throw ClassCastExceptionif the keys in m are not <code>Comparable</code>,
          or are not mutually comparable
 @throw NullPointerExceptionif the specified map is null
 */
- (instancetype __nonnull)initWithJavaUtilMap:(id<JavaUtilMap>)m;

/*!
 @brief Constructs a new tree map containing the same mappings and
  using the same ordering as the specified sorted map.This
  method runs in linear time.
 @param m the sorted map whose mappings are to be placed in this map,          and whose comparator is to be used to sort this map
 @throw NullPointerExceptionif the specified map is null
 */
- (instancetype __nonnull)initWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)m;

/*!
 @throw ClassCastException
 @throw NullPointerExceptionif the specified key is null
          and this map uses natural ordering, or its comparator
          does not permit null keys
 @since 1.6
 */
- (id<JavaUtilMap_Entry> __nullable)ceilingEntryWithId:(id)key;

/*!
 @throw ClassCastException
 @throw NullPointerExceptionif the specified key is null
          and this map uses natural ordering, or its comparator
          does not permit null keys
 @since 1.6
 */
- (id __nullable)ceilingKeyWithId:(id)key;

/*!
 @brief Removes all of the mappings from this map.
 The map will be empty after this call returns.
 */
- (void)clear;

/*!
 @brief Returns a shallow copy of this <code>TreeMap</code> instance.
 (The keys and
  values themselves are not cloned.)
 @return a shallow copy of this map
 */
- (id __nonnull)java_clone;

- (id<JavaUtilComparator> __nullable)comparator;

/*!
 @brief Returns <code>true</code> if this map contains a mapping for the specified
  key.
 @param key key whose presence in this map is to be tested
 @return <code>true</code> if this map contains a mapping for the
          specified key
 @throw ClassCastExceptionif the specified key cannot be compared
          with the keys currently in the map
 @throw NullPointerExceptionif the specified key is null
          and this map uses natural ordering, or its comparator
          does not permit null keys
 */
- (jboolean)containsKeyWithId:(id)key;

/*!
 @brief Returns <code>true</code> if this map maps one or more keys to the
  specified value.More formally, returns <code>true</code> if and only if
  this map contains at least one mapping to a value <code>v</code> such
  that <code>(value==null ?
 v==null : value.equals(v))</code>.  This
  operation will probably require time linear in the map size for
  most implementations.
 @param value value whose presence in this map is to be tested
 @return <code>true</code> if a mapping to <code>value</code> exists;
          <code>false</code> otherwise
 @since 1.2
 */
- (jboolean)containsValueWithId:(id)value;

/*!
 @since 1.6
 */
- (id<JavaUtilNavigableSet> __nonnull)descendingKeySet;

/*!
 @since 1.6
 */
- (id<JavaUtilNavigableMap> __nonnull)descendingMap;

/*!
 @brief Returns a <code>Set</code> view of the mappings contained in this map.
 <p>The set's iterator returns the entries in ascending key order. The
  sets's spliterator is 
 <em><a href="Spliterator.html#binding">late-binding</a></em>,
  <em>fail-fast</em>, and additionally reports <code>Spliterator.SORTED</code> and 
 <code>Spliterator.ORDERED</code> with an encounter order that is ascending key
  order. 
 <p>The set is backed by the map, so changes to the map are
  reflected in the set, and vice-versa.  If the map is modified
  while an iteration over the set is in progress (except through
  the iterator's own <code>remove</code> operation, or through the 
 <code>setValue</code> operation on a map entry returned by the
  iterator) the results of the iteration are undefined.  The set
  supports element removal, which removes the corresponding
  mapping from the map, via the <code>Iterator.remove</code>,
  <code>Set.remove</code>, <code>removeAll</code>, <code>retainAll</code> and 
 <code>clear</code> operations.  It does not support the 
 <code>add</code> or <code>addAll</code> operations.
 */
- (id<JavaUtilSet> __nonnull)entrySet;

/*!
 @since 1.6
 */
- (id<JavaUtilMap_Entry> __nullable)firstEntry;

/*!
 @throw NoSuchElementException
 */
- (id)firstKey;

/*!
 @throw ClassCastException
 @throw NullPointerExceptionif the specified key is null
          and this map uses natural ordering, or its comparator
          does not permit null keys
 @since 1.6
 */
- (id<JavaUtilMap_Entry> __nullable)floorEntryWithId:(id)key;

/*!
 @throw ClassCastException
 @throw NullPointerExceptionif the specified key is null
          and this map uses natural ordering, or its comparator
          does not permit null keys
 @since 1.6
 */
- (id __nullable)floorKeyWithId:(id)key;

- (void)forEachWithJavaUtilFunctionBiConsumer:(id<JavaUtilFunctionBiConsumer>)action;

/*!
 @brief Returns the value to which the specified key is mapped,
  or <code>null</code> if this map contains no mapping for the key.
 <p>More formally, if this map contains a mapping from a key 
 <code>k</code> to a value <code>v</code> such that <code>key</code> compares
  equal to <code>k</code> according to the map's ordering, then this
  method returns <code>v</code>; otherwise it returns <code>null</code>.
  (There can be at most one such mapping.) 
 <p>A return value of <code>null</code> does not <em>necessarily</em>
  indicate that the map contains no mapping for the key; it's also
  possible that the map explicitly maps the key to <code>null</code>.
  The <code>containsKey</code> operation may be used to
  distinguish these two cases.
 @throw ClassCastExceptionif the specified key cannot be compared
          with the keys currently in the map
 @throw NullPointerExceptionif the specified key is null
          and this map uses natural ordering, or its comparator
          does not permit null keys
 */
- (id __nullable)getWithId:(id)key;

/*!
 @throw ClassCastException
 @throw NullPointerExceptionif <code>toKey</code> is null
          and this map uses natural ordering, or its comparator
          does not permit null keys
 @throw IllegalArgumentException
 */
- (id<JavaUtilSortedMap> __nonnull)headMapWithId:(id)toKey;

/*!
 @throw ClassCastException
 @throw NullPointerExceptionif <code>toKey</code> is null
          and this map uses natural ordering, or its comparator
          does not permit null keys
 @throw IllegalArgumentException
 @since 1.6
 */
- (id<JavaUtilNavigableMap> __nonnull)headMapWithId:(id)toKey
                                        withBoolean:(jboolean)inclusive;

/*!
 @throw ClassCastException
 @throw NullPointerExceptionif the specified key is null
          and this map uses natural ordering, or its comparator
          does not permit null keys
 @since 1.6
 */
- (id<JavaUtilMap_Entry> __nullable)higherEntryWithId:(id)key;

/*!
 @throw ClassCastException
 @throw NullPointerExceptionif the specified key is null
          and this map uses natural ordering, or its comparator
          does not permit null keys
 @since 1.6
 */
- (id __nullable)higherKeyWithId:(id)key;

/*!
 @brief Returns a <code>Set</code> view of the keys contained in this map.
 <p>The set's iterator returns the keys in ascending order.
  The set's spliterator is 
 <em><a href="Spliterator.html#binding">late-binding</a></em>,
  <em>fail-fast</em>, and additionally reports <code>Spliterator.SORTED</code>
  and <code>Spliterator.ORDERED</code> with an encounter order that is ascending
  key order.  The spliterator's comparator (see 
 <code>java.util.Spliterator.getComparator()</code>) is <code>null</code> if
  the tree map's comparator (see <code>comparator()</code>) is <code>null</code>.
  Otherwise, the spliterator's comparator is the same as or imposes the
  same total ordering as the tree map's comparator. 
 <p>The set is backed by the map, so changes to the map are
  reflected in the set, and vice-versa.  If the map is modified
  while an iteration over the set is in progress (except through
  the iterator's own <code>remove</code> operation), the results of
  the iteration are undefined.  The set supports element removal,
  which removes the corresponding mapping from the map, via the 
 <code>Iterator.remove</code>, <code>Set.remove</code>,
  <code>removeAll</code>, <code>retainAll</code>, and <code>clear</code>
  operations.  It does not support the <code>add</code> or <code>addAll</code>
  operations.
 */
- (id<JavaUtilSet> __nonnull)keySet;

/*!
 @since 1.6
 */
- (id<JavaUtilMap_Entry> __nullable)lastEntry;

/*!
 @throw NoSuchElementException
 */
- (id)lastKey;

/*!
 @throw ClassCastException
 @throw NullPointerExceptionif the specified key is null
          and this map uses natural ordering, or its comparator
          does not permit null keys
 @since 1.6
 */
- (id<JavaUtilMap_Entry> __nullable)lowerEntryWithId:(id)key;

/*!
 @throw ClassCastException
 @throw NullPointerExceptionif the specified key is null
          and this map uses natural ordering, or its comparator
          does not permit null keys
 @since 1.6
 */
- (id __nullable)lowerKeyWithId:(id)key;

/*!
 @since 1.6
 */
- (id<JavaUtilNavigableSet> __nonnull)navigableKeySet;

/*!
 @since 1.6
 */
- (id<JavaUtilMap_Entry> __nullable)pollFirstEntry;

/*!
 @since 1.6
 */
- (id<JavaUtilMap_Entry> __nullable)pollLastEntry;

/*!
 @brief Associates the specified value with the specified key in this map.
 If the map previously contained a mapping for the key, the old
  value is replaced.
 @param key key with which the specified value is to be associated
 @param value value to be associated with the specified key
 @return the previous value associated with <code>key</code>, or
          <code>null</code> if there was no mapping for <code>key</code>.
          (A <code>null</code> return can also indicate that the map
          previously associated <code>null</code> with <code>key</code>.)
 @throw ClassCastExceptionif the specified key cannot be compared
          with the keys currently in the map
 @throw NullPointerExceptionif the specified key is null
          and this map uses natural ordering, or its comparator
          does not permit null keys
 */
- (id __nullable)putWithId:(id)key
                    withId:(id)value;

/*!
 @brief Copies all of the mappings from the specified map to this map.
 These mappings replace any mappings that this map had for any
  of the keys currently in the specified map.
 @param map mappings to be stored in this map
 @throw ClassCastExceptionif the class of a key or value in
          the specified map prevents it from being stored in this map
 @throw NullPointerExceptionif the specified map is null or
          the specified map contains a null key and this map does not
          permit null keys
 */
- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)map;

/*!
 @brief Removes the mapping for this key from this TreeMap if present.
 @param key key for which mapping should be removed
 @return the previous value associated with <code>key</code>, or
          <code>null</code> if there was no mapping for <code>key</code>.
          (A <code>null</code> return can also indicate that the map
          previously associated <code>null</code> with <code>key</code>.)
 @throw ClassCastExceptionif the specified key cannot be compared
          with the keys currently in the map
 @throw NullPointerExceptionif the specified key is null
          and this map uses natural ordering, or its comparator
          does not permit null keys
 */
- (id __nullable)removeWithId:(id)key;

- (void)replaceAllWithJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)function;

/*!
 @brief Returns the number of key-value mappings in this map.
 @return the number of key-value mappings in this map
 */
- (jint)size;

/*!
 @throw ClassCastException
 @throw NullPointerExceptionif <code>fromKey</code> or <code>toKey</code> is
          null and this map uses natural ordering, or its comparator
          does not permit null keys
 @throw IllegalArgumentException
 @since 1.6
 */
- (id<JavaUtilNavigableMap> __nonnull)subMapWithId:(id)fromKey
                                       withBoolean:(jboolean)fromInclusive
                                            withId:(id)toKey
                                       withBoolean:(jboolean)toInclusive;

/*!
 @throw ClassCastException
 @throw NullPointerExceptionif <code>fromKey</code> or <code>toKey</code> is
          null and this map uses natural ordering, or its comparator
          does not permit null keys
 @throw IllegalArgumentException
 */
- (id<JavaUtilSortedMap> __nonnull)subMapWithId:(id)fromKey
                                         withId:(id)toKey;

/*!
 @throw ClassCastException
 @throw NullPointerExceptionif <code>fromKey</code> is null
          and this map uses natural ordering, or its comparator
          does not permit null keys
 @throw IllegalArgumentException
 */
- (id<JavaUtilSortedMap> __nonnull)tailMapWithId:(id)fromKey;

/*!
 @throw ClassCastException
 @throw NullPointerExceptionif <code>fromKey</code> is null
          and this map uses natural ordering, or its comparator
          does not permit null keys
 @throw IllegalArgumentException
 @since 1.6
 */
- (id<JavaUtilNavigableMap> __nonnull)tailMapWithId:(id)fromKey
                                        withBoolean:(jboolean)inclusive;

/*!
 @brief Returns a <code>Collection</code> view of the values contained in this map.
 <p>The collection's iterator returns the values in ascending order
  of the corresponding keys. The collection's spliterator is 
 <em><a href="Spliterator.html#binding">late-binding</a></em>,
  <em>fail-fast</em>, and additionally reports <code>Spliterator.ORDERED</code>
  with an encounter order that is ascending order of the corresponding
  keys. 
 <p>The collection is backed by the map, so changes to the map are
  reflected in the collection, and vice-versa.  If the map is
  modified while an iteration over the collection is in progress
  (except through the iterator's own <code>remove</code> operation),
  the results of the iteration are undefined.  The collection
  supports element removal, which removes the corresponding
  mapping from the map, via the <code>Iterator.remove</code>,
  <code>Collection.remove</code>, <code>removeAll</code>,
  <code>retainAll</code> and <code>clear</code> operations.  It does not
  support the <code>add</code> or <code>addAll</code> operations.
 */
- (id<JavaUtilCollection> __nonnull)values;

#pragma mark Package-Private

/*!
 @brief Intended to be called only from TreeSet.addAll
 */
- (void)addAllForTreeSetWithJavaUtilSortedSet:(id<JavaUtilSortedSet>)set
                                       withId:(id)defaultVal;

/*!
 @brief Compares two keys using the correct comparison method for this TreeMap.
 */
- (jint)compareWithId:(id)k1
               withId:(id)k2;

- (id<JavaUtilIterator>)descendingKeyIterator;

- (id<JavaUtilSpliterator>)descendingKeySpliterator;

/*!
 @brief Return SimpleImmutableEntry for entry, or null if null
 */
+ (id<JavaUtilMap_Entry>)exportEntryWithJavaUtilTreeMap_TreeMapEntry:(JavaUtilTreeMap_TreeMapEntry *)e;

/*!
 @brief Gets the entry corresponding to the specified key; if no such entry
  exists, returns the entry for the least key greater than the specified
  key; if no such entry exists (i.e., the greatest key in the Tree is less
  than the specified key), returns <code>null</code>.
 */
- (JavaUtilTreeMap_TreeMapEntry *)getCeilingEntryWithId:(id)key;

/*!
 @brief Returns this map's entry for the given key, or <code>null</code> if the map
  does not contain an entry for the key.
 @return this map's entry for the given key, or <code>null</code> if the map
          does not contain an entry for the key
 @throw ClassCastExceptionif the specified key cannot be compared
          with the keys currently in the map
 @throw NullPointerExceptionif the specified key is null
          and this map uses natural ordering, or its comparator
          does not permit null keys
 */
- (JavaUtilTreeMap_TreeMapEntry *)getEntryWithId:(id)key;

/*!
 @brief Version of getEntry using comparator.Split off from getEntry
  for performance.
 (This is not worth doing for most methods,
  that are less dependent on comparator performance, but is
  worthwhile here.)
 */
- (JavaUtilTreeMap_TreeMapEntry *)getEntryUsingComparatorWithId:(id)key;

/*!
 @brief Returns the first Entry in the TreeMap (according to the TreeMap's
  key-sort function).Returns null if the TreeMap is empty.
 */
- (JavaUtilTreeMap_TreeMapEntry *)getFirstEntry;

/*!
 @brief Gets the entry corresponding to the specified key; if no such entry
  exists, returns the entry for the greatest key less than the specified
  key; if no such entry exists, returns <code>null</code>.
 */
- (JavaUtilTreeMap_TreeMapEntry *)getFloorEntryWithId:(id)key;

/*!
 @brief Gets the entry for the least key greater than the specified
  key; if no such entry exists, returns the entry for the least
  key greater than the specified key; if no such entry exists
  returns <code>null</code>.
 */
- (JavaUtilTreeMap_TreeMapEntry *)getHigherEntryWithId:(id)key;

/*!
 @brief Returns the last Entry in the TreeMap (according to the TreeMap's
  key-sort function).Returns null if the TreeMap is empty.
 */
- (JavaUtilTreeMap_TreeMapEntry *)getLastEntry;

/*!
 @brief Returns the entry for the greatest key less than the specified key; if
  no such entry exists (i.e., the least key in the Tree is greater than
  the specified key), returns <code>null</code>.
 */
- (JavaUtilTreeMap_TreeMapEntry *)getLowerEntryWithId:(id)key;

/*!
 @brief Returns the key corresponding to the specified Entry.
 @throw NoSuchElementExceptionif the Entry is null
 */
+ (id)keyWithJavaUtilTreeMap_TreeMapEntry:(JavaUtilTreeMap_TreeMapEntry *)e;

- (id<JavaUtilIterator>)keyIterator;

/*!
 @brief Return key for entry, or null if null
 */
+ (id)keyOrNullWithJavaUtilTreeMap_TreeMapEntry:(JavaUtilTreeMap_TreeMapEntry *)e;

- (id<JavaUtilSpliterator>)keySpliterator;

/*!
 @brief Currently, we support Spliterator-based versions only for the
  full map, in either plain of descending form, otherwise relying
  on defaults because size estimation for submaps would dominate
  costs.The type tests needed to check these for key views are
  not very nice but avoid disrupting existing class
  structures.
 Callers must use plain default spliterators if this
  returns null.
 */
+ (id<JavaUtilSpliterator>)keySpliteratorForWithJavaUtilNavigableMap:(id<JavaUtilNavigableMap>)m;

/*!
 @brief Returns the predecessor of the specified Entry, or null if no such.
 */
+ (JavaUtilTreeMap_TreeMapEntry *)predecessorWithJavaUtilTreeMap_TreeMapEntry:(JavaUtilTreeMap_TreeMapEntry *)t;

/*!
 @brief Intended to be called only from TreeSet.readObject
 */
- (void)readTreeSetWithInt:(jint)size
withJavaIoObjectInputStream:(JavaIoObjectInputStream *)s
                    withId:(id)defaultVal;

/*!
 @brief Returns the successor of the specified Entry, or null if no such.
 */
+ (JavaUtilTreeMap_TreeMapEntry *)successorWithJavaUtilTreeMap_TreeMapEntry:(JavaUtilTreeMap_TreeMapEntry *)t;

/*!
 @brief Test two values for equality.Differs from o1.equals(o2) only in
  that it copes with <code>null</code> o1 properly.
 */
+ (jboolean)valEqualsWithId:(id)o1
                     withId:(id)o2;

@end

J2OBJC_STATIC_INIT(JavaUtilTreeMap)

FOUNDATION_EXPORT void JavaUtilTreeMap_init(JavaUtilTreeMap *self);

FOUNDATION_EXPORT JavaUtilTreeMap *new_JavaUtilTreeMap_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilTreeMap *create_JavaUtilTreeMap_init(void);

FOUNDATION_EXPORT void JavaUtilTreeMap_initWithJavaUtilComparator_(JavaUtilTreeMap *self, id<JavaUtilComparator> comparator);

FOUNDATION_EXPORT JavaUtilTreeMap *new_JavaUtilTreeMap_initWithJavaUtilComparator_(id<JavaUtilComparator> comparator) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilTreeMap *create_JavaUtilTreeMap_initWithJavaUtilComparator_(id<JavaUtilComparator> comparator);

FOUNDATION_EXPORT void JavaUtilTreeMap_initWithJavaUtilMap_(JavaUtilTreeMap *self, id<JavaUtilMap> m);

FOUNDATION_EXPORT JavaUtilTreeMap *new_JavaUtilTreeMap_initWithJavaUtilMap_(id<JavaUtilMap> m) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilTreeMap *create_JavaUtilTreeMap_initWithJavaUtilMap_(id<JavaUtilMap> m);

FOUNDATION_EXPORT void JavaUtilTreeMap_initWithJavaUtilSortedMap_(JavaUtilTreeMap *self, id<JavaUtilSortedMap> m);

FOUNDATION_EXPORT JavaUtilTreeMap *new_JavaUtilTreeMap_initWithJavaUtilSortedMap_(id<JavaUtilSortedMap> m) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilTreeMap *create_JavaUtilTreeMap_initWithJavaUtilSortedMap_(id<JavaUtilSortedMap> m);

FOUNDATION_EXPORT jboolean JavaUtilTreeMap_valEqualsWithId_withId_(id o1, id o2);

FOUNDATION_EXPORT id<JavaUtilMap_Entry> JavaUtilTreeMap_exportEntryWithJavaUtilTreeMap_TreeMapEntry_(JavaUtilTreeMap_TreeMapEntry *e);

FOUNDATION_EXPORT id JavaUtilTreeMap_keyOrNullWithJavaUtilTreeMap_TreeMapEntry_(JavaUtilTreeMap_TreeMapEntry *e);

FOUNDATION_EXPORT id JavaUtilTreeMap_keyWithJavaUtilTreeMap_TreeMapEntry_(JavaUtilTreeMap_TreeMapEntry *e);

FOUNDATION_EXPORT JavaUtilTreeMap_TreeMapEntry *JavaUtilTreeMap_successorWithJavaUtilTreeMap_TreeMapEntry_(JavaUtilTreeMap_TreeMapEntry *t);

FOUNDATION_EXPORT JavaUtilTreeMap_TreeMapEntry *JavaUtilTreeMap_predecessorWithJavaUtilTreeMap_TreeMapEntry_(JavaUtilTreeMap_TreeMapEntry *t);

FOUNDATION_EXPORT id<JavaUtilSpliterator> JavaUtilTreeMap_keySpliteratorForWithJavaUtilNavigableMap_(id<JavaUtilNavigableMap> m);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilTreeMap)

#endif

#if !defined (JavaUtilTreeMap_Values_) && (INCLUDE_ALL_JavaUtilTreeMap || defined(INCLUDE_JavaUtilTreeMap_Values))
#define JavaUtilTreeMap_Values_

#define RESTRICT_JavaUtilAbstractCollection 1
#define INCLUDE_JavaUtilAbstractCollection 1
#include "java/util/AbstractCollection.h"

@class JavaUtilTreeMap;
@protocol JavaUtilIterator;
@protocol JavaUtilSpliterator;

@interface JavaUtilTreeMap_Values : JavaUtilAbstractCollection

#pragma mark Public

- (void)clear;

- (jboolean)containsWithId:(id)o;

- (id<JavaUtilIterator>)iterator;

- (jboolean)removeWithId:(id)o;

- (jint)size;

- (id<JavaUtilSpliterator>)spliterator;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)outer$;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilTreeMap_Values)

FOUNDATION_EXPORT void JavaUtilTreeMap_Values_initWithJavaUtilTreeMap_(JavaUtilTreeMap_Values *self, JavaUtilTreeMap *outer$);

FOUNDATION_EXPORT JavaUtilTreeMap_Values *new_JavaUtilTreeMap_Values_initWithJavaUtilTreeMap_(JavaUtilTreeMap *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilTreeMap_Values *create_JavaUtilTreeMap_Values_initWithJavaUtilTreeMap_(JavaUtilTreeMap *outer$);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilTreeMap_Values)

#endif

#if !defined (JavaUtilTreeMap_EntrySet_) && (INCLUDE_ALL_JavaUtilTreeMap || defined(INCLUDE_JavaUtilTreeMap_EntrySet))
#define JavaUtilTreeMap_EntrySet_

#define RESTRICT_JavaUtilAbstractSet 1
#define INCLUDE_JavaUtilAbstractSet 1
#include "java/util/AbstractSet.h"

@class JavaUtilTreeMap;
@protocol JavaUtilIterator;
@protocol JavaUtilSpliterator;

@interface JavaUtilTreeMap_EntrySet : JavaUtilAbstractSet

#pragma mark Public

- (void)clear;

- (jboolean)containsWithId:(id)o;

- (id<JavaUtilIterator>)iterator;

- (jboolean)removeWithId:(id)o;

- (jint)size;

- (id<JavaUtilSpliterator>)spliterator;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)outer$;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilTreeMap_EntrySet)

FOUNDATION_EXPORT void JavaUtilTreeMap_EntrySet_initWithJavaUtilTreeMap_(JavaUtilTreeMap_EntrySet *self, JavaUtilTreeMap *outer$);

FOUNDATION_EXPORT JavaUtilTreeMap_EntrySet *new_JavaUtilTreeMap_EntrySet_initWithJavaUtilTreeMap_(JavaUtilTreeMap *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilTreeMap_EntrySet *create_JavaUtilTreeMap_EntrySet_initWithJavaUtilTreeMap_(JavaUtilTreeMap *outer$);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilTreeMap_EntrySet)

#endif

#if !defined (JavaUtilTreeMap_KeySet_) && (INCLUDE_ALL_JavaUtilTreeMap || defined(INCLUDE_JavaUtilTreeMap_KeySet))
#define JavaUtilTreeMap_KeySet_

#define RESTRICT_JavaUtilAbstractSet 1
#define INCLUDE_JavaUtilAbstractSet 1
#include "java/util/AbstractSet.h"

#define RESTRICT_JavaUtilNavigableSet 1
#define INCLUDE_JavaUtilNavigableSet 1
#include "java/util/NavigableSet.h"

@protocol JavaUtilComparator;
@protocol JavaUtilIterator;
@protocol JavaUtilNavigableMap;
@protocol JavaUtilSortedSet;
@protocol JavaUtilSpliterator;

@interface JavaUtilTreeMap_KeySet : JavaUtilAbstractSet < JavaUtilNavigableSet >

#pragma mark Public

- (id)ceilingWithId:(id)e;

- (void)clear;

- (id<JavaUtilComparator>)comparator;

- (jboolean)containsWithId:(id)o;

- (id<JavaUtilIterator>)descendingIterator;

- (id<JavaUtilNavigableSet>)descendingSet;

- (id)first;

- (id)floorWithId:(id)e;

- (id<JavaUtilSortedSet>)headSetWithId:(id)toElement;

- (id<JavaUtilNavigableSet>)headSetWithId:(id)toElement
                              withBoolean:(jboolean)inclusive;

- (id)higherWithId:(id)e;

- (jboolean)isEmpty;

- (id<JavaUtilIterator>)iterator;

- (id)last;

- (id)lowerWithId:(id)e;

- (id)pollFirst;

- (id)pollLast;

- (jboolean)removeWithId:(id)o;

- (jint)size;

- (id<JavaUtilSpliterator>)spliterator;

- (id<JavaUtilNavigableSet>)subSetWithId:(id)fromElement
                             withBoolean:(jboolean)fromInclusive
                                  withId:(id)toElement
                             withBoolean:(jboolean)toInclusive;

- (id<JavaUtilSortedSet>)subSetWithId:(id)fromElement
                               withId:(id)toElement;

- (id<JavaUtilSortedSet>)tailSetWithId:(id)fromElement;

- (id<JavaUtilNavigableSet>)tailSetWithId:(id)fromElement
                              withBoolean:(jboolean)inclusive;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilNavigableMap:(id<JavaUtilNavigableMap>)map;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilTreeMap_KeySet)

FOUNDATION_EXPORT void JavaUtilTreeMap_KeySet_initWithJavaUtilNavigableMap_(JavaUtilTreeMap_KeySet *self, id<JavaUtilNavigableMap> map);

FOUNDATION_EXPORT JavaUtilTreeMap_KeySet *new_JavaUtilTreeMap_KeySet_initWithJavaUtilNavigableMap_(id<JavaUtilNavigableMap> map) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilTreeMap_KeySet *create_JavaUtilTreeMap_KeySet_initWithJavaUtilNavigableMap_(id<JavaUtilNavigableMap> map);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilTreeMap_KeySet)

#endif

#if !defined (JavaUtilTreeMap_PrivateEntryIterator_) && (INCLUDE_ALL_JavaUtilTreeMap || defined(INCLUDE_JavaUtilTreeMap_PrivateEntryIterator))
#define JavaUtilTreeMap_PrivateEntryIterator_

#define RESTRICT_JavaUtilIterator 1
#define INCLUDE_JavaUtilIterator 1
#include "java/util/Iterator.h"

@class JavaUtilTreeMap;
@class JavaUtilTreeMap_TreeMapEntry;
@protocol JavaUtilFunctionConsumer;

/*!
 @brief Base class for TreeMap Iterators
 */
@interface JavaUtilTreeMap_PrivateEntryIterator : NSObject < JavaUtilIterator > {
 @public
  JavaUtilTreeMap_TreeMapEntry *next_;
  JavaUtilTreeMap_TreeMapEntry *lastReturned_;
  jint expectedModCount_;
}

#pragma mark Public

- (jboolean)hasNext;

- (void)remove;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)outer$
                 withJavaUtilTreeMap_TreeMapEntry:(JavaUtilTreeMap_TreeMapEntry *)first;

- (JavaUtilTreeMap_TreeMapEntry *)nextEntry;

- (JavaUtilTreeMap_TreeMapEntry *)prevEntry;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilTreeMap_PrivateEntryIterator)

J2OBJC_FIELD_SETTER(JavaUtilTreeMap_PrivateEntryIterator, next_, JavaUtilTreeMap_TreeMapEntry *)
J2OBJC_FIELD_SETTER(JavaUtilTreeMap_PrivateEntryIterator, lastReturned_, JavaUtilTreeMap_TreeMapEntry *)

FOUNDATION_EXPORT void JavaUtilTreeMap_PrivateEntryIterator_initWithJavaUtilTreeMap_withJavaUtilTreeMap_TreeMapEntry_(JavaUtilTreeMap_PrivateEntryIterator *self, JavaUtilTreeMap *outer$, JavaUtilTreeMap_TreeMapEntry *first);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilTreeMap_PrivateEntryIterator)

#endif

#if !defined (JavaUtilTreeMap_EntryIterator_) && (INCLUDE_ALL_JavaUtilTreeMap || defined(INCLUDE_JavaUtilTreeMap_EntryIterator))
#define JavaUtilTreeMap_EntryIterator_

@class JavaUtilTreeMap;
@class JavaUtilTreeMap_TreeMapEntry;
@protocol JavaUtilMap_Entry;

@interface JavaUtilTreeMap_EntryIterator : JavaUtilTreeMap_PrivateEntryIterator

#pragma mark Public

- (id<JavaUtilMap_Entry>)next;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)outer$
                 withJavaUtilTreeMap_TreeMapEntry:(JavaUtilTreeMap_TreeMapEntry *)first;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilTreeMap_EntryIterator)

FOUNDATION_EXPORT void JavaUtilTreeMap_EntryIterator_initWithJavaUtilTreeMap_withJavaUtilTreeMap_TreeMapEntry_(JavaUtilTreeMap_EntryIterator *self, JavaUtilTreeMap *outer$, JavaUtilTreeMap_TreeMapEntry *first);

FOUNDATION_EXPORT JavaUtilTreeMap_EntryIterator *new_JavaUtilTreeMap_EntryIterator_initWithJavaUtilTreeMap_withJavaUtilTreeMap_TreeMapEntry_(JavaUtilTreeMap *outer$, JavaUtilTreeMap_TreeMapEntry *first) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilTreeMap_EntryIterator *create_JavaUtilTreeMap_EntryIterator_initWithJavaUtilTreeMap_withJavaUtilTreeMap_TreeMapEntry_(JavaUtilTreeMap *outer$, JavaUtilTreeMap_TreeMapEntry *first);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilTreeMap_EntryIterator)

#endif

#if !defined (JavaUtilTreeMap_ValueIterator_) && (INCLUDE_ALL_JavaUtilTreeMap || defined(INCLUDE_JavaUtilTreeMap_ValueIterator))
#define JavaUtilTreeMap_ValueIterator_

@class JavaUtilTreeMap;
@class JavaUtilTreeMap_TreeMapEntry;

@interface JavaUtilTreeMap_ValueIterator : JavaUtilTreeMap_PrivateEntryIterator

#pragma mark Public

- (id)next;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)outer$
                 withJavaUtilTreeMap_TreeMapEntry:(JavaUtilTreeMap_TreeMapEntry *)first;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilTreeMap_ValueIterator)

FOUNDATION_EXPORT void JavaUtilTreeMap_ValueIterator_initWithJavaUtilTreeMap_withJavaUtilTreeMap_TreeMapEntry_(JavaUtilTreeMap_ValueIterator *self, JavaUtilTreeMap *outer$, JavaUtilTreeMap_TreeMapEntry *first);

FOUNDATION_EXPORT JavaUtilTreeMap_ValueIterator *new_JavaUtilTreeMap_ValueIterator_initWithJavaUtilTreeMap_withJavaUtilTreeMap_TreeMapEntry_(JavaUtilTreeMap *outer$, JavaUtilTreeMap_TreeMapEntry *first) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilTreeMap_ValueIterator *create_JavaUtilTreeMap_ValueIterator_initWithJavaUtilTreeMap_withJavaUtilTreeMap_TreeMapEntry_(JavaUtilTreeMap *outer$, JavaUtilTreeMap_TreeMapEntry *first);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilTreeMap_ValueIterator)

#endif

#if !defined (JavaUtilTreeMap_KeyIterator_) && (INCLUDE_ALL_JavaUtilTreeMap || defined(INCLUDE_JavaUtilTreeMap_KeyIterator))
#define JavaUtilTreeMap_KeyIterator_

@class JavaUtilTreeMap;
@class JavaUtilTreeMap_TreeMapEntry;

@interface JavaUtilTreeMap_KeyIterator : JavaUtilTreeMap_PrivateEntryIterator

#pragma mark Public

- (id)next;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)outer$
                 withJavaUtilTreeMap_TreeMapEntry:(JavaUtilTreeMap_TreeMapEntry *)first;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilTreeMap_KeyIterator)

FOUNDATION_EXPORT void JavaUtilTreeMap_KeyIterator_initWithJavaUtilTreeMap_withJavaUtilTreeMap_TreeMapEntry_(JavaUtilTreeMap_KeyIterator *self, JavaUtilTreeMap *outer$, JavaUtilTreeMap_TreeMapEntry *first);

FOUNDATION_EXPORT JavaUtilTreeMap_KeyIterator *new_JavaUtilTreeMap_KeyIterator_initWithJavaUtilTreeMap_withJavaUtilTreeMap_TreeMapEntry_(JavaUtilTreeMap *outer$, JavaUtilTreeMap_TreeMapEntry *first) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilTreeMap_KeyIterator *create_JavaUtilTreeMap_KeyIterator_initWithJavaUtilTreeMap_withJavaUtilTreeMap_TreeMapEntry_(JavaUtilTreeMap *outer$, JavaUtilTreeMap_TreeMapEntry *first);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilTreeMap_KeyIterator)

#endif

#if !defined (JavaUtilTreeMap_DescendingKeyIterator_) && (INCLUDE_ALL_JavaUtilTreeMap || defined(INCLUDE_JavaUtilTreeMap_DescendingKeyIterator))
#define JavaUtilTreeMap_DescendingKeyIterator_

@class JavaUtilTreeMap;
@class JavaUtilTreeMap_TreeMapEntry;

@interface JavaUtilTreeMap_DescendingKeyIterator : JavaUtilTreeMap_PrivateEntryIterator

#pragma mark Public

- (id)next;

- (void)remove;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)outer$
                 withJavaUtilTreeMap_TreeMapEntry:(JavaUtilTreeMap_TreeMapEntry *)first;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilTreeMap_DescendingKeyIterator)

FOUNDATION_EXPORT void JavaUtilTreeMap_DescendingKeyIterator_initWithJavaUtilTreeMap_withJavaUtilTreeMap_TreeMapEntry_(JavaUtilTreeMap_DescendingKeyIterator *self, JavaUtilTreeMap *outer$, JavaUtilTreeMap_TreeMapEntry *first);

FOUNDATION_EXPORT JavaUtilTreeMap_DescendingKeyIterator *new_JavaUtilTreeMap_DescendingKeyIterator_initWithJavaUtilTreeMap_withJavaUtilTreeMap_TreeMapEntry_(JavaUtilTreeMap *outer$, JavaUtilTreeMap_TreeMapEntry *first) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilTreeMap_DescendingKeyIterator *create_JavaUtilTreeMap_DescendingKeyIterator_initWithJavaUtilTreeMap_withJavaUtilTreeMap_TreeMapEntry_(JavaUtilTreeMap *outer$, JavaUtilTreeMap_TreeMapEntry *first);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilTreeMap_DescendingKeyIterator)

#endif

#if !defined (JavaUtilTreeMap_NavigableSubMap_) && (INCLUDE_ALL_JavaUtilTreeMap || defined(INCLUDE_JavaUtilTreeMap_NavigableSubMap))
#define JavaUtilTreeMap_NavigableSubMap_

#define RESTRICT_JavaUtilAbstractMap 1
#define INCLUDE_JavaUtilAbstractMap 1
#include "java/util/AbstractMap.h"

#define RESTRICT_JavaUtilNavigableMap 1
#define INCLUDE_JavaUtilNavigableMap 1
#include "java/util/NavigableMap.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class JavaUtilTreeMap;
@class JavaUtilTreeMap_KeySet;
@class JavaUtilTreeMap_NavigableSubMap_EntrySetView;
@class JavaUtilTreeMap_TreeMapEntry;
@protocol JavaUtilIterator;
@protocol JavaUtilMap_Entry;
@protocol JavaUtilNavigableSet;
@protocol JavaUtilSet;
@protocol JavaUtilSortedMap;
@protocol JavaUtilSpliterator;

/*!
 */
@interface JavaUtilTreeMap_NavigableSubMap : JavaUtilAbstractMap < JavaUtilNavigableMap, JavaIoSerializable > {
 @public
  /*!
   @brief The backing map.
   */
  JavaUtilTreeMap *m_;
  /*!
   @brief Endpoints are represented as triples (fromStart, lo,
  loInclusive) and (toEnd, hi, hiInclusive).If fromStart is
  true, then the low (absolute) bound is the start of the
  backing map, and the other values are ignored.
   Otherwise,
  if loInclusive is true, lo is the inclusive bound, else lo
  is the exclusive bound. Similarly for the upper bound.
   */
  id lo_;
  /*!
   @brief Endpoints are represented as triples (fromStart, lo,
  loInclusive) and (toEnd, hi, hiInclusive).If fromStart is
  true, then the low (absolute) bound is the start of the
  backing map, and the other values are ignored.
   Otherwise,
  if loInclusive is true, lo is the inclusive bound, else lo
  is the exclusive bound. Similarly for the upper bound.
   */
  id hi_;
  jboolean fromStart_;
  jboolean toEnd_;
  jboolean loInclusive_;
  jboolean hiInclusive_;
  id<JavaUtilNavigableMap> descendingMapView_;
  JavaUtilTreeMap_NavigableSubMap_EntrySetView *entrySetView_;
  JavaUtilTreeMap_KeySet *navigableKeySetView_;
}

#pragma mark Public

- (id<JavaUtilMap_Entry>)ceilingEntryWithId:(id)key;

- (id)ceilingKeyWithId:(id)key;

- (jboolean)containsKeyWithId:(id)key;

- (id<JavaUtilNavigableSet>)descendingKeySet;

- (id<JavaUtilMap_Entry>)firstEntry;

- (id)firstKey;

- (id<JavaUtilMap_Entry>)floorEntryWithId:(id)key;

- (id)floorKeyWithId:(id)key;

- (id)getWithId:(id)key;

- (id<JavaUtilSortedMap>)headMapWithId:(id)toKey;

- (id<JavaUtilMap_Entry>)higherEntryWithId:(id)key;

- (id)higherKeyWithId:(id)key;

- (jboolean)isEmpty;

- (id<JavaUtilSet>)keySet;

- (id<JavaUtilMap_Entry>)lastEntry;

- (id)lastKey;

- (id<JavaUtilMap_Entry>)lowerEntryWithId:(id)key;

- (id)lowerKeyWithId:(id)key;

- (id<JavaUtilNavigableSet>)navigableKeySet;

- (id<JavaUtilMap_Entry>)pollFirstEntry;

- (id<JavaUtilMap_Entry>)pollLastEntry;

- (id)putWithId:(id)key
         withId:(id)value;

- (id)removeWithId:(id)key;

- (jint)size;

- (id<JavaUtilSortedMap>)subMapWithId:(id)fromKey
                               withId:(id)toKey;

- (id<JavaUtilSortedMap>)tailMapWithId:(id)fromKey;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)m
                                      withBoolean:(jboolean)fromStart
                                           withId:(id)lo
                                      withBoolean:(jboolean)loInclusive
                                      withBoolean:(jboolean)toEnd
                                           withId:(id)hi
                                      withBoolean:(jboolean)hiInclusive;

- (JavaUtilTreeMap_TreeMapEntry *)absCeilingWithId:(id)key;

- (JavaUtilTreeMap_TreeMapEntry *)absFloorWithId:(id)key;

- (JavaUtilTreeMap_TreeMapEntry *)absHigherWithId:(id)key;

- (JavaUtilTreeMap_TreeMapEntry *)absHighest;

/*!
 @brief Returns the absolute high fence for ascending traversal
 */
- (JavaUtilTreeMap_TreeMapEntry *)absHighFence;

- (JavaUtilTreeMap_TreeMapEntry *)absLowerWithId:(id)key;

- (JavaUtilTreeMap_TreeMapEntry *)absLowest;

/*!
 @brief Return the absolute low fence for descending traversal
 */
- (JavaUtilTreeMap_TreeMapEntry *)absLowFence;

/*!
 @brief Returns descending iterator from the perspective of this submap
 */
- (id<JavaUtilIterator>)descendingKeyIterator;

- (jboolean)inClosedRangeWithId:(id)key;

- (jboolean)inRangeWithId:(id)key;

- (jboolean)inRangeWithId:(id)key
              withBoolean:(jboolean)inclusive;

/*!
 @brief Returns ascending iterator from the perspective of this submap
 */
- (id<JavaUtilIterator>)keyIterator;

- (id<JavaUtilSpliterator>)keySpliterator;

- (JavaUtilTreeMap_TreeMapEntry *)subCeilingWithId:(id)key;

- (JavaUtilTreeMap_TreeMapEntry *)subFloorWithId:(id)key;

- (JavaUtilTreeMap_TreeMapEntry *)subHigherWithId:(id)key;

- (JavaUtilTreeMap_TreeMapEntry *)subHighest;

- (JavaUtilTreeMap_TreeMapEntry *)subLowerWithId:(id)key;

- (JavaUtilTreeMap_TreeMapEntry *)subLowest;

- (jboolean)tooHighWithId:(id)key;

- (jboolean)tooLowWithId:(id)key;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilTreeMap_NavigableSubMap)

J2OBJC_FIELD_SETTER(JavaUtilTreeMap_NavigableSubMap, m_, JavaUtilTreeMap *)
J2OBJC_FIELD_SETTER(JavaUtilTreeMap_NavigableSubMap, lo_, id)
J2OBJC_FIELD_SETTER(JavaUtilTreeMap_NavigableSubMap, hi_, id)
J2OBJC_FIELD_SETTER(JavaUtilTreeMap_NavigableSubMap, descendingMapView_, id<JavaUtilNavigableMap>)
J2OBJC_FIELD_SETTER(JavaUtilTreeMap_NavigableSubMap, entrySetView_, JavaUtilTreeMap_NavigableSubMap_EntrySetView *)
J2OBJC_FIELD_SETTER(JavaUtilTreeMap_NavigableSubMap, navigableKeySetView_, JavaUtilTreeMap_KeySet *)

FOUNDATION_EXPORT void JavaUtilTreeMap_NavigableSubMap_initWithJavaUtilTreeMap_withBoolean_withId_withBoolean_withBoolean_withId_withBoolean_(JavaUtilTreeMap_NavigableSubMap *self, JavaUtilTreeMap *m, jboolean fromStart, id lo, jboolean loInclusive, jboolean toEnd, id hi, jboolean hiInclusive);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilTreeMap_NavigableSubMap)

#endif

#if !defined (JavaUtilTreeMap_NavigableSubMap_EntrySetView_) && (INCLUDE_ALL_JavaUtilTreeMap || defined(INCLUDE_JavaUtilTreeMap_NavigableSubMap_EntrySetView))
#define JavaUtilTreeMap_NavigableSubMap_EntrySetView_

#define RESTRICT_JavaUtilAbstractSet 1
#define INCLUDE_JavaUtilAbstractSet 1
#include "java/util/AbstractSet.h"

@class JavaUtilTreeMap_NavigableSubMap;

@interface JavaUtilTreeMap_NavigableSubMap_EntrySetView : JavaUtilAbstractSet

#pragma mark Public

- (jboolean)containsWithId:(id)o;

- (jboolean)isEmpty;

- (jboolean)removeWithId:(id)o;

- (jint)size;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilTreeMap_NavigableSubMap:(JavaUtilTreeMap_NavigableSubMap *)outer$;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilTreeMap_NavigableSubMap_EntrySetView)

FOUNDATION_EXPORT void JavaUtilTreeMap_NavigableSubMap_EntrySetView_initWithJavaUtilTreeMap_NavigableSubMap_(JavaUtilTreeMap_NavigableSubMap_EntrySetView *self, JavaUtilTreeMap_NavigableSubMap *outer$);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilTreeMap_NavigableSubMap_EntrySetView)

#endif

#if !defined (JavaUtilTreeMap_NavigableSubMap_SubMapIterator_) && (INCLUDE_ALL_JavaUtilTreeMap || defined(INCLUDE_JavaUtilTreeMap_NavigableSubMap_SubMapIterator))
#define JavaUtilTreeMap_NavigableSubMap_SubMapIterator_

#define RESTRICT_JavaUtilIterator 1
#define INCLUDE_JavaUtilIterator 1
#include "java/util/Iterator.h"

@class JavaUtilTreeMap_NavigableSubMap;
@class JavaUtilTreeMap_TreeMapEntry;
@protocol JavaUtilFunctionConsumer;

/*!
 @brief Iterators for SubMaps
 */
@interface JavaUtilTreeMap_NavigableSubMap_SubMapIterator : NSObject < JavaUtilIterator > {
 @public
  JavaUtilTreeMap_TreeMapEntry *lastReturned_;
  JavaUtilTreeMap_TreeMapEntry *next_;
  id fenceKey_;
  jint expectedModCount_;
}

#pragma mark Public

- (jboolean)hasNext;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilTreeMap_NavigableSubMap:(JavaUtilTreeMap_NavigableSubMap *)outer$
                                 withJavaUtilTreeMap_TreeMapEntry:(JavaUtilTreeMap_TreeMapEntry *)first
                                 withJavaUtilTreeMap_TreeMapEntry:(JavaUtilTreeMap_TreeMapEntry *)fence;

- (JavaUtilTreeMap_TreeMapEntry *)nextEntry;

- (JavaUtilTreeMap_TreeMapEntry *)prevEntry;

- (void)removeAscending;

- (void)removeDescending;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilTreeMap_NavigableSubMap_SubMapIterator)

J2OBJC_FIELD_SETTER(JavaUtilTreeMap_NavigableSubMap_SubMapIterator, lastReturned_, JavaUtilTreeMap_TreeMapEntry *)
J2OBJC_FIELD_SETTER(JavaUtilTreeMap_NavigableSubMap_SubMapIterator, next_, JavaUtilTreeMap_TreeMapEntry *)
J2OBJC_FIELD_SETTER(JavaUtilTreeMap_NavigableSubMap_SubMapIterator, fenceKey_, id)

FOUNDATION_EXPORT void JavaUtilTreeMap_NavigableSubMap_SubMapIterator_initWithJavaUtilTreeMap_NavigableSubMap_withJavaUtilTreeMap_TreeMapEntry_withJavaUtilTreeMap_TreeMapEntry_(JavaUtilTreeMap_NavigableSubMap_SubMapIterator *self, JavaUtilTreeMap_NavigableSubMap *outer$, JavaUtilTreeMap_TreeMapEntry *first, JavaUtilTreeMap_TreeMapEntry *fence);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilTreeMap_NavigableSubMap_SubMapIterator)

#endif

#if !defined (JavaUtilTreeMap_NavigableSubMap_SubMapEntryIterator_) && (INCLUDE_ALL_JavaUtilTreeMap || defined(INCLUDE_JavaUtilTreeMap_NavigableSubMap_SubMapEntryIterator))
#define JavaUtilTreeMap_NavigableSubMap_SubMapEntryIterator_

@class JavaUtilTreeMap_NavigableSubMap;
@class JavaUtilTreeMap_TreeMapEntry;
@protocol JavaUtilMap_Entry;

@interface JavaUtilTreeMap_NavigableSubMap_SubMapEntryIterator : JavaUtilTreeMap_NavigableSubMap_SubMapIterator

#pragma mark Public

- (id<JavaUtilMap_Entry>)next;

- (void)remove;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilTreeMap_NavigableSubMap:(JavaUtilTreeMap_NavigableSubMap *)outer$
                                 withJavaUtilTreeMap_TreeMapEntry:(JavaUtilTreeMap_TreeMapEntry *)first
                                 withJavaUtilTreeMap_TreeMapEntry:(JavaUtilTreeMap_TreeMapEntry *)fence;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilTreeMap_NavigableSubMap_SubMapEntryIterator)

FOUNDATION_EXPORT void JavaUtilTreeMap_NavigableSubMap_SubMapEntryIterator_initWithJavaUtilTreeMap_NavigableSubMap_withJavaUtilTreeMap_TreeMapEntry_withJavaUtilTreeMap_TreeMapEntry_(JavaUtilTreeMap_NavigableSubMap_SubMapEntryIterator *self, JavaUtilTreeMap_NavigableSubMap *outer$, JavaUtilTreeMap_TreeMapEntry *first, JavaUtilTreeMap_TreeMapEntry *fence);

FOUNDATION_EXPORT JavaUtilTreeMap_NavigableSubMap_SubMapEntryIterator *new_JavaUtilTreeMap_NavigableSubMap_SubMapEntryIterator_initWithJavaUtilTreeMap_NavigableSubMap_withJavaUtilTreeMap_TreeMapEntry_withJavaUtilTreeMap_TreeMapEntry_(JavaUtilTreeMap_NavigableSubMap *outer$, JavaUtilTreeMap_TreeMapEntry *first, JavaUtilTreeMap_TreeMapEntry *fence) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilTreeMap_NavigableSubMap_SubMapEntryIterator *create_JavaUtilTreeMap_NavigableSubMap_SubMapEntryIterator_initWithJavaUtilTreeMap_NavigableSubMap_withJavaUtilTreeMap_TreeMapEntry_withJavaUtilTreeMap_TreeMapEntry_(JavaUtilTreeMap_NavigableSubMap *outer$, JavaUtilTreeMap_TreeMapEntry *first, JavaUtilTreeMap_TreeMapEntry *fence);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilTreeMap_NavigableSubMap_SubMapEntryIterator)

#endif

#if !defined (JavaUtilTreeMap_NavigableSubMap_DescendingSubMapEntryIterator_) && (INCLUDE_ALL_JavaUtilTreeMap || defined(INCLUDE_JavaUtilTreeMap_NavigableSubMap_DescendingSubMapEntryIterator))
#define JavaUtilTreeMap_NavigableSubMap_DescendingSubMapEntryIterator_

@class JavaUtilTreeMap_NavigableSubMap;
@class JavaUtilTreeMap_TreeMapEntry;
@protocol JavaUtilMap_Entry;

@interface JavaUtilTreeMap_NavigableSubMap_DescendingSubMapEntryIterator : JavaUtilTreeMap_NavigableSubMap_SubMapIterator

#pragma mark Public

- (id<JavaUtilMap_Entry>)next;

- (void)remove;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilTreeMap_NavigableSubMap:(JavaUtilTreeMap_NavigableSubMap *)outer$
                                 withJavaUtilTreeMap_TreeMapEntry:(JavaUtilTreeMap_TreeMapEntry *)last
                                 withJavaUtilTreeMap_TreeMapEntry:(JavaUtilTreeMap_TreeMapEntry *)fence;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilTreeMap_NavigableSubMap_DescendingSubMapEntryIterator)

FOUNDATION_EXPORT void JavaUtilTreeMap_NavigableSubMap_DescendingSubMapEntryIterator_initWithJavaUtilTreeMap_NavigableSubMap_withJavaUtilTreeMap_TreeMapEntry_withJavaUtilTreeMap_TreeMapEntry_(JavaUtilTreeMap_NavigableSubMap_DescendingSubMapEntryIterator *self, JavaUtilTreeMap_NavigableSubMap *outer$, JavaUtilTreeMap_TreeMapEntry *last, JavaUtilTreeMap_TreeMapEntry *fence);

FOUNDATION_EXPORT JavaUtilTreeMap_NavigableSubMap_DescendingSubMapEntryIterator *new_JavaUtilTreeMap_NavigableSubMap_DescendingSubMapEntryIterator_initWithJavaUtilTreeMap_NavigableSubMap_withJavaUtilTreeMap_TreeMapEntry_withJavaUtilTreeMap_TreeMapEntry_(JavaUtilTreeMap_NavigableSubMap *outer$, JavaUtilTreeMap_TreeMapEntry *last, JavaUtilTreeMap_TreeMapEntry *fence) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilTreeMap_NavigableSubMap_DescendingSubMapEntryIterator *create_JavaUtilTreeMap_NavigableSubMap_DescendingSubMapEntryIterator_initWithJavaUtilTreeMap_NavigableSubMap_withJavaUtilTreeMap_TreeMapEntry_withJavaUtilTreeMap_TreeMapEntry_(JavaUtilTreeMap_NavigableSubMap *outer$, JavaUtilTreeMap_TreeMapEntry *last, JavaUtilTreeMap_TreeMapEntry *fence);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilTreeMap_NavigableSubMap_DescendingSubMapEntryIterator)

#endif

#if !defined (JavaUtilTreeMap_NavigableSubMap_SubMapKeyIterator_) && (INCLUDE_ALL_JavaUtilTreeMap || defined(INCLUDE_JavaUtilTreeMap_NavigableSubMap_SubMapKeyIterator))
#define JavaUtilTreeMap_NavigableSubMap_SubMapKeyIterator_

#define RESTRICT_JavaUtilSpliterator 1
#define INCLUDE_JavaUtilSpliterator 1
#include "java/util/Spliterator.h"

@class JavaUtilTreeMap_NavigableSubMap;
@class JavaUtilTreeMap_TreeMapEntry;
@protocol JavaUtilComparator;
@protocol JavaUtilFunctionConsumer;

@interface JavaUtilTreeMap_NavigableSubMap_SubMapKeyIterator : JavaUtilTreeMap_NavigableSubMap_SubMapIterator < JavaUtilSpliterator >

#pragma mark Public

- (jint)characteristics;

- (jlong)estimateSize;

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

- (id<JavaUtilComparator>)getComparator;

- (id)next;

- (void)remove;

- (jboolean)tryAdvanceWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

- (id<JavaUtilSpliterator>)trySplit;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilTreeMap_NavigableSubMap:(JavaUtilTreeMap_NavigableSubMap *)outer$
                                 withJavaUtilTreeMap_TreeMapEntry:(JavaUtilTreeMap_TreeMapEntry *)first
                                 withJavaUtilTreeMap_TreeMapEntry:(JavaUtilTreeMap_TreeMapEntry *)fence;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilTreeMap_NavigableSubMap_SubMapKeyIterator)

FOUNDATION_EXPORT void JavaUtilTreeMap_NavigableSubMap_SubMapKeyIterator_initWithJavaUtilTreeMap_NavigableSubMap_withJavaUtilTreeMap_TreeMapEntry_withJavaUtilTreeMap_TreeMapEntry_(JavaUtilTreeMap_NavigableSubMap_SubMapKeyIterator *self, JavaUtilTreeMap_NavigableSubMap *outer$, JavaUtilTreeMap_TreeMapEntry *first, JavaUtilTreeMap_TreeMapEntry *fence);

FOUNDATION_EXPORT JavaUtilTreeMap_NavigableSubMap_SubMapKeyIterator *new_JavaUtilTreeMap_NavigableSubMap_SubMapKeyIterator_initWithJavaUtilTreeMap_NavigableSubMap_withJavaUtilTreeMap_TreeMapEntry_withJavaUtilTreeMap_TreeMapEntry_(JavaUtilTreeMap_NavigableSubMap *outer$, JavaUtilTreeMap_TreeMapEntry *first, JavaUtilTreeMap_TreeMapEntry *fence) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilTreeMap_NavigableSubMap_SubMapKeyIterator *create_JavaUtilTreeMap_NavigableSubMap_SubMapKeyIterator_initWithJavaUtilTreeMap_NavigableSubMap_withJavaUtilTreeMap_TreeMapEntry_withJavaUtilTreeMap_TreeMapEntry_(JavaUtilTreeMap_NavigableSubMap *outer$, JavaUtilTreeMap_TreeMapEntry *first, JavaUtilTreeMap_TreeMapEntry *fence);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilTreeMap_NavigableSubMap_SubMapKeyIterator)

#endif

#if !defined (JavaUtilTreeMap_NavigableSubMap_DescendingSubMapKeyIterator_) && (INCLUDE_ALL_JavaUtilTreeMap || defined(INCLUDE_JavaUtilTreeMap_NavigableSubMap_DescendingSubMapKeyIterator))
#define JavaUtilTreeMap_NavigableSubMap_DescendingSubMapKeyIterator_

#define RESTRICT_JavaUtilSpliterator 1
#define INCLUDE_JavaUtilSpliterator 1
#include "java/util/Spliterator.h"

@class JavaUtilTreeMap_NavigableSubMap;
@class JavaUtilTreeMap_TreeMapEntry;
@protocol JavaUtilComparator;
@protocol JavaUtilFunctionConsumer;

@interface JavaUtilTreeMap_NavigableSubMap_DescendingSubMapKeyIterator : JavaUtilTreeMap_NavigableSubMap_SubMapIterator < JavaUtilSpliterator >

#pragma mark Public

- (jint)characteristics;

- (jlong)estimateSize;

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

- (id)next;

- (void)remove;

- (jboolean)tryAdvanceWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

- (id<JavaUtilSpliterator>)trySplit;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilTreeMap_NavigableSubMap:(JavaUtilTreeMap_NavigableSubMap *)outer$
                                 withJavaUtilTreeMap_TreeMapEntry:(JavaUtilTreeMap_TreeMapEntry *)last
                                 withJavaUtilTreeMap_TreeMapEntry:(JavaUtilTreeMap_TreeMapEntry *)fence;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilTreeMap_NavigableSubMap_DescendingSubMapKeyIterator)

FOUNDATION_EXPORT void JavaUtilTreeMap_NavigableSubMap_DescendingSubMapKeyIterator_initWithJavaUtilTreeMap_NavigableSubMap_withJavaUtilTreeMap_TreeMapEntry_withJavaUtilTreeMap_TreeMapEntry_(JavaUtilTreeMap_NavigableSubMap_DescendingSubMapKeyIterator *self, JavaUtilTreeMap_NavigableSubMap *outer$, JavaUtilTreeMap_TreeMapEntry *last, JavaUtilTreeMap_TreeMapEntry *fence);

FOUNDATION_EXPORT JavaUtilTreeMap_NavigableSubMap_DescendingSubMapKeyIterator *new_JavaUtilTreeMap_NavigableSubMap_DescendingSubMapKeyIterator_initWithJavaUtilTreeMap_NavigableSubMap_withJavaUtilTreeMap_TreeMapEntry_withJavaUtilTreeMap_TreeMapEntry_(JavaUtilTreeMap_NavigableSubMap *outer$, JavaUtilTreeMap_TreeMapEntry *last, JavaUtilTreeMap_TreeMapEntry *fence) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilTreeMap_NavigableSubMap_DescendingSubMapKeyIterator *create_JavaUtilTreeMap_NavigableSubMap_DescendingSubMapKeyIterator_initWithJavaUtilTreeMap_NavigableSubMap_withJavaUtilTreeMap_TreeMapEntry_withJavaUtilTreeMap_TreeMapEntry_(JavaUtilTreeMap_NavigableSubMap *outer$, JavaUtilTreeMap_TreeMapEntry *last, JavaUtilTreeMap_TreeMapEntry *fence);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilTreeMap_NavigableSubMap_DescendingSubMapKeyIterator)

#endif

#if !defined (JavaUtilTreeMap_AscendingSubMap_) && (INCLUDE_ALL_JavaUtilTreeMap || defined(INCLUDE_JavaUtilTreeMap_AscendingSubMap))
#define JavaUtilTreeMap_AscendingSubMap_

@class JavaUtilTreeMap;
@class JavaUtilTreeMap_TreeMapEntry;
@protocol JavaUtilComparator;
@protocol JavaUtilIterator;
@protocol JavaUtilNavigableMap;
@protocol JavaUtilSet;
@protocol JavaUtilSpliterator;

/*!
 */
@interface JavaUtilTreeMap_AscendingSubMap : JavaUtilTreeMap_NavigableSubMap

#pragma mark Public

- (id<JavaUtilComparator>)comparator;

- (id<JavaUtilNavigableMap>)descendingMap;

- (id<JavaUtilSet>)entrySet;

- (id<JavaUtilNavigableMap>)headMapWithId:(id)toKey
                              withBoolean:(jboolean)inclusive;

- (id<JavaUtilNavigableMap>)subMapWithId:(id)fromKey
                             withBoolean:(jboolean)fromInclusive
                                  withId:(id)toKey
                             withBoolean:(jboolean)toInclusive;

- (id<JavaUtilNavigableMap>)tailMapWithId:(id)fromKey
                              withBoolean:(jboolean)inclusive;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)m
                                      withBoolean:(jboolean)fromStart
                                           withId:(id)lo
                                      withBoolean:(jboolean)loInclusive
                                      withBoolean:(jboolean)toEnd
                                           withId:(id)hi
                                      withBoolean:(jboolean)hiInclusive;

- (id<JavaUtilIterator>)descendingKeyIterator;

- (id<JavaUtilIterator>)keyIterator;

- (id<JavaUtilSpliterator>)keySpliterator;

- (JavaUtilTreeMap_TreeMapEntry *)subCeilingWithId:(id)key;

- (JavaUtilTreeMap_TreeMapEntry *)subFloorWithId:(id)key;

- (JavaUtilTreeMap_TreeMapEntry *)subHigherWithId:(id)key;

- (JavaUtilTreeMap_TreeMapEntry *)subHighest;

- (JavaUtilTreeMap_TreeMapEntry *)subLowerWithId:(id)key;

- (JavaUtilTreeMap_TreeMapEntry *)subLowest;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilTreeMap_AscendingSubMap)

FOUNDATION_EXPORT void JavaUtilTreeMap_AscendingSubMap_initWithJavaUtilTreeMap_withBoolean_withId_withBoolean_withBoolean_withId_withBoolean_(JavaUtilTreeMap_AscendingSubMap *self, JavaUtilTreeMap *m, jboolean fromStart, id lo, jboolean loInclusive, jboolean toEnd, id hi, jboolean hiInclusive);

FOUNDATION_EXPORT JavaUtilTreeMap_AscendingSubMap *new_JavaUtilTreeMap_AscendingSubMap_initWithJavaUtilTreeMap_withBoolean_withId_withBoolean_withBoolean_withId_withBoolean_(JavaUtilTreeMap *m, jboolean fromStart, id lo, jboolean loInclusive, jboolean toEnd, id hi, jboolean hiInclusive) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilTreeMap_AscendingSubMap *create_JavaUtilTreeMap_AscendingSubMap_initWithJavaUtilTreeMap_withBoolean_withId_withBoolean_withBoolean_withId_withBoolean_(JavaUtilTreeMap *m, jboolean fromStart, id lo, jboolean loInclusive, jboolean toEnd, id hi, jboolean hiInclusive);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilTreeMap_AscendingSubMap)

#endif

#if !defined (JavaUtilTreeMap_AscendingSubMap_AscendingEntrySetView_) && (INCLUDE_ALL_JavaUtilTreeMap || defined(INCLUDE_JavaUtilTreeMap_AscendingSubMap_AscendingEntrySetView))
#define JavaUtilTreeMap_AscendingSubMap_AscendingEntrySetView_

@class JavaUtilTreeMap_AscendingSubMap;
@protocol JavaUtilIterator;

@interface JavaUtilTreeMap_AscendingSubMap_AscendingEntrySetView : JavaUtilTreeMap_NavigableSubMap_EntrySetView

#pragma mark Public

- (id<JavaUtilIterator>)iterator;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilTreeMap_AscendingSubMap:(JavaUtilTreeMap_AscendingSubMap *)outer$;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaUtilTreeMap_NavigableSubMap:(JavaUtilTreeMap_NavigableSubMap *)outer$ NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilTreeMap_AscendingSubMap_AscendingEntrySetView)

FOUNDATION_EXPORT void JavaUtilTreeMap_AscendingSubMap_AscendingEntrySetView_initWithJavaUtilTreeMap_AscendingSubMap_(JavaUtilTreeMap_AscendingSubMap_AscendingEntrySetView *self, JavaUtilTreeMap_AscendingSubMap *outer$);

FOUNDATION_EXPORT JavaUtilTreeMap_AscendingSubMap_AscendingEntrySetView *new_JavaUtilTreeMap_AscendingSubMap_AscendingEntrySetView_initWithJavaUtilTreeMap_AscendingSubMap_(JavaUtilTreeMap_AscendingSubMap *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilTreeMap_AscendingSubMap_AscendingEntrySetView *create_JavaUtilTreeMap_AscendingSubMap_AscendingEntrySetView_initWithJavaUtilTreeMap_AscendingSubMap_(JavaUtilTreeMap_AscendingSubMap *outer$);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilTreeMap_AscendingSubMap_AscendingEntrySetView)

#endif

#if !defined (JavaUtilTreeMap_DescendingSubMap_) && (INCLUDE_ALL_JavaUtilTreeMap || defined(INCLUDE_JavaUtilTreeMap_DescendingSubMap))
#define JavaUtilTreeMap_DescendingSubMap_

@class JavaUtilTreeMap;
@class JavaUtilTreeMap_TreeMapEntry;
@protocol JavaUtilComparator;
@protocol JavaUtilIterator;
@protocol JavaUtilNavigableMap;
@protocol JavaUtilSet;
@protocol JavaUtilSpliterator;

/*!
 */
@interface JavaUtilTreeMap_DescendingSubMap : JavaUtilTreeMap_NavigableSubMap

#pragma mark Public

- (id<JavaUtilComparator>)comparator;

- (id<JavaUtilNavigableMap>)descendingMap;

- (id<JavaUtilSet>)entrySet;

- (id<JavaUtilNavigableMap>)headMapWithId:(id)toKey
                              withBoolean:(jboolean)inclusive;

- (id<JavaUtilNavigableMap>)subMapWithId:(id)fromKey
                             withBoolean:(jboolean)fromInclusive
                                  withId:(id)toKey
                             withBoolean:(jboolean)toInclusive;

- (id<JavaUtilNavigableMap>)tailMapWithId:(id)fromKey
                              withBoolean:(jboolean)inclusive;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)m
                                      withBoolean:(jboolean)fromStart
                                           withId:(id)lo
                                      withBoolean:(jboolean)loInclusive
                                      withBoolean:(jboolean)toEnd
                                           withId:(id)hi
                                      withBoolean:(jboolean)hiInclusive;

- (id<JavaUtilIterator>)descendingKeyIterator;

- (id<JavaUtilIterator>)keyIterator;

- (id<JavaUtilSpliterator>)keySpliterator;

- (JavaUtilTreeMap_TreeMapEntry *)subCeilingWithId:(id)key;

- (JavaUtilTreeMap_TreeMapEntry *)subFloorWithId:(id)key;

- (JavaUtilTreeMap_TreeMapEntry *)subHigherWithId:(id)key;

- (JavaUtilTreeMap_TreeMapEntry *)subHighest;

- (JavaUtilTreeMap_TreeMapEntry *)subLowerWithId:(id)key;

- (JavaUtilTreeMap_TreeMapEntry *)subLowest;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilTreeMap_DescendingSubMap)

FOUNDATION_EXPORT void JavaUtilTreeMap_DescendingSubMap_initWithJavaUtilTreeMap_withBoolean_withId_withBoolean_withBoolean_withId_withBoolean_(JavaUtilTreeMap_DescendingSubMap *self, JavaUtilTreeMap *m, jboolean fromStart, id lo, jboolean loInclusive, jboolean toEnd, id hi, jboolean hiInclusive);

FOUNDATION_EXPORT JavaUtilTreeMap_DescendingSubMap *new_JavaUtilTreeMap_DescendingSubMap_initWithJavaUtilTreeMap_withBoolean_withId_withBoolean_withBoolean_withId_withBoolean_(JavaUtilTreeMap *m, jboolean fromStart, id lo, jboolean loInclusive, jboolean toEnd, id hi, jboolean hiInclusive) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilTreeMap_DescendingSubMap *create_JavaUtilTreeMap_DescendingSubMap_initWithJavaUtilTreeMap_withBoolean_withId_withBoolean_withBoolean_withId_withBoolean_(JavaUtilTreeMap *m, jboolean fromStart, id lo, jboolean loInclusive, jboolean toEnd, id hi, jboolean hiInclusive);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilTreeMap_DescendingSubMap)

#endif

#if !defined (JavaUtilTreeMap_DescendingSubMap_DescendingEntrySetView_) && (INCLUDE_ALL_JavaUtilTreeMap || defined(INCLUDE_JavaUtilTreeMap_DescendingSubMap_DescendingEntrySetView))
#define JavaUtilTreeMap_DescendingSubMap_DescendingEntrySetView_

@class JavaUtilTreeMap_DescendingSubMap;
@protocol JavaUtilIterator;

@interface JavaUtilTreeMap_DescendingSubMap_DescendingEntrySetView : JavaUtilTreeMap_NavigableSubMap_EntrySetView

#pragma mark Public

- (id<JavaUtilIterator>)iterator;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilTreeMap_DescendingSubMap:(JavaUtilTreeMap_DescendingSubMap *)outer$;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaUtilTreeMap_NavigableSubMap:(JavaUtilTreeMap_NavigableSubMap *)outer$ NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilTreeMap_DescendingSubMap_DescendingEntrySetView)

FOUNDATION_EXPORT void JavaUtilTreeMap_DescendingSubMap_DescendingEntrySetView_initWithJavaUtilTreeMap_DescendingSubMap_(JavaUtilTreeMap_DescendingSubMap_DescendingEntrySetView *self, JavaUtilTreeMap_DescendingSubMap *outer$);

FOUNDATION_EXPORT JavaUtilTreeMap_DescendingSubMap_DescendingEntrySetView *new_JavaUtilTreeMap_DescendingSubMap_DescendingEntrySetView_initWithJavaUtilTreeMap_DescendingSubMap_(JavaUtilTreeMap_DescendingSubMap *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilTreeMap_DescendingSubMap_DescendingEntrySetView *create_JavaUtilTreeMap_DescendingSubMap_DescendingEntrySetView_initWithJavaUtilTreeMap_DescendingSubMap_(JavaUtilTreeMap_DescendingSubMap *outer$);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilTreeMap_DescendingSubMap_DescendingEntrySetView)

#endif

#if !defined (JavaUtilTreeMap_TreeMapEntry_) && (INCLUDE_ALL_JavaUtilTreeMap || defined(INCLUDE_JavaUtilTreeMap_TreeMapEntry))
#define JavaUtilTreeMap_TreeMapEntry_

#define RESTRICT_JavaUtilMap 1
#define INCLUDE_JavaUtilMap_Entry 1
#include "java/util/Map.h"

/*!
 @brief Node in the Tree.Doubles as a means to pass key-value pairs back to
  user (see Map.Entry).
 */
@interface JavaUtilTreeMap_TreeMapEntry : NSObject < JavaUtilMap_Entry > {
 @public
  id key_;
  id value_;
  JavaUtilTreeMap_TreeMapEntry *left_;
  JavaUtilTreeMap_TreeMapEntry *right_;
  __unsafe_unretained JavaUtilTreeMap_TreeMapEntry *parent_;
  jboolean color_;
}

#pragma mark Public

- (jboolean)isEqual:(id)o;

/*!
 @brief Returns the key.
 @return the key
 */
- (id)getKey;

/*!
 @brief Returns the value associated with the key.
 @return the value associated with the key
 */
- (id)getValue;

- (NSUInteger)hash;

/*!
 @brief Replaces the value currently associated with the key with the given
  value.
 @return the value associated with the key before this method was
          called
 */
- (id)setValueWithId:(id)value;

- (NSString *)description;

#pragma mark Package-Private

/*!
 @brief Make a new cell with given key, value, and parent, and with 
 <code>null</code> child links, and BLACK color.
 */
- (instancetype __nonnull)initWithId:(id)key
                              withId:(id)value
    withJavaUtilTreeMap_TreeMapEntry:(JavaUtilTreeMap_TreeMapEntry *)parent;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilTreeMap_TreeMapEntry)

J2OBJC_FIELD_SETTER(JavaUtilTreeMap_TreeMapEntry, key_, id)
J2OBJC_FIELD_SETTER(JavaUtilTreeMap_TreeMapEntry, value_, id)
J2OBJC_FIELD_SETTER(JavaUtilTreeMap_TreeMapEntry, left_, JavaUtilTreeMap_TreeMapEntry *)
J2OBJC_FIELD_SETTER(JavaUtilTreeMap_TreeMapEntry, right_, JavaUtilTreeMap_TreeMapEntry *)

FOUNDATION_EXPORT void JavaUtilTreeMap_TreeMapEntry_initWithId_withId_withJavaUtilTreeMap_TreeMapEntry_(JavaUtilTreeMap_TreeMapEntry *self, id key, id value, JavaUtilTreeMap_TreeMapEntry *parent);

FOUNDATION_EXPORT JavaUtilTreeMap_TreeMapEntry *new_JavaUtilTreeMap_TreeMapEntry_initWithId_withId_withJavaUtilTreeMap_TreeMapEntry_(id key, id value, JavaUtilTreeMap_TreeMapEntry *parent) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilTreeMap_TreeMapEntry *create_JavaUtilTreeMap_TreeMapEntry_initWithId_withId_withJavaUtilTreeMap_TreeMapEntry_(id key, id value, JavaUtilTreeMap_TreeMapEntry *parent);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilTreeMap_TreeMapEntry)

#endif

#if !defined (JavaUtilTreeMap_TreeMapSpliterator_) && (INCLUDE_ALL_JavaUtilTreeMap || defined(INCLUDE_JavaUtilTreeMap_TreeMapSpliterator))
#define JavaUtilTreeMap_TreeMapSpliterator_

@class JavaUtilTreeMap;
@class JavaUtilTreeMap_TreeMapEntry;

/*!
 @brief Base class for spliterators.Iteration starts at a given
  origin and continues up to but not including a given fence (or
  null for end).
 At top-level, for ascending cases, the first
  split uses the root as left-fence/right-origin. From there,
  right-hand splits replace the current fence with its left
  child, also serving as origin for the split-off spliterator.
  Left-hands are symmetric. Descending versions place the origin
  at the end and invert ascending split rules.  This base class
  is non-commital about directionality, or whether the top-level
  spliterator covers the whole tree. This means that the actual
  split mechanics are located in subclasses. Some of the subclass
  trySplit methods are identical (except for return types), but
  not nicely factorable.
  Currently, subclass versions exist only for the full map
  (including descending keys via its descendingMap).  Others are
  possible but currently not worthwhile because submaps require
  O(n) computations to determine size, which substantially limits
  potential speed-ups of using custom Spliterators versus default
  mechanics.
  To boostrap initialization, external constructors use
  negative size estimates: -1 for ascend, -2 for descend.
 */
@interface JavaUtilTreeMap_TreeMapSpliterator : NSObject {
 @public
  JavaUtilTreeMap *tree_;
  JavaUtilTreeMap_TreeMapEntry *current_;
  JavaUtilTreeMap_TreeMapEntry *fence_;
  jint side_;
  jint est_;
  jint expectedModCount_;
}

#pragma mark Public

- (jlong)estimateSize;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)tree
                 withJavaUtilTreeMap_TreeMapEntry:(JavaUtilTreeMap_TreeMapEntry *)origin
                 withJavaUtilTreeMap_TreeMapEntry:(JavaUtilTreeMap_TreeMapEntry *)fence
                                          withInt:(jint)side
                                          withInt:(jint)est
                                          withInt:(jint)expectedModCount;

- (jint)getEstimate;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilTreeMap_TreeMapSpliterator)

J2OBJC_FIELD_SETTER(JavaUtilTreeMap_TreeMapSpliterator, tree_, JavaUtilTreeMap *)
J2OBJC_FIELD_SETTER(JavaUtilTreeMap_TreeMapSpliterator, current_, JavaUtilTreeMap_TreeMapEntry *)
J2OBJC_FIELD_SETTER(JavaUtilTreeMap_TreeMapSpliterator, fence_, JavaUtilTreeMap_TreeMapEntry *)

FOUNDATION_EXPORT void JavaUtilTreeMap_TreeMapSpliterator_initWithJavaUtilTreeMap_withJavaUtilTreeMap_TreeMapEntry_withJavaUtilTreeMap_TreeMapEntry_withInt_withInt_withInt_(JavaUtilTreeMap_TreeMapSpliterator *self, JavaUtilTreeMap *tree, JavaUtilTreeMap_TreeMapEntry *origin, JavaUtilTreeMap_TreeMapEntry *fence, jint side, jint est, jint expectedModCount);

FOUNDATION_EXPORT JavaUtilTreeMap_TreeMapSpliterator *new_JavaUtilTreeMap_TreeMapSpliterator_initWithJavaUtilTreeMap_withJavaUtilTreeMap_TreeMapEntry_withJavaUtilTreeMap_TreeMapEntry_withInt_withInt_withInt_(JavaUtilTreeMap *tree, JavaUtilTreeMap_TreeMapEntry *origin, JavaUtilTreeMap_TreeMapEntry *fence, jint side, jint est, jint expectedModCount) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilTreeMap_TreeMapSpliterator *create_JavaUtilTreeMap_TreeMapSpliterator_initWithJavaUtilTreeMap_withJavaUtilTreeMap_TreeMapEntry_withJavaUtilTreeMap_TreeMapEntry_withInt_withInt_withInt_(JavaUtilTreeMap *tree, JavaUtilTreeMap_TreeMapEntry *origin, JavaUtilTreeMap_TreeMapEntry *fence, jint side, jint est, jint expectedModCount);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilTreeMap_TreeMapSpliterator)

#endif

#if !defined (JavaUtilTreeMap_KeySpliterator_) && (INCLUDE_ALL_JavaUtilTreeMap || defined(INCLUDE_JavaUtilTreeMap_KeySpliterator))
#define JavaUtilTreeMap_KeySpliterator_

#define RESTRICT_JavaUtilSpliterator 1
#define INCLUDE_JavaUtilSpliterator 1
#include "java/util/Spliterator.h"

@class JavaUtilTreeMap;
@class JavaUtilTreeMap_TreeMapEntry;
@protocol JavaUtilComparator;
@protocol JavaUtilFunctionConsumer;

@interface JavaUtilTreeMap_KeySpliterator : JavaUtilTreeMap_TreeMapSpliterator < JavaUtilSpliterator >

#pragma mark Public

- (jint)characteristics;

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

- (id<JavaUtilComparator>)getComparator;

- (jboolean)tryAdvanceWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

- (JavaUtilTreeMap_KeySpliterator *)trySplit;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)tree
                 withJavaUtilTreeMap_TreeMapEntry:(JavaUtilTreeMap_TreeMapEntry *)origin
                 withJavaUtilTreeMap_TreeMapEntry:(JavaUtilTreeMap_TreeMapEntry *)fence
                                          withInt:(jint)side
                                          withInt:(jint)est
                                          withInt:(jint)expectedModCount;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilTreeMap_KeySpliterator)

FOUNDATION_EXPORT void JavaUtilTreeMap_KeySpliterator_initWithJavaUtilTreeMap_withJavaUtilTreeMap_TreeMapEntry_withJavaUtilTreeMap_TreeMapEntry_withInt_withInt_withInt_(JavaUtilTreeMap_KeySpliterator *self, JavaUtilTreeMap *tree, JavaUtilTreeMap_TreeMapEntry *origin, JavaUtilTreeMap_TreeMapEntry *fence, jint side, jint est, jint expectedModCount);

FOUNDATION_EXPORT JavaUtilTreeMap_KeySpliterator *new_JavaUtilTreeMap_KeySpliterator_initWithJavaUtilTreeMap_withJavaUtilTreeMap_TreeMapEntry_withJavaUtilTreeMap_TreeMapEntry_withInt_withInt_withInt_(JavaUtilTreeMap *tree, JavaUtilTreeMap_TreeMapEntry *origin, JavaUtilTreeMap_TreeMapEntry *fence, jint side, jint est, jint expectedModCount) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilTreeMap_KeySpliterator *create_JavaUtilTreeMap_KeySpliterator_initWithJavaUtilTreeMap_withJavaUtilTreeMap_TreeMapEntry_withJavaUtilTreeMap_TreeMapEntry_withInt_withInt_withInt_(JavaUtilTreeMap *tree, JavaUtilTreeMap_TreeMapEntry *origin, JavaUtilTreeMap_TreeMapEntry *fence, jint side, jint est, jint expectedModCount);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilTreeMap_KeySpliterator)

#endif

#if !defined (JavaUtilTreeMap_DescendingKeySpliterator_) && (INCLUDE_ALL_JavaUtilTreeMap || defined(INCLUDE_JavaUtilTreeMap_DescendingKeySpliterator))
#define JavaUtilTreeMap_DescendingKeySpliterator_

#define RESTRICT_JavaUtilSpliterator 1
#define INCLUDE_JavaUtilSpliterator 1
#include "java/util/Spliterator.h"

@class JavaUtilTreeMap;
@class JavaUtilTreeMap_TreeMapEntry;
@protocol JavaUtilComparator;
@protocol JavaUtilFunctionConsumer;

@interface JavaUtilTreeMap_DescendingKeySpliterator : JavaUtilTreeMap_TreeMapSpliterator < JavaUtilSpliterator >

#pragma mark Public

- (jint)characteristics;

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

- (jboolean)tryAdvanceWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

- (JavaUtilTreeMap_DescendingKeySpliterator *)trySplit;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)tree
                 withJavaUtilTreeMap_TreeMapEntry:(JavaUtilTreeMap_TreeMapEntry *)origin
                 withJavaUtilTreeMap_TreeMapEntry:(JavaUtilTreeMap_TreeMapEntry *)fence
                                          withInt:(jint)side
                                          withInt:(jint)est
                                          withInt:(jint)expectedModCount;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilTreeMap_DescendingKeySpliterator)

FOUNDATION_EXPORT void JavaUtilTreeMap_DescendingKeySpliterator_initWithJavaUtilTreeMap_withJavaUtilTreeMap_TreeMapEntry_withJavaUtilTreeMap_TreeMapEntry_withInt_withInt_withInt_(JavaUtilTreeMap_DescendingKeySpliterator *self, JavaUtilTreeMap *tree, JavaUtilTreeMap_TreeMapEntry *origin, JavaUtilTreeMap_TreeMapEntry *fence, jint side, jint est, jint expectedModCount);

FOUNDATION_EXPORT JavaUtilTreeMap_DescendingKeySpliterator *new_JavaUtilTreeMap_DescendingKeySpliterator_initWithJavaUtilTreeMap_withJavaUtilTreeMap_TreeMapEntry_withJavaUtilTreeMap_TreeMapEntry_withInt_withInt_withInt_(JavaUtilTreeMap *tree, JavaUtilTreeMap_TreeMapEntry *origin, JavaUtilTreeMap_TreeMapEntry *fence, jint side, jint est, jint expectedModCount) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilTreeMap_DescendingKeySpliterator *create_JavaUtilTreeMap_DescendingKeySpliterator_initWithJavaUtilTreeMap_withJavaUtilTreeMap_TreeMapEntry_withJavaUtilTreeMap_TreeMapEntry_withInt_withInt_withInt_(JavaUtilTreeMap *tree, JavaUtilTreeMap_TreeMapEntry *origin, JavaUtilTreeMap_TreeMapEntry *fence, jint side, jint est, jint expectedModCount);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilTreeMap_DescendingKeySpliterator)

#endif

#if !defined (JavaUtilTreeMap_ValueSpliterator_) && (INCLUDE_ALL_JavaUtilTreeMap || defined(INCLUDE_JavaUtilTreeMap_ValueSpliterator))
#define JavaUtilTreeMap_ValueSpliterator_

#define RESTRICT_JavaUtilSpliterator 1
#define INCLUDE_JavaUtilSpliterator 1
#include "java/util/Spliterator.h"

@class JavaUtilTreeMap;
@class JavaUtilTreeMap_TreeMapEntry;
@protocol JavaUtilComparator;
@protocol JavaUtilFunctionConsumer;

@interface JavaUtilTreeMap_ValueSpliterator : JavaUtilTreeMap_TreeMapSpliterator < JavaUtilSpliterator >

#pragma mark Public

- (jint)characteristics;

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

- (jboolean)tryAdvanceWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

- (JavaUtilTreeMap_ValueSpliterator *)trySplit;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)tree
                 withJavaUtilTreeMap_TreeMapEntry:(JavaUtilTreeMap_TreeMapEntry *)origin
                 withJavaUtilTreeMap_TreeMapEntry:(JavaUtilTreeMap_TreeMapEntry *)fence
                                          withInt:(jint)side
                                          withInt:(jint)est
                                          withInt:(jint)expectedModCount;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilTreeMap_ValueSpliterator)

FOUNDATION_EXPORT void JavaUtilTreeMap_ValueSpliterator_initWithJavaUtilTreeMap_withJavaUtilTreeMap_TreeMapEntry_withJavaUtilTreeMap_TreeMapEntry_withInt_withInt_withInt_(JavaUtilTreeMap_ValueSpliterator *self, JavaUtilTreeMap *tree, JavaUtilTreeMap_TreeMapEntry *origin, JavaUtilTreeMap_TreeMapEntry *fence, jint side, jint est, jint expectedModCount);

FOUNDATION_EXPORT JavaUtilTreeMap_ValueSpliterator *new_JavaUtilTreeMap_ValueSpliterator_initWithJavaUtilTreeMap_withJavaUtilTreeMap_TreeMapEntry_withJavaUtilTreeMap_TreeMapEntry_withInt_withInt_withInt_(JavaUtilTreeMap *tree, JavaUtilTreeMap_TreeMapEntry *origin, JavaUtilTreeMap_TreeMapEntry *fence, jint side, jint est, jint expectedModCount) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilTreeMap_ValueSpliterator *create_JavaUtilTreeMap_ValueSpliterator_initWithJavaUtilTreeMap_withJavaUtilTreeMap_TreeMapEntry_withJavaUtilTreeMap_TreeMapEntry_withInt_withInt_withInt_(JavaUtilTreeMap *tree, JavaUtilTreeMap_TreeMapEntry *origin, JavaUtilTreeMap_TreeMapEntry *fence, jint side, jint est, jint expectedModCount);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilTreeMap_ValueSpliterator)

#endif

#if !defined (JavaUtilTreeMap_EntrySpliterator_) && (INCLUDE_ALL_JavaUtilTreeMap || defined(INCLUDE_JavaUtilTreeMap_EntrySpliterator))
#define JavaUtilTreeMap_EntrySpliterator_

#define RESTRICT_JavaUtilSpliterator 1
#define INCLUDE_JavaUtilSpliterator 1
#include "java/util/Spliterator.h"

@class JavaUtilTreeMap;
@class JavaUtilTreeMap_TreeMapEntry;
@protocol JavaUtilComparator;
@protocol JavaUtilFunctionConsumer;

@interface JavaUtilTreeMap_EntrySpliterator : JavaUtilTreeMap_TreeMapSpliterator < JavaUtilSpliterator >

#pragma mark Public

- (jint)characteristics;

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

- (id<JavaUtilComparator>)getComparator;

- (jboolean)tryAdvanceWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)action;

- (JavaUtilTreeMap_EntrySpliterator *)trySplit;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)tree
                 withJavaUtilTreeMap_TreeMapEntry:(JavaUtilTreeMap_TreeMapEntry *)origin
                 withJavaUtilTreeMap_TreeMapEntry:(JavaUtilTreeMap_TreeMapEntry *)fence
                                          withInt:(jint)side
                                          withInt:(jint)est
                                          withInt:(jint)expectedModCount;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaUtilTreeMap_EntrySpliterator)

FOUNDATION_EXPORT void JavaUtilTreeMap_EntrySpliterator_initWithJavaUtilTreeMap_withJavaUtilTreeMap_TreeMapEntry_withJavaUtilTreeMap_TreeMapEntry_withInt_withInt_withInt_(JavaUtilTreeMap_EntrySpliterator *self, JavaUtilTreeMap *tree, JavaUtilTreeMap_TreeMapEntry *origin, JavaUtilTreeMap_TreeMapEntry *fence, jint side, jint est, jint expectedModCount);

FOUNDATION_EXPORT JavaUtilTreeMap_EntrySpliterator *new_JavaUtilTreeMap_EntrySpliterator_initWithJavaUtilTreeMap_withJavaUtilTreeMap_TreeMapEntry_withJavaUtilTreeMap_TreeMapEntry_withInt_withInt_withInt_(JavaUtilTreeMap *tree, JavaUtilTreeMap_TreeMapEntry *origin, JavaUtilTreeMap_TreeMapEntry *fence, jint side, jint est, jint expectedModCount) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaUtilTreeMap_EntrySpliterator *create_JavaUtilTreeMap_EntrySpliterator_initWithJavaUtilTreeMap_withJavaUtilTreeMap_TreeMapEntry_withJavaUtilTreeMap_TreeMapEntry_withInt_withInt_withInt_(JavaUtilTreeMap *tree, JavaUtilTreeMap_TreeMapEntry *origin, JavaUtilTreeMap_TreeMapEntry *fence, jint side, jint est, jint expectedModCount);

J2OBJC_TYPE_LITERAL_HEADER(JavaUtilTreeMap_EntrySpliterator)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaUtilTreeMap")
