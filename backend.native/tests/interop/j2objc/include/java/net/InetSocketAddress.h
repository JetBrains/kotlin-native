//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/net/InetSocketAddress.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNetInetSocketAddress")
#ifdef RESTRICT_JavaNetInetSocketAddress
#define INCLUDE_ALL_JavaNetInetSocketAddress 0
#else
#define INCLUDE_ALL_JavaNetInetSocketAddress 1
#endif
#undef RESTRICT_JavaNetInetSocketAddress

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNetInetSocketAddress_) && (INCLUDE_ALL_JavaNetInetSocketAddress || defined(INCLUDE_JavaNetInetSocketAddress))
#define JavaNetInetSocketAddress_

#define RESTRICT_JavaNetSocketAddress 1
#define INCLUDE_JavaNetSocketAddress 1
#include "java/net/SocketAddress.h"

@class JavaNetInetAddress;

/*!
 @brief This class implements an IP Socket Address (IP address + port number)
  It can also be a pair (hostname + port number), in which case an attempt
  will be made to resolve the hostname.If resolution fails then the address
  is said to be <I>unresolved</I> but can still be used on some circumstances
  like connecting through a proxy.
 <p>
  It provides an immutable object used by sockets for binding, connecting, or
  as returned values. 
 <p>
  The <i>wildcard</i> is a special local IP address. It usually means "any"
  and can only be used for <code>bind</code> operations.
 - seealso: java.net.Socket
 - seealso: java.net.ServerSocket
 @since 1.4
 */
@interface JavaNetInetSocketAddress : JavaNetSocketAddress

#pragma mark Public

/*!
 */
- (instancetype __nonnull)init;

/*!
 @brief Creates a socket address from an IP address and a port number.
 <p>
  A valid port value is between 0 and 65535.
  A port number of <code>zero</code> will let the system pick up an
  ephemeral port in a <code>bind</code> operation. 
 <P>
  A <code>null</code> address will assign the <i>wildcard</i> address. 
 <p>
 @param addr The IP address
 @param port The port number
 @throw IllegalArgumentExceptionif the port parameter is outside the specified
  range of valid port values.
 */
- (instancetype __nonnull)initWithJavaNetInetAddress:(JavaNetInetAddress *)addr
                                             withInt:(jint)port;

/*!
 @brief Creates a socket address where the IP address is the wildcard address
  and the port number a specified value.
 <p>
  A valid port value is between 0 and 65535.
  A port number of <code>zero</code> will let the system pick up an
  ephemeral port in a <code>bind</code> operation. 
 <p>
 @param port The port number
 @throw IllegalArgumentExceptionif the port parameter is outside the specified
  range of valid port values.
 */
- (instancetype __nonnull)initWithInt:(jint)port;

/*!
 @brief Creates a socket address from a hostname and a port number.
 <p>
  An attempt will be made to resolve the hostname into an InetAddress.
  If that attempt fails, the address will be flagged as <I>unresolved</I>.
  <p>
  If there is a security manager, its <code>checkConnect</code> method
  is called with the host name as its argument to check the permissiom
  to resolve it. This could result in a SecurityException. 
 <P>
  A valid port value is between 0 and 65535.
  A port number of <code>zero</code> will let the system pick up an
  ephemeral port in a <code>bind</code> operation. 
 <P>
 @param hostname the Host name
 @param port The port number
 @throw IllegalArgumentExceptionif the port parameter is outside the range
  of valid port values, or if the hostname parameter is <TT>null</TT>.
 @throw SecurityExceptionif a security manager is present and
                            permission to resolve the host name is
                            denied.
 - seealso: #isUnresolved()
 */
- (instancetype __nonnull)initWithNSString:(NSString *)hostname
                                   withInt:(jint)port;

/*!
 @brief Creates an unresolved socket address from a hostname and a port number.
 <p>
  No attempt will be made to resolve the hostname into an InetAddress.
  The address will be flagged as <I>unresolved</I>.
  <p>
  A valid port value is between 0 and 65535.
  A port number of <code>zero</code> will let the system pick up an
  ephemeral port in a <code>bind</code> operation. 
 <P>
 @param host the Host name
 @param port The port number
 @throw IllegalArgumentExceptionif the port parameter is outside
                   the range of valid port values, or if the hostname
                   parameter is <TT>null</TT>.
 - seealso: #isUnresolved()
 @return a <code>InetSocketAddress</code> representing the unresolved
           socket address
 @since 1.5
 */
+ (JavaNetInetSocketAddress *)createUnresolvedWithNSString:(NSString *)host
                                                   withInt:(jint)port;

/*!
 @brief Compares this object against the specified object.
 The result is <code>true</code> if and only if the argument is
  not <code>null</code> and it represents the same address as
  this object. 
 <p>
  Two instances of <code>InetSocketAddress</code> represent the same
  address if both the InetAddresses (or hostnames if it is unresolved) and port
  numbers are equal.
  If both addresses are unresolved, then the hostname & the port number
  are compared.
  Note: Hostnames are case insensitive. e.g. "FooBar" and "foobar" are
  considered equal.
 @param obj the object to compare against.
 @return <code>true</code> if the objects are the same;
           <code>false</code> otherwise.
 - seealso: java.net.InetAddress#equals(java.lang.Object)
 */
- (jboolean)isEqual:(id)obj;

/*!
 @brief Gets the <code>InetAddress</code>.
 @return the InetAdress or <code>null</code> if it is unresolved.
 */
- (JavaNetInetAddress *)getAddress;

/*!
 @brief Gets the <code>hostname</code>.
 Note: This method may trigger a name service reverse lookup if the
  address was created with a literal IP address.
 @return the hostname part of the address.
 */
- (NSString *)getHostName;

/*!
 @brief Returns the hostname, or the String form of the address if it
  doesn't have a hostname (it was created using a literal).
 This has the benefit of <b>not</b> attempting a reverse lookup.
 @return the hostname, or String representation of the address.
 @since 1.7
 */
- (NSString *)getHostString;

/*!
 @brief Gets the port number.
 @return the port number.
 */
- (jint)getPort;

/*!
 @brief Returns a hashcode for this socket address.
 @return a hash code value for this socket address.
 */
- (NSUInteger)hash;

/*!
 @brief Checks whether the address has been resolved or not.
 @return <code>true</code> if the hostname couldn't be resolved into
           an <code>InetAddress</code>.
 */
- (jboolean)isUnresolved;

/*!
 @brief Constructs a string representation of this InetSocketAddress.
 This String is constructed by calling toString() on the InetAddress
  and concatenating the port number (with a colon). If the address
  is unresolved then the part before the colon will only contain the hostname.
 @return a string representation of this object.
 */
- (NSString *)description;

@end

J2OBJC_STATIC_INIT(JavaNetInetSocketAddress)

FOUNDATION_EXPORT void JavaNetInetSocketAddress_init(JavaNetInetSocketAddress *self);

FOUNDATION_EXPORT JavaNetInetSocketAddress *new_JavaNetInetSocketAddress_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaNetInetSocketAddress *create_JavaNetInetSocketAddress_init(void);

FOUNDATION_EXPORT void JavaNetInetSocketAddress_initWithInt_(JavaNetInetSocketAddress *self, jint port);

FOUNDATION_EXPORT JavaNetInetSocketAddress *new_JavaNetInetSocketAddress_initWithInt_(jint port) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaNetInetSocketAddress *create_JavaNetInetSocketAddress_initWithInt_(jint port);

FOUNDATION_EXPORT void JavaNetInetSocketAddress_initWithJavaNetInetAddress_withInt_(JavaNetInetSocketAddress *self, JavaNetInetAddress *addr, jint port);

FOUNDATION_EXPORT JavaNetInetSocketAddress *new_JavaNetInetSocketAddress_initWithJavaNetInetAddress_withInt_(JavaNetInetAddress *addr, jint port) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaNetInetSocketAddress *create_JavaNetInetSocketAddress_initWithJavaNetInetAddress_withInt_(JavaNetInetAddress *addr, jint port);

FOUNDATION_EXPORT void JavaNetInetSocketAddress_initWithNSString_withInt_(JavaNetInetSocketAddress *self, NSString *hostname, jint port);

FOUNDATION_EXPORT JavaNetInetSocketAddress *new_JavaNetInetSocketAddress_initWithNSString_withInt_(NSString *hostname, jint port) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaNetInetSocketAddress *create_JavaNetInetSocketAddress_initWithNSString_withInt_(NSString *hostname, jint port);

FOUNDATION_EXPORT JavaNetInetSocketAddress *JavaNetInetSocketAddress_createUnresolvedWithNSString_withInt_(NSString *host, jint port);

J2OBJC_TYPE_LITERAL_HEADER(JavaNetInetSocketAddress)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaNetInetSocketAddress")
