//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/net/DatagramSocket.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNetDatagramSocket")
#ifdef RESTRICT_JavaNetDatagramSocket
#define INCLUDE_ALL_JavaNetDatagramSocket 0
#else
#define INCLUDE_ALL_JavaNetDatagramSocket 1
#endif
#undef RESTRICT_JavaNetDatagramSocket

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNetDatagramSocket_) && (INCLUDE_ALL_JavaNetDatagramSocket || defined(INCLUDE_JavaNetDatagramSocket))
#define JavaNetDatagramSocket_

#define RESTRICT_JavaIoCloseable 1
#define INCLUDE_JavaIoCloseable 1
#include "java/io/Closeable.h"

@class IOSClass;
@class JavaIoFileDescriptor;
@class JavaNetDatagramPacket;
@class JavaNetDatagramSocketImpl;
@class JavaNetInetAddress;
@class JavaNetNetworkInterface;
@class JavaNetSocketAddress;
@class JavaNioChannelsDatagramChannel;
@protocol JavaNetDatagramSocketImplFactory;

/*!
 @brief This class represents a socket for sending and receiving datagram packets.
 <p>A datagram socket is the sending or receiving point for a packet
  delivery service. Each packet sent or received on a datagram socket
  is individually addressed and routed. Multiple packets sent from
  one machine to another may be routed differently, and may arrive in
  any order. 
 <p> Where possible, a newly constructed <code>DatagramSocket</code> has the 
 <code>SO_BROADCAST</code> socket option enabled so as
  to allow the transmission of broadcast datagrams. In order to receive
  broadcast packets a DatagramSocket should be bound to the wildcard address.
  In some implementations, broadcast packets may also be received when
  a DatagramSocket is bound to a more specific address. 
 <p>
  Example: 
 <code>
               DatagramSocket s = new DatagramSocket(null);
               s.bind(new InetSocketAddress(8888)); 
 </code>
  Which is equivalent to: 
 <code>
               DatagramSocket s = new DatagramSocket(8888); 
 </code>
  Both cases will create a DatagramSocket able to receive broadcasts on
  UDP port 8888.
 @author Pavani Diwanji
 - seealso: java.net.DatagramPacket
 - seealso: java.nio.channels.DatagramChannel
 @since JDK1.0
 */
@interface JavaNetDatagramSocket : NSObject < JavaIoCloseable > {
 @public
  JavaNetDatagramSocketImpl *impl_;
  /*!
   @brief Are we using an older DatagramSocketImpl?
   */
  jboolean oldImpl_;
  jint connectState_;
  JavaNetInetAddress *connectedAddress_;
  jint connectedPort_;
}
@property (readonly, class) jint ST_NOT_CONNECTED NS_SWIFT_NAME(ST_NOT_CONNECTED);
@property (readonly, class) jint ST_CONNECTED NS_SWIFT_NAME(ST_CONNECTED);
@property (readonly, class) jint ST_CONNECTED_NO_IMPL NS_SWIFT_NAME(ST_CONNECTED_NO_IMPL);
@property (class, strong) IOSClass *implClass NS_SWIFT_NAME(implClass);
@property (class, strong) id<JavaNetDatagramSocketImplFactory> factory NS_SWIFT_NAME(factory);

+ (jint)ST_NOT_CONNECTED;

+ (jint)ST_CONNECTED;

+ (jint)ST_CONNECTED_NO_IMPL;

+ (IOSClass *)implClass;

+ (void)setImplClass:(IOSClass *)value;

+ (id<JavaNetDatagramSocketImplFactory>)factory;

+ (void)setFactory:(id<JavaNetDatagramSocketImplFactory>)value;

#pragma mark Public

/*!
 @brief Constructs a datagram socket and binds it to any available port
  on the local host machine.The socket will be bound to the 
 <code>wildcard</code> address,
  an IP address chosen by the kernel.
 <p>If there is a security manager,
  its <code>checkListen</code> method is first called
  with 0 as its argument to ensure the operation is allowed.
  This could result in a SecurityException.
 @throw SocketExceptionif the socket could not be opened,
                or the socket could not bind to the specified local port.
 @throw SecurityExceptionif a security manager exists and its
              <code>checkListen</code> method doesn't allow the operation.
 - seealso: SecurityManager#checkListen
 */
- (instancetype __nonnull)init;

/*!
 @brief Constructs a datagram socket and binds it to the specified port
  on the local host machine.The socket will be bound to the 
 <code>wildcard</code> address,
  an IP address chosen by the kernel.
 <p>If there is a security manager,
  its <code>checkListen</code> method is first called
  with the <code>port</code> argument
  as its argument to ensure the operation is allowed.
  This could result in a SecurityException.
 @param port port to use.
 @throw SocketExceptionif the socket could not be opened,
                or the socket could not bind to the specified local port.
 @throw SecurityExceptionif a security manager exists and its
              <code>checkListen</code> method doesn't allow the operation.
 - seealso: SecurityManager#checkListen
 */
- (instancetype __nonnull)initWithInt:(jint)port;

/*!
 @brief Creates a datagram socket, bound to the specified local
  address.The local port must be between 0 and 65535 inclusive.
 If the IP address is 0.0.0.0, the socket will be bound to the 
 <code>wildcard</code> address,
  an IP address chosen by the kernel. 
 <p>If there is a security manager,
  its <code>checkListen</code> method is first called
  with the <code>port</code> argument
  as its argument to ensure the operation is allowed.
  This could result in a SecurityException.
 @param port local port to use
 @param laddr local address to bind
 @throw SocketExceptionif the socket could not be opened,
                or the socket could not bind to the specified local port.
 @throw SecurityExceptionif a security manager exists and its
              <code>checkListen</code> method doesn't allow the operation.
 - seealso: SecurityManager#checkListen
 @since JDK1.1
 */
- (instancetype __nonnull)initWithInt:(jint)port
               withJavaNetInetAddress:(JavaNetInetAddress *)laddr;

/*!
 @brief Creates a datagram socket, bound to the specified local
  socket address.
 <p>
  If, if the address is <code>null</code>, creates an unbound socket. 
 <p>
  <p>If there is a security manager,
  its <code>checkListen</code> method is first called
  with the port from the socket address
  as its argument to ensure the operation is allowed.
  This could result in a SecurityException.
 @param bindaddr local socket address to bind, or  <code> null </code>
                   for an unbound socket.
 @throw SocketExceptionif the socket could not be opened,
                or the socket could not bind to the specified local port.
 @throw SecurityExceptionif a security manager exists and its
              <code>checkListen</code> method doesn't allow the operation.
 - seealso: SecurityManager#checkListen
 @since 1.4
 */
- (instancetype __nonnull)initWithJavaNetSocketAddress:(JavaNetSocketAddress *)bindaddr;

/*!
 @brief Binds this DatagramSocket to a specific address & port.
 <p>
  If the address is <code>null</code>, then the system will pick up
  an ephemeral port and a valid local address to bind the socket.
 <p>
 @param addr The address  &  port to bind to.
 @throw SocketExceptionif any error happens during the bind, or if the
           socket is already bound.
 @throw SecurityExceptionif a security manager exists and its
              <code>checkListen</code> method doesn't allow the operation.
 @throw IllegalArgumentExceptionif addr is a SocketAddress subclass
          not supported by this socket.
 @since 1.4
 */
- (void)bindWithJavaNetSocketAddress:(JavaNetSocketAddress *)addr;

/*!
 @brief Closes this datagram socket.
 <p>
  Any thread currently blocked in <code>receive</code> upon this socket
  will throw a <code>SocketException</code>.
  
 <p> If this socket has an associated channel then the channel is closed
  as well.
 */
- (void)close;

/*!
 @brief Connects the socket to a remote address for this socket.When a
  socket is connected to a remote address, packets may only be
  sent to or received from that address.
 By default a datagram
  socket is not connected. 
 <p>If the remote destination to which the socket is connected does not
  exist, or is otherwise unreachable, and if an ICMP destination unreachable
  packet has been received for that address, then a subsequent call to
  send or receive may throw a PortUnreachableException. Note, there is no
  guarantee that the exception will be thrown. 
 <p> If a security manager has been installed then it is invoked to check
  access to the remote address. Specifically, if the given <code>address</code>
  is a <code>multicast address</code>,
  the security manager's <code>checkMulticast</code>
  method is invoked with the given <code>address</code>.
  Otherwise, the security manager's <code>checkConnect</code>
  and <code>checkAccept</code> methods
  are invoked, with the given <code>address</code> and <code>port</code>, to
  verify that datagrams are permitted to be sent and received
  respectively. 
 <p> When a socket is connected, <code>receive</code> and 
 <code>send</code> <b>will not perform any security checks</b>
  on incoming and outgoing packets, other than matching the packet's
  and the socket's address and port. On a send operation, if the
  packet's address is set and the packet's address and the socket's
  address do not match, an <code>IllegalArgumentException</code> will be
  thrown. A socket connected to a multicast address may only be used
  to send packets.
 @param address the remote address for the socket
 @param port the remote port for the socket.
 @throw IllegalArgumentException
 if the address is null, or the port is out of range.
 @throw SecurityException
 if a security manager has been installed and it does
          not permit access to the given remote address
 - seealso: #disconnect
 */
- (void)connectWithJavaNetInetAddress:(JavaNetInetAddress *)address
                              withInt:(jint)port;

/*!
 @brief Connects this socket to a remote socket address (IP address + port number).
 <p> If given an <code>InetSocketAddress</code>, this method
  behaves as if invoking <code>connect(InetAddress,int)</code>
  with the the given socket addresses IP address and port number.
 @param addr The remote address.
 @throw SocketException
 if the connect fails
 @throw IllegalArgumentException
 if <code>addr</code> is <code>null</code>, or <code>addr</code> is a SocketAddress
          subclass not supported by this socket
 @throw SecurityException
 if a security manager has been installed and it does
          not permit access to the given remote address
 @since 1.4
 */
- (void)connectWithJavaNetSocketAddress:(JavaNetSocketAddress *)addr;

/*!
 @brief Disconnects the socket.If the socket is closed or not connected,
  then this method has no effect.
 - seealso: #connect
 */
- (void)disconnect;

/*!
 @brief Tests if SO_BROADCAST is enabled.
 @return a <code>boolean</code> indicating whether or not SO_BROADCAST is enabled.
 @throw SocketExceptionif there is an error
  in the underlying protocol, such as an UDP error.
 @since 1.4
 - seealso: #setBroadcast(boolean)
 */
- (jboolean)getBroadcast;

/*!
 @brief Returns the unique <code>java.nio.channels.DatagramChannel</code> object
  associated with this datagram socket, if any.
 <p> A datagram socket will have a channel if, and only if, the channel
  itself was created via the <code>DatagramChannel.open</code>
  method.
 @return the datagram channel associated with this datagram socket,
           or <tt>null</tt> if this socket was not created for a channel
 @since 1.4
 */
- (JavaNioChannelsDatagramChannel *)getChannel;

/*!
 */
- (JavaIoFileDescriptor *)getFileDescriptor$;

/*!
 @brief Returns the address to which this socket is connected.Returns
  <code>null</code> if the socket is not connected.
 <p>
  If the socket was connected prior to being <code>closed</code>,
  then this method will continue to return the connected address
  after the socket is closed.
 @return the address to which this socket is connected.
 */
- (JavaNetInetAddress *)getInetAddress;

/*!
 @brief Gets the local address to which the socket is bound.
 <p>If there is a security manager, its 
 <code>checkConnect</code> method is first called
  with the host address and <code>-1</code>
  as its arguments to see if the operation is allowed.
 - seealso: SecurityManager#checkConnect
 @return the local address to which the socket is bound,
           <code>null</code> if the socket is closed, or
           an <code>InetAddress</code> representing
           <code>wildcard</code>
           address if either the socket is not bound, or
           the security manager <code>checkConnect</code>
           method does not allow the operation
 @since 1.1
 */
- (JavaNetInetAddress *)getLocalAddress;

/*!
 @brief Returns the port number on the local host to which this socket
  is bound.
 @return the port number on the local host to which this socket is bound,
                 <code>-1</code> if the socket is closed, or
                 <code>0</code> if it is not bound yet.
 */
- (jint)getLocalPort;

/*!
 @brief Returns the address of the endpoint this socket is bound to.
 @return a <code>SocketAddress</code> representing the local endpoint of this
          socket, or <code>null</code> if it is closed or not bound yet.
 - seealso: #getLocalAddress()
 - seealso: #getLocalPort()
 - seealso: #bind(SocketAddress)
 @since 1.4
 */
- (JavaNetSocketAddress *)getLocalSocketAddress;

/*!
 @brief Returns the port number to which this socket is connected.
 Returns <code>-1</code> if the socket is not connected. 
 <p>
  If the socket was connected prior to being <code>closed</code>,
  then this method will continue to return the connected port number
  after the socket is closed.
 @return the port number to which this socket is connected.
 */
- (jint)getPort;

/*!
 @brief Get value of the SO_RCVBUF option for this <tt>DatagramSocket</tt>, that is the
  buffer size used by the platform for input on this <tt>DatagramSocket</tt>.
 @return the value of the SO_RCVBUF option for this <tt>DatagramSocket</tt>
 @throw SocketExceptionif there is an error in the underlying protocol, such as an UDP error.
 - seealso: #setReceiveBufferSize(int)
 */
- (jint)getReceiveBufferSize;

/*!
 @brief Returns the address of the endpoint this socket is connected to, or 
 <code>null</code> if it is unconnected.
 <p>
  If the socket was connected prior to being <code>closed</code>,
  then this method will continue to return the connected address
  after the socket is closed.
 @return a <code>SocketAddress</code> representing the remote
          endpoint of this socket, or <code>null</code> if it is
          not connected yet.
 - seealso: #getInetAddress()
 - seealso: #getPort()
 - seealso: #connect(SocketAddress)
 @since 1.4
 */
- (JavaNetSocketAddress *)getRemoteSocketAddress;

/*!
 @brief Tests if SO_REUSEADDR is enabled.
 @return a <code>boolean</code> indicating whether or not SO_REUSEADDR is enabled.
 @throw SocketExceptionif there is an error
  in the underlying protocol, such as an UDP error.
 @since 1.4
 - seealso: #setReuseAddress(boolean)
 */
- (jboolean)getReuseAddress;

/*!
 @brief Get value of the SO_SNDBUF option for this <tt>DatagramSocket</tt>, that is the
  buffer size used by the platform for output on this <tt>DatagramSocket</tt>.
 @return the value of the SO_SNDBUF option for this <tt>DatagramSocket</tt>
 @throw SocketExceptionif there is an error in
  the underlying protocol, such as an UDP error.
 - seealso: #setSendBufferSize
 */
- (jint)getSendBufferSize;

/*!
 @brief Retrieve setting for SO_TIMEOUT.0 returns implies that the
  option is disabled (i.e., timeout of infinity).
 @return the setting for SO_TIMEOUT
 @throw SocketExceptionif there is an error in the underlying protocol, such as an UDP error.
 @since JDK1.1
 - seealso: #setSoTimeout(int)
 */
- (jint)getSoTimeout;

/*!
 @brief Gets traffic class or type-of-service in the IP datagram
  header for packets sent from this DatagramSocket.
 <p>
  As the underlying network implementation may ignore the
  traffic class or type-of-service set using <code>setTrafficClass(int)</code>
  this method may return a different value than was previously
  set using the <code>setTrafficClass(int)</code> method on this
  DatagramSocket.
 @return the traffic class or type-of-service already set
 @throw SocketExceptionif there is an error obtaining the
  traffic class or type-of-service value.
 @since 1.4
 - seealso: #setTrafficClass(int)
 */
- (jint)getTrafficClass;

/*!
 @brief Returns the binding state of the socket.
 <p>
  If the socket was bound prior to being <code>closed</code>,
  then this method will continue to return <code>true</code>
  after the socket is closed.
 @return true if the socket successfully bound to an address
 @since 1.4
 */
- (jboolean)isBound;

/*!
 @brief Returns whether the socket is closed or not.
 @return true if the socket has been closed
 @since 1.4
 */
- (jboolean)isClosed;

/*!
 @brief Returns the connection state of the socket.
 <p>
  If the socket was connected prior to being <code>closed</code>,
  then this method will continue to return <code>true</code>
  after the socket is closed.
 @return true if the socket successfully connected to a server
 @since 1.4
 */
- (jboolean)isConnected;

/*!
 @brief Receives a datagram packet from this socket.When this method
  returns, the <code>DatagramPacket</code>'s buffer is filled with
  the data received.
 The datagram packet also contains the sender's
  IP address, and the port number on the sender's machine. 
 <p>
  This method blocks until a datagram is received. The 
 <code>length</code> field of the datagram packet object contains
  the length of the received message. If the message is longer than
  the packet's length, the message is truncated. 
 <p>
  If there is a security manager, a packet cannot be received if the
  security manager's <code>checkAccept</code> method
  does not allow it.
 @param p the  <code> DatagramPacket </code>  into which to place
                   the incoming data.
 @throw IOExceptionif an I/O error occurs.
 @throw SocketTimeoutExceptionif setSoTimeout was previously called
                  and the timeout has expired.
 @throw PortUnreachableExceptionmay be thrown if the socket is connected
              to a currently unreachable destination. Note, there is no guarantee that the
              exception will be thrown.
 @throw java.nio.channels.IllegalBlockingModeException
 if this socket has an associated channel,
              and the channel is in non-blocking mode.
 - seealso: java.net.DatagramPacket
 - seealso: java.net.DatagramSocket
 */
- (void)receiveWithJavaNetDatagramPacket:(JavaNetDatagramPacket *)p;

/*!
 @brief Sends a datagram packet from this socket.The
  <code>DatagramPacket</code> includes information indicating the
  data to be sent, its length, the IP address of the remote host,
  and the port number on the remote host.
 <p>If there is a security manager, and the socket is not currently
  connected to a remote address, this method first performs some
  security checks. First, if <code>p.getAddress().isMulticastAddress()</code>
  is true, this method calls the
  security manager's <code>checkMulticast</code> method
  with <code>p.getAddress()</code> as its argument.
  If the evaluation of that expression is false,
  this method instead calls the security manager's 
 <code>checkConnect</code> method with arguments 
 <code>p.getAddress().getHostAddress()</code> and 
 <code>p.getPort()</code>. Each call to a security manager method
  could result in a SecurityException if the operation is not allowed.
 @param p the  <code> DatagramPacket </code>  to be sent.
 @throw IOExceptionif an I/O error occurs.
 @throw SecurityExceptionif a security manager exists and its
              <code>checkMulticast</code> or <code>checkConnect</code>
              method doesn't allow the send.
 @throw PortUnreachableExceptionmay be thrown if the socket is connected
              to a currently unreachable destination. Note, there is no
              guarantee that the exception will be thrown.
 @throw java.nio.channels.IllegalBlockingModeException
 if this socket has an associated channel,
              and the channel is in non-blocking mode.
 @throw IllegalArgumentExceptionif the socket is connected,
              and connected address and packet address differ.
 - seealso: java.net.DatagramPacket
 - seealso: SecurityManager#checkMulticast(InetAddress)
 - seealso: SecurityManager#checkConnect
 */
- (void)sendWithJavaNetDatagramPacket:(JavaNetDatagramPacket *)p;

/*!
 @brief Enable/disable SO_BROADCAST.
 <p> Some operating systems may require that the Java virtual machine be
  started with implementation specific privileges to enable this option or
  send broadcast datagrams.
 @param on whether or not to have broadcast turned on.
 @throw SocketException
 if there is an error in the underlying protocol, such as an UDP
           error.
 @since 1.4
 - seealso: #getBroadcast()
 */
- (void)setBroadcastWithBoolean:(jboolean)on;

/*!
 @brief Sets the datagram socket implementation factory for the
  application.The factory can be specified only once.
 <p>
  When an application creates a new datagram socket, the socket
  implementation factory's <code>createDatagramSocketImpl</code> method is
  called to create the actual datagram socket implementation. 
 <p>
  Passing <code>null</code> to the method is a no-op unless the factory
  was already set. 
 <p>If there is a security manager, this method first calls
  the security manager's <code>checkSetFactory</code> method
  to ensure the operation is allowed.
  This could result in a SecurityException.
 @param fac the desired factory.
 @throw IOExceptionif an I/O error occurs when setting the
               datagram socket factory.
 @throw SocketExceptionif the factory is already defined.
 @throw SecurityExceptionif a security manager exists and its
              <code>checkSetFactory</code> method doesn't allow the
      operation.
 - seealso: java.net.DatagramSocketImplFactory#createDatagramSocketImpl()
 - seealso: SecurityManager#checkSetFactory
 @since 1.3
 */
+ (void)setDatagramSocketImplFactoryWithJavaNetDatagramSocketImplFactory:(id<JavaNetDatagramSocketImplFactory>)fac;

/*!
 @brief Sets the network interface used by this socket.Any packets sent
  via this socket are transmitted via the specified interface.
 Any
  packets received by this socket will come from the specified
  interface.  Broadcast datagrams received on this interface will
  be processed by this socket. This corresponds to Linux's SO_BINDTODEVICE.
 */
- (void)setNetworkInterfaceWithJavaNetNetworkInterface:(JavaNetNetworkInterface *)netInterface;

/*!
 @brief Sets the SO_RCVBUF option to the specified value for this 
 <tt>DatagramSocket</tt>.The SO_RCVBUF option is used by the
  the network implementation as a hint to size the underlying
  network I/O buffers.
 The SO_RCVBUF setting may also be used
  by the network implementation to determine the maximum size
  of the packet that can be received on this socket. 
 <p>
  Because SO_RCVBUF is a hint, applications that want to
  verify what size the buffers were set to should call 
 <code>getReceiveBufferSize()</code>.
  <p>
  Increasing SO_RCVBUF may allow the network implementation
  to buffer multiple packets when packets arrive faster than
  are being received using <code>receive(DatagramPacket)</code>.
  <p>
  Note: It is implementation specific if a packet larger
  than SO_RCVBUF can be received.
 @param size the size to which to set the receive buffer  size. This value must be greater than 0.
 @throw SocketExceptionif there is an error in
  the underlying protocol, such as an UDP error.
 @throw IllegalArgumentExceptionif the value is 0 or is
  negative.
 - seealso: #getReceiveBufferSize()
 */
- (void)setReceiveBufferSizeWithInt:(jint)size;

/*!
 @brief Enable/disable the SO_REUSEADDR socket option.
 <p>
  For UDP sockets it may be necessary to bind more than one
  socket to the same socket address. This is typically for the
  purpose of receiving multicast packets
  (See <code>java.net.MulticastSocket</code>). The 
 <tt>SO_REUSEADDR</tt> socket option allows multiple
  sockets to be bound to the same socket address if the 
 <tt>SO_REUSEADDR</tt> socket option is enabled prior
  to binding the socket using <code>bind(SocketAddress)</code>.
  <p>
  Note: This functionality is not supported by all existing platforms,
  so it is implementation specific whether this option will be ignored
  or not. However, if it is not supported then 
 <code>getReuseAddress()</code> will always return <code>false</code>.
  <p>
  When a <tt>DatagramSocket</tt> is created the initial setting
  of <tt>SO_REUSEADDR</tt> is disabled. 
 <p>
  The behaviour when <tt>SO_REUSEADDR</tt> is enabled or
  disabled after a socket is bound (See <code>isBound()</code>)
  is not defined.
 @param on whether to enable or disable the
 @throw SocketExceptionif an error occurs enabling or
             disabling the <tt>SO_RESUEADDR</tt> socket option,
             or the socket is closed.
 @since 1.4
 - seealso: #getReuseAddress()
 - seealso: #bind(SocketAddress)
 - seealso: #isBound()
 - seealso: #isClosed()
 */
- (void)setReuseAddressWithBoolean:(jboolean)on;

/*!
 @brief Sets the SO_SNDBUF option to the specified value for this 
 <tt>DatagramSocket</tt>.The SO_SNDBUF option is used by the
  network implementation as a hint to size the underlying
  network I/O buffers.
 The SO_SNDBUF setting may also be used
  by the network implementation to determine the maximum size
  of the packet that can be sent on this socket. 
 <p>
  As SO_SNDBUF is a hint, applications that want to verify
  what size the buffer is should call <code>getSendBufferSize()</code>.
  <p>
  Increasing the buffer size may allow multiple outgoing packets
  to be queued by the network implementation when the send rate
  is high. 
 <p>
  Note: If <code>send(DatagramPacket)</code> is used to send a 
 <code>DatagramPacket</code> that is larger than the setting
  of SO_SNDBUF then it is implementation specific if the
  packet is sent or discarded.
 @param size the size to which to set the send buffer  size. This value must be greater than 0.
 @throw SocketExceptionif there is an error
  in the underlying protocol, such as an UDP error.
 @throw IllegalArgumentExceptionif the value is 0 or is
  negative.
 - seealso: #getSendBufferSize()
 */
- (void)setSendBufferSizeWithInt:(jint)size;

/*!
 @brief Enable/disable SO_TIMEOUT with the specified timeout, in
   milliseconds.With this option set to a non-zero timeout,
   a call to receive() for this DatagramSocket
   will block for only this amount of time.
 If the timeout expires,
   a <B>java.net.SocketTimeoutException</B> is raised, though the
   DatagramSocket is still valid.  The option <B>must</B> be enabled
   prior to entering the blocking operation to have effect.  The
   timeout must be > 0.
   A timeout of zero is interpreted as an infinite timeout.
 @param timeout the specified timeout in milliseconds.
 @throw SocketExceptionif there is an error in the underlying protocol, such as an UDP error.
 @since JDK1.1
 - seealso: #getSoTimeout()
 */
- (void)setSoTimeoutWithInt:(jint)timeout;

/*!
 @brief Sets traffic class or type-of-service octet in the IP
  datagram header for datagrams sent from this DatagramSocket.
 As the underlying network implementation may ignore this
  value applications should consider it a hint. 
 <P> The tc <B>must</B> be in the range <code> 0 <= tc <=
  255</code> or an IllegalArgumentException will be thrown. 
 <p>Notes:
  <p>For Internet Protocol v4 the value consists of an 
 <code>integer</code>, the least significant 8 bits of which
  represent the value of the TOS octet in IP packets sent by
  the socket.
  RFC 1349 defines the TOS values as follows: 
 <p>
  <UL>
  <LI><CODE>IPTOS_LOWCOST (0x02)</CODE></LI>
  <LI><CODE>IPTOS_RELIABILITY (0x04)</CODE></LI>
  <LI><CODE>IPTOS_THROUGHPUT (0x08)</CODE></LI>
  <LI><CODE>IPTOS_LOWDELAY (0x10)</CODE></LI>
  </UL>
  The last low order bit is always ignored as this
  corresponds to the MBZ (must be zero) bit. 
 <p>
  Setting bits in the precedence field may result in a
  SocketException indicating that the operation is not
  permitted. 
 <p>
  for Internet Protocol v6 <code>tc</code> is the value that
  would be placed into the sin6_flowinfo field of the IP header.
 @param tc an  <code> int </code>  value for the bitset.
 @throw SocketExceptionif there is an error setting the
  traffic class or type-of-service
 @since 1.4
 - seealso: #getTrafficClass
 */
- (void)setTrafficClassWithInt:(jint)tc;

#pragma mark Protected

/*!
 @brief Creates an unbound datagram socket with the specified
  DatagramSocketImpl.
 @param impl an instance of a  <B> DatagramSocketImpl </B>
          the subclass wishes to use on the DatagramSocket.
 @since 1.4
 */
- (instancetype __nonnull)initWithJavaNetDatagramSocketImpl:(JavaNetDatagramSocketImpl *)impl;

#pragma mark Package-Private

- (void)checkAddressWithJavaNetInetAddress:(JavaNetInetAddress *)addr
                              withNSString:(NSString *)op;

- (void)createImpl;

/*!
 @brief Get the <code>DatagramSocketImpl</code> attached to this socket,
  creating it if necessary.
 @return the <code>DatagramSocketImpl</code> attached to that
           DatagramSocket
 @throw SocketExceptionif creation fails.
 @since 1.4
 */
- (JavaNetDatagramSocketImpl *)getImpl;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNetDatagramSocket)

J2OBJC_FIELD_SETTER(JavaNetDatagramSocket, impl_, JavaNetDatagramSocketImpl *)
J2OBJC_FIELD_SETTER(JavaNetDatagramSocket, connectedAddress_, JavaNetInetAddress *)

inline jint JavaNetDatagramSocket_get_ST_NOT_CONNECTED(void);
#define JavaNetDatagramSocket_ST_NOT_CONNECTED 0
J2OBJC_STATIC_FIELD_CONSTANT(JavaNetDatagramSocket, ST_NOT_CONNECTED, jint)

inline jint JavaNetDatagramSocket_get_ST_CONNECTED(void);
#define JavaNetDatagramSocket_ST_CONNECTED 1
J2OBJC_STATIC_FIELD_CONSTANT(JavaNetDatagramSocket, ST_CONNECTED, jint)

inline jint JavaNetDatagramSocket_get_ST_CONNECTED_NO_IMPL(void);
#define JavaNetDatagramSocket_ST_CONNECTED_NO_IMPL 2
J2OBJC_STATIC_FIELD_CONSTANT(JavaNetDatagramSocket, ST_CONNECTED_NO_IMPL, jint)

inline IOSClass *JavaNetDatagramSocket_get_implClass(void);
inline IOSClass *JavaNetDatagramSocket_set_implClass(IOSClass *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSClass *JavaNetDatagramSocket_implClass;
J2OBJC_STATIC_FIELD_OBJ(JavaNetDatagramSocket, implClass, IOSClass *)

/*!
 @brief User defined factory for all datagram sockets.
 */
inline id<JavaNetDatagramSocketImplFactory> JavaNetDatagramSocket_get_factory(void);
inline id<JavaNetDatagramSocketImplFactory> JavaNetDatagramSocket_set_factory(id<JavaNetDatagramSocketImplFactory> value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaNetDatagramSocketImplFactory> JavaNetDatagramSocket_factory;
J2OBJC_STATIC_FIELD_OBJ(JavaNetDatagramSocket, factory, id<JavaNetDatagramSocketImplFactory>)

FOUNDATION_EXPORT void JavaNetDatagramSocket_init(JavaNetDatagramSocket *self);

FOUNDATION_EXPORT JavaNetDatagramSocket *new_JavaNetDatagramSocket_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaNetDatagramSocket *create_JavaNetDatagramSocket_init(void);

FOUNDATION_EXPORT void JavaNetDatagramSocket_initWithJavaNetDatagramSocketImpl_(JavaNetDatagramSocket *self, JavaNetDatagramSocketImpl *impl);

FOUNDATION_EXPORT JavaNetDatagramSocket *new_JavaNetDatagramSocket_initWithJavaNetDatagramSocketImpl_(JavaNetDatagramSocketImpl *impl) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaNetDatagramSocket *create_JavaNetDatagramSocket_initWithJavaNetDatagramSocketImpl_(JavaNetDatagramSocketImpl *impl);

FOUNDATION_EXPORT void JavaNetDatagramSocket_initWithJavaNetSocketAddress_(JavaNetDatagramSocket *self, JavaNetSocketAddress *bindaddr);

FOUNDATION_EXPORT JavaNetDatagramSocket *new_JavaNetDatagramSocket_initWithJavaNetSocketAddress_(JavaNetSocketAddress *bindaddr) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaNetDatagramSocket *create_JavaNetDatagramSocket_initWithJavaNetSocketAddress_(JavaNetSocketAddress *bindaddr);

FOUNDATION_EXPORT void JavaNetDatagramSocket_initWithInt_(JavaNetDatagramSocket *self, jint port);

FOUNDATION_EXPORT JavaNetDatagramSocket *new_JavaNetDatagramSocket_initWithInt_(jint port) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaNetDatagramSocket *create_JavaNetDatagramSocket_initWithInt_(jint port);

FOUNDATION_EXPORT void JavaNetDatagramSocket_initWithInt_withJavaNetInetAddress_(JavaNetDatagramSocket *self, jint port, JavaNetInetAddress *laddr);

FOUNDATION_EXPORT JavaNetDatagramSocket *new_JavaNetDatagramSocket_initWithInt_withJavaNetInetAddress_(jint port, JavaNetInetAddress *laddr) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaNetDatagramSocket *create_JavaNetDatagramSocket_initWithInt_withJavaNetInetAddress_(jint port, JavaNetInetAddress *laddr);

FOUNDATION_EXPORT void JavaNetDatagramSocket_setDatagramSocketImplFactoryWithJavaNetDatagramSocketImplFactory_(id<JavaNetDatagramSocketImplFactory> fac);

J2OBJC_TYPE_LITERAL_HEADER(JavaNetDatagramSocket)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaNetDatagramSocket")
