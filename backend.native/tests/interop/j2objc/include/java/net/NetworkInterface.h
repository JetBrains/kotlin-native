//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/net/NetworkInterface.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNetNetworkInterface")
#ifdef RESTRICT_JavaNetNetworkInterface
#define INCLUDE_ALL_JavaNetNetworkInterface 0
#else
#define INCLUDE_ALL_JavaNetNetworkInterface 1
#endif
#undef RESTRICT_JavaNetNetworkInterface

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNetNetworkInterface_) && (INCLUDE_ALL_JavaNetNetworkInterface || defined(INCLUDE_JavaNetNetworkInterface))
#define JavaNetNetworkInterface_

@class IOSByteArray;
@class IOSObjectArray;
@class JavaNetInetAddress;
@protocol JavaUtilEnumeration;
@protocol JavaUtilList;

/*!
 @brief This class represents a Network Interface made up of a name,
  and a list of IP addresses assigned to this interface.
 It is used to identify the local interface on which a multicast group
  is joined.
  Interfaces are normally known by names such as "le0".
 @since 1.4
 */
@interface JavaNetNetworkInterface : NSObject

#pragma mark Public

/*!
 @brief Compares this object against the specified object.
 The result is <code>true</code> if and only if the argument is
  not <code>null</code> and it represents the same NetworkInterface
  as this object. 
 <p>
  Two instances of <code>NetworkInterface</code> represent the same
  NetworkInterface if both name and addrs are the same for both.
 @param obj the object to compare against.
 @return <code>true</code> if the objects are the same;
           <code>false</code> otherwise.
 - seealso: java.net.InetAddress#getAddress()
 */
- (jboolean)isEqual:(id)obj;

/*!
 @brief Get a network interface given its index.
 @param index an integer, the index of the interface
 @return the NetworkInterface obtained from its index, or <code>null</code> if
          there is no interface with such an index on the system
 @throw SocketExceptionif an I/O error occurs.
 @throw IllegalArgumentExceptionif index has a negative value
 - seealso: #getIndex()
 @since 1.7
 */
+ (JavaNetNetworkInterface *)getByIndexWithInt:(jint)index;

/*!
 @brief Convenience method to search for a network interface that
  has the specified Internet Protocol (IP) address bound to
  it.
 <p>
  If the specified IP address is bound to multiple network
  interfaces it is not defined which network interface is
  returned.
 @param addr The 
  <tt> InetAddress </tt>  to search with.
 @return A <tt>NetworkInterface</tt>
           or <tt>null</tt> if there is no network interface
           with the specified IP address.
 @throw SocketException
 If an I/O error occurs.
 @throw NullPointerException
 If the specified address is <tt>null</tt>.
 */
+ (JavaNetNetworkInterface *)getByInetAddressWithJavaNetInetAddress:(JavaNetInetAddress *)addr;

/*!
 @brief Searches for the network interface with the specified name.
 @param name The name of the network interface.
 @return A <tt>NetworkInterface</tt> with the specified name,
           or <tt>null</tt> if there is no network interface
           with the specified name.
 @throw SocketException
 If an I/O error occurs.
 @throw NullPointerException
 If the specified name is <tt>null</tt>.
 */
+ (JavaNetNetworkInterface *)getByNameWithNSString:(NSString *)name;

/*!
 @brief Get the display name of this network interface.
 A display name is a human readable String describing the network
  device.
 @return a non-empty string representing the display name of this network
          interface, or null if no display name is available.
 */
- (NSString *)getDisplayName;

/*!
 @brief Returns the hardware address (usually MAC) of the interface if it
  has one and if it can be accessed given the current privileges.
 If a security manager is set, then the caller must have
  the permission <code>NetPermission</code>("getNetworkInformation").
 @return a byte array containing the address, or <code>null</code> if
           the address doesn't exist, is not accessible or a security
           manager is set and the caller does not have the permission
           NetPermission("getNetworkInformation")
 @throw SocketExceptionif an I/O error occurs.
 @since 1.6
 */
- (IOSByteArray *)getHardwareAddress;

/*!
 @brief Returns the index of this network interface.The index is an integer greater
  or equal to zero, or <code>-1</code> for unknown.
 This is a system specific value
  and interfaces with the same name can have different indexes on different
  machines.
 @return the index of this network interface or <code>-1</code> if the index is
          unknown
 - seealso: #getByIndex(int)
 @since 1.7
 */
- (jint)getIndex;

/*!
 @brief Convenience method to return an Enumeration with all or a
  subset of the InetAddresses bound to this network interface.
 <p>
  If there is a security manager, its <code>checkConnect</code>
  method is called for each InetAddress. Only InetAddresses where
  the <code>checkConnect</code> doesn't throw a SecurityException
  will be returned in the Enumeration. However, if the caller has the 
 <code>NetPermission</code>("getNetworkInformation") permission, then all
  InetAddresses are returned.
 @return an Enumeration object with all or a subset of the InetAddresses
  bound to this network interface
 */
- (id<JavaUtilEnumeration>)getInetAddresses;

/*!
 @brief Get a List of all or a subset of the <code>InterfaceAddresses</code>
  of this network interface.
 <p>
  If there is a security manager, its <code>checkConnect</code>
  method is called with the InetAddress for each InterfaceAddress.
  Only InterfaceAddresses where the <code>checkConnect</code> doesn't throw
  a SecurityException will be returned in the List.
 @return a <code>List</code> object with all or a subset of the
          InterfaceAddresss of this network interface
 @since 1.6
 */
- (id<JavaUtilList>)getInterfaceAddresses;

/*!
 @brief Returns the Maximum Transmission Unit (MTU) of this interface.
 @return the value of the MTU for that interface.
 @throw SocketExceptionif an I/O error occurs.
 @since 1.6
 */
- (jint)getMTU;

/*!
 @brief Get the name of this network interface.
 @return the name of this network interface
 */
- (NSString *)getName;

/*!
 @brief Returns all the interfaces on this machine.Returns null if no
  network interfaces could be found on this machine.
 NOTE: can use getNetworkInterfaces()+getInetAddresses()
        to obtain all IP addresses for this node
 @return an Enumeration of NetworkInterfaces found on this machine
 @throw SocketExceptionif an I/O error occurs.
 */
+ (id<JavaUtilEnumeration>)getNetworkInterfaces;

/*!
 @brief Returns the parent NetworkInterface of this interface if this is
  a subinterface, or <code>null</code> if it is a physical
  (non virtual) interface or has no parent.
 @return The <code>NetworkInterface</code> this interface is attached to.
 @since 1.6
 */
- (JavaNetNetworkInterface *)getParent;

/*!
 @brief Get an Enumeration with all the subinterfaces (also known as virtual
  interfaces) attached to this network interface.
 <p>
  For instance eth0:1 will be a subinterface to eth0.
 @return an Enumeration object with all of the subinterfaces
  of this network interface
 @since 1.6
 */
- (id<JavaUtilEnumeration>)getSubInterfaces;

- (NSUInteger)hash;

/*!
 @brief Returns whether a network interface is a loopback interface.
 @return <code>true</code> if the interface is a loopback interface.
 @throw SocketExceptionif an I/O error occurs.
 @since 1.6
 */
- (jboolean)isLoopback;

/*!
 @brief Returns whether a network interface is a point to point interface.
 A typical point to point interface would be a PPP connection through
  a modem.
 @return <code>true</code> if the interface is a point to point
           interface.
 @throw SocketExceptionif an I/O error occurs.
 @since 1.6
 */
- (jboolean)isPointToPoint;

/*!
 @brief Returns whether a network interface is up and running.
 @return <code>true</code> if the interface is up and running.
 @throw SocketExceptionif an I/O error occurs.
 @since 1.6
 */
- (jboolean)isUp;

/*!
 @brief Returns whether this interface is a virtual interface (also called
  subinterface).
 Virtual interfaces are, on some systems, interfaces created as a child
  of a physical interface and given different settings (like address or
  MTU). Usually the name of the interface will the name of the parent
  followed by a colon (:) and a number identifying the child since there
  can be several virtual interfaces attached to a single physical
  interface.
 @return <code>true</code> if this interface is a virtual interface.
 @since 1.6
 */
- (jboolean)isVirtual;

/*!
 @brief Returns whether a network interface supports multicasting or not.
 @return <code>true</code> if the interface supports Multicasting.
 @throw SocketExceptionif an I/O error occurs.
 @since 1.6
 */
- (jboolean)supportsMulticast;

- (NSString *)description;

#pragma mark Package-Private

/*!
 @brief Returns an NetworkInterface object with index set to 0 and name to null.
 Setting such an interface on a MulticastSocket will cause the
  kernel to choose one interface for sending multicast packets.
 */
- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithNSString:(NSString *)name
                                   withInt:(jint)index
               withJavaNetInetAddressArray:(IOSObjectArray *)addrs;

/*!
 @brief Returns the default network interface of this system
 @return the default interface
 */
+ (JavaNetNetworkInterface *)getDefault;

@end

J2OBJC_STATIC_INIT(JavaNetNetworkInterface)

FOUNDATION_EXPORT void JavaNetNetworkInterface_init(JavaNetNetworkInterface *self);

FOUNDATION_EXPORT JavaNetNetworkInterface *new_JavaNetNetworkInterface_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaNetNetworkInterface *create_JavaNetNetworkInterface_init(void);

FOUNDATION_EXPORT void JavaNetNetworkInterface_initWithNSString_withInt_withJavaNetInetAddressArray_(JavaNetNetworkInterface *self, NSString *name, jint index, IOSObjectArray *addrs);

FOUNDATION_EXPORT JavaNetNetworkInterface *new_JavaNetNetworkInterface_initWithNSString_withInt_withJavaNetInetAddressArray_(NSString *name, jint index, IOSObjectArray *addrs) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaNetNetworkInterface *create_JavaNetNetworkInterface_initWithNSString_withInt_withJavaNetInetAddressArray_(NSString *name, jint index, IOSObjectArray *addrs);

FOUNDATION_EXPORT JavaNetNetworkInterface *JavaNetNetworkInterface_getByNameWithNSString_(NSString *name);

FOUNDATION_EXPORT JavaNetNetworkInterface *JavaNetNetworkInterface_getByIndexWithInt_(jint index);

FOUNDATION_EXPORT JavaNetNetworkInterface *JavaNetNetworkInterface_getByInetAddressWithJavaNetInetAddress_(JavaNetInetAddress *addr);

FOUNDATION_EXPORT id<JavaUtilEnumeration> JavaNetNetworkInterface_getNetworkInterfaces(void);

FOUNDATION_EXPORT JavaNetNetworkInterface *JavaNetNetworkInterface_getDefault(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaNetNetworkInterface)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaNetNetworkInterface")
