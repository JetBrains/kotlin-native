//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/net/Authenticator.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNetAuthenticator")
#ifdef RESTRICT_JavaNetAuthenticator
#define INCLUDE_ALL_JavaNetAuthenticator 0
#else
#define INCLUDE_ALL_JavaNetAuthenticator 1
#endif
#undef RESTRICT_JavaNetAuthenticator

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNetAuthenticator_) && (INCLUDE_ALL_JavaNetAuthenticator || defined(INCLUDE_JavaNetAuthenticator))
#define JavaNetAuthenticator_

@class JavaNetAuthenticator_RequestorType;
@class JavaNetInetAddress;
@class JavaNetPasswordAuthentication;
@class JavaNetURL;

/*!
 @brief The class Authenticator represents an object that knows how to obtain
  authentication for a network connection.Usually, it will do this
  by prompting the user for information.
 <p>
  Applications use this class by overriding <code>getPasswordAuthentication()</code>
  in a sub-class. This method will
  typically use the various getXXX() accessor methods to get information
  about the entity requesting authentication. It must then acquire a
  username and password either by interacting with the user or through
  some other non-interactive means. The credentials are then returned
  as a <code>PasswordAuthentication</code> return value. 
 <p>
  An instance of this concrete sub-class is then registered
  with the system by calling <code>setDefault(Authenticator)</code>.
  When authentication is required, the system will invoke one of the
  requestPasswordAuthentication() methods which in turn will call the
  getPasswordAuthentication() method of the registered object. 
 <p>
  All methods that request authentication have a default implementation
  that fails.
 - seealso: java.net.Authenticator#setDefault(java.net.Authenticator)
 - seealso: java.net.Authenticator#getPasswordAuthentication()
 @author Bill Foote
 @since 1.2
 */
@interface JavaNetAuthenticator : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Ask the authenticator that has been registered with the system
  for a password.
 <p>
  First, if there is a security manager, its <code>checkPermission</code>
  method is called with a 
 <code>NetPermission("requestPasswordAuthentication")</code> permission.
  This may result in a java.lang.SecurityException.
 @param addr The InetAddress of the site requesting authorization,              or null if not known.
 @param port the port for the requested connection
 @param protocol The protocol that's requesting the connection           (
 <code>java.net.Authenticator.getRequestingProtocol()</code> )
 @param prompt A prompt string for the user
 @param scheme The authentication scheme
 @return The username/password, or null if one can't be gotten.
 @throw SecurityException
 if a security manager exists and its
         <code>checkPermission</code> method doesn't allow
         the password authentication request.
 - seealso: SecurityManager#checkPermission
 - seealso: java.net.NetPermission
 */
+ (JavaNetPasswordAuthentication *)requestPasswordAuthenticationWithJavaNetInetAddress:(JavaNetInetAddress *)addr
                                                                               withInt:(jint)port
                                                                          withNSString:(NSString *)protocol
                                                                          withNSString:(NSString *)prompt
                                                                          withNSString:(NSString *)scheme;

/*!
 @brief Ask the authenticator that has been registered with the system
  for a password.This is the preferred method for requesting a password
  because the hostname can be provided in cases where the InetAddress
  is not available.
 <p>
  First, if there is a security manager, its <code>checkPermission</code>
  method is called with a 
 <code>NetPermission("requestPasswordAuthentication")</code> permission.
  This may result in a java.lang.SecurityException.
 @param host The hostname of the site requesting authentication.
 @param addr The InetAddress of the site requesting authentication,              or null if not known.
 @param port the port for the requested connection.
 @param protocol The protocol that's requesting the connection           (
 <code>java.net.Authenticator.getRequestingProtocol()</code> )
 @param prompt A prompt string for the user which identifies the authentication realm.
 @param scheme The authentication scheme
 @return The username/password, or null if one can't be gotten.
 @throw SecurityException
 if a security manager exists and its
         <code>checkPermission</code> method doesn't allow
         the password authentication request.
 - seealso: SecurityManager#checkPermission
 - seealso: java.net.NetPermission
 @since 1.4
 */
+ (JavaNetPasswordAuthentication *)requestPasswordAuthenticationWithNSString:(NSString *)host
                                                      withJavaNetInetAddress:(JavaNetInetAddress *)addr
                                                                     withInt:(jint)port
                                                                withNSString:(NSString *)protocol
                                                                withNSString:(NSString *)prompt
                                                                withNSString:(NSString *)scheme;

/*!
 @brief Ask the authenticator that has been registered with the system
  for a password.
 <p>
  First, if there is a security manager, its <code>checkPermission</code>
  method is called with a 
 <code>NetPermission("requestPasswordAuthentication")</code> permission.
  This may result in a java.lang.SecurityException.
 @param host The hostname of the site requesting authentication.
 @param addr The InetAddress of the site requesting authorization,              or null if not known.
 @param port the port for the requested connection
 @param protocol The protocol that's requesting the connection           (
 <code>java.net.Authenticator.getRequestingProtocol()</code> )
 @param prompt A prompt string for the user
 @param scheme The authentication scheme
 @param url The requesting URL that caused the authentication
 @param reqType The type (server or proxy) of the entity requesting               authentication.
 @return The username/password, or null if one can't be gotten.
 @throw SecurityException
 if a security manager exists and its
         <code>checkPermission</code> method doesn't allow
         the password authentication request.
 - seealso: SecurityManager#checkPermission
 - seealso: java.net.NetPermission
 @since 1.5
 */
+ (JavaNetPasswordAuthentication *)requestPasswordAuthenticationWithNSString:(NSString *)host
                                                      withJavaNetInetAddress:(JavaNetInetAddress *)addr
                                                                     withInt:(jint)port
                                                                withNSString:(NSString *)protocol
                                                                withNSString:(NSString *)prompt
                                                                withNSString:(NSString *)scheme
                                                              withJavaNetURL:(JavaNetURL *)url
                                      withJavaNetAuthenticator_RequestorType:(JavaNetAuthenticator_RequestorType *)reqType;

/*!
 @brief Sets the authenticator that will be used by the networking code
  when a proxy or an HTTP server asks for authentication.
 <p>
  First, if there is a security manager, its <code>checkPermission</code>
  method is called with a 
 <code>NetPermission("setDefaultAuthenticator")</code> permission.
  This may result in a java.lang.SecurityException.
 @param a The authenticator to be set. If a is <code>null</code>  then                   any previously set authenticator is removed.
 @throw SecurityException
 if a security manager exists and its
         <code>checkPermission</code> method doesn't allow
         setting the default authenticator.
 - seealso: SecurityManager#checkPermission
 - seealso: java.net.NetPermission
 */
+ (void)setDefaultWithJavaNetAuthenticator:(JavaNetAuthenticator *)a;

#pragma mark Protected

/*!
 @brief Called when password authorization is needed.Subclasses should
  override the default implementation, which returns null.
 @return The PasswordAuthentication collected from the
           user, or null if none is provided.
 */
- (JavaNetPasswordAuthentication *)getPasswordAuthentication;

/*!
 @brief Gets the <code>hostname</code> of the
  site or proxy requesting authentication, or <code>null</code>
  if not available.
 @return the hostname of the connection requiring authentication, or null
           if it's not available.
 @since 1.4
 */
- (NSString *)getRequestingHost;

/*!
 @brief Gets the port number for the requested connection.
 @return an <code>int</code> indicating the
  port for the requested connection.
 */
- (jint)getRequestingPort;

/*!
 @brief Gets the prompt string given by the requestor.
 @return the prompt string given by the requestor (realm for
           http requests)
 */
- (NSString *)getRequestingPrompt;

/*!
 @brief Give the protocol that's requesting the connection.Often this
  will be based on a URL, but in a future JDK it could be, for
  example, "SOCKS" for a password-protected SOCKS5 firewall.
 @return the protocol, optionally followed by "/version", where
           version is a version number.
 - seealso: java.net.URL#getProtocol()
 */
- (NSString *)getRequestingProtocol;

/*!
 @brief Gets the scheme of the requestor (the HTTP scheme
  for an HTTP firewall, for example).
 @return the scheme of the requestor
 */
- (NSString *)getRequestingScheme;

/*!
 @brief Gets the <code>InetAddress</code> of the
  site requesting authorization, or <code>null</code>
  if not available.
 @return the InetAddress of the site requesting authorization, or null
           if it's not available.
 */
- (JavaNetInetAddress *)getRequestingSite;

/*!
 @brief Returns the URL that resulted in this
  request for authentication.
 @since 1.5
 @return the requesting URL
 */
- (JavaNetURL *)getRequestingURL;

/*!
 @brief Returns whether the requestor is a Proxy or a Server.
 @since 1.5
 @return the authentication type of the requestor
 */
- (JavaNetAuthenticator_RequestorType *)getRequestorType;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNetAuthenticator)

FOUNDATION_EXPORT void JavaNetAuthenticator_init(JavaNetAuthenticator *self);

FOUNDATION_EXPORT void JavaNetAuthenticator_setDefaultWithJavaNetAuthenticator_(JavaNetAuthenticator *a);

FOUNDATION_EXPORT JavaNetPasswordAuthentication *JavaNetAuthenticator_requestPasswordAuthenticationWithJavaNetInetAddress_withInt_withNSString_withNSString_withNSString_(JavaNetInetAddress *addr, jint port, NSString *protocol, NSString *prompt, NSString *scheme);

FOUNDATION_EXPORT JavaNetPasswordAuthentication *JavaNetAuthenticator_requestPasswordAuthenticationWithNSString_withJavaNetInetAddress_withInt_withNSString_withNSString_withNSString_(NSString *host, JavaNetInetAddress *addr, jint port, NSString *protocol, NSString *prompt, NSString *scheme);

FOUNDATION_EXPORT JavaNetPasswordAuthentication *JavaNetAuthenticator_requestPasswordAuthenticationWithNSString_withJavaNetInetAddress_withInt_withNSString_withNSString_withNSString_withJavaNetURL_withJavaNetAuthenticator_RequestorType_(NSString *host, JavaNetInetAddress *addr, jint port, NSString *protocol, NSString *prompt, NSString *scheme, JavaNetURL *url, JavaNetAuthenticator_RequestorType *reqType);

J2OBJC_TYPE_LITERAL_HEADER(JavaNetAuthenticator)

#endif

#if !defined (JavaNetAuthenticator_RequestorType_) && (INCLUDE_ALL_JavaNetAuthenticator || defined(INCLUDE_JavaNetAuthenticator_RequestorType))
#define JavaNetAuthenticator_RequestorType_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, JavaNetAuthenticator_RequestorType_Enum) {
  JavaNetAuthenticator_RequestorType_Enum_PROXY = 0,
  JavaNetAuthenticator_RequestorType_Enum_SERVER = 1,
};

/*!
 @brief The type of the entity requesting authentication.
 @since 1.5
 */
@interface JavaNetAuthenticator_RequestorType : JavaLangEnum

@property (readonly, class, nonnull) JavaNetAuthenticator_RequestorType *PROXY NS_SWIFT_NAME(PROXY);
@property (readonly, class, nonnull) JavaNetAuthenticator_RequestorType *SERVER NS_SWIFT_NAME(SERVER);
+ (JavaNetAuthenticator_RequestorType * __nonnull)PROXY;

+ (JavaNetAuthenticator_RequestorType * __nonnull)SERVER;

#pragma mark Public

+ (JavaNetAuthenticator_RequestorType *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (JavaNetAuthenticator_RequestorType_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(JavaNetAuthenticator_RequestorType)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT JavaNetAuthenticator_RequestorType *JavaNetAuthenticator_RequestorType_values_[];

/*!
 @brief Entity requesting authentication is a HTTP proxy server.
 */
inline JavaNetAuthenticator_RequestorType *JavaNetAuthenticator_RequestorType_get_PROXY(void);
J2OBJC_ENUM_CONSTANT(JavaNetAuthenticator_RequestorType, PROXY)

/*!
 @brief Entity requesting authentication is a HTTP origin server.
 */
inline JavaNetAuthenticator_RequestorType *JavaNetAuthenticator_RequestorType_get_SERVER(void);
J2OBJC_ENUM_CONSTANT(JavaNetAuthenticator_RequestorType, SERVER)

FOUNDATION_EXPORT IOSObjectArray *JavaNetAuthenticator_RequestorType_values(void);

FOUNDATION_EXPORT JavaNetAuthenticator_RequestorType *JavaNetAuthenticator_RequestorType_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT JavaNetAuthenticator_RequestorType *JavaNetAuthenticator_RequestorType_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(JavaNetAuthenticator_RequestorType)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaNetAuthenticator")
