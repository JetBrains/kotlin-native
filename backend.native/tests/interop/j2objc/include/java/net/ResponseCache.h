//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/net/ResponseCache.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNetResponseCache")
#ifdef RESTRICT_JavaNetResponseCache
#define INCLUDE_ALL_JavaNetResponseCache 0
#else
#define INCLUDE_ALL_JavaNetResponseCache 1
#endif
#undef RESTRICT_JavaNetResponseCache

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNetResponseCache_) && (INCLUDE_ALL_JavaNetResponseCache || defined(INCLUDE_JavaNetResponseCache))
#define JavaNetResponseCache_

@class JavaNetCacheRequest;
@class JavaNetCacheResponse;
@class JavaNetURI;
@class JavaNetURLConnection;
@protocol JavaUtilMap;

/*!
 @brief Represents implementations of URLConnection caches.An instance of
  such a class can be registered with the system by doing
  ResponseCache.setDefault(ResponseCache), and the system will call
  this object in order to:
     <ul><li>store resource data which has been retrieved from an
             external source into the cache</li>
          <li>try to fetch a requested resource that may have been
             stored in the cache</li>
     </ul>
  The ResponseCache implementation decides which resources
  should be cached, and for how long they should be cached.
 If a
  request resource cannot be retrieved from the cache, then the
  protocol handlers will fetch the resource from its original
  location.
  The settings for URLConnection#useCaches controls whether the
  protocol is allowed to use a cached response.
  For more information on HTTP caching, see <a href="http://www.ietf.org/rfc/rfc2616.txt">
 <i>RFC&nbsp;2616: Hypertext
  Transfer Protocol -- HTTP/1.1</i></a>
 @author Yingxian Wang
 @since 1.5
 */
@interface JavaNetResponseCache : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Retrieve the cached response based on the requesting uri,
  request method and request headers.Typically this method is
  called by the protocol handler before it sends out the request
  to get the network resource.
 If a cached response is returned,
  that resource is used instead.
 @param uri a  <code> URI </code>  used to reference the requested
              network resource
 @param rqstMethod a  <code> String </code>  representing the request
              method
 @param rqstHeaders - a Map from request header             field names to lists of field values representing
              the current request headers
 @return a <code>CacheResponse</code> instance if available
           from cache, or null otherwise
 @throw IOExceptionif an I/O error occurs
 @throw IllegalArgumentExceptionif any one of the arguments is null
 - seealso: java.net.URLConnection#setUseCaches(boolean)
 - seealso: java.net.URLConnection#getUseCaches()
 - seealso: java.net.URLConnection#setDefaultUseCaches(boolean)
 - seealso: java.net.URLConnection#getDefaultUseCaches()
 */
- (JavaNetCacheResponse *)getWithJavaNetURI:(JavaNetURI *)uri
                               withNSString:(NSString *)rqstMethod
                            withJavaUtilMap:(id<JavaUtilMap>)rqstHeaders;

/*!
 @brief Gets the system-wide response cache.
 @throw SecurityException
 If a security manager has been installed and it denies 
 <code>NetPermission</code><tt>("getResponseCache")</tt>
 - seealso: #setDefault(ResponseCache)
 @return the system-wide <code>ResponseCache</code>
 @since 1.5
 */
+ (JavaNetResponseCache *)getDefault;

/*!
 @brief The protocol handler calls this method after a resource has
  been retrieved, and the ResponseCache must decide whether or
  not to store the resource in its cache.If the resource is to
  be cached, then put() must return a CacheRequest object which
  contains an OutputStream that the protocol handler will
  use to write the resource into the cache.
 If the resource is
  not to be cached, then put must return null.
 @param uri a  <code> URI </code>  used to reference the requested
              network resource
 @param conn - a URLConnection instance that is used to fetch             the response to be cached
 @return a <code>CacheRequest</code> for recording the
             response to be cached. Null return indicates that
             the caller does not intend to cache the response.
 @throw IOExceptionif an I/O error occurs
 @throw IllegalArgumentExceptionif any one of the arguments is
             null
 */
- (JavaNetCacheRequest *)putWithJavaNetURI:(JavaNetURI *)uri
                  withJavaNetURLConnection:(JavaNetURLConnection *)conn;

/*!
 @brief Sets (or unsets) the system-wide cache.
 Note: non-standard procotol handlers may ignore this setting.
 @param responseCache The response cache, or           
  <code> null </code>  to unset the cache.
 @throw SecurityException
 If a security manager has been installed and it denies 
 <code>NetPermission</code><tt>("setResponseCache")</tt>
 - seealso: #getDefault()
 @since 1.5
 */
+ (void)setDefaultWithJavaNetResponseCache:(JavaNetResponseCache *)responseCache;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNetResponseCache)

FOUNDATION_EXPORT void JavaNetResponseCache_init(JavaNetResponseCache *self);

FOUNDATION_EXPORT JavaNetResponseCache *JavaNetResponseCache_getDefault(void);

FOUNDATION_EXPORT void JavaNetResponseCache_setDefaultWithJavaNetResponseCache_(JavaNetResponseCache *responseCache);

J2OBJC_TYPE_LITERAL_HEADER(JavaNetResponseCache)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaNetResponseCache")
