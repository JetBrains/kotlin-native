//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/net/CookiePolicy.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNetCookiePolicy")
#ifdef RESTRICT_JavaNetCookiePolicy
#define INCLUDE_ALL_JavaNetCookiePolicy 0
#else
#define INCLUDE_ALL_JavaNetCookiePolicy 1
#endif
#undef RESTRICT_JavaNetCookiePolicy

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNetCookiePolicy_) && (INCLUDE_ALL_JavaNetCookiePolicy || defined(INCLUDE_JavaNetCookiePolicy))
#define JavaNetCookiePolicy_

@class JavaNetHttpCookie;
@class JavaNetURI;

/*!
 @brief CookiePolicy implementations decide which cookies should be accepted
  and which should be rejected.Three pre-defined policy implementations
  are provided, namely ACCEPT_ALL, ACCEPT_NONE and ACCEPT_ORIGINAL_SERVER.
 <p>See RFC 2965 sec. 3.3 and 7 for more detail.
 @author Edward Wang
 @since 1.6
 */
@protocol JavaNetCookiePolicy < JavaObject >

/*!
 @brief Will be called to see whether or not this cookie should be accepted.
 @param uri the URI to consult accept policy with
 @param cookie the HttpCookie object in question
 @return <code>true</code> if this cookie should be accepted;
                   otherwise, <code>false</code>
 */
- (jboolean)shouldAcceptWithJavaNetURI:(JavaNetURI *)uri
                 withJavaNetHttpCookie:(JavaNetHttpCookie *)cookie;

@end

@interface JavaNetCookiePolicy : NSObject
@property (readonly, class, strong) id<JavaNetCookiePolicy> ACCEPT_ALL NS_SWIFT_NAME(ACCEPT_ALL);
@property (readonly, class, strong) id<JavaNetCookiePolicy> ACCEPT_NONE NS_SWIFT_NAME(ACCEPT_NONE);
@property (readonly, class, strong) id<JavaNetCookiePolicy> ACCEPT_ORIGINAL_SERVER NS_SWIFT_NAME(ACCEPT_ORIGINAL_SERVER);

+ (id<JavaNetCookiePolicy>)ACCEPT_ALL;

+ (id<JavaNetCookiePolicy>)ACCEPT_NONE;

+ (id<JavaNetCookiePolicy>)ACCEPT_ORIGINAL_SERVER;

@end

J2OBJC_STATIC_INIT(JavaNetCookiePolicy)

/*!
 @brief One pre-defined policy which accepts all cookies.
 */
inline id<JavaNetCookiePolicy> JavaNetCookiePolicy_get_ACCEPT_ALL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaNetCookiePolicy> JavaNetCookiePolicy_ACCEPT_ALL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaNetCookiePolicy, ACCEPT_ALL, id<JavaNetCookiePolicy>)

/*!
 @brief One pre-defined policy which accepts no cookies.
 */
inline id<JavaNetCookiePolicy> JavaNetCookiePolicy_get_ACCEPT_NONE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaNetCookiePolicy> JavaNetCookiePolicy_ACCEPT_NONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaNetCookiePolicy, ACCEPT_NONE, id<JavaNetCookiePolicy>)

/*!
 @brief One pre-defined policy which only accepts cookies from original server.
 */
inline id<JavaNetCookiePolicy> JavaNetCookiePolicy_get_ACCEPT_ORIGINAL_SERVER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaNetCookiePolicy> JavaNetCookiePolicy_ACCEPT_ORIGINAL_SERVER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaNetCookiePolicy, ACCEPT_ORIGINAL_SERVER, id<JavaNetCookiePolicy>)

J2OBJC_TYPE_LITERAL_HEADER(JavaNetCookiePolicy)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaNetCookiePolicy")
