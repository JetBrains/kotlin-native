//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/net/DatagramPacket.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNetDatagramPacket")
#ifdef RESTRICT_JavaNetDatagramPacket
#define INCLUDE_ALL_JavaNetDatagramPacket 0
#else
#define INCLUDE_ALL_JavaNetDatagramPacket 1
#endif
#undef RESTRICT_JavaNetDatagramPacket

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNetDatagramPacket_) && (INCLUDE_ALL_JavaNetDatagramPacket || defined(INCLUDE_JavaNetDatagramPacket))
#define JavaNetDatagramPacket_

@class IOSByteArray;
@class JavaNetInetAddress;
@class JavaNetSocketAddress;

/*!
 @brief This class represents a datagram packet.
 <p>
  Datagram packets are used to implement a connectionless packet
  delivery service. Each message is routed from one machine to
  another based solely on information contained within that packet.
  Multiple packets sent from one machine to another might be routed
  differently, and might arrive in any order. Packet delivery is
  not guaranteed.
 @author Pavani Diwanji
 @author Benjamin Renaud
 @since JDK1.0
 */
@interface JavaNetDatagramPacket : NSObject {
 @public
  IOSByteArray *buf_;
  jint offset_;
  jint length_;
  jint bufLength_;
  JavaNetInetAddress *address_;
  jint port_;
}

#pragma mark Public

/*!
 @brief Constructs a <code>DatagramPacket</code> for receiving packets of
  length <code>length</code>.
 <p>
  The <code>length</code> argument must be less than or equal to 
 <code>buf.length</code>.
 @param buf buffer for holding the incoming datagram.
 @param length the number of bytes to read.
 */
- (instancetype __nonnull)initWithByteArray:(IOSByteArray *)buf
                                    withInt:(jint)length;

/*!
 @brief Constructs a datagram packet for sending packets of length 
 <code>length</code> to the specified port number on the specified
  host.The <code>length</code> argument must be less than or equal
  to <code>buf.length</code>.
 @param buf the packet data.
 @param length the packet length.
 @param address the destination address.
 @param port the destination port number.
 - seealso: java.net.InetAddress
 */
- (instancetype __nonnull)initWithByteArray:(IOSByteArray *)buf
                                    withInt:(jint)length
                     withJavaNetInetAddress:(JavaNetInetAddress *)address
                                    withInt:(jint)port;

/*!
 @brief Constructs a <code>DatagramPacket</code> for receiving packets of
  length <code>length</code>, specifying an offset into the buffer.
 <p>
  The <code>length</code> argument must be less than or equal to 
 <code>buf.length</code>.
 @param buf buffer for holding the incoming datagram.
 @param offset the offset for the buffer
 @param length the number of bytes to read.
 @since 1.2
 */
- (instancetype __nonnull)initWithByteArray:(IOSByteArray *)buf
                                    withInt:(jint)offset
                                    withInt:(jint)length;

/*!
 @brief Constructs a datagram packet for sending packets of length 
 <code>length</code> with offset <code>ioffset</code>to the
  specified port number on the specified host.The
  <code>length</code> argument must be less than or equal to 
 <code>buf.length</code>.
 @param buf the packet data.
 @param offset the packet data offset.
 @param length the packet data length.
 @param address the destination address.
 @param port the destination port number.
 - seealso: java.net.InetAddress
 @since 1.2
 */
- (instancetype __nonnull)initWithByteArray:(IOSByteArray *)buf
                                    withInt:(jint)offset
                                    withInt:(jint)length
                     withJavaNetInetAddress:(JavaNetInetAddress *)address
                                    withInt:(jint)port;

/*!
 @brief Constructs a datagram packet for sending packets of length 
 <code>length</code> with offset <code>ioffset</code>to the
  specified port number on the specified host.The
  <code>length</code> argument must be less than or equal to 
 <code>buf.length</code>.
 @param buf the packet data.
 @param offset the packet data offset.
 @param length the packet data length.
 @param address the destination socket address.
 @throw IllegalArgumentExceptionif address type is not supported
 - seealso: java.net.InetAddress
 @since 1.4
 */
- (instancetype __nonnull)initWithByteArray:(IOSByteArray *)buf
                                    withInt:(jint)offset
                                    withInt:(jint)length
                   withJavaNetSocketAddress:(JavaNetSocketAddress *)address;

/*!
 @brief Constructs a datagram packet for sending packets of length 
 <code>length</code> to the specified port number on the specified
  host.The <code>length</code> argument must be less than or equal
  to <code>buf.length</code>.
 @param buf the packet data.
 @param length the packet length.
 @param address the destination address.
 @throw IllegalArgumentExceptionif address type is not supported
 @since 1.4
 - seealso: java.net.InetAddress
 */
- (instancetype __nonnull)initWithByteArray:(IOSByteArray *)buf
                                    withInt:(jint)length
                   withJavaNetSocketAddress:(JavaNetSocketAddress *)address;

/*!
 @brief Returns the IP address of the machine to which this datagram is being
  sent or from which the datagram was received.
 @return the IP address of the machine to which this datagram is being
           sent or from which the datagram was received.
 - seealso: java.net.InetAddress
 - seealso: #setAddress(java.net.InetAddress)
 */
- (JavaNetInetAddress *)getAddress;

/*!
 @brief Returns the data buffer.The data received or the data to be sent
  starts from the <code>offset</code> in the buffer,
  and runs for <code>length</code> long.
 @return the buffer used to receive or  send data
 - seealso: #setData(byte[], int, int)
 */
- (IOSByteArray *)getData;

/*!
 @brief Returns the length of the data to be sent or the length of the
  data received.
 @return the length of the data to be sent or the length of the
           data received.
 - seealso: #setLength(int)
 */
- (jint)getLength;

/*!
 @brief Returns the offset of the data to be sent or the offset of the
  data received.
 @return the offset of the data to be sent or the offset of the
           data received.
 @since 1.2
 */
- (jint)getOffset;

/*!
 @brief Returns the port number on the remote host to which this datagram is
  being sent or from which the datagram was received.
 @return the port number on the remote host to which this datagram is
           being sent or from which the datagram was received.
 - seealso: #setPort(int)
 */
- (jint)getPort;

/*!
 @brief Gets the SocketAddress (usually IP address + port number) of the remote
  host that this packet is being sent to or is coming from.
 @return the <code>SocketAddress</code>
 @since 1.4
 - seealso: #setSocketAddress
 */
- (JavaNetSocketAddress *)getSocketAddress;

/*!
 @brief Sets the IP address of the machine to which this datagram
  is being sent.
 @param iaddr the  <code> InetAddress </code>
 @since JDK1.1
 - seealso: #getAddress()
 */
- (void)setAddressWithJavaNetInetAddress:(JavaNetInetAddress *)iaddr;

/*!
 @brief Set the data buffer for this packet.With the offset of
  this DatagramPacket set to 0, and the length set to
  the length of <code>buf</code>.
 @param buf the buffer to set for this packet.
 @throw NullPointerExceptionif the argument is null.
 - seealso: #getLength
 - seealso: #getData
 @since JDK1.1
 */
- (void)setDataWithByteArray:(IOSByteArray *)buf;

/*!
 @brief Set the data buffer for this packet.This sets the
  data, length and offset of the packet.
 @param buf the buffer to set for this packet
 @param offset the offset into the data
 @param length the length of the data        and/or the length of the buffer used to receive data
 @throw NullPointerExceptionif the argument is null
 - seealso: #getData
 - seealso: #getOffset
 - seealso: #getLength
 @since 1.2
 */
- (void)setDataWithByteArray:(IOSByteArray *)buf
                     withInt:(jint)offset
                     withInt:(jint)length;

/*!
 @brief Set the length for this packet.The length of the packet is
  the number of bytes from the packet's data buffer that will be
  sent, or the number of bytes of the packet's data buffer that
  will be used for receiving data.
 The length must be lesser or
  equal to the offset plus the length of the packet's buffer.
 @param length the length to set for this packet.
 @throw IllegalArgumentExceptionif the length is negative
  of if the length is greater than the packet's data buffer
  length.
 - seealso: #getLength
 - seealso: #setData
 @since JDK1.1
 */
- (void)setLengthWithInt:(jint)length;

/*!
 @brief Sets the port number on the remote host to which this datagram
  is being sent.
 @param iport the port number
 @since JDK1.1
 - seealso: #getPort()
 */
- (void)setPortWithInt:(jint)iport;

/*!
 @brief Sets 'length' without changing 'userSuppliedLength', after receiving a packet.
 */
- (void)setReceivedLengthWithInt:(jint)length;

/*!
 @brief Sets the SocketAddress (usually IP address + port number) of the remote
  host to which this datagram is being sent.
 @param address the  <code> SocketAddress </code>
 @throw IllegalArgumentExceptionif address is null or is a
           SocketAddress subclass not supported by this socket
 @since 1.4
 - seealso: #getSocketAddress
 */
- (void)setSocketAddressWithJavaNetSocketAddress:(JavaNetSocketAddress *)address;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(JavaNetDatagramPacket)

J2OBJC_FIELD_SETTER(JavaNetDatagramPacket, buf_, IOSByteArray *)
J2OBJC_FIELD_SETTER(JavaNetDatagramPacket, address_, JavaNetInetAddress *)

FOUNDATION_EXPORT void JavaNetDatagramPacket_initWithByteArray_withInt_withInt_(JavaNetDatagramPacket *self, IOSByteArray *buf, jint offset, jint length);

FOUNDATION_EXPORT JavaNetDatagramPacket *new_JavaNetDatagramPacket_initWithByteArray_withInt_withInt_(IOSByteArray *buf, jint offset, jint length) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaNetDatagramPacket *create_JavaNetDatagramPacket_initWithByteArray_withInt_withInt_(IOSByteArray *buf, jint offset, jint length);

FOUNDATION_EXPORT void JavaNetDatagramPacket_initWithByteArray_withInt_(JavaNetDatagramPacket *self, IOSByteArray *buf, jint length);

FOUNDATION_EXPORT JavaNetDatagramPacket *new_JavaNetDatagramPacket_initWithByteArray_withInt_(IOSByteArray *buf, jint length) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaNetDatagramPacket *create_JavaNetDatagramPacket_initWithByteArray_withInt_(IOSByteArray *buf, jint length);

FOUNDATION_EXPORT void JavaNetDatagramPacket_initWithByteArray_withInt_withInt_withJavaNetInetAddress_withInt_(JavaNetDatagramPacket *self, IOSByteArray *buf, jint offset, jint length, JavaNetInetAddress *address, jint port);

FOUNDATION_EXPORT JavaNetDatagramPacket *new_JavaNetDatagramPacket_initWithByteArray_withInt_withInt_withJavaNetInetAddress_withInt_(IOSByteArray *buf, jint offset, jint length, JavaNetInetAddress *address, jint port) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaNetDatagramPacket *create_JavaNetDatagramPacket_initWithByteArray_withInt_withInt_withJavaNetInetAddress_withInt_(IOSByteArray *buf, jint offset, jint length, JavaNetInetAddress *address, jint port);

FOUNDATION_EXPORT void JavaNetDatagramPacket_initWithByteArray_withInt_withInt_withJavaNetSocketAddress_(JavaNetDatagramPacket *self, IOSByteArray *buf, jint offset, jint length, JavaNetSocketAddress *address);

FOUNDATION_EXPORT JavaNetDatagramPacket *new_JavaNetDatagramPacket_initWithByteArray_withInt_withInt_withJavaNetSocketAddress_(IOSByteArray *buf, jint offset, jint length, JavaNetSocketAddress *address) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaNetDatagramPacket *create_JavaNetDatagramPacket_initWithByteArray_withInt_withInt_withJavaNetSocketAddress_(IOSByteArray *buf, jint offset, jint length, JavaNetSocketAddress *address);

FOUNDATION_EXPORT void JavaNetDatagramPacket_initWithByteArray_withInt_withJavaNetInetAddress_withInt_(JavaNetDatagramPacket *self, IOSByteArray *buf, jint length, JavaNetInetAddress *address, jint port);

FOUNDATION_EXPORT JavaNetDatagramPacket *new_JavaNetDatagramPacket_initWithByteArray_withInt_withJavaNetInetAddress_withInt_(IOSByteArray *buf, jint length, JavaNetInetAddress *address, jint port) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaNetDatagramPacket *create_JavaNetDatagramPacket_initWithByteArray_withInt_withJavaNetInetAddress_withInt_(IOSByteArray *buf, jint length, JavaNetInetAddress *address, jint port);

FOUNDATION_EXPORT void JavaNetDatagramPacket_initWithByteArray_withInt_withJavaNetSocketAddress_(JavaNetDatagramPacket *self, IOSByteArray *buf, jint length, JavaNetSocketAddress *address);

FOUNDATION_EXPORT JavaNetDatagramPacket *new_JavaNetDatagramPacket_initWithByteArray_withInt_withJavaNetSocketAddress_(IOSByteArray *buf, jint length, JavaNetSocketAddress *address) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaNetDatagramPacket *create_JavaNetDatagramPacket_initWithByteArray_withInt_withJavaNetSocketAddress_(IOSByteArray *buf, jint length, JavaNetSocketAddress *address);

J2OBJC_TYPE_LITERAL_HEADER(JavaNetDatagramPacket)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaNetDatagramPacket")
