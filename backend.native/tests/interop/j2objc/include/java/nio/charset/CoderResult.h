//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/nio/charset/CoderResult.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNioCharsetCoderResult")
#ifdef RESTRICT_JavaNioCharsetCoderResult
#define INCLUDE_ALL_JavaNioCharsetCoderResult 0
#else
#define INCLUDE_ALL_JavaNioCharsetCoderResult 1
#endif
#undef RESTRICT_JavaNioCharsetCoderResult

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNioCharsetCoderResult_) && (INCLUDE_ALL_JavaNioCharsetCoderResult || defined(INCLUDE_JavaNioCharsetCoderResult))
#define JavaNioCharsetCoderResult_

/*!
 @brief A description of the result state of a coder.
 <p> A charset coder, that is, either a decoder or an encoder, consumes bytes
  (or characters) from an input buffer, translates them, and writes the
  resulting characters (or bytes) to an output buffer.  A coding process
  terminates for one of four categories of reasons, which are described by
  instances of this class: 
 <ul>
    <li><p> <i>Underflow</i> is reported when there is no more input to be
    processed, or there is insufficient input and additional input is
    required.  This condition is represented by the unique result object   
 <code>UNDERFLOW</code>, whose <code>isUnderflow</code> method
    returns <tt>true</tt>.  </p></li>
    <li><p> <i>Overflow</i> is reported when there is insufficient room
    remaining in the output buffer.  This condition is represented by the
    unique result object <code>OVERFLOW</code>, whose <code>isOverflow</code>
  method returns <tt>true</tt>.  </p></li>
    <li><p> A <i>malformed-input error</i> is reported when a sequence of
    input units is not well-formed.  Such errors are described by instances of
    this class whose <code>isMalformed</code> method returns
    <tt>true</tt> and whose <code>length</code> method returns the length
    of the malformed sequence.  There is one unique instance of this class for
    all malformed-input errors of a given length.  </p></li>
    <li><p> An <i>unmappable-character error</i> is reported when a sequence
    of input units denotes a character that cannot be represented in the
    output charset.  Such errors are described by instances of this class
    whose <code>isUnmappable</code> method returns <tt>true</tt> and
    whose <code>length</code> method returns the length of the input
    sequence denoting the unmappable character.  There is one unique instance
    of this class for all unmappable-character errors of a given length.   
 </p></li>
  
 </ul>
  
 <p> For convenience, the <code>isError</code> method returns <tt>true</tt>
  for result objects that describe malformed-input and unmappable-character
  errors but <tt>false</tt> for those that describe underflow or overflow
  conditions.  </p>
 @author Mark Reinhold
 @author JSR-51 Expert Group
 @since 1.4
 */
@interface JavaNioCharsetCoderResult : NSObject
@property (readonly, class, strong) JavaNioCharsetCoderResult *UNDERFLOW_ NS_SWIFT_NAME(UNDERFLOW_);
@property (readonly, class, strong) JavaNioCharsetCoderResult *OVERFLOW_ NS_SWIFT_NAME(OVERFLOW_);

+ (JavaNioCharsetCoderResult *)UNDERFLOW_;

+ (JavaNioCharsetCoderResult *)OVERFLOW_;

#pragma mark Public

/*!
 @brief Tells whether or not this object describes an error condition.
 @return <tt>true</tt> if, and only if, this object denotes either a
           malformed-input error or an unmappable-character error
 */
- (jboolean)isError;

/*!
 @brief Tells whether or not this object describes a malformed-input error.
 @return <tt>true</tt> if, and only if, this object denotes a
           malformed-input error
 */
- (jboolean)isMalformed;

/*!
 @brief Tells whether or not this object describes an overflow condition.
 @return <tt>true</tt> if, and only if, this object denotes overflow
 */
- (jboolean)isOverflow;

/*!
 @brief Tells whether or not this object describes an underflow condition.
 @return <tt>true</tt> if, and only if, this object denotes underflow
 */
- (jboolean)isUnderflow;

/*!
 @brief Tells whether or not this object describes an unmappable-character
  error.
 @return <tt>true</tt> if, and only if, this object denotes an
           unmappable-character error
 */
- (jboolean)isUnmappable;

/*!
 @brief Returns the length of the erroneous input described by this
  object&nbsp;&nbsp;<i>(optional operation)</i>.
 @return The length of the erroneous input, a positive integer
 @throw UnsupportedOperationException
 If this object does not describe an error condition, that is,
           if the <code>isError</code> does not return <tt>true</tt>
 */
- (jint)length;

/*!
 @brief Static factory method that returns the unique object describing a
  malformed-input error of the given length.
 @param length The given length
 @return The requested coder-result object
 */
+ (JavaNioCharsetCoderResult *)malformedForLengthWithInt:(jint)length;

/*!
 @brief Throws an exception appropriate to the result described by this object.
 @throw BufferUnderflowException
 If this object is <code>UNDERFLOW</code>
 @throw BufferOverflowException
 If this object is <code>OVERFLOW</code>
 @throw MalformedInputException
 If this object represents a malformed-input error; the
           exception's length value will be that of this object
 @throw UnmappableCharacterException
 If this object represents an unmappable-character error; the
           exceptions length value will be that of this object
 */
- (void)throwException;

/*!
 @brief Returns a string describing this coder result.
 @return A descriptive string
 */
- (NSString *)description;

/*!
 @brief Static factory method that returns the unique result object describing
  an unmappable-character error of the given length.
 @param length The given length
 @return The requested coder-result object
 */
+ (JavaNioCharsetCoderResult *)unmappableForLengthWithInt:(jint)length;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(JavaNioCharsetCoderResult)

/*!
 @brief Result object indicating underflow, meaning that either the input buffer
  has been completely consumed or, if the input buffer is not yet empty,
  that additional input is required.
 */
inline JavaNioCharsetCoderResult *JavaNioCharsetCoderResult_get_UNDERFLOW(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaNioCharsetCoderResult *JavaNioCharsetCoderResult_UNDERFLOW;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaNioCharsetCoderResult, UNDERFLOW, JavaNioCharsetCoderResult *)

/*!
 @brief Result object indicating overflow, meaning that there is insufficient
  room in the output buffer.
 */
inline JavaNioCharsetCoderResult *JavaNioCharsetCoderResult_get_OVERFLOW(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaNioCharsetCoderResult *JavaNioCharsetCoderResult_OVERFLOW;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaNioCharsetCoderResult, OVERFLOW, JavaNioCharsetCoderResult *)

FOUNDATION_EXPORT JavaNioCharsetCoderResult *JavaNioCharsetCoderResult_malformedForLengthWithInt_(jint length);

FOUNDATION_EXPORT JavaNioCharsetCoderResult *JavaNioCharsetCoderResult_unmappableForLengthWithInt_(jint length);

J2OBJC_TYPE_LITERAL_HEADER(JavaNioCharsetCoderResult)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaNioCharsetCoderResult")
