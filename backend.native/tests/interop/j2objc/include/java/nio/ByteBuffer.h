//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/nio/ByteBuffer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNioByteBuffer")
#ifdef RESTRICT_JavaNioByteBuffer
#define INCLUDE_ALL_JavaNioByteBuffer 0
#else
#define INCLUDE_ALL_JavaNioByteBuffer 1
#endif
#undef RESTRICT_JavaNioByteBuffer

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNioByteBuffer_) && (INCLUDE_ALL_JavaNioByteBuffer || defined(INCLUDE_JavaNioByteBuffer))
#define JavaNioByteBuffer_

#define RESTRICT_JavaNioBuffer 1
#define INCLUDE_JavaNioBuffer 1
#include "java/nio/Buffer.h"

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "java/lang/Comparable.h"

@class IOSByteArray;
@class IOSCharArray;
@class IOSDoubleArray;
@class IOSFloatArray;
@class IOSIntArray;
@class IOSLongArray;
@class IOSShortArray;
@class JavaNioByteOrder;
@class JavaNioCharBuffer;
@class JavaNioDoubleBuffer;
@class JavaNioFloatBuffer;
@class JavaNioIntBuffer;
@class JavaNioLongBuffer;
@class JavaNioShortBuffer;

/*!
 @brief A byte buffer.
 <p> This class defines six categories of operations upon
  byte buffers: 
 <ul>
    <li><p> Absolute and relative <code><i>get</i></code> and
    <code><i>put</i></code> methods that read and write
    single bytes; </p></li>
    <li><p> Relative <code><i>bulk get</i></code>
    methods that transfer contiguous sequences of bytes from this buffer
    into an array; </p></li>
    <li><p> Relative <code><i>bulk put</i></code>
    methods that transfer contiguous sequences of bytes from a
    byte array or some other byte
    buffer into this buffer; </p></li>
    <li><p> Absolute and relative <code><i>get</i></code>
    and <code><i>put</i></code> methods that read and
    write values of other primitive types, translating them to and from
    sequences of bytes in a particular byte order; </p></li>
    <li><p> Methods for creating <i><a href="#views">view buffers</a></i>,
    which allow a byte buffer to be viewed as a buffer containing values of
    some other primitive type; and </p></li>
    <li><p> Methods for <code>compacting</code>, <code>duplicating</code>
 , and <code>slicing</code>
    a byte buffer.  </p></li>
  
 </ul>
  
 <p> Byte buffers can be created either by <code><i>allocation</i></code>
 , which allocates space for the buffer's
  content, or by <code><i>wrapping</i></code> an
  existing byte array  into a buffer. 
 <a name="direct"></a>
  <h2> Direct <i>vs.</i> non-direct buffers </h2>
  
 <p> A byte buffer is either <i>direct</i> or <i>non-direct</i>.  Given a
  direct byte buffer, the Java virtual machine will make a best effort to
  perform native I/O operations directly upon it.  That is, it will attempt to
  avoid copying the buffer's content to (or from) an intermediate buffer
  before (or after) each invocation of one of the underlying operating
  system's native I/O operations. 
 <p> A direct byte buffer may be created by invoking the <code>allocateDirect</code>
  factory method of this class.  The
  buffers returned by this method typically have somewhat higher allocation
  and deallocation costs than non-direct buffers.  The contents of direct
  buffers may reside outside of the normal garbage-collected heap, and so
  their impact upon the memory footprint of an application might not be
  obvious.  It is therefore recommended that direct buffers be allocated
  primarily for large, long-lived buffers that are subject to the underlying
  system's native I/O operations.  In general it is best to allocate direct
  buffers only when they yield a measureable gain in program performance. 
 <p> A direct byte buffer may also be created by <code>mapping</code>
  a region of a file
  directly into memory.  An implementation of the Java platform may optionally
  support the creation of direct byte buffers from native code via JNI.  If an
  instance of one of these kinds of buffers refers to an inaccessible region
  of memory then an attempt to access that region will not change the buffer's
  content and will cause an unspecified exception to be thrown either at the
  time of the access or at some later time. 
 <p> Whether a byte buffer is direct or non-direct may be determined by
  invoking its <code>isDirect</code> method.  This method is provided so
  that explicit buffer management can be done in performance-critical code. 
 <a name="bin"></a>
  <h2> Access to binary data </h2>
  
 <p> This class defines methods for reading and writing values of all other
  primitive types, except <tt>boolean</tt>.  Primitive values are translated
  to (or from) sequences of bytes according to the buffer's current byte
  order, which may be retrieved and modified via the <code>order</code>
  methods.  Specific byte orders are represented by instances of the <code>ByteOrder</code>
  class.  The initial order of a byte buffer is always <code>BIG_ENDIAN</code>
 .
  
 <p> For access to heterogeneous binary data, that is, sequences of values of
  different types, this class defines a family of absolute and relative 
 <i>get</i> and <i>put</i> methods for each type.  For 32-bit floating-point
  values, for example, this class defines: 
 <blockquote>@code

  float  <code>getFloat()</code>
  float  <code>getFloat(int index)</code>
   void  <code>putFloat(float f)</code>
   void  <code>putFloat(int index, float f)</code>
@endcode</blockquote>
  
 <p> Corresponding methods are defined for the types <tt>char</tt>,
  <tt>short</tt>, <tt>int</tt>, <tt>long</tt>, and <tt>double</tt>.  The index
  parameters of the absolute <i>get</i> and <i>put</i> methods are in terms of
  bytes rather than of the type being read or written. 
 <a name="views"></a>
  
 <p> For access to homogeneous binary data, that is, sequences of values of
  the same type, this class defines methods that can create <i>views</i> of a
  given byte buffer.  A <i>view buffer</i> is simply another buffer whose
  content is backed by the byte buffer.  Changes to the byte buffer's content
  will be visible in the view buffer, and vice versa; the two buffers'
  position, limit, and mark values are independent.  The <code>asFloatBuffer</code>
  method, for example, creates an instance of
  the <code>FloatBuffer</code> class that is backed by the byte buffer upon which
  the method is invoked.  Corresponding view-creation methods are defined for
  the types <tt>char</tt>, <tt>short</tt>, <tt>int</tt>, <tt>long</tt>, and 
 <tt>double</tt>.
  
 <p> View buffers have three important advantages over the families of
  type-specific <i>get</i> and <i>put</i> methods described above: 
 <ul>
    <li><p> A view buffer is indexed not in terms of bytes but rather in terms
    of the type-specific size of its values;  </p></li>
    <li><p> A view buffer provides relative bulk <i>get</i> and <i>put</i>
    methods that can transfer contiguous sequences of values between a buffer
    and an array or some other buffer of the same type; and  </p></li>
    <li><p> A view buffer is potentially much more efficient because it will
    be direct if, and only if, its backing byte buffer is direct.  </p></li>
  
 </ul>
  
 <p> The byte order of a view buffer is fixed to be that of its byte buffer
  at the time that the view is created.  </p>
  
 <h2> Invocation chaining </h2>
  
 <p> Methods in this class that do not otherwise have a value to return are
  specified to return the buffer upon which they are invoked.  This allows
  method invocations to be chained.
  The sequence of statements 
 <blockquote>@code

  bb.putInt(0xCAFEBABE);
  bb.putShort(3);
  bb.putShort(45);
@endcode</blockquote>
  can, for example, be replaced by the single statement 
 <blockquote>@code

  bb.putInt(0xCAFEBABE).putShort(3).putShort(45);
@endcode</blockquote>
 @author Mark Reinhold
 @author JSR-51 Expert Group
 @since 1.4
 */
@interface JavaNioByteBuffer : JavaNioBuffer < JavaLangComparable > {
 @public
  IOSByteArray *hb_;
  jint offset_;
  jboolean isReadOnly_;
  jboolean bigEndian_;
  jboolean nativeByteOrder_;
}

#pragma mark Public

/*!
 @brief Allocates a new byte buffer.
 <p> The new buffer's position will be zero, its limit will be its
  capacity, its mark will be undefined, and each of its elements will be
  initialized to zero.  It will have a <code>backing array</code>,
  and its <code>array offset</code> will be zero.
 @param capacity The new buffer's capacity, in bytes
 @return The new byte buffer
 @throw IllegalArgumentException
 If the <tt>capacity</tt> is a negative integer
 */
+ (JavaNioByteBuffer *)allocateWithInt:(jint)capacity OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Allocates a new direct byte buffer.
 <p> The new buffer's position will be zero, its limit will be its
  capacity, its mark will be undefined, and each of its elements will be
  initialized to zero.  Whether or not it has a 
 <code>backing array</code> is unspecified.
 @param capacity The new buffer's capacity, in bytes
 @return The new byte buffer
 @throw IllegalArgumentException
 If the <tt>capacity</tt> is a negative integer
 */
+ (JavaNioByteBuffer *)allocateDirectWithInt:(jint)capacity OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns the byte array that backs this
  buffer&nbsp;&nbsp;<i>(optional operation)</i>.
 <p> Modifications to this buffer's content will cause the returned
  array's content to be modified, and vice versa. 
 <p> Invoke the <code>hasArray</code> method before invoking this
  method in order to ensure that this buffer has an accessible backing
  array.  </p>
 @return The array that backs this buffer
 @throw ReadOnlyBufferException
 If this buffer is backed by an array but is read-only
 @throw UnsupportedOperationException
 If this buffer is not backed by an accessible array
 */
- (IOSByteArray *)array;

/*!
 @brief Returns the offset within this buffer's backing array of the first
  element of the buffer&nbsp;&nbsp;<i>(optional operation)</i>.
 <p> If this buffer is backed by an array then buffer position <i>p</i>
  corresponds to array index <i>p</i>&nbsp;+&nbsp;<tt>arrayOffset()</tt>.
  
 <p> Invoke the <code>hasArray</code> method before invoking this
  method in order to ensure that this buffer has an accessible backing
  array.  </p>
 @return The offset within this buffer's array
           of the first element of the buffer
 @throw ReadOnlyBufferException
 If this buffer is backed by an array but is read-only
 @throw UnsupportedOperationException
 If this buffer is not backed by an accessible array
 */
- (jint)arrayOffset;

/*!
 @brief Creates a view of this byte buffer as a char buffer.
 <p> The content of the new buffer will start at this buffer's current
  position.  Changes to this buffer's content will be visible in the new
  buffer, and vice versa; the two buffers' position, limit, and mark
  values will be independent. 
 <p> The new buffer's position will be zero, its capacity and its limit
  will be the number of bytes remaining in this buffer divided by
  two, and its mark will be undefined.  The new buffer will be direct
  if, and only if, this buffer is direct, and it will be read-only if, and
  only if, this buffer is read-only.  </p>
 @return A new char buffer
 */
- (JavaNioCharBuffer *)asCharBuffer;

/*!
 @brief Creates a view of this byte buffer as a double buffer.
 <p> The content of the new buffer will start at this buffer's current
  position.  Changes to this buffer's content will be visible in the new
  buffer, and vice versa; the two buffers' position, limit, and mark
  values will be independent. 
 <p> The new buffer's position will be zero, its capacity and its limit
  will be the number of bytes remaining in this buffer divided by
  eight, and its mark will be undefined.  The new buffer will be direct
  if, and only if, this buffer is direct, and it will be read-only if, and
  only if, this buffer is read-only.  </p>
 @return A new double buffer
 */
- (JavaNioDoubleBuffer *)asDoubleBuffer;

/*!
 @brief Creates a view of this byte buffer as a float buffer.
 <p> The content of the new buffer will start at this buffer's current
  position.  Changes to this buffer's content will be visible in the new
  buffer, and vice versa; the two buffers' position, limit, and mark
  values will be independent. 
 <p> The new buffer's position will be zero, its capacity and its limit
  will be the number of bytes remaining in this buffer divided by
  four, and its mark will be undefined.  The new buffer will be direct
  if, and only if, this buffer is direct, and it will be read-only if, and
  only if, this buffer is read-only.  </p>
 @return A new float buffer
 */
- (JavaNioFloatBuffer *)asFloatBuffer;

/*!
 @brief Creates a view of this byte buffer as an int buffer.
 <p> The content of the new buffer will start at this buffer's current
  position.  Changes to this buffer's content will be visible in the new
  buffer, and vice versa; the two buffers' position, limit, and mark
  values will be independent. 
 <p> The new buffer's position will be zero, its capacity and its limit
  will be the number of bytes remaining in this buffer divided by
  four, and its mark will be undefined.  The new buffer will be direct
  if, and only if, this buffer is direct, and it will be read-only if, and
  only if, this buffer is read-only.  </p>
 @return A new int buffer
 */
- (JavaNioIntBuffer *)asIntBuffer;

/*!
 @brief Creates a view of this byte buffer as a long buffer.
 <p> The content of the new buffer will start at this buffer's current
  position.  Changes to this buffer's content will be visible in the new
  buffer, and vice versa; the two buffers' position, limit, and mark
  values will be independent. 
 <p> The new buffer's position will be zero, its capacity and its limit
  will be the number of bytes remaining in this buffer divided by
  eight, and its mark will be undefined.  The new buffer will be direct
  if, and only if, this buffer is direct, and it will be read-only if, and
  only if, this buffer is read-only.  </p>
 @return A new long buffer
 */
- (JavaNioLongBuffer *)asLongBuffer;

/*!
 @brief Creates a new, read-only byte buffer that shares this buffer's
  content.
 <p> The content of the new buffer will be that of this buffer.  Changes
  to this buffer's content will be visible in the new buffer; the new
  buffer itself, however, will be read-only and will not allow the shared
  content to be modified.  The two buffers' position, limit, and mark
  values will be independent. 
 <p> The new buffer's capacity, limit, position, and mark values will be
  identical to those of this buffer. 
 <p> If this buffer is itself read-only then this method behaves in
  exactly the same way as the <code>duplicate</code> method.  </p>
 @return The new, read-only byte buffer
 */
- (JavaNioByteBuffer *)asReadOnlyBuffer;

/*!
 @brief Creates a view of this byte buffer as a short buffer.
 <p> The content of the new buffer will start at this buffer's current
  position.  Changes to this buffer's content will be visible in the new
  buffer, and vice versa; the two buffers' position, limit, and mark
  values will be independent. 
 <p> The new buffer's position will be zero, its capacity and its limit
  will be the number of bytes remaining in this buffer divided by
  two, and its mark will be undefined.  The new buffer will be direct
  if, and only if, this buffer is direct, and it will be read-only if, and
  only if, this buffer is read-only.  </p>
 @return A new short buffer
 */
- (JavaNioShortBuffer *)asShortBuffer;

- (JavaNioBuffer *)clear;

/*!
 @brief Compacts this buffer&nbsp;&nbsp;<i>(optional operation)</i>.
 <p> The bytes between the buffer's current position and its limit,
  if any, are copied to the beginning of the buffer.  That is, the
  byte at index <i>p</i>&nbsp;=&nbsp;<tt>position()</tt> is copied
  to index zero, the byte at index <i>p</i>&nbsp;+&nbsp;1 is copied
  to index one, and so forth until the byte at index 
 <tt>limit()</tt>&nbsp;-&nbsp;1 is copied to index 
 <i>n</i>&nbsp;=&nbsp;<tt>limit()</tt>&nbsp;-&nbsp;<tt>1</tt>&nbsp;-&nbsp;<i>p</i>.
  The buffer's position is then set to <i>n+1</i> and its limit is set to
  its capacity.  The mark, if defined, is discarded. 
 <p> The buffer's position is set to the number of bytes copied,
  rather than to zero, so that an invocation of this method can be
  followed immediately by an invocation of another relative <i>put</i>
  method. </p>
  
 <p> Invoke this method after writing data from a buffer in case the
  write was incomplete.  The following loop, for example, copies bytes
  from one channel to another via the buffer <tt>buf</tt>:
  
 <blockquote>@code
  buf.clear();          // Prepare buffer for use
    while (in.read(buf) >= 0 || buf.position != 0) {
        buf.flip();
        out.write(buf);
        buf.compact();    // In case of partial write
    } 
 
@endcode</blockquote>
 @return This buffer
 @throw ReadOnlyBufferException
 If this buffer is read-only
 */
- (JavaNioByteBuffer *)compact;

/*!
 @brief Compares this buffer to another.
 <p> Two byte buffers are compared by comparing their sequences of
  remaining elements lexicographically, without regard to the starting
  position of each sequence within its corresponding buffer.
  Pairs of <code>byte</code> elements are compared as if by invoking 
 <code>Byte.compare(byte,byte)</code>.
  
 <p> A byte buffer is not comparable to any other type of object.
 @return A negative integer, zero, or a positive integer as this buffer
           is less than, equal to, or greater than the given buffer
 */
- (jint)compareToWithId:(JavaNioByteBuffer *)that;

/*!
 @brief Creates a new byte buffer that shares this buffer's content.
 <p> The content of the new buffer will be that of this buffer.  Changes
  to this buffer's content will be visible in the new buffer, and vice
  versa; the two buffers' position, limit, and mark values will be
  independent. 
 <p> The new buffer's capacity, limit, position, and mark values will be
  identical to those of this buffer.  The new buffer will be direct if,
  and only if, this buffer is direct, and it will be read-only if, and
  only if, this buffer is read-only.  </p>
 @return The new byte buffer
 */
- (JavaNioByteBuffer *)duplicate;

/*!
 @brief Tells whether or not this buffer is equal to another object.
 <p> Two byte buffers are equal if, and only if, 
 <ol>
    
 <li><p> They have the same element type,  </p></li>
    
 <li><p> They have the same number of remaining elements, and
    </p></li>
    
 <li><p> The two sequences of remaining elements, considered
    independently of their starting positions, are pointwise equal.   
 </p></li>
  
 </ol>
  
 <p> A byte buffer is not equal to any other type of object.  </p>
 @param ob The object to which this buffer is to be compared
 @return <tt>true</tt> if, and only if, this buffer is equal to the
            given object
 */
- (jboolean)isEqual:(id)ob;

- (JavaNioBuffer *)flip;

/*!
 @brief Relative <i>get</i> method.Reads the byte at this buffer's
  current position, and then increments the position.
 @return The byte at the buffer's current position
 @throw BufferUnderflowException
 If the buffer's current position is not smaller than its limit
 */
- (jbyte)get;

/*!
 @brief Relative bulk <i>get</i> method.
 <p> This method transfers bytes from this buffer into the given
  destination array.  An invocation of this method of the form 
 <tt>src.get(a)</tt> behaves in exactly the same way as the invocation 
 @code

      src.get(a, 0, a.length) 
@endcode
 @param dst The destination array
 @return This buffer
 @throw BufferUnderflowException
 If there are fewer than <tt>length</tt> bytes
           remaining in this buffer
 */
- (JavaNioByteBuffer *)getWithByteArray:(IOSByteArray *)dst;

/*!
 @brief Relative bulk <i>get</i> method.
 <p> This method transfers bytes from this buffer into the given
  destination array.  If there are fewer bytes remaining in the
  buffer than are required to satisfy the request, that is, if 
 <tt>length</tt>&nbsp;<tt>&gt;</tt>&nbsp;<tt>remaining()</tt>, then no
  bytes are transferred and a <code>BufferUnderflowException</code> is
  thrown. 
 <p> Otherwise, this method copies <tt>length</tt> bytes from this
  buffer into the given array, starting at the current position of this
  buffer and at the given offset in the array.  The position of this
  buffer is then incremented by <tt>length</tt>.
  
 <p> In other words, an invocation of this method of the form 
 <tt>src.get(dst,&nbsp;off,&nbsp;len)</tt> has exactly the same effect as
  the loop 
 @code
    for (int i = off; i < off + len; i++)
          dst[i] = src.get(); 
 
@endcode
  except that it first checks that there are sufficient bytes in
  this buffer and it is potentially much more efficient.
 @param dst The array into which bytes are to be written
 @param offset The offset within the array of the first byte to be
           written; must be non-negative and no larger than
            <tt> dst.length
  </tt>
 @param length The maximum number of bytes to be written to the given
           array; must be non-negative and no larger than
            <tt> dst.length - offset
  </tt>
 @return This buffer
 @throw BufferUnderflowException
 If there are fewer than <tt>length</tt> bytes
           remaining in this buffer
 @throw IndexOutOfBoundsException
 If the preconditions on the <tt>offset</tt> and <tt>length</tt>
           parameters do not hold
 */
- (JavaNioByteBuffer *)getWithByteArray:(IOSByteArray *)dst
                                withInt:(jint)offset
                                withInt:(jint)length;

/*!
 @brief Absolute <i>get</i> method.Reads the byte at the given
  index.
 @param index The index from which the byte will be read
 @return The byte at the given index
 @throw IndexOutOfBoundsException
 If <tt>index</tt> is negative
           or not smaller than the buffer's limit
 */
- (jbyte)getWithInt:(jint)index;

/*!
 @brief Relative <i>get</i> method for reading a char value.
 <p> Reads the next two bytes at this buffer's current position,
  composing them into a char value according to the current byte order,
  and then increments the position by two.  </p>
 @return The char value at the buffer's current position
 @throw BufferUnderflowException
 If there are fewer than two bytes
           remaining in this buffer
 */
- (jchar)getChar;

/*!
 @brief Absolute <i>get</i> method for reading a char value.
 <p> Reads two bytes at the given index, composing them into a
  char value according to the current byte order.  </p>
 @param index The index from which the bytes will be read
 @return The char value at the given index
 @throw IndexOutOfBoundsException
 If <tt>index</tt> is negative
           or not smaller than the buffer's limit,
           minus one
 */
- (jchar)getCharWithInt:(jint)index;

/*!
 @brief Relative <i>get</i> method for reading a double value.
 <p> Reads the next eight bytes at this buffer's current position,
  composing them into a double value according to the current byte order,
  and then increments the position by eight.  </p>
 @return The double value at the buffer's current position
 @throw BufferUnderflowException
 If there are fewer than eight bytes
           remaining in this buffer
 */
- (jdouble)getDouble;

/*!
 @brief Absolute <i>get</i> method for reading a double value.
 <p> Reads eight bytes at the given index, composing them into a
  double value according to the current byte order.  </p>
 @param index The index from which the bytes will be read
 @return The double value at the given index
 @throw IndexOutOfBoundsException
 If <tt>index</tt> is negative
           or not smaller than the buffer's limit,
           minus seven
 */
- (jdouble)getDoubleWithInt:(jint)index;

/*!
 @brief Relative <i>get</i> method for reading a float value.
 <p> Reads the next four bytes at this buffer's current position,
  composing them into a float value according to the current byte order,
  and then increments the position by four.  </p>
 @return The float value at the buffer's current position
 @throw BufferUnderflowException
 If there are fewer than four bytes
           remaining in this buffer
 */
- (jfloat)getFloat;

/*!
 @brief Absolute <i>get</i> method for reading a float value.
 <p> Reads four bytes at the given index, composing them into a
  float value according to the current byte order.  </p>
 @param index The index from which the bytes will be read
 @return The float value at the given index
 @throw IndexOutOfBoundsException
 If <tt>index</tt> is negative
           or not smaller than the buffer's limit,
           minus three
 */
- (jfloat)getFloatWithInt:(jint)index;

/*!
 @brief Relative <i>get</i> method for reading an int value.
 <p> Reads the next four bytes at this buffer's current position,
  composing them into an int value according to the current byte order,
  and then increments the position by four.  </p>
 @return The int value at the buffer's current position
 @throw BufferUnderflowException
 If there are fewer than four bytes
           remaining in this buffer
 */
- (jint)getInt;

/*!
 @brief Absolute <i>get</i> method for reading an int value.
 <p> Reads four bytes at the given index, composing them into a
  int value according to the current byte order.  </p>
 @param index The index from which the bytes will be read
 @return The int value at the given index
 @throw IndexOutOfBoundsException
 If <tt>index</tt> is negative
           or not smaller than the buffer's limit,
           minus three
 */
- (jint)getIntWithInt:(jint)index;

/*!
 @brief Relative <i>get</i> method for reading a long value.
 <p> Reads the next eight bytes at this buffer's current position,
  composing them into a long value according to the current byte order,
  and then increments the position by eight.  </p>
 @return The long value at the buffer's current position
 @throw BufferUnderflowException
 If there are fewer than eight bytes
           remaining in this buffer
 */
- (jlong)getLong;

/*!
 @brief Absolute <i>get</i> method for reading a long value.
 <p> Reads eight bytes at the given index, composing them into a
  long value according to the current byte order.  </p>
 @param index The index from which the bytes will be read
 @return The long value at the given index
 @throw IndexOutOfBoundsException
 If <tt>index</tt> is negative
           or not smaller than the buffer's limit,
           minus seven
 */
- (jlong)getLongWithInt:(jint)index;

/*!
 @brief Relative <i>get</i> method for reading a short value.
 <p> Reads the next two bytes at this buffer's current position,
  composing them into a short value according to the current byte order,
  and then increments the position by two.  </p>
 @return The short value at the buffer's current position
 @throw BufferUnderflowException
 If there are fewer than two bytes
           remaining in this buffer
 */
- (jshort)getShort;

/*!
 @brief Absolute <i>get</i> method for reading a short value.
 <p> Reads two bytes at the given index, composing them into a
  short value according to the current byte order.  </p>
 @param index The index from which the bytes will be read
 @return The short value at the given index
 @throw IndexOutOfBoundsException
 If <tt>index</tt> is negative
           or not smaller than the buffer's limit,
           minus one
 */
- (jshort)getShortWithInt:(jint)index;

/*!
 @brief Tells whether or not this buffer is backed by an accessible byte
  array.
 <p> If this method returns <tt>true</tt> then the <code>array</code>
  and <code>arrayOffset</code> methods may safely be invoked. 
 </p>
 @return <tt>true</tt> if, and only if, this buffer
           is backed by an array and is not read-only
 */
- (jboolean)hasArray;

/*!
 @brief Returns the current hash code of this buffer.
 <p> The hash code of a byte buffer depends only upon its remaining
  elements; that is, upon the elements from <tt>position()</tt> up to, and
  including, the element at <tt>limit()</tt>&nbsp;-&nbsp;<tt>1</tt>.
  
 <p> Because buffer hash codes are content-dependent, it is inadvisable
  to use buffers as keys in hash maps or similar data structures unless it
  is known that their contents will not change.  </p>
 @return The current hash code of this buffer
 */
- (NSUInteger)hash;

/*!
 */
- (jboolean)isAccessible;

/*!
 @brief Tells whether or not this byte buffer is direct.
 @return <tt>true</tt> if, and only if, this buffer is direct
 */
- (jboolean)isDirect;

- (JavaNioBuffer *)limitWithInt:(jint)newLimit;

- (JavaNioBuffer *)mark;

/*!
 @brief Retrieves this buffer's byte order.
 <p> The byte order is used when reading or writing multibyte values, and
  when creating buffers that are views of this byte buffer.  The order of
  a newly-created byte buffer is always <code>BIG_ENDIAN</code>
 .  </p>
 @return This buffer's byte order
 */
- (JavaNioByteOrder *)order;

/*!
 @brief Modifies this buffer's byte order.
 @param bo The new byte order,
           either 
 <code>BIG_ENDIAN</code>          or <code>LITTLE_ENDIAN</code>
 @return This buffer
 */
- (JavaNioByteBuffer *)orderWithJavaNioByteOrder:(JavaNioByteOrder *)bo;

- (JavaNioBuffer *)positionWithInt:(jint)newPosition;

/*!
 @brief Relative <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>.
 <p> Writes the given byte into this buffer at the current
  position, and then increments the position. </p>
 @param b The byte to be written
 @return This buffer
 @throw BufferOverflowException
 If this buffer's current position is not smaller than its limit
 @throw ReadOnlyBufferException
 If this buffer is read-only
 */
- (JavaNioByteBuffer *)putWithByte:(jbyte)b;

/*!
 @brief Relative bulk <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>.
 <p> This method transfers the entire content of the given source
  byte array into this buffer.  An invocation of this method of the
  form <tt>dst.put(a)</tt> behaves in exactly the same way as the
  invocation 
 @code

      dst.put(a, 0, a.length) 
@endcode
 @param src The source array
 @return This buffer
 @throw BufferOverflowException
 If there is insufficient space in this buffer
 @throw ReadOnlyBufferException
 If this buffer is read-only
 */
- (JavaNioByteBuffer *)putWithByteArray:(IOSByteArray *)src;

/*!
 @brief Relative bulk <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>.
 <p> This method transfers bytes into this buffer from the given
  source array.  If there are more bytes to be copied from the array
  than remain in this buffer, that is, if 
 <tt>length</tt>&nbsp;<tt>&gt;</tt>&nbsp;<tt>remaining()</tt>, then no
  bytes are transferred and a <code>BufferOverflowException</code> is
  thrown. 
 <p> Otherwise, this method copies <tt>length</tt> bytes from the
  given array into this buffer, starting at the given offset in the array
  and at the current position of this buffer.  The position of this buffer
  is then incremented by <tt>length</tt>.
  
 <p> In other words, an invocation of this method of the form 
 <tt>dst.put(src,&nbsp;off,&nbsp;len)</tt> has exactly the same effect as
  the loop 
 @code
    for (int i = off; i < off + len; i++)
          dst.put(a[i]); 
 
@endcode
  except that it first checks that there is sufficient space in this
  buffer and it is potentially much more efficient.
 @param src The array from which bytes are to be read
 @param offset The offset within the array of the first byte to be read;
           must be non-negative and no larger than 
  <tt> array.length </tt>
 @param length The number of bytes to be read from the given array;
           must be non-negative and no larger than
            <tt> array.length - offset
  </tt>
 @return This buffer
 @throw BufferOverflowException
 If there is insufficient space in this buffer
 @throw IndexOutOfBoundsException
 If the preconditions on the <tt>offset</tt> and <tt>length</tt>
           parameters do not hold
 @throw ReadOnlyBufferException
 If this buffer is read-only
 */
- (JavaNioByteBuffer *)putWithByteArray:(IOSByteArray *)src
                                withInt:(jint)offset
                                withInt:(jint)length;

/*!
 @brief Relative bulk <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>.
 <p> This method transfers the bytes remaining in the given source
  buffer into this buffer.  If there are more bytes remaining in the
  source buffer than in this buffer, that is, if 
 <tt>src.remaining()</tt>&nbsp;<tt>&gt;</tt>&nbsp;<tt>remaining()</tt>,
  then no bytes are transferred and a <code>BufferOverflowException</code>
  is thrown. 
 <p> Otherwise, this method copies 
 <i>n</i>&nbsp;=&nbsp;<tt>src.remaining()</tt> bytes from the given
  buffer into this buffer, starting at each buffer's current position.
  The positions of both buffers are then incremented by <i>n</i>.
  
 <p> In other words, an invocation of this method of the form 
 <tt>dst.put(src)</tt> has exactly the same effect as the loop 
 @code

      while (src.hasRemaining())
          dst.put(src.get()); 
@endcode
  except that it first checks that there is sufficient space in this
  buffer and it is potentially much more efficient.
 @param src The source buffer from which bytes are to be read;
           must not be this buffer
 @return This buffer
 @throw BufferOverflowException
 If there is insufficient space in this buffer
           for the remaining bytes in the source buffer
 @throw IllegalArgumentException
 If the source buffer is this buffer
 @throw ReadOnlyBufferException
 If this buffer is read-only
 */
- (JavaNioByteBuffer *)putWithJavaNioByteBuffer:(JavaNioByteBuffer *)src;

/*!
 @brief Absolute <i>put</i> method&nbsp;&nbsp;<i>(optional operation)</i>.
 <p> Writes the given byte into this buffer at the given
  index. </p>
 @param index The index at which the byte will be written
 @param b The byte value to be written
 @return This buffer
 @throw IndexOutOfBoundsException
 If <tt>index</tt> is negative
           or not smaller than the buffer's limit
 @throw ReadOnlyBufferException
 If this buffer is read-only
 */
- (JavaNioByteBuffer *)putWithInt:(jint)index
                         withByte:(jbyte)b;

/*!
 @brief Relative <i>put</i> method for writing a char
  value&nbsp;&nbsp;<i>(optional operation)</i>.
 <p> Writes two bytes containing the given char value, in the
  current byte order, into this buffer at the current position, and then
  increments the position by two.  </p>
 @param value The char value to be written
 @return This buffer
 @throw BufferOverflowException
 If there are fewer than two bytes
           remaining in this buffer
 @throw ReadOnlyBufferException
 If this buffer is read-only
 */
- (JavaNioByteBuffer *)putCharWithChar:(jchar)value;

/*!
 @brief Absolute <i>put</i> method for writing a char
  value&nbsp;&nbsp;<i>(optional operation)</i>.
 <p> Writes two bytes containing the given char value, in the
  current byte order, into this buffer at the given index.  </p>
 @param index The index at which the bytes will be written
 @param value The char value to be written
 @return This buffer
 @throw IndexOutOfBoundsException
 If <tt>index</tt> is negative
           or not smaller than the buffer's limit,
           minus one
 @throw ReadOnlyBufferException
 If this buffer is read-only
 */
- (JavaNioByteBuffer *)putCharWithInt:(jint)index
                             withChar:(jchar)value;

/*!
 @brief Relative <i>put</i> method for writing a double
  value&nbsp;&nbsp;<i>(optional operation)</i>.
 <p> Writes eight bytes containing the given double value, in the
  current byte order, into this buffer at the current position, and then
  increments the position by eight.  </p>
 @param value The double value to be written
 @return This buffer
 @throw BufferOverflowException
 If there are fewer than eight bytes
           remaining in this buffer
 @throw ReadOnlyBufferException
 If this buffer is read-only
 */
- (JavaNioByteBuffer *)putDoubleWithDouble:(jdouble)value;

/*!
 @brief Absolute <i>put</i> method for writing a double
  value&nbsp;&nbsp;<i>(optional operation)</i>.
 <p> Writes eight bytes containing the given double value, in the
  current byte order, into this buffer at the given index.  </p>
 @param index The index at which the bytes will be written
 @param value The double value to be written
 @return This buffer
 @throw IndexOutOfBoundsException
 If <tt>index</tt> is negative
           or not smaller than the buffer's limit,
           minus seven
 @throw ReadOnlyBufferException
 If this buffer is read-only
 */
- (JavaNioByteBuffer *)putDoubleWithInt:(jint)index
                             withDouble:(jdouble)value;

/*!
 @brief Relative <i>put</i> method for writing a float
  value&nbsp;&nbsp;<i>(optional operation)</i>.
 <p> Writes four bytes containing the given float value, in the
  current byte order, into this buffer at the current position, and then
  increments the position by four.  </p>
 @param value The float value to be written
 @return This buffer
 @throw BufferOverflowException
 If there are fewer than four bytes
           remaining in this buffer
 @throw ReadOnlyBufferException
 If this buffer is read-only
 */
- (JavaNioByteBuffer *)putFloatWithFloat:(jfloat)value;

/*!
 @brief Absolute <i>put</i> method for writing a float
  value&nbsp;&nbsp;<i>(optional operation)</i>.
 <p> Writes four bytes containing the given float value, in the
  current byte order, into this buffer at the given index.  </p>
 @param index The index at which the bytes will be written
 @param value The float value to be written
 @return This buffer
 @throw IndexOutOfBoundsException
 If <tt>index</tt> is negative
           or not smaller than the buffer's limit,
           minus three
 @throw ReadOnlyBufferException
 If this buffer is read-only
 */
- (JavaNioByteBuffer *)putFloatWithInt:(jint)index
                             withFloat:(jfloat)value;

/*!
 @brief Relative <i>put</i> method for writing an int
  value&nbsp;&nbsp;<i>(optional operation)</i>.
 <p> Writes four bytes containing the given int value, in the
  current byte order, into this buffer at the current position, and then
  increments the position by four.  </p>
 @param value The int value to be written
 @return This buffer
 @throw BufferOverflowException
 If there are fewer than four bytes
           remaining in this buffer
 @throw ReadOnlyBufferException
 If this buffer is read-only
 */
- (JavaNioByteBuffer *)putIntWithInt:(jint)value;

/*!
 @brief Absolute <i>put</i> method for writing an int
  value&nbsp;&nbsp;<i>(optional operation)</i>.
 <p> Writes four bytes containing the given int value, in the
  current byte order, into this buffer at the given index.  </p>
 @param index The index at which the bytes will be written
 @param value The int value to be written
 @return This buffer
 @throw IndexOutOfBoundsException
 If <tt>index</tt> is negative
           or not smaller than the buffer's limit,
           minus three
 @throw ReadOnlyBufferException
 If this buffer is read-only
 */
- (JavaNioByteBuffer *)putIntWithInt:(jint)index
                             withInt:(jint)value;

/*!
 @brief Absolute <i>put</i> method for writing a long
  value&nbsp;&nbsp;<i>(optional operation)</i>.
 <p> Writes eight bytes containing the given long value, in the
  current byte order, into this buffer at the given index.  </p>
 @param index The index at which the bytes will be written
 @param value The long value to be written
 @return This buffer
 @throw IndexOutOfBoundsException
 If <tt>index</tt> is negative
           or not smaller than the buffer's limit,
           minus seven
 @throw ReadOnlyBufferException
 If this buffer is read-only
 */
- (JavaNioByteBuffer *)putLongWithInt:(jint)index
                             withLong:(jlong)value;

/*!
 @brief Relative <i>put</i> method for writing a long
  value&nbsp;&nbsp;<i>(optional operation)</i>.
 <p> Writes eight bytes containing the given long value, in the
  current byte order, into this buffer at the current position, and then
  increments the position by eight.  </p>
 @param value The long value to be written
 @return This buffer
 @throw BufferOverflowException
 If there are fewer than eight bytes
           remaining in this buffer
 @throw ReadOnlyBufferException
 If this buffer is read-only
 */
- (JavaNioByteBuffer *)putLongWithLong:(jlong)value;

/*!
 @brief Absolute <i>put</i> method for writing a short
  value&nbsp;&nbsp;<i>(optional operation)</i>.
 <p> Writes two bytes containing the given short value, in the
  current byte order, into this buffer at the given index.  </p>
 @param index The index at which the bytes will be written
 @param value The short value to be written
 @return This buffer
 @throw IndexOutOfBoundsException
 If <tt>index</tt> is negative
           or not smaller than the buffer's limit,
           minus one
 @throw ReadOnlyBufferException
 If this buffer is read-only
 */
- (JavaNioByteBuffer *)putShortWithInt:(jint)index
                             withShort:(jshort)value;

/*!
 @brief Relative <i>put</i> method for writing a short
  value&nbsp;&nbsp;<i>(optional operation)</i>.
 <p> Writes two bytes containing the given short value, in the
  current byte order, into this buffer at the current position, and then
  increments the position by two.  </p>
 @param value The short value to be written
 @return This buffer
 @throw BufferOverflowException
 If there are fewer than two bytes
           remaining in this buffer
 @throw ReadOnlyBufferException
 If this buffer is read-only
 */
- (JavaNioByteBuffer *)putShortWithShort:(jshort)value;

- (JavaNioBuffer *)reset;

- (JavaNioBuffer *)rewind;

/*!
 */
- (void)setAccessibleWithBoolean:(jboolean)value;

/*!
 @brief Creates a new byte buffer whose content is a shared subsequence of
  this buffer's content.
 <p> The content of the new buffer will start at this buffer's current
  position.  Changes to this buffer's content will be visible in the new
  buffer, and vice versa; the two buffers' position, limit, and mark
  values will be independent. 
 <p> The new buffer's position will be zero, its capacity and its limit
  will be the number of bytes remaining in this buffer, and its mark
  will be undefined.  The new buffer will be direct if, and only if, this
  buffer is direct, and it will be read-only if, and only if, this buffer
  is read-only.  </p>
 @return The new byte buffer
 */
- (JavaNioByteBuffer *)slice;

/*!
 @brief Returns a string summarizing the state of this buffer.
 @return A summary string
 */
- (NSString *)description;

/*!
 @brief Wraps a byte array into a buffer.
 <p> The new buffer will be backed by the given byte array;
  that is, modifications to the buffer will cause the array to be modified
  and vice versa.  The new buffer's capacity and limit will be 
 <tt>array.length</tt>, its position will be zero, and its mark will be
  undefined.  Its <code>backing array</code> will be the
  given array, and its <code>array offset></code> will
  be zero.  </p>
 @param array The array that will back this buffer
 @return The new byte buffer
 */
+ (JavaNioByteBuffer *)wrapWithByteArray:(IOSByteArray *)array;

/*!
 @brief Wraps a byte array into a buffer.
 <p> The new buffer will be backed by the given byte array;
  that is, modifications to the buffer will cause the array to be modified
  and vice versa.  The new buffer's capacity will be 
 <tt>array.length</tt>, its position will be <tt>offset</tt>, its limit
  will be <tt>offset + length</tt>, and its mark will be undefined.  Its 
 <code>backing array</code> will be the given array, and
  its <code>array offset</code> will be zero.  </p>
 @param array The array that will back the new buffer
 @param offset The offset of the subarray to be used; must be non-negative and
           no larger than 
  <tt> array.length </tt> .  The new buffer's position          will be set to this value.
 @param length The length of the subarray to be used;
           must be non-negative and no larger than
            <tt> array.length - offset
  </tt> .          The new buffer's limit will be set to 
  <tt> offset + length </tt> .
 @return The new byte buffer
 @throw IndexOutOfBoundsException
 If the preconditions on the <tt>offset</tt> and <tt>length</tt>
           parameters do not hold
 */
+ (JavaNioByteBuffer *)wrapWithByteArray:(IOSByteArray *)array
                                 withInt:(jint)offset
                                 withInt:(jint)length;

#pragma mark Package-Private

- (instancetype __nonnull)initWithInt:(jint)mark
                              withInt:(jint)pos
                              withInt:(jint)lim
                              withInt:(jint)cap;

- (instancetype __nonnull)initWithInt:(jint)mark
                              withInt:(jint)pos
                              withInt:(jint)lim
                              withInt:(jint)cap
                        withByteArray:(IOSByteArray *)hb
                              withInt:(jint)offset;

- (jbyte)_getWithInt:(jint)i;

- (void)_putWithInt:(jint)i
           withByte:(jbyte)b;

- (jchar)getCharUncheckedWithInt:(jint)index;

- (jdouble)getDoubleUncheckedWithInt:(jint)index;

- (jfloat)getFloatUncheckedWithInt:(jint)index;

- (jint)getIntUncheckedWithInt:(jint)index;

- (jlong)getLongUncheckedWithInt:(jint)index;

- (jshort)getShortUncheckedWithInt:(jint)index;

- (void)getUncheckedWithInt:(jint)pos
              withCharArray:(IOSCharArray *)dst
                    withInt:(jint)dstOffset
                    withInt:(jint)length;

- (void)getUncheckedWithInt:(jint)pos
            withDoubleArray:(IOSDoubleArray *)dst
                    withInt:(jint)dstOffset
                    withInt:(jint)length;

- (void)getUncheckedWithInt:(jint)pos
             withFloatArray:(IOSFloatArray *)dst
                    withInt:(jint)dstOffset
                    withInt:(jint)length;

- (void)getUncheckedWithInt:(jint)pos
               withIntArray:(IOSIntArray *)dst
                    withInt:(jint)dstOffset
                    withInt:(jint)length;

- (void)getUncheckedWithInt:(jint)pos
              withLongArray:(IOSLongArray *)dst
                    withInt:(jint)dstOffset
                    withInt:(jint)length;

- (void)getUncheckedWithInt:(jint)pos
             withShortArray:(IOSShortArray *)dst
                    withInt:(jint)dstOffset
                    withInt:(jint)length;

- (void)putCharUncheckedWithInt:(jint)index
                       withChar:(jchar)value;

- (void)putDoubleUncheckedWithInt:(jint)index
                       withDouble:(jdouble)value;

- (void)putFloatUncheckedWithInt:(jint)index
                       withFloat:(jfloat)value;

- (void)putIntUncheckedWithInt:(jint)index
                       withInt:(jint)value;

- (void)putLongUncheckedWithInt:(jint)index
                       withLong:(jlong)value;

- (void)putShortUncheckedWithInt:(jint)index
                       withShort:(jshort)value;

- (void)putUncheckedWithInt:(jint)pos
              withCharArray:(IOSCharArray *)dst
                    withInt:(jint)srcOffset
                    withInt:(jint)length;

- (void)putUncheckedWithInt:(jint)pos
            withDoubleArray:(IOSDoubleArray *)dst
                    withInt:(jint)srcOffset
                    withInt:(jint)length;

- (void)putUncheckedWithInt:(jint)pos
             withFloatArray:(IOSFloatArray *)dst
                    withInt:(jint)srcOffset
                    withInt:(jint)length;

- (void)putUncheckedWithInt:(jint)pos
               withIntArray:(IOSIntArray *)dst
                    withInt:(jint)srcOffset
                    withInt:(jint)length;

- (void)putUncheckedWithInt:(jint)pos
              withLongArray:(IOSLongArray *)dst
                    withInt:(jint)srcOffset
                    withInt:(jint)length;

- (void)putUncheckedWithInt:(jint)pos
             withShortArray:(IOSShortArray *)dst
                    withInt:(jint)srcOffset
                    withInt:(jint)length;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithInt:(jint)arg0
                              withInt:(jint)arg1
                              withInt:(jint)arg2
                              withInt:(jint)arg3
                              withInt:(jint)arg4 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioByteBuffer)

J2OBJC_FIELD_SETTER(JavaNioByteBuffer, hb_, IOSByteArray *)

FOUNDATION_EXPORT void JavaNioByteBuffer_initWithInt_withInt_withInt_withInt_withByteArray_withInt_(JavaNioByteBuffer *self, jint mark, jint pos, jint lim, jint cap, IOSByteArray *hb, jint offset);

FOUNDATION_EXPORT void JavaNioByteBuffer_initWithInt_withInt_withInt_withInt_(JavaNioByteBuffer *self, jint mark, jint pos, jint lim, jint cap);

FOUNDATION_EXPORT JavaNioByteBuffer *JavaNioByteBuffer_allocateDirectWithInt_(jint capacity);

FOUNDATION_EXPORT JavaNioByteBuffer *JavaNioByteBuffer_allocateWithInt_(jint capacity);

FOUNDATION_EXPORT JavaNioByteBuffer *JavaNioByteBuffer_wrapWithByteArray_withInt_withInt_(IOSByteArray *array, jint offset, jint length);

FOUNDATION_EXPORT JavaNioByteBuffer *JavaNioByteBuffer_wrapWithByteArray_(IOSByteArray *array);

J2OBJC_TYPE_LITERAL_HEADER(JavaNioByteBuffer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaNioByteBuffer")
