//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/nio/channels/spi/AsynchronousChannelProvider.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNioChannelsSpiAsynchronousChannelProvider")
#ifdef RESTRICT_JavaNioChannelsSpiAsynchronousChannelProvider
#define INCLUDE_ALL_JavaNioChannelsSpiAsynchronousChannelProvider 0
#else
#define INCLUDE_ALL_JavaNioChannelsSpiAsynchronousChannelProvider 1
#endif
#undef RESTRICT_JavaNioChannelsSpiAsynchronousChannelProvider

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNioChannelsSpiAsynchronousChannelProvider_) && (INCLUDE_ALL_JavaNioChannelsSpiAsynchronousChannelProvider || defined(INCLUDE_JavaNioChannelsSpiAsynchronousChannelProvider))
#define JavaNioChannelsSpiAsynchronousChannelProvider_

@class JavaNioChannelsAsynchronousChannelGroup;
@class JavaNioChannelsAsynchronousServerSocketChannel;
@class JavaNioChannelsAsynchronousSocketChannel;
@protocol JavaUtilConcurrentExecutorService;
@protocol JavaUtilConcurrentThreadFactory;

/*!
 @brief Service-provider class for asynchronous channels.
 <p> An asynchronous channel provider is a concrete subclass of this class that
  has a zero-argument constructor and implements the abstract methods specified
  below.  A given invocation of the Java virtual machine maintains a single
  system-wide default provider instance, which is returned by the <code>provider</code>
  method.  The first invocation of that method will locate
  the default provider as specified below. 
 <p> All of the methods in this class are safe for use by multiple concurrent
  threads.  </p>
 @since 1.7
 */
@interface JavaNioChannelsSpiAsynchronousChannelProvider : NSObject

#pragma mark Public

/*!
 @brief Constructs a new asynchronous channel group with the given thread pool.
 @param executor The thread pool
 @param initialSize A value 
 <code>>=0</code>  or a negative value for implementation           specific default
 @return A new asynchronous channel group
 @throw IOException
 If an I/O error occurs
 - seealso: AsynchronousChannelGroup#withCachedThreadPool
 */
- (JavaNioChannelsAsynchronousChannelGroup *)openAsynchronousChannelGroupWithJavaUtilConcurrentExecutorService:(id<JavaUtilConcurrentExecutorService>)executor
                                                                                                       withInt:(jint)initialSize;

/*!
 @brief Constructs a new asynchronous channel group with a fixed thread pool.
 @param nThreads The number of threads in the pool
 @param threadFactory The factory to use when creating new threads
 @return A new asynchronous channel group
 @throw IllegalArgumentException
 If <code>nThreads <= 0</code>
 @throw IOException
 If an I/O error occurs
 - seealso: AsynchronousChannelGroup#withFixedThreadPool
 */
- (JavaNioChannelsAsynchronousChannelGroup *)openAsynchronousChannelGroupWithInt:(jint)nThreads
                                             withJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory;

/*!
 @brief Opens an asynchronous server-socket channel.
 @param group The group to which the channel is bound, or 
 <code>null</code>  to           bind to the default group
 @return The new channel
 @throw IllegalChannelGroupException
 If the provider that created the group differs from this provider
 @throw ShutdownChannelGroupException
 The group is shutdown
 @throw IOException
 If an I/O error occurs
 */
- (JavaNioChannelsAsynchronousServerSocketChannel *)openAsynchronousServerSocketChannelWithJavaNioChannelsAsynchronousChannelGroup:(JavaNioChannelsAsynchronousChannelGroup *)group;

/*!
 @brief Opens an asynchronous socket channel.
 @param group The group to which the channel is bound, or 
 <code>null</code>  to           bind to the default group
 @return The new channel
 @throw IllegalChannelGroupException
 If the provider that created the group differs from this provider
 @throw ShutdownChannelGroupException
 The group is shutdown
 @throw IOException
 If an I/O error occurs
 */
- (JavaNioChannelsAsynchronousSocketChannel *)openAsynchronousSocketChannelWithJavaNioChannelsAsynchronousChannelGroup:(JavaNioChannelsAsynchronousChannelGroup *)group;

/*!
 @brief Returns the system-wide default asynchronous channel provider for this
  invocation of the Java virtual machine.
 <p> The first invocation of this method locates the default provider
  object as follows: </p>
  
 <ol>
    
 <li><p> If the system property
    <tt>java.nio.channels.spi.AsynchronousChannelProvider</tt> is defined
    then it is taken to be the fully-qualified name of a concrete provider class.
    The class is loaded and instantiated; if this process fails then an
    unspecified error is thrown.  </p></li>
    
 <li><p> If a provider class has been installed in a jar file that is
    visible to the system class loader, and that jar file contains a
    provider-configuration file named   
 <tt>java.nio.channels.spi.AsynchronousChannelProvider</tt> in the resource
    directory <tt>META-INF/services</tt>, then the first class name
    specified in that file is taken.  The class is loaded and
    instantiated; if this process fails then an unspecified error is
    thrown.  </p></li>
    
 <li><p> Finally, if no provider has been specified by any of the above
    means then the system-default provider class is instantiated and the
    result is returned.  </p></li>
  
 </ol>
  
 <p> Subsequent invocations of this method return the provider that was
  returned by the first invocation.  </p>
 @return The system-wide default AsynchronousChannel provider
 */
+ (JavaNioChannelsSpiAsynchronousChannelProvider *)provider;

#pragma mark Protected

/*!
 @brief Initializes a new instance of this class.
 @throw SecurityException
 If a security manager has been installed and it denies
           <code>RuntimePermission</code><tt>("asynchronousChannelProvider")</tt>
 */
- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioChannelsSpiAsynchronousChannelProvider)

FOUNDATION_EXPORT void JavaNioChannelsSpiAsynchronousChannelProvider_init(JavaNioChannelsSpiAsynchronousChannelProvider *self);

FOUNDATION_EXPORT JavaNioChannelsSpiAsynchronousChannelProvider *JavaNioChannelsSpiAsynchronousChannelProvider_provider(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaNioChannelsSpiAsynchronousChannelProvider)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaNioChannelsSpiAsynchronousChannelProvider")
