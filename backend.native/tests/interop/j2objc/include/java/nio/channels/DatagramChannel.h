//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/nio/channels/DatagramChannel.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNioChannelsDatagramChannel")
#ifdef RESTRICT_JavaNioChannelsDatagramChannel
#define INCLUDE_ALL_JavaNioChannelsDatagramChannel 0
#else
#define INCLUDE_ALL_JavaNioChannelsDatagramChannel 1
#endif
#undef RESTRICT_JavaNioChannelsDatagramChannel

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNioChannelsDatagramChannel_) && (INCLUDE_ALL_JavaNioChannelsDatagramChannel || defined(INCLUDE_JavaNioChannelsDatagramChannel))
#define JavaNioChannelsDatagramChannel_

#define RESTRICT_JavaNioChannelsSpiAbstractSelectableChannel 1
#define INCLUDE_JavaNioChannelsSpiAbstractSelectableChannel 1
#include "java/nio/channels/spi/AbstractSelectableChannel.h"

#define RESTRICT_JavaNioChannelsByteChannel 1
#define INCLUDE_JavaNioChannelsByteChannel 1
#include "java/nio/channels/ByteChannel.h"

#define RESTRICT_JavaNioChannelsScatteringByteChannel 1
#define INCLUDE_JavaNioChannelsScatteringByteChannel 1
#include "java/nio/channels/ScatteringByteChannel.h"

#define RESTRICT_JavaNioChannelsGatheringByteChannel 1
#define INCLUDE_JavaNioChannelsGatheringByteChannel 1
#include "java/nio/channels/GatheringByteChannel.h"

#define RESTRICT_JavaNioChannelsNetworkChannel 1
#define INCLUDE_JavaNioChannelsNetworkChannel 1
#include "java/nio/channels/NetworkChannel.h"

@class IOSObjectArray;
@class JavaNetDatagramSocket;
@class JavaNetSocketAddress;
@class JavaNioByteBuffer;
@class JavaNioChannelsSpiSelectorProvider;
@protocol JavaNetProtocolFamily;
@protocol JavaNetSocketOption;

/*!
 @brief A selectable channel for datagram-oriented sockets.
 <p> A datagram channel is created by invoking one of the <code>open</code> methods
  of this class. It is not possible to create a channel for an arbitrary,
  pre-existing datagram socket. A newly-created datagram channel is open but not
  connected. A datagram channel need not be connected in order for the <code>send</code>
  and <code>receive</code> methods to be used.  A datagram channel may be
  connected, by invoking its <code>connect</code> method, in order to
  avoid the overhead of the security checks are otherwise performed as part of
  every send and receive operation.  A datagram channel must be connected in
  order to use the <code>read</code> and <code>write</code>
  methods, since those methods do not
  accept or return socket addresses. 
 <p> Once connected, a datagram channel remains connected until it is
  disconnected or closed.  Whether or not a datagram channel is connected may
  be determined by invoking its <code>isConnected</code> method. 
 <p> Socket options are configured using the <code>setOption</code>
  method. A datagram channel to an Internet Protocol socket supports
  the following options: 
 <blockquote>
  <table border>
    <tr>
      <th>Option Name</th>
      <th>Description</th>
    </tr>
    <tr>
      <td> <code>SO_SNDBUF</code> </td>
      <td> The size of the socket send buffer </td>
    </tr>
    <tr>
      <td> <code>SO_RCVBUF</code> </td>
      <td> The size of the socket receive buffer </td>
    </tr>
    <tr>
      <td> <code>SO_REUSEADDR</code> </td>
      <td> Re-use address </td>
    </tr>
    <tr>
      <td> <code>SO_BROADCAST</code> </td>
      <td> Allow transmission of broadcast datagrams </td>
    </tr>
    <tr>
      <td> <code>IP_TOS</code> </td>
      <td> The Type of Service (ToS) octet in the Internet Protocol (IP) header </td>
    </tr>
    <tr>
      <td> <code>IP_MULTICAST_IF</code> </td>
      <td> The network interface for Internet Protocol (IP) multicast datagrams </td>
    </tr>
    <tr>
      <td> <code>IP_MULTICAST_TTL</code>
  </td>
      <td> The <em>time-to-live</em> for Internet Protocol (IP) multicast
        datagrams </td>
    </tr>
    <tr>
      <td> <code>IP_MULTICAST_LOOP</code>
  </td>
      <td> Loopback for Internet Protocol (IP) multicast datagrams </td>
    </tr>
  </table>
  </blockquote>
  Additional (implementation specific) options may also be supported. 
 <p> Datagram channels are safe for use by multiple concurrent threads.  They
  support concurrent reading and writing, though at most one thread may be
  reading and at most one thread may be writing at any given time.  </p>
 @author Mark Reinhold
 @author JSR-51 Expert Group
 @since 1.4
 */
@interface JavaNioChannelsDatagramChannel : JavaNioChannelsSpiAbstractSelectableChannel < JavaNioChannelsByteChannel, JavaNioChannelsScatteringByteChannel, JavaNioChannelsGatheringByteChannel, JavaNioChannelsNetworkChannel >

#pragma mark Public

/*!
 @throw AlreadyBoundException
 @throw UnsupportedAddressTypeException
 @throw ClosedChannelException
 @throw IOException
 @throw SecurityException
 If a security manager has been installed and its <code>checkListen</code>
  method denies the
           operation
 @since 1.7
 */
- (JavaNioChannelsDatagramChannel *)bindWithJavaNetSocketAddress:(JavaNetSocketAddress *)local;

/*!
 @brief Connects this channel's socket.
 <p> The channel's socket is configured so that it only receives
  datagrams from, and sends datagrams to, the given remote <i>peer</i>
  address.  Once connected, datagrams may not be received from or sent to
  any other address.  A datagram socket remains connected until it is
  explicitly disconnected or until it is closed. 
 <p> This method performs exactly the same security checks as the <code>connect</code>
  method of the <code>java.net.DatagramSocket</code>
  class.  That is, if a security manager has been
  installed then this method verifies that its <code>checkAccept</code>
  and <code>checkConnect</code>
  methods permit
  datagrams to be received from and sent to, respectively, the given
  remote address. 
 <p> This method may be invoked at any time.  It will not have any effect
  on read or write operations that are already in progress at the moment
  that it is invoked. If this channel's socket is not bound then this method
  will first cause the socket to be bound to an address that is assigned
  automatically, as if invoking the <code>bind</code> method with a
  parameter of <code>null</code>. </p>
 @param remote The remote address to which this channel is to be connected
 @return This datagram channel
 @throw ClosedChannelException
 If this channel is closed
 @throw AsynchronousCloseException
 If another thread closes this channel
           while the connect operation is in progress
 @throw ClosedByInterruptException
 If another thread interrupts the current thread
           while the connect operation is in progress, thereby
           closing the channel and setting the current thread's
           interrupt status
 @throw SecurityException
 If a security manager has been installed
           and it does not permit access to the given remote address
 @throw IOException
 If some other I/O error occurs
 */
- (JavaNioChannelsDatagramChannel *)connectWithJavaNetSocketAddress:(JavaNetSocketAddress *)remote;

/*!
 @brief Disconnects this channel's socket.
 <p> The channel's socket is configured so that it can receive datagrams
  from, and sends datagrams to, any remote address so long as the security
  manager, if installed, permits it. 
 <p> This method may be invoked at any time.  It will not have any effect
  on read or write operations that are already in progress at the moment
  that it is invoked. 
 <p> If this channel's socket is not connected, or if the channel is
  closed, then invoking this method has no effect.  </p>
 @return This datagram channel
 @throw IOException
 If some other I/O error occurs
 */
- (JavaNioChannelsDatagramChannel *)disconnect;

/*!
 @brief Returns the remote address to which this channel's socket is connected.
 @return The remote address; <code>null</code> if the channel's socket is not
           connected
 @throw ClosedChannelException
 If the channel is closed
 @throw IOException
 If an I/O error occurs
 @since 1.7
 */
- (JavaNetSocketAddress *)getRemoteAddress;

/*!
 @brief Tells whether or not this channel's socket is connected.
 @return <code>true</code> if, and only if, this channel's socket
           is <code>open</code> and connected
 */
- (jboolean)isConnected;

/*!
 @brief Opens a datagram channel.
 <p> The new channel is created by invoking the <code>openDatagramChannel</code>
  method of the system-wide default <code>java.nio.channels.spi.SelectorProvider</code>
  object.  The channel will not be
  connected. 
 <p> The <code>ProtocolFamily</code> of the channel's socket
  is platform (and possibly configuration) dependent and therefore unspecified.
  The <code>open</code> allows the protocol family to be
  selected when opening a datagram channel, and should be used to open
  datagram channels that are intended for Internet Protocol multicasting.
 @return A new datagram channel
 @throw IOException
 If an I/O error occurs
 */
+ (JavaNioChannelsDatagramChannel *)open;

/*!
 @brief Opens a datagram channel.
 <p> The <code>family</code> parameter is used to specify the <code>ProtocolFamily</code>
 . If the datagram channel is to be used for IP multicasing
  then this should correspond to the address type of the multicast groups
  that this channel will join. 
 <p> The new channel is created by invoking the <code>openDatagramChannel</code>
  method of the system-wide default <code>java.nio.channels.spi.SelectorProvider</code>
  object.  The channel will not be
  connected.
 @param family The protocol family
 @return A new datagram channel
 @throw UnsupportedOperationException
 If the specified protocol family is not supported. For example,
           suppose the parameter is specified as <code>StandardProtocolFamily.INET6</code>
           but IPv6 is not enabled on the platform.
 @throw IOException
 If an I/O error occurs
 @since 1.7
 */
+ (JavaNioChannelsDatagramChannel *)openWithJavaNetProtocolFamily:(id<JavaNetProtocolFamily>)family;

/*!
 @brief Reads a datagram from this channel.
 <p> This method may only be invoked if this channel's socket is
  connected, and it only accepts datagrams from the socket's peer.  If
  there are more bytes in the datagram than remain in the given buffer
  then the remainder of the datagram is silently discarded.  Otherwise
  this method behaves exactly as specified in the <code>ReadableByteChannel</code>
  interface.  </p>
 @throw NotYetConnectedException
 If this channel's socket is not connected
 */
- (jint)readWithJavaNioByteBuffer:(JavaNioByteBuffer *)dst;

/*!
 @brief Reads a datagram from this channel.
 <p> This method may only be invoked if this channel's socket is
  connected, and it only accepts datagrams from the socket's peer.  If
  there are more bytes in the datagram than remain in the given buffers
  then the remainder of the datagram is silently discarded.  Otherwise
  this method behaves exactly as specified in the <code>ScatteringByteChannel</code>
  interface.  </p>
 @throw NotYetConnectedException
 If this channel's socket is not connected
 */
- (jlong)readWithJavaNioByteBufferArray:(IOSObjectArray *)dsts;

/*!
 @brief Reads a datagram from this channel.
 <p> This method may only be invoked if this channel's socket is
  connected, and it only accepts datagrams from the socket's peer.  If
  there are more bytes in the datagram than remain in the given buffers
  then the remainder of the datagram is silently discarded.  Otherwise
  this method behaves exactly as specified in the <code>ScatteringByteChannel</code>
  interface.  </p>
 @throw NotYetConnectedException
 If this channel's socket is not connected
 */
- (jlong)readWithJavaNioByteBufferArray:(IOSObjectArray *)dsts
                                withInt:(jint)offset
                                withInt:(jint)length;

/*!
 @brief Receives a datagram via this channel.
 <p> If a datagram is immediately available, or if this channel is in
  blocking mode and one eventually becomes available, then the datagram is
  copied into the given byte buffer and its source address is returned.
  If this channel is in non-blocking mode and a datagram is not
  immediately available then this method immediately returns 
 <tt>null</tt>.
  
 <p> The datagram is transferred into the given byte buffer starting at
  its current position, as if by a regular <code>read</code>
  operation.  If there
  are fewer bytes remaining in the buffer than are required to hold the
  datagram then the remainder of the datagram is silently discarded. 
 <p> This method performs exactly the same security checks as the <code>receive</code>
  method of the <code>java.net.DatagramSocket</code>
  class.  That is, if the socket is not connected
  to a specific remote address and a security manager has been installed
  then for each datagram received this method verifies that the source's
  address and port number are permitted by the security manager's <code>checkAccept</code>
  method.  The overhead
  of this security check can be avoided by first connecting the socket via the 
 <code>connect</code> method. 
 <p> This method may be invoked at any time.  If another thread has
  already initiated a read operation upon this channel, however, then an
  invocation of this method will block until the first operation is
  complete. If this channel's socket is not bound then this method will
  first cause the socket to be bound to an address that is assigned
  automatically, as if invoking the <code>bind</code> method with a
  parameter of <code>null</code>. </p>
 @param dst The buffer into which the datagram is to be transferred
 @return The datagram's source address,
           or <tt>null</tt> if this channel is in non-blocking mode
           and no datagram was immediately available
 @throw ClosedChannelException
 If this channel is closed
 @throw AsynchronousCloseException
 If another thread closes this channel
           while the read operation is in progress
 @throw ClosedByInterruptException
 If another thread interrupts the current thread
           while the read operation is in progress, thereby
           closing the channel and setting the current thread's
           interrupt status
 @throw SecurityException
 If a security manager has been installed
           and it does not permit datagrams to be accepted
           from the datagram's sender
 @throw IOException
 If some other I/O error occurs
 */
- (JavaNetSocketAddress *)receiveWithJavaNioByteBuffer:(JavaNioByteBuffer *)dst;

/*!
 @brief Sends a datagram via this channel.
 <p> If this channel is in non-blocking mode and there is sufficient room
  in the underlying output buffer, or if this channel is in blocking mode
  and sufficient room becomes available, then the remaining bytes in the
  given buffer are transmitted as a single datagram to the given target
  address. 
 <p> The datagram is transferred from the byte buffer as if by a regular 
 <code>write</code> operation. 
 <p> This method performs exactly the same security checks as the <code>send</code>
  method of the <code>java.net.DatagramSocket</code>
  class.  That is, if the socket is not connected
  to a specific remote address and a security manager has been installed
  then for each datagram sent this method verifies that the target address
  and port number are permitted by the security manager's <code>checkConnect</code>
  method.  The
  overhead of this security check can be avoided by first connecting the
  socket via the <code>connect</code> method. 
 <p> This method may be invoked at any time.  If another thread has
  already initiated a write operation upon this channel, however, then an
  invocation of this method will block until the first operation is
  complete. If this channel's socket is not bound then this method will
  first cause the socket to be bound to an address that is assigned
  automatically, as if by invoking the <code>bind</code> method with a
  parameter of <code>null</code>. </p>
 @param src The buffer containing the datagram to be sent
 @param target The address to which the datagram is to be sent
 @return The number of bytes sent, which will be either the number
            of bytes that were remaining in the source buffer when this
            method was invoked or, if this channel is non-blocking, may be
            zero if there was insufficient room for the datagram in the
            underlying output buffer
 @throw ClosedChannelException
 If this channel is closed
 @throw AsynchronousCloseException
 If another thread closes this channel
           while the read operation is in progress
 @throw ClosedByInterruptException
 If another thread interrupts the current thread
           while the read operation is in progress, thereby
           closing the channel and setting the current thread's
           interrupt status
 @throw SecurityException
 If a security manager has been installed
           and it does not permit datagrams to be sent
           to the given address
 @throw IOException
 If some other I/O error occurs
 */
- (jint)sendWithJavaNioByteBuffer:(JavaNioByteBuffer *)src
         withJavaNetSocketAddress:(JavaNetSocketAddress *)target;

/*!
 @throw UnsupportedOperationException
 @throw IllegalArgumentException
 @throw ClosedChannelException
 @throw IOException
 @since 1.7
 */
- (JavaNioChannelsDatagramChannel *)setOptionWithJavaNetSocketOption:(id<JavaNetSocketOption>)name
                                                              withId:(id)value;

/*!
 @brief Retrieves a datagram socket associated with this channel.
 <p> The returned object will not declare any public methods that are not
  declared in the <code>java.net.DatagramSocket</code> class.  </p>
 @return A datagram socket associated with this channel
 */
- (JavaNetDatagramSocket *)socket;

/*!
 @brief Returns an operation set identifying this channel's supported
  operations.
 <p> Datagram channels support reading and writing, so this method
  returns <tt>(</tt><code>SelectionKey.OP_READ</code> <tt>|</tt>&nbsp;<code>SelectionKey.OP_WRITE</code>
 <tt>)</tt>.  </p>
 @return The valid-operation set
 */
- (jint)validOps;

/*!
 @brief Writes a datagram to this channel.
 <p> This method may only be invoked if this channel's socket is
  connected, in which case it sends datagrams directly to the socket's
  peer.  Otherwise it behaves exactly as specified in the <code>WritableByteChannel</code>
  interface.  </p>
 @throw NotYetConnectedException
 If this channel's socket is not connected
 */
- (jint)writeWithJavaNioByteBuffer:(JavaNioByteBuffer *)src;

/*!
 @brief Writes a datagram to this channel.
 <p> This method may only be invoked if this channel's socket is
  connected, in which case it sends datagrams directly to the socket's
  peer.  Otherwise it behaves exactly as specified in the <code>GatheringByteChannel</code>
  interface.  </p>
 @return The number of bytes sent, which will be either the number
            of bytes that were remaining in the source buffer when this
            method was invoked or, if this channel is non-blocking, may be
            zero if there was insufficient room for the datagram in the
            underlying output buffer
 @throw NotYetConnectedException
 If this channel's socket is not connected
 */
- (jlong)writeWithJavaNioByteBufferArray:(IOSObjectArray *)srcs;

/*!
 @brief Writes a datagram to this channel.
 <p> This method may only be invoked if this channel's socket is
  connected, in which case it sends datagrams directly to the socket's
  peer.  Otherwise it behaves exactly as specified in the <code>GatheringByteChannel</code>
  interface.  </p>
 @return The number of bytes sent, which will be either the number
            of bytes that were remaining in the source buffer when this
            method was invoked or, if this channel is non-blocking, may be
            zero if there was insufficient room for the datagram in the
            underlying output buffer
 @throw NotYetConnectedException
 If this channel's socket is not connected
 */
- (jlong)writeWithJavaNioByteBufferArray:(IOSObjectArray *)srcs
                                 withInt:(jint)offset
                                 withInt:(jint)length;

#pragma mark Protected

/*!
 @brief Initializes a new instance of this class.
 */
- (instancetype __nonnull)initWithJavaNioChannelsSpiSelectorProvider:(JavaNioChannelsSpiSelectorProvider *)provider;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioChannelsDatagramChannel)

FOUNDATION_EXPORT void JavaNioChannelsDatagramChannel_initWithJavaNioChannelsSpiSelectorProvider_(JavaNioChannelsDatagramChannel *self, JavaNioChannelsSpiSelectorProvider *provider);

FOUNDATION_EXPORT JavaNioChannelsDatagramChannel *JavaNioChannelsDatagramChannel_open(void);

FOUNDATION_EXPORT JavaNioChannelsDatagramChannel *JavaNioChannelsDatagramChannel_openWithJavaNetProtocolFamily_(id<JavaNetProtocolFamily> family);

J2OBJC_TYPE_LITERAL_HEADER(JavaNioChannelsDatagramChannel)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaNioChannelsDatagramChannel")
