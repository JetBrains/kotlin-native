//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/nio/channels/ReadableByteChannel.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNioChannelsReadableByteChannel")
#ifdef RESTRICT_JavaNioChannelsReadableByteChannel
#define INCLUDE_ALL_JavaNioChannelsReadableByteChannel 0
#else
#define INCLUDE_ALL_JavaNioChannelsReadableByteChannel 1
#endif
#undef RESTRICT_JavaNioChannelsReadableByteChannel

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNioChannelsReadableByteChannel_) && (INCLUDE_ALL_JavaNioChannelsReadableByteChannel || defined(INCLUDE_JavaNioChannelsReadableByteChannel))
#define JavaNioChannelsReadableByteChannel_

#define RESTRICT_JavaNioChannelsChannel 1
#define INCLUDE_JavaNioChannelsChannel 1
#include "java/nio/channels/Channel.h"

@class JavaNioByteBuffer;

/*!
 @brief A channel that can read bytes.
 <p> Only one read operation upon a readable channel may be in progress at
  any given time.  If one thread initiates a read operation upon a channel
  then any other thread that attempts to initiate another read operation will
  block until the first operation is complete.  Whether or not other kinds of
  I/O operations may proceed concurrently with a read operation depends upon
  the type of the channel. </p>
 @author Mark Reinhold
 @author JSR-51 Expert Group
 @since 1.4
 */
@protocol JavaNioChannelsReadableByteChannel < JavaNioChannelsChannel, JavaObject >

/*!
 @brief Reads a sequence of bytes from this channel into the given buffer.
 <p> An attempt is made to read up to <i>r</i> bytes from the channel,
  where <i>r</i> is the number of bytes remaining in the buffer, that is, 
 <tt>dst.remaining()</tt>, at the moment this method is invoked. 
 <p> Suppose that a byte sequence of length <i>n</i> is read, where 
 <tt>0</tt>&nbsp;<tt>&lt;=</tt>&nbsp;<i>n</i>&nbsp;<tt>&lt;=</tt>&nbsp;<i>r</i>.
  This byte sequence will be transferred into the buffer so that the first
  byte in the sequence is at index <i>p</i> and the last byte is at index 
 <i>p</i>&nbsp;<tt>+</tt>&nbsp;<i>n</i>&nbsp;<tt>-</tt>&nbsp;<tt>1</tt>,
  where <i>p</i> is the buffer's position at the moment this method is
  invoked.  Upon return the buffer's position will be equal to 
 <i>p</i>&nbsp;<tt>+</tt>&nbsp;<i>n</i>; its limit will not have changed. 
 <p> A read operation might not fill the buffer, and in fact it might not
  read any bytes at all.  Whether or not it does so depends upon the
  nature and state of the channel.  A socket channel in non-blocking mode,
  for example, cannot read any more bytes than are immediately available
  from the socket's input buffer; similarly, a file channel cannot read
  any more bytes than remain in the file.  It is guaranteed, however, that
  if a channel is in blocking mode and there is at least one byte
  remaining in the buffer then this method will block until at least one
  byte is read. 
 <p> This method may be invoked at any time.  If another thread has
  already initiated a read operation upon this channel, however, then an
  invocation of this method will block until the first operation is
  complete. </p>
 @param dst The buffer into which bytes are to be transferred
 @return The number of bytes read, possibly zero, or <tt>-1</tt> if the
           channel has reached end-of-stream
 @throw NonReadableChannelException
 If this channel was not opened for reading
 @throw ClosedChannelException
 If this channel is closed
 @throw AsynchronousCloseException
 If another thread closes this channel
           while the read operation is in progress
 @throw ClosedByInterruptException
 If another thread interrupts the current thread
           while the read operation is in progress, thereby
           closing the channel and setting the current thread's
           interrupt status
 @throw IOException
 If some other I/O error occurs
 */
- (jint)readWithJavaNioByteBuffer:(JavaNioByteBuffer *)dst;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioChannelsReadableByteChannel)

J2OBJC_TYPE_LITERAL_HEADER(JavaNioChannelsReadableByteChannel)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaNioChannelsReadableByteChannel")
