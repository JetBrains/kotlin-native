//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/nio/channels/AsynchronousByteChannel.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNioChannelsAsynchronousByteChannel")
#ifdef RESTRICT_JavaNioChannelsAsynchronousByteChannel
#define INCLUDE_ALL_JavaNioChannelsAsynchronousByteChannel 0
#else
#define INCLUDE_ALL_JavaNioChannelsAsynchronousByteChannel 1
#endif
#undef RESTRICT_JavaNioChannelsAsynchronousByteChannel

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNioChannelsAsynchronousByteChannel_) && (INCLUDE_ALL_JavaNioChannelsAsynchronousByteChannel || defined(INCLUDE_JavaNioChannelsAsynchronousByteChannel))
#define JavaNioChannelsAsynchronousByteChannel_

#define RESTRICT_JavaNioChannelsAsynchronousChannel 1
#define INCLUDE_JavaNioChannelsAsynchronousChannel 1
#include "java/nio/channels/AsynchronousChannel.h"

@class JavaNioByteBuffer;
@protocol JavaNioChannelsCompletionHandler;
@protocol JavaUtilConcurrentFuture;

/*!
 @brief An asynchronous channel that can read and write bytes.
 <p> Some channels may not allow more than one read or write to be outstanding
  at any given time. If a thread invokes a read method before a previous read
  operation has completed then a <code>ReadPendingException</code> will be thrown.
  Similarly, if a write method is invoked before a previous write has completed
  then <code>WritePendingException</code> is thrown. Whether or not other kinds of
  I/O operations may proceed concurrently with a read operation depends upon
  the type of the channel. 
 <p> Note that <code>ByteBuffers</code> are not safe for use by
  multiple concurrent threads. When a read or write operation is initiated then
  care must be taken to ensure that the buffer is not accessed until the
  operation completes.
 - seealso: Channels#newInputStream(AsynchronousByteChannel)
 - seealso: Channels#newOutputStream(AsynchronousByteChannel)
 @since 1.7
 */
@protocol JavaNioChannelsAsynchronousByteChannel < JavaNioChannelsAsynchronousChannel, JavaObject >

/*!
 @brief Reads a sequence of bytes from this channel into the given buffer.
 <p> This method initiates an asynchronous read operation to read a
  sequence of bytes from this channel into the given buffer. The <code>handler</code>
  parameter is a completion handler that is invoked when the read
  operation completes (or fails). The result passed to the completion
  handler is the number of bytes read or <code>-1</code> if no bytes could be
  read because the channel has reached end-of-stream. 
 <p> The read operation may read up to <i>r</i> bytes from the channel,
  where <i>r</i> is the number of bytes remaining in the buffer, that is, 
 <code>dst.remaining()</code> at the time that the read is attempted. Where 
 <i>r</i> is 0, the read operation completes immediately with a result of 
 <code>0</code> without initiating an I/O operation. 
 <p> Suppose that a byte sequence of length <i>n</i> is read, where 
 <tt>0</tt>&nbsp;<tt>&lt;</tt>&nbsp;<i>n</i>&nbsp;<tt>&lt;=</tt>&nbsp;<i>r</i>.
  This byte sequence will be transferred into the buffer so that the first
  byte in the sequence is at index <i>p</i> and the last byte is at index 
 <i>p</i>&nbsp;<tt>+</tt>&nbsp;<i>n</i>&nbsp;<tt>-</tt>&nbsp;<tt>1</tt>,
  where <i>p</i> is the buffer's position at the moment the read is
  performed. Upon completion the buffer's position will be equal to 
 <i>p</i>&nbsp;<tt>+</tt>&nbsp;<i>n</i>; its limit will not have changed. 
 <p> Buffers are not safe for use by multiple concurrent threads so care
  should be taken to not access the buffer until the operation has
  completed. 
 <p> This method may be invoked at any time. Some channel types may not
  allow more than one read to be outstanding at any given time. If a thread
  initiates a read operation before a previous read operation has
  completed then a <code>ReadPendingException</code> will be thrown.
 @param dst The buffer into which bytes are to be transferred
 @param attachment The object to attach to the I/O operation; can be 
 <code>null</code>
 @param handler The completion handler
 @throw IllegalArgumentException
 If the buffer is read-only
 @throw ReadPendingException
 If the channel does not allow more than one read to be outstanding
           and a previous read has not completed
 @throw ShutdownChannelGroupException
 If the channel is associated with a <code>group</code>
  that has terminated
 */
- (void)readWithJavaNioByteBuffer:(JavaNioByteBuffer *)dst
                           withId:(id)attachment
withJavaNioChannelsCompletionHandler:(id<JavaNioChannelsCompletionHandler>)handler;

/*!
 @brief Reads a sequence of bytes from this channel into the given buffer.
 <p> This method initiates an asynchronous read operation to read a
  sequence of bytes from this channel into the given buffer. The method
  behaves in exactly the same manner as the <code>read(ByteBuffer,Object,CompletionHandler)</code>
  method except that instead
  of specifying a completion handler, this method returns a <code>Future</code>
  representing the pending result. The <code>Future</code>'s <code>get</code>
  method returns the number of bytes read or <code>-1</code> if no bytes
  could be read because the channel has reached end-of-stream.
 @param dst The buffer into which bytes are to be transferred
 @return A Future representing the result of the operation
 @throw IllegalArgumentException
 If the buffer is read-only
 @throw ReadPendingException
 If the channel does not allow more than one read to be outstanding
           and a previous read has not completed
 */
- (id<JavaUtilConcurrentFuture>)readWithJavaNioByteBuffer:(JavaNioByteBuffer *)dst;

/*!
 @brief Writes a sequence of bytes to this channel from the given buffer.
 <p> This method initiates an asynchronous write operation to write a
  sequence of bytes to this channel from the given buffer. The <code>handler</code>
  parameter is a completion handler that is invoked when the write
  operation completes (or fails). The result passed to the completion
  handler is the number of bytes written. 
 <p> The write operation may write up to <i>r</i> bytes to the channel,
  where <i>r</i> is the number of bytes remaining in the buffer, that is, 
 <code>src.remaining()</code> at the time that the write is attempted. Where 
 <i>r</i> is 0, the write operation completes immediately with a result of 
 <code>0</code> without initiating an I/O operation. 
 <p> Suppose that a byte sequence of length <i>n</i> is written, where 
 <tt>0</tt>&nbsp;<tt>&lt;</tt>&nbsp;<i>n</i>&nbsp;<tt>&lt;=</tt>&nbsp;<i>r</i>.
  This byte sequence will be transferred from the buffer starting at index 
 <i>p</i>, where <i>p</i> is the buffer's position at the moment the
  write is performed; the index of the last byte written will be 
 <i>p</i>&nbsp;<tt>+</tt>&nbsp;<i>n</i>&nbsp;<tt>-</tt>&nbsp;<tt>1</tt>.
  Upon completion the buffer's position will be equal to 
 <i>p</i>&nbsp;<tt>+</tt>&nbsp;<i>n</i>; its limit will not have changed. 
 <p> Buffers are not safe for use by multiple concurrent threads so care
  should be taken to not access the buffer until the operation has
  completed. 
 <p> This method may be invoked at any time. Some channel types may not
  allow more than one write to be outstanding at any given time. If a thread
  initiates a write operation before a previous write operation has
  completed then a <code>WritePendingException</code> will be thrown.
 @param src The buffer from which bytes are to be retrieved
 @param attachment The object to attach to the I/O operation; can be 
 <code>null</code>
 @param handler The completion handler object
 @throw WritePendingException
 If the channel does not allow more than one write to be outstanding
           and a previous write has not completed
 @throw ShutdownChannelGroupException
 If the channel is associated with a <code>group</code>
  that has terminated
 */
- (void)writeWithJavaNioByteBuffer:(JavaNioByteBuffer *)src
                            withId:(id)attachment
withJavaNioChannelsCompletionHandler:(id<JavaNioChannelsCompletionHandler>)handler;

/*!
 @brief Writes a sequence of bytes to this channel from the given buffer.
 <p> This method initiates an asynchronous write operation to write a
  sequence of bytes to this channel from the given buffer. The method
  behaves in exactly the same manner as the <code>write(ByteBuffer,Object,CompletionHandler)</code>
  method except that instead
  of specifying a completion handler, this method returns a <code>Future</code>
  representing the pending result. The <code>Future</code>'s <code>get</code>
  method returns the number of bytes written.
 @param src The buffer from which bytes are to be retrieved
 @return A Future representing the result of the operation
 @throw WritePendingException
 If the channel does not allow more than one write to be outstanding
           and a previous write has not completed
 */
- (id<JavaUtilConcurrentFuture>)writeWithJavaNioByteBuffer:(JavaNioByteBuffer *)src;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioChannelsAsynchronousByteChannel)

J2OBJC_TYPE_LITERAL_HEADER(JavaNioChannelsAsynchronousByteChannel)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaNioChannelsAsynchronousByteChannel")
