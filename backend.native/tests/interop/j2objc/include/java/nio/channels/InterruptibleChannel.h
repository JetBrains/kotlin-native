//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/nio/channels/InterruptibleChannel.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNioChannelsInterruptibleChannel")
#ifdef RESTRICT_JavaNioChannelsInterruptibleChannel
#define INCLUDE_ALL_JavaNioChannelsInterruptibleChannel 0
#else
#define INCLUDE_ALL_JavaNioChannelsInterruptibleChannel 1
#endif
#undef RESTRICT_JavaNioChannelsInterruptibleChannel

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNioChannelsInterruptibleChannel_) && (INCLUDE_ALL_JavaNioChannelsInterruptibleChannel || defined(INCLUDE_JavaNioChannelsInterruptibleChannel))
#define JavaNioChannelsInterruptibleChannel_

#define RESTRICT_JavaNioChannelsChannel 1
#define INCLUDE_JavaNioChannelsChannel 1
#include "java/nio/channels/Channel.h"

/*!
 @brief A channel that can be asynchronously closed and interrupted.
 <p> A channel that implements this interface is <i>asynchronously
  closeable:</i> If a thread is blocked in an I/O operation on an
  interruptible channel then another thread may invoke the channel's <code>close</code>
  method.  This will cause the blocked thread to receive an 
 <code>AsynchronousCloseException</code>.
  
 <p> A channel that implements this interface is also <i>interruptible:</i>
  If a thread is blocked in an I/O operation on an interruptible channel then
  another thread may invoke the blocked thread's <code>interrupt</code>
  method.  This will cause the channel to be closed, the blocked
  thread to receive a <code>ClosedByInterruptException</code>, and the blocked
  thread's interrupt status to be set. 
 <p> If a thread's interrupt status is already set and it invokes a blocking
  I/O operation upon a channel then the channel will be closed and the thread
  will immediately receive a <code>ClosedByInterruptException</code>; its interrupt
  status will remain set. 
 <p> A channel supports asynchronous closing and interruption if, and only
  if, it implements this interface.  This can be tested at runtime, if
  necessary, via the <tt>instanceof</tt> operator.
 @author Mark Reinhold
 @author JSR-51 Expert Group
 @since 1.4
 */
@protocol JavaNioChannelsInterruptibleChannel < JavaNioChannelsChannel, JavaObject >

/*!
 @brief Closes this channel.
 <p> Any thread currently blocked in an I/O operation upon this channel
  will receive an <code>AsynchronousCloseException</code>.
  
 <p> This method otherwise behaves exactly as specified by the <code>Channel</code>
  interface.  </p>
 @throw IOExceptionIf an I/O error occurs
 */
- (void)close;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioChannelsInterruptibleChannel)

J2OBJC_TYPE_LITERAL_HEADER(JavaNioChannelsInterruptibleChannel)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaNioChannelsInterruptibleChannel")
