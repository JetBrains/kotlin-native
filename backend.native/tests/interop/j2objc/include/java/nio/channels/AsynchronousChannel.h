//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/nio/channels/AsynchronousChannel.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNioChannelsAsynchronousChannel")
#ifdef RESTRICT_JavaNioChannelsAsynchronousChannel
#define INCLUDE_ALL_JavaNioChannelsAsynchronousChannel 0
#else
#define INCLUDE_ALL_JavaNioChannelsAsynchronousChannel 1
#endif
#undef RESTRICT_JavaNioChannelsAsynchronousChannel

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNioChannelsAsynchronousChannel_) && (INCLUDE_ALL_JavaNioChannelsAsynchronousChannel || defined(INCLUDE_JavaNioChannelsAsynchronousChannel))
#define JavaNioChannelsAsynchronousChannel_

#define RESTRICT_JavaNioChannelsChannel 1
#define INCLUDE_JavaNioChannelsChannel 1
#include "java/nio/channels/Channel.h"

/*!
 @brief A channel that supports asynchronous I/O operations.Asynchronous I/O
  operations will usually take one of two forms: 
 <ol>
  <li>@code
<code>Future</code>&lt;V&gt; <em>operation</em>(<em>...
 </em>)
@endcode</li>
  <li>@code
void <em>operation</em>(<em>...</em> A attachment, <code>CompletionHandler</code>
 &lt;V,? super A&gt; handler)
@endcode</li>
  </ol>
  where <i>operation</i> is the name of the I/O operation (read or write for
  example), <i>V</i> is the result type of the I/O operation, and <i>A</i> is
  the type of an object attached to the I/O operation to provide context when
  consuming the result. The attachment is important for cases where a 
 <em>state-less</em> <code>CompletionHandler</code> is used to consume the result
  of many I/O operations. 
 <p> In the first form, the methods defined by the <code>Future</code>
  interface may be used to check if the operation has completed, wait for its
  completion, and to retrieve the result. In the second form, a <code>CompletionHandler</code>
  is invoked to consume the result of the I/O operation when
  it completes or fails. 
 <p> A channel that implements this interface is <em>asynchronously
  closeable</em>: If an I/O operation is outstanding on the channel and the
  channel's <code>close</code> method is invoked, then the I/O operation
  fails with the exception <code>AsynchronousCloseException</code>.
  
 <p> Asynchronous channels are safe for use by multiple concurrent threads.
  Some channel implementations may support concurrent reading and writing, but
  may not allow more than one read and one write operation to be outstanding at
  any given time. 
 <h2>Cancellation</h2>
  
 <p> The <code>Future</code> interface defines the <code>cancel</code>
  method to cancel execution. This causes all threads waiting on the result of
  the I/O operation to throw <code>java.util.concurrent.CancellationException</code>.
  Whether the underlying I/O operation can be cancelled is highly implementation
  specific and therefore not specified. Where cancellation leaves the channel,
  or the entity to which it is connected, in an inconsistent state, then the
  channel is put into an implementation specific <em>error state</em> that
  prevents further attempts to initiate I/O operations that are <i>similar</i>
  to the operation that was cancelled. For example, if a read operation is
  cancelled but the implementation cannot guarantee that bytes have not been
  read from the channel then it puts the channel into an error state; further
  attempts to initiate a <code>read</code> operation cause an unspecified runtime
  exception to be thrown. Similarly, if a write operation is cancelled but the
  implementation cannot guarantee that bytes have not been written to the
  channel then subsequent attempts to initiate a <code>write</code> will fail with
  an unspecified runtime exception. 
 <p> Where the <code>cancel</code> method is invoked with the <code>mayInterruptIfRunning</code>
  parameter set to <code>true</code> then the I/O operation
  may be interrupted by closing the channel. In that case all threads waiting
  on the result of the I/O operation throw <code>CancellationException</code> and
  any other I/O operations outstanding on the channel complete with the
  exception <code>AsynchronousCloseException</code>.
  
 <p> Where the <code>cancel</code> method is invoked to cancel read or write
  operations then it is recommended that all buffers used in the I/O operations
  be discarded or care taken to ensure that the buffers are not accessed while
  the channel remains open.
 @since 1.7
 */
@protocol JavaNioChannelsAsynchronousChannel < JavaNioChannelsChannel, JavaObject >

/*!
 @brief Closes this channel.
 <p> Any outstanding asynchronous operations upon this channel will
  complete with the exception <code>AsynchronousCloseException</code>. After a
  channel is closed, further attempts to initiate asynchronous I/O
  operations complete immediately with cause <code>ClosedChannelException</code>.
  
 <p>  This method otherwise behaves exactly as specified by the <code>Channel</code>
  interface.
 @throw IOException
 If an I/O error occurs
 */
- (void)close;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioChannelsAsynchronousChannel)

J2OBJC_TYPE_LITERAL_HEADER(JavaNioChannelsAsynchronousChannel)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaNioChannelsAsynchronousChannel")
