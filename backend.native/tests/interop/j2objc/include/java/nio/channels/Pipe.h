//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/nio/channels/Pipe.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNioChannelsPipe")
#ifdef RESTRICT_JavaNioChannelsPipe
#define INCLUDE_ALL_JavaNioChannelsPipe 0
#else
#define INCLUDE_ALL_JavaNioChannelsPipe 1
#endif
#undef RESTRICT_JavaNioChannelsPipe

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNioChannelsPipe_) && (INCLUDE_ALL_JavaNioChannelsPipe || defined(INCLUDE_JavaNioChannelsPipe))
#define JavaNioChannelsPipe_

@class JavaNioChannelsPipe_SinkChannel;
@class JavaNioChannelsPipe_SourceChannel;

/*!
 @brief A pair of channels that implements a unidirectional pipe.
 <p> A pipe consists of a pair of channels: A writable <code>sink</code>
  channel and a readable <code>source</code>
  channel.  Once some bytes are written to the sink channel they can be read
  from source channel in exactly the order in which they were written. 
 <p> Whether or not a thread writing bytes to a pipe will block until another
  thread reads those bytes, or some previously-written bytes, from the pipe is
  system-dependent and therefore unspecified.  Many pipe implementations will
  buffer up to a certain number of bytes between the sink and source channels,
  but such buffering should not be assumed.  </p>
 @author Mark Reinhold
 @author JSR-51 Expert Group
 @since 1.4
 */
@interface JavaNioChannelsPipe : NSObject

#pragma mark Public

/*!
 @brief Opens a pipe.
 <p> The new pipe is created by invoking the <code>openPipe</code>
  method of the
  system-wide default <code>java.nio.channels.spi.SelectorProvider</code>
  object.  </p>
 @return A new pipe
 @throw IOException
 If an I/O error occurs
 */
+ (JavaNioChannelsPipe *)open;

/*!
 @brief Returns this pipe's sink channel.
 @return This pipe's sink channel
 */
- (JavaNioChannelsPipe_SinkChannel *)sink;

/*!
 @brief Returns this pipe's source channel.
 @return This pipe's source channel
 */
- (JavaNioChannelsPipe_SourceChannel *)source;

#pragma mark Protected

/*!
 @brief Initializes a new instance of this class.
 */
- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioChannelsPipe)

FOUNDATION_EXPORT void JavaNioChannelsPipe_init(JavaNioChannelsPipe *self);

FOUNDATION_EXPORT JavaNioChannelsPipe *JavaNioChannelsPipe_open(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaNioChannelsPipe)

#endif

#if !defined (JavaNioChannelsPipe_SourceChannel_) && (INCLUDE_ALL_JavaNioChannelsPipe || defined(INCLUDE_JavaNioChannelsPipe_SourceChannel))
#define JavaNioChannelsPipe_SourceChannel_

#define RESTRICT_JavaNioChannelsSpiAbstractSelectableChannel 1
#define INCLUDE_JavaNioChannelsSpiAbstractSelectableChannel 1
#include "java/nio/channels/spi/AbstractSelectableChannel.h"

#define RESTRICT_JavaNioChannelsReadableByteChannel 1
#define INCLUDE_JavaNioChannelsReadableByteChannel 1
#include "java/nio/channels/ReadableByteChannel.h"

#define RESTRICT_JavaNioChannelsScatteringByteChannel 1
#define INCLUDE_JavaNioChannelsScatteringByteChannel 1
#include "java/nio/channels/ScatteringByteChannel.h"

@class JavaNioChannelsSpiSelectorProvider;

/*!
 @brief A channel representing the readable end of a <code>Pipe</code>.
 @since 1.4
 */
@interface JavaNioChannelsPipe_SourceChannel : JavaNioChannelsSpiAbstractSelectableChannel < JavaNioChannelsReadableByteChannel, JavaNioChannelsScatteringByteChannel >

#pragma mark Public

/*!
 @brief Returns an operation set identifying this channel's supported
  operations.
 <p> Pipe-source channels only support reading, so this method
  returns <code>SelectionKey.OP_READ</code>.  </p>
 @return The valid-operation set
 */
- (jint)validOps;

#pragma mark Protected

/*!
 @brief Constructs a new instance of this class.
 @param provider The selector provider
 */
- (instancetype __nonnull)initWithJavaNioChannelsSpiSelectorProvider:(JavaNioChannelsSpiSelectorProvider *)provider;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioChannelsPipe_SourceChannel)

FOUNDATION_EXPORT void JavaNioChannelsPipe_SourceChannel_initWithJavaNioChannelsSpiSelectorProvider_(JavaNioChannelsPipe_SourceChannel *self, JavaNioChannelsSpiSelectorProvider *provider);

J2OBJC_TYPE_LITERAL_HEADER(JavaNioChannelsPipe_SourceChannel)

#endif

#if !defined (JavaNioChannelsPipe_SinkChannel_) && (INCLUDE_ALL_JavaNioChannelsPipe || defined(INCLUDE_JavaNioChannelsPipe_SinkChannel))
#define JavaNioChannelsPipe_SinkChannel_

#define RESTRICT_JavaNioChannelsSpiAbstractSelectableChannel 1
#define INCLUDE_JavaNioChannelsSpiAbstractSelectableChannel 1
#include "java/nio/channels/spi/AbstractSelectableChannel.h"

#define RESTRICT_JavaNioChannelsWritableByteChannel 1
#define INCLUDE_JavaNioChannelsWritableByteChannel 1
#include "java/nio/channels/WritableByteChannel.h"

#define RESTRICT_JavaNioChannelsGatheringByteChannel 1
#define INCLUDE_JavaNioChannelsGatheringByteChannel 1
#include "java/nio/channels/GatheringByteChannel.h"

@class JavaNioChannelsSpiSelectorProvider;

/*!
 @brief A channel representing the writable end of a <code>Pipe</code>.
 @since 1.4
 */
@interface JavaNioChannelsPipe_SinkChannel : JavaNioChannelsSpiAbstractSelectableChannel < JavaNioChannelsWritableByteChannel, JavaNioChannelsGatheringByteChannel >

#pragma mark Public

/*!
 @brief Returns an operation set identifying this channel's supported
  operations.
 <p> Pipe-sink channels only support writing, so this method returns 
 <code>SelectionKey.OP_WRITE</code>.  </p>
 @return The valid-operation set
 */
- (jint)validOps;

#pragma mark Protected

/*!
 @brief Initializes a new instance of this class.
 @param provider The selector provider
 */
- (instancetype __nonnull)initWithJavaNioChannelsSpiSelectorProvider:(JavaNioChannelsSpiSelectorProvider *)provider;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioChannelsPipe_SinkChannel)

FOUNDATION_EXPORT void JavaNioChannelsPipe_SinkChannel_initWithJavaNioChannelsSpiSelectorProvider_(JavaNioChannelsPipe_SinkChannel *self, JavaNioChannelsSpiSelectorProvider *provider);

J2OBJC_TYPE_LITERAL_HEADER(JavaNioChannelsPipe_SinkChannel)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaNioChannelsPipe")
