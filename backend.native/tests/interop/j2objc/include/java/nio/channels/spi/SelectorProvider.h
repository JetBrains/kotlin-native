//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/nio/channels/spi/SelectorProvider.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNioChannelsSpiSelectorProvider")
#ifdef RESTRICT_JavaNioChannelsSpiSelectorProvider
#define INCLUDE_ALL_JavaNioChannelsSpiSelectorProvider 0
#else
#define INCLUDE_ALL_JavaNioChannelsSpiSelectorProvider 1
#endif
#undef RESTRICT_JavaNioChannelsSpiSelectorProvider

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNioChannelsSpiSelectorProvider_) && (INCLUDE_ALL_JavaNioChannelsSpiSelectorProvider || defined(INCLUDE_JavaNioChannelsSpiSelectorProvider))
#define JavaNioChannelsSpiSelectorProvider_

@class JavaNioChannelsDatagramChannel;
@class JavaNioChannelsPipe;
@class JavaNioChannelsServerSocketChannel;
@class JavaNioChannelsSocketChannel;
@class JavaNioChannelsSpiAbstractSelector;
@protocol JavaNetProtocolFamily;
@protocol JavaNioChannelsChannel;

/*!
 @brief Service-provider class for selectors and selectable channels.
 <p> A selector provider is a concrete subclass of this class that has a
  zero-argument constructor and implements the abstract methods specified
  below.  A given invocation of the Java virtual machine maintains a single
  system-wide default provider instance, which is returned by the <code>provider</code>
  method.  The first invocation of that method will locate
  the default provider as specified below. 
 <p> The system-wide default provider is used by the static <tt>open</tt>
  methods of the <code>DatagramChannel</code>
 , <code>Pipe</code>, <code>Selector</code>
 , <code>ServerSocketChannel</code>
 , and <code>SocketChannel</code>
  classes.  It is also
  used by the <code>System.inheritedChannel()</code>
  method. A program may make use of a provider other than the default provider
  by instantiating that provider and then directly invoking the <tt>open</tt>
  methods defined in this class. 
 <p> All of the methods in this class are safe for use by multiple concurrent
  threads.  </p>
 @author Mark Reinhold
 @author JSR-51 Expert Group
 @since 1.4
 */
@interface JavaNioChannelsSpiSelectorProvider : NSObject

#pragma mark Public

/*!
 @brief Returns the channel inherited from the entity that created this
  Java virtual machine.
 <p> On many operating systems a process, such as a Java virtual
  machine, can be started in a manner that allows the process to
  inherit a channel from the entity that created the process. The
  manner in which this is done is system dependent, as are the
  possible entities to which the channel may be connected. For example,
  on UNIX systems, the Internet services daemon (<i>inetd</i>) is used to
  start programs to service requests when a request arrives on an
  associated network port. In this example, the process that is started,
  inherits a channel representing a network socket. 
 <p> In cases where the inherited channel represents a network socket
  then the <code>Channel</code> type returned
  by this method is determined as follows: 
 <ul>
   
 <li><p> If the inherited channel represents a stream-oriented connected
   socket then a <code>SocketChannel</code> is
   returned. The socket channel is, at least initially, in blocking
   mode, bound to a socket address, and connected to a peer.  
 </p></li>
   
 <li><p> If the inherited channel represents a stream-oriented listening
   socket then a <code>ServerSocketChannel</code>
  is returned. The server-socket channel is, at
   least initially, in blocking mode, and bound to a socket address.  
 </p></li>
   
 <li><p> If the inherited channel is a datagram-oriented socket
   then a <code>DatagramChannel</code> is
   returned. The datagram channel is, at least initially, in blocking
   mode, and bound to a socket address.  
 </p></li>
  
 </ul>
  
 <p> In addition to the network-oriented channels described, this method
  may return other kinds of channels in the future. 
 <p> The first invocation of this method creates the channel that is
  returned. Subsequent invocations of this method return the same
  channel. </p>
 @return The inherited channel, if any, otherwise <tt>null</tt>.
 @throw IOException
 If an I/O error occurs
 @throw SecurityException
 If a security manager has been installed and it denies
           <code>RuntimePermission</code><tt>("inheritedChannel")</tt>
 @since 1.5
 */
- (id<JavaNioChannelsChannel>)inheritedChannel;

/*!
 @brief Opens a datagram channel.
 @return The new channel
 @throw IOException
 If an I/O error occurs
 */
- (JavaNioChannelsDatagramChannel *)openDatagramChannel;

/*!
 @brief Opens a datagram channel.
 @param family The protocol family
 @return A new datagram channel
 @throw UnsupportedOperationException
 If the specified protocol family is not supported
 @throw IOException
 If an I/O error occurs
 @since 1.7
 */
- (JavaNioChannelsDatagramChannel *)openDatagramChannelWithJavaNetProtocolFamily:(id<JavaNetProtocolFamily>)family;

/*!
 @brief Opens a pipe.
 @return The new pipe
 @throw IOException
 If an I/O error occurs
 */
- (JavaNioChannelsPipe *)openPipe;

/*!
 @brief Opens a selector.
 @return The new selector
 @throw IOException
 If an I/O error occurs
 */
- (JavaNioChannelsSpiAbstractSelector *)openSelector;

/*!
 @brief Opens a server-socket channel.
 @return The new channel
 @throw IOException
 If an I/O error occurs
 */
- (JavaNioChannelsServerSocketChannel *)openServerSocketChannel;

/*!
 @brief Opens a socket channel.
 @return The new channel
 @throw IOException
 If an I/O error occurs
 */
- (JavaNioChannelsSocketChannel *)openSocketChannel;

/*!
 @brief Returns the system-wide default selector provider for this invocation of
  the Java virtual machine.
 <p> The first invocation of this method locates the default provider
  object as follows: </p>
  
 <ol>
    
 <li><p> If the system property
    <tt>java.nio.channels.spi.SelectorProvider</tt> is defined then it is
    taken to be the fully-qualified name of a concrete provider class.
    The class is loaded and instantiated; if this process fails then an
    unspecified error is thrown.  </p></li>
    
 <li><p> If a provider class has been installed in a jar file that is
    visible to the system class loader, and that jar file contains a
    provider-configuration file named   
 <tt>java.nio.channels.spi.SelectorProvider</tt> in the resource
    directory <tt>META-INF/services</tt>, then the first class name
    specified in that file is taken.  The class is loaded and
    instantiated; if this process fails then an unspecified error is
    thrown.  </p></li>
    
 <li><p> Finally, if no provider has been specified by any of the above
    means then the system-default provider class is instantiated and the
    result is returned.  </p></li>
  
 </ol>
  
 <p> Subsequent invocations of this method return the provider that was
  returned by the first invocation.  </p>
 @return The system-wide default selector provider
 */
+ (JavaNioChannelsSpiSelectorProvider *)provider;

#pragma mark Protected

/*!
 @brief Initializes a new instance of this class.
 @throw SecurityException
 If a security manager has been installed and it denies
           <code>RuntimePermission</code><tt>("selectorProvider")</tt>
 */
- (instancetype __nonnull)init;

@end

J2OBJC_STATIC_INIT(JavaNioChannelsSpiSelectorProvider)

FOUNDATION_EXPORT void JavaNioChannelsSpiSelectorProvider_init(JavaNioChannelsSpiSelectorProvider *self);

FOUNDATION_EXPORT JavaNioChannelsSpiSelectorProvider *JavaNioChannelsSpiSelectorProvider_provider(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaNioChannelsSpiSelectorProvider)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaNioChannelsSpiSelectorProvider")
