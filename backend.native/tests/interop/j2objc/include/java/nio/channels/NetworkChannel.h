//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/nio/channels/NetworkChannel.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNioChannelsNetworkChannel")
#ifdef RESTRICT_JavaNioChannelsNetworkChannel
#define INCLUDE_ALL_JavaNioChannelsNetworkChannel 0
#else
#define INCLUDE_ALL_JavaNioChannelsNetworkChannel 1
#endif
#undef RESTRICT_JavaNioChannelsNetworkChannel

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNioChannelsNetworkChannel_) && (INCLUDE_ALL_JavaNioChannelsNetworkChannel || defined(INCLUDE_JavaNioChannelsNetworkChannel))
#define JavaNioChannelsNetworkChannel_

#define RESTRICT_JavaNioChannelsChannel 1
#define INCLUDE_JavaNioChannelsChannel 1
#include "java/nio/channels/Channel.h"

@class JavaNetSocketAddress;
@protocol JavaNetSocketOption;
@protocol JavaUtilSet;

/*!
 @brief A channel to a network socket.
 <p> A channel that implements this interface is a channel to a network
  socket. The <code>bind</code> method is used to bind the
  socket to a local <code>address</code>, the <code>getLocalAddress</code>
  method returns the address that the socket is bound to, and the 
 <code>setOption</code> and <code>getOption</code>
  methods are used to set and query socket
  options.  An implementation of this interface should specify the socket options
  that it supports. 
 <p> The <code>bind</code> and <code>setOption</code> methods that do
  not otherwise have a value to return are specified to return the network
  channel upon which they are invoked. This allows method invocations to be
  chained. Implementations of this interface should specialize the return type
  so that method invocations on the implementation class can be chained.
 @since 1.7
 */
@protocol JavaNioChannelsNetworkChannel < JavaNioChannelsChannel, JavaObject >

/*!
 @brief Binds the channel's socket to a local address.
 <p> This method is used to establish an association between the socket and
  a local address. Once an association is established then the socket remains
  bound until the channel is closed. If the <code>local</code> parameter has the
  value <code>null</code> then the socket will be bound to an address that is
  assigned automatically.
 @param local The address to bind the socket, or 
 <code>null</code>  to bind the socket           to an automatically assigned socket address
 @return This channel
 @throw AlreadyBoundException
 If the socket is already bound
 @throw UnsupportedAddressTypeException
 If the type of the given address is not supported
 @throw ClosedChannelException
 If the channel is closed
 @throw IOException
 If some other I/O error occurs
 @throw SecurityException
 If a security manager is installed and it denies an unspecified
           permission. An implementation of this interface should specify
           any required permissions.
 - seealso: #getLocalAddress
 */
- (id<JavaNioChannelsNetworkChannel>)bindWithJavaNetSocketAddress:(JavaNetSocketAddress *)local;

/*!
 @brief Returns the socket address that this channel's socket is bound to.
 <p> Where the channel is <code>bound</code> to an Internet Protocol
  socket address then the return value from this method is of type <code>java.net.InetSocketAddress</code>
 .
 @return The socket address that the socket is bound to, or <code>null</code>
           if the channel's socket is not bound
 @throw ClosedChannelException
 If the channel is closed
 @throw IOException
 If an I/O error occurs
 */
- (JavaNetSocketAddress *)getLocalAddress;

/*!
 @brief Sets the value of a socket option.
 @param name The socket option
 @param value The value of the socket option. A value of 
 <code>null</code>  may be           a valid value for some socket options.
 @return This channel
 @throw UnsupportedOperationException
 If the socket option is not supported by this channel
 @throw IllegalArgumentException
 If the value is not a valid value for this socket option
 @throw ClosedChannelException
 If this channel is closed
 @throw IOException
 If an I/O error occurs
 - seealso: java.net.StandardSocketOptions
 */
- (id<JavaNioChannelsNetworkChannel>)setOptionWithJavaNetSocketOption:(id<JavaNetSocketOption>)name
                                                               withId:(id)value;

/*!
 @brief Returns the value of a socket option.
 @param name The socket option
 @return The value of the socket option. A value of <code>null</code> may be
           a valid value for some socket options.
 @throw UnsupportedOperationException
 If the socket option is not supported by this channel
 @throw ClosedChannelException
 If this channel is closed
 @throw IOException
 If an I/O error occurs
 - seealso: java.net.StandardSocketOptions
 */
- (id)getOptionWithJavaNetSocketOption:(id<JavaNetSocketOption>)name;

/*!
 @brief Returns a set of the socket options supported by this channel.
 <p> This method will continue to return the set of options even after the
  channel has been closed.
 @return A set of the socket options supported by this channel
 */
- (id<JavaUtilSet>)supportedOptions;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioChannelsNetworkChannel)

J2OBJC_TYPE_LITERAL_HEADER(JavaNioChannelsNetworkChannel)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaNioChannelsNetworkChannel")
