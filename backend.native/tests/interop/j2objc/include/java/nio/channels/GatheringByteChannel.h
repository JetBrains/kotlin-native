//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/nio/channels/GatheringByteChannel.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNioChannelsGatheringByteChannel")
#ifdef RESTRICT_JavaNioChannelsGatheringByteChannel
#define INCLUDE_ALL_JavaNioChannelsGatheringByteChannel 0
#else
#define INCLUDE_ALL_JavaNioChannelsGatheringByteChannel 1
#endif
#undef RESTRICT_JavaNioChannelsGatheringByteChannel

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNioChannelsGatheringByteChannel_) && (INCLUDE_ALL_JavaNioChannelsGatheringByteChannel || defined(INCLUDE_JavaNioChannelsGatheringByteChannel))
#define JavaNioChannelsGatheringByteChannel_

#define RESTRICT_JavaNioChannelsWritableByteChannel 1
#define INCLUDE_JavaNioChannelsWritableByteChannel 1
#include "java/nio/channels/WritableByteChannel.h"

@class IOSObjectArray;

/*!
 @brief A channel that can write bytes from a sequence of buffers.
 <p> A <i>gathering</i> write operation writes, in a single invocation, a
  sequence of bytes from one or more of a given sequence of buffers.
  Gathering writes are often useful when implementing network protocols or
  file formats that, for example, group data into segments consisting of one
  or more fixed-length headers followed by a variable-length body.  Similar 
 <i>scattering</i> read operations are defined in the <code>ScatteringByteChannel</code>
  interface.  </p>
 @author Mark Reinhold
 @author JSR-51 Expert Group
 @since 1.4
 */
@protocol JavaNioChannelsGatheringByteChannel < JavaNioChannelsWritableByteChannel, JavaObject >

/*!
 @brief Writes a sequence of bytes to this channel from a subsequence of the
  given buffers.
 <p> An attempt is made to write up to <i>r</i> bytes to this channel,
  where <i>r</i> is the total number of bytes remaining in the specified
  subsequence of the given buffer array, that is, 
 <blockquote>@code

  srcs[offset].remaining()
      + srcs[offset+1].remaining()
      + ... + srcs[offset+length-1].remaining()
@endcode</blockquote>
  at the moment that this method is invoked. 
 <p> Suppose that a byte sequence of length <i>n</i> is written, where 
 <tt>0</tt>&nbsp;<tt>&lt;=</tt>&nbsp;<i>n</i>&nbsp;<tt>&lt;=</tt>&nbsp;<i>r</i>.
  Up to the first <tt>srcs[offset].remaining()</tt> bytes of this sequence
  are written from buffer <tt>srcs[offset]</tt>, up to the next 
 <tt>srcs[offset+1].remaining()</tt> bytes are written from buffer 
 <tt>srcs[offset+1]</tt>, and so forth, until the entire byte sequence is
  written.  As many bytes as possible are written from each buffer, hence
  the final position of each updated buffer, except the last updated
  buffer, is guaranteed to be equal to that buffer's limit. 
 <p> Unless otherwise specified, a write operation will return only after
  writing all of the <i>r</i> requested bytes.  Some types of channels,
  depending upon their state, may write only some of the bytes or possibly
  none at all.  A socket channel in non-blocking mode, for example, cannot
  write any more bytes than are free in the socket's output buffer. 
 <p> This method may be invoked at any time.  If another thread has
  already initiated a write operation upon this channel, however, then an
  invocation of this method will block until the first operation is
  complete. </p>
 @param srcs The buffers from which bytes are to be retrieved
 @param offset The offset within the buffer array of the first buffer from
           which bytes are to be retrieved; must be non-negative and no
           larger than 
  <tt> srcs.length </tt>
 @param length The maximum number of buffers to be accessed; must be
           non-negative and no larger than
            <tt> srcs.length
  </tt> &nbsp; - &nbsp; <tt> offset </tt>
 @return The number of bytes written, possibly zero
 @throw IndexOutOfBoundsException
 If the preconditions on the <tt>offset</tt> and <tt>length</tt>
           parameters do not hold
 @throw NonWritableChannelException
 If this channel was not opened for writing
 @throw ClosedChannelException
 If this channel is closed
 @throw AsynchronousCloseException
 If another thread closes this channel
           while the write operation is in progress
 @throw ClosedByInterruptException
 If another thread interrupts the current thread
           while the write operation is in progress, thereby
           closing the channel and setting the current thread's
           interrupt status
 @throw IOException
 If some other I/O error occurs
 */
- (jlong)writeWithJavaNioByteBufferArray:(IOSObjectArray *)srcs
                                 withInt:(jint)offset
                                 withInt:(jint)length;

/*!
 @brief Writes a sequence of bytes to this channel from the given buffers.
 <p> An invocation of this method of the form <tt>c.write(srcs)</tt>
  behaves in exactly the same manner as the invocation 
 <blockquote>@code

  c.write(srcs, 0, srcs.length);
@endcode</blockquote>
 @param srcs The buffers from which bytes are to be retrieved
 @return The number of bytes written, possibly zero
 @throw NonWritableChannelException
 If this channel was not opened for writing
 @throw ClosedChannelException
 If this channel is closed
 @throw AsynchronousCloseException
 If another thread closes this channel
           while the write operation is in progress
 @throw ClosedByInterruptException
 If another thread interrupts the current thread
           while the write operation is in progress, thereby
           closing the channel and setting the current thread's
           interrupt status
 @throw IOException
 If some other I/O error occurs
 */
- (jlong)writeWithJavaNioByteBufferArray:(IOSObjectArray *)srcs;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioChannelsGatheringByteChannel)

J2OBJC_TYPE_LITERAL_HEADER(JavaNioChannelsGatheringByteChannel)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaNioChannelsGatheringByteChannel")
