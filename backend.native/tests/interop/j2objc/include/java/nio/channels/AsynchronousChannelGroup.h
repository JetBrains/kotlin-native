//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/nio/channels/AsynchronousChannelGroup.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNioChannelsAsynchronousChannelGroup")
#ifdef RESTRICT_JavaNioChannelsAsynchronousChannelGroup
#define INCLUDE_ALL_JavaNioChannelsAsynchronousChannelGroup 0
#else
#define INCLUDE_ALL_JavaNioChannelsAsynchronousChannelGroup 1
#endif
#undef RESTRICT_JavaNioChannelsAsynchronousChannelGroup

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNioChannelsAsynchronousChannelGroup_) && (INCLUDE_ALL_JavaNioChannelsAsynchronousChannelGroup || defined(INCLUDE_JavaNioChannelsAsynchronousChannelGroup))
#define JavaNioChannelsAsynchronousChannelGroup_

@class JavaNioChannelsSpiAsynchronousChannelProvider;
@class JavaUtilConcurrentTimeUnit;
@protocol JavaUtilConcurrentExecutorService;
@protocol JavaUtilConcurrentThreadFactory;

/*!
 @brief A grouping of asynchronous channels for the purpose of resource sharing.
 <p> An asynchronous channel group encapsulates the mechanics required to
  handle the completion of I/O operations initiated by <code>asynchronous channels</code>
  that are bound to the group. A group has an associated
  thread pool to which tasks are submitted to handle I/O events and dispatch to 
 <code>completion-handlers</code> that consume the result of
  asynchronous operations performed on channels in the group. In addition to
  handling I/O events, the pooled threads may also execute other tasks required
  to support the execution of asynchronous I/O operations. 
 <p> An asynchronous channel group is created by invoking the <code>withFixedThreadPool</code>
  or <code>withCachedThreadPool</code>
  methods defined here. Channels are bound to a group by
  specifying the group when constructing the channel. The associated thread
  pool is <em>owned</em> by the group; termination of the group results in the
  shutdown of the associated thread pool. 
 <p> In addition to groups created explicitly, the Java virtual machine
  maintains a system-wide <em>default group</em> that is constructed
  automatically. Asynchronous channels that do not specify a group at
  construction time are bound to the default group. The default group has an
  associated thread pool that creates new threads as needed. The default group
  may be configured by means of system properties defined in the table below.
  Where the <code>ThreadFactory</code> for the
  default group is not configured then the pooled threads of the default group
  are <code>daemon</code> threads. 
 <table border summary="System properties">
    <tr>
      <th>System property</th>
      <th>Description</th>
    </tr>
    <tr>
      <td> <code>java.nio.channels.DefaultThreadPool.threadFactory</code> </td>
      <td> The value of this property is taken to be the fully-qualified name
      of a concrete <code>ThreadFactory</code>
      class. The class is loaded using the system class loader and instantiated.
      The factory's <code>newThread</code>
  method is invoked to create each thread for the default
      group's thread pool. If the process to load and instantiate the value
      of the property fails then an unspecified error is thrown during the
      construction of the default group. </td>
    </tr>
    <tr>
      <td> <code>java.nio.channels.DefaultThreadPool.initialSize</code> </td>
      <td> The value of the <code>initialSize</code> parameter for the default
      group (see <code>withCachedThreadPool</code>).
      The value of the property is taken to be the <code>String</code>
      representation of an <code>Integer</code> that is the initial size parameter.
      If the value cannot be parsed as an <code>Integer</code> it causes an
      unspecified error to be thrown during the construction of the default
      group. </td>
    </tr>
  </table>
  
 <a name="threading"></a><h2>Threading</h2>
  
 <p> The completion handler for an I/O operation initiated on a channel bound
  to a group is guaranteed to be invoked by one of the pooled threads in the
  group. This ensures that the completion handler is run by a thread with the
  expected <em>identity</em>.
  
 <p> Where an I/O operation completes immediately, and the initiating thread
  is one of the pooled threads in the group then the completion handler may
  be invoked directly by the initiating thread. To avoid stack overflow, an
  implementation may impose a limit as to the number of activations on the
  thread stack. Some I/O operations may prohibit invoking the completion
  handler directly by the initiating thread (see <code>accept</code>
 ).
  
 <a name="shutdown"></a><h2>Shutdown and Termination</h2>
  
 <p> The <code>shutdown</code> method is used to initiate an <em>orderly
  shutdown</em> of a group. An orderly shutdown marks the group as shutdown;
  further attempts to construct a channel that binds to the group will throw 
 <code>ShutdownChannelGroupException</code>. Whether or not a group is shutdown can
  be tested using the <code>isShutdown</code> method. Once shutdown,
  the group <em>terminates</em> when all asynchronous channels that are bound to
  the group are closed, all actively executing completion handlers have run to
  completion, and resources used by the group are released. No attempt is made
  to stop or interrupt threads that are executing completion handlers. The 
 <code>isTerminated</code> method is used to test if the group has
  terminated, and the <code>awaitTermination</code> method can be
  used to block until the group has terminated. 
 <p> The <code>shutdownNow</code> method can be used to initiate a 
 <em>forceful shutdown</em> of the group. In addition to the actions performed
  by an orderly shutdown, the <code>shutdownNow</code> method closes all open channels
  in the group as if by invoking the <code>close</code>
  method.
 @since 1.7
 - seealso: AsynchronousSocketChannel#open(AsynchronousChannelGroup)
 - seealso: AsynchronousServerSocketChannel#open(AsynchronousChannelGroup)
 */
@interface JavaNioChannelsAsynchronousChannelGroup : NSObject

#pragma mark Public

/*!
 @brief Awaits termination of the group.
 <p> This method blocks until the group has terminated, or the timeout
  occurs, or the current thread is interrupted, whichever happens first.
 @param timeout The maximum time to wait, or zero or less to not wait
 @param unit The time unit of the timeout argument
 @return <code>true</code> if the group has terminated; <code>false</code> if the
           timeout elapsed before termination
 @throw InterruptedException
 If interrupted while waiting
 */
- (jboolean)awaitTerminationWithLong:(jlong)timeout
      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

/*!
 @brief Tells whether or not this asynchronous channel group is shutdown.
 @return <code>true</code> if this asynchronous channel group is shutdown or
           has been marked for shutdown.
 */
- (jboolean)isShutdown;

/*!
 @brief Tells whether or not this group has terminated.
 <p> Where this method returns <code>true</code>, then the associated thread
  pool has also <code>terminated</code>.
 @return <code>true</code> if this group has terminated
 */
- (jboolean)isTerminated;

/*!
 @brief Returns the provider that created this channel group.
 @return The provider that created this channel group
 */
- (JavaNioChannelsSpiAsynchronousChannelProvider *)provider;

/*!
 @brief Initiates an orderly shutdown of the group.
 <p> This method marks the group as shutdown. Further attempts to construct
  channel that binds to this group will throw <code>ShutdownChannelGroupException</code>.
  The group terminates when all asynchronous channels in the group are
  closed, all actively executing completion handlers have run to completion,
  and all resources have been released. This method has no effect if the
  group is already shutdown.
 */
- (void)shutdown;

/*!
 @brief Shuts down the group and closes all open channels in the group.
 <p> In addition to the actions performed by the <code>shutdown</code>
  method, this method invokes the <code>close</code>
  method on all open channels in the group. This method does not attempt to
  stop or interrupt threads that are executing completion handlers. The
  group terminates when all actively executing completion handlers have run
  to completion and all resources have been released. This method may be
  invoked at any time. If some other thread has already invoked it, then
  another invocation will block until the first invocation is complete,
  after which it will return without effect.
 @throw IOException
 If an I/O error occurs
 */
- (void)shutdownNow;

/*!
 @brief Creates an asynchronous channel group with a given thread pool that
  creates new threads as needed.
 <p> The <code>executor</code> parameter is an <code>ExecutorService</code> that
  creates new threads as needed to execute tasks that are submitted to
  handle I/O events and dispatch completion results for operations initiated
  on asynchronous channels in the group. It may reuse previously constructed
  threads when they are available. 
 <p> The <code>initialSize</code> parameter may be used by the implementation
  as a <em>hint</em> as to the initial number of tasks it may submit. For
  example, it may be used to indicate the initial number of threads that
  wait on I/O events. 
 <p> The executor is intended to be used exclusively by the resulting
  asynchronous channel group. Termination of the group results in the
  orderly  <code>shutdown</code> of the executor
  service. Shutting down the executor service by other means results in
  unspecified behavior. 
 <p> The group is created by invoking the <code>openAsynchronousChannelGroup(ExecutorService,int)</code>
  method of the system-wide
  default <code>AsynchronousChannelProvider</code> object.
 @param executor The thread pool for the resulting group
 @param initialSize A value 
 <code>>=0</code>  or a negative value for implementation           specific default
 @return A new asynchronous channel group
 @throw IOException
 If an I/O error occurs
 - seealso: java.util.concurrent.Executors#newCachedThreadPool
 */
+ (JavaNioChannelsAsynchronousChannelGroup *)withCachedThreadPoolWithJavaUtilConcurrentExecutorService:(id<JavaUtilConcurrentExecutorService>)executor
                                                                                               withInt:(jint)initialSize;

/*!
 @brief Creates an asynchronous channel group with a fixed thread pool.
 <p> The resulting asynchronous channel group reuses a fixed number of
  threads. At any point, at most <code>nThreads</code> threads will be active
  processing tasks that are submitted to handle I/O events and dispatch
  completion results for operations initiated on asynchronous channels in
  the group. 
 <p> The group is created by invoking the <code>openAsynchronousChannelGroup(int,ThreadFactory)</code>
  method of the system-wide
  default <code>AsynchronousChannelProvider</code> object.
 @param nThreads The number of threads in the pool
 @param threadFactory The factory to use when creating new threads
 @return A new asynchronous channel group
 @throw IllegalArgumentException
 If <code>nThreads <= 0</code>
 @throw IOException
 If an I/O error occurs
 */
+ (JavaNioChannelsAsynchronousChannelGroup *)withFixedThreadPoolWithInt:(jint)nThreads
                                    withJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory;

/*!
 @brief Creates an asynchronous channel group with a given thread pool.
 <p> The <code>executor</code> parameter is an <code>ExecutorService</code> that
  executes tasks submitted to dispatch completion results for operations
  initiated on asynchronous channels in the group. 
 <p> Care should be taken when configuring the executor service. It
  should support <em>direct handoff</em> or <em>unbounded queuing</em> of
  submitted tasks, and the thread that invokes the <code>execute</code>
  method should never invoke the task
  directly. An implementation may mandate additional constraints. 
 <p> The executor is intended to be used exclusively by the resulting
  asynchronous channel group. Termination of the group results in the
  orderly  <code>shutdown</code> of the executor
  service. Shutting down the executor service by other means results in
  unspecified behavior. 
 <p> The group is created by invoking the <code>openAsynchronousChannelGroup(ExecutorService,int)</code>
  method of the system-wide
  default <code>AsynchronousChannelProvider</code> object with an <code>initialSize</code>
  of <code>0</code>.
 @param executor The thread pool for the resulting group
 @return A new asynchronous channel group
 @throw IOException
 If an I/O error occurs
 */
+ (JavaNioChannelsAsynchronousChannelGroup *)withThreadPoolWithJavaUtilConcurrentExecutorService:(id<JavaUtilConcurrentExecutorService>)executor;

#pragma mark Protected

/*!
 @brief Initialize a new instance of this class.
 @param provider The asynchronous channel provider for this group
 */
- (instancetype __nonnull)initWithJavaNioChannelsSpiAsynchronousChannelProvider:(JavaNioChannelsSpiAsynchronousChannelProvider *)provider;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioChannelsAsynchronousChannelGroup)

FOUNDATION_EXPORT void JavaNioChannelsAsynchronousChannelGroup_initWithJavaNioChannelsSpiAsynchronousChannelProvider_(JavaNioChannelsAsynchronousChannelGroup *self, JavaNioChannelsSpiAsynchronousChannelProvider *provider);

FOUNDATION_EXPORT JavaNioChannelsAsynchronousChannelGroup *JavaNioChannelsAsynchronousChannelGroup_withFixedThreadPoolWithInt_withJavaUtilConcurrentThreadFactory_(jint nThreads, id<JavaUtilConcurrentThreadFactory> threadFactory);

FOUNDATION_EXPORT JavaNioChannelsAsynchronousChannelGroup *JavaNioChannelsAsynchronousChannelGroup_withCachedThreadPoolWithJavaUtilConcurrentExecutorService_withInt_(id<JavaUtilConcurrentExecutorService> executor, jint initialSize);

FOUNDATION_EXPORT JavaNioChannelsAsynchronousChannelGroup *JavaNioChannelsAsynchronousChannelGroup_withThreadPoolWithJavaUtilConcurrentExecutorService_(id<JavaUtilConcurrentExecutorService> executor);

J2OBJC_TYPE_LITERAL_HEADER(JavaNioChannelsAsynchronousChannelGroup)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaNioChannelsAsynchronousChannelGroup")
