//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/nio/channels/AsynchronousServerSocketChannel.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaNioChannelsAsynchronousServerSocketChannel")
#ifdef RESTRICT_JavaNioChannelsAsynchronousServerSocketChannel
#define INCLUDE_ALL_JavaNioChannelsAsynchronousServerSocketChannel 0
#else
#define INCLUDE_ALL_JavaNioChannelsAsynchronousServerSocketChannel 1
#endif
#undef RESTRICT_JavaNioChannelsAsynchronousServerSocketChannel

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaNioChannelsAsynchronousServerSocketChannel_) && (INCLUDE_ALL_JavaNioChannelsAsynchronousServerSocketChannel || defined(INCLUDE_JavaNioChannelsAsynchronousServerSocketChannel))
#define JavaNioChannelsAsynchronousServerSocketChannel_

#define RESTRICT_JavaNioChannelsAsynchronousChannel 1
#define INCLUDE_JavaNioChannelsAsynchronousChannel 1
#include "java/nio/channels/AsynchronousChannel.h"

#define RESTRICT_JavaNioChannelsNetworkChannel 1
#define INCLUDE_JavaNioChannelsNetworkChannel 1
#include "java/nio/channels/NetworkChannel.h"

@class JavaNetSocketAddress;
@class JavaNioChannelsAsynchronousChannelGroup;
@class JavaNioChannelsSpiAsynchronousChannelProvider;
@protocol JavaNetSocketOption;
@protocol JavaNioChannelsCompletionHandler;
@protocol JavaUtilConcurrentFuture;

/*!
 @brief An asynchronous channel for stream-oriented listening sockets.
 <p> An asynchronous server-socket channel is created by invoking the 
 <code>open</code> method of this class.
  A newly-created asynchronous server-socket channel is open but not yet bound.
  It can be bound to a local address and configured to listen for connections
  by invoking the <code>bind</code> method. Once bound,
  the <code>accept</code> method
  is used to initiate the accepting of connections to the channel's socket.
  An attempt to invoke the <tt>accept</tt> method on an unbound channel will
  cause a <code>NotYetBoundException</code> to be thrown. 
 <p> Channels of this type are safe for use by multiple concurrent threads
  though at most one accept operation can be outstanding at any time.
  If a thread initiates an accept operation before a previous accept operation
  has completed then an <code>AcceptPendingException</code> will be thrown. 
 <p> Socket options are configured using the <code>setOption</code>
  method. Channels of this type support the following options: 
 <blockquote>
  <table border summary="Socket options">
    <tr>
      <th>Option Name</th>
      <th>Description</th>
    </tr>
    <tr>
      <td> <code>SO_RCVBUF</code> </td>
      <td> The size of the socket receive buffer </td>
    </tr>
    <tr>
      <td> <code>SO_REUSEADDR</code> </td>
      <td> Re-use address </td>
    </tr>
  </table>
  </blockquote>
  Additional (implementation specific) options may also be supported. 
 <p> <b>Usage Example:</b>
  @code

   final AsynchronousServerSocketChannel listener =
       AsynchronousServerSocketChannel.open().bind(new InetSocketAddress(5000));
   listener.accept(null, new CompletionHandler&lt;AsynchronousSocketChannel,Void&gt;() {
       public void completed(AsynchronousSocketChannel ch, Void att) {
           // accept the next connection
           listener.accept(null, this);
           // handle this connection
           handle(ch);
       }
       public void failed(Throwable exc, Void att) {
           ...
       }
   }); 
  
@endcode
 @since 1.7
 */
@interface JavaNioChannelsAsynchronousServerSocketChannel : NSObject < JavaNioChannelsAsynchronousChannel, JavaNioChannelsNetworkChannel >

#pragma mark Public

/*!
 @brief Accepts a connection.
 <p> This method initiates an asynchronous operation to accept a
  connection made to this channel's socket. The method behaves in exactly
  the same manner as the <code>accept(Object, CompletionHandler)</code> method
  except that instead of specifying a completion handler, this method
  returns a <code>Future</code> representing the pending result. The <code>Future</code>
 's <code>get</code> method returns the <code>AsynchronousSocketChannel</code>
  to the new connection on successful completion.
 @return a <code>Future</code> object representing the pending result
 @throw AcceptPendingException
 If an accept operation is already in progress on this channel
 @throw NotYetBoundException
 If this channel's socket has not yet been bound
 */
- (id<JavaUtilConcurrentFuture>)accept;

/*!
 @brief Accepts a connection.
 <p> This method initiates an asynchronous operation to accept a
  connection made to this channel's socket. The <code>handler</code> parameter is
  a completion handler that is invoked when a connection is accepted (or
  the operation fails). The result passed to the completion handler is the 
 <code>AsynchronousSocketChannel</code> to the new connection. 
 <p> When a new connection is accepted then the resulting <code>AsynchronousSocketChannel</code>
  will be bound to the same <code>AsynchronousChannelGroup</code>
  as this channel. If the group is <code>shutdown</code>
  and a connection is accepted,
  then the connection is closed, and the operation completes with an <code>IOException</code>
  and cause <code>ShutdownChannelGroupException</code>.
  
 <p> To allow for concurrent handling of new connections, the completion
  handler is not invoked directly by the initiating thread when a new
  connection is accepted immediately (see <a href="AsynchronousChannelGroup.html#threading">
 Threading</a>).
  
 <p> If a security manager has been installed then it verifies that the
  address and port number of the connection's remote endpoint are permitted
  by the security manager's <code>checkAccept</code>
  method. The permission check is performed with privileges that are restricted
  by the calling context of this method. If the permission check fails then
  the connection is closed and the operation completes with a <code>SecurityException</code>
 .
 @param attachment The object to attach to the I/O operation; can be 
 <code>null</code>
 @param handler The handler for consuming the result
 @throw AcceptPendingException
 If an accept operation is already in progress on this channel
 @throw NotYetBoundException
 If this channel's socket has not yet been bound
 @throw ShutdownChannelGroupException
 If the channel group has terminated
 */
- (void)acceptWithId:(id)attachment
withJavaNioChannelsCompletionHandler:(id<JavaNioChannelsCompletionHandler>)handler;

/*!
 @brief Binds the channel's socket to a local address and configures the socket to
  listen for connections.
 <p> An invocation of this method is equivalent to the following: 
 <blockquote>@code

  bind(local, 0); 
  
@endcode</blockquote>
 @param local The local address to bind the socket, or 
  <tt> null </tt>  to bind           to an automatically assigned socket address
 @return This channel
 @throw AlreadyBoundException
 @throw UnsupportedAddressTypeException
 @throw SecurityException
 @throw ClosedChannelException
 @throw IOException
 */
- (JavaNioChannelsAsynchronousServerSocketChannel *)bindWithJavaNetSocketAddress:(JavaNetSocketAddress *)local;

/*!
 @brief Binds the channel's socket to a local address and configures the socket to
  listen for connections.
 <p> This method is used to establish an association between the socket and
  a local address. Once an association is established then the socket remains
  bound until the associated channel is closed. 
 <p> The <code>backlog</code> parameter is the maximum number of pending
  connections on the socket. Its exact semantics are implementation specific.
  In particular, an implementation may impose a maximum length or may choose
  to ignore the parameter altogther. If the <code>backlog</code> parameter has
  the value <code>0</code>, or a negative value, then an implementation specific
  default is used.
 @param local The local address to bind the socket, or 
 <code>null</code>  to bind           to an automatically assigned socket address
 @param backlog The maximum number of pending connections
 @return This channel
 @throw AlreadyBoundException
 If the socket is already bound
 @throw UnsupportedAddressTypeException
 If the type of the given address is not supported
 @throw SecurityException
 If a security manager has been installed and its <code>checkListen</code>
  method denies the operation
 @throw ClosedChannelException
 If the channel is closed
 @throw IOException
 If some other I/O error occurs
 */
- (JavaNioChannelsAsynchronousServerSocketChannel *)bindWithJavaNetSocketAddress:(JavaNetSocketAddress *)local
                                                                         withInt:(jint)backlog;

/*!
 @brief <p>
  If there is a security manager set, its <code>checkConnect</code> method is
  called with the local address and <code>-1</code> as its arguments to see
  if the operation is allowed.
 If the operation is not allowed,
  a <code>SocketAddress</code> representing the 
 <code>loopback</code> address and the
  local port of the channel's socket is returned.
 @return The <code>SocketAddress</code> that the socket is bound to, or the
           <code>SocketAddress</code> representing the loopback address if
           denied by the security manager, or <code>null</code> if the
           channel's socket is not bound
 @throw ClosedChannelException
 @throw IOException
 */
- (JavaNetSocketAddress *)getLocalAddress;

/*!
 @brief Opens an asynchronous server-socket channel.
 <p> This method returns an asynchronous server socket channel that is
  bound to the <em>default group</em>. This method is equivalent to evaluating
  the expression: 
 <blockquote>@code

  open((AsynchronousChannelGroup)null); 
  
@endcode</blockquote>
 @return A new asynchronous server socket channel
 @throw IOException
 If an I/O error occurs
 */
+ (JavaNioChannelsAsynchronousServerSocketChannel *)open;

/*!
 @brief Opens an asynchronous server-socket channel.
 <p> The new channel is created by invoking the <code>openAsynchronousServerSocketChannel</code>
  method on the <code>java.nio.channels.spi.AsynchronousChannelProvider</code>
  object that created
  the given group. If the group parameter is <tt>null</tt> then the
  resulting channel is created by the system-wide default provider, and
  bound to the <em>default group</em>.
 @param group The group to which the newly constructed channel should be bound,
            or  <tt>
  null </tt>  for the default group
 @return A new asynchronous server socket channel
 @throw ShutdownChannelGroupException
 If the channel group is shutdown
 @throw IOException
 If an I/O error occurs
 */
+ (JavaNioChannelsAsynchronousServerSocketChannel *)openWithJavaNioChannelsAsynchronousChannelGroup:(JavaNioChannelsAsynchronousChannelGroup *)group;

/*!
 @brief Returns the provider that created this channel.
 @return The provider that created this channel
 */
- (JavaNioChannelsSpiAsynchronousChannelProvider *)provider;

/*!
 @throw IllegalArgumentException
 @throw ClosedChannelException
 @throw IOException
 */
- (JavaNioChannelsAsynchronousServerSocketChannel *)setOptionWithJavaNetSocketOption:(id<JavaNetSocketOption>)name
                                                                              withId:(id)value;

#pragma mark Protected

/*!
 @brief Initializes a new instance of this class.
 @param provider The provider that created this channel
 */
- (instancetype __nonnull)initWithJavaNioChannelsSpiAsynchronousChannelProvider:(JavaNioChannelsSpiAsynchronousChannelProvider *)provider;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaNioChannelsAsynchronousServerSocketChannel)

FOUNDATION_EXPORT void JavaNioChannelsAsynchronousServerSocketChannel_initWithJavaNioChannelsSpiAsynchronousChannelProvider_(JavaNioChannelsAsynchronousServerSocketChannel *self, JavaNioChannelsSpiAsynchronousChannelProvider *provider);

FOUNDATION_EXPORT JavaNioChannelsAsynchronousServerSocketChannel *JavaNioChannelsAsynchronousServerSocketChannel_openWithJavaNioChannelsAsynchronousChannelGroup_(JavaNioChannelsAsynchronousChannelGroup *group);

FOUNDATION_EXPORT JavaNioChannelsAsynchronousServerSocketChannel *JavaNioChannelsAsynchronousServerSocketChannel_open(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaNioChannelsAsynchronousServerSocketChannel)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaNioChannelsAsynchronousServerSocketChannel")
