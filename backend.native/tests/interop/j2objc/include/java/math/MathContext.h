//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: openjdk/src/share/classes/java/math/MathContext.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaMathMathContext")
#ifdef RESTRICT_JavaMathMathContext
#define INCLUDE_ALL_JavaMathMathContext 0
#else
#define INCLUDE_ALL_JavaMathMathContext 1
#endif
#undef RESTRICT_JavaMathMathContext

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaMathMathContext_) && (INCLUDE_ALL_JavaMathMathContext || defined(INCLUDE_JavaMathMathContext))
#define JavaMathMathContext_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class JavaMathRoundingMode;

/*!
 @brief Immutable objects which encapsulate the context settings which
  describe certain rules for numerical operators, such as those
  implemented by the <code>BigDecimal</code> class.
 <p>The base-independent settings are: 
 <ol>
  <li><code>precision</code>:
  the number of digits to be used for an operation; results are
  rounded to this precision 
 <li><code>roundingMode</code>:
  a <code>RoundingMode</code> object which specifies the algorithm to be
  used for rounding. 
 </ol>
 - seealso: BigDecimal
 - seealso: RoundingMode
 @author Mike Cowlishaw
 @author Joseph D. Darcy
 @since 1.5
 */
@interface JavaMathMathContext : NSObject < JavaIoSerializable > {
 @public
  /*!
   @brief The number of digits to be used for an operation.A value of 0
  indicates that unlimited precision (as many digits as are
  required) will be used.
   Note that leading zeros (in the
  coefficient of a number) are never significant. 
 <p><code>precision</code> will always be non-negative.
   */
  jint precision_;
  /*!
   @brief The rounding algorithm to be used for an operation.
   - seealso: RoundingMode
   */
  JavaMathRoundingMode *roundingMode_;
}
@property (readonly, class, strong) JavaMathMathContext *UNLIMITED NS_SWIFT_NAME(UNLIMITED);
@property (readonly, class, strong) JavaMathMathContext *DECIMAL32 NS_SWIFT_NAME(DECIMAL32);
@property (readonly, class, strong) JavaMathMathContext *DECIMAL64 NS_SWIFT_NAME(DECIMAL64);
@property (readonly, class, strong) JavaMathMathContext *DECIMAL128 NS_SWIFT_NAME(DECIMAL128);

+ (JavaMathMathContext *)UNLIMITED;

+ (JavaMathMathContext *)DECIMAL32;

+ (JavaMathMathContext *)DECIMAL64;

+ (JavaMathMathContext *)DECIMAL128;

#pragma mark Public

/*!
 @brief Constructs a new <code>MathContext</code> with the specified
  precision and the <code>HALF_UP</code> rounding
  mode.
 @param setPrecision The non-negative <code>int</code>  precision setting.
 @throw IllegalArgumentExceptionif the <code>setPrecision</code> parameter is less
          than zero.
 */
- (instancetype __nonnull)initWithInt:(jint)setPrecision;

/*!
 @brief Constructs a new <code>MathContext</code> with a specified
  precision and rounding mode.
 @param setPrecision The non-negative <code>int</code>  precision setting.
 @param setRoundingMode The rounding mode to use.
 @throw IllegalArgumentExceptionif the <code>setPrecision</code> parameter is less
          than zero.
 @throw NullPointerExceptionif the rounding mode argument is <code>null</code>
 */
- (instancetype __nonnull)initWithInt:(jint)setPrecision
             withJavaMathRoundingMode:(JavaMathRoundingMode *)setRoundingMode;

/*!
 @brief Constructs a new <code>MathContext</code> from a string.
 The string must be in the same format as that produced by the 
 <code>toString</code> method. 
 <p>An <code>IllegalArgumentException</code> is thrown if the precision
  section of the string is out of range (<code>< 0</code>) or the string is
  not in the format created by the <code>toString</code> method.
 @param val The string to be parsed
 @throw IllegalArgumentExceptionif the precision section is out of range
  or of incorrect format
 @throw NullPointerExceptionif the argument is <code>null</code>
 */
- (instancetype __nonnull)initWithNSString:(NSString *)val;

/*!
 @brief Compares this <code>MathContext</code> with the specified 
 <code>Object</code> for equality.
 @param x<code>Object</code>  to which this <code>MathContext</code>  is to
           be compared.
 @return <code>true</code> if and only if the specified <code>Object</code> is
          a <code>MathContext</code> object which has exactly the same
          settings as this object
 */
- (jboolean)isEqual:(id)x;

/*!
 @brief Returns the <code>precision</code> setting.
 This value is always non-negative.
 @return an <code>int</code> which is the value of the <code>precision</code>
          setting
 */
- (jint)getPrecision;

/*!
 @brief Returns the roundingMode setting.
 This will be one of 
 <code>RoundingMode.CEILING</code>,
  <code>RoundingMode.DOWN</code>,
  <code>RoundingMode.FLOOR</code>,
  <code>RoundingMode.HALF_DOWN</code>,
  <code>RoundingMode.HALF_EVEN</code>,
  <code>RoundingMode.HALF_UP</code>,
  <code>RoundingMode.UNNECESSARY</code>, or 
 <code>RoundingMode.UP</code>.
 @return a <code>RoundingMode</code> object which is the value of the
          <code>roundingMode</code> setting
 */
- (JavaMathRoundingMode *)getRoundingMode;

/*!
 @brief Returns the hash code for this <code>MathContext</code>.
 @return hash code for this <code>MathContext</code>
 */
- (NSUInteger)hash;

/*!
 @brief Returns the string representation of this <code>MathContext</code>.
 The <code>String</code> returned represents the settings of the 
 <code>MathContext</code> object as two space-delimited words
  (separated by a single space character, <tt>'&#92;u0020'</tt>,
  and with no leading or trailing white space), as follows: 
 <ol>
  <li>
  The string <code>"precision="</code>, immediately followed
  by the value of the precision setting as a numeric string as if
  generated by the <code>Integer.toString</code>
  method. 
 <li>
  The string <code>"roundingMode="</code>, immediately
  followed by the value of the <code>roundingMode</code> setting as a
  word.  This word will be the same as the name of the
  corresponding public constant in the <code>RoundingMode</code>
  enum. 
 </ol>
  <p>
  For example: 
 @code

  precision=9 roundingMode=HALF_UP 
  
@endcode
  Additional words may be appended to the result of 
 <code>toString</code> in the future if more properties are added to
  this class.
 @return a <code>String</code> representing the context settings
 */
- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(JavaMathMathContext)

J2OBJC_FIELD_SETTER(JavaMathMathContext, roundingMode_, JavaMathRoundingMode *)

/*!
 @brief A <code>MathContext</code> object whose settings have the values
   required for unlimited precision arithmetic.
 The values of the settings are:
   <code>
   precision=0 roundingMode=HALF_UP  
 </code>
 */
inline JavaMathMathContext *JavaMathMathContext_get_UNLIMITED(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaMathMathContext *JavaMathMathContext_UNLIMITED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaMathMathContext, UNLIMITED, JavaMathMathContext *)

/*!
 @brief A <code>MathContext</code> object with a precision setting
   matching the IEEE 754R Decimal32 format, 7 digits, and a
   rounding mode of <code>HALF_EVEN</code>, the
   IEEE 754R default.
 */
inline JavaMathMathContext *JavaMathMathContext_get_DECIMAL32(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaMathMathContext *JavaMathMathContext_DECIMAL32;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaMathMathContext, DECIMAL32, JavaMathMathContext *)

/*!
 @brief A <code>MathContext</code> object with a precision setting
   matching the IEEE 754R Decimal64 format, 16 digits, and a
   rounding mode of <code>HALF_EVEN</code>, the
   IEEE 754R default.
 */
inline JavaMathMathContext *JavaMathMathContext_get_DECIMAL64(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaMathMathContext *JavaMathMathContext_DECIMAL64;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaMathMathContext, DECIMAL64, JavaMathMathContext *)

/*!
 @brief A <code>MathContext</code> object with a precision setting
   matching the IEEE 754R Decimal128 format, 34 digits, and a
   rounding mode of <code>HALF_EVEN</code>, the
   IEEE 754R default.
 */
inline JavaMathMathContext *JavaMathMathContext_get_DECIMAL128(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaMathMathContext *JavaMathMathContext_DECIMAL128;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaMathMathContext, DECIMAL128, JavaMathMathContext *)

FOUNDATION_EXPORT void JavaMathMathContext_initWithInt_(JavaMathMathContext *self, jint setPrecision);

FOUNDATION_EXPORT JavaMathMathContext *new_JavaMathMathContext_initWithInt_(jint setPrecision) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaMathMathContext *create_JavaMathMathContext_initWithInt_(jint setPrecision);

FOUNDATION_EXPORT void JavaMathMathContext_initWithInt_withJavaMathRoundingMode_(JavaMathMathContext *self, jint setPrecision, JavaMathRoundingMode *setRoundingMode);

FOUNDATION_EXPORT JavaMathMathContext *new_JavaMathMathContext_initWithInt_withJavaMathRoundingMode_(jint setPrecision, JavaMathRoundingMode *setRoundingMode) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaMathMathContext *create_JavaMathMathContext_initWithInt_withJavaMathRoundingMode_(jint setPrecision, JavaMathRoundingMode *setRoundingMode);

FOUNDATION_EXPORT void JavaMathMathContext_initWithNSString_(JavaMathMathContext *self, NSString *val);

FOUNDATION_EXPORT JavaMathMathContext *new_JavaMathMathContext_initWithNSString_(NSString *val) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaMathMathContext *create_JavaMathMathContext_initWithNSString_(NSString *val);

J2OBJC_TYPE_LITERAL_HEADER(JavaMathMathContext)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaMathMathContext")
