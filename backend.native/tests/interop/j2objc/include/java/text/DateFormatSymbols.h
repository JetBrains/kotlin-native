//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/text/DateFormatSymbols.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaTextDateFormatSymbols")
#ifdef RESTRICT_JavaTextDateFormatSymbols
#define INCLUDE_ALL_JavaTextDateFormatSymbols 0
#else
#define INCLUDE_ALL_JavaTextDateFormatSymbols 1
#endif
#undef RESTRICT_JavaTextDateFormatSymbols

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaTextDateFormatSymbols_) && (INCLUDE_ALL_JavaTextDateFormatSymbols || defined(INCLUDE_JavaTextDateFormatSymbols))
#define JavaTextDateFormatSymbols_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class IOSObjectArray;
@class JavaUtilLocale;

/*!
 @brief <code>DateFormatSymbols</code> is a public class for encapsulating
  localizable date-time formatting data, such as the names of the
  months, the names of the days of the week, and the time zone data.
 <code>DateFormat</code> and <code>SimpleDateFormat</code> both use 
 <code>DateFormatSymbols</code> to encapsulate this information. 
 <p>
  Typically you shouldn't use <code>DateFormatSymbols</code> directly.
  Rather, you are encouraged to create a date-time formatter with the 
 <code>DateFormat</code> class's factory methods: <code>getTimeInstance</code>,
  <code>getDateInstance</code>, or <code>getDateTimeInstance</code>.
  These methods automatically create a <code>DateFormatSymbols</code> for
  the formatter so that you don't have to. After the
  formatter is created, you may modify its format pattern using the 
 <code>setPattern</code> method. For more information about
  creating formatters using <code>DateFormat</code>'s factory methods,
  see <code>DateFormat</code>.
  
 <p>
  If you decide to create a date-time formatter with a specific
  format pattern for a specific locale, you can do so with: 
 <blockquote>
  @code

  new SimpleDateFormat(aPattern, DateFormatSymbols.getInstance(aLocale)). 
  
@endcode
  </blockquote>
  
 <p>
  <code>DateFormatSymbols</code> objects are cloneable. When you obtain
  a <code>DateFormatSymbols</code> object, feel free to modify the
  date-time formatting data. For instance, you can replace the localized
  date-time format pattern characters with the ones that you feel easy
  to remember. Or you can change the representative cities
  to your favorite ones. 
 <p>
  New <code>DateFormatSymbols</code> subclasses may be added to support 
 <code>SimpleDateFormat</code> for date-time formatting for additional locales.
 - seealso: DateFormat
 - seealso: SimpleDateFormat
 - seealso: java.util.SimpleTimeZone
 @author Chen-Lieh Huang
 */
@interface JavaTextDateFormatSymbols : NSObject < JavaIoSerializable, NSCopying > {
 @public
  /*!
   @brief Era strings.For example: "AD" and "BC".
   An array of 2 strings,
  indexed by <code>Calendar.BC</code> and <code>Calendar.AD</code>.
   */
  IOSObjectArray *eras_;
  /*!
   @brief Month strings.For example: "January", "February", etc.
   An array
  of 13 strings (some calendars have 13 months), indexed by 
 <code>Calendar.JANUARY</code>, <code>Calendar.FEBRUARY</code>, etc.
   */
  IOSObjectArray *months_;
  /*!
   @brief Short month strings.For example: "Jan", "Feb", etc.
   An array of
  13 strings (some calendars have 13 months), indexed by 
 <code>Calendar.JANUARY</code>, <code>Calendar.FEBRUARY</code>, etc.
   */
  IOSObjectArray *shortMonths_;
  /*!
   @brief Weekday strings.For example: "Sunday", "Monday", etc.
   An array
  of 8 strings, indexed by <code>Calendar.SUNDAY</code>,
  <code>Calendar.MONDAY</code>, etc.
  The element <code>weekdays[0]</code> is ignored.
   */
  IOSObjectArray *weekdays_;
  /*!
   @brief Short weekday strings.For example: "Sun", "Mon", etc.
   An array
  of 8 strings, indexed by <code>Calendar.SUNDAY</code>,
  <code>Calendar.MONDAY</code>, etc.
  The element <code>shortWeekdays[0]</code> is ignored.
   */
  IOSObjectArray *shortWeekdays_;
  /*!
   @brief AM and PM strings.For example: "AM" and "PM".
   An array of
  2 strings, indexed by <code>Calendar.AM</code> and 
 <code>Calendar.PM</code>.
   */
  IOSObjectArray *ampms_;
  /*!
   @brief Localized names of time zones in this locale.This is a
  two-dimensional array of strings of size <em>n</em> by <em>m</em>,
  where <em>m</em> is at least 5.
   Each of the <em>n</em> rows is an
  entry containing the localized names for a single <code>TimeZone</code>.
  Each such row contains (with <code>i</code> ranging from
  0..<em>n</em>-1):
  <ul>
  <li><code>zoneStrings[i][0]</code> - time zone ID</li>
  <li><code>zoneStrings[i][1]</code> - long name of zone in standard
  time</li>
  <li><code>zoneStrings[i][2]</code> - short name of zone in
  standard time</li>
  <li><code>zoneStrings[i][3]</code> - long name of zone in daylight
  saving time</li>
  <li><code>zoneStrings[i][4]</code> - short name of zone in daylight
  saving time</li>
  </ul>
  The zone ID is <em>not</em> localized; it's one of the valid IDs of the 
 <code>TimeZone</code> class that are not 
 <a href="../java/util/TimeZone.html#CustomID">custom IDs</a>.
  All other entries are localized names.
   - seealso: java.util.TimeZone
   */
  IOSObjectArray *zoneStrings_;
  /*!
   @brief Indicates that zoneStrings is set externally with setZoneStrings() method.
   */
  jboolean isZoneStringsSet_;
  /*!
   @brief Localized date-time pattern characters.For example, a locale may
  wish to use 'u' rather than 'y' to represent years in its date format
  pattern strings.
   This string must be exactly 18 characters long, with the index of
  the characters described by <code>DateFormat.ERA_FIELD</code>,
  <code>DateFormat.YEAR_FIELD</code>, etc.  Thus, if the string were
  "Xz...", then localized patterns would use 'X' for era and 'z' for year.
   */
  NSString *localPatternChars_;
  /*!
   @brief The locale which is used for initializing this DateFormatSymbols object.
   @since 1.6
   */
  JavaUtilLocale *locale_;
}
@property (readonly, copy, class) NSString *patternChars NS_SWIFT_NAME(patternChars);
@property (readonly, class) jint PATTERN_ERA NS_SWIFT_NAME(PATTERN_ERA);
@property (readonly, class) jint PATTERN_YEAR NS_SWIFT_NAME(PATTERN_YEAR);
@property (readonly, class) jint PATTERN_MONTH NS_SWIFT_NAME(PATTERN_MONTH);
@property (readonly, class) jint PATTERN_DAY_OF_MONTH NS_SWIFT_NAME(PATTERN_DAY_OF_MONTH);
@property (readonly, class) jint PATTERN_HOUR_OF_DAY1 NS_SWIFT_NAME(PATTERN_HOUR_OF_DAY1);
@property (readonly, class) jint PATTERN_HOUR_OF_DAY0 NS_SWIFT_NAME(PATTERN_HOUR_OF_DAY0);
@property (readonly, class) jint PATTERN_MINUTE NS_SWIFT_NAME(PATTERN_MINUTE);
@property (readonly, class) jint PATTERN_SECOND NS_SWIFT_NAME(PATTERN_SECOND);
@property (readonly, class) jint PATTERN_MILLISECOND NS_SWIFT_NAME(PATTERN_MILLISECOND);
@property (readonly, class) jint PATTERN_DAY_OF_WEEK NS_SWIFT_NAME(PATTERN_DAY_OF_WEEK);
@property (readonly, class) jint PATTERN_DAY_OF_YEAR NS_SWIFT_NAME(PATTERN_DAY_OF_YEAR);
@property (readonly, class) jint PATTERN_DAY_OF_WEEK_IN_MONTH NS_SWIFT_NAME(PATTERN_DAY_OF_WEEK_IN_MONTH);
@property (readonly, class) jint PATTERN_WEEK_OF_YEAR NS_SWIFT_NAME(PATTERN_WEEK_OF_YEAR);
@property (readonly, class) jint PATTERN_WEEK_OF_MONTH NS_SWIFT_NAME(PATTERN_WEEK_OF_MONTH);
@property (readonly, class) jint PATTERN_AM_PM NS_SWIFT_NAME(PATTERN_AM_PM);
@property (readonly, class) jint PATTERN_HOUR1 NS_SWIFT_NAME(PATTERN_HOUR1);
@property (readonly, class) jint PATTERN_HOUR0 NS_SWIFT_NAME(PATTERN_HOUR0);
@property (readonly, class) jint PATTERN_ZONE_NAME NS_SWIFT_NAME(PATTERN_ZONE_NAME);
@property (readonly, class) jint PATTERN_ZONE_VALUE NS_SWIFT_NAME(PATTERN_ZONE_VALUE);
@property (readonly, class) jint PATTERN_WEEK_YEAR NS_SWIFT_NAME(PATTERN_WEEK_YEAR);
@property (readonly, class) jint PATTERN_ISO_DAY_OF_WEEK NS_SWIFT_NAME(PATTERN_ISO_DAY_OF_WEEK);
@property (readonly, class) jint PATTERN_ISO_ZONE NS_SWIFT_NAME(PATTERN_ISO_ZONE);
@property (readonly, class) jint PATTERN_STANDALONE_MONTH NS_SWIFT_NAME(PATTERN_STANDALONE_MONTH);
@property (readonly, class) jint PATTERN_STANDALONE_DAY_OF_WEEK NS_SWIFT_NAME(PATTERN_STANDALONE_DAY_OF_WEEK);
@property (readonly, class) jint PATTERN_DAY_PERIOD NS_SWIFT_NAME(PATTERN_DAY_PERIOD);
@property (readonly, class) jint PATTERN_FLEXIBLE_DAY_PERIOD NS_SWIFT_NAME(PATTERN_FLEXIBLE_DAY_PERIOD);
@property (readonly, class) jlong serialVersionUID NS_SWIFT_NAME(serialVersionUID);
@property (readonly, class) jint currentSerialVersion NS_SWIFT_NAME(currentSerialVersion);
@property (readonly, class) jint millisPerHour NS_SWIFT_NAME(millisPerHour);

+ (NSString *)patternChars;

+ (jint)PATTERN_ERA;

+ (jint)PATTERN_YEAR;

+ (jint)PATTERN_MONTH;

+ (jint)PATTERN_DAY_OF_MONTH;

+ (jint)PATTERN_HOUR_OF_DAY1;

+ (jint)PATTERN_HOUR_OF_DAY0;

+ (jint)PATTERN_MINUTE;

+ (jint)PATTERN_SECOND;

+ (jint)PATTERN_MILLISECOND;

+ (jint)PATTERN_DAY_OF_WEEK;

+ (jint)PATTERN_DAY_OF_YEAR;

+ (jint)PATTERN_DAY_OF_WEEK_IN_MONTH;

+ (jint)PATTERN_WEEK_OF_YEAR;

+ (jint)PATTERN_WEEK_OF_MONTH;

+ (jint)PATTERN_AM_PM;

+ (jint)PATTERN_HOUR1;

+ (jint)PATTERN_HOUR0;

+ (jint)PATTERN_ZONE_NAME;

+ (jint)PATTERN_ZONE_VALUE;

+ (jint)PATTERN_WEEK_YEAR;

+ (jint)PATTERN_ISO_DAY_OF_WEEK;

+ (jint)PATTERN_ISO_ZONE;

+ (jint)PATTERN_STANDALONE_MONTH;

+ (jint)PATTERN_STANDALONE_DAY_OF_WEEK;

+ (jint)PATTERN_DAY_PERIOD;

+ (jint)PATTERN_FLEXIBLE_DAY_PERIOD;

+ (jlong)serialVersionUID;

+ (jint)currentSerialVersion;

+ (jint)millisPerHour;

#pragma mark Public

/*!
 @brief Construct a DateFormatSymbols object by loading format data from
  resources for the default locale.This constructor can only
  construct instances for the locales supported by the Java
  runtime environment, not for those supported by installed 
 <code>DateFormatSymbolsProvider</code>
  implementations.
 For full locale coverage, use the 
 <code>getInstance</code> method.
 - seealso: #getInstance()
 @throw java.util.MissingResourceException
 if the resources for the default locale cannot be
              found or cannot be loaded.
 */
- (instancetype __nonnull)init;

/*!
 @brief Construct a DateFormatSymbols object by loading format data from
  resources for the given locale.This constructor can only
  construct instances for the locales supported by the Java
  runtime environment, not for those supported by installed 
 <code>DateFormatSymbolsProvider</code>
  implementations.
 For full locale coverage, use the 
 <code>getInstance</code> method.
 - seealso: #getInstance(Locale)
 @throw java.util.MissingResourceException
 if the resources for the specified locale cannot be
              found or cannot be loaded.
 */
- (instancetype __nonnull)initWithJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Overrides Cloneable
 */
- (id)java_clone;

/*!
 @brief Override equals
 */
- (jboolean)isEqual:(id)obj;

/*!
 @brief Gets ampm strings.For example: "AM" and "PM".
 @return the ampm strings.
 */
- (IOSObjectArray *)getAmPmStrings;

/*!
 @brief Returns an array of all locales for which the 
 <code>getInstance</code> methods of this class can return
  localized instances.
 The returned array represents the union of locales supported by the
  Java runtime and by installed 
 <code>DateFormatSymbolsProvider</code>
  implementations.  It must contain at least a <code>Locale</code>
  instance equal to <code>Locale.US</code>.
 @return An array of locales for which localized
          <code>DateFormatSymbols</code> instances are available.
 @since 1.6
 */
+ (IOSObjectArray *)getAvailableLocales;

/*!
 @brief Gets era strings.For example: "AD" and "BC".
 @return the era strings.
 */
- (IOSObjectArray *)getEras;

/*!
 @brief Gets the <code>DateFormatSymbols</code> instance for the default
  locale.This method provides access to <code>DateFormatSymbols</code>
  instances for locales supported by the Java runtime itself as well
  as for those supported by installed 
 <code>DateFormatSymbolsProvider</code>
  implementations.
 @return a <code>DateFormatSymbols</code> instance.
 @since 1.6
 */
+ (JavaTextDateFormatSymbols *)getInstance;

/*!
 @brief Gets the <code>DateFormatSymbols</code> instance for the specified
  locale.This method provides access to <code>DateFormatSymbols</code>
  instances for locales supported by the Java runtime itself as well
  as for those supported by installed 
 <code>DateFormatSymbolsProvider</code>
  implementations.
 @param locale the given locale.
 @return a <code>DateFormatSymbols</code> instance.
 @throw NullPointerExceptionif <code>locale</code> is null
 @since 1.6
 */
+ (JavaTextDateFormatSymbols *)getInstanceWithJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Gets localized date-time pattern characters.For example: 'u', 't', etc.
 @return the localized date-time pattern characters.
 */
- (NSString *)getLocalPatternChars;

/*!
 @brief Gets month strings.For example: "January", "February", etc.
 @return the month strings.
 */
- (IOSObjectArray *)getMonths;

/*!
 @brief Gets short month strings.For example: "Jan", "Feb", etc.
 @return the short month strings.
 */
- (IOSObjectArray *)getShortMonths;

/*!
 @brief Gets short weekday strings.For example: "Sun", "Mon", etc.
 @return the short weekday strings. Use <code>Calendar.SUNDAY</code>,
  <code>Calendar.MONDAY</code>, etc. to index the result array.
 */
- (IOSObjectArray *)getShortWeekdays;

/*!
 @brief Gets weekday strings.For example: "Sunday", "Monday", etc.
 @return the weekday strings. Use <code>Calendar.SUNDAY</code>,
  <code>Calendar.MONDAY</code>, etc. to index the result array.
 */
- (IOSObjectArray *)getWeekdays;

/*!
 @brief Gets time zone strings.Use of this method is discouraged; use 
 <code>TimeZone.getDisplayName()</code>
  instead.
 <p>
  The value returned is a
  two-dimensional array of strings of size <em>n</em> by <em>m</em>,
  where <em>m</em> is at least 5.  Each of the <em>n</em> rows is an
  entry containing the localized names for a single <code>TimeZone</code>.
  Each such row contains (with <code>i</code> ranging from
  0..<em>n</em>-1):
  <ul>
  <li><code>zoneStrings[i][0]</code> - time zone ID</li>
  <li><code>zoneStrings[i][1]</code> - long name of zone in standard
  time</li>
  <li><code>zoneStrings[i][2]</code> - short name of zone in
  standard time</li>
  <li><code>zoneStrings[i][3]</code> - long name of zone in daylight
  saving time</li>
  <li><code>zoneStrings[i][4]</code> - short name of zone in daylight
  saving time</li>
  </ul>
  The zone ID is <em>not</em> localized; it's one of the valid IDs of the 
 <code>TimeZone</code> class that are not 
 <a href="../util/TimeZone.html#CustomID">custom IDs</a>.
  All other entries are localized names.  If a zone does not implement
  daylight saving time, the daylight saving time names should not be used. 
 <p>
  If <code>setZoneStrings</code> has been called
  on this <code>DateFormatSymbols</code> instance, then the strings
  provided by that call are returned. Otherwise, the returned array
  contains names provided by the Java runtime and by installed 
 <code>TimeZoneNameProvider</code>
  implementations.
 @return the time zone strings.
 - seealso: #setZoneStrings(String[][])
 */
- (IOSObjectArray *)getZoneStrings;

/*!
 @brief Override hashCode.
 Generates a hash code for the DateFormatSymbols object.
 */
- (NSUInteger)hash;

/*!
 @brief Sets ampm strings.For example: "AM" and "PM".
 @param newAmpms the new ampm strings.
 */
- (void)setAmPmStringsWithNSStringArray:(IOSObjectArray *)newAmpms;

/*!
 @brief Sets era strings.For example: "AD" and "BC".
 @param newEras the new era strings.
 */
- (void)setErasWithNSStringArray:(IOSObjectArray *)newEras;

/*!
 @brief Sets localized date-time pattern characters.For example: 'u', 't', etc.
 @param newLocalPatternChars the new localized date-time  pattern characters.
 */
- (void)setLocalPatternCharsWithNSString:(NSString *)newLocalPatternChars;

/*!
 @brief Sets month strings.For example: "January", "February", etc.
 @param newMonths the new month strings.
 */
- (void)setMonthsWithNSStringArray:(IOSObjectArray *)newMonths;

/*!
 @brief Sets short month strings.For example: "Jan", "Feb", etc.
 @param newShortMonths the new short month strings.
 */
- (void)setShortMonthsWithNSStringArray:(IOSObjectArray *)newShortMonths;

/*!
 @brief Sets short weekday strings.For example: "Sun", "Mon", etc.
 @param newShortWeekdays the new short weekday strings. The array should  be indexed by 
  <code> Calendar.SUNDAY </code> ,   <code>
  Calendar.MONDAY </code> , etc.
 */
- (void)setShortWeekdaysWithNSStringArray:(IOSObjectArray *)newShortWeekdays;

/*!
 @brief Sets weekday strings.For example: "Sunday", "Monday", etc.
 @param newWeekdays the new weekday strings. The array should  be indexed by 
  <code> Calendar.SUNDAY </code> ,   <code>
  Calendar.MONDAY </code> , etc.
 */
- (void)setWeekdaysWithNSStringArray:(IOSObjectArray *)newWeekdays;

/*!
 @brief Sets time zone strings.The argument must be a
  two-dimensional array of strings of size <em>n</em> by <em>m</em>,
  where <em>m</em> is at least 5.
 Each of the <em>n</em> rows is an
  entry containing the localized names for a single <code>TimeZone</code>.
  Each such row contains (with <code>i</code> ranging from
  0..<em>n</em>-1):
  <ul>
  <li><code>zoneStrings[i][0]</code> - time zone ID</li>
  <li><code>zoneStrings[i][1]</code> - long name of zone in standard
  time</li>
  <li><code>zoneStrings[i][2]</code> - short name of zone in
  standard time</li>
  <li><code>zoneStrings[i][3]</code> - long name of zone in daylight
  saving time</li>
  <li><code>zoneStrings[i][4]</code> - short name of zone in daylight
  saving time</li>
  </ul>
  The zone ID is <em>not</em> localized; it's one of the valid IDs of the 
 <code>TimeZone</code> class that are not 
 <a href="../util/TimeZone.html#CustomID">custom IDs</a>.
  All other entries are localized names.
 @param newZoneStrings the new time zone strings.
 @throw IllegalArgumentExceptionif the length of any row in
     <code>newZoneStrings</code> is less than 5
 @throw NullPointerExceptionif <code>newZoneStrings</code> is null
 - seealso: #getZoneStrings()
 */
- (void)setZoneStringsWithNSStringArray2:(IOSObjectArray *)newZoneStrings;

#pragma mark Package-Private

/*!
 @brief Returns a DateFormatSymbols provided by a provider or found in
  the cache.Note that this method returns a cached instance,
  not its clone.
 Therefore, the instance should never be given to
  an application.
 */
+ (JavaTextDateFormatSymbols *)getInstanceRefWithJavaUtilLocale:(JavaUtilLocale *)locale;

- (IOSObjectArray *)getShortStandAloneMonths;

- (IOSObjectArray *)getShortStandAloneWeekdays;

- (IOSObjectArray *)getStandAloneMonths;

- (IOSObjectArray *)getStandAloneWeekdays;

- (IOSObjectArray *)getTinyMonths;

- (IOSObjectArray *)getTinyStandAloneMonths;

- (IOSObjectArray *)getTinyStandAloneWeekdays;

- (IOSObjectArray *)getTinyWeekdays;

/*!
 @brief Package private: used by SimpleDateFormat
  Gets the index for the given time zone ID to obtain the time zone
  strings for formatting.The time zone ID is just for programmatic
  lookup.
 NOT LOCALIZED!!!
 @param ID the given time zone ID.
 @return the index of the given time zone ID.  Returns -1 if
  the given time zone ID can't be located in the DateFormatSymbols object.
 - seealso: java.util.SimpleTimeZone
 */
- (jint)getZoneIndexWithNSString:(NSString *)ID;

/*!
 @brief Wrapper method to the getZoneStrings(), which is called from inside
  the java.text package and not to mutate the returned arrays, so that
  it does not need to create a defensive copy.
 */
- (IOSObjectArray *)getZoneStringsWrapper;

@end

J2OBJC_STATIC_INIT(JavaTextDateFormatSymbols)

J2OBJC_FIELD_SETTER(JavaTextDateFormatSymbols, eras_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(JavaTextDateFormatSymbols, months_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(JavaTextDateFormatSymbols, shortMonths_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(JavaTextDateFormatSymbols, weekdays_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(JavaTextDateFormatSymbols, shortWeekdays_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(JavaTextDateFormatSymbols, ampms_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(JavaTextDateFormatSymbols, zoneStrings_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(JavaTextDateFormatSymbols, localPatternChars_, NSString *)
J2OBJC_FIELD_SETTER(JavaTextDateFormatSymbols, locale_, JavaUtilLocale *)

/*!
 @brief Unlocalized date-time pattern characters.For example: 'y', 'd', etc.
 All locales use the same these unlocalized pattern characters.
  Pretend to support 'L' and 'c' for now. It's meant for standalone weekday and
  month names, but we just use the non-standalone versions for now.
 */
inline NSString *JavaTextDateFormatSymbols_get_patternChars(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *JavaTextDateFormatSymbols_patternChars;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaTextDateFormatSymbols, patternChars, NSString *)

inline jint JavaTextDateFormatSymbols_get_PATTERN_ERA(void);
#define JavaTextDateFormatSymbols_PATTERN_ERA 0
J2OBJC_STATIC_FIELD_CONSTANT(JavaTextDateFormatSymbols, PATTERN_ERA, jint)

inline jint JavaTextDateFormatSymbols_get_PATTERN_YEAR(void);
#define JavaTextDateFormatSymbols_PATTERN_YEAR 1
J2OBJC_STATIC_FIELD_CONSTANT(JavaTextDateFormatSymbols, PATTERN_YEAR, jint)

inline jint JavaTextDateFormatSymbols_get_PATTERN_MONTH(void);
#define JavaTextDateFormatSymbols_PATTERN_MONTH 2
J2OBJC_STATIC_FIELD_CONSTANT(JavaTextDateFormatSymbols, PATTERN_MONTH, jint)

inline jint JavaTextDateFormatSymbols_get_PATTERN_DAY_OF_MONTH(void);
#define JavaTextDateFormatSymbols_PATTERN_DAY_OF_MONTH 3
J2OBJC_STATIC_FIELD_CONSTANT(JavaTextDateFormatSymbols, PATTERN_DAY_OF_MONTH, jint)

inline jint JavaTextDateFormatSymbols_get_PATTERN_HOUR_OF_DAY1(void);
#define JavaTextDateFormatSymbols_PATTERN_HOUR_OF_DAY1 4
J2OBJC_STATIC_FIELD_CONSTANT(JavaTextDateFormatSymbols, PATTERN_HOUR_OF_DAY1, jint)

inline jint JavaTextDateFormatSymbols_get_PATTERN_HOUR_OF_DAY0(void);
#define JavaTextDateFormatSymbols_PATTERN_HOUR_OF_DAY0 5
J2OBJC_STATIC_FIELD_CONSTANT(JavaTextDateFormatSymbols, PATTERN_HOUR_OF_DAY0, jint)

inline jint JavaTextDateFormatSymbols_get_PATTERN_MINUTE(void);
#define JavaTextDateFormatSymbols_PATTERN_MINUTE 6
J2OBJC_STATIC_FIELD_CONSTANT(JavaTextDateFormatSymbols, PATTERN_MINUTE, jint)

inline jint JavaTextDateFormatSymbols_get_PATTERN_SECOND(void);
#define JavaTextDateFormatSymbols_PATTERN_SECOND 7
J2OBJC_STATIC_FIELD_CONSTANT(JavaTextDateFormatSymbols, PATTERN_SECOND, jint)

inline jint JavaTextDateFormatSymbols_get_PATTERN_MILLISECOND(void);
#define JavaTextDateFormatSymbols_PATTERN_MILLISECOND 8
J2OBJC_STATIC_FIELD_CONSTANT(JavaTextDateFormatSymbols, PATTERN_MILLISECOND, jint)

inline jint JavaTextDateFormatSymbols_get_PATTERN_DAY_OF_WEEK(void);
#define JavaTextDateFormatSymbols_PATTERN_DAY_OF_WEEK 9
J2OBJC_STATIC_FIELD_CONSTANT(JavaTextDateFormatSymbols, PATTERN_DAY_OF_WEEK, jint)

inline jint JavaTextDateFormatSymbols_get_PATTERN_DAY_OF_YEAR(void);
#define JavaTextDateFormatSymbols_PATTERN_DAY_OF_YEAR 10
J2OBJC_STATIC_FIELD_CONSTANT(JavaTextDateFormatSymbols, PATTERN_DAY_OF_YEAR, jint)

inline jint JavaTextDateFormatSymbols_get_PATTERN_DAY_OF_WEEK_IN_MONTH(void);
#define JavaTextDateFormatSymbols_PATTERN_DAY_OF_WEEK_IN_MONTH 11
J2OBJC_STATIC_FIELD_CONSTANT(JavaTextDateFormatSymbols, PATTERN_DAY_OF_WEEK_IN_MONTH, jint)

inline jint JavaTextDateFormatSymbols_get_PATTERN_WEEK_OF_YEAR(void);
#define JavaTextDateFormatSymbols_PATTERN_WEEK_OF_YEAR 12
J2OBJC_STATIC_FIELD_CONSTANT(JavaTextDateFormatSymbols, PATTERN_WEEK_OF_YEAR, jint)

inline jint JavaTextDateFormatSymbols_get_PATTERN_WEEK_OF_MONTH(void);
#define JavaTextDateFormatSymbols_PATTERN_WEEK_OF_MONTH 13
J2OBJC_STATIC_FIELD_CONSTANT(JavaTextDateFormatSymbols, PATTERN_WEEK_OF_MONTH, jint)

inline jint JavaTextDateFormatSymbols_get_PATTERN_AM_PM(void);
#define JavaTextDateFormatSymbols_PATTERN_AM_PM 14
J2OBJC_STATIC_FIELD_CONSTANT(JavaTextDateFormatSymbols, PATTERN_AM_PM, jint)

inline jint JavaTextDateFormatSymbols_get_PATTERN_HOUR1(void);
#define JavaTextDateFormatSymbols_PATTERN_HOUR1 15
J2OBJC_STATIC_FIELD_CONSTANT(JavaTextDateFormatSymbols, PATTERN_HOUR1, jint)

inline jint JavaTextDateFormatSymbols_get_PATTERN_HOUR0(void);
#define JavaTextDateFormatSymbols_PATTERN_HOUR0 16
J2OBJC_STATIC_FIELD_CONSTANT(JavaTextDateFormatSymbols, PATTERN_HOUR0, jint)

inline jint JavaTextDateFormatSymbols_get_PATTERN_ZONE_NAME(void);
#define JavaTextDateFormatSymbols_PATTERN_ZONE_NAME 17
J2OBJC_STATIC_FIELD_CONSTANT(JavaTextDateFormatSymbols, PATTERN_ZONE_NAME, jint)

inline jint JavaTextDateFormatSymbols_get_PATTERN_ZONE_VALUE(void);
#define JavaTextDateFormatSymbols_PATTERN_ZONE_VALUE 18
J2OBJC_STATIC_FIELD_CONSTANT(JavaTextDateFormatSymbols, PATTERN_ZONE_VALUE, jint)

inline jint JavaTextDateFormatSymbols_get_PATTERN_WEEK_YEAR(void);
#define JavaTextDateFormatSymbols_PATTERN_WEEK_YEAR 19
J2OBJC_STATIC_FIELD_CONSTANT(JavaTextDateFormatSymbols, PATTERN_WEEK_YEAR, jint)

inline jint JavaTextDateFormatSymbols_get_PATTERN_ISO_DAY_OF_WEEK(void);
#define JavaTextDateFormatSymbols_PATTERN_ISO_DAY_OF_WEEK 20
J2OBJC_STATIC_FIELD_CONSTANT(JavaTextDateFormatSymbols, PATTERN_ISO_DAY_OF_WEEK, jint)

inline jint JavaTextDateFormatSymbols_get_PATTERN_ISO_ZONE(void);
#define JavaTextDateFormatSymbols_PATTERN_ISO_ZONE 21
J2OBJC_STATIC_FIELD_CONSTANT(JavaTextDateFormatSymbols, PATTERN_ISO_ZONE, jint)

inline jint JavaTextDateFormatSymbols_get_PATTERN_STANDALONE_MONTH(void);
#define JavaTextDateFormatSymbols_PATTERN_STANDALONE_MONTH 22
J2OBJC_STATIC_FIELD_CONSTANT(JavaTextDateFormatSymbols, PATTERN_STANDALONE_MONTH, jint)

inline jint JavaTextDateFormatSymbols_get_PATTERN_STANDALONE_DAY_OF_WEEK(void);
#define JavaTextDateFormatSymbols_PATTERN_STANDALONE_DAY_OF_WEEK 23
J2OBJC_STATIC_FIELD_CONSTANT(JavaTextDateFormatSymbols, PATTERN_STANDALONE_DAY_OF_WEEK, jint)

inline jint JavaTextDateFormatSymbols_get_PATTERN_DAY_PERIOD(void);
#define JavaTextDateFormatSymbols_PATTERN_DAY_PERIOD 24
J2OBJC_STATIC_FIELD_CONSTANT(JavaTextDateFormatSymbols, PATTERN_DAY_PERIOD, jint)

inline jint JavaTextDateFormatSymbols_get_PATTERN_FLEXIBLE_DAY_PERIOD(void);
#define JavaTextDateFormatSymbols_PATTERN_FLEXIBLE_DAY_PERIOD 25
J2OBJC_STATIC_FIELD_CONSTANT(JavaTextDateFormatSymbols, PATTERN_FLEXIBLE_DAY_PERIOD, jint)

inline jlong JavaTextDateFormatSymbols_get_serialVersionUID(void);
#define JavaTextDateFormatSymbols_serialVersionUID -5987973545549424702LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaTextDateFormatSymbols, serialVersionUID, jlong)

inline jint JavaTextDateFormatSymbols_get_currentSerialVersion(void);
#define JavaTextDateFormatSymbols_currentSerialVersion 1
J2OBJC_STATIC_FIELD_CONSTANT(JavaTextDateFormatSymbols, currentSerialVersion, jint)

/*!
 @brief Useful constant for defining time zone offsets.
 */
inline jint JavaTextDateFormatSymbols_get_millisPerHour(void);
#define JavaTextDateFormatSymbols_millisPerHour 3600000
J2OBJC_STATIC_FIELD_CONSTANT(JavaTextDateFormatSymbols, millisPerHour, jint)

FOUNDATION_EXPORT void JavaTextDateFormatSymbols_init(JavaTextDateFormatSymbols *self);

FOUNDATION_EXPORT JavaTextDateFormatSymbols *new_JavaTextDateFormatSymbols_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaTextDateFormatSymbols *create_JavaTextDateFormatSymbols_init(void);

FOUNDATION_EXPORT void JavaTextDateFormatSymbols_initWithJavaUtilLocale_(JavaTextDateFormatSymbols *self, JavaUtilLocale *locale);

FOUNDATION_EXPORT JavaTextDateFormatSymbols *new_JavaTextDateFormatSymbols_initWithJavaUtilLocale_(JavaUtilLocale *locale) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaTextDateFormatSymbols *create_JavaTextDateFormatSymbols_initWithJavaUtilLocale_(JavaUtilLocale *locale);

FOUNDATION_EXPORT IOSObjectArray *JavaTextDateFormatSymbols_getAvailableLocales(void);

FOUNDATION_EXPORT JavaTextDateFormatSymbols *JavaTextDateFormatSymbols_getInstance(void);

FOUNDATION_EXPORT JavaTextDateFormatSymbols *JavaTextDateFormatSymbols_getInstanceWithJavaUtilLocale_(JavaUtilLocale *locale);

FOUNDATION_EXPORT JavaTextDateFormatSymbols *JavaTextDateFormatSymbols_getInstanceRefWithJavaUtilLocale_(JavaUtilLocale *locale);

J2OBJC_TYPE_LITERAL_HEADER(JavaTextDateFormatSymbols)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaTextDateFormatSymbols")
