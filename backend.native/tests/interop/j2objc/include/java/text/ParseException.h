//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/text/ParseException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaTextParseException")
#ifdef RESTRICT_JavaTextParseException
#define INCLUDE_ALL_JavaTextParseException 0
#else
#define INCLUDE_ALL_JavaTextParseException 1
#endif
#undef RESTRICT_JavaTextParseException

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaTextParseException_) && (INCLUDE_ALL_JavaTextParseException || defined(INCLUDE_JavaTextParseException))
#define JavaTextParseException_

#define RESTRICT_JavaLangException 1
#define INCLUDE_JavaLangException 1
#include "java/lang/Exception.h"

@class JavaLangThrowable;

/*!
 @brief Signals that an error has been reached unexpectedly
  while parsing.
 - seealso: java.lang.Exception
 - seealso: java.text.Format
 - seealso: java.text.FieldPosition
 @author Mark Davis
 */
@interface JavaTextParseException : JavaLangException

#pragma mark Public

/*!
 @brief Constructs a ParseException with the specified detail message and
  offset.
 A detail message is a String that describes this particular exception.
 @param s the detail message
 @param errorOffset the position where the error is found while parsing.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)s
                                   withInt:(jint)errorOffset;

/*!
 @brief Returns the position where the error was found.
 @return the position where the error was found
 */
- (jint)getErrorOffset;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1
                               withBoolean:(jboolean)arg2
                               withBoolean:(jboolean)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaTextParseException)

FOUNDATION_EXPORT void JavaTextParseException_initWithNSString_withInt_(JavaTextParseException *self, NSString *s, jint errorOffset);

FOUNDATION_EXPORT JavaTextParseException *new_JavaTextParseException_initWithNSString_withInt_(NSString *s, jint errorOffset) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaTextParseException *create_JavaTextParseException_initWithNSString_withInt_(NSString *s, jint errorOffset);

J2OBJC_TYPE_LITERAL_HEADER(JavaTextParseException)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaTextParseException")
