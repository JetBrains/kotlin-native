//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/text/DecimalFormatSymbols.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaTextDecimalFormatSymbols")
#ifdef RESTRICT_JavaTextDecimalFormatSymbols
#define INCLUDE_ALL_JavaTextDecimalFormatSymbols 0
#else
#define INCLUDE_ALL_JavaTextDecimalFormatSymbols 1
#endif
#undef RESTRICT_JavaTextDecimalFormatSymbols

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaTextDecimalFormatSymbols_) && (INCLUDE_ALL_JavaTextDecimalFormatSymbols || defined(INCLUDE_JavaTextDecimalFormatSymbols))
#define JavaTextDecimalFormatSymbols_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class IOSObjectArray;
@class JavaUtilCurrency;
@class JavaUtilLocale;

/*!
 @brief This class represents the set of symbols (such as the decimal separator,
  the grouping separator, and so on) needed by <code>DecimalFormat</code>
  to format numbers.
 <code>DecimalFormat</code> creates for itself an instance of 
 <code>DecimalFormatSymbols</code> from its locale data.  If you need to change any
  of these symbols, you can get the <code>DecimalFormatSymbols</code> object from
  your <code>DecimalFormat</code> and modify it.
 - seealso: java.util.Locale
 - seealso: DecimalFormat
 @author Mark Davis
 @author Alan Liu
 */
@interface JavaTextDecimalFormatSymbols : NSObject < NSCopying, JavaIoSerializable >
@property (readonly, class) jlong serialVersionUID NS_SWIFT_NAME(serialVersionUID);

+ (jlong)serialVersionUID;

#pragma mark Public

/*!
 @brief Create a DecimalFormatSymbols object for the default 
 <code>FORMAT</code> locale.
 It is recommended that the <code>getInstance</code> method is used
  instead. 
 <p>This is equivalent to calling 
 <code>DecimalFormatSymbols(Locale.getDefault(Locale.Category.FORMAT))</code>
 .
 - seealso: java.util.Locale#getDefault(java.util.Locale.Category)
 - seealso: java.util.Locale.Category#FORMAT
 */
- (instancetype __nonnull)init;

/*!
 @brief Create a DecimalFormatSymbols object for the given locale.
 It is recommended that the <code>getInstance</code> method is used
  instead.
  If the specified locale contains the <code>java.util.Locale.UNICODE_LOCALE_EXTENSION</code>
  for the numbering system, the instance is initialized with the specified numbering
  system if the JRE implementation supports it. For example, 
 @code

  NumberFormat.getNumberInstance(Locale.forLanguageTag("th-TH-u-nu-thai")) 
  
@endcode
  This may return a <code>NumberFormat</code> instance with the Thai numbering system,
  instead of the Latin numbering system.
 @param locale the desired locale
 @throw NullPointerExceptionif <code>locale</code> is null
 */
- (instancetype __nonnull)initWithJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Standard override.
 */
- (id)java_clone;

/*!
 @brief Override equals.
 */
- (jboolean)isEqual:(id)obj;

/*!
 @brief Returns an array of all locales for which the 
 <code>getInstance</code> methods of this class can return
  localized instances.
 @return an array of locales for which localized
          <code>DecimalFormatSymbols</code> instances are available.
 @since 1.6
 */
+ (IOSObjectArray *)getAvailableLocales;

/*!
 @brief Gets the currency of these DecimalFormatSymbols.May be null if the
  currency symbol attribute was previously set to a value that's not
  a valid ISO 4217 currency code.
 @return the currency used, or null
 @since 1.4
 */
- (JavaUtilCurrency *)getCurrency;

/*!
 @brief Returns the currency symbol for the currency of these
  DecimalFormatSymbols in their locale.
 @return the currency symbol
 @since 1.2
 */
- (NSString *)getCurrencySymbol;

/*!
 @brief Gets the character used for decimal sign.Different for French, etc.
 @return the character used for decimal sign
 */
- (jchar)getDecimalSeparator;

/*!
 @brief Gets the character used for a digit in a pattern.
 @return the character used for a digit in a pattern
 */
- (jchar)getDigit;

/*!
 @brief Returns the string used to separate the mantissa from the exponent.
 Examples: "x10^" for 1.23x10^4, "E" for 1.23E4.
 @return the exponent separator string
 - seealso: #setExponentSeparator(java.lang.String)
 @since 1.6
 */
- (NSString *)getExponentSeparator;

/*!
 @brief Gets the character used for thousands separator.Different for French, etc.
 @return the grouping separator
 */
- (jchar)getGroupingSeparator;

/*!
 @brief Gets the string used to represent infinity.Almost always left
  unchanged.
 @return the string representing infinity
 */
- (NSString *)getInfinity;

/*!
 @brief Gets the <code>DecimalFormatSymbols</code> instance for the default
  locale.
 <p>This is equivalent to calling 
 <code>getInstance(Locale.getDefault(Locale.Category.FORMAT))</code>
 .
 - seealso: java.util.Locale#getDefault(java.util.Locale.Category)
 - seealso: java.util.Locale.Category#FORMAT
 @return a <code>DecimalFormatSymbols</code> instance.
 @since 1.6
 */
+ (JavaTextDecimalFormatSymbols *)getInstance;

/*!
 @brief Gets the <code>DecimalFormatSymbols</code> instance for the specified
  locale.
 If the specified locale contains the <code>java.util.Locale.UNICODE_LOCALE_EXTENSION</code>
  for the numbering system, the instance is initialized with the specified numbering
  system if the JRE implementation supports it. For example, 
 @code

  NumberFormat.getNumberInstance(Locale.forLanguageTag("th-TH-u-nu-thai")) 
  
@endcode
  This may return a <code>NumberFormat</code> instance with the Thai numbering system,
  instead of the Latin numbering system.
 @param locale the desired locale.
 @return a <code>DecimalFormatSymbols</code> instance.
 @throw NullPointerExceptionif <code>locale</code> is null
 @since 1.6
 */
+ (JavaTextDecimalFormatSymbols *)getInstanceWithJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Returns the ISO 4217 currency code of the currency of these
  DecimalFormatSymbols.
 @return the currency code
 @since 1.2
 */
- (NSString *)getInternationalCurrencySymbol;

/*!
 @brief Gets the character used to represent minus sign.If no explicit
  negative format is specified, one is formed by prefixing
  minusSign to the positive format.
 @return the character representing minus sign
 */
- (jchar)getMinusSign;

/*!
 @brief Gets the string used to represent minus sign.If no explicit
  negative format is specified, one is formed by prefixing
  minusSign to the positive format.
 */
- (NSString *)getMinusSignString;

/*!
 @brief Returns the monetary decimal separator.
 @return the monetary decimal separator
 @since 1.2
 */
- (jchar)getMonetaryDecimalSeparator;

/*!
 @brief Gets the string used to represent "not a number".Almost always left
  unchanged.
 @return the string representing "not a number"
 */
- (NSString *)getNaN;

/*!
 @brief Gets the character used to separate positive and negative subpatterns
  in a pattern.
 @return the pattern separator
 */
- (jchar)getPatternSeparator;

/*!
 @brief Gets the character used for percent sign.Different for Arabic, etc.
 @return the character used for percent sign
 */
- (jchar)getPercent;

/*!
 @brief Gets the string used for percent sign.Different for Arabic, etc.
 */
- (NSString *)getPercentString;

/*!
 @brief Gets the character used for per mille sign.Different for Arabic, etc.
 @return the character used for per mille sign
 */
- (jchar)getPerMill;

/*!
 @brief Gets the character used for zero.Different for Arabic, etc.
 @return the character used for zero
 */
- (jchar)getZeroDigit;

/*!
 @brief Override hashCode.
 */
- (NSUInteger)hash;

/*!
 @brief Sets the currency of these DecimalFormatSymbols.
 This also sets the currency symbol attribute to the currency's symbol
  in the DecimalFormatSymbols' locale, and the international currency
  symbol attribute to the currency's ISO 4217 currency code.
 @param currency the new currency to be used
 @throw NullPointerExceptionif <code>currency</code> is null
 @since 1.4
 - seealso: #setCurrencySymbol
 - seealso: #setInternationalCurrencySymbol
 */
- (void)setCurrencyWithJavaUtilCurrency:(JavaUtilCurrency *)currency;

/*!
 @brief Sets the currency symbol for the currency of these
  DecimalFormatSymbols in their locale.
 @param currency the currency symbol
 @since 1.2
 */
- (void)setCurrencySymbolWithNSString:(NSString *)currency;

/*!
 @brief Sets the character used for decimal sign.Different for French, etc.
 @param decimalSeparator the character used for decimal sign
 */
- (void)setDecimalSeparatorWithChar:(jchar)decimalSeparator;

/*!
 @brief Sets the character used for a digit in a pattern.
 @param digit the character used for a digit in a pattern
 */
- (void)setDigitWithChar:(jchar)digit;

/*!
 @brief Sets the string used to separate the mantissa from the exponent.
 Examples: "x10^" for 1.23x10^4, "E" for 1.23E4.
 @param exp the exponent separator string
 @throw NullPointerExceptionif <code>exp</code> is null
 - seealso: #getExponentSeparator()
 @since 1.6
 */
- (void)setExponentSeparatorWithNSString:(NSString *)exp;

/*!
 @brief Sets the character used for thousands separator.Different for French, etc.
 @param groupingSeparator the grouping separator
 */
- (void)setGroupingSeparatorWithChar:(jchar)groupingSeparator;

/*!
 @brief Sets the string used to represent infinity.Almost always left
  unchanged.
 @param infinity the string representing infinity
 */
- (void)setInfinityWithNSString:(NSString *)infinity;

/*!
 @brief Sets the ISO 4217 currency code of the currency of these
  DecimalFormatSymbols.
 If the currency code is valid (as defined by 
 <code>Currency.getInstance</code>),
  this also sets the currency attribute to the corresponding Currency
  instance and the currency symbol attribute to the currency's symbol
  in the DecimalFormatSymbols' locale. If the currency code is not valid,
  then the currency attribute is set to null and the currency symbol
  attribute is not modified.
 @param currencyCode the currency code
 - seealso: #setCurrency
 - seealso: #setCurrencySymbol
 @since 1.2
 */
- (void)setInternationalCurrencySymbolWithNSString:(NSString *)currencyCode;

/*!
 @brief Sets the character used to represent minus sign.If no explicit
  negative format is specified, one is formed by prefixing
  minusSign to the positive format.
 @param minusSign the character representing minus sign
 */
- (void)setMinusSignWithChar:(jchar)minusSign;

/*!
 @brief Sets the monetary decimal separator.
 @param sep the monetary decimal separator
 @since 1.2
 */
- (void)setMonetaryDecimalSeparatorWithChar:(jchar)sep;

/*!
 @brief Sets the string used to represent "not a number".Almost always left
  unchanged.
 @param NaN the string representing "not a number"
 */
- (void)setNaNWithNSString:(NSString *)NaN;

/*!
 @brief Sets the character used to separate positive and negative subpatterns
  in a pattern.
 @param patternSeparator the pattern separator
 */
- (void)setPatternSeparatorWithChar:(jchar)patternSeparator;

/*!
 @brief Sets the character used for percent sign.Different for Arabic, etc.
 @param percent the character used for percent sign
 */
- (void)setPercentWithChar:(jchar)percent;

/*!
 @brief Sets the character used for per mille sign.Different for Arabic, etc.
 @param perMill the character used for per mille sign
 */
- (void)setPerMillWithChar:(jchar)perMill;

/*!
 @brief Sets the character used for zero.Different for Arabic, etc.
 @param zeroDigit the character used for zero
 */
- (void)setZeroDigitWithChar:(jchar)zeroDigit;

#pragma mark Package-Private

/*!
 @brief Returns the character used to separate the mantissa from the exponent.
 */
- (jchar)getExponentialSymbol;

/*!
 @brief Sets the character used to separate the mantissa from the exponent.
 */
- (void)setExponentialSymbolWithChar:(jchar)exp;

@end

J2OBJC_STATIC_INIT(JavaTextDecimalFormatSymbols)

inline jlong JavaTextDecimalFormatSymbols_get_serialVersionUID(void);
#define JavaTextDecimalFormatSymbols_serialVersionUID 5772796243397350300LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaTextDecimalFormatSymbols, serialVersionUID, jlong)

FOUNDATION_EXPORT void JavaTextDecimalFormatSymbols_init(JavaTextDecimalFormatSymbols *self);

FOUNDATION_EXPORT JavaTextDecimalFormatSymbols *new_JavaTextDecimalFormatSymbols_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaTextDecimalFormatSymbols *create_JavaTextDecimalFormatSymbols_init(void);

FOUNDATION_EXPORT void JavaTextDecimalFormatSymbols_initWithJavaUtilLocale_(JavaTextDecimalFormatSymbols *self, JavaUtilLocale *locale);

FOUNDATION_EXPORT JavaTextDecimalFormatSymbols *new_JavaTextDecimalFormatSymbols_initWithJavaUtilLocale_(JavaUtilLocale *locale) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaTextDecimalFormatSymbols *create_JavaTextDecimalFormatSymbols_initWithJavaUtilLocale_(JavaUtilLocale *locale);

FOUNDATION_EXPORT IOSObjectArray *JavaTextDecimalFormatSymbols_getAvailableLocales(void);

FOUNDATION_EXPORT JavaTextDecimalFormatSymbols *JavaTextDecimalFormatSymbols_getInstance(void);

FOUNDATION_EXPORT JavaTextDecimalFormatSymbols *JavaTextDecimalFormatSymbols_getInstanceWithJavaUtilLocale_(JavaUtilLocale *locale);

J2OBJC_TYPE_LITERAL_HEADER(JavaTextDecimalFormatSymbols)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaTextDecimalFormatSymbols")
