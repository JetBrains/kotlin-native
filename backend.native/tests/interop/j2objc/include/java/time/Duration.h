//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/time/Duration.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaTimeDuration")
#ifdef RESTRICT_JavaTimeDuration
#define INCLUDE_ALL_JavaTimeDuration 0
#else
#define INCLUDE_ALL_JavaTimeDuration 1
#endif
#undef RESTRICT_JavaTimeDuration

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaTimeDuration_) && (INCLUDE_ALL_JavaTimeDuration || defined(INCLUDE_JavaTimeDuration))
#define JavaTimeDuration_

#define RESTRICT_JavaTimeTemporalTemporalAmount 1
#define INCLUDE_JavaTimeTemporalTemporalAmount 1
#include "java/time/temporal/TemporalAmount.h"

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "java/lang/Comparable.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@protocol JavaIoDataInput;
@protocol JavaIoDataOutput;
@protocol JavaLangCharSequence;
@protocol JavaTimeTemporalTemporal;
@protocol JavaTimeTemporalTemporalUnit;
@protocol JavaUtilList;

/*!
 @brief A time-based amount of time, such as '34.5 seconds'.
 <p>
  This class models a quantity or amount of time in terms of seconds and nanoseconds.
  It can be accessed using other duration-based units, such as minutes and hours.
  In addition, the <code>DAYS</code> unit can be used and is treated as
  exactly equal to 24 hours, thus ignoring daylight savings effects.
  See <code>Period</code> for the date-based equivalent to this class. 
 <p>
  A physical duration could be of infinite length.
  For practicality, the duration is stored with constraints similar to <code>Instant</code>.
  The duration uses nanosecond resolution with a maximum value of the seconds that can
  be held in a <code>long</code>. This is greater than the current estimated age of the universe. 
 <p>
  The range of a duration requires the storage of a number larger than a <code>long</code>.
  To achieve this, the class stores a <code>long</code> representing seconds and an <code>int</code>
  representing nanosecond-of-second, which will always be between 0 and 999,999,999.
  The model is of a directed duration, meaning that the duration may be negative. 
 <p>
  The duration is measured in "seconds", but these are not necessarily identical to
  the scientific "SI second" definition based on atomic clocks.
  This difference only impacts durations measured near a leap-second and should not affect
  most applications.
  See <code>Instant</code> for a discussion as to the meaning of the second and time-scales.
 @since 1.8
 */
@interface JavaTimeDuration : NSObject < JavaTimeTemporalTemporalAmount, JavaLangComparable, JavaIoSerializable >
@property (readonly, class, strong) JavaTimeDuration *ZERO NS_SWIFT_NAME(ZERO);

+ (JavaTimeDuration *)ZERO;

#pragma mark Public

/*!
 @brief Returns a copy of this duration with a positive length.
 <p>
  This method returns a positive duration by effectively removing the sign from any negative total length.
  For example, <code>PT-1.3S</code> will be returned as <code>PT1.3S</code>.
  <p>
  This instance is immutable and unaffected by this method call.
 @return a <code>Duration</code> based on this duration with an absolute length, not null
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeDuration *)abs;

/*!
 @brief Adds this duration to the specified temporal object.
 <p>
  This returns a temporal object of the same observable type as the input
  with this duration added. 
 <p>
  In most cases, it is clearer to reverse the calling pattern by using 
 <code>Temporal.plus(TemporalAmount)</code>.
  @code

    // these two lines are equivalent, but the second approach is recommended
    dateTime = thisDuration.addTo(dateTime);
    dateTime = dateTime.plus(thisDuration); 
  
@endcode
  <p>
  The calculation will add the seconds, then nanos.
  Only non-zero amounts will be added. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param temporal the temporal object to adjust, not null
 @return an object of the same type with the adjustment made, not null
 @throw DateTimeExceptionif unable to add
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (id<JavaTimeTemporalTemporal>)addToWithJavaTimeTemporalTemporal:(id<JavaTimeTemporalTemporal>)temporal;

/*!
 @brief Obtains a <code>Duration</code> representing the duration between two temporal objects.
 <p>
  This calculates the duration between two temporal objects. If the objects
  are of different types, then the duration is calculated based on the type
  of the first object. For example, if the first argument is a <code>LocalTime</code>
  then the second argument is converted to a <code>LocalTime</code>.
  <p>
  The specified temporal objects must support the <code>SECONDS</code> unit.
  For full accuracy, either the <code>NANOS</code> unit or the 
 <code>NANO_OF_SECOND</code> field should be supported. 
 <p>
  The result of this method can be a negative period if the end is before the start.
  To guarantee to obtain a positive duration call <code>abs()</code> on the result.
 @param startInclusive the start instant, inclusive, not null
 @param endExclusive the end instant, exclusive, not null
 @return a <code>Duration</code>, not null
 @throw DateTimeExceptionif the seconds between the temporals cannot be obtained
 @throw ArithmeticExceptionif the calculation exceeds the capacity of <code>Duration</code>
 */
+ (JavaTimeDuration *)betweenWithJavaTimeTemporalTemporal:(id<JavaTimeTemporalTemporal>)startInclusive
                             withJavaTimeTemporalTemporal:(id<JavaTimeTemporalTemporal>)endExclusive;

/*!
 @brief Compares this duration to the specified <code>Duration</code>.
 <p>
  The comparison is based on the total length of the durations.
  It is "consistent with equals", as defined by <code>Comparable</code>.
 @param otherDuration the other duration to compare to, not null
 @return the comparator value, negative if less, positive if greater
 */
- (jint)compareToWithId:(JavaTimeDuration *)otherDuration;

/*!
 @brief Returns a copy of this duration divided by the specified value.
 <p>
  This instance is immutable and unaffected by this method call.
 @param divisor the value to divide the duration by, positive or negative, not zero
 @return a <code>Duration</code> based on this duration divided by the specified divisor, not null
 @throw ArithmeticExceptionif the divisor is zero or if numeric overflow occurs
 */
- (JavaTimeDuration *)dividedByWithLong:(jlong)divisor;

/*!
 @brief Checks if this duration is equal to the specified <code>Duration</code>.
 <p>
  The comparison is based on the total length of the durations.
 @param otherDuration the other duration, null returns false
 @return true if the other duration is equal to this one
 */
- (jboolean)isEqual:(id)otherDuration;

/*!
 @brief Obtains an instance of <code>Duration</code> from a temporal amount.
 <p>
  This obtains a duration based on the specified amount.
  A <code>TemporalAmount</code> represents an  amount of time, which may be
  date-based or time-based, which this factory extracts to a duration. 
 <p>
  The conversion loops around the set of units from the amount and uses the 
 duration of the unit to
  calculate the total <code>Duration</code>.
  Only a subset of units are accepted by this method. The unit must either
  have an exact duration
  or be <code>ChronoUnit.DAYS</code> which is treated as 24 hours.
  If any other units are found then an exception is thrown.
 @param amount the temporal amount to convert, not null
 @return the equivalent duration, not null
 @throw DateTimeExceptionif unable to convert to a <code>Duration</code>
 @throw ArithmeticExceptionif numeric overflow occurs
 */
+ (JavaTimeDuration *)fromWithJavaTimeTemporalTemporalAmount:(id<JavaTimeTemporalTemporalAmount>)amount;

/*!
 @brief Gets the value of the requested unit.
 <p>
  This returns a value for each of the two supported units, 
 <code>SECONDS</code> and <code>NANOS</code>.
  All other units throw an exception.
 @param unit the <code>TemporalUnit</code>  for which to return the value
 @return the long value of the unit
 @throw DateTimeExceptionif the unit is not supported
 @throw UnsupportedTemporalTypeExceptionif the unit is not supported
 */
- (jlong)getWithJavaTimeTemporalTemporalUnit:(id<JavaTimeTemporalTemporalUnit>)unit;

/*!
 @brief Gets the number of nanoseconds within the second in this duration.
 <p>
  The length of the duration is stored using two fields - seconds and nanoseconds.
  The nanoseconds part is a value from 0 to 999,999,999 that is an adjustment to
  the length in seconds.
  The total duration is defined by calling this method and <code>getSeconds()</code>.
  <p>
  A <code>Duration</code> represents a directed distance between two points on the time-line.
  A negative duration is expressed by the negative sign of the seconds part.
  A duration of -1 nanosecond is stored as -1 seconds plus 999,999,999 nanoseconds.
 @return the nanoseconds within the second part of the length of the duration, from 0 to 999,999,999
 */
- (jint)getNano;

/*!
 @brief Gets the number of seconds in this duration.
 <p>
  The length of the duration is stored using two fields - seconds and nanoseconds.
  The nanoseconds part is a value from 0 to 999,999,999 that is an adjustment to
  the length in seconds.
  The total duration is defined by calling this method and <code>getNano()</code>.
  <p>
  A <code>Duration</code> represents a directed distance between two points on the time-line.
  A negative duration is expressed by the negative sign of the seconds part.
  A duration of -1 nanosecond is stored as -1 seconds plus 999,999,999 nanoseconds.
 @return the whole seconds part of the length of the duration, positive or negative
 */
- (jlong)getSeconds;

/*!
 @brief Gets the set of units supported by this duration.
 <p>
  The supported units are <code>SECONDS</code>,
  and <code>NANOS</code>.
  They are returned in the order seconds, nanos. 
 <p>
  This set can be used in conjunction with <code>get(TemporalUnit)</code>
  to access the entire state of the duration.
 @return a list containing the seconds and nanos units, not null
 */
- (id<JavaUtilList>)getUnits;

/*!
 @brief A hash code for this duration.
 @return a suitable hash code
 */
- (NSUInteger)hash;

/*!
 @brief Checks if this duration is negative, excluding zero.
 <p>
  A <code>Duration</code> represents a directed distance between two points on
  the time-line and can therefore be positive, zero or negative.
  This method checks whether the length is less than zero.
 @return true if this duration has a total length less than zero
 */
- (jboolean)isNegative;

/*!
 @brief Checks if this duration is zero length.
 <p>
  A <code>Duration</code> represents a directed distance between two points on
  the time-line and can therefore be positive, zero or negative.
  This method checks whether the length is zero.
 @return true if this duration has a total length equal to zero
 */
- (jboolean)isZero;

/*!
 @brief Returns a copy of this duration with the specified duration subtracted.
 <p>
  This instance is immutable and unaffected by this method call.
 @param duration the duration to subtract, positive or negative, not null
 @return a <code>Duration</code> based on this duration with the specified duration subtracted, not null
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeDuration *)minusWithJavaTimeDuration:(JavaTimeDuration *)duration;

/*!
 @brief Returns a copy of this duration with the specified duration subtracted.
 <p>
  The duration amount is measured in terms of the specified unit.
  Only a subset of units are accepted by this method.
  The unit must either have an exact duration or
  be <code>ChronoUnit.DAYS</code> which is treated as 24 hours. Other units throw an exception. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param amountToSubtract the amount to subtract, measured in terms of the unit, positive or negative
 @param unit the unit that the amount is measured in, must have an exact duration, not null
 @return a <code>Duration</code> based on this duration with the specified duration subtracted, not null
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeDuration *)minusWithLong:(jlong)amountToSubtract
   withJavaTimeTemporalTemporalUnit:(id<JavaTimeTemporalTemporalUnit>)unit;

/*!
 @brief Returns a copy of this duration with the specified duration in standard 24 hour days subtracted.
 <p>
  The number of days is multiplied by 86400 to obtain the number of seconds to subtract.
  This is based on the standard definition of a day as 24 hours. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param daysToSubtract the days to subtract, positive or negative
 @return a <code>Duration</code> based on this duration with the specified days subtracted, not null
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeDuration *)minusDaysWithLong:(jlong)daysToSubtract;

/*!
 @brief Returns a copy of this duration with the specified duration in hours subtracted.
 <p>
  The number of hours is multiplied by 3600 to obtain the number of seconds to subtract. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param hoursToSubtract the hours to subtract, positive or negative
 @return a <code>Duration</code> based on this duration with the specified hours subtracted, not null
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeDuration *)minusHoursWithLong:(jlong)hoursToSubtract;

/*!
 @brief Returns a copy of this duration with the specified duration in milliseconds subtracted.
 <p>
  This instance is immutable and unaffected by this method call.
 @param millisToSubtract the milliseconds to subtract, positive or negative
 @return a <code>Duration</code> based on this duration with the specified milliseconds subtracted, not null
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeDuration *)minusMillisWithLong:(jlong)millisToSubtract;

/*!
 @brief Returns a copy of this duration with the specified duration in minutes subtracted.
 <p>
  The number of hours is multiplied by 60 to obtain the number of seconds to subtract. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param minutesToSubtract the minutes to subtract, positive or negative
 @return a <code>Duration</code> based on this duration with the specified minutes subtracted, not null
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeDuration *)minusMinutesWithLong:(jlong)minutesToSubtract;

/*!
 @brief Returns a copy of this duration with the specified duration in nanoseconds subtracted.
 <p>
  This instance is immutable and unaffected by this method call.
 @param nanosToSubtract the nanoseconds to subtract, positive or negative
 @return a <code>Duration</code> based on this duration with the specified nanoseconds subtracted, not null
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeDuration *)minusNanosWithLong:(jlong)nanosToSubtract;

/*!
 @brief Returns a copy of this duration with the specified duration in seconds subtracted.
 <p>
  This instance is immutable and unaffected by this method call.
 @param secondsToSubtract the seconds to subtract, positive or negative
 @return a <code>Duration</code> based on this duration with the specified seconds subtracted, not null
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeDuration *)minusSecondsWithLong:(jlong)secondsToSubtract;

/*!
 @brief Returns a copy of this duration multiplied by the scalar.
 <p>
  This instance is immutable and unaffected by this method call.
 @param multiplicand the value to multiply the duration by, positive or negative
 @return a <code>Duration</code> based on this duration multiplied by the specified scalar, not null
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeDuration *)multipliedByWithLong:(jlong)multiplicand;

/*!
 @brief Returns a copy of this duration with the length negated.
 <p>
  This method swaps the sign of the total length of this duration.
  For example, <code>PT1.3S</code> will be returned as <code>PT-1.3S</code>.
  <p>
  This instance is immutable and unaffected by this method call.
 @return a <code>Duration</code> based on this duration with the amount negated, not null
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeDuration *)negated;

/*!
 @brief Obtains a <code>Duration</code> representing an amount in the specified unit.
 <p>
  The parameters represent the two parts of a phrase like '6 Hours'. For example: 
 @code

   Duration.of(3, SECONDS);
   Duration.of(465, HOURS); 
  
@endcode
  Only a subset of units are accepted by this method.
  The unit must either have an exact duration or
  be <code>ChronoUnit.DAYS</code> which is treated as 24 hours. Other units throw an exception.
 @param amount the amount of the duration, measured in terms of the unit, positive or negative
 @param unit the unit that the duration is measured in, must have an exact duration, not null
 @return a <code>Duration</code>, not null
 @throw DateTimeExceptionif the period unit has an estimated duration
 @throw ArithmeticExceptionif a numeric overflow occurs
 */
+ (JavaTimeDuration *)ofWithLong:(jlong)amount
withJavaTimeTemporalTemporalUnit:(id<JavaTimeTemporalTemporalUnit>)unit;

/*!
 @brief Obtains a <code>Duration</code> representing a number of standard 24 hour days.
 <p>
  The seconds are calculated based on the standard definition of a day,
  where each day is 86400 seconds which implies a 24 hour day.
  The nanosecond in second field is set to zero.
 @param days the number of days, positive or negative
 @return a <code>Duration</code>, not null
 @throw ArithmeticExceptionif the input days exceeds the capacity of <code>Duration</code>
 */
+ (JavaTimeDuration *)ofDaysWithLong:(jlong)days;

/*!
 @brief Obtains a <code>Duration</code> representing a number of standard hours.
 <p>
  The seconds are calculated based on the standard definition of an hour,
  where each hour is 3600 seconds.
  The nanosecond in second field is set to zero.
 @param hours the number of hours, positive or negative
 @return a <code>Duration</code>, not null
 @throw ArithmeticExceptionif the input hours exceeds the capacity of <code>Duration</code>
 */
+ (JavaTimeDuration *)ofHoursWithLong:(jlong)hours;

/*!
 @brief Obtains a <code>Duration</code> representing a number of milliseconds.
 <p>
  The seconds and nanoseconds are extracted from the specified milliseconds.
 @param millis the number of milliseconds, positive or negative
 @return a <code>Duration</code>, not null
 */
+ (JavaTimeDuration *)ofMillisWithLong:(jlong)millis;

/*!
 @brief Obtains a <code>Duration</code> representing a number of standard minutes.
 <p>
  The seconds are calculated based on the standard definition of a minute,
  where each minute is 60 seconds.
  The nanosecond in second field is set to zero.
 @param minutes the number of minutes, positive or negative
 @return a <code>Duration</code>, not null
 @throw ArithmeticExceptionif the input minutes exceeds the capacity of <code>Duration</code>
 */
+ (JavaTimeDuration *)ofMinutesWithLong:(jlong)minutes;

/*!
 @brief Obtains a <code>Duration</code> representing a number of nanoseconds.
 <p>
  The seconds and nanoseconds are extracted from the specified nanoseconds.
 @param nanos the number of nanoseconds, positive or negative
 @return a <code>Duration</code>, not null
 */
+ (JavaTimeDuration *)ofNanosWithLong:(jlong)nanos;

/*!
 @brief Obtains a <code>Duration</code> representing a number of seconds.
 <p>
  The nanosecond in second field is set to zero.
 @param seconds the number of seconds, positive or negative
 @return a <code>Duration</code>, not null
 */
+ (JavaTimeDuration *)ofSecondsWithLong:(jlong)seconds;

/*!
 @brief Obtains a <code>Duration</code> representing a number of seconds and an
  adjustment in nanoseconds.
 <p>
  This method allows an arbitrary number of nanoseconds to be passed in.
  The factory will alter the values of the second and nanosecond in order
  to ensure that the stored nanosecond is in the range 0 to 999,999,999.
  For example, the following will result in the exactly the same duration: 
 @code

   Duration.ofSeconds(3, 1);
   Duration.ofSeconds(4, -999_999_999);
   Duration.ofSeconds(2, 1000_000_001); 
  
@endcode
 @param seconds the number of seconds, positive or negative
 @param nanoAdjustment the nanosecond adjustment to the number of seconds, positive or negative
 @return a <code>Duration</code>, not null
 @throw ArithmeticExceptionif the adjustment causes the seconds to exceed the capacity of <code>Duration</code>
 */
+ (JavaTimeDuration *)ofSecondsWithLong:(jlong)seconds
                               withLong:(jlong)nanoAdjustment;

/*!
 @brief Obtains a <code>Duration</code> from a text string such as <code>PnDTnHnMn.nS</code>.
 <p>
  This will parse a textual representation of a duration, including the
  string produced by <code>toString()</code>. The formats accepted are based
  on the ISO-8601 duration format <code>PnDTnHnMn.nS</code> with days
  considered to be exactly 24 hours. 
 <p>
  The string starts with an optional sign, denoted by the ASCII negative
  or positive symbol. If negative, the whole period is negated.
  The ASCII letter "P" is next in upper or lower case.
  There are then four sections, each consisting of a number and a suffix.
  The sections have suffixes in ASCII of "D", "H", "M" and "S" for
  days, hours, minutes and seconds, accepted in upper or lower case.
  The suffixes must occur in order. The ASCII letter "T" must occur before
  the first occurrence, if any, of an hour, minute or second section.
  At least one of the four sections must be present, and if "T" is present
  there must be at least one section after the "T".
  The number part of each section must consist of one or more ASCII digits.
  The number may be prefixed by the ASCII negative or positive symbol.
  The number of days, hours and minutes must parse to an <code>long</code>.
  The number of seconds must parse to an <code>long</code> with optional fraction.
  The decimal point may be either a dot or a comma.
  The fractional part may have from zero to 9 digits. 
 <p>
  The leading plus/minus sign, and negative values for other units are
  not part of the ISO-8601 standard. 
 <p>
  Examples: 
 @code

     "PT20.345S" -- parses as "20.345 seconds"
     "PT15M"     -- parses as "15 minutes" (where a minute is 60 seconds)
     "PT10H"     -- parses as "10 hours" (where an hour is 3600 seconds)
     "P2D"       -- parses as "2 days" (where a day is 24 hours or 86400 seconds)
     "P2DT3H4M"  -- parses as "2 days, 3 hours and 4 minutes"
     "P-6H3M"    -- parses as "-6 hours and +3 minutes"
     "-P6H3M"    -- parses as "-6 hours and -3 minutes"
     "-P-6H+3M"  -- parses as "+6 hours and -3 minutes" 
  
@endcode
 @param text the text to parse, not null
 @return the parsed duration, not null
 @throw DateTimeParseExceptionif the text cannot be parsed to a duration
 */
+ (JavaTimeDuration *)parseWithJavaLangCharSequence:(id<JavaLangCharSequence>)text;

/*!
 @brief Returns a copy of this duration with the specified duration added.
 <p>
  This instance is immutable and unaffected by this method call.
 @param duration the duration to add, positive or negative, not null
 @return a <code>Duration</code> based on this duration with the specified duration added, not null
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeDuration *)plusWithJavaTimeDuration:(JavaTimeDuration *)duration;

/*!
 @brief Returns a copy of this duration with the specified duration added.
 <p>
  The duration amount is measured in terms of the specified unit.
  Only a subset of units are accepted by this method.
  The unit must either have an exact duration or
  be <code>ChronoUnit.DAYS</code> which is treated as 24 hours. Other units throw an exception. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param amountToAdd the amount to add, measured in terms of the unit, positive or negative
 @param unit the unit that the amount is measured in, must have an exact duration, not null
 @return a <code>Duration</code> based on this duration with the specified duration added, not null
 @throw UnsupportedTemporalTypeExceptionif the unit is not supported
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeDuration *)plusWithLong:(jlong)amountToAdd
  withJavaTimeTemporalTemporalUnit:(id<JavaTimeTemporalTemporalUnit>)unit;

/*!
 @brief Returns a copy of this duration with the specified duration in standard 24 hour days added.
 <p>
  The number of days is multiplied by 86400 to obtain the number of seconds to add.
  This is based on the standard definition of a day as 24 hours. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param daysToAdd the days to add, positive or negative
 @return a <code>Duration</code> based on this duration with the specified days added, not null
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeDuration *)plusDaysWithLong:(jlong)daysToAdd;

/*!
 @brief Returns a copy of this duration with the specified duration in hours added.
 <p>
  This instance is immutable and unaffected by this method call.
 @param hoursToAdd the hours to add, positive or negative
 @return a <code>Duration</code> based on this duration with the specified hours added, not null
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeDuration *)plusHoursWithLong:(jlong)hoursToAdd;

/*!
 @brief Returns a copy of this duration with the specified duration in milliseconds added.
 <p>
  This instance is immutable and unaffected by this method call.
 @param millisToAdd the milliseconds to add, positive or negative
 @return a <code>Duration</code> based on this duration with the specified milliseconds added, not null
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeDuration *)plusMillisWithLong:(jlong)millisToAdd;

/*!
 @brief Returns a copy of this duration with the specified duration in minutes added.
 <p>
  This instance is immutable and unaffected by this method call.
 @param minutesToAdd the minutes to add, positive or negative
 @return a <code>Duration</code> based on this duration with the specified minutes added, not null
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeDuration *)plusMinutesWithLong:(jlong)minutesToAdd;

/*!
 @brief Returns a copy of this duration with the specified duration in nanoseconds added.
 <p>
  This instance is immutable and unaffected by this method call.
 @param nanosToAdd the nanoseconds to add, positive or negative
 @return a <code>Duration</code> based on this duration with the specified nanoseconds added, not null
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeDuration *)plusNanosWithLong:(jlong)nanosToAdd;

/*!
 @brief Returns a copy of this duration with the specified duration in seconds added.
 <p>
  This instance is immutable and unaffected by this method call.
 @param secondsToAdd the seconds to add, positive or negative
 @return a <code>Duration</code> based on this duration with the specified seconds added, not null
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeDuration *)plusSecondsWithLong:(jlong)secondsToAdd;

/*!
 @brief Subtracts this duration from the specified temporal object.
 <p>
  This returns a temporal object of the same observable type as the input
  with this duration subtracted. 
 <p>
  In most cases, it is clearer to reverse the calling pattern by using 
 <code>Temporal.minus(TemporalAmount)</code>.
  @code

    // these two lines are equivalent, but the second approach is recommended
    dateTime = thisDuration.subtractFrom(dateTime);
    dateTime = dateTime.minus(thisDuration); 
  
@endcode
  <p>
  The calculation will subtract the seconds, then nanos.
  Only non-zero amounts will be added. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param temporal the temporal object to adjust, not null
 @return an object of the same type with the adjustment made, not null
 @throw DateTimeExceptionif unable to subtract
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (id<JavaTimeTemporalTemporal>)subtractFromWithJavaTimeTemporalTemporal:(id<JavaTimeTemporalTemporal>)temporal;

/*!
 @brief Gets the number of days in this duration.
 <p>
  This returns the total number of days in the duration by dividing the
  number of seconds by 86400.
  This is based on the standard definition of a day as 24 hours. 
 <p>
  This instance is immutable and unaffected by this method call.
 @return the number of days in the duration, may be negative
 */
- (jlong)toDays;

/*!
 @brief Gets the number of hours in this duration.
 <p>
  This returns the total number of hours in the duration by dividing the
  number of seconds by 3600. 
 <p>
  This instance is immutable and unaffected by this method call.
 @return the number of hours in the duration, may be negative
 */
- (jlong)toHours;

/*!
 @brief Converts this duration to the total length in milliseconds.
 <p>
  If this duration is too large to fit in a <code>long</code> milliseconds, then an
  exception is thrown. 
 <p>
  If this duration has greater than millisecond precision, then the conversion
  will drop any excess precision information as though the amount in nanoseconds
  was subject to integer division by one million.
 @return the total length of the duration in milliseconds
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (jlong)toMillis;

/*!
 @brief Gets the number of minutes in this duration.
 <p>
  This returns the total number of minutes in the duration by dividing the
  number of seconds by 60. 
 <p>
  This instance is immutable and unaffected by this method call.
 @return the number of minutes in the duration, may be negative
 */
- (jlong)toMinutes;

/*!
 @brief Converts this duration to the total length in nanoseconds expressed as a <code>long</code>.
 <p>
  If this duration is too large to fit in a <code>long</code> nanoseconds, then an
  exception is thrown.
 @return the total length of the duration in nanoseconds
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (jlong)toNanos;

/*!
 @brief A string representation of this duration using ISO-8601 seconds
  based representation, such as <code>PT8H6M12.345S</code>.
 <p>
  The format of the returned string will be <code>PTnHnMnS</code>, where n is
  the relevant hours, minutes or seconds part of the duration.
  Any fractional seconds are placed after a decimal point i the seconds section.
  If a section has a zero value, it is omitted.
  The hours, minutes and seconds will all have the same sign. 
 <p>
  Examples: 
 @code

     "20.345 seconds"                 -- "PT20.345S
     "15 minutes" (15 * 60 seconds)   -- "PT15M"
     "10 hours" (10 * 3600 seconds)   -- "PT10H"
     "2 days" (2 * 86400 seconds)     -- "PT48H" 
  
@endcode
  Note that multiples of 24 hours are not output as days to avoid confusion
  with <code>Period</code>.
 @return an ISO-8601 representation of this duration, not null
 */
- (NSString *)description;

/*!
 @brief Returns a copy of this duration with the specified nano-of-second.
 <p>
  This returns a duration with the specified nano-of-second, retaining the
  seconds part of this duration. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param nanoOfSecond the nano-of-second to represent, from 0 to 999,999,999
 @return a <code>Duration</code> based on this period with the requested nano-of-second, not null
 @throw DateTimeExceptionif the nano-of-second is invalid
 */
- (JavaTimeDuration *)withNanosWithInt:(jint)nanoOfSecond;

/*!
 @brief Returns a copy of this duration with the specified amount of seconds.
 <p>
  This returns a duration with the specified seconds, retaining the
  nano-of-second part of this duration. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param seconds the seconds to represent, may be negative
 @return a <code>Duration</code> based on this period with the requested seconds, not null
 */
- (JavaTimeDuration *)withSecondsWithLong:(jlong)seconds;

#pragma mark Package-Private

+ (JavaTimeDuration *)readExternalWithJavaIoDataInput:(id<JavaIoDataInput>)inArg;

- (void)writeExternalWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(JavaTimeDuration)

/*!
 @brief Constant for a duration of zero.
 */
inline JavaTimeDuration *JavaTimeDuration_get_ZERO(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaTimeDuration *JavaTimeDuration_ZERO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaTimeDuration, ZERO, JavaTimeDuration *)

FOUNDATION_EXPORT JavaTimeDuration *JavaTimeDuration_ofDaysWithLong_(jlong days);

FOUNDATION_EXPORT JavaTimeDuration *JavaTimeDuration_ofHoursWithLong_(jlong hours);

FOUNDATION_EXPORT JavaTimeDuration *JavaTimeDuration_ofMinutesWithLong_(jlong minutes);

FOUNDATION_EXPORT JavaTimeDuration *JavaTimeDuration_ofSecondsWithLong_(jlong seconds);

FOUNDATION_EXPORT JavaTimeDuration *JavaTimeDuration_ofSecondsWithLong_withLong_(jlong seconds, jlong nanoAdjustment);

FOUNDATION_EXPORT JavaTimeDuration *JavaTimeDuration_ofMillisWithLong_(jlong millis);

FOUNDATION_EXPORT JavaTimeDuration *JavaTimeDuration_ofNanosWithLong_(jlong nanos);

FOUNDATION_EXPORT JavaTimeDuration *JavaTimeDuration_ofWithLong_withJavaTimeTemporalTemporalUnit_(jlong amount, id<JavaTimeTemporalTemporalUnit> unit);

FOUNDATION_EXPORT JavaTimeDuration *JavaTimeDuration_fromWithJavaTimeTemporalTemporalAmount_(id<JavaTimeTemporalTemporalAmount> amount);

FOUNDATION_EXPORT JavaTimeDuration *JavaTimeDuration_parseWithJavaLangCharSequence_(id<JavaLangCharSequence> text);

FOUNDATION_EXPORT JavaTimeDuration *JavaTimeDuration_betweenWithJavaTimeTemporalTemporal_withJavaTimeTemporalTemporal_(id<JavaTimeTemporalTemporal> startInclusive, id<JavaTimeTemporalTemporal> endExclusive);

FOUNDATION_EXPORT JavaTimeDuration *JavaTimeDuration_readExternalWithJavaIoDataInput_(id<JavaIoDataInput> inArg);

J2OBJC_TYPE_LITERAL_HEADER(JavaTimeDuration)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaTimeDuration")
