//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/time/OffsetTime.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaTimeOffsetTime")
#ifdef RESTRICT_JavaTimeOffsetTime
#define INCLUDE_ALL_JavaTimeOffsetTime 0
#else
#define INCLUDE_ALL_JavaTimeOffsetTime 1
#endif
#undef RESTRICT_JavaTimeOffsetTime

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaTimeOffsetTime_) && (INCLUDE_ALL_JavaTimeOffsetTime || defined(INCLUDE_JavaTimeOffsetTime))
#define JavaTimeOffsetTime_

#define RESTRICT_JavaTimeTemporalTemporal 1
#define INCLUDE_JavaTimeTemporalTemporal 1
#include "java/time/temporal/Temporal.h"

#define RESTRICT_JavaTimeTemporalTemporalAdjuster 1
#define INCLUDE_JavaTimeTemporalTemporalAdjuster 1
#include "java/time/temporal/TemporalAdjuster.h"

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "java/lang/Comparable.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class JavaTimeClock;
@class JavaTimeFormatDateTimeFormatter;
@class JavaTimeInstant;
@class JavaTimeLocalDate;
@class JavaTimeLocalTime;
@class JavaTimeOffsetDateTime;
@class JavaTimeTemporalValueRange;
@class JavaTimeZoneId;
@class JavaTimeZoneOffset;
@protocol JavaIoObjectInput;
@protocol JavaIoObjectOutput;
@protocol JavaLangCharSequence;
@protocol JavaTimeTemporalTemporalAccessor;
@protocol JavaTimeTemporalTemporalAmount;
@protocol JavaTimeTemporalTemporalField;
@protocol JavaTimeTemporalTemporalQuery;
@protocol JavaTimeTemporalTemporalUnit;

/*!
 @brief A time with an offset from UTC/Greenwich in the ISO-8601 calendar system,
  such as <code>10:15:30+01:00</code>.
 <p>
  <code>OffsetTime</code> is an immutable date-time object that represents a time, often
  viewed as hour-minute-second-offset.
  This class stores all time fields, to a precision of nanoseconds,
  as well as a zone offset.
  For example, the value "13:45.30.123456789+02:00" can be stored
  in an <code>OffsetTime</code>.
 @since 1.8
 */
@interface JavaTimeOffsetTime : NSObject < JavaTimeTemporalTemporal, JavaTimeTemporalTemporalAdjuster, JavaLangComparable, JavaIoSerializable >
@property (readonly, class, strong) JavaTimeOffsetTime *MIN NS_SWIFT_NAME(MIN);
@property (readonly, class, strong) JavaTimeOffsetTime *MAX NS_SWIFT_NAME(MAX);

+ (JavaTimeOffsetTime *)MIN;

+ (JavaTimeOffsetTime *)MAX;

#pragma mark Public

/*!
 @brief Adjusts the specified temporal object to have the same offset and time
  as this object.
 <p>
  This returns a temporal object of the same observable type as the input
  with the offset and time changed to be the same as this. 
 <p>
  The adjustment is equivalent to using <code>Temporal.with(TemporalField, long)</code>
  twice, passing <code>ChronoField.NANO_OF_DAY</code> and 
 <code>ChronoField.OFFSET_SECONDS</code> as the fields. 
 <p>
  In most cases, it is clearer to reverse the calling pattern by using 
 <code>Temporal.with(TemporalAdjuster)</code>:
  @code

    // these two lines are equivalent, but the second approach is recommended
    temporal = thisOffsetTime.adjustInto(temporal);
    temporal = temporal.with(thisOffsetTime); 
  
@endcode
  <p>
  This instance is immutable and unaffected by this method call.
 @param temporal the target object to be adjusted, not null
 @return the adjusted object, not null
 @throw DateTimeExceptionif unable to make the adjustment
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (id<JavaTimeTemporalTemporal>)adjustIntoWithJavaTimeTemporalTemporal:(id<JavaTimeTemporalTemporal>)temporal;

/*!
 @brief Combines this time with a date to create an <code>OffsetDateTime</code>.
 <p>
  This returns an <code>OffsetDateTime</code> formed from this time and the specified date.
  All possible combinations of date and time are valid.
 @param date the date to combine with, not null
 @return the offset date-time formed from this time and the specified date, not null
 */
- (JavaTimeOffsetDateTime *)atDateWithJavaTimeLocalDate:(JavaTimeLocalDate *)date;

/*!
 @brief Compares this <code>OffsetTime</code> to another time.
 <p>
  The comparison is based first on the UTC equivalent instant, then on the local time.
  It is "consistent with equals", as defined by <code>Comparable</code>.
  <p>
  For example, the following is the comparator order: 
 <ol>
  <li><code>10:30+01:00</code></li>
  <li><code>11:00+01:00</code></li>
  <li><code>12:00+02:00</code></li>
  <li><code>11:30+01:00</code></li>
  <li><code>12:00+01:00</code></li>
  <li><code>12:30+01:00</code></li>
  </ol>
  Values #2 and #3 represent the same instant on the time-line.
  When two values represent the same instant, the local time is compared
  to distinguish them. This step is needed to make the ordering
  consistent with <code>equals()</code>.
  <p>
  To compare the underlying local time of two <code>TemporalAccessor</code> instances,
  use <code>ChronoField.NANO_OF_DAY</code> as a comparator.
 @param other the other time to compare to, not null
 @return the comparator value, negative if less, positive if greater
 @throw NullPointerExceptionif <code>other</code> is null
 */
- (jint)compareToWithId:(JavaTimeOffsetTime *)other;

/*!
 @brief Checks if this time is equal to another time.
 <p>
  The comparison is based on the local-time and the offset.
  To compare for the same instant on the time-line, use <code>isEqual(OffsetTime)</code>.
  <p>
  Only objects of type <code>OffsetTime</code> are compared, other types return false.
  To compare the underlying local time of two <code>TemporalAccessor</code> instances,
  use <code>ChronoField.NANO_OF_DAY</code> as a comparator.
 @param obj the object to check, null returns false
 @return true if this is equal to the other time
 */
- (jboolean)isEqual:(id)obj;

/*!
 @brief Formats this time using the specified formatter.
 <p>
  This time will be passed to the formatter to produce a string.
 @param formatter the formatter to use, not null
 @return the formatted time string, not null
 @throw DateTimeExceptionif an error occurs during printing
 */
- (NSString *)formatWithJavaTimeFormatDateTimeFormatter:(JavaTimeFormatDateTimeFormatter *)formatter;

/*!
 @brief Obtains an instance of <code>OffsetTime</code> from a temporal object.
 <p>
  This obtains an offset time based on the specified temporal.
  A <code>TemporalAccessor</code> represents an arbitrary set of date and time information,
  which this factory converts to an instance of <code>OffsetTime</code>.
  <p>
  The conversion extracts and combines the <code>ZoneOffset</code> and the 
 <code>LocalTime</code> from the temporal object.
  Implementations are permitted to perform optimizations such as accessing
  those fields that are equivalent to the relevant objects. 
 <p>
  This method matches the signature of the functional interface <code>TemporalQuery</code>
  allowing it to be used as a query via method reference, <code>OffsetTime::from</code>.
 @param temporal the temporal object to convert, not null
 @return the offset time, not null
 @throw DateTimeExceptionif unable to convert to an <code>OffsetTime</code>
 */
+ (JavaTimeOffsetTime *)fromWithJavaTimeTemporalTemporalAccessor:(id<JavaTimeTemporalTemporalAccessor>)temporal;

/*!
 @brief Gets the value of the specified field from this time as an <code>int</code>.
 <p>
  This queries this time for the value of the specified field.
  The returned value will always be within the valid range of values for the field.
  If it is not possible to return the value, because the field is not supported
  or for some other reason, an exception is thrown. 
 <p>
  If the field is a <code>ChronoField</code> then the query is implemented here.
  The <code>supported fields</code> will return valid
  values based on this time, except <code>NANO_OF_DAY</code> and <code>MICRO_OF_DAY</code>
  which are too large to fit in an <code>int</code> and throw a <code>DateTimeException</code>.
  All other <code>ChronoField</code> instances will throw an <code>UnsupportedTemporalTypeException</code>.
  <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.getFrom(TemporalAccessor)</code>
  passing <code>this</code> as the argument. Whether the value can be obtained,
  and what the value represents, is determined by the field.
 @param field the field to get, not null
 @return the value for the field
 @throw DateTimeExceptionif a value for the field cannot be obtained or
          the value is outside the range of valid values for the field
 @throw UnsupportedTemporalTypeExceptionif the field is not supported or
          the range of values exceeds an <code>int</code>
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (jint)getWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field;

/*!
 @brief Gets the hour-of-day field.
 @return the hour-of-day, from 0 to 23
 */
- (jint)getHour;

/*!
 @brief Gets the value of the specified field from this time as a <code>long</code>.
 <p>
  This queries this time for the value of the specified field.
  If it is not possible to return the value, because the field is not supported
  or for some other reason, an exception is thrown. 
 <p>
  If the field is a <code>ChronoField</code> then the query is implemented here.
  The <code>supported fields</code> will return valid
  values based on this time.
  All other <code>ChronoField</code> instances will throw an <code>UnsupportedTemporalTypeException</code>.
  <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.getFrom(TemporalAccessor)</code>
  passing <code>this</code> as the argument. Whether the value can be obtained,
  and what the value represents, is determined by the field.
 @param field the field to get, not null
 @return the value for the field
 @throw DateTimeExceptionif a value for the field cannot be obtained
 @throw UnsupportedTemporalTypeExceptionif the field is not supported
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (jlong)getLongWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field;

/*!
 @brief Gets the minute-of-hour field.
 @return the minute-of-hour, from 0 to 59
 */
- (jint)getMinute;

/*!
 @brief Gets the nano-of-second field.
 @return the nano-of-second, from 0 to 999,999,999
 */
- (jint)getNano;

/*!
 @brief Gets the zone offset, such as '+01:00'.
 <p>
  This is the offset of the local time from UTC/Greenwich.
 @return the zone offset, not null
 */
- (JavaTimeZoneOffset *)getOffset;

/*!
 @brief Gets the second-of-minute field.
 @return the second-of-minute, from 0 to 59
 */
- (jint)getSecond;

/*!
 @brief A hash code for this time.
 @return a suitable hash code
 */
- (NSUInteger)hash;

/*!
 @brief Checks if the instant of this <code>OffsetTime</code> is after that of the
  specified time applying both times to a common date.
 <p>
  This method differs from the comparison in <code>compareTo</code> in that it
  only compares the instant of the time. This is equivalent to converting both
  times to an instant using the same date and comparing the instants.
 @param other the other time to compare to, not null
 @return true if this is after the instant of the specified time
 */
- (jboolean)isAfterWithJavaTimeOffsetTime:(JavaTimeOffsetTime *)other;

/*!
 @brief Checks if the instant of this <code>OffsetTime</code> is before that of the
  specified time applying both times to a common date.
 <p>
  This method differs from the comparison in <code>compareTo</code> in that it
  only compares the instant of the time. This is equivalent to converting both
  times to an instant using the same date and comparing the instants.
 @param other the other time to compare to, not null
 @return true if this is before the instant of the specified time
 */
- (jboolean)isBeforeWithJavaTimeOffsetTime:(JavaTimeOffsetTime *)other;

/*!
 @brief Checks if the instant of this <code>OffsetTime</code> is equal to that of the
  specified time applying both times to a common date.
 <p>
  This method differs from the comparison in <code>compareTo</code> and <code>equals</code>
  in that it only compares the instant of the time. This is equivalent to converting both
  times to an instant using the same date and comparing the instants.
 @param other the other time to compare to, not null
 @return true if this is equal to the instant of the specified time
 */
- (jboolean)isEqualWithJavaTimeOffsetTime:(JavaTimeOffsetTime *)other;

/*!
 @brief Checks if the specified field is supported.
 <p>
  This checks if this time can be queried for the specified field.
  If false, then calling the <code>range</code>,
  <code>get</code> and <code>with(TemporalField, long)</code>
  methods will throw an exception. 
 <p>
  If the field is a <code>ChronoField</code> then the query is implemented here.
  The supported fields are: 
 <ul>
  <li><code>NANO_OF_SECOND</code>
  <li><code>NANO_OF_DAY</code>
  <li><code>MICRO_OF_SECOND</code>
  <li><code>MICRO_OF_DAY</code>
  <li><code>MILLI_OF_SECOND</code>
  <li><code>MILLI_OF_DAY</code>
  <li><code>SECOND_OF_MINUTE</code>
  <li><code>SECOND_OF_DAY</code>
  <li><code>MINUTE_OF_HOUR</code>
  <li><code>MINUTE_OF_DAY</code>
  <li><code>HOUR_OF_AMPM</code>
  <li><code>CLOCK_HOUR_OF_AMPM</code>
  <li><code>HOUR_OF_DAY</code>
  <li><code>CLOCK_HOUR_OF_DAY</code>
  <li><code>AMPM_OF_DAY</code>
  <li><code>OFFSET_SECONDS</code>
  </ul>
  All other <code>ChronoField</code> instances will return false. 
 <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.isSupportedBy(TemporalAccessor)</code>
  passing <code>this</code> as the argument.
  Whether the field is supported is determined by the field.
 @param field the field to check, null returns false
 @return true if the field is supported on this time, false if not
 */
- (jboolean)isSupportedWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field;

/*!
 @brief Checks if the specified unit is supported.
 <p>
  This checks if the specified unit can be added to, or subtracted from, this offset-time.
  If false, then calling the <code>plus(long, TemporalUnit)</code> and 
 <code>minus</code> methods will throw an exception. 
 <p>
  If the unit is a <code>ChronoUnit</code> then the query is implemented here.
  The supported units are: 
 <ul>
  <li><code>NANOS</code>
  <li><code>MICROS</code>
  <li><code>MILLIS</code>
  <li><code>SECONDS</code>
  <li><code>MINUTES</code>
  <li><code>HOURS</code>
  <li><code>HALF_DAYS</code>
  </ul>
  All other <code>ChronoUnit</code> instances will return false. 
 <p>
  If the unit is not a <code>ChronoUnit</code>, then the result of this method
  is obtained by invoking <code>TemporalUnit.isSupportedBy(Temporal)</code>
  passing <code>this</code> as the argument.
  Whether the unit is supported is determined by the unit.
 @param unit the unit to check, null returns false
 @return true if the unit can be added/subtracted, false if not
 */
- (jboolean)isSupportedWithJavaTimeTemporalTemporalUnit:(id<JavaTimeTemporalTemporalUnit>)unit;

/*!
 @brief Returns a copy of this time with the specified amount subtracted.
 <p>
  This returns an <code>OffsetTime</code>, based on this one, with the amount
  in terms of the unit subtracted. If it is not possible to subtract the amount,
  because the unit is not supported or for some other reason, an exception is thrown. 
 <p>
  This method is equivalent to <code>plus(long, TemporalUnit)</code> with the amount negated.
  See that method for a full description of how addition, and thus subtraction, works. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param amountToSubtract the amount of the unit to subtract from the result, may be negative
 @param unit the unit of the amount to subtract, not null
 @return an <code>OffsetTime</code> based on this time with the specified amount subtracted, not null
 @throw DateTimeExceptionif the subtraction cannot be made
 @throw UnsupportedTemporalTypeExceptionif the unit is not supported
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeOffsetTime *)minusWithLong:(jlong)amountToSubtract
     withJavaTimeTemporalTemporalUnit:(id<JavaTimeTemporalTemporalUnit>)unit;

/*!
 @brief Returns a copy of this time with the specified amount subtracted.
 <p>
  This returns an <code>OffsetTime</code>, based on this one, with the specified amount subtracted.
  The amount is typically <code>Duration</code> but may be any other type implementing
  the <code>TemporalAmount</code> interface. 
 <p>
  The calculation is delegated to the amount object by calling 
 <code>TemporalAmount.subtractFrom(Temporal)</code>. The amount implementation is free
  to implement the subtraction in any way it wishes, however it typically
  calls back to <code>minus(long, TemporalUnit)</code>. Consult the documentation
  of the amount implementation to determine if it can be successfully subtracted. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param amountToSubtract the amount to subtract, not null
 @return an <code>OffsetTime</code> based on this time with the subtraction made, not null
 @throw DateTimeExceptionif the subtraction cannot be made
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeOffsetTime *)minusWithJavaTimeTemporalTemporalAmount:(id<JavaTimeTemporalTemporalAmount>)amountToSubtract;

/*!
 @brief Returns a copy of this <code>OffsetTime</code> with the specified number of hours subtracted.
 <p>
  This subtracts the specified number of hours from this time, returning a new time.
  The calculation wraps around midnight. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param hours the hours to subtract, may be negative
 @return an <code>OffsetTime</code> based on this time with the hours subtracted, not null
 */
- (JavaTimeOffsetTime *)minusHoursWithLong:(jlong)hours;

/*!
 @brief Returns a copy of this <code>OffsetTime</code> with the specified number of minutes subtracted.
 <p>
  This subtracts the specified number of minutes from this time, returning a new time.
  The calculation wraps around midnight. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param minutes the minutes to subtract, may be negative
 @return an <code>OffsetTime</code> based on this time with the minutes subtracted, not null
 */
- (JavaTimeOffsetTime *)minusMinutesWithLong:(jlong)minutes;

/*!
 @brief Returns a copy of this <code>OffsetTime</code> with the specified number of nanoseconds subtracted.
 <p>
  This subtracts the specified number of nanoseconds from this time, returning a new time.
  The calculation wraps around midnight. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param nanos the nanos to subtract, may be negative
 @return an <code>OffsetTime</code> based on this time with the nanoseconds subtracted, not null
 */
- (JavaTimeOffsetTime *)minusNanosWithLong:(jlong)nanos;

/*!
 @brief Returns a copy of this <code>OffsetTime</code> with the specified number of seconds subtracted.
 <p>
  This subtracts the specified number of seconds from this time, returning a new time.
  The calculation wraps around midnight. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param seconds the seconds to subtract, may be negative
 @return an <code>OffsetTime</code> based on this time with the seconds subtracted, not null
 */
- (JavaTimeOffsetTime *)minusSecondsWithLong:(jlong)seconds;

/*!
 @brief Obtains the current time from the system clock in the default time-zone.
 <p>
  This will query the <code>system clock</code> in the default
  time-zone to obtain the current time.
  The offset will be calculated from the time-zone in the clock. 
 <p>
  Using this method will prevent the ability to use an alternate clock for testing
  because the clock is hard-coded.
 @return the current time using the system clock and default time-zone, not null
 */
+ (JavaTimeOffsetTime *)now;

/*!
 @brief Obtains the current time from the specified clock.
 <p>
  This will query the specified clock to obtain the current time.
  The offset will be calculated from the time-zone in the clock. 
 <p>
  Using this method allows the use of an alternate clock for testing.
  The alternate clock may be introduced using <code>dependency injection</code>.
 @param clock the clock to use, not null
 @return the current time, not null
 */
+ (JavaTimeOffsetTime *)nowWithJavaTimeClock:(JavaTimeClock *)clock;

/*!
 @brief Obtains the current time from the system clock in the specified time-zone.
 <p>
  This will query the <code>system clock</code> to obtain the current time.
  Specifying the time-zone avoids dependence on the default time-zone.
  The offset will be calculated from the specified time-zone. 
 <p>
  Using this method will prevent the ability to use an alternate clock for testing
  because the clock is hard-coded.
 @param zone the zone ID to use, not null
 @return the current time using the system clock, not null
 */
+ (JavaTimeOffsetTime *)nowWithJavaTimeZoneId:(JavaTimeZoneId *)zone;

/*!
 @brief Obtains an instance of <code>OffsetTime</code> from an hour, minute, second and nanosecond.
 <p>
  This creates an offset time with the four specified fields. 
 <p>
  This method exists primarily for writing test cases.
  Non test-code will typically use other methods to create an offset time. 
 <code>LocalTime</code> has two additional convenience variants of the
  equivalent factory method taking fewer arguments.
  They are not provided here to reduce the footprint of the API.
 @param hour the hour-of-day to represent, from 0 to 23
 @param minute the minute-of-hour to represent, from 0 to 59
 @param second the second-of-minute to represent, from 0 to 59
 @param nanoOfSecond the nano-of-second to represent, from 0 to 999,999,999
 @param offset the zone offset, not null
 @return the offset time, not null
 @throw DateTimeExceptionif the value of any field is out of range
 */
+ (JavaTimeOffsetTime *)ofWithInt:(jint)hour
                          withInt:(jint)minute
                          withInt:(jint)second
                          withInt:(jint)nanoOfSecond
           withJavaTimeZoneOffset:(JavaTimeZoneOffset *)offset;

/*!
 @brief Obtains an instance of <code>OffsetTime</code> from a local time and an offset.
 @param time the local time, not null
 @param offset the zone offset, not null
 @return the offset time, not null
 */
+ (JavaTimeOffsetTime *)ofWithJavaTimeLocalTime:(JavaTimeLocalTime *)time
                         withJavaTimeZoneOffset:(JavaTimeZoneOffset *)offset;

/*!
 @brief Obtains an instance of <code>OffsetTime</code> from an <code>Instant</code> and zone ID.
 <p>
  This creates an offset time with the same instant as that specified.
  Finding the offset from UTC/Greenwich is simple as there is only one valid
  offset for each instant. 
 <p>
  The date component of the instant is dropped during the conversion.
  This means that the conversion can never fail due to the instant being
  out of the valid range of dates.
 @param instant the instant to create the time from, not null
 @param zone the time-zone, which may be an offset, not null
 @return the offset time, not null
 */
+ (JavaTimeOffsetTime *)ofInstantWithJavaTimeInstant:(JavaTimeInstant *)instant
                                  withJavaTimeZoneId:(JavaTimeZoneId *)zone;

/*!
 @brief Obtains an instance of <code>OffsetTime</code> from a text string such as <code>10:15:30+01:00</code>.
 <p>
  The string must represent a valid time and is parsed using 
 <code>java.time.format.DateTimeFormatter.ISO_OFFSET_TIME</code>.
 @param text the text to parse such as "10:15:30+01:00", not null
 @return the parsed local time, not null
 @throw DateTimeParseExceptionif the text cannot be parsed
 */
+ (JavaTimeOffsetTime *)parseWithJavaLangCharSequence:(id<JavaLangCharSequence>)text;

/*!
 @brief Obtains an instance of <code>OffsetTime</code> from a text string using a specific formatter.
 <p>
  The text is parsed using the formatter, returning a time.
 @param text the text to parse, not null
 @param formatter the formatter to use, not null
 @return the parsed offset time, not null
 @throw DateTimeParseExceptionif the text cannot be parsed
 */
+ (JavaTimeOffsetTime *)parseWithJavaLangCharSequence:(id<JavaLangCharSequence>)text
                  withJavaTimeFormatDateTimeFormatter:(JavaTimeFormatDateTimeFormatter *)formatter;

/*!
 @brief Returns a copy of this time with the specified amount added.
 <p>
  This returns an <code>OffsetTime</code>, based on this one, with the amount
  in terms of the unit added. If it is not possible to add the amount, because the
  unit is not supported or for some other reason, an exception is thrown. 
 <p>
  If the field is a <code>ChronoUnit</code> then the addition is implemented by 
 <code>LocalTime.plus(long, TemporalUnit)</code>.
  The offset is not part of the calculation and will be unchanged in the result. 
 <p>
  If the field is not a <code>ChronoUnit</code>, then the result of this method
  is obtained by invoking <code>TemporalUnit.addTo(Temporal, long)</code>
  passing <code>this</code> as the argument. In this case, the unit determines
  whether and how to perform the addition. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param amountToAdd the amount of the unit to add to the result, may be negative
 @param unit the unit of the amount to add, not null
 @return an <code>OffsetTime</code> based on this time with the specified amount added, not null
 @throw DateTimeExceptionif the addition cannot be made
 @throw UnsupportedTemporalTypeExceptionif the unit is not supported
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeOffsetTime *)plusWithLong:(jlong)amountToAdd
    withJavaTimeTemporalTemporalUnit:(id<JavaTimeTemporalTemporalUnit>)unit;

/*!
 @brief Returns a copy of this time with the specified amount added.
 <p>
  This returns an <code>OffsetTime</code>, based on this one, with the specified amount added.
  The amount is typically <code>Duration</code> but may be any other type implementing
  the <code>TemporalAmount</code> interface. 
 <p>
  The calculation is delegated to the amount object by calling 
 <code>TemporalAmount.addTo(Temporal)</code>. The amount implementation is free
  to implement the addition in any way it wishes, however it typically
  calls back to <code>plus(long, TemporalUnit)</code>. Consult the documentation
  of the amount implementation to determine if it can be successfully added. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param amountToAdd the amount to add, not null
 @return an <code>OffsetTime</code> based on this time with the addition made, not null
 @throw DateTimeExceptionif the addition cannot be made
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeOffsetTime *)plusWithJavaTimeTemporalTemporalAmount:(id<JavaTimeTemporalTemporalAmount>)amountToAdd;

/*!
 @brief Returns a copy of this <code>OffsetTime</code> with the specified number of hours added.
 <p>
  This adds the specified number of hours to this time, returning a new time.
  The calculation wraps around midnight. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param hours the hours to add, may be negative
 @return an <code>OffsetTime</code> based on this time with the hours added, not null
 */
- (JavaTimeOffsetTime *)plusHoursWithLong:(jlong)hours;

/*!
 @brief Returns a copy of this <code>OffsetTime</code> with the specified number of minutes added.
 <p>
  This adds the specified number of minutes to this time, returning a new time.
  The calculation wraps around midnight. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param minutes the minutes to add, may be negative
 @return an <code>OffsetTime</code> based on this time with the minutes added, not null
 */
- (JavaTimeOffsetTime *)plusMinutesWithLong:(jlong)minutes;

/*!
 @brief Returns a copy of this <code>OffsetTime</code> with the specified number of nanoseconds added.
 <p>
  This adds the specified number of nanoseconds to this time, returning a new time.
  The calculation wraps around midnight. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param nanos the nanos to add, may be negative
 @return an <code>OffsetTime</code> based on this time with the nanoseconds added, not null
 */
- (JavaTimeOffsetTime *)plusNanosWithLong:(jlong)nanos;

/*!
 @brief Returns a copy of this <code>OffsetTime</code> with the specified number of seconds added.
 <p>
  This adds the specified number of seconds to this time, returning a new time.
  The calculation wraps around midnight. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param seconds the seconds to add, may be negative
 @return an <code>OffsetTime</code> based on this time with the seconds added, not null
 */
- (JavaTimeOffsetTime *)plusSecondsWithLong:(jlong)seconds;

/*!
 @brief Queries this time using the specified query.
 <p>
  This queries this time using the specified query strategy object.
  The <code>TemporalQuery</code> object defines the logic to be used to
  obtain the result. Read the documentation of the query to understand
  what the result of this method will be. 
 <p>
  The result of this method is obtained by invoking the 
 <code>TemporalQuery.queryFrom(TemporalAccessor)</code> method on the
  specified query passing <code>this</code> as the argument.
 @param query the query to invoke, not null
 @return the query result, null may be returned (defined by the query)
 @throw DateTimeExceptionif unable to query (defined by the query)
 @throw ArithmeticExceptionif numeric overflow occurs (defined by the query)
 */
- (id)queryWithJavaTimeTemporalTemporalQuery:(id<JavaTimeTemporalTemporalQuery>)query;

/*!
 @brief Gets the range of valid values for the specified field.
 <p>
  The range object expresses the minimum and maximum valid values for a field.
  This time is used to enhance the accuracy of the returned range.
  If it is not possible to return the range, because the field is not supported
  or for some other reason, an exception is thrown. 
 <p>
  If the field is a <code>ChronoField</code> then the query is implemented here.
  The <code>supported fields</code> will return
  appropriate range instances.
  All other <code>ChronoField</code> instances will throw an <code>UnsupportedTemporalTypeException</code>.
  <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.rangeRefinedBy(TemporalAccessor)</code>
  passing <code>this</code> as the argument.
  Whether the range can be obtained is determined by the field.
 @param field the field to query the range for, not null
 @return the range of valid values for the field, not null
 @throw DateTimeExceptionif the range for the field cannot be obtained
 @throw UnsupportedTemporalTypeExceptionif the field is not supported
 */
- (JavaTimeTemporalValueRange *)rangeWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field;

/*!
 @brief Gets the <code>LocalTime</code> part of this date-time.
 <p>
  This returns a <code>LocalTime</code> with the same hour, minute, second and
  nanosecond as this date-time.
 @return the time part of this date-time, not null
 */
- (JavaTimeLocalTime *)toLocalTime;

/*!
 @brief Outputs this time as a <code>String</code>, such as <code>10:15:30+01:00</code>.
 <p>
  The output will be one of the following ISO-8601 formats: 
 <ul>
  <li><code>HH:mmXXXXX</code></li>
  <li><code>HH:mm:ssXXXXX</code></li>
  <li><code>HH:mm:ss.SSSXXXXX</code></li>
  <li><code>HH:mm:ss.SSSSSSXXXXX</code></li>
  <li><code>HH:mm:ss.SSSSSSSSSXXXXX</code></li>
  </ul>
  The format used will be the shortest that outputs the full value of
  the time where the omitted parts are implied to be zero.
 @return a string representation of this time, not null
 */
- (NSString *)description;

/*!
 @brief Returns a copy of this <code>OffsetTime</code> with the time truncated.
 <p>
  Truncation returns a copy of the original time with fields
  smaller than the specified unit set to zero.
  For example, truncating with the <code>minutes</code> unit
  will set the second-of-minute and nano-of-second field to zero. 
 <p>
  The unit must have a duration
  that divides into the length of a standard day without remainder.
  This includes all supplied time units on <code>ChronoUnit</code> and 
 <code>DAYS</code>. Other units throw an exception. 
 <p>
  The offset does not affect the calculation and will be the same in the result. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param unit the unit to truncate to, not null
 @return an <code>OffsetTime</code> based on this time with the time truncated, not null
 @throw DateTimeExceptionif unable to truncate
 @throw UnsupportedTemporalTypeExceptionif the unit is not supported
 */
- (JavaTimeOffsetTime *)truncatedToWithJavaTimeTemporalTemporalUnit:(id<JavaTimeTemporalTemporalUnit>)unit;

/*!
 @brief Calculates the amount of time until another time in terms of the specified unit.
 <p>
  This calculates the amount of time between two <code>OffsetTime</code>
  objects in terms of a single <code>TemporalUnit</code>.
  The start and end points are <code>this</code> and the specified time.
  The result will be negative if the end is before the start.
  For example, the amount in hours between two times can be calculated
  using <code>startTime.until(endTime, HOURS)</code>.
  <p>
  The <code>Temporal</code> passed to this method is converted to a 
 <code>OffsetTime</code> using <code>from(TemporalAccessor)</code>.
  If the offset differs between the two times, then the specified
  end time is normalized to have the same offset as this time. 
 <p>
  The calculation returns a whole number, representing the number of
  complete units between the two times.
  For example, the amount in hours between 11:30Z and 13:29Z will only
  be one hour as it is one minute short of two hours. 
 <p>
  There are two equivalent ways of using this method.
  The first is to invoke this method.
  The second is to use <code>TemporalUnit.between(Temporal, Temporal)</code>:
  @code

    // these two lines are equivalent
    amount = start.until(end, MINUTES);
    amount = MINUTES.between(start, end); 
  
@endcode
  The choice should be made based on which makes the code more readable. 
 <p>
  The calculation is implemented in this method for <code>ChronoUnit</code>.
  The units <code>NANOS</code>, <code>MICROS</code>, <code>MILLIS</code>, <code>SECONDS</code>,
  <code>MINUTES</code>, <code>HOURS</code> and <code>HALF_DAYS</code> are supported.
  Other <code>ChronoUnit</code> values will throw an exception. 
 <p>
  If the unit is not a <code>ChronoUnit</code>, then the result of this method
  is obtained by invoking <code>TemporalUnit.between(Temporal, Temporal)</code>
  passing <code>this</code> as the first argument and the converted input temporal
  as the second argument. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param endExclusive the end time, exclusive, which is converted to an <code>OffsetTime</code> , not null
 @param unit the unit to measure the amount in, not null
 @return the amount of time between this time and the end time
 @throw DateTimeExceptionif the amount cannot be calculated, or the end
   temporal cannot be converted to an <code>OffsetTime</code>
 @throw UnsupportedTemporalTypeExceptionif the unit is not supported
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (jlong)untilWithJavaTimeTemporalTemporal:(id<JavaTimeTemporalTemporal>)endExclusive
          withJavaTimeTemporalTemporalUnit:(id<JavaTimeTemporalTemporalUnit>)unit;

/*!
 @brief Returns an adjusted copy of this time.
 <p>
  This returns an <code>OffsetTime</code>, based on this one, with the time adjusted.
  The adjustment takes place using the specified adjuster strategy object.
  Read the documentation of the adjuster to understand what adjustment will be made. 
 <p>
  A simple adjuster might simply set the one of the fields, such as the hour field.
  A more complex adjuster might set the time to the last hour of the day. 
 <p>
  The classes <code>LocalTime</code> and <code>ZoneOffset</code> implement <code>TemporalAdjuster</code>,
  thus this method can be used to change the time or offset: 
 @code

   result = offsetTime.with(time);
   result = offsetTime.with(offset); 
  
@endcode
  <p>
  The result of this method is obtained by invoking the 
 <code>TemporalAdjuster.adjustInto(Temporal)</code> method on the
  specified adjuster passing <code>this</code> as the argument. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param adjuster the adjuster to use, not null
 @return an <code>OffsetTime</code> based on <code>this</code> with the adjustment made, not null
 @throw DateTimeExceptionif the adjustment cannot be made
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeOffsetTime *)withWithJavaTimeTemporalTemporalAdjuster:(id<JavaTimeTemporalTemporalAdjuster>)adjuster;

/*!
 @brief Returns a copy of this time with the specified field set to a new value.
 <p>
  This returns an <code>OffsetTime</code>, based on this one, with the value
  for the specified field changed.
  This can be used to change any supported field, such as the hour, minute or second.
  If it is not possible to set the value, because the field is not supported or for
  some other reason, an exception is thrown. 
 <p>
  If the field is a <code>ChronoField</code> then the adjustment is implemented here. 
 <p>
  The <code>OFFSET_SECONDS</code> field will return a time with the specified offset.
  The local time is unaltered. If the new offset value is outside the valid range
  then a <code>DateTimeException</code> will be thrown. 
 <p>
  The other <code>supported fields</code> will behave as per
  the matching method on <code>LocalTime.with(TemporalField, long)</code> LocalTime}.
  In this case, the offset is not part of the calculation and will be unchanged. 
 <p>
  All other <code>ChronoField</code> instances will throw an <code>UnsupportedTemporalTypeException</code>.
  <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.adjustInto(Temporal, long)</code>
  passing <code>this</code> as the argument. In this case, the field determines
  whether and how to adjust the instant. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param field the field to set in the result, not null
 @param newValue the new value of the field in the result
 @return an <code>OffsetTime</code> based on <code>this</code> with the specified field set, not null
 @throw DateTimeExceptionif the field cannot be set
 @throw UnsupportedTemporalTypeExceptionif the field is not supported
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeOffsetTime *)withWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field
                                                     withLong:(jlong)newValue;

/*!
 @brief Returns a copy of this <code>OffsetTime</code> with the hour-of-day altered.
 <p>
  The offset does not affect the calculation and will be the same in the result. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param hour the hour-of-day to set in the result, from 0 to 23
 @return an <code>OffsetTime</code> based on this time with the requested hour, not null
 @throw DateTimeExceptionif the hour value is invalid
 */
- (JavaTimeOffsetTime *)withHourWithInt:(jint)hour;

/*!
 @brief Returns a copy of this <code>OffsetTime</code> with the minute-of-hour altered.
 <p>
  The offset does not affect the calculation and will be the same in the result. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param minute the minute-of-hour to set in the result, from 0 to 59
 @return an <code>OffsetTime</code> based on this time with the requested minute, not null
 @throw DateTimeExceptionif the minute value is invalid
 */
- (JavaTimeOffsetTime *)withMinuteWithInt:(jint)minute;

/*!
 @brief Returns a copy of this <code>OffsetTime</code> with the nano-of-second altered.
 <p>
  The offset does not affect the calculation and will be the same in the result. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param nanoOfSecond the nano-of-second to set in the result, from 0 to 999,999,999
 @return an <code>OffsetTime</code> based on this time with the requested nanosecond, not null
 @throw DateTimeExceptionif the nanos value is invalid
 */
- (JavaTimeOffsetTime *)withNanoWithInt:(jint)nanoOfSecond;

/*!
 @brief Returns a copy of this <code>OffsetTime</code> with the specified offset ensuring
  that the result is at the same instant on an implied day.
 <p>
  This method returns an object with the specified <code>ZoneOffset</code> and a <code>LocalTime</code>
  adjusted by the difference between the two offsets.
  This will result in the old and new objects representing the same instant on an implied day.
  This is useful for finding the local time in a different offset.
  For example, if this time represents <code>10:30+02:00</code> and the offset specified is 
 <code>+03:00</code>, then this method will return <code>11:30+03:00</code>.
  <p>
  To change the offset without adjusting the local time use <code>withOffsetSameLocal</code>.
  <p>
  This instance is immutable and unaffected by this method call.
 @param offset the zone offset to change to, not null
 @return an <code>OffsetTime</code> based on this time with the requested offset, not null
 */
- (JavaTimeOffsetTime *)withOffsetSameInstantWithJavaTimeZoneOffset:(JavaTimeZoneOffset *)offset;

/*!
 @brief Returns a copy of this <code>OffsetTime</code> with the specified offset ensuring
  that the result has the same local time.
 <p>
  This method returns an object with the same <code>LocalTime</code> and the specified <code>ZoneOffset</code>.
  No calculation is needed or performed.
  For example, if this time represents <code>10:30+02:00</code> and the offset specified is 
 <code>+03:00</code>, then this method will return <code>10:30+03:00</code>.
  <p>
  To take into account the difference between the offsets, and adjust the time fields,
  use <code>withOffsetSameInstant</code>.
  <p>
  This instance is immutable and unaffected by this method call.
 @param offset the zone offset to change to, not null
 @return an <code>OffsetTime</code> based on this time with the requested offset, not null
 */
- (JavaTimeOffsetTime *)withOffsetSameLocalWithJavaTimeZoneOffset:(JavaTimeZoneOffset *)offset;

/*!
 @brief Returns a copy of this <code>OffsetTime</code> with the second-of-minute altered.
 <p>
  The offset does not affect the calculation and will be the same in the result. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param second the second-of-minute to set in the result, from 0 to 59
 @return an <code>OffsetTime</code> based on this time with the requested second, not null
 @throw DateTimeExceptionif the second value is invalid
 */
- (JavaTimeOffsetTime *)withSecondWithInt:(jint)second;

#pragma mark Package-Private

+ (JavaTimeOffsetTime *)readExternalWithJavaIoObjectInput:(id<JavaIoObjectInput>)inArg;

- (void)writeExternalWithJavaIoObjectOutput:(id<JavaIoObjectOutput>)outArg;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(JavaTimeOffsetTime)

/*!
 @brief The minimum supported <code>OffsetTime</code>, '00:00:00+18:00'.
 This is the time of midnight at the start of the day in the maximum offset
  (larger offsets are earlier on the time-line).
  This combines <code>LocalTime.MIN</code> and <code>ZoneOffset.MAX</code>.
  This could be used by an application as a "far past" date.
 */
inline JavaTimeOffsetTime *JavaTimeOffsetTime_get_MIN(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaTimeOffsetTime *JavaTimeOffsetTime_MIN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaTimeOffsetTime, MIN, JavaTimeOffsetTime *)

/*!
 @brief The maximum supported <code>OffsetTime</code>, '23:59:59.999999999-18:00'.
 This is the time just before midnight at the end of the day in the minimum offset
  (larger negative offsets are later on the time-line).
  This combines <code>LocalTime.MAX</code> and <code>ZoneOffset.MIN</code>.
  This could be used by an application as a "far future" date.
 */
inline JavaTimeOffsetTime *JavaTimeOffsetTime_get_MAX(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaTimeOffsetTime *JavaTimeOffsetTime_MAX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaTimeOffsetTime, MAX, JavaTimeOffsetTime *)

FOUNDATION_EXPORT JavaTimeOffsetTime *JavaTimeOffsetTime_now(void);

FOUNDATION_EXPORT JavaTimeOffsetTime *JavaTimeOffsetTime_nowWithJavaTimeZoneId_(JavaTimeZoneId *zone);

FOUNDATION_EXPORT JavaTimeOffsetTime *JavaTimeOffsetTime_nowWithJavaTimeClock_(JavaTimeClock *clock);

FOUNDATION_EXPORT JavaTimeOffsetTime *JavaTimeOffsetTime_ofWithJavaTimeLocalTime_withJavaTimeZoneOffset_(JavaTimeLocalTime *time, JavaTimeZoneOffset *offset);

FOUNDATION_EXPORT JavaTimeOffsetTime *JavaTimeOffsetTime_ofWithInt_withInt_withInt_withInt_withJavaTimeZoneOffset_(jint hour, jint minute, jint second, jint nanoOfSecond, JavaTimeZoneOffset *offset);

FOUNDATION_EXPORT JavaTimeOffsetTime *JavaTimeOffsetTime_ofInstantWithJavaTimeInstant_withJavaTimeZoneId_(JavaTimeInstant *instant, JavaTimeZoneId *zone);

FOUNDATION_EXPORT JavaTimeOffsetTime *JavaTimeOffsetTime_fromWithJavaTimeTemporalTemporalAccessor_(id<JavaTimeTemporalTemporalAccessor> temporal);

FOUNDATION_EXPORT JavaTimeOffsetTime *JavaTimeOffsetTime_parseWithJavaLangCharSequence_(id<JavaLangCharSequence> text);

FOUNDATION_EXPORT JavaTimeOffsetTime *JavaTimeOffsetTime_parseWithJavaLangCharSequence_withJavaTimeFormatDateTimeFormatter_(id<JavaLangCharSequence> text, JavaTimeFormatDateTimeFormatter *formatter);

FOUNDATION_EXPORT JavaTimeOffsetTime *JavaTimeOffsetTime_readExternalWithJavaIoObjectInput_(id<JavaIoObjectInput> inArg);

J2OBJC_TYPE_LITERAL_HEADER(JavaTimeOffsetTime)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaTimeOffsetTime")
