//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/time/Instant.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaTimeInstant")
#ifdef RESTRICT_JavaTimeInstant
#define INCLUDE_ALL_JavaTimeInstant 0
#else
#define INCLUDE_ALL_JavaTimeInstant 1
#endif
#undef RESTRICT_JavaTimeInstant

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaTimeInstant_) && (INCLUDE_ALL_JavaTimeInstant || defined(INCLUDE_JavaTimeInstant))
#define JavaTimeInstant_

#define RESTRICT_JavaTimeTemporalTemporal 1
#define INCLUDE_JavaTimeTemporalTemporal 1
#include "java/time/temporal/Temporal.h"

#define RESTRICT_JavaTimeTemporalTemporalAdjuster 1
#define INCLUDE_JavaTimeTemporalTemporalAdjuster 1
#include "java/time/temporal/TemporalAdjuster.h"

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "java/lang/Comparable.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class JavaTimeClock;
@class JavaTimeOffsetDateTime;
@class JavaTimeTemporalValueRange;
@class JavaTimeZoneId;
@class JavaTimeZoneOffset;
@class JavaTimeZonedDateTime;
@protocol JavaIoDataInput;
@protocol JavaIoDataOutput;
@protocol JavaLangCharSequence;
@protocol JavaTimeTemporalTemporalAccessor;
@protocol JavaTimeTemporalTemporalAmount;
@protocol JavaTimeTemporalTemporalField;
@protocol JavaTimeTemporalTemporalQuery;
@protocol JavaTimeTemporalTemporalUnit;

/*!
 @brief An instantaneous point on the time-line.
 <p>
  This class models a single instantaneous point on the time-line.
  This might be used to record event time-stamps in the application. 
 <p>
  The range of an instant requires the storage of a number larger than a <code>long</code>.
  To achieve this, the class stores a <code>long</code> representing epoch-seconds and an 
 <code>int</code> representing nanosecond-of-second, which will always be between 0 and 999,999,999.
  The epoch-seconds are measured from the standard Java epoch of <code>1970-01-01T00:00:00Z</code>
  where instants after the epoch have positive values, and earlier instants have negative values.
  For both the epoch-second and nanosecond parts, a larger value is always later on the time-line
  than a smaller value. 
 <h3>Time-scale</h3>
  <p>
  The length of the solar day is the standard way that humans measure time.
  This has traditionally been subdivided into 24 hours of 60 minutes of 60 seconds,
  forming a 86400 second day. 
 <p>
  Modern timekeeping is based on atomic clocks which precisely define an SI second
  relative to the transitions of a Caesium atom. The length of an SI second was defined
  to be very close to the 86400th fraction of a day. 
 <p>
  Unfortunately, as the Earth rotates the length of the day varies.
  In addition, over time the average length of the day is getting longer as the Earth slows.
  As a result, the length of a solar day in 2012 is slightly longer than 86400 SI seconds.
  The actual length of any given day and the amount by which the Earth is slowing
  are not predictable and can only be determined by measurement.
  The UT1 time-scale captures the accurate length of day, but is only available some
  time after the day has completed. 
 <p>
  The UTC time-scale is a standard approach to bundle up all the additional fractions
  of a second from UT1 into whole seconds, known as <i>leap-seconds</i>.
  A leap-second may be added or removed depending on the Earth's rotational changes.
  As such, UTC permits a day to have 86399 SI seconds or 86401 SI seconds where
  necessary in order to keep the day aligned with the Sun. 
 <p>
  The modern UTC time-scale was introduced in 1972, introducing the concept of whole leap-seconds.
  Between 1958 and 1972, the definition of UTC was complex, with minor sub-second leaps and
  alterations to the length of the notional second. As of 2012, discussions are underway
  to change the definition of UTC again, with the potential to remove leap seconds or
  introduce other changes. 
 <p>
  Given the complexity of accurate timekeeping described above, this Java API defines
  its own time-scale, the <i>Java Time-Scale</i>.
  <p>
  The Java Time-Scale divides each calendar day into exactly 86400
  subdivisions, known as seconds.  These seconds may differ from the
  SI second.  It closely matches the de facto international civil time
  scale, the definition of which changes from time to time. 
 <p>
  The Java Time-Scale has slightly different definitions for different
  segments of the time-line, each based on the consensus international
  time scale that is used as the basis for civil time. Whenever the
  internationally-agreed time scale is modified or replaced, a new
  segment of the Java Time-Scale must be defined for it.  Each segment
  must meet these requirements: 
 <ul>
  <li>the Java Time-Scale shall closely match the underlying international
   civil time scale;</li>
  <li>the Java Time-Scale shall exactly match the international civil
   time scale at noon each day;</li>
  <li>the Java Time-Scale shall have a precisely-defined relationship to
   the international civil time scale.</li>
  </ul>
  There are currently, as of 2013, two segments in the Java time-scale. 
 <p>
  For the segment from 1972-11-03 (exact boundary discussed below) until
  further notice, the consensus international time scale is UTC (with
  leap seconds).  In this segment, the Java Time-Scale is identical to 
 <a href="http://www.cl.cam.ac.uk/~mgk25/time/utc-sls/">UTC-SLS</a>.
  This is identical to UTC on days that do not have a leap second.
  On days that do have a leap second, the leap second is spread equally
  over the last 1000 seconds of the day, maintaining the appearance of
  exactly 86400 seconds per day. 
 <p>
  For the segment prior to 1972-11-03, extending back arbitrarily far,
  the consensus international time scale is defined to be UT1, applied
  proleptically, which is equivalent to the (mean) solar time on the
  prime meridian (Greenwich). In this segment, the Java Time-Scale is
  identical to the consensus international time scale. The exact
  boundary between the two segments is the instant where UT1 = UTC
  between 1972-11-03T00:00 and 1972-11-04T12:00. 
 <p>
  Implementations of the Java time-scale using the JSR-310 API are not
  required to provide any clock that is sub-second accurate, or that
  progresses monotonically or smoothly. Implementations are therefore
  not required to actually perform the UTC-SLS slew or to otherwise be
  aware of leap seconds. JSR-310 does, however, require that
  implementations must document the approach they use when defining a
  clock representing the current instant.
  See <code>Clock</code> for details on the available clocks. 
 <p>
  The Java time-scale is used for all date-time classes.
  This includes <code>Instant</code>, <code>LocalDate</code>, <code>LocalTime</code>, <code>OffsetDateTime</code>,
  <code>ZonedDateTime</code> and <code>Duration</code>.
 @since 1.8
 */
@interface JavaTimeInstant : NSObject < JavaTimeTemporalTemporal, JavaTimeTemporalTemporalAdjuster, JavaLangComparable, JavaIoSerializable >
@property (readonly, class, strong) JavaTimeInstant *EPOCH NS_SWIFT_NAME(EPOCH);
@property (readonly, class, strong) JavaTimeInstant *MIN NS_SWIFT_NAME(MIN);
@property (readonly, class, strong) JavaTimeInstant *MAX NS_SWIFT_NAME(MAX);

+ (JavaTimeInstant *)EPOCH;

+ (JavaTimeInstant *)MIN;

+ (JavaTimeInstant *)MAX;

#pragma mark Public

/*!
 @brief Adjusts the specified temporal object to have this instant.
 <p>
  This returns a temporal object of the same observable type as the input
  with the instant changed to be the same as this. 
 <p>
  The adjustment is equivalent to using <code>Temporal.with(TemporalField, long)</code>
  twice, passing <code>ChronoField.INSTANT_SECONDS</code> and 
 <code>ChronoField.NANO_OF_SECOND</code> as the fields. 
 <p>
  In most cases, it is clearer to reverse the calling pattern by using 
 <code>Temporal.with(TemporalAdjuster)</code>:
  @code

    // these two lines are equivalent, but the second approach is recommended
    temporal = thisInstant.adjustInto(temporal);
    temporal = temporal.with(thisInstant); 
  
@endcode
  <p>
  This instance is immutable and unaffected by this method call.
 @param temporal the target object to be adjusted, not null
 @return the adjusted object, not null
 @throw DateTimeExceptionif unable to make the adjustment
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (id<JavaTimeTemporalTemporal>)adjustIntoWithJavaTimeTemporalTemporal:(id<JavaTimeTemporalTemporal>)temporal;

/*!
 @brief Combines this instant with an offset to create an <code>OffsetDateTime</code>.
 <p>
  This returns an <code>OffsetDateTime</code> formed from this instant at the
  specified offset from UTC/Greenwich. An exception will be thrown if the
  instant is too large to fit into an offset date-time. 
 <p>
  This method is equivalent to 
 <code>OffsetDateTime.ofInstant(this, offset)</code>.
 @param offset the offset to combine with, not null
 @return the offset date-time formed from this instant and the specified offset, not null
 @throw DateTimeExceptionif the result exceeds the supported range
 */
- (JavaTimeOffsetDateTime *)atOffsetWithJavaTimeZoneOffset:(JavaTimeZoneOffset *)offset;

/*!
 @brief Combines this instant with a time-zone to create a <code>ZonedDateTime</code>.
 <p>
  This returns an <code>ZonedDateTime</code> formed from this instant at the
  specified time-zone. An exception will be thrown if the instant is too
  large to fit into a zoned date-time. 
 <p>
  This method is equivalent to 
 <code>ZonedDateTime.ofInstant(this, zone)</code>.
 @param zone the zone to combine with, not null
 @return the zoned date-time formed from this instant and the specified zone, not null
 @throw DateTimeExceptionif the result exceeds the supported range
 */
- (JavaTimeZonedDateTime *)atZoneWithJavaTimeZoneId:(JavaTimeZoneId *)zone;

/*!
 @brief Compares this instant to the specified instant.
 <p>
  The comparison is based on the time-line position of the instants.
  It is "consistent with equals", as defined by <code>Comparable</code>.
 @param otherInstant the other instant to compare to, not null
 @return the comparator value, negative if less, positive if greater
 @throw NullPointerExceptionif otherInstant is null
 */
- (jint)compareToWithId:(JavaTimeInstant *)otherInstant;

/*!
 @brief Checks if this instant is equal to the specified instant.
 <p>
  The comparison is based on the time-line position of the instants.
 @param otherInstant the other instant, null returns false
 @return true if the other instant is equal to this one
 */
- (jboolean)isEqual:(id)otherInstant;

/*!
 @brief Obtains an instance of <code>Instant</code> from a temporal object.
 <p>
  This obtains an instant based on the specified temporal.
  A <code>TemporalAccessor</code> represents an arbitrary set of date and time information,
  which this factory converts to an instance of <code>Instant</code>.
  <p>
  The conversion extracts the <code>INSTANT_SECONDS</code>
  and <code>NANO_OF_SECOND</code> fields. 
 <p>
  This method matches the signature of the functional interface <code>TemporalQuery</code>
  allowing it to be used as a query via method reference, <code>Instant::from</code>.
 @param temporal the temporal object to convert, not null
 @return the instant, not null
 @throw DateTimeExceptionif unable to convert to an <code>Instant</code>
 */
+ (JavaTimeInstant *)fromWithJavaTimeTemporalTemporalAccessor:(id<JavaTimeTemporalTemporalAccessor>)temporal;

/*!
 @brief Gets the value of the specified field from this instant as an <code>int</code>.
 <p>
  This queries this instant for the value of the specified field.
  The returned value will always be within the valid range of values for the field.
  If it is not possible to return the value, because the field is not supported
  or for some other reason, an exception is thrown. 
 <p>
  If the field is a <code>ChronoField</code> then the query is implemented here.
  The <code>supported fields</code> will return valid
  values based on this date-time, except <code>INSTANT_SECONDS</code> which is too
  large to fit in an <code>int</code> and throws a <code>DateTimeException</code>.
  All other <code>ChronoField</code> instances will throw an <code>UnsupportedTemporalTypeException</code>.
  <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.getFrom(TemporalAccessor)</code>
  passing <code>this</code> as the argument. Whether the value can be obtained,
  and what the value represents, is determined by the field.
 @param field the field to get, not null
 @return the value for the field
 @throw DateTimeExceptionif a value for the field cannot be obtained or
          the value is outside the range of valid values for the field
 @throw UnsupportedTemporalTypeExceptionif the field is not supported or
          the range of values exceeds an <code>int</code>
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (jint)getWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field;

/*!
 @brief Gets the number of seconds from the Java epoch of 1970-01-01T00:00:00Z.
 <p>
  The epoch second count is a simple incrementing count of seconds where
  second 0 is 1970-01-01T00:00:00Z.
  The nanosecond part of the day is returned by <code>getNanosOfSecond</code>.
 @return the seconds from the epoch of 1970-01-01T00:00:00Z
 */
- (jlong)getEpochSecond;

/*!
 @brief Gets the value of the specified field from this instant as a <code>long</code>.
 <p>
  This queries this instant for the value of the specified field.
  If it is not possible to return the value, because the field is not supported
  or for some other reason, an exception is thrown. 
 <p>
  If the field is a <code>ChronoField</code> then the query is implemented here.
  The <code>supported fields</code> will return valid
  values based on this date-time.
  All other <code>ChronoField</code> instances will throw an <code>UnsupportedTemporalTypeException</code>.
  <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.getFrom(TemporalAccessor)</code>
  passing <code>this</code> as the argument. Whether the value can be obtained,
  and what the value represents, is determined by the field.
 @param field the field to get, not null
 @return the value for the field
 @throw DateTimeExceptionif a value for the field cannot be obtained
 @throw UnsupportedTemporalTypeExceptionif the field is not supported
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (jlong)getLongWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field;

/*!
 @brief Gets the number of nanoseconds, later along the time-line, from the start
  of the second.
 <p>
  The nanosecond-of-second value measures the total number of nanoseconds from
  the second returned by <code>getEpochSecond</code>.
 @return the nanoseconds within the second, always positive, never exceeds 999,999,999
 */
- (jint)getNano;

/*!
 @brief Returns a hash code for this instant.
 @return a suitable hash code
 */
- (NSUInteger)hash;

/*!
 @brief Checks if this instant is after the specified instant.
 <p>
  The comparison is based on the time-line position of the instants.
 @param otherInstant the other instant to compare to, not null
 @return true if this instant is after the specified instant
 @throw NullPointerExceptionif otherInstant is null
 */
- (jboolean)isAfterWithJavaTimeInstant:(JavaTimeInstant *)otherInstant;

/*!
 @brief Checks if this instant is before the specified instant.
 <p>
  The comparison is based on the time-line position of the instants.
 @param otherInstant the other instant to compare to, not null
 @return true if this instant is before the specified instant
 @throw NullPointerExceptionif otherInstant is null
 */
- (jboolean)isBeforeWithJavaTimeInstant:(JavaTimeInstant *)otherInstant;

/*!
 @brief Checks if the specified field is supported.
 <p>
  This checks if this instant can be queried for the specified field.
  If false, then calling the <code>range</code>,
  <code>get</code> and <code>with(TemporalField, long)</code>
  methods will throw an exception. 
 <p>
  If the field is a <code>ChronoField</code> then the query is implemented here.
  The supported fields are: 
 <ul>
  <li><code>NANO_OF_SECOND</code>
  <li><code>MICRO_OF_SECOND</code>
  <li><code>MILLI_OF_SECOND</code>
  <li><code>INSTANT_SECONDS</code>
  </ul>
  All other <code>ChronoField</code> instances will return false. 
 <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.isSupportedBy(TemporalAccessor)</code>
  passing <code>this</code> as the argument.
  Whether the field is supported is determined by the field.
 @param field the field to check, null returns false
 @return true if the field is supported on this instant, false if not
 */
- (jboolean)isSupportedWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field;

/*!
 @brief Checks if the specified unit is supported.
 <p>
  This checks if the specified unit can be added to, or subtracted from, this date-time.
  If false, then calling the <code>plus(long, TemporalUnit)</code> and 
 <code>minus</code> methods will throw an exception. 
 <p>
  If the unit is a <code>ChronoUnit</code> then the query is implemented here.
  The supported units are: 
 <ul>
  <li><code>NANOS</code>
  <li><code>MICROS</code>
  <li><code>MILLIS</code>
  <li><code>SECONDS</code>
  <li><code>MINUTES</code>
  <li><code>HOURS</code>
  <li><code>HALF_DAYS</code>
  <li><code>DAYS</code>
  </ul>
  All other <code>ChronoUnit</code> instances will return false. 
 <p>
  If the unit is not a <code>ChronoUnit</code>, then the result of this method
  is obtained by invoking <code>TemporalUnit.isSupportedBy(Temporal)</code>
  passing <code>this</code> as the argument.
  Whether the unit is supported is determined by the unit.
 @param unit the unit to check, null returns false
 @return true if the unit can be added/subtracted, false if not
 */
- (jboolean)isSupportedWithJavaTimeTemporalTemporalUnit:(id<JavaTimeTemporalTemporalUnit>)unit;

/*!
 @brief Returns a copy of this instant with the specified amount subtracted.
 <p>
  This returns a <code>Instant</code>, based on this one, with the amount
  in terms of the unit subtracted. If it is not possible to subtract the amount,
  because the unit is not supported or for some other reason, an exception is thrown. 
 <p>
  This method is equivalent to <code>plus(long, TemporalUnit)</code> with the amount negated.
  See that method for a full description of how addition, and thus subtraction, works. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param amountToSubtract the amount of the unit to subtract from the result, may be negative
 @param unit the unit of the amount to subtract, not null
 @return an <code>Instant</code> based on this instant with the specified amount subtracted, not null
 @throw DateTimeExceptionif the subtraction cannot be made
 @throw UnsupportedTemporalTypeExceptionif the unit is not supported
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeInstant *)minusWithLong:(jlong)amountToSubtract
  withJavaTimeTemporalTemporalUnit:(id<JavaTimeTemporalTemporalUnit>)unit;

/*!
 @brief Returns a copy of this instant with the specified amount subtracted.
 <p>
  This returns an <code>Instant</code>, based on this one, with the specified amount subtracted.
  The amount is typically <code>Duration</code> but may be any other type implementing
  the <code>TemporalAmount</code> interface. 
 <p>
  The calculation is delegated to the amount object by calling 
 <code>TemporalAmount.subtractFrom(Temporal)</code>. The amount implementation is free
  to implement the subtraction in any way it wishes, however it typically
  calls back to <code>minus(long, TemporalUnit)</code>. Consult the documentation
  of the amount implementation to determine if it can be successfully subtracted. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param amountToSubtract the amount to subtract, not null
 @return an <code>Instant</code> based on this instant with the subtraction made, not null
 @throw DateTimeExceptionif the subtraction cannot be made
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeInstant *)minusWithJavaTimeTemporalTemporalAmount:(id<JavaTimeTemporalTemporalAmount>)amountToSubtract;

/*!
 @brief Returns a copy of this instant with the specified duration in milliseconds subtracted.
 <p>
  This instance is immutable and unaffected by this method call.
 @param millisToSubtract the milliseconds to subtract, positive or negative
 @return an <code>Instant</code> based on this instant with the specified milliseconds subtracted, not null
 @throw DateTimeExceptionif the result exceeds the maximum or minimum instant
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeInstant *)minusMillisWithLong:(jlong)millisToSubtract;

/*!
 @brief Returns a copy of this instant with the specified duration in nanoseconds subtracted.
 <p>
  This instance is immutable and unaffected by this method call.
 @param nanosToSubtract the nanoseconds to subtract, positive or negative
 @return an <code>Instant</code> based on this instant with the specified nanoseconds subtracted, not null
 @throw DateTimeExceptionif the result exceeds the maximum or minimum instant
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeInstant *)minusNanosWithLong:(jlong)nanosToSubtract;

/*!
 @brief Returns a copy of this instant with the specified duration in seconds subtracted.
 <p>
  This instance is immutable and unaffected by this method call.
 @param secondsToSubtract the seconds to subtract, positive or negative
 @return an <code>Instant</code> based on this instant with the specified seconds subtracted, not null
 @throw DateTimeExceptionif the result exceeds the maximum or minimum instant
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeInstant *)minusSecondsWithLong:(jlong)secondsToSubtract;

/*!
 @brief Obtains the current instant from the system clock.
 <p>
  This will query the <code>system UTC clock</code> to
  obtain the current instant. 
 <p>
  Using this method will prevent the ability to use an alternate time-source for
  testing because the clock is effectively hard-coded.
 @return the current instant using the system clock, not null
 */
+ (JavaTimeInstant *)now;

/*!
 @brief Obtains the current instant from the specified clock.
 <p>
  This will query the specified clock to obtain the current time. 
 <p>
  Using this method allows the use of an alternate clock for testing.
  The alternate clock may be introduced using <code>dependency injection</code>.
 @param clock the clock to use, not null
 @return the current instant, not null
 */
+ (JavaTimeInstant *)nowWithJavaTimeClock:(JavaTimeClock *)clock;

/*!
 @brief Obtains an instance of <code>Instant</code> using milliseconds from the
  epoch of 1970-01-01T00:00:00Z.
 <p>
  The seconds and nanoseconds are extracted from the specified milliseconds.
 @param epochMilli the number of milliseconds from 1970-01-01T00:00:00Z
 @return an instant, not null
 @throw DateTimeExceptionif the instant exceeds the maximum or minimum instant
 */
+ (JavaTimeInstant *)ofEpochMilliWithLong:(jlong)epochMilli;

/*!
 @brief Obtains an instance of <code>Instant</code> using seconds from the
  epoch of 1970-01-01T00:00:00Z.
 <p>
  The nanosecond field is set to zero.
 @param epochSecond the number of seconds from 1970-01-01T00:00:00Z
 @return an instant, not null
 @throw DateTimeExceptionif the instant exceeds the maximum or minimum instant
 */
+ (JavaTimeInstant *)ofEpochSecondWithLong:(jlong)epochSecond;

/*!
 @brief Obtains an instance of <code>Instant</code> using seconds from the
  epoch of 1970-01-01T00:00:00Z and nanosecond fraction of second.
 <p>
  This method allows an arbitrary number of nanoseconds to be passed in.
  The factory will alter the values of the second and nanosecond in order
  to ensure that the stored nanosecond is in the range 0 to 999,999,999.
  For example, the following will result in the exactly the same instant: 
 @code

   Instant.ofEpochSecond(3, 1);
   Instant.ofEpochSecond(4, -999_999_999);
   Instant.ofEpochSecond(2, 1000_000_001); 
  
@endcode
 @param epochSecond the number of seconds from 1970-01-01T00:00:00Z
 @param nanoAdjustment the nanosecond adjustment to the number of seconds, positive or negative
 @return an instant, not null
 @throw DateTimeExceptionif the instant exceeds the maximum or minimum instant
 @throw ArithmeticExceptionif numeric overflow occurs
 */
+ (JavaTimeInstant *)ofEpochSecondWithLong:(jlong)epochSecond
                                  withLong:(jlong)nanoAdjustment;

/*!
 @brief Obtains an instance of <code>Instant</code> from a text string such as 
 <code>2007-12-03T10:15:30.00Z</code>.
 <p>
  The string must represent a valid instant in UTC and is parsed using 
 <code>DateTimeFormatter.ISO_INSTANT</code>.
 @param text the text to parse, not null
 @return the parsed instant, not null
 @throw DateTimeParseExceptionif the text cannot be parsed
 */
+ (JavaTimeInstant *)parseWithJavaLangCharSequence:(id<JavaLangCharSequence>)text;

/*!
 @brief Returns a copy of this instant with the specified amount added.
 <p>
  This returns an <code>Instant</code>, based on this one, with the amount
  in terms of the unit added. If it is not possible to add the amount, because the
  unit is not supported or for some other reason, an exception is thrown. 
 <p>
  If the field is a <code>ChronoUnit</code> then the addition is implemented here.
  The supported fields behave as follows: 
 <ul>
  <li><code>NANOS</code> -
   Returns a <code>Instant</code> with the specified number of nanoseconds added.
   This is equivalent to <code>plusNanos(long)</code>.
  <li><code>MICROS</code> -
   Returns a <code>Instant</code> with the specified number of microseconds added.
   This is equivalent to <code>plusNanos(long)</code> with the amount
   multiplied by 1,000. 
 <li><code>MILLIS</code> -
   Returns a <code>Instant</code> with the specified number of milliseconds added.
   This is equivalent to <code>plusNanos(long)</code> with the amount
   multiplied by 1,000,000. 
 <li><code>SECONDS</code> -
   Returns a <code>Instant</code> with the specified number of seconds added.
   This is equivalent to <code>plusSeconds(long)</code>.
  <li><code>MINUTES</code> -
   Returns a <code>Instant</code> with the specified number of minutes added.
   This is equivalent to <code>plusSeconds(long)</code> with the amount
   multiplied by 60. 
 <li><code>HOURS</code> -
   Returns a <code>Instant</code> with the specified number of hours added.
   This is equivalent to <code>plusSeconds(long)</code> with the amount
   multiplied by 3,600. 
 <li><code>HALF_DAYS</code> -
   Returns a <code>Instant</code> with the specified number of half-days added.
   This is equivalent to <code>plusSeconds(long)</code> with the amount
   multiplied by 43,200 (12 hours). 
 <li><code>DAYS</code> -
   Returns a <code>Instant</code> with the specified number of days added.
   This is equivalent to <code>plusSeconds(long)</code> with the amount
   multiplied by 86,400 (24 hours). 
 </ul>
  <p>
  All other <code>ChronoUnit</code> instances will throw an <code>UnsupportedTemporalTypeException</code>.
  <p>
  If the field is not a <code>ChronoUnit</code>, then the result of this method
  is obtained by invoking <code>TemporalUnit.addTo(Temporal, long)</code>
  passing <code>this</code> as the argument. In this case, the unit determines
  whether and how to perform the addition. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param amountToAdd the amount of the unit to add to the result, may be negative
 @param unit the unit of the amount to add, not null
 @return an <code>Instant</code> based on this instant with the specified amount added, not null
 @throw DateTimeExceptionif the addition cannot be made
 @throw UnsupportedTemporalTypeExceptionif the unit is not supported
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeInstant *)plusWithLong:(jlong)amountToAdd
 withJavaTimeTemporalTemporalUnit:(id<JavaTimeTemporalTemporalUnit>)unit;

/*!
 @brief Returns a copy of this instant with the specified amount added.
 <p>
  This returns an <code>Instant</code>, based on this one, with the specified amount added.
  The amount is typically <code>Duration</code> but may be any other type implementing
  the <code>TemporalAmount</code> interface. 
 <p>
  The calculation is delegated to the amount object by calling 
 <code>TemporalAmount.addTo(Temporal)</code>. The amount implementation is free
  to implement the addition in any way it wishes, however it typically
  calls back to <code>plus(long, TemporalUnit)</code>. Consult the documentation
  of the amount implementation to determine if it can be successfully added. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param amountToAdd the amount to add, not null
 @return an <code>Instant</code> based on this instant with the addition made, not null
 @throw DateTimeExceptionif the addition cannot be made
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeInstant *)plusWithJavaTimeTemporalTemporalAmount:(id<JavaTimeTemporalTemporalAmount>)amountToAdd;

/*!
 @brief Returns a copy of this instant with the specified duration in milliseconds added.
 <p>
  This instance is immutable and unaffected by this method call.
 @param millisToAdd the milliseconds to add, positive or negative
 @return an <code>Instant</code> based on this instant with the specified milliseconds added, not null
 @throw DateTimeExceptionif the result exceeds the maximum or minimum instant
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeInstant *)plusMillisWithLong:(jlong)millisToAdd;

/*!
 @brief Returns a copy of this instant with the specified duration in nanoseconds added.
 <p>
  This instance is immutable and unaffected by this method call.
 @param nanosToAdd the nanoseconds to add, positive or negative
 @return an <code>Instant</code> based on this instant with the specified nanoseconds added, not null
 @throw DateTimeExceptionif the result exceeds the maximum or minimum instant
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeInstant *)plusNanosWithLong:(jlong)nanosToAdd;

/*!
 @brief Returns a copy of this instant with the specified duration in seconds added.
 <p>
  This instance is immutable and unaffected by this method call.
 @param secondsToAdd the seconds to add, positive or negative
 @return an <code>Instant</code> based on this instant with the specified seconds added, not null
 @throw DateTimeExceptionif the result exceeds the maximum or minimum instant
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeInstant *)plusSecondsWithLong:(jlong)secondsToAdd;

/*!
 @brief Queries this instant using the specified query.
 <p>
  This queries this instant using the specified query strategy object.
  The <code>TemporalQuery</code> object defines the logic to be used to
  obtain the result. Read the documentation of the query to understand
  what the result of this method will be. 
 <p>
  The result of this method is obtained by invoking the 
 <code>TemporalQuery.queryFrom(TemporalAccessor)</code> method on the
  specified query passing <code>this</code> as the argument.
 @param query the query to invoke, not null
 @return the query result, null may be returned (defined by the query)
 @throw DateTimeExceptionif unable to query (defined by the query)
 @throw ArithmeticExceptionif numeric overflow occurs (defined by the query)
 */
- (id)queryWithJavaTimeTemporalTemporalQuery:(id<JavaTimeTemporalTemporalQuery>)query;

/*!
 @brief Gets the range of valid values for the specified field.
 <p>
  The range object expresses the minimum and maximum valid values for a field.
  This instant is used to enhance the accuracy of the returned range.
  If it is not possible to return the range, because the field is not supported
  or for some other reason, an exception is thrown. 
 <p>
  If the field is a <code>ChronoField</code> then the query is implemented here.
  The <code>supported fields</code> will return
  appropriate range instances.
  All other <code>ChronoField</code> instances will throw an <code>UnsupportedTemporalTypeException</code>.
  <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.rangeRefinedBy(TemporalAccessor)</code>
  passing <code>this</code> as the argument.
  Whether the range can be obtained is determined by the field.
 @param field the field to query the range for, not null
 @return the range of valid values for the field, not null
 @throw DateTimeExceptionif the range for the field cannot be obtained
 @throw UnsupportedTemporalTypeExceptionif the field is not supported
 */
- (JavaTimeTemporalValueRange *)rangeWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field;

/*!
 @brief Converts this instant to the number of milliseconds from the epoch
  of 1970-01-01T00:00:00Z.
 <p>
  If this instant represents a point on the time-line too far in the future
  or past to fit in a <code>long</code> milliseconds, then an exception is thrown. 
 <p>
  If this instant has greater than millisecond precision, then the conversion
  will drop any excess precision information as though the amount in nanoseconds
  was subject to integer division by one million.
 @return the number of milliseconds since the epoch of 1970-01-01T00:00:00Z
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (jlong)toEpochMilli;

/*!
 @brief A string representation of this instant using ISO-8601 representation.
 <p>
  The format used is the same as <code>DateTimeFormatter.ISO_INSTANT</code>.
 @return an ISO-8601 representation of this instant, not null
 */
- (NSString *)description;

/*!
 @brief Returns a copy of this <code>Instant</code> truncated to the specified unit.
 <p>
  Truncating the instant returns a copy of the original with fields
  smaller than the specified unit set to zero.
  The fields are calculated on the basis of using a UTC offset as seen
  in <code>toString</code>.
  For example, truncating with the <code>MINUTES</code> unit will
  round down to the nearest minute, setting the seconds and nanoseconds to zero. 
 <p>
  The unit must have a duration
  that divides into the length of a standard day without remainder.
  This includes all supplied time units on <code>ChronoUnit</code> and 
 <code>DAYS</code>. Other units throw an exception. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param unit the unit to truncate to, not null
 @return an <code>Instant</code> based on this instant with the time truncated, not null
 @throw DateTimeExceptionif the unit is invalid for truncation
 @throw UnsupportedTemporalTypeExceptionif the unit is not supported
 */
- (JavaTimeInstant *)truncatedToWithJavaTimeTemporalTemporalUnit:(id<JavaTimeTemporalTemporalUnit>)unit;

/*!
 @brief Calculates the amount of time until another instant in terms of the specified unit.
 <p>
  This calculates the amount of time between two <code>Instant</code>
  objects in terms of a single <code>TemporalUnit</code>.
  The start and end points are <code>this</code> and the specified instant.
  The result will be negative if the end is before the start.
  The calculation returns a whole number, representing the number of
  complete units between the two instants.
  The <code>Temporal</code> passed to this method is converted to a 
 <code>Instant</code> using <code>from(TemporalAccessor)</code>.
  For example, the amount in days between two dates can be calculated
  using <code>startInstant.until(endInstant, SECONDS)</code>.
  <p>
  There are two equivalent ways of using this method.
  The first is to invoke this method.
  The second is to use <code>TemporalUnit.between(Temporal, Temporal)</code>:
  @code

    // these two lines are equivalent
    amount = start.until(end, SECONDS);
    amount = SECONDS.between(start, end); 
  
@endcode
  The choice should be made based on which makes the code more readable. 
 <p>
  The calculation is implemented in this method for <code>ChronoUnit</code>.
  The units <code>NANOS</code>, <code>MICROS</code>, <code>MILLIS</code>, <code>SECONDS</code>,
  <code>MINUTES</code>, <code>HOURS</code>, <code>HALF_DAYS</code> and <code>DAYS</code>
  are supported. Other <code>ChronoUnit</code> values will throw an exception. 
 <p>
  If the unit is not a <code>ChronoUnit</code>, then the result of this method
  is obtained by invoking <code>TemporalUnit.between(Temporal, Temporal)</code>
  passing <code>this</code> as the first argument and the converted input temporal
  as the second argument. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param endExclusive the end date, exclusive, which is converted to an <code>Instant</code> , not null
 @param unit the unit to measure the amount in, not null
 @return the amount of time between this instant and the end instant
 @throw DateTimeExceptionif the amount cannot be calculated, or the end
   temporal cannot be converted to an <code>Instant</code>
 @throw UnsupportedTemporalTypeExceptionif the unit is not supported
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (jlong)untilWithJavaTimeTemporalTemporal:(id<JavaTimeTemporalTemporal>)endExclusive
          withJavaTimeTemporalTemporalUnit:(id<JavaTimeTemporalTemporalUnit>)unit;

/*!
 @brief Returns an adjusted copy of this instant.
 <p>
  This returns an <code>Instant</code>, based on this one, with the instant adjusted.
  The adjustment takes place using the specified adjuster strategy object.
  Read the documentation of the adjuster to understand what adjustment will be made. 
 <p>
  The result of this method is obtained by invoking the 
 <code>TemporalAdjuster.adjustInto(Temporal)</code> method on the
  specified adjuster passing <code>this</code> as the argument. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param adjuster the adjuster to use, not null
 @return an <code>Instant</code> based on <code>this</code> with the adjustment made, not null
 @throw DateTimeExceptionif the adjustment cannot be made
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeInstant *)withWithJavaTimeTemporalTemporalAdjuster:(id<JavaTimeTemporalTemporalAdjuster>)adjuster;

/*!
 @brief Returns a copy of this instant with the specified field set to a new value.
 <p>
  This returns an <code>Instant</code>, based on this one, with the value
  for the specified field changed.
  If it is not possible to set the value, because the field is not supported or for
  some other reason, an exception is thrown. 
 <p>
  If the field is a <code>ChronoField</code> then the adjustment is implemented here.
  The supported fields behave as follows: 
 <ul>
  <li><code>NANO_OF_SECOND</code> -
   Returns an <code>Instant</code> with the specified nano-of-second.
   The epoch-second will be unchanged. 
 <li><code>MICRO_OF_SECOND</code> -
   Returns an <code>Instant</code> with the nano-of-second replaced by the specified
   micro-of-second multiplied by 1,000. The epoch-second will be unchanged. 
 <li><code>MILLI_OF_SECOND</code> -
   Returns an <code>Instant</code> with the nano-of-second replaced by the specified
   milli-of-second multiplied by 1,000,000. The epoch-second will be unchanged. 
 <li><code>INSTANT_SECONDS</code> -
   Returns an <code>Instant</code> with the specified epoch-second.
   The nano-of-second will be unchanged. 
 </ul>
  <p>
  In all cases, if the new value is outside the valid range of values for the field
  then a <code>DateTimeException</code> will be thrown. 
 <p>
  All other <code>ChronoField</code> instances will throw an <code>UnsupportedTemporalTypeException</code>.
  <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.adjustInto(Temporal, long)</code>
  passing <code>this</code> as the argument. In this case, the field determines
  whether and how to adjust the instant. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param field the field to set in the result, not null
 @param newValue the new value of the field in the result
 @return an <code>Instant</code> based on <code>this</code> with the specified field set, not null
 @throw DateTimeExceptionif the field cannot be set
 @throw UnsupportedTemporalTypeExceptionif the field is not supported
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeInstant *)withWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field
                                                  withLong:(jlong)newValue;

#pragma mark Package-Private

+ (JavaTimeInstant *)readExternalWithJavaIoDataInput:(id<JavaIoDataInput>)inArg;

- (void)writeExternalWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(JavaTimeInstant)

/*!
 @brief Constant for the 1970-01-01T00:00:00Z epoch instant.
 */
inline JavaTimeInstant *JavaTimeInstant_get_EPOCH(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaTimeInstant *JavaTimeInstant_EPOCH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaTimeInstant, EPOCH, JavaTimeInstant *)

/*!
 @brief The minimum supported <code>Instant</code>, '-1000000000-01-01T00:00Z'.
 This could be used by an application as a "far past" instant. 
 <p>
  This is one year earlier than the minimum <code>LocalDateTime</code>.
  This provides sufficient values to handle the range of <code>ZoneOffset</code>
  which affect the instant in addition to the local date-time.
  The value is also chosen such that the value of the year fits in
  an <code>int</code>.
 */
inline JavaTimeInstant *JavaTimeInstant_get_MIN(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaTimeInstant *JavaTimeInstant_MIN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaTimeInstant, MIN, JavaTimeInstant *)

/*!
 @brief The maximum supported <code>Instant</code>, '1000000000-12-31T23:59:59.999999999Z'.
 This could be used by an application as a "far future" instant. 
 <p>
  This is one year later than the maximum <code>LocalDateTime</code>.
  This provides sufficient values to handle the range of <code>ZoneOffset</code>
  which affect the instant in addition to the local date-time.
  The value is also chosen such that the value of the year fits in
  an <code>int</code>.
 */
inline JavaTimeInstant *JavaTimeInstant_get_MAX(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaTimeInstant *JavaTimeInstant_MAX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaTimeInstant, MAX, JavaTimeInstant *)

FOUNDATION_EXPORT JavaTimeInstant *JavaTimeInstant_now(void);

FOUNDATION_EXPORT JavaTimeInstant *JavaTimeInstant_nowWithJavaTimeClock_(JavaTimeClock *clock);

FOUNDATION_EXPORT JavaTimeInstant *JavaTimeInstant_ofEpochSecondWithLong_(jlong epochSecond);

FOUNDATION_EXPORT JavaTimeInstant *JavaTimeInstant_ofEpochSecondWithLong_withLong_(jlong epochSecond, jlong nanoAdjustment);

FOUNDATION_EXPORT JavaTimeInstant *JavaTimeInstant_ofEpochMilliWithLong_(jlong epochMilli);

FOUNDATION_EXPORT JavaTimeInstant *JavaTimeInstant_fromWithJavaTimeTemporalTemporalAccessor_(id<JavaTimeTemporalTemporalAccessor> temporal);

FOUNDATION_EXPORT JavaTimeInstant *JavaTimeInstant_parseWithJavaLangCharSequence_(id<JavaLangCharSequence> text);

FOUNDATION_EXPORT JavaTimeInstant *JavaTimeInstant_readExternalWithJavaIoDataInput_(id<JavaIoDataInput> inArg);

J2OBJC_TYPE_LITERAL_HEADER(JavaTimeInstant)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaTimeInstant")
