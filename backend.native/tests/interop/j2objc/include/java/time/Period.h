//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/time/Period.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaTimePeriod")
#ifdef RESTRICT_JavaTimePeriod
#define INCLUDE_ALL_JavaTimePeriod 0
#else
#define INCLUDE_ALL_JavaTimePeriod 1
#endif
#undef RESTRICT_JavaTimePeriod

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaTimePeriod_) && (INCLUDE_ALL_JavaTimePeriod || defined(INCLUDE_JavaTimePeriod))
#define JavaTimePeriod_

#define RESTRICT_JavaTimeChronoChronoPeriod 1
#define INCLUDE_JavaTimeChronoChronoPeriod 1
#include "java/time/chrono/ChronoPeriod.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class JavaTimeChronoIsoChronology;
@class JavaTimeLocalDate;
@protocol JavaIoDataInput;
@protocol JavaIoDataOutput;
@protocol JavaLangCharSequence;
@protocol JavaTimeTemporalTemporal;
@protocol JavaTimeTemporalTemporalAmount;
@protocol JavaTimeTemporalTemporalUnit;
@protocol JavaUtilList;

/*!
 @brief A date-based amount of time in the ISO-8601 calendar system,
  such as '2 years, 3 months and 4 days'.
 <p>
  This class models a quantity or amount of time in terms of years, months and days.
  See <code>Duration</code> for the time-based equivalent to this class. 
 <p>
  Durations and periods differ in their treatment of daylight savings time
  when added to <code>ZonedDateTime</code>. A <code>Duration</code> will add an exact
  number of seconds, thus a duration of one day is always exactly 24 hours.
  By contrast, a <code>Period</code> will add a conceptual day, trying to maintain
  the local time. 
 <p>
  For example, consider adding a period of one day and a duration of one day to
  18:00 on the evening before a daylight savings gap. The <code>Period</code> will add
  the conceptual day and result in a <code>ZonedDateTime</code> at 18:00 the following day.
  By contrast, the <code>Duration</code> will add exactly 24 hours, resulting in a 
 <code>ZonedDateTime</code> at 19:00 the following day (assuming a one hour DST gap). 
 <p>
  The supported units of a period are <code>YEARS</code>,
  <code>MONTHS</code> and <code>DAYS</code>.
  All three fields are always present, but may be set to zero. 
 <p>
  The ISO-8601 calendar system is the modern civil calendar system used today
  in most of the world. It is equivalent to the proleptic Gregorian calendar
  system, in which today's rules for leap years are applied for all time. 
 <p>
  The period is modeled as a directed amount of time, meaning that individual parts of the
  period may be negative.
 @since 1.8
 */
@interface JavaTimePeriod : NSObject < JavaTimeChronoChronoPeriod, JavaIoSerializable >
@property (readonly, class, strong) JavaTimePeriod *ZERO NS_SWIFT_NAME(ZERO);

+ (JavaTimePeriod *)ZERO;

#pragma mark Public

/*!
 @brief Adds this period to the specified temporal object.
 <p>
  This returns a temporal object of the same observable type as the input
  with this period added.
  If the temporal has a chronology, it must be the ISO chronology. 
 <p>
  In most cases, it is clearer to reverse the calling pattern by using 
 <code>Temporal.plus(TemporalAmount)</code>.
  @code

    // these two lines are equivalent, but the second approach is recommended
    dateTime = thisPeriod.addTo(dateTime);
    dateTime = dateTime.plus(thisPeriod); 
  
@endcode
  <p>
  The calculation operates as follows.
  First, the chronology of the temporal is checked to ensure it is ISO chronology or null.
  Second, if the months are zero, the years are added if non-zero, otherwise
  the combination of years and months is added if non-zero.
  Finally, any days are added. 
 <p>
  This approach ensures that a partial period can be added to a partial date.
  For example, a period of years and/or months can be added to a <code>YearMonth</code>,
  but a period including days cannot.
  The approach also adds years and months together when necessary, which ensures
  correct behaviour at the end of the month. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param temporal the temporal object to adjust, not null
 @return an object of the same type with the adjustment made, not null
 @throw DateTimeExceptionif unable to add
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (id<JavaTimeTemporalTemporal>)addToWithJavaTimeTemporalTemporal:(id<JavaTimeTemporalTemporal>)temporal;

/*!
 @brief Obtains a <code>Period</code> consisting of the number of years, months,
  and days between two dates.
 <p>
  The start date is included, but the end date is not.
  The period is calculated by removing complete months, then calculating
  the remaining number of days, adjusting to ensure that both have the same sign.
  The number of months is then split into years and months based on a 12 month year.
  A month is considered if the end day-of-month is greater than or equal to the start day-of-month.
  For example, from <code>2010-01-15</code> to <code>2011-03-18</code> is one year, two months and three days. 
 <p>
  The result of this method can be a negative period if the end is before the start.
  The negative sign will be the same in each of year, month and day.
 @param startDateInclusive the start date, inclusive, not null
 @param endDateExclusive the end date, exclusive, not null
 @return the period between this date and the end date, not null
 - seealso: ChronoLocalDate#until(ChronoLocalDate)
 */
+ (JavaTimePeriod *)betweenWithJavaTimeLocalDate:(JavaTimeLocalDate *)startDateInclusive
                           withJavaTimeLocalDate:(JavaTimeLocalDate *)endDateExclusive;

/*!
 @brief Checks if this period is equal to another period.
 <p>
  The comparison is based on the type <code>Period</code> and each of the three amounts.
  To be equal, the years, months and days units must be individually equal.
  Note that this means that a period of "15 Months" is not equal to a period
  of "1 Year and 3 Months".
 @param obj the object to check, null returns false
 @return true if this is equal to the other period
 */
- (jboolean)isEqual:(id)obj;

/*!
 @brief Obtains an instance of <code>Period</code> from a temporal amount.
 <p>
  This obtains a period based on the specified amount.
  A <code>TemporalAmount</code> represents an  amount of time, which may be
  date-based or time-based, which this factory extracts to a <code>Period</code>.
  <p>
  The conversion loops around the set of units from the amount and uses the 
 <code>YEARS</code>, <code>MONTHS</code>
  and <code>DAYS</code> units to create a period.
  If any other units are found then an exception is thrown. 
 <p>
  If the amount is a <code>ChronoPeriod</code> then it must use the ISO chronology.
 @param amount the temporal amount to convert, not null
 @return the equivalent period, not null
 @throw DateTimeExceptionif unable to convert to a <code>Period</code>
 @throw ArithmeticExceptionif the amount of years, months or days exceeds an int
 */
+ (JavaTimePeriod *)fromWithJavaTimeTemporalTemporalAmount:(id<JavaTimeTemporalTemporalAmount>)amount;

/*!
 @brief Gets the value of the requested unit.
 <p>
  This returns a value for each of the three supported units, 
 <code>YEARS</code>, <code>MONTHS</code> and 
 <code>DAYS</code>.
  All other units throw an exception.
 @param unit the <code>TemporalUnit</code>  for which to return the value
 @return the long value of the unit
 @throw DateTimeExceptionif the unit is not supported
 @throw UnsupportedTemporalTypeExceptionif the unit is not supported
 */
- (jlong)getWithJavaTimeTemporalTemporalUnit:(id<JavaTimeTemporalTemporalUnit>)unit;

/*!
 @brief Gets the chronology of this period, which is the ISO calendar system.
 <p>
  The <code>Chronology</code> represents the calendar system in use.
  The ISO-8601 calendar system is the modern civil calendar system used today
  in most of the world. It is equivalent to the proleptic Gregorian calendar
  system, in which today's rules for leap years are applied for all time.
 @return the ISO chronology, not null
 */
- (JavaTimeChronoIsoChronology *)getChronology;

/*!
 @brief Gets the amount of days of this period.
 <p>
  This returns the days unit.
 @return the amount of days of this period, may be negative
 */
- (jint)getDays;

/*!
 @brief Gets the amount of months of this period.
 <p>
  This returns the months unit. 
 <p>
  The months unit is not automatically normalized with the years unit.
  This means that a period of "15 months" is different to a period
  of "1 year and 3 months".
 @return the amount of months of this period, may be negative
 */
- (jint)getMonths;

/*!
 @brief Gets the set of units supported by this period.
 <p>
  The supported units are <code>YEARS</code>,
  <code>MONTHS</code> and <code>DAYS</code>.
  They are returned in the order years, months, days. 
 <p>
  This set can be used in conjunction with <code>get(TemporalUnit)</code>
  to access the entire state of the period.
 @return a list containing the years, months and days units, not null
 */
- (id<JavaUtilList>)getUnits;

/*!
 @brief Gets the amount of years of this period.
 <p>
  This returns the years unit. 
 <p>
  The months unit is not automatically normalized with the years unit.
  This means that a period of "15 months" is different to a period
  of "1 year and 3 months".
 @return the amount of years of this period, may be negative
 */
- (jint)getYears;

/*!
 @brief A hash code for this period.
 @return a suitable hash code
 */
- (NSUInteger)hash;

/*!
 @brief Checks if any of the three units of this period are negative.
 <p>
  This checks whether the years, months or days units are less than zero.
 @return true if any unit of this period is negative
 */
- (jboolean)isNegative;

/*!
 @brief Checks if all three units of this period are zero.
 <p>
  A zero period has the value zero for the years, months and days units.
 @return true if this period is zero-length
 */
- (jboolean)isZero;

/*!
 @brief Returns a copy of this period with the specified period subtracted.
 <p>
  This operates separately on the years, months and days.
  No normalization is performed. 
 <p>
  For example, "1 year, 6 months and 3 days" minus "2 years, 2 months and 2 days"
  returns "-1 years, 4 months and 1 day". 
 <p>
  The specified amount is typically an instance of <code>Period</code>.
  Other types are interpreted using <code>Period.from(TemporalAmount)</code>.
  <p>
  This instance is immutable and unaffected by this method call.
 @param amountToSubtract the amount to subtract, not null
 @return a <code>Period</code> based on this period with the requested period subtracted, not null
 @throw DateTimeExceptionif the specified amount has a non-ISO chronology or
   contains an invalid unit
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimePeriod *)minusWithJavaTimeTemporalTemporalAmount:(id<JavaTimeTemporalTemporalAmount>)amountToSubtract;

/*!
 @brief Returns a copy of this period with the specified days subtracted.
 <p>
  This subtracts the amount from the days unit in a copy of this period.
  The years and months units are unaffected.
  For example, "1 year, 6 months and 3 days" minus 2 days returns "1 year, 6 months and 1 day". 
 <p>
  This instance is immutable and unaffected by this method call.
 @param daysToSubtract the months to subtract, positive or negative
 @return a <code>Period</code> based on this period with the specified days subtracted, not null
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimePeriod *)minusDaysWithLong:(jlong)daysToSubtract;

/*!
 @brief Returns a copy of this period with the specified months subtracted.
 <p>
  This subtracts the amount from the months unit in a copy of this period.
  The years and days units are unaffected.
  For example, "1 year, 6 months and 3 days" minus 2 months returns "1 year, 4 months and 3 days". 
 <p>
  This instance is immutable and unaffected by this method call.
 @param monthsToSubtract the years to subtract, positive or negative
 @return a <code>Period</code> based on this period with the specified months subtracted, not null
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimePeriod *)minusMonthsWithLong:(jlong)monthsToSubtract;

/*!
 @brief Returns a copy of this period with the specified years subtracted.
 <p>
  This subtracts the amount from the years unit in a copy of this period.
  The months and days units are unaffected.
  For example, "1 year, 6 months and 3 days" minus 2 years returns "-1 years, 6 months and 3 days". 
 <p>
  This instance is immutable and unaffected by this method call.
 @param yearsToSubtract the years to subtract, positive or negative
 @return a <code>Period</code> based on this period with the specified years subtracted, not null
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimePeriod *)minusYearsWithLong:(jlong)yearsToSubtract;

/*!
 @brief Returns a new instance with each element in this period multiplied
  by the specified scalar.
 <p>
  This returns a period with each of the years, months and days units
  individually multiplied.
  For example, a period of "2 years, -3 months and 4 days" multiplied by
  3 will return "6 years, -9 months and 12 days".
  No normalization is performed.
 @param scalar the scalar to multiply by, not null
 @return a <code>Period</code> based on this period with the amounts multiplied by the scalar, not null
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimePeriod *)multipliedByWithInt:(jint)scalar;

/*!
 @brief Returns a new instance with each amount in this period negated.
 <p>
  This returns a period with each of the years, months and days units
  individually negated.
  For example, a period of "2 years, -3 months and 4 days" will be
  negated to "-2 years, 3 months and -4 days".
  No normalization is performed.
 @return a <code>Period</code> based on this period with the amounts negated, not null
 @throw ArithmeticExceptionif numeric overflow occurs, which only happens if
   one of the units has the value <code>Long.MIN_VALUE</code>
 */
- (JavaTimePeriod *)negated;

/*!
 @brief Returns a copy of this period with the years and months normalized.
 <p>
  This normalizes the years and months units, leaving the days unit unchanged.
  The months unit is adjusted to have an absolute value less than 11,
  with the years unit being adjusted to compensate. For example, a period of
  "1 Year and 15 months" will be normalized to "2 years and 3 months". 
 <p>
  The sign of the years and months units will be the same after normalization.
  For example, a period of "1 year and -25 months" will be normalized to
  "-1 year and -1 month". 
 <p>
  This instance is immutable and unaffected by this method call.
 @return a <code>Period</code> based on this period with excess months normalized to years, not null
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimePeriod *)normalized;

/*!
 @brief Obtains a <code>Period</code> representing a number of years, months and days.
 <p>
  This creates an instance based on years, months and days.
 @param years the amount of years, may be negative
 @param months the amount of months, may be negative
 @param days the amount of days, may be negative
 @return the period of years, months and days, not null
 */
+ (JavaTimePeriod *)ofWithInt:(jint)years
                      withInt:(jint)months
                      withInt:(jint)days;

/*!
 @brief Obtains a <code>Period</code> representing a number of days.
 <p>
  The resulting period will have the specified days.
  The years and months units will be zero.
 @param days the number of days, positive or negative
 @return the period of days, not null
 */
+ (JavaTimePeriod *)ofDaysWithInt:(jint)days;

/*!
 @brief Obtains a <code>Period</code> representing a number of months.
 <p>
  The resulting period will have the specified months.
  The years and days units will be zero.
 @param months the number of months, positive or negative
 @return the period of months, not null
 */
+ (JavaTimePeriod *)ofMonthsWithInt:(jint)months;

/*!
 @brief Obtains a <code>Period</code> representing a number of weeks.
 <p>
  The resulting period will be day-based, with the amount of days
  equal to the number of weeks multiplied by 7.
  The years and months units will be zero.
 @param weeks the number of weeks, positive or negative
 @return the period, with the input weeks converted to days, not null
 */
+ (JavaTimePeriod *)ofWeeksWithInt:(jint)weeks;

/*!
 @brief Obtains a <code>Period</code> representing a number of years.
 <p>
  The resulting period will have the specified years.
  The months and days units will be zero.
 @param years the number of years, positive or negative
 @return the period of years, not null
 */
+ (JavaTimePeriod *)ofYearsWithInt:(jint)years;

/*!
 @brief Obtains a <code>Period</code> from a text string such as <code>PnYnMnD</code>.
 <p>
  This will parse the string produced by <code>toString()</code> which is
  based on the ISO-8601 period formats <code>PnYnMnD</code> and <code>PnW</code>.
  <p>
  The string starts with an optional sign, denoted by the ASCII negative
  or positive symbol. If negative, the whole period is negated.
  The ASCII letter "P" is next in upper or lower case.
  There are then four sections, each consisting of a number and a suffix.
  At least one of the four sections must be present.
  The sections have suffixes in ASCII of "Y", "M", "W" and "D" for
  years, months, weeks and days, accepted in upper or lower case.
  The suffixes must occur in order.
  The number part of each section must consist of ASCII digits.
  The number may be prefixed by the ASCII negative or positive symbol.
  The number must parse to an <code>int</code>.
  <p>
  The leading plus/minus sign, and negative values for other units are
  not part of the ISO-8601 standard. In addition, ISO-8601 does not
  permit mixing between the <code>PnYnMnD</code> and <code>PnW</code> formats.
  Any week-based input is multiplied by 7 and treated as a number of days. 
 <p>
  For example, the following are valid inputs: 
 @code

    "P2Y"             -- Period.ofYears(2)
    "P3M"             -- Period.ofMonths(3)
    "P4W"             -- Period.ofWeeks(4)
    "P5D"             -- Period.ofDays(5)
    "P1Y2M3D"         -- Period.of(1, 2, 3)
    "P1Y2M3W4D"       -- Period.of(1, 2, 25)
    "P-1Y2M"          -- Period.of(-1, 2, 0)
    "-P1Y2M"          -- Period.of(-1, -2, 0) 
  
@endcode
 @param text the text to parse, not null
 @return the parsed period, not null
 @throw DateTimeParseExceptionif the text cannot be parsed to a period
 */
+ (JavaTimePeriod *)parseWithJavaLangCharSequence:(id<JavaLangCharSequence>)text;

/*!
 @brief Returns a copy of this period with the specified period added.
 <p>
  This operates separately on the years, months and days.
  No normalization is performed. 
 <p>
  For example, "1 year, 6 months and 3 days" plus "2 years, 2 months and 2 days"
  returns "3 years, 8 months and 5 days". 
 <p>
  The specified amount is typically an instance of <code>Period</code>.
  Other types are interpreted using <code>Period.from(TemporalAmount)</code>.
  <p>
  This instance is immutable and unaffected by this method call.
 @param amountToAdd the amount to add, not null
 @return a <code>Period</code> based on this period with the requested period added, not null
 @throw DateTimeExceptionif the specified amount has a non-ISO chronology or
   contains an invalid unit
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimePeriod *)plusWithJavaTimeTemporalTemporalAmount:(id<JavaTimeTemporalTemporalAmount>)amountToAdd;

/*!
 @brief Returns a copy of this period with the specified days added.
 <p>
  This adds the amount to the days unit in a copy of this period.
  The years and months units are unaffected.
  For example, "1 year, 6 months and 3 days" plus 2 days returns "1 year, 6 months and 5 days". 
 <p>
  This instance is immutable and unaffected by this method call.
 @param daysToAdd the days to add, positive or negative
 @return a <code>Period</code> based on this period with the specified days added, not null
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimePeriod *)plusDaysWithLong:(jlong)daysToAdd;

/*!
 @brief Returns a copy of this period with the specified months added.
 <p>
  This adds the amount to the months unit in a copy of this period.
  The years and days units are unaffected.
  For example, "1 year, 6 months and 3 days" plus 2 months returns "1 year, 8 months and 3 days". 
 <p>
  This instance is immutable and unaffected by this method call.
 @param monthsToAdd the months to add, positive or negative
 @return a <code>Period</code> based on this period with the specified months added, not null
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimePeriod *)plusMonthsWithLong:(jlong)monthsToAdd;

/*!
 @brief Returns a copy of this period with the specified years added.
 <p>
  This adds the amount to the years unit in a copy of this period.
  The months and days units are unaffected.
  For example, "1 year, 6 months and 3 days" plus 2 years returns "3 years, 6 months and 3 days". 
 <p>
  This instance is immutable and unaffected by this method call.
 @param yearsToAdd the years to add, positive or negative
 @return a <code>Period</code> based on this period with the specified years added, not null
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimePeriod *)plusYearsWithLong:(jlong)yearsToAdd;

/*!
 @brief Subtracts this period from the specified temporal object.
 <p>
  This returns a temporal object of the same observable type as the input
  with this period subtracted.
  If the temporal has a chronology, it must be the ISO chronology. 
 <p>
  In most cases, it is clearer to reverse the calling pattern by using 
 <code>Temporal.minus(TemporalAmount)</code>.
  @code

    // these two lines are equivalent, but the second approach is recommended
    dateTime = thisPeriod.subtractFrom(dateTime);
    dateTime = dateTime.minus(thisPeriod); 
  
@endcode
  <p>
  The calculation operates as follows.
  First, the chronology of the temporal is checked to ensure it is ISO chronology or null.
  Second, if the months are zero, the years are subtracted if non-zero, otherwise
  the combination of years and months is subtracted if non-zero.
  Finally, any days are subtracted. 
 <p>
  This approach ensures that a partial period can be subtracted from a partial date.
  For example, a period of years and/or months can be subtracted from a <code>YearMonth</code>,
  but a period including days cannot.
  The approach also subtracts years and months together when necessary, which ensures
  correct behaviour at the end of the month. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param temporal the temporal object to adjust, not null
 @return an object of the same type with the adjustment made, not null
 @throw DateTimeExceptionif unable to subtract
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (id<JavaTimeTemporalTemporal>)subtractFromWithJavaTimeTemporalTemporal:(id<JavaTimeTemporalTemporal>)temporal;

/*!
 @brief Outputs this period as a <code>String</code>, such as <code>P6Y3M1D</code>.
 <p>
  The output will be in the ISO-8601 period format.
  A zero period will be represented as zero days, 'P0D'.
 @return a string representation of this period, not null
 */
- (NSString *)description;

/*!
 @brief Gets the total number of months in this period.
 <p>
  This returns the total number of months in the period by multiplying the
  number of years by 12 and adding the number of months. 
 <p>
  This instance is immutable and unaffected by this method call.
 @return the total number of months in the period, may be negative
 */
- (jlong)toTotalMonths;

/*!
 @brief Returns a copy of this period with the specified amount of days.
 <p>
  This sets the amount of the days unit in a copy of this period.
  The years and months units are unaffected. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param days the days to represent, may be negative
 @return a <code>Period</code> based on this period with the requested days, not null
 */
- (JavaTimePeriod *)withDaysWithInt:(jint)days;

/*!
 @brief Returns a copy of this period with the specified amount of months.
 <p>
  This sets the amount of the months unit in a copy of this period.
  The years and days units are unaffected. 
 <p>
  The months unit is not automatically normalized with the years unit.
  This means that a period of "15 months" is different to a period
  of "1 year and 3 months". 
 <p>
  This instance is immutable and unaffected by this method call.
 @param months the months to represent, may be negative
 @return a <code>Period</code> based on this period with the requested months, not null
 */
- (JavaTimePeriod *)withMonthsWithInt:(jint)months;

/*!
 @brief Returns a copy of this period with the specified amount of years.
 <p>
  This sets the amount of the years unit in a copy of this period.
  The months and days units are unaffected. 
 <p>
  The months unit is not automatically normalized with the years unit.
  This means that a period of "15 months" is different to a period
  of "1 year and 3 months". 
 <p>
  This instance is immutable and unaffected by this method call.
 @param years the years to represent, may be negative
 @return a <code>Period</code> based on this period with the requested years, not null
 */
- (JavaTimePeriod *)withYearsWithInt:(jint)years;

#pragma mark Package-Private

+ (JavaTimePeriod *)readExternalWithJavaIoDataInput:(id<JavaIoDataInput>)inArg;

- (void)writeExternalWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(JavaTimePeriod)

/*!
 @brief A constant for a period of zero.
 */
inline JavaTimePeriod *JavaTimePeriod_get_ZERO(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaTimePeriod *JavaTimePeriod_ZERO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaTimePeriod, ZERO, JavaTimePeriod *)

FOUNDATION_EXPORT JavaTimePeriod *JavaTimePeriod_ofYearsWithInt_(jint years);

FOUNDATION_EXPORT JavaTimePeriod *JavaTimePeriod_ofMonthsWithInt_(jint months);

FOUNDATION_EXPORT JavaTimePeriod *JavaTimePeriod_ofWeeksWithInt_(jint weeks);

FOUNDATION_EXPORT JavaTimePeriod *JavaTimePeriod_ofDaysWithInt_(jint days);

FOUNDATION_EXPORT JavaTimePeriod *JavaTimePeriod_ofWithInt_withInt_withInt_(jint years, jint months, jint days);

FOUNDATION_EXPORT JavaTimePeriod *JavaTimePeriod_fromWithJavaTimeTemporalTemporalAmount_(id<JavaTimeTemporalTemporalAmount> amount);

FOUNDATION_EXPORT JavaTimePeriod *JavaTimePeriod_parseWithJavaLangCharSequence_(id<JavaLangCharSequence> text);

FOUNDATION_EXPORT JavaTimePeriod *JavaTimePeriod_betweenWithJavaTimeLocalDate_withJavaTimeLocalDate_(JavaTimeLocalDate *startDateInclusive, JavaTimeLocalDate *endDateExclusive);

FOUNDATION_EXPORT JavaTimePeriod *JavaTimePeriod_readExternalWithJavaIoDataInput_(id<JavaIoDataInput> inArg);

J2OBJC_TYPE_LITERAL_HEADER(JavaTimePeriod)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaTimePeriod")
