//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/time/Month.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaTimeMonth")
#ifdef RESTRICT_JavaTimeMonth
#define INCLUDE_ALL_JavaTimeMonth 0
#else
#define INCLUDE_ALL_JavaTimeMonth 1
#endif
#undef RESTRICT_JavaTimeMonth

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaTimeMonth_) && (INCLUDE_ALL_JavaTimeMonth || defined(INCLUDE_JavaTimeMonth))
#define JavaTimeMonth_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

#define RESTRICT_JavaTimeTemporalTemporalAccessor 1
#define INCLUDE_JavaTimeTemporalTemporalAccessor 1
#include "java/time/temporal/TemporalAccessor.h"

#define RESTRICT_JavaTimeTemporalTemporalAdjuster 1
#define INCLUDE_JavaTimeTemporalTemporalAdjuster 1
#include "java/time/temporal/TemporalAdjuster.h"

@class IOSObjectArray;
@class JavaTimeFormatTextStyle;
@class JavaTimeTemporalValueRange;
@class JavaUtilLocale;
@protocol JavaTimeTemporalTemporal;
@protocol JavaTimeTemporalTemporalField;
@protocol JavaTimeTemporalTemporalQuery;

typedef NS_ENUM(NSUInteger, JavaTimeMonth_Enum) {
  JavaTimeMonth_Enum_JANUARY = 0,
  JavaTimeMonth_Enum_FEBRUARY = 1,
  JavaTimeMonth_Enum_MARCH = 2,
  JavaTimeMonth_Enum_APRIL = 3,
  JavaTimeMonth_Enum_MAY = 4,
  JavaTimeMonth_Enum_JUNE = 5,
  JavaTimeMonth_Enum_JULY = 6,
  JavaTimeMonth_Enum_AUGUST = 7,
  JavaTimeMonth_Enum_SEPTEMBER = 8,
  JavaTimeMonth_Enum_OCTOBER = 9,
  JavaTimeMonth_Enum_NOVEMBER = 10,
  JavaTimeMonth_Enum_DECEMBER = 11,
};

/*!
 @brief A month-of-year, such as 'July'.
 <p>
  <code>Month</code> is an enum representing the 12 months of the year -
  January, February, March, April, May, June, July, August, September, October,
  November and December. 
 <p>
  In addition to the textual enum name, each month-of-year has an <code>int</code> value.
  The <code>int</code> value follows normal usage and the ISO-8601 standard,
  from 1 (January) to 12 (December). It is recommended that applications use the enum
  rather than the <code>int</code> value to ensure code clarity. 
 <p>
  <b>Do not use <code>ordinal()</code> to obtain the numeric representation of <code>Month</code>.
  Use <code>getValue()</code> instead.</b>
  <p>
  This enum represents a common concept that is found in many calendar systems.
  As such, this enum may be used by any calendar system that has the month-of-year
  concept defined exactly equivalent to the ISO-8601 calendar system.
 @since 1.8
 */
@interface JavaTimeMonth : JavaLangEnum < JavaTimeTemporalTemporalAccessor, JavaTimeTemporalTemporalAdjuster >

@property (readonly, class, nonnull) JavaTimeMonth *JANUARY NS_SWIFT_NAME(JANUARY);
@property (readonly, class, nonnull) JavaTimeMonth *FEBRUARY NS_SWIFT_NAME(FEBRUARY);
@property (readonly, class, nonnull) JavaTimeMonth *MARCH NS_SWIFT_NAME(MARCH);
@property (readonly, class, nonnull) JavaTimeMonth *APRIL NS_SWIFT_NAME(APRIL);
@property (readonly, class, nonnull) JavaTimeMonth *MAY NS_SWIFT_NAME(MAY);
@property (readonly, class, nonnull) JavaTimeMonth *JUNE NS_SWIFT_NAME(JUNE);
@property (readonly, class, nonnull) JavaTimeMonth *JULY NS_SWIFT_NAME(JULY);
@property (readonly, class, nonnull) JavaTimeMonth *AUGUST NS_SWIFT_NAME(AUGUST);
@property (readonly, class, nonnull) JavaTimeMonth *SEPTEMBER NS_SWIFT_NAME(SEPTEMBER);
@property (readonly, class, nonnull) JavaTimeMonth *OCTOBER NS_SWIFT_NAME(OCTOBER);
@property (readonly, class, nonnull) JavaTimeMonth *NOVEMBER NS_SWIFT_NAME(NOVEMBER);
@property (readonly, class, nonnull) JavaTimeMonth *DECEMBER NS_SWIFT_NAME(DECEMBER);
+ (JavaTimeMonth * __nonnull)JANUARY;

+ (JavaTimeMonth * __nonnull)FEBRUARY;

+ (JavaTimeMonth * __nonnull)MARCH;

+ (JavaTimeMonth * __nonnull)APRIL;

+ (JavaTimeMonth * __nonnull)MAY;

+ (JavaTimeMonth * __nonnull)JUNE;

+ (JavaTimeMonth * __nonnull)JULY;

+ (JavaTimeMonth * __nonnull)AUGUST;

+ (JavaTimeMonth * __nonnull)SEPTEMBER;

+ (JavaTimeMonth * __nonnull)OCTOBER;

+ (JavaTimeMonth * __nonnull)NOVEMBER;

+ (JavaTimeMonth * __nonnull)DECEMBER;

#pragma mark Public

/*!
 @brief Adjusts the specified temporal object to have this month-of-year.
 <p>
  This returns a temporal object of the same observable type as the input
  with the month-of-year changed to be the same as this. 
 <p>
  The adjustment is equivalent to using <code>Temporal.with(TemporalField, long)</code>
  passing <code>ChronoField.MONTH_OF_YEAR</code> as the field.
  If the specified temporal object does not use the ISO calendar system then
  a <code>DateTimeException</code> is thrown. 
 <p>
  In most cases, it is clearer to reverse the calling pattern by using 
 <code>Temporal.with(TemporalAdjuster)</code>:
  @code

    // these two lines are equivalent, but the second approach is recommended
    temporal = thisMonth.adjustInto(temporal);
    temporal = temporal.with(thisMonth); 
  
@endcode
  <p>
  For example, given a date in May, the following are output: 
 @code

    dateInMay.with(JANUARY);    // four months earlier
    dateInMay.with(APRIL);      // one months earlier
    dateInMay.with(MAY);        // same date
    dateInMay.with(JUNE);       // one month later
    dateInMay.with(DECEMBER);   // seven months later 
  
@endcode
  <p>
  This instance is immutable and unaffected by this method call.
 @param temporal the target object to be adjusted, not null
 @return the adjusted object, not null
 @throw DateTimeExceptionif unable to make the adjustment
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (id<JavaTimeTemporalTemporal>)adjustIntoWithJavaTimeTemporalTemporal:(id<JavaTimeTemporalTemporal>)temporal;

/*!
 @brief Gets the day-of-year corresponding to the first day of this month.
 <p>
  This returns the day-of-year that this month begins on, using the leap
  year flag to determine the length of February.
 @param leapYear true if the length is required for a leap year
 @return the day of year corresponding to the first day of this month, from 1 to 336
 */
- (jint)firstDayOfYearWithBoolean:(jboolean)leapYear;

/*!
 @brief Gets the month corresponding to the first month of this quarter.
 <p>
  The year can be divided into four quarters.
  This method returns the first month of the quarter for the base month.
  January, February and March return January.
  April, May and June return April.
  July, August and September return July.
  October, November and December return October.
 @return the first month of the quarter corresponding to this month, not null
 */
- (JavaTimeMonth *)firstMonthOfQuarter;

/*!
 @brief Obtains an instance of <code>Month</code> from a temporal object.
 <p>
  This obtains a month based on the specified temporal.
  A <code>TemporalAccessor</code> represents an arbitrary set of date and time information,
  which this factory converts to an instance of <code>Month</code>.
  <p>
  The conversion extracts the <code>MONTH_OF_YEAR</code> field.
  The extraction is only permitted if the temporal object has an ISO
  chronology, or can be converted to a <code>LocalDate</code>.
  <p>
  This method matches the signature of the functional interface <code>TemporalQuery</code>
  allowing it to be used as a query via method reference, <code>Month::from</code>.
 @param temporal the temporal object to convert, not null
 @return the month-of-year, not null
 @throw DateTimeExceptionif unable to convert to a <code>Month</code>
 */
+ (JavaTimeMonth *)fromWithJavaTimeTemporalTemporalAccessor:(id<JavaTimeTemporalTemporalAccessor>)temporal;

/*!
 @brief Gets the value of the specified field from this month-of-year as an <code>int</code>.
 <p>
  This queries this month for the value of the specified field.
  The returned value will always be within the valid range of values for the field.
  If it is not possible to return the value, because the field is not supported
  or for some other reason, an exception is thrown. 
 <p>
  If the field is <code>MONTH_OF_YEAR</code> then the
  value of the month-of-year, from 1 to 12, will be returned.
  All other <code>ChronoField</code> instances will throw an <code>UnsupportedTemporalTypeException</code>.
  <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.getFrom(TemporalAccessor)</code>
  passing <code>this</code> as the argument. Whether the value can be obtained,
  and what the value represents, is determined by the field.
 @param field the field to get, not null
 @return the value for the field, within the valid range of values
 @throw DateTimeExceptionif a value for the field cannot be obtained or
          the value is outside the range of valid values for the field
 @throw UnsupportedTemporalTypeExceptionif the field is not supported or
          the range of values exceeds an <code>int</code>
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (jint)getWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field;

/*!
 @brief Gets the textual representation, such as 'Jan' or 'December'.
 <p>
  This returns the textual name used to identify the month-of-year,
  suitable for presentation to the user.
  The parameters control the style of the returned text and the locale. 
 <p>
  If no textual mapping is found then the <code>numeric value</code> is returned.
 @param style the length of the text required, not null
 @param locale the locale to use, not null
 @return the text value of the month-of-year, not null
 */
- (NSString *)getDisplayNameWithJavaTimeFormatTextStyle:(JavaTimeFormatTextStyle *)style
                                     withJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Gets the value of the specified field from this month-of-year as a <code>long</code>.
 <p>
  This queries this month for the value of the specified field.
  If it is not possible to return the value, because the field is not supported
  or for some other reason, an exception is thrown. 
 <p>
  If the field is <code>MONTH_OF_YEAR</code> then the
  value of the month-of-year, from 1 to 12, will be returned.
  All other <code>ChronoField</code> instances will throw an <code>UnsupportedTemporalTypeException</code>.
  <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.getFrom(TemporalAccessor)</code>
  passing <code>this</code> as the argument. Whether the value can be obtained,
  and what the value represents, is determined by the field.
 @param field the field to get, not null
 @return the value for the field
 @throw DateTimeExceptionif a value for the field cannot be obtained
 @throw UnsupportedTemporalTypeExceptionif the field is not supported
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (jlong)getLongWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field;

/*!
 @brief Gets the month-of-year <code>int</code> value.
 <p>
  The values are numbered following the ISO-8601 standard,
  from 1 (January) to 12 (December).
 @return the month-of-year, from 1 (January) to 12 (December)
 */
- (jint)getValue;

/*!
 @brief Checks if the specified field is supported.
 <p>
  This checks if this month-of-year can be queried for the specified field.
  If false, then calling the <code>range</code> and 
 <code>get</code> methods will throw an exception. 
 <p>
  If the field is <code>MONTH_OF_YEAR</code> then
  this method returns true.
  All other <code>ChronoField</code> instances will return false. 
 <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.isSupportedBy(TemporalAccessor)</code>
  passing <code>this</code> as the argument.
  Whether the field is supported is determined by the field.
 @param field the field to check, null returns false
 @return true if the field is supported on this month-of-year, false if not
 */
- (jboolean)isSupportedWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field;

/*!
 @brief Gets the length of this month in days.
 <p>
  This takes a flag to determine whether to return the length for a leap year or not. 
 <p>
  February has 28 days in a standard year and 29 days in a leap year.
  April, June, September and November have 30 days.
  All other months have 31 days.
 @param leapYear true if the length is required for a leap year
 @return the length of this month in days, from 28 to 31
 */
- (jint)lengthWithBoolean:(jboolean)leapYear;

/*!
 @brief Gets the maximum length of this month in days.
 <p>
  February has a maximum length of 29 days.
  April, June, September and November have 30 days.
  All other months have 31 days.
 @return the maximum length of this month in days, from 29 to 31
 */
- (jint)maxLength;

/*!
 @brief Gets the minimum length of this month in days.
 <p>
  February has a minimum length of 28 days.
  April, June, September and November have 30 days.
  All other months have 31 days.
 @return the minimum length of this month in days, from 28 to 31
 */
- (jint)minLength;

/*!
 @brief Returns the month-of-year that is the specified number of months before this one.
 <p>
  The calculation rolls around the start of the year from January to December.
  The specified period may be negative. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param months the months to subtract, positive or negative
 @return the resulting month, not null
 */
- (JavaTimeMonth *)minusWithLong:(jlong)months;

/*!
 @brief Obtains an instance of <code>Month</code> from an <code>int</code> value.
 <p>
  <code>Month</code> is an enum representing the 12 months of the year.
  This factory allows the enum to be obtained from the <code>int</code> value.
  The <code>int</code> value follows the ISO-8601 standard, from 1 (January) to 12 (December).
 @param month the month-of-year to represent, from 1 (January) to 12 (December)
 @return the month-of-year, not null
 @throw DateTimeExceptionif the month-of-year is invalid
 */
+ (JavaTimeMonth *)ofWithInt:(jint)month;

/*!
 @brief Returns the month-of-year that is the specified number of quarters after this one.
 <p>
  The calculation rolls around the end of the year from December to January.
  The specified period may be negative. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param months the months to add, positive or negative
 @return the resulting month, not null
 */
- (JavaTimeMonth *)plusWithLong:(jlong)months;

/*!
 @brief Queries this month-of-year using the specified query.
 <p>
  This queries this month-of-year using the specified query strategy object.
  The <code>TemporalQuery</code> object defines the logic to be used to
  obtain the result. Read the documentation of the query to understand
  what the result of this method will be. 
 <p>
  The result of this method is obtained by invoking the 
 <code>TemporalQuery.queryFrom(TemporalAccessor)</code> method on the
  specified query passing <code>this</code> as the argument.
 @param query the query to invoke, not null
 @return the query result, null may be returned (defined by the query)
 @throw DateTimeExceptionif unable to query (defined by the query)
 @throw ArithmeticExceptionif numeric overflow occurs (defined by the query)
 */
- (id)queryWithJavaTimeTemporalTemporalQuery:(id<JavaTimeTemporalTemporalQuery>)query;

/*!
 @brief Gets the range of valid values for the specified field.
 <p>
  The range object expresses the minimum and maximum valid values for a field.
  This month is used to enhance the accuracy of the returned range.
  If it is not possible to return the range, because the field is not supported
  or for some other reason, an exception is thrown. 
 <p>
  If the field is <code>MONTH_OF_YEAR</code> then the
  range of the month-of-year, from 1 to 12, will be returned.
  All other <code>ChronoField</code> instances will throw an <code>UnsupportedTemporalTypeException</code>.
  <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.rangeRefinedBy(TemporalAccessor)</code>
  passing <code>this</code> as the argument.
  Whether the range can be obtained is determined by the field.
 @param field the field to query the range for, not null
 @return the range of valid values for the field, not null
 @throw DateTimeExceptionif the range for the field cannot be obtained
 @throw UnsupportedTemporalTypeExceptionif the field is not supported
 */
- (JavaTimeTemporalValueRange *)rangeWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field;

+ (JavaTimeMonth *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (JavaTimeMonth_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(JavaTimeMonth)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT JavaTimeMonth *JavaTimeMonth_values_[];

/*!
 @brief The singleton instance for the month of January with 31 days.
 This has the numeric value of <code>1</code>.
 */
inline JavaTimeMonth *JavaTimeMonth_get_JANUARY(void);
J2OBJC_ENUM_CONSTANT(JavaTimeMonth, JANUARY)

/*!
 @brief The singleton instance for the month of February with 28 days, or 29 in a leap year.
 This has the numeric value of <code>2</code>.
 */
inline JavaTimeMonth *JavaTimeMonth_get_FEBRUARY(void);
J2OBJC_ENUM_CONSTANT(JavaTimeMonth, FEBRUARY)

/*!
 @brief The singleton instance for the month of March with 31 days.
 This has the numeric value of <code>3</code>.
 */
inline JavaTimeMonth *JavaTimeMonth_get_MARCH(void);
J2OBJC_ENUM_CONSTANT(JavaTimeMonth, MARCH)

/*!
 @brief The singleton instance for the month of April with 30 days.
 This has the numeric value of <code>4</code>.
 */
inline JavaTimeMonth *JavaTimeMonth_get_APRIL(void);
J2OBJC_ENUM_CONSTANT(JavaTimeMonth, APRIL)

/*!
 @brief The singleton instance for the month of May with 31 days.
 This has the numeric value of <code>5</code>.
 */
inline JavaTimeMonth *JavaTimeMonth_get_MAY(void);
J2OBJC_ENUM_CONSTANT(JavaTimeMonth, MAY)

/*!
 @brief The singleton instance for the month of June with 30 days.
 This has the numeric value of <code>6</code>.
 */
inline JavaTimeMonth *JavaTimeMonth_get_JUNE(void);
J2OBJC_ENUM_CONSTANT(JavaTimeMonth, JUNE)

/*!
 @brief The singleton instance for the month of July with 31 days.
 This has the numeric value of <code>7</code>.
 */
inline JavaTimeMonth *JavaTimeMonth_get_JULY(void);
J2OBJC_ENUM_CONSTANT(JavaTimeMonth, JULY)

/*!
 @brief The singleton instance for the month of August with 31 days.
 This has the numeric value of <code>8</code>.
 */
inline JavaTimeMonth *JavaTimeMonth_get_AUGUST(void);
J2OBJC_ENUM_CONSTANT(JavaTimeMonth, AUGUST)

/*!
 @brief The singleton instance for the month of September with 30 days.
 This has the numeric value of <code>9</code>.
 */
inline JavaTimeMonth *JavaTimeMonth_get_SEPTEMBER(void);
J2OBJC_ENUM_CONSTANT(JavaTimeMonth, SEPTEMBER)

/*!
 @brief The singleton instance for the month of October with 31 days.
 This has the numeric value of <code>10</code>.
 */
inline JavaTimeMonth *JavaTimeMonth_get_OCTOBER(void);
J2OBJC_ENUM_CONSTANT(JavaTimeMonth, OCTOBER)

/*!
 @brief The singleton instance for the month of November with 30 days.
 This has the numeric value of <code>11</code>.
 */
inline JavaTimeMonth *JavaTimeMonth_get_NOVEMBER(void);
J2OBJC_ENUM_CONSTANT(JavaTimeMonth, NOVEMBER)

/*!
 @brief The singleton instance for the month of December with 31 days.
 This has the numeric value of <code>12</code>.
 */
inline JavaTimeMonth *JavaTimeMonth_get_DECEMBER(void);
J2OBJC_ENUM_CONSTANT(JavaTimeMonth, DECEMBER)

FOUNDATION_EXPORT JavaTimeMonth *JavaTimeMonth_ofWithInt_(jint month);

FOUNDATION_EXPORT JavaTimeMonth *JavaTimeMonth_fromWithJavaTimeTemporalTemporalAccessor_(id<JavaTimeTemporalTemporalAccessor> temporal);

FOUNDATION_EXPORT IOSObjectArray *JavaTimeMonth_values(void);

FOUNDATION_EXPORT JavaTimeMonth *JavaTimeMonth_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT JavaTimeMonth *JavaTimeMonth_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(JavaTimeMonth)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaTimeMonth")
