//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/time/ZonedDateTime.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaTimeZonedDateTime")
#ifdef RESTRICT_JavaTimeZonedDateTime
#define INCLUDE_ALL_JavaTimeZonedDateTime 0
#else
#define INCLUDE_ALL_JavaTimeZonedDateTime 1
#endif
#undef RESTRICT_JavaTimeZonedDateTime

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaTimeZonedDateTime_) && (INCLUDE_ALL_JavaTimeZonedDateTime || defined(INCLUDE_JavaTimeZonedDateTime))
#define JavaTimeZonedDateTime_

#define RESTRICT_JavaTimeTemporalTemporal 1
#define INCLUDE_JavaTimeTemporalTemporal 1
#include "java/time/temporal/Temporal.h"

#define RESTRICT_JavaTimeChronoChronoZonedDateTime 1
#define INCLUDE_JavaTimeChronoChronoZonedDateTime 1
#include "java/time/chrono/ChronoZonedDateTime.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class JavaTimeClock;
@class JavaTimeDayOfWeek;
@class JavaTimeFormatDateTimeFormatter;
@class JavaTimeInstant;
@class JavaTimeLocalDate;
@class JavaTimeLocalDateTime;
@class JavaTimeLocalTime;
@class JavaTimeMonth;
@class JavaTimeOffsetDateTime;
@class JavaTimeTemporalValueRange;
@class JavaTimeZoneId;
@class JavaTimeZoneOffset;
@protocol JavaIoDataOutput;
@protocol JavaIoObjectInput;
@protocol JavaLangCharSequence;
@protocol JavaTimeChronoChronology;
@protocol JavaTimeTemporalTemporalAccessor;
@protocol JavaTimeTemporalTemporalAdjuster;
@protocol JavaTimeTemporalTemporalAmount;
@protocol JavaTimeTemporalTemporalField;
@protocol JavaTimeTemporalTemporalQuery;
@protocol JavaTimeTemporalTemporalUnit;

/*!
 @brief A date-time with a time-zone in the ISO-8601 calendar system,
  such as <code>2007-12-03T10:15:30+01:00 Europe/Paris</code>.
 <p>
  <code>ZonedDateTime</code> is an immutable representation of a date-time with a time-zone.
  This class stores all date and time fields, to a precision of nanoseconds,
  and a time-zone, with a zone offset used to handle ambiguous local date-times.
  For example, the value
  "2nd October 2007 at 13:45.30.123456789 +02:00 in the Europe/Paris time-zone"
  can be stored in a <code>ZonedDateTime</code>.
  <p>
  This class handles conversion from the local time-line of <code>LocalDateTime</code>
  to the instant time-line of <code>Instant</code>.
  The difference between the two time-lines is the offset from UTC/Greenwich,
  represented by a <code>ZoneOffset</code>.
  <p>
  Converting between the two time-lines involves calculating the offset using the 
 <code>rules</code> accessed from the <code>ZoneId</code>.
  Obtaining the offset for an instant is simple, as there is exactly one valid
  offset for each instant. By contrast, obtaining the offset for a local date-time
  is not straightforward. There are three cases: 
 <ul>
  <li>Normal, with one valid offset. For the vast majority of the year, the normal
   case applies, where there is a single valid offset for the local date-time.</li>
  <li>Gap, with zero valid offsets. This is when clocks jump forward typically
   due to the spring daylight savings change from "winter" to "summer".
   In a gap there are local date-time values with no valid offset.</li>
  <li>Overlap, with two valid offsets. This is when clocks are set back typically
   due to the autumn daylight savings change from "summer" to "winter".
   In an overlap there are local date-time values with two valid offsets.</li>
  </ul>
  <p>
  Any method that converts directly or implicitly from a local date-time to an
  instant by obtaining the offset has the potential to be complicated. 
 <p>
  For Gaps, the general strategy is that if the local date-time falls in the
  middle of a Gap, then the resulting zoned date-time will have a local date-time
  shifted forwards by the length of the Gap, resulting in a date-time in the later
  offset, typically "summer" time. 
 <p>
  For Overlaps, the general strategy is that if the local date-time falls in the
  middle of an Overlap, then the previous offset will be retained. If there is no
  previous offset, or the previous offset is invalid, then the earlier offset is
  used, typically "summer" time.. Two additional methods, 
 <code>withEarlierOffsetAtOverlap()</code> and <code>withLaterOffsetAtOverlap()</code>,
  help manage the case of an overlap. 
 <p>
  In terms of design, this class should be viewed primarily as the combination
  of a <code>LocalDateTime</code> and a <code>ZoneId</code>. The <code>ZoneOffset</code> is
  a vital, but secondary, piece of information, used to ensure that the class
  represents an instant, especially during a daylight savings overlap.
 @since 1.8
 */
@interface JavaTimeZonedDateTime : NSObject < JavaTimeTemporalTemporal, JavaTimeChronoChronoZonedDateTime, JavaIoSerializable >

#pragma mark Public

/*!
 @brief Checks if this date-time is equal to another date-time.
 <p>
  The comparison is based on the offset date-time and the zone.
  Only objects of type <code>ZonedDateTime</code> are compared, other types return false.
 @param obj the object to check, null returns false
 @return true if this is equal to the other date-time
 */
- (jboolean)isEqual:(id)obj;

/*!
 @brief Formats this date-time using the specified formatter.
 <p>
  This date-time will be passed to the formatter to produce a string.
 @param formatter the formatter to use, not null
 @return the formatted date-time string, not null
 @throw DateTimeExceptionif an error occurs during printing
 */
- (NSString *)formatWithJavaTimeFormatDateTimeFormatter:(JavaTimeFormatDateTimeFormatter *)formatter;

/*!
 @brief Obtains an instance of <code>ZonedDateTime</code> from a temporal object.
 <p>
  This obtains a zoned date-time based on the specified temporal.
  A <code>TemporalAccessor</code> represents an arbitrary set of date and time information,
  which this factory converts to an instance of <code>ZonedDateTime</code>.
  <p>
  The conversion will first obtain a <code>ZoneId</code> from the temporal object,
  falling back to a <code>ZoneOffset</code> if necessary. It will then try to obtain
  an <code>Instant</code>, falling back to a <code>LocalDateTime</code> if necessary.
  The result will be either the combination of <code>ZoneId</code> or <code>ZoneOffset</code>
  with <code>Instant</code> or <code>LocalDateTime</code>.
  Implementations are permitted to perform optimizations such as accessing
  those fields that are equivalent to the relevant objects. 
 <p>
  This method matches the signature of the functional interface <code>TemporalQuery</code>
  allowing it to be used as a query via method reference, <code>ZonedDateTime::from</code>.
 @param temporal the temporal object to convert, not null
 @return the zoned date-time, not null
 @throw DateTimeExceptionif unable to convert to an <code>ZonedDateTime</code>
 */
+ (JavaTimeZonedDateTime *)fromWithJavaTimeTemporalTemporalAccessor:(id<JavaTimeTemporalTemporalAccessor>)temporal;

/*!
 @brief Gets the value of the specified field from this date-time as an <code>int</code>.
 <p>
  This queries this date-time for the value of the specified field.
  The returned value will always be within the valid range of values for the field.
  If it is not possible to return the value, because the field is not supported
  or for some other reason, an exception is thrown. 
 <p>
  If the field is a <code>ChronoField</code> then the query is implemented here.
  The <code>supported fields</code> will return valid
  values based on this date-time, except <code>NANO_OF_DAY</code>, <code>MICRO_OF_DAY</code>,
  <code>EPOCH_DAY</code>, <code>PROLEPTIC_MONTH</code> and <code>INSTANT_SECONDS</code> which are too
  large to fit in an <code>int</code> and throw a <code>DateTimeException</code>.
  All other <code>ChronoField</code> instances will throw an <code>UnsupportedTemporalTypeException</code>.
  <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.getFrom(TemporalAccessor)</code>
  passing <code>this</code> as the argument. Whether the value can be obtained,
  and what the value represents, is determined by the field.
 @param field the field to get, not null
 @return the value for the field
 @throw DateTimeExceptionif a value for the field cannot be obtained or
          the value is outside the range of valid values for the field
 @throw UnsupportedTemporalTypeExceptionif the field is not supported or
          the range of values exceeds an <code>int</code>
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (jint)getWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field;

/*!
 @brief Gets the day-of-month field.
 <p>
  This method returns the primitive <code>int</code> value for the day-of-month.
 @return the day-of-month, from 1 to 31
 */
- (jint)getDayOfMonth;

/*!
 @brief Gets the day-of-week field, which is an enum <code>DayOfWeek</code>.
 <p>
  This method returns the enum <code>DayOfWeek</code> for the day-of-week.
  This avoids confusion as to what <code>int</code> values mean.
  If you need access to the primitive <code>int</code> value then the enum
  provides the <code>int value</code>.
  <p>
  Additional information can be obtained from the <code>DayOfWeek</code>.
  This includes textual names of the values.
 @return the day-of-week, not null
 */
- (JavaTimeDayOfWeek *)getDayOfWeek;

/*!
 @brief Gets the day-of-year field.
 <p>
  This method returns the primitive <code>int</code> value for the day-of-year.
 @return the day-of-year, from 1 to 365, or 366 in a leap year
 */
- (jint)getDayOfYear;

/*!
 @brief Gets the hour-of-day field.
 @return the hour-of-day, from 0 to 23
 */
- (jint)getHour;

/*!
 @brief Gets the value of the specified field from this date-time as a <code>long</code>.
 <p>
  This queries this date-time for the value of the specified field.
  If it is not possible to return the value, because the field is not supported
  or for some other reason, an exception is thrown. 
 <p>
  If the field is a <code>ChronoField</code> then the query is implemented here.
  The <code>supported fields</code> will return valid
  values based on this date-time.
  All other <code>ChronoField</code> instances will throw an <code>UnsupportedTemporalTypeException</code>.
  <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.getFrom(TemporalAccessor)</code>
  passing <code>this</code> as the argument. Whether the value can be obtained,
  and what the value represents, is determined by the field.
 @param field the field to get, not null
 @return the value for the field
 @throw DateTimeExceptionif a value for the field cannot be obtained
 @throw UnsupportedTemporalTypeExceptionif the field is not supported
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (jlong)getLongWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field;

/*!
 @brief Gets the minute-of-hour field.
 @return the minute-of-hour, from 0 to 59
 */
- (jint)getMinute;

/*!
 @brief Gets the month-of-year field using the <code>Month</code> enum.
 <p>
  This method returns the enum <code>Month</code> for the month.
  This avoids confusion as to what <code>int</code> values mean.
  If you need access to the primitive <code>int</code> value then the enum
  provides the <code>int value</code>.
 @return the month-of-year, not null
 - seealso: #getMonthValue()
 */
- (JavaTimeMonth *)getMonth;

/*!
 @brief Gets the month-of-year field from 1 to 12.
 <p>
  This method returns the month as an <code>int</code> from 1 to 12.
  Application code is frequently clearer if the enum <code>Month</code>
  is used by calling <code>getMonth()</code>.
 @return the month-of-year, from 1 to 12
 - seealso: #getMonth()
 */
- (jint)getMonthValue;

/*!
 @brief Gets the nano-of-second field.
 @return the nano-of-second, from 0 to 999,999,999
 */
- (jint)getNano;

/*!
 @brief Gets the zone offset, such as '+01:00'.
 <p>
  This is the offset of the local date-time from UTC/Greenwich.
 @return the zone offset, not null
 */
- (JavaTimeZoneOffset *)getOffset;

/*!
 @brief Gets the second-of-minute field.
 @return the second-of-minute, from 0 to 59
 */
- (jint)getSecond;

/*!
 @brief Gets the year field.
 <p>
  This method returns the primitive <code>int</code> value for the year. 
 <p>
  The year returned by this method is proleptic as per <code>get(YEAR)</code>.
  To obtain the year-of-era, use <code>get(YEAR_OF_ERA)</code>.
 @return the year, from MIN_YEAR to MAX_YEAR
 */
- (jint)getYear;

/*!
 @brief Gets the time-zone, such as 'Europe/Paris'.
 <p>
  This returns the zone ID. This identifies the time-zone <code>rules</code>
  that determine when and how the offset from UTC/Greenwich changes. 
 <p>
  The zone ID may be same as the offset.
  If this is true, then any future calculations, such as addition or subtraction,
  have no complex edge cases due to time-zone rules.
  See also <code>withFixedOffsetZone()</code>.
 @return the time-zone, not null
 */
- (JavaTimeZoneId *)getZone;

/*!
 @brief A hash code for this date-time.
 @return a suitable hash code
 */
- (NSUInteger)hash;

/*!
 @brief Checks if the specified field is supported.
 <p>
  This checks if this date-time can be queried for the specified field.
  If false, then calling the <code>range</code>,
  <code>get</code> and <code>with(TemporalField, long)</code>
  methods will throw an exception. 
 <p>
  If the field is a <code>ChronoField</code> then the query is implemented here.
  The supported fields are: 
 <ul>
  <li><code>NANO_OF_SECOND</code>
  <li><code>NANO_OF_DAY</code>
  <li><code>MICRO_OF_SECOND</code>
  <li><code>MICRO_OF_DAY</code>
  <li><code>MILLI_OF_SECOND</code>
  <li><code>MILLI_OF_DAY</code>
  <li><code>SECOND_OF_MINUTE</code>
  <li><code>SECOND_OF_DAY</code>
  <li><code>MINUTE_OF_HOUR</code>
  <li><code>MINUTE_OF_DAY</code>
  <li><code>HOUR_OF_AMPM</code>
  <li><code>CLOCK_HOUR_OF_AMPM</code>
  <li><code>HOUR_OF_DAY</code>
  <li><code>CLOCK_HOUR_OF_DAY</code>
  <li><code>AMPM_OF_DAY</code>
  <li><code>DAY_OF_WEEK</code>
  <li><code>ALIGNED_DAY_OF_WEEK_IN_MONTH</code>
  <li><code>ALIGNED_DAY_OF_WEEK_IN_YEAR</code>
  <li><code>DAY_OF_MONTH</code>
  <li><code>DAY_OF_YEAR</code>
  <li><code>EPOCH_DAY</code>
  <li><code>ALIGNED_WEEK_OF_MONTH</code>
  <li><code>ALIGNED_WEEK_OF_YEAR</code>
  <li><code>MONTH_OF_YEAR</code>
  <li><code>PROLEPTIC_MONTH</code>
  <li><code>YEAR_OF_ERA</code>
  <li><code>YEAR</code>
  <li><code>ERA</code>
  <li><code>INSTANT_SECONDS</code>
  <li><code>OFFSET_SECONDS</code>
  </ul>
  All other <code>ChronoField</code> instances will return false. 
 <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.isSupportedBy(TemporalAccessor)</code>
  passing <code>this</code> as the argument.
  Whether the field is supported is determined by the field.
 @param field the field to check, null returns false
 @return true if the field is supported on this date-time, false if not
 */
- (jboolean)isSupportedWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field;

/*!
 @brief Checks if the specified unit is supported.
 <p>
  This checks if the specified unit can be added to, or subtracted from, this date-time.
  If false, then calling the <code>plus(long, TemporalUnit)</code> and 
 <code>minus</code> methods will throw an exception. 
 <p>
  If the unit is a <code>ChronoUnit</code> then the query is implemented here.
  The supported units are: 
 <ul>
  <li><code>NANOS</code>
  <li><code>MICROS</code>
  <li><code>MILLIS</code>
  <li><code>SECONDS</code>
  <li><code>MINUTES</code>
  <li><code>HOURS</code>
  <li><code>HALF_DAYS</code>
  <li><code>DAYS</code>
  <li><code>WEEKS</code>
  <li><code>MONTHS</code>
  <li><code>YEARS</code>
  <li><code>DECADES</code>
  <li><code>CENTURIES</code>
  <li><code>MILLENNIA</code>
  <li><code>ERAS</code>
  </ul>
  All other <code>ChronoUnit</code> instances will return false. 
 <p>
  If the unit is not a <code>ChronoUnit</code>, then the result of this method
  is obtained by invoking <code>TemporalUnit.isSupportedBy(Temporal)</code>
  passing <code>this</code> as the argument.
  Whether the unit is supported is determined by the unit.
 @param unit the unit to check, null returns false
 @return true if the unit can be added/subtracted, false if not
 */
- (jboolean)isSupportedWithJavaTimeTemporalTemporalUnit:(id<JavaTimeTemporalTemporalUnit>)unit;

/*!
 @brief Returns a copy of this date-time with the specified amount subtracted.
 <p>
  This returns a <code>ZonedDateTime</code>, based on this one, with the amount
  in terms of the unit subtracted. If it is not possible to subtract the amount,
  because the unit is not supported or for some other reason, an exception is thrown. 
 <p>
  The calculation for date and time units differ. 
 <p>
  Date units operate on the local time-line.
  The period is first subtracted from the local date-time, then converted back
  to a zoned date-time using the zone ID.
  The conversion uses <code>ofLocal(LocalDateTime, ZoneId, ZoneOffset)</code>
  with the offset before the subtraction. 
 <p>
  Time units operate on the instant time-line.
  The period is first subtracted from the local date-time, then converted back to
  a zoned date-time using the zone ID.
  The conversion uses <code>ofInstant(LocalDateTime, ZoneOffset, ZoneId)</code>
  with the offset before the subtraction. 
 <p>
  This method is equivalent to <code>plus(long, TemporalUnit)</code> with the amount negated.
  See that method for a full description of how addition, and thus subtraction, works. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param amountToSubtract the amount of the unit to subtract from the result, may be negative
 @param unit the unit of the amount to subtract, not null
 @return a <code>ZonedDateTime</code> based on this date-time with the specified amount subtracted, not null
 @throw DateTimeExceptionif the subtraction cannot be made
 @throw UnsupportedTemporalTypeExceptionif the unit is not supported
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeZonedDateTime *)minusWithLong:(jlong)amountToSubtract
        withJavaTimeTemporalTemporalUnit:(id<JavaTimeTemporalTemporalUnit>)unit;

/*!
 @brief Returns a copy of this date-time with the specified amount subtracted.
 <p>
  This returns a <code>ZonedDateTime</code>, based on this one, with the specified amount subtracted.
  The amount is typically <code>Period</code> or <code>Duration</code> but may be
  any other type implementing the <code>TemporalAmount</code> interface. 
 <p>
  The calculation is delegated to the amount object by calling 
 <code>TemporalAmount.subtractFrom(Temporal)</code>. The amount implementation is free
  to implement the subtraction in any way it wishes, however it typically
  calls back to <code>minus(long, TemporalUnit)</code>. Consult the documentation
  of the amount implementation to determine if it can be successfully subtracted. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param amountToSubtract the amount to subtract, not null
 @return a <code>ZonedDateTime</code> based on this date-time with the subtraction made, not null
 @throw DateTimeExceptionif the subtraction cannot be made
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeZonedDateTime *)minusWithJavaTimeTemporalTemporalAmount:(id<JavaTimeTemporalTemporalAmount>)amountToSubtract;

/*!
 @brief Returns a copy of this <code>ZonedDateTime</code> with the specified number of days subtracted.
 <p>
  This operates on the local time-line, 
 <code>subtracting days</code> to the local date-time.
  This is then converted back to a <code>ZonedDateTime</code>, using the zone ID
  to obtain the offset. 
 <p>
  When converting back to <code>ZonedDateTime</code>, if the local date-time is in an overlap,
  then the offset will be retained if possible, otherwise the earlier offset will be used.
  If in a gap, the local date-time will be adjusted forward by the length of the gap. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param days the days to subtract, may be negative
 @return a <code>ZonedDateTime</code> based on this date-time with the days subtracted, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeZonedDateTime *)minusDaysWithLong:(jlong)days;

/*!
 @brief Returns a copy of this <code>ZonedDateTime</code> with the specified number of hours subtracted.
 <p>
  This operates on the instant time-line, such that subtracting one hour will
  always be a duration of one hour earlier.
  This may cause the local date-time to change by an amount other than one hour.
  Note that this is a different approach to that used by days, months and years,
  thus subtracting one day is not the same as adding 24 hours. 
 <p>
  For example, consider a time-zone where the spring DST cutover means that the
  local times 01:00 to 01:59 occur twice changing from offset +02:00 to +01:00. 
 <ul>
  <li>Subtracting one hour from 02:30+01:00 will result in 01:30+02:00 
 <li>Subtracting one hour from 01:30+01:00 will result in 01:30+02:00 
 <li>Subtracting one hour from 01:30+02:00 will result in 00:30+01:00 
 <li>Subtracting three hours from 02:30+01:00 will result in 00:30+02:00 
 </ul>
  <p>
  This instance is immutable and unaffected by this method call.
 @param hours the hours to subtract, may be negative
 @return a <code>ZonedDateTime</code> based on this date-time with the hours subtracted, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeZonedDateTime *)minusHoursWithLong:(jlong)hours;

/*!
 @brief Returns a copy of this <code>ZonedDateTime</code> with the specified number of minutes subtracted.
 <p>
  This operates on the instant time-line, such that subtracting one minute will
  always be a duration of one minute earlier.
  This may cause the local date-time to change by an amount other than one minute.
  Note that this is a different approach to that used by days, months and years. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param minutes the minutes to subtract, may be negative
 @return a <code>ZonedDateTime</code> based on this date-time with the minutes subtracted, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeZonedDateTime *)minusMinutesWithLong:(jlong)minutes;

/*!
 @brief Returns a copy of this <code>ZonedDateTime</code> with the specified number of months subtracted.
 <p>
  This operates on the local time-line, 
 <code>subtracting months</code> to the local date-time.
  This is then converted back to a <code>ZonedDateTime</code>, using the zone ID
  to obtain the offset. 
 <p>
  When converting back to <code>ZonedDateTime</code>, if the local date-time is in an overlap,
  then the offset will be retained if possible, otherwise the earlier offset will be used.
  If in a gap, the local date-time will be adjusted forward by the length of the gap. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param months the months to subtract, may be negative
 @return a <code>ZonedDateTime</code> based on this date-time with the months subtracted, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeZonedDateTime *)minusMonthsWithLong:(jlong)months;

/*!
 @brief Returns a copy of this <code>ZonedDateTime</code> with the specified number of nanoseconds subtracted.
 <p>
  This operates on the instant time-line, such that subtracting one nano will
  always be a duration of one nano earlier.
  This may cause the local date-time to change by an amount other than one nano.
  Note that this is a different approach to that used by days, months and years. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param nanos the nanos to subtract, may be negative
 @return a <code>ZonedDateTime</code> based on this date-time with the nanoseconds subtracted, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeZonedDateTime *)minusNanosWithLong:(jlong)nanos;

/*!
 @brief Returns a copy of this <code>ZonedDateTime</code> with the specified number of seconds subtracted.
 <p>
  This operates on the instant time-line, such that subtracting one second will
  always be a duration of one second earlier.
  This may cause the local date-time to change by an amount other than one second.
  Note that this is a different approach to that used by days, months and years. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param seconds the seconds to subtract, may be negative
 @return a <code>ZonedDateTime</code> based on this date-time with the seconds subtracted, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeZonedDateTime *)minusSecondsWithLong:(jlong)seconds;

/*!
 @brief Returns a copy of this <code>ZonedDateTime</code> with the specified number of weeks subtracted.
 <p>
  This operates on the local time-line, 
 <code>subtracting weeks</code> to the local date-time.
  This is then converted back to a <code>ZonedDateTime</code>, using the zone ID
  to obtain the offset. 
 <p>
  When converting back to <code>ZonedDateTime</code>, if the local date-time is in an overlap,
  then the offset will be retained if possible, otherwise the earlier offset will be used.
  If in a gap, the local date-time will be adjusted forward by the length of the gap. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param weeks the weeks to subtract, may be negative
 @return a <code>ZonedDateTime</code> based on this date-time with the weeks subtracted, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeZonedDateTime *)minusWeeksWithLong:(jlong)weeks;

/*!
 @brief Returns a copy of this <code>ZonedDateTime</code> with the specified number of years subtracted.
 <p>
  This operates on the local time-line, 
 <code>subtracting years</code> to the local date-time.
  This is then converted back to a <code>ZonedDateTime</code>, using the zone ID
  to obtain the offset. 
 <p>
  When converting back to <code>ZonedDateTime</code>, if the local date-time is in an overlap,
  then the offset will be retained if possible, otherwise the earlier offset will be used.
  If in a gap, the local date-time will be adjusted forward by the length of the gap. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param years the years to subtract, may be negative
 @return a <code>ZonedDateTime</code> based on this date-time with the years subtracted, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeZonedDateTime *)minusYearsWithLong:(jlong)years;

/*!
 @brief Obtains the current date-time from the system clock in the default time-zone.
 <p>
  This will query the <code>system clock</code> in the default
  time-zone to obtain the current date-time.
  The zone and offset will be set based on the time-zone in the clock. 
 <p>
  Using this method will prevent the ability to use an alternate clock for testing
  because the clock is hard-coded.
 @return the current date-time using the system clock, not null
 */
+ (JavaTimeZonedDateTime *)now;

/*!
 @brief Obtains the current date-time from the specified clock.
 <p>
  This will query the specified clock to obtain the current date-time.
  The zone and offset will be set based on the time-zone in the clock. 
 <p>
  Using this method allows the use of an alternate clock for testing.
  The alternate clock may be introduced using <code>dependency injection</code>.
 @param clock the clock to use, not null
 @return the current date-time, not null
 */
+ (JavaTimeZonedDateTime *)nowWithJavaTimeClock:(JavaTimeClock *)clock;

/*!
 @brief Obtains the current date-time from the system clock in the specified time-zone.
 <p>
  This will query the <code>system clock</code> to obtain the current date-time.
  Specifying the time-zone avoids dependence on the default time-zone.
  The offset will be calculated from the specified time-zone. 
 <p>
  Using this method will prevent the ability to use an alternate clock for testing
  because the clock is hard-coded.
 @param zone the zone ID to use, not null
 @return the current date-time using the system clock, not null
 */
+ (JavaTimeZonedDateTime *)nowWithJavaTimeZoneId:(JavaTimeZoneId *)zone;

/*!
 @brief Obtains an instance of <code>ZonedDateTime</code> from a year, month, day,
  hour, minute, second, nanosecond and time-zone.
 <p>
  This creates a zoned date-time matching the local date-time of the seven
  specified fields as closely as possible.
  Time-zone rules, such as daylight savings, mean that not every local date-time
  is valid for the specified zone, thus the local date-time may be adjusted. 
 <p>
  The local date-time is resolved to a single instant on the time-line.
  This is achieved by finding a valid offset from UTC/Greenwich for the local
  date-time as defined by the <code>rules</code> of the zone ID.
 <p>
  In most cases, there is only one valid offset for a local date-time.
  In the case of an overlap, when clocks are set back, there are two valid offsets.
  This method uses the earlier offset typically corresponding to "summer". 
 <p>
  In the case of a gap, when clocks jump forward, there is no valid offset.
  Instead, the local date-time is adjusted to be later by the length of the gap.
  For a typical one hour daylight savings change, the local date-time will be
  moved one hour later into the offset typically corresponding to "summer". 
 <p>
  This method exists primarily for writing test cases.
  Non test-code will typically use other methods to create an offset time. 
 <code>LocalDateTime</code> has five additional convenience variants of the
  equivalent factory method taking fewer arguments.
  They are not provided here to reduce the footprint of the API.
 @param year the year to represent, from MIN_YEAR to MAX_YEAR
 @param month the month-of-year to represent, from 1 (January) to 12 (December)
 @param dayOfMonth the day-of-month to represent, from 1 to 31
 @param hour the hour-of-day to represent, from 0 to 23
 @param minute the minute-of-hour to represent, from 0 to 59
 @param second the second-of-minute to represent, from 0 to 59
 @param nanoOfSecond the nano-of-second to represent, from 0 to 999,999,999
 @param zone the time-zone, not null
 @return the offset date-time, not null
 @throw DateTimeExceptionif the value of any field is out of range, or
   if the day-of-month is invalid for the month-year
 */
+ (JavaTimeZonedDateTime *)ofWithInt:(jint)year
                             withInt:(jint)month
                             withInt:(jint)dayOfMonth
                             withInt:(jint)hour
                             withInt:(jint)minute
                             withInt:(jint)second
                             withInt:(jint)nanoOfSecond
                  withJavaTimeZoneId:(JavaTimeZoneId *)zone;

/*!
 @brief Obtains an instance of <code>ZonedDateTime</code> from a local date and time.
 <p>
  This creates a zoned date-time matching the input local date and time as closely as possible.
  Time-zone rules, such as daylight savings, mean that not every local date-time
  is valid for the specified zone, thus the local date-time may be adjusted. 
 <p>
  The local date time and first combined to form a local date-time.
  The local date-time is then resolved to a single instant on the time-line.
  This is achieved by finding a valid offset from UTC/Greenwich for the local
  date-time as defined by the <code>rules</code> of the zone ID.
 <p>
  In most cases, there is only one valid offset for a local date-time.
  In the case of an overlap, when clocks are set back, there are two valid offsets.
  This method uses the earlier offset typically corresponding to "summer". 
 <p>
  In the case of a gap, when clocks jump forward, there is no valid offset.
  Instead, the local date-time is adjusted to be later by the length of the gap.
  For a typical one hour daylight savings change, the local date-time will be
  moved one hour later into the offset typically corresponding to "summer".
 @param date the local date, not null
 @param time the local time, not null
 @param zone the time-zone, not null
 @return the offset date-time, not null
 */
+ (JavaTimeZonedDateTime *)ofWithJavaTimeLocalDate:(JavaTimeLocalDate *)date
                             withJavaTimeLocalTime:(JavaTimeLocalTime *)time
                                withJavaTimeZoneId:(JavaTimeZoneId *)zone;

/*!
 @brief Obtains an instance of <code>ZonedDateTime</code> from a local date-time.
 <p>
  This creates a zoned date-time matching the input local date-time as closely as possible.
  Time-zone rules, such as daylight savings, mean that not every local date-time
  is valid for the specified zone, thus the local date-time may be adjusted. 
 <p>
  The local date-time is resolved to a single instant on the time-line.
  This is achieved by finding a valid offset from UTC/Greenwich for the local
  date-time as defined by the <code>rules</code> of the zone ID.
 <p>
  In most cases, there is only one valid offset for a local date-time.
  In the case of an overlap, when clocks are set back, there are two valid offsets.
  This method uses the earlier offset typically corresponding to "summer". 
 <p>
  In the case of a gap, when clocks jump forward, there is no valid offset.
  Instead, the local date-time is adjusted to be later by the length of the gap.
  For a typical one hour daylight savings change, the local date-time will be
  moved one hour later into the offset typically corresponding to "summer".
 @param localDateTime the local date-time, not null
 @param zone the time-zone, not null
 @return the zoned date-time, not null
 */
+ (JavaTimeZonedDateTime *)ofWithJavaTimeLocalDateTime:(JavaTimeLocalDateTime *)localDateTime
                                    withJavaTimeZoneId:(JavaTimeZoneId *)zone;

/*!
 @brief Obtains an instance of <code>ZonedDateTime</code> from an <code>Instant</code>.
 <p>
  This creates a zoned date-time with the same instant as that specified.
  Calling <code>toInstant()</code> will return an instant equal to the one used here. 
 <p>
  Converting an instant to a zoned date-time is simple as there is only one valid
  offset for each instant.
 @param instant the instant to create the date-time from, not null
 @param zone the time-zone, not null
 @return the zoned date-time, not null
 @throw DateTimeExceptionif the result exceeds the supported range
 */
+ (JavaTimeZonedDateTime *)ofInstantWithJavaTimeInstant:(JavaTimeInstant *)instant
                                     withJavaTimeZoneId:(JavaTimeZoneId *)zone;

/*!
 @brief Obtains an instance of <code>ZonedDateTime</code> from the instant formed by combining
  the local date-time and offset.
 <p>
  This creates a zoned date-time by <code>combining</code>
  the <code>LocalDateTime</code> and <code>ZoneOffset</code>.
  This combination uniquely specifies an instant without ambiguity. 
 <p>
  Converting an instant to a zoned date-time is simple as there is only one valid
  offset for each instant. If the valid offset is different to the offset specified,
  then the date-time and offset of the zoned date-time will differ from those specified. 
 <p>
  If the <code>ZoneId</code> to be used is a <code>ZoneOffset</code>, this method is equivalent
  to <code>of(LocalDateTime, ZoneId)</code>.
 @param localDateTime the local date-time, not null
 @param offset the zone offset, not null
 @param zone the time-zone, not null
 @return the zoned date-time, not null
 */
+ (JavaTimeZonedDateTime *)ofInstantWithJavaTimeLocalDateTime:(JavaTimeLocalDateTime *)localDateTime
                                       withJavaTimeZoneOffset:(JavaTimeZoneOffset *)offset
                                           withJavaTimeZoneId:(JavaTimeZoneId *)zone;

/*!
 @brief Obtains an instance of <code>ZonedDateTime</code> from a local date-time
  using the preferred offset if possible.
 <p>
  The local date-time is resolved to a single instant on the time-line.
  This is achieved by finding a valid offset from UTC/Greenwich for the local
  date-time as defined by the <code>rules</code> of the zone ID.
 <p>
  In most cases, there is only one valid offset for a local date-time.
  In the case of an overlap, where clocks are set back, there are two valid offsets.
  If the preferred offset is one of the valid offsets then it is used.
  Otherwise the earlier valid offset is used, typically corresponding to "summer". 
 <p>
  In the case of a gap, where clocks jump forward, there is no valid offset.
  Instead, the local date-time is adjusted to be later by the length of the gap.
  For a typical one hour daylight savings change, the local date-time will be
  moved one hour later into the offset typically corresponding to "summer".
 @param localDateTime the local date-time, not null
 @param zone the time-zone, not null
 @param preferredOffset the zone offset, null if no preference
 @return the zoned date-time, not null
 */
+ (JavaTimeZonedDateTime *)ofLocalWithJavaTimeLocalDateTime:(JavaTimeLocalDateTime *)localDateTime
                                         withJavaTimeZoneId:(JavaTimeZoneId *)zone
                                     withJavaTimeZoneOffset:(JavaTimeZoneOffset *)preferredOffset;

/*!
 @brief Obtains an instance of <code>ZonedDateTime</code> strictly validating the
  combination of local date-time, offset and zone ID.
 <p>
  This creates a zoned date-time ensuring that the offset is valid for the
  local date-time according to the rules of the specified zone.
  If the offset is invalid, an exception is thrown.
 @param localDateTime the local date-time, not null
 @param offset the zone offset, not null
 @param zone the time-zone, not null
 @return the zoned date-time, not null
 */
+ (JavaTimeZonedDateTime *)ofStrictWithJavaTimeLocalDateTime:(JavaTimeLocalDateTime *)localDateTime
                                      withJavaTimeZoneOffset:(JavaTimeZoneOffset *)offset
                                          withJavaTimeZoneId:(JavaTimeZoneId *)zone;

/*!
 @brief Obtains an instance of <code>ZonedDateTime</code> from a text string such as 
 <code>2007-12-03T10:15:30+01:00[Europe/Paris]</code>.
 <p>
  The string must represent a valid date-time and is parsed using 
 <code>java.time.format.DateTimeFormatter.ISO_ZONED_DATE_TIME</code>.
 @param text the text to parse such as "2007-12-03T10:15:30+01:00[Europe/Paris]", not null
 @return the parsed zoned date-time, not null
 @throw DateTimeParseExceptionif the text cannot be parsed
 */
+ (JavaTimeZonedDateTime *)parseWithJavaLangCharSequence:(id<JavaLangCharSequence>)text;

/*!
 @brief Obtains an instance of <code>ZonedDateTime</code> from a text string using a specific formatter.
 <p>
  The text is parsed using the formatter, returning a date-time.
 @param text the text to parse, not null
 @param formatter the formatter to use, not null
 @return the parsed zoned date-time, not null
 @throw DateTimeParseExceptionif the text cannot be parsed
 */
+ (JavaTimeZonedDateTime *)parseWithJavaLangCharSequence:(id<JavaLangCharSequence>)text
                     withJavaTimeFormatDateTimeFormatter:(JavaTimeFormatDateTimeFormatter *)formatter;

/*!
 @brief Returns a copy of this date-time with the specified amount added.
 <p>
  This returns a <code>ZonedDateTime</code>, based on this one, with the amount
  in terms of the unit added. If it is not possible to add the amount, because the
  unit is not supported or for some other reason, an exception is thrown. 
 <p>
  If the field is a <code>ChronoUnit</code> then the addition is implemented here.
  The zone is not part of the calculation and will be unchanged in the result.
  The calculation for date and time units differ. 
 <p>
  Date units operate on the local time-line.
  The period is first added to the local date-time, then converted back
  to a zoned date-time using the zone ID.
  The conversion uses <code>ofLocal(LocalDateTime, ZoneId, ZoneOffset)</code>
  with the offset before the addition. 
 <p>
  Time units operate on the instant time-line.
  The period is first added to the local date-time, then converted back to
  a zoned date-time using the zone ID.
  The conversion uses <code>ofInstant(LocalDateTime, ZoneOffset, ZoneId)</code>
  with the offset before the addition. 
 <p>
  If the field is not a <code>ChronoUnit</code>, then the result of this method
  is obtained by invoking <code>TemporalUnit.addTo(Temporal, long)</code>
  passing <code>this</code> as the argument. In this case, the unit determines
  whether and how to perform the addition. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param amountToAdd the amount of the unit to add to the result, may be negative
 @param unit the unit of the amount to add, not null
 @return a <code>ZonedDateTime</code> based on this date-time with the specified amount added, not null
 @throw DateTimeExceptionif the addition cannot be made
 @throw UnsupportedTemporalTypeExceptionif the unit is not supported
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeZonedDateTime *)plusWithLong:(jlong)amountToAdd
       withJavaTimeTemporalTemporalUnit:(id<JavaTimeTemporalTemporalUnit>)unit;

/*!
 @brief Returns a copy of this date-time with the specified amount added.
 <p>
  This returns a <code>ZonedDateTime</code>, based on this one, with the specified amount added.
  The amount is typically <code>Period</code> or <code>Duration</code> but may be
  any other type implementing the <code>TemporalAmount</code> interface. 
 <p>
  The calculation is delegated to the amount object by calling 
 <code>TemporalAmount.addTo(Temporal)</code>. The amount implementation is free
  to implement the addition in any way it wishes, however it typically
  calls back to <code>plus(long, TemporalUnit)</code>. Consult the documentation
  of the amount implementation to determine if it can be successfully added. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param amountToAdd the amount to add, not null
 @return a <code>ZonedDateTime</code> based on this date-time with the addition made, not null
 @throw DateTimeExceptionif the addition cannot be made
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeZonedDateTime *)plusWithJavaTimeTemporalTemporalAmount:(id<JavaTimeTemporalTemporalAmount>)amountToAdd;

/*!
 @brief Returns a copy of this <code>ZonedDateTime</code> with the specified number of days added.
 <p>
  This operates on the local time-line, 
 <code>adding days</code> to the local date-time.
  This is then converted back to a <code>ZonedDateTime</code>, using the zone ID
  to obtain the offset. 
 <p>
  When converting back to <code>ZonedDateTime</code>, if the local date-time is in an overlap,
  then the offset will be retained if possible, otherwise the earlier offset will be used.
  If in a gap, the local date-time will be adjusted forward by the length of the gap. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param days the days to add, may be negative
 @return a <code>ZonedDateTime</code> based on this date-time with the days added, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeZonedDateTime *)plusDaysWithLong:(jlong)days;

/*!
 @brief Returns a copy of this <code>ZonedDateTime</code> with the specified number of hours added.
 <p>
  This operates on the instant time-line, such that adding one hour will
  always be a duration of one hour later.
  This may cause the local date-time to change by an amount other than one hour.
  Note that this is a different approach to that used by days, months and years,
  thus adding one day is not the same as adding 24 hours. 
 <p>
  For example, consider a time-zone where the spring DST cutover means that the
  local times 01:00 to 01:59 occur twice changing from offset +02:00 to +01:00. 
 <ul>
  <li>Adding one hour to 00:30+02:00 will result in 01:30+02:00 
 <li>Adding one hour to 01:30+02:00 will result in 01:30+01:00 
 <li>Adding one hour to 01:30+01:00 will result in 02:30+01:00 
 <li>Adding three hours to 00:30+02:00 will result in 02:30+01:00 
 </ul>
  <p>
  This instance is immutable and unaffected by this method call.
 @param hours the hours to add, may be negative
 @return a <code>ZonedDateTime</code> based on this date-time with the hours added, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeZonedDateTime *)plusHoursWithLong:(jlong)hours;

/*!
 @brief Returns a copy of this <code>ZonedDateTime</code> with the specified number of minutes added.
 <p>
  This operates on the instant time-line, such that adding one minute will
  always be a duration of one minute later.
  This may cause the local date-time to change by an amount other than one minute.
  Note that this is a different approach to that used by days, months and years. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param minutes the minutes to add, may be negative
 @return a <code>ZonedDateTime</code> based on this date-time with the minutes added, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeZonedDateTime *)plusMinutesWithLong:(jlong)minutes;

/*!
 @brief Returns a copy of this <code>ZonedDateTime</code> with the specified number of months added.
 <p>
  This operates on the local time-line, 
 <code>adding months</code> to the local date-time.
  This is then converted back to a <code>ZonedDateTime</code>, using the zone ID
  to obtain the offset. 
 <p>
  When converting back to <code>ZonedDateTime</code>, if the local date-time is in an overlap,
  then the offset will be retained if possible, otherwise the earlier offset will be used.
  If in a gap, the local date-time will be adjusted forward by the length of the gap. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param months the months to add, may be negative
 @return a <code>ZonedDateTime</code> based on this date-time with the months added, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeZonedDateTime *)plusMonthsWithLong:(jlong)months;

/*!
 @brief Returns a copy of this <code>ZonedDateTime</code> with the specified number of nanoseconds added.
 <p>
  This operates on the instant time-line, such that adding one nano will
  always be a duration of one nano later.
  This may cause the local date-time to change by an amount other than one nano.
  Note that this is a different approach to that used by days, months and years. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param nanos the nanos to add, may be negative
 @return a <code>ZonedDateTime</code> based on this date-time with the nanoseconds added, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeZonedDateTime *)plusNanosWithLong:(jlong)nanos;

/*!
 @brief Returns a copy of this <code>ZonedDateTime</code> with the specified number of seconds added.
 <p>
  This operates on the instant time-line, such that adding one second will
  always be a duration of one second later.
  This may cause the local date-time to change by an amount other than one second.
  Note that this is a different approach to that used by days, months and years. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param seconds the seconds to add, may be negative
 @return a <code>ZonedDateTime</code> based on this date-time with the seconds added, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeZonedDateTime *)plusSecondsWithLong:(jlong)seconds;

/*!
 @brief Returns a copy of this <code>ZonedDateTime</code> with the specified number of weeks added.
 <p>
  This operates on the local time-line, 
 <code>adding weeks</code> to the local date-time.
  This is then converted back to a <code>ZonedDateTime</code>, using the zone ID
  to obtain the offset. 
 <p>
  When converting back to <code>ZonedDateTime</code>, if the local date-time is in an overlap,
  then the offset will be retained if possible, otherwise the earlier offset will be used.
  If in a gap, the local date-time will be adjusted forward by the length of the gap. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param weeks the weeks to add, may be negative
 @return a <code>ZonedDateTime</code> based on this date-time with the weeks added, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeZonedDateTime *)plusWeeksWithLong:(jlong)weeks;

/*!
 @brief Returns a copy of this <code>ZonedDateTime</code> with the specified number of years added.
 <p>
  This operates on the local time-line, 
 <code>adding years</code> to the local date-time.
  This is then converted back to a <code>ZonedDateTime</code>, using the zone ID
  to obtain the offset. 
 <p>
  When converting back to <code>ZonedDateTime</code>, if the local date-time is in an overlap,
  then the offset will be retained if possible, otherwise the earlier offset will be used.
  If in a gap, the local date-time will be adjusted forward by the length of the gap. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param years the years to add, may be negative
 @return a <code>ZonedDateTime</code> based on this date-time with the years added, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeZonedDateTime *)plusYearsWithLong:(jlong)years;

/*!
 @brief Queries this date-time using the specified query.
 <p>
  This queries this date-time using the specified query strategy object.
  The <code>TemporalQuery</code> object defines the logic to be used to
  obtain the result. Read the documentation of the query to understand
  what the result of this method will be. 
 <p>
  The result of this method is obtained by invoking the 
 <code>TemporalQuery.queryFrom(TemporalAccessor)</code> method on the
  specified query passing <code>this</code> as the argument.
 @param query the query to invoke, not null
 @return the query result, null may be returned (defined by the query)
 @throw DateTimeExceptionif unable to query (defined by the query)
 @throw ArithmeticExceptionif numeric overflow occurs (defined by the query)
 */
- (id)queryWithJavaTimeTemporalTemporalQuery:(id<JavaTimeTemporalTemporalQuery>)query;

/*!
 @brief Gets the range of valid values for the specified field.
 <p>
  The range object expresses the minimum and maximum valid values for a field.
  This date-time is used to enhance the accuracy of the returned range.
  If it is not possible to return the range, because the field is not supported
  or for some other reason, an exception is thrown. 
 <p>
  If the field is a <code>ChronoField</code> then the query is implemented here.
  The <code>supported fields</code> will return
  appropriate range instances.
  All other <code>ChronoField</code> instances will throw an <code>UnsupportedTemporalTypeException</code>.
  <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.rangeRefinedBy(TemporalAccessor)</code>
  passing <code>this</code> as the argument.
  Whether the range can be obtained is determined by the field.
 @param field the field to query the range for, not null
 @return the range of valid values for the field, not null
 @throw DateTimeExceptionif the range for the field cannot be obtained
 @throw UnsupportedTemporalTypeExceptionif the field is not supported
 */
- (JavaTimeTemporalValueRange *)rangeWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field;

/*!
 @brief Gets the <code>LocalDate</code> part of this date-time.
 <p>
  This returns a <code>LocalDate</code> with the same year, month and day
  as this date-time.
 @return the date part of this date-time, not null
 */
- (JavaTimeLocalDate *)toLocalDate;

/*!
 @brief Gets the <code>LocalDateTime</code> part of this date-time.
 <p>
  This returns a <code>LocalDateTime</code> with the same year, month, day and time
  as this date-time.
 @return the local date-time part of this date-time, not null
 */
- (JavaTimeLocalDateTime *)toLocalDateTime;

/*!
 @brief Gets the <code>LocalTime</code> part of this date-time.
 <p>
  This returns a <code>LocalTime</code> with the same hour, minute, second and
  nanosecond as this date-time.
 @return the time part of this date-time, not null
 */
- (JavaTimeLocalTime *)toLocalTime;

/*!
 @brief Converts this date-time to an <code>OffsetDateTime</code>.
 <p>
  This creates an offset date-time using the local date-time and offset.
  The zone ID is ignored.
 @return an offset date-time representing the same local date-time and offset, not null
 */
- (JavaTimeOffsetDateTime *)toOffsetDateTime;

/*!
 @brief Outputs this date-time as a <code>String</code>, such as 
 <code>2007-12-03T10:15:30+01:00[Europe/Paris]</code>.
 <p>
  The format consists of the <code>LocalDateTime</code> followed by the <code>ZoneOffset</code>.
  If the <code>ZoneId</code> is not the same as the offset, then the ID is output.
  The output is compatible with ISO-8601 if the offset and ID are the same.
 @return a string representation of this date-time, not null
 */
- (NSString *)description;

/*!
 @brief Returns a copy of this <code>ZonedDateTime</code> with the time truncated.
 <p>
  Truncation returns a copy of the original date-time with fields
  smaller than the specified unit set to zero.
  For example, truncating with the <code>minutes</code> unit
  will set the second-of-minute and nano-of-second field to zero. 
 <p>
  The unit must have a duration
  that divides into the length of a standard day without remainder.
  This includes all supplied time units on <code>ChronoUnit</code> and 
 <code>DAYS</code>. Other units throw an exception. 
 <p>
  This operates on the local time-line, 
 <code>truncating</code>
  the underlying local date-time. This is then converted back to a 
 <code>ZonedDateTime</code>, using the zone ID to obtain the offset. 
 <p>
  When converting back to <code>ZonedDateTime</code>, if the local date-time is in an overlap,
  then the offset will be retained if possible, otherwise the earlier offset will be used.
  If in a gap, the local date-time will be adjusted forward by the length of the gap. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param unit the unit to truncate to, not null
 @return a <code>ZonedDateTime</code> based on this date-time with the time truncated, not null
 @throw DateTimeExceptionif unable to truncate
 @throw UnsupportedTemporalTypeExceptionif the unit is not supported
 */
- (JavaTimeZonedDateTime *)truncatedToWithJavaTimeTemporalTemporalUnit:(id<JavaTimeTemporalTemporalUnit>)unit;

/*!
 @brief Calculates the amount of time until another date-time in terms of the specified unit.
 <p>
  This calculates the amount of time between two <code>ZonedDateTime</code>
  objects in terms of a single <code>TemporalUnit</code>.
  The start and end points are <code>this</code> and the specified date-time.
  The result will be negative if the end is before the start.
  For example, the amount in days between two date-times can be calculated
  using <code>startDateTime.until(endDateTime, DAYS)</code>.
  <p>
  The <code>Temporal</code> passed to this method is converted to a 
 <code>ZonedDateTime</code> using <code>from(TemporalAccessor)</code>.
  If the time-zone differs between the two zoned date-times, the specified
  end date-time is normalized to have the same zone as this date-time. 
 <p>
  The calculation returns a whole number, representing the number of
  complete units between the two date-times.
  For example, the amount in months between 2012-06-15T00:00Z and 2012-08-14T23:59Z
  will only be one month as it is one minute short of two months. 
 <p>
  There are two equivalent ways of using this method.
  The first is to invoke this method.
  The second is to use <code>TemporalUnit.between(Temporal, Temporal)</code>:
  @code

    // these two lines are equivalent
    amount = start.until(end, MONTHS);
    amount = MONTHS.between(start, end); 
  
@endcode
  The choice should be made based on which makes the code more readable. 
 <p>
  The calculation is implemented in this method for <code>ChronoUnit</code>.
  The units <code>NANOS</code>, <code>MICROS</code>, <code>MILLIS</code>, <code>SECONDS</code>,
  <code>MINUTES</code>, <code>HOURS</code> and <code>HALF_DAYS</code>, <code>DAYS</code>,
  <code>WEEKS</code>, <code>MONTHS</code>, <code>YEARS</code>, <code>DECADES</code>,
  <code>CENTURIES</code>, <code>MILLENNIA</code> and <code>ERAS</code> are supported.
  Other <code>ChronoUnit</code> values will throw an exception. 
 <p>
  The calculation for date and time units differ. 
 <p>
  Date units operate on the local time-line, using the local date-time.
  For example, the period from noon on day 1 to noon the following day
  in days will always be counted as exactly one day, irrespective of whether
  there was a daylight savings change or not. 
 <p>
  Time units operate on the instant time-line.
  The calculation effectively converts both zoned date-times to instants
  and then calculates the period between the instants.
  For example, the period from noon on day 1 to noon the following day
  in hours may be 23, 24 or 25 hours (or some other amount) depending on
  whether there was a daylight savings change or not. 
 <p>
  If the unit is not a <code>ChronoUnit</code>, then the result of this method
  is obtained by invoking <code>TemporalUnit.between(Temporal, Temporal)</code>
  passing <code>this</code> as the first argument and the converted input temporal
  as the second argument. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param endExclusive the end date, exclusive, which is converted to a <code>ZonedDateTime</code> , not null
 @param unit the unit to measure the amount in, not null
 @return the amount of time between this date-time and the end date-time
 @throw DateTimeExceptionif the amount cannot be calculated, or the end
   temporal cannot be converted to a <code>ZonedDateTime</code>
 @throw UnsupportedTemporalTypeExceptionif the unit is not supported
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (jlong)untilWithJavaTimeTemporalTemporal:(id<JavaTimeTemporalTemporal>)endExclusive
          withJavaTimeTemporalTemporalUnit:(id<JavaTimeTemporalTemporalUnit>)unit;

/*!
 @brief Returns an adjusted copy of this date-time.
 <p>
  This returns a <code>ZonedDateTime</code>, based on this one, with the date-time adjusted.
  The adjustment takes place using the specified adjuster strategy object.
  Read the documentation of the adjuster to understand what adjustment will be made. 
 <p>
  A simple adjuster might simply set the one of the fields, such as the year field.
  A more complex adjuster might set the date to the last day of the month.
  A selection of common adjustments is provided in 
 <code>TemporalAdjusters</code>.
  These include finding the "last day of the month" and "next Wednesday".
  Key date-time classes also implement the <code>TemporalAdjuster</code> interface,
  such as <code>Month</code> and <code>MonthDay</code>.
  The adjuster is responsible for handling special cases, such as the varying
  lengths of month and leap years. 
 <p>
  For example this code returns a date on the last day of July: 
 @code

   import static java.time.Month.*;
   import static java.time.temporal.TemporalAdjusters.*;
   result = zonedDateTime.with(JULY).with(lastDayOfMonth()); 
  
@endcode
  <p>
  The classes <code>LocalDate</code> and <code>LocalTime</code> implement <code>TemporalAdjuster</code>,
  thus this method can be used to change the date, time or offset: 
 @code

   result = zonedDateTime.with(date);
   result = zonedDateTime.with(time); 
  
@endcode
  <p>
  <code>ZoneOffset</code> also implements <code>TemporalAdjuster</code> however using it
  as an argument typically has no effect. The offset of a <code>ZonedDateTime</code> is
  controlled primarily by the time-zone. As such, changing the offset does not generally
  make sense, because there is only one valid offset for the local date-time and zone.
  If the zoned date-time is in a daylight savings overlap, then the offset is used
  to switch between the two valid offsets. In all other cases, the offset is ignored. 
 <p>
  The result of this method is obtained by invoking the 
 <code>TemporalAdjuster.adjustInto(Temporal)</code> method on the
  specified adjuster passing <code>this</code> as the argument. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param adjuster the adjuster to use, not null
 @return a <code>ZonedDateTime</code> based on <code>this</code> with the adjustment made, not null
 @throw DateTimeExceptionif the adjustment cannot be made
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeZonedDateTime *)withWithJavaTimeTemporalTemporalAdjuster:(id<JavaTimeTemporalTemporalAdjuster>)adjuster;

/*!
 @brief Returns a copy of this date-time with the specified field set to a new value.
 <p>
  This returns a <code>ZonedDateTime</code>, based on this one, with the value
  for the specified field changed.
  This can be used to change any supported field, such as the year, month or day-of-month.
  If it is not possible to set the value, because the field is not supported or for
  some other reason, an exception is thrown. 
 <p>
  In some cases, changing the specified field can cause the resulting date-time to become invalid,
  such as changing the month from 31st January to February would make the day-of-month invalid.
  In cases like this, the field is responsible for resolving the date. Typically it will choose
  the previous valid date, which would be the last valid day of February in this example. 
 <p>
  If the field is a <code>ChronoField</code> then the adjustment is implemented here. 
 <p>
  The <code>INSTANT_SECONDS</code> field will return a date-time with the specified instant.
  The zone and nano-of-second are unchanged.
  The result will have an offset derived from the new instant and original zone.
  If the new instant value is outside the valid range then a <code>DateTimeException</code> will be thrown. 
 <p>
  The <code>OFFSET_SECONDS</code> field will typically be ignored.
  The offset of a <code>ZonedDateTime</code> is controlled primarily by the time-zone.
  As such, changing the offset does not generally make sense, because there is only
  one valid offset for the local date-time and zone.
  If the zoned date-time is in a daylight savings overlap, then the offset is used
  to switch between the two valid offsets. In all other cases, the offset is ignored.
  If the new offset value is outside the valid range then a <code>DateTimeException</code> will be thrown. 
 <p>
  The other <code>supported fields</code> will behave as per
  the matching method on <code>LocalDateTime</code>.
  The zone is not part of the calculation and will be unchanged.
  When converting back to <code>ZonedDateTime</code>, if the local date-time is in an overlap,
  then the offset will be retained if possible, otherwise the earlier offset will be used.
  If in a gap, the local date-time will be adjusted forward by the length of the gap. 
 <p>
  All other <code>ChronoField</code> instances will throw an <code>UnsupportedTemporalTypeException</code>.
  <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.adjustInto(Temporal, long)</code>
  passing <code>this</code> as the argument. In this case, the field determines
  whether and how to adjust the instant. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param field the field to set in the result, not null
 @param newValue the new value of the field in the result
 @return a <code>ZonedDateTime</code> based on <code>this</code> with the specified field set, not null
 @throw DateTimeExceptionif the field cannot be set
 @throw UnsupportedTemporalTypeExceptionif the field is not supported
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeZonedDateTime *)withWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field
                                                        withLong:(jlong)newValue;

/*!
 @brief Returns a copy of this <code>ZonedDateTime</code> with the day-of-month altered.
 <p>
  This operates on the local time-line, 
 <code>changing the day-of-month</code> of the local date-time.
  This is then converted back to a <code>ZonedDateTime</code>, using the zone ID
  to obtain the offset. 
 <p>
  When converting back to <code>ZonedDateTime</code>, if the local date-time is in an overlap,
  then the offset will be retained if possible, otherwise the earlier offset will be used.
  If in a gap, the local date-time will be adjusted forward by the length of the gap. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param dayOfMonth the day-of-month to set in the result, from 1 to 28-31
 @return a <code>ZonedDateTime</code> based on this date-time with the requested day, not null
 @throw DateTimeExceptionif the day-of-month value is invalid,
   or if the day-of-month is invalid for the month-year
 */
- (JavaTimeZonedDateTime *)withDayOfMonthWithInt:(jint)dayOfMonth;

/*!
 @brief Returns a copy of this <code>ZonedDateTime</code> with the day-of-year altered.
 <p>
  This operates on the local time-line, 
 <code>changing the day-of-year</code> of the local date-time.
  This is then converted back to a <code>ZonedDateTime</code>, using the zone ID
  to obtain the offset. 
 <p>
  When converting back to <code>ZonedDateTime</code>, if the local date-time is in an overlap,
  then the offset will be retained if possible, otherwise the earlier offset will be used.
  If in a gap, the local date-time will be adjusted forward by the length of the gap. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param dayOfYear the day-of-year to set in the result, from 1 to 365-366
 @return a <code>ZonedDateTime</code> based on this date with the requested day, not null
 @throw DateTimeExceptionif the day-of-year value is invalid,
   or if the day-of-year is invalid for the year
 */
- (JavaTimeZonedDateTime *)withDayOfYearWithInt:(jint)dayOfYear;

/*!
 @brief Returns a copy of this date-time changing the zone offset to the
  earlier of the two valid offsets at a local time-line overlap.
 <p>
  This method only has any effect when the local time-line overlaps, such as
  at an autumn daylight savings cutover. In this scenario, there are two
  valid offsets for the local date-time. Calling this method will return
  a zoned date-time with the earlier of the two selected. 
 <p>
  If this method is called when it is not an overlap, <code>this</code>
  is returned. 
 <p>
  This instance is immutable and unaffected by this method call.
 @return a <code>ZonedDateTime</code> based on this date-time with the earlier offset, not null
 */
- (JavaTimeZonedDateTime *)withEarlierOffsetAtOverlap;

/*!
 @brief Returns a copy of this date-time with the zone ID set to the offset.
 <p>
  This returns a zoned date-time where the zone ID is the same as <code>getOffset()</code>.
  The local date-time, offset and instant of the result will be the same as in this date-time. 
 <p>
  Setting the date-time to a fixed single offset means that any future
  calculations, such as addition or subtraction, have no complex edge cases
  due to time-zone rules.
  This might also be useful when sending a zoned date-time across a network,
  as most protocols, such as ISO-8601, only handle offsets,
  and not region-based zone IDs. 
 <p>
  This is equivalent to <code>ZonedDateTime.of(zdt.toLocalDateTime(), zdt.getOffset())</code>.
 @return a <code>ZonedDateTime</code> with the zone ID set to the offset, not null
 */
- (JavaTimeZonedDateTime *)withFixedOffsetZone;

/*!
 @brief Returns a copy of this <code>ZonedDateTime</code> with the hour-of-day altered.
 <p>
  This operates on the local time-line, 
 changing the time of the local date-time.
  This is then converted back to a <code>ZonedDateTime</code>, using the zone ID
  to obtain the offset. 
 <p>
  When converting back to <code>ZonedDateTime</code>, if the local date-time is in an overlap,
  then the offset will be retained if possible, otherwise the earlier offset will be used.
  If in a gap, the local date-time will be adjusted forward by the length of the gap. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param hour the hour-of-day to set in the result, from 0 to 23
 @return a <code>ZonedDateTime</code> based on this date-time with the requested hour, not null
 @throw DateTimeExceptionif the hour value is invalid
 */
- (JavaTimeZonedDateTime *)withHourWithInt:(jint)hour;

/*!
 @brief Returns a copy of this date-time changing the zone offset to the
  later of the two valid offsets at a local time-line overlap.
 <p>
  This method only has any effect when the local time-line overlaps, such as
  at an autumn daylight savings cutover. In this scenario, there are two
  valid offsets for the local date-time. Calling this method will return
  a zoned date-time with the later of the two selected. 
 <p>
  If this method is called when it is not an overlap, <code>this</code>
  is returned. 
 <p>
  This instance is immutable and unaffected by this method call.
 @return a <code>ZonedDateTime</code> based on this date-time with the later offset, not null
 */
- (JavaTimeZonedDateTime *)withLaterOffsetAtOverlap;

/*!
 @brief Returns a copy of this <code>ZonedDateTime</code> with the minute-of-hour altered.
 <p>
  This operates on the local time-line, 
 changing the time of the local date-time.
  This is then converted back to a <code>ZonedDateTime</code>, using the zone ID
  to obtain the offset. 
 <p>
  When converting back to <code>ZonedDateTime</code>, if the local date-time is in an overlap,
  then the offset will be retained if possible, otherwise the earlier offset will be used.
  If in a gap, the local date-time will be adjusted forward by the length of the gap. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param minute the minute-of-hour to set in the result, from 0 to 59
 @return a <code>ZonedDateTime</code> based on this date-time with the requested minute, not null
 @throw DateTimeExceptionif the minute value is invalid
 */
- (JavaTimeZonedDateTime *)withMinuteWithInt:(jint)minute;

/*!
 @brief Returns a copy of this <code>ZonedDateTime</code> with the month-of-year altered.
 <p>
  This operates on the local time-line, 
 <code>changing the month</code> of the local date-time.
  This is then converted back to a <code>ZonedDateTime</code>, using the zone ID
  to obtain the offset. 
 <p>
  When converting back to <code>ZonedDateTime</code>, if the local date-time is in an overlap,
  then the offset will be retained if possible, otherwise the earlier offset will be used.
  If in a gap, the local date-time will be adjusted forward by the length of the gap. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param month the month-of-year to set in the result, from 1 (January) to 12 (December)
 @return a <code>ZonedDateTime</code> based on this date-time with the requested month, not null
 @throw DateTimeExceptionif the month-of-year value is invalid
 */
- (JavaTimeZonedDateTime *)withMonthWithInt:(jint)month;

/*!
 @brief Returns a copy of this <code>ZonedDateTime</code> with the nano-of-second altered.
 <p>
  This operates on the local time-line, 
 changing the time of the local date-time.
  This is then converted back to a <code>ZonedDateTime</code>, using the zone ID
  to obtain the offset. 
 <p>
  When converting back to <code>ZonedDateTime</code>, if the local date-time is in an overlap,
  then the offset will be retained if possible, otherwise the earlier offset will be used.
  If in a gap, the local date-time will be adjusted forward by the length of the gap. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param nanoOfSecond the nano-of-second to set in the result, from 0 to 999,999,999
 @return a <code>ZonedDateTime</code> based on this date-time with the requested nanosecond, not null
 @throw DateTimeExceptionif the nano value is invalid
 */
- (JavaTimeZonedDateTime *)withNanoWithInt:(jint)nanoOfSecond;

/*!
 @brief Returns a copy of this <code>ZonedDateTime</code> with the second-of-minute altered.
 <p>
  This operates on the local time-line, 
 changing the time of the local date-time.
  This is then converted back to a <code>ZonedDateTime</code>, using the zone ID
  to obtain the offset. 
 <p>
  When converting back to <code>ZonedDateTime</code>, if the local date-time is in an overlap,
  then the offset will be retained if possible, otherwise the earlier offset will be used.
  If in a gap, the local date-time will be adjusted forward by the length of the gap. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param second the second-of-minute to set in the result, from 0 to 59
 @return a <code>ZonedDateTime</code> based on this date-time with the requested second, not null
 @throw DateTimeExceptionif the second value is invalid
 */
- (JavaTimeZonedDateTime *)withSecondWithInt:(jint)second;

/*!
 @brief Returns a copy of this <code>ZonedDateTime</code> with the year altered.
 <p>
  This operates on the local time-line, 
 <code>changing the year</code> of the local date-time.
  This is then converted back to a <code>ZonedDateTime</code>, using the zone ID
  to obtain the offset. 
 <p>
  When converting back to <code>ZonedDateTime</code>, if the local date-time is in an overlap,
  then the offset will be retained if possible, otherwise the earlier offset will be used.
  If in a gap, the local date-time will be adjusted forward by the length of the gap. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param year the year to set in the result, from MIN_YEAR to MAX_YEAR
 @return a <code>ZonedDateTime</code> based on this date-time with the requested year, not null
 @throw DateTimeExceptionif the year value is invalid
 */
- (JavaTimeZonedDateTime *)withYearWithInt:(jint)year;

/*!
 @brief Returns a copy of this date-time with a different time-zone,
  retaining the instant.
 <p>
  This method changes the time-zone and retains the instant.
  This normally results in a change to the local date-time. 
 <p>
  This method is based on retaining the same instant, thus gaps and overlaps
  in the local time-line have no effect on the result. 
 <p>
  To change the offset while keeping the local time,
  use <code>withZoneSameLocal(ZoneId)</code>.
 @param zone the time-zone to change to, not null
 @return a <code>ZonedDateTime</code> based on this date-time with the requested zone, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeZonedDateTime *)withZoneSameInstantWithJavaTimeZoneId:(JavaTimeZoneId *)zone;

/*!
 @brief Returns a copy of this date-time with a different time-zone,
  retaining the local date-time if possible.
 <p>
  This method changes the time-zone and retains the local date-time.
  The local date-time is only changed if it is invalid for the new zone,
  determined using the same approach as 
 <code>ofLocal(LocalDateTime, ZoneId, ZoneOffset)</code>.
  <p>
  To change the zone and adjust the local date-time,
  use <code>withZoneSameInstant(ZoneId)</code>.
  <p>
  This instance is immutable and unaffected by this method call.
 @param zone the time-zone to change to, not null
 @return a <code>ZonedDateTime</code> based on this date-time with the requested zone, not null
 */
- (JavaTimeZonedDateTime *)withZoneSameLocalWithJavaTimeZoneId:(JavaTimeZoneId *)zone;

#pragma mark Package-Private

+ (JavaTimeZonedDateTime *)readExternalWithJavaIoObjectInput:(id<JavaIoObjectInput>)inArg;

- (void)writeExternalWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaTimeZonedDateTime)

FOUNDATION_EXPORT JavaTimeZonedDateTime *JavaTimeZonedDateTime_now(void);

FOUNDATION_EXPORT JavaTimeZonedDateTime *JavaTimeZonedDateTime_nowWithJavaTimeZoneId_(JavaTimeZoneId *zone);

FOUNDATION_EXPORT JavaTimeZonedDateTime *JavaTimeZonedDateTime_nowWithJavaTimeClock_(JavaTimeClock *clock);

FOUNDATION_EXPORT JavaTimeZonedDateTime *JavaTimeZonedDateTime_ofWithJavaTimeLocalDate_withJavaTimeLocalTime_withJavaTimeZoneId_(JavaTimeLocalDate *date, JavaTimeLocalTime *time, JavaTimeZoneId *zone);

FOUNDATION_EXPORT JavaTimeZonedDateTime *JavaTimeZonedDateTime_ofWithJavaTimeLocalDateTime_withJavaTimeZoneId_(JavaTimeLocalDateTime *localDateTime, JavaTimeZoneId *zone);

FOUNDATION_EXPORT JavaTimeZonedDateTime *JavaTimeZonedDateTime_ofWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withJavaTimeZoneId_(jint year, jint month, jint dayOfMonth, jint hour, jint minute, jint second, jint nanoOfSecond, JavaTimeZoneId *zone);

FOUNDATION_EXPORT JavaTimeZonedDateTime *JavaTimeZonedDateTime_ofLocalWithJavaTimeLocalDateTime_withJavaTimeZoneId_withJavaTimeZoneOffset_(JavaTimeLocalDateTime *localDateTime, JavaTimeZoneId *zone, JavaTimeZoneOffset *preferredOffset);

FOUNDATION_EXPORT JavaTimeZonedDateTime *JavaTimeZonedDateTime_ofInstantWithJavaTimeInstant_withJavaTimeZoneId_(JavaTimeInstant *instant, JavaTimeZoneId *zone);

FOUNDATION_EXPORT JavaTimeZonedDateTime *JavaTimeZonedDateTime_ofInstantWithJavaTimeLocalDateTime_withJavaTimeZoneOffset_withJavaTimeZoneId_(JavaTimeLocalDateTime *localDateTime, JavaTimeZoneOffset *offset, JavaTimeZoneId *zone);

FOUNDATION_EXPORT JavaTimeZonedDateTime *JavaTimeZonedDateTime_ofStrictWithJavaTimeLocalDateTime_withJavaTimeZoneOffset_withJavaTimeZoneId_(JavaTimeLocalDateTime *localDateTime, JavaTimeZoneOffset *offset, JavaTimeZoneId *zone);

FOUNDATION_EXPORT JavaTimeZonedDateTime *JavaTimeZonedDateTime_fromWithJavaTimeTemporalTemporalAccessor_(id<JavaTimeTemporalTemporalAccessor> temporal);

FOUNDATION_EXPORT JavaTimeZonedDateTime *JavaTimeZonedDateTime_parseWithJavaLangCharSequence_(id<JavaLangCharSequence> text);

FOUNDATION_EXPORT JavaTimeZonedDateTime *JavaTimeZonedDateTime_parseWithJavaLangCharSequence_withJavaTimeFormatDateTimeFormatter_(id<JavaLangCharSequence> text, JavaTimeFormatDateTimeFormatter *formatter);

FOUNDATION_EXPORT JavaTimeZonedDateTime *JavaTimeZonedDateTime_readExternalWithJavaIoObjectInput_(id<JavaIoObjectInput> inArg);

J2OBJC_TYPE_LITERAL_HEADER(JavaTimeZonedDateTime)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaTimeZonedDateTime")
