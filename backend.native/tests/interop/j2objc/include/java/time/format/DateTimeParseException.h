//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/time/format/DateTimeParseException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaTimeFormatDateTimeParseException")
#ifdef RESTRICT_JavaTimeFormatDateTimeParseException
#define INCLUDE_ALL_JavaTimeFormatDateTimeParseException 0
#else
#define INCLUDE_ALL_JavaTimeFormatDateTimeParseException 1
#endif
#undef RESTRICT_JavaTimeFormatDateTimeParseException

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaTimeFormatDateTimeParseException_) && (INCLUDE_ALL_JavaTimeFormatDateTimeParseException || defined(INCLUDE_JavaTimeFormatDateTimeParseException))
#define JavaTimeFormatDateTimeParseException_

#define RESTRICT_JavaTimeDateTimeException 1
#define INCLUDE_JavaTimeDateTimeException 1
#include "java/time/DateTimeException.h"

@class JavaLangThrowable;
@protocol JavaLangCharSequence;

/*!
 @brief An exception thrown when an error occurs during parsing.
 <p>
  This exception includes the text being parsed and the error index.
 @since 1.8
 */
@interface JavaTimeFormatDateTimeParseException : JavaTimeDateTimeException

#pragma mark Public

/*!
 @brief Constructs a new exception with the specified message.
 @param message the message to use for this exception, may be null
 @param parsedData the parsed text, should not be null
 @param errorIndex the index in the parsed string that was invalid, should be a valid index
 */
- (instancetype __nonnull)initWithNSString:(NSString *)message
                  withJavaLangCharSequence:(id<JavaLangCharSequence>)parsedData
                                   withInt:(jint)errorIndex;

/*!
 @brief Constructs a new exception with the specified message and cause.
 @param message the message to use for this exception, may be null
 @param parsedData the parsed text, should not be null
 @param errorIndex the index in the parsed string that was invalid, should be a valid index
 @param cause the cause exception, may be null
 */
- (instancetype __nonnull)initWithNSString:(NSString *)message
                  withJavaLangCharSequence:(id<JavaLangCharSequence>)parsedData
                                   withInt:(jint)errorIndex
                     withJavaLangThrowable:(JavaLangThrowable *)cause;

/*!
 @brief Returns the index where the error was found.
 @return the index in the parsed string that was invalid, should be a valid index
 */
- (jint)getErrorIndex;

/*!
 @brief Returns the string that was being parsed.
 @return the string that was being parsed, should not be null.
 */
- (NSString *)getParsedString;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaTimeFormatDateTimeParseException)

FOUNDATION_EXPORT void JavaTimeFormatDateTimeParseException_initWithNSString_withJavaLangCharSequence_withInt_(JavaTimeFormatDateTimeParseException *self, NSString *message, id<JavaLangCharSequence> parsedData, jint errorIndex);

FOUNDATION_EXPORT JavaTimeFormatDateTimeParseException *new_JavaTimeFormatDateTimeParseException_initWithNSString_withJavaLangCharSequence_withInt_(NSString *message, id<JavaLangCharSequence> parsedData, jint errorIndex) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaTimeFormatDateTimeParseException *create_JavaTimeFormatDateTimeParseException_initWithNSString_withJavaLangCharSequence_withInt_(NSString *message, id<JavaLangCharSequence> parsedData, jint errorIndex);

FOUNDATION_EXPORT void JavaTimeFormatDateTimeParseException_initWithNSString_withJavaLangCharSequence_withInt_withJavaLangThrowable_(JavaTimeFormatDateTimeParseException *self, NSString *message, id<JavaLangCharSequence> parsedData, jint errorIndex, JavaLangThrowable *cause);

FOUNDATION_EXPORT JavaTimeFormatDateTimeParseException *new_JavaTimeFormatDateTimeParseException_initWithNSString_withJavaLangCharSequence_withInt_withJavaLangThrowable_(NSString *message, id<JavaLangCharSequence> parsedData, jint errorIndex, JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaTimeFormatDateTimeParseException *create_JavaTimeFormatDateTimeParseException_initWithNSString_withJavaLangCharSequence_withInt_withJavaLangThrowable_(NSString *message, id<JavaLangCharSequence> parsedData, jint errorIndex, JavaLangThrowable *cause);

J2OBJC_TYPE_LITERAL_HEADER(JavaTimeFormatDateTimeParseException)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaTimeFormatDateTimeParseException")
