//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/time/MonthDay.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaTimeMonthDay")
#ifdef RESTRICT_JavaTimeMonthDay
#define INCLUDE_ALL_JavaTimeMonthDay 0
#else
#define INCLUDE_ALL_JavaTimeMonthDay 1
#endif
#undef RESTRICT_JavaTimeMonthDay

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaTimeMonthDay_) && (INCLUDE_ALL_JavaTimeMonthDay || defined(INCLUDE_JavaTimeMonthDay))
#define JavaTimeMonthDay_

#define RESTRICT_JavaTimeTemporalTemporalAccessor 1
#define INCLUDE_JavaTimeTemporalTemporalAccessor 1
#include "java/time/temporal/TemporalAccessor.h"

#define RESTRICT_JavaTimeTemporalTemporalAdjuster 1
#define INCLUDE_JavaTimeTemporalTemporalAdjuster 1
#include "java/time/temporal/TemporalAdjuster.h"

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "java/lang/Comparable.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class JavaTimeClock;
@class JavaTimeFormatDateTimeFormatter;
@class JavaTimeLocalDate;
@class JavaTimeMonth;
@class JavaTimeTemporalValueRange;
@class JavaTimeZoneId;
@protocol JavaIoDataInput;
@protocol JavaIoDataOutput;
@protocol JavaLangCharSequence;
@protocol JavaTimeTemporalTemporal;
@protocol JavaTimeTemporalTemporalField;
@protocol JavaTimeTemporalTemporalQuery;

/*!
 @brief A month-day in the ISO-8601 calendar system, such as <code>--12-03</code>.
 <p>
  <code>MonthDay</code> is an immutable date-time object that represents the combination
  of a month and day-of-month. Any field that can be derived from a month and day,
  such as quarter-of-year, can be obtained. 
 <p>
  This class does not store or represent a year, time or time-zone.
  For example, the value "December 3rd" can be stored in a <code>MonthDay</code>.
  <p>
  Since a <code>MonthDay</code> does not possess a year, the leap day of
  February 29th is considered valid. 
 <p>
  This class implements <code>TemporalAccessor</code> rather than <code>Temporal</code>.
  This is because it is not possible to define whether February 29th is valid or not
  without external information, preventing the implementation of plus/minus.
  Related to this, <code>MonthDay</code> only provides access to query and set the fields 
 <code>MONTH_OF_YEAR</code> and <code>DAY_OF_MONTH</code>.
  <p>
  The ISO-8601 calendar system is the modern civil calendar system used today
  in most of the world. It is equivalent to the proleptic Gregorian calendar
  system, in which today's rules for leap years are applied for all time.
  For most applications written today, the ISO-8601 rules are entirely suitable.
  However, any application that makes use of historical dates, and requires them
  to be accurate will find the ISO-8601 approach unsuitable.
 @since 1.8
 */
@interface JavaTimeMonthDay : NSObject < JavaTimeTemporalTemporalAccessor, JavaTimeTemporalTemporalAdjuster, JavaLangComparable, JavaIoSerializable >

#pragma mark Public

/*!
 @brief Adjusts the specified temporal object to have this month-day.
 <p>
  This returns a temporal object of the same observable type as the input
  with the month and day-of-month changed to be the same as this. 
 <p>
  The adjustment is equivalent to using <code>Temporal.with(TemporalField, long)</code>
  twice, passing <code>ChronoField.MONTH_OF_YEAR</code> and 
 <code>ChronoField.DAY_OF_MONTH</code> as the fields.
  If the specified temporal object does not use the ISO calendar system then
  a <code>DateTimeException</code> is thrown. 
 <p>
  In most cases, it is clearer to reverse the calling pattern by using 
 <code>Temporal.with(TemporalAdjuster)</code>:
  @code

    // these two lines are equivalent, but the second approach is recommended
    temporal = thisMonthDay.adjustInto(temporal);
    temporal = temporal.with(thisMonthDay); 
  
@endcode
  <p>
  This instance is immutable and unaffected by this method call.
 @param temporal the target object to be adjusted, not null
 @return the adjusted object, not null
 @throw DateTimeExceptionif unable to make the adjustment
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (id<JavaTimeTemporalTemporal>)adjustIntoWithJavaTimeTemporalTemporal:(id<JavaTimeTemporalTemporal>)temporal;

/*!
 @brief Combines this month-day with a year to create a <code>LocalDate</code>.
 <p>
  This returns a <code>LocalDate</code> formed from this month-day and the specified year. 
 <p>
  A month-day of February 29th will be adjusted to February 28th in the resulting
  date if the year is not a leap year. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param year the year to use, from MIN_YEAR to MAX_YEAR
 @return the local date formed from this month-day and the specified year, not null
 @throw DateTimeExceptionif the year is outside the valid range of years
 */
- (JavaTimeLocalDate *)atYearWithInt:(jint)year;

/*!
 @brief Compares this month-day to another month-day.
 <p>
  The comparison is based first on value of the month, then on the value of the day.
  It is "consistent with equals", as defined by <code>Comparable</code>.
 @param other the other month-day to compare to, not null
 @return the comparator value, negative if less, positive if greater
 */
- (jint)compareToWithId:(JavaTimeMonthDay *)other;

/*!
 @brief Checks if this month-day is equal to another month-day.
 <p>
  The comparison is based on the time-line position of the month-day within a year.
 @param obj the object to check, null returns false
 @return true if this is equal to the other month-day
 */
- (jboolean)isEqual:(id)obj;

/*!
 @brief Formats this month-day using the specified formatter.
 <p>
  This month-day will be passed to the formatter to produce a string.
 @param formatter the formatter to use, not null
 @return the formatted month-day string, not null
 @throw DateTimeExceptionif an error occurs during printing
 */
- (NSString *)formatWithJavaTimeFormatDateTimeFormatter:(JavaTimeFormatDateTimeFormatter *)formatter;

/*!
 @brief Obtains an instance of <code>MonthDay</code> from a temporal object.
 <p>
  This obtains a month-day based on the specified temporal.
  A <code>TemporalAccessor</code> represents an arbitrary set of date and time information,
  which this factory converts to an instance of <code>MonthDay</code>.
  <p>
  The conversion extracts the <code>MONTH_OF_YEAR</code> and 
 <code>DAY_OF_MONTH</code> fields.
  The extraction is only permitted if the temporal object has an ISO
  chronology, or can be converted to a <code>LocalDate</code>.
  <p>
  This method matches the signature of the functional interface <code>TemporalQuery</code>
  allowing it to be used as a query via method reference, <code>MonthDay::from</code>.
 @param temporal the temporal object to convert, not null
 @return the month-day, not null
 @throw DateTimeExceptionif unable to convert to a <code>MonthDay</code>
 */
+ (JavaTimeMonthDay *)fromWithJavaTimeTemporalTemporalAccessor:(id<JavaTimeTemporalTemporalAccessor>)temporal;

/*!
 @brief Gets the value of the specified field from this month-day as an <code>int</code>.
 <p>
  This queries this month-day for the value of the specified field.
  The returned value will always be within the valid range of values for the field.
  If it is not possible to return the value, because the field is not supported
  or for some other reason, an exception is thrown. 
 <p>
  If the field is a <code>ChronoField</code> then the query is implemented here.
  The <code>supported fields</code> will return valid
  values based on this month-day.
  All other <code>ChronoField</code> instances will throw an <code>UnsupportedTemporalTypeException</code>.
  <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.getFrom(TemporalAccessor)</code>
  passing <code>this</code> as the argument. Whether the value can be obtained,
  and what the value represents, is determined by the field.
 @param field the field to get, not null
 @return the value for the field
 @throw DateTimeExceptionif a value for the field cannot be obtained or
          the value is outside the range of valid values for the field
 @throw UnsupportedTemporalTypeExceptionif the field is not supported or
          the range of values exceeds an <code>int</code>
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (jint)getWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field;

/*!
 @brief Gets the day-of-month field.
 <p>
  This method returns the primitive <code>int</code> value for the day-of-month.
 @return the day-of-month, from 1 to 31
 */
- (jint)getDayOfMonth;

/*!
 @brief Gets the value of the specified field from this month-day as a <code>long</code>.
 <p>
  This queries this month-day for the value of the specified field.
  If it is not possible to return the value, because the field is not supported
  or for some other reason, an exception is thrown. 
 <p>
  If the field is a <code>ChronoField</code> then the query is implemented here.
  The <code>supported fields</code> will return valid
  values based on this month-day.
  All other <code>ChronoField</code> instances will throw an <code>UnsupportedTemporalTypeException</code>.
  <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.getFrom(TemporalAccessor)</code>
  passing <code>this</code> as the argument. Whether the value can be obtained,
  and what the value represents, is determined by the field.
 @param field the field to get, not null
 @return the value for the field
 @throw DateTimeExceptionif a value for the field cannot be obtained
 @throw UnsupportedTemporalTypeExceptionif the field is not supported
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (jlong)getLongWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field;

/*!
 @brief Gets the month-of-year field using the <code>Month</code> enum.
 <p>
  This method returns the enum <code>Month</code> for the month.
  This avoids confusion as to what <code>int</code> values mean.
  If you need access to the primitive <code>int</code> value then the enum
  provides the <code>int value</code>.
 @return the month-of-year, not null
 - seealso: #getMonthValue()
 */
- (JavaTimeMonth *)getMonth;

/*!
 @brief Gets the month-of-year field from 1 to 12.
 <p>
  This method returns the month as an <code>int</code> from 1 to 12.
  Application code is frequently clearer if the enum <code>Month</code>
  is used by calling <code>getMonth()</code>.
 @return the month-of-year, from 1 to 12
 - seealso: #getMonth()
 */
- (jint)getMonthValue;

/*!
 @brief A hash code for this month-day.
 @return a suitable hash code
 */
- (NSUInteger)hash;

/*!
 @brief Checks if this month-day is after the specified month-day.
 @param other the other month-day to compare to, not null
 @return true if this is after the specified month-day
 */
- (jboolean)isAfterWithJavaTimeMonthDay:(JavaTimeMonthDay *)other;

/*!
 @brief Checks if this month-day is before the specified month-day.
 @param other the other month-day to compare to, not null
 @return true if this point is before the specified month-day
 */
- (jboolean)isBeforeWithJavaTimeMonthDay:(JavaTimeMonthDay *)other;

/*!
 @brief Checks if the specified field is supported.
 <p>
  This checks if this month-day can be queried for the specified field.
  If false, then calling the <code>range</code> and 
 <code>get</code> methods will throw an exception. 
 <p>
  If the field is a <code>ChronoField</code> then the query is implemented here.
  The supported fields are: 
 <ul>
  <li><code>MONTH_OF_YEAR</code>
  <li><code>YEAR</code>
  </ul>
  All other <code>ChronoField</code> instances will return false. 
 <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.isSupportedBy(TemporalAccessor)</code>
  passing <code>this</code> as the argument.
  Whether the field is supported is determined by the field.
 @param field the field to check, null returns false
 @return true if the field is supported on this month-day, false if not
 */
- (jboolean)isSupportedWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field;

/*!
 @brief Checks if the year is valid for this month-day.
 <p>
  This method checks whether this month and day and the input year form
  a valid date. This can only return false for February 29th.
 @param year the year to validate
 @return true if the year is valid for this month-day
 - seealso: Year#isValidMonthDay(MonthDay)
 */
- (jboolean)isValidYearWithInt:(jint)year;

/*!
 @brief Obtains the current month-day from the system clock in the default time-zone.
 <p>
  This will query the <code>system clock</code> in the default
  time-zone to obtain the current month-day. 
 <p>
  Using this method will prevent the ability to use an alternate clock for testing
  because the clock is hard-coded.
 @return the current month-day using the system clock and default time-zone, not null
 */
+ (JavaTimeMonthDay *)now;

/*!
 @brief Obtains the current month-day from the specified clock.
 <p>
  This will query the specified clock to obtain the current month-day.
  Using this method allows the use of an alternate clock for testing.
  The alternate clock may be introduced using <code>dependency injection</code>.
 @param clock the clock to use, not null
 @return the current month-day, not null
 */
+ (JavaTimeMonthDay *)nowWithJavaTimeClock:(JavaTimeClock *)clock;

/*!
 @brief Obtains the current month-day from the system clock in the specified time-zone.
 <p>
  This will query the <code>system clock</code> to obtain the current month-day.
  Specifying the time-zone avoids dependence on the default time-zone. 
 <p>
  Using this method will prevent the ability to use an alternate clock for testing
  because the clock is hard-coded.
 @param zone the zone ID to use, not null
 @return the current month-day using the system clock, not null
 */
+ (JavaTimeMonthDay *)nowWithJavaTimeZoneId:(JavaTimeZoneId *)zone;

/*!
 @brief Obtains an instance of <code>MonthDay</code>.
 <p>
  The day-of-month must be valid for the month within a leap year.
  Hence, for month 2 (February), day 29 is valid. 
 <p>
  For example, passing in month 4 (April) and day 31 will throw an exception, as
  there can never be April 31st in any year. By contrast, passing in
  February 29th is permitted, as that month-day can sometimes be valid.
 @param month the month-of-year to represent, from 1 (January) to 12 (December)
 @param dayOfMonth the day-of-month to represent, from 1 to 31
 @return the month-day, not null
 @throw DateTimeExceptionif the value of any field is out of range,
   or if the day-of-month is invalid for the month
 */
+ (JavaTimeMonthDay *)ofWithInt:(jint)month
                        withInt:(jint)dayOfMonth;

/*!
 @brief Obtains an instance of <code>MonthDay</code>.
 <p>
  The day-of-month must be valid for the month within a leap year.
  Hence, for February, day 29 is valid. 
 <p>
  For example, passing in April and day 31 will throw an exception, as
  there can never be April 31st in any year. By contrast, passing in
  February 29th is permitted, as that month-day can sometimes be valid.
 @param month the month-of-year to represent, not null
 @param dayOfMonth the day-of-month to represent, from 1 to 31
 @return the month-day, not null
 @throw DateTimeExceptionif the value of any field is out of range,
   or if the day-of-month is invalid for the month
 */
+ (JavaTimeMonthDay *)ofWithJavaTimeMonth:(JavaTimeMonth *)month
                                  withInt:(jint)dayOfMonth;

/*!
 @brief Obtains an instance of <code>MonthDay</code> from a text string such as <code>--12-03</code>.
 <p>
  The string must represent a valid month-day.
  The format is <code>--MM-dd</code>.
 @param text the text to parse such as "--12-03", not null
 @return the parsed month-day, not null
 @throw DateTimeParseExceptionif the text cannot be parsed
 */
+ (JavaTimeMonthDay *)parseWithJavaLangCharSequence:(id<JavaLangCharSequence>)text;

/*!
 @brief Obtains an instance of <code>MonthDay</code> from a text string using a specific formatter.
 <p>
  The text is parsed using the formatter, returning a month-day.
 @param text the text to parse, not null
 @param formatter the formatter to use, not null
 @return the parsed month-day, not null
 @throw DateTimeParseExceptionif the text cannot be parsed
 */
+ (JavaTimeMonthDay *)parseWithJavaLangCharSequence:(id<JavaLangCharSequence>)text
                withJavaTimeFormatDateTimeFormatter:(JavaTimeFormatDateTimeFormatter *)formatter;

/*!
 @brief Queries this month-day using the specified query.
 <p>
  This queries this month-day using the specified query strategy object.
  The <code>TemporalQuery</code> object defines the logic to be used to
  obtain the result. Read the documentation of the query to understand
  what the result of this method will be. 
 <p>
  The result of this method is obtained by invoking the 
 <code>TemporalQuery.queryFrom(TemporalAccessor)</code> method on the
  specified query passing <code>this</code> as the argument.
 @param query the query to invoke, not null
 @return the query result, null may be returned (defined by the query)
 @throw DateTimeExceptionif unable to query (defined by the query)
 @throw ArithmeticExceptionif numeric overflow occurs (defined by the query)
 */
- (id)queryWithJavaTimeTemporalTemporalQuery:(id<JavaTimeTemporalTemporalQuery>)query;

/*!
 @brief Gets the range of valid values for the specified field.
 <p>
  The range object expresses the minimum and maximum valid values for a field.
  This month-day is used to enhance the accuracy of the returned range.
  If it is not possible to return the range, because the field is not supported
  or for some other reason, an exception is thrown. 
 <p>
  If the field is a <code>ChronoField</code> then the query is implemented here.
  The <code>supported fields</code> will return
  appropriate range instances.
  All other <code>ChronoField</code> instances will throw an <code>UnsupportedTemporalTypeException</code>.
  <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.rangeRefinedBy(TemporalAccessor)</code>
  passing <code>this</code> as the argument.
  Whether the range can be obtained is determined by the field.
 @param field the field to query the range for, not null
 @return the range of valid values for the field, not null
 @throw DateTimeExceptionif the range for the field cannot be obtained
 @throw UnsupportedTemporalTypeExceptionif the field is not supported
 */
- (JavaTimeTemporalValueRange *)rangeWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field;

/*!
 @brief Outputs this month-day as a <code>String</code>, such as <code>--12-03</code>.
 <p>
  The output will be in the format <code>--MM-dd</code>:
 @return a string representation of this month-day, not null
 */
- (NSString *)description;

/*!
 @brief Returns a copy of this <code>MonthDay</code> with the month-of-year altered.
 <p>
  This returns a month-day with the specified month.
  If the day-of-month is invalid for the specified month, the day will
  be adjusted to the last valid day-of-month. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param month the month-of-year to set in the returned month-day, not null
 @return a <code>MonthDay</code> based on this month-day with the requested month, not null
 */
- (JavaTimeMonthDay *)withWithJavaTimeMonth:(JavaTimeMonth *)month;

/*!
 @brief Returns a copy of this <code>MonthDay</code> with the day-of-month altered.
 <p>
  This returns a month-day with the specified day-of-month.
  If the day-of-month is invalid for the month, an exception is thrown. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param dayOfMonth the day-of-month to set in the return month-day, from 1 to 31
 @return a <code>MonthDay</code> based on this month-day with the requested day, not null
 @throw DateTimeExceptionif the day-of-month value is invalid,
   or if the day-of-month is invalid for the month
 */
- (JavaTimeMonthDay *)withDayOfMonthWithInt:(jint)dayOfMonth;

/*!
 @brief Returns a copy of this <code>MonthDay</code> with the month-of-year altered.
 <p>
  This returns a month-day with the specified month.
  If the day-of-month is invalid for the specified month, the day will
  be adjusted to the last valid day-of-month. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param month the month-of-year to set in the returned month-day, from 1 (January) to 12 (December)
 @return a <code>MonthDay</code> based on this month-day with the requested month, not null
 @throw DateTimeExceptionif the month-of-year value is invalid
 */
- (JavaTimeMonthDay *)withMonthWithInt:(jint)month;

#pragma mark Package-Private

+ (JavaTimeMonthDay *)readExternalWithJavaIoDataInput:(id<JavaIoDataInput>)inArg;

- (void)writeExternalWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(JavaTimeMonthDay)

FOUNDATION_EXPORT JavaTimeMonthDay *JavaTimeMonthDay_now(void);

FOUNDATION_EXPORT JavaTimeMonthDay *JavaTimeMonthDay_nowWithJavaTimeZoneId_(JavaTimeZoneId *zone);

FOUNDATION_EXPORT JavaTimeMonthDay *JavaTimeMonthDay_nowWithJavaTimeClock_(JavaTimeClock *clock);

FOUNDATION_EXPORT JavaTimeMonthDay *JavaTimeMonthDay_ofWithJavaTimeMonth_withInt_(JavaTimeMonth *month, jint dayOfMonth);

FOUNDATION_EXPORT JavaTimeMonthDay *JavaTimeMonthDay_ofWithInt_withInt_(jint month, jint dayOfMonth);

FOUNDATION_EXPORT JavaTimeMonthDay *JavaTimeMonthDay_fromWithJavaTimeTemporalTemporalAccessor_(id<JavaTimeTemporalTemporalAccessor> temporal);

FOUNDATION_EXPORT JavaTimeMonthDay *JavaTimeMonthDay_parseWithJavaLangCharSequence_(id<JavaLangCharSequence> text);

FOUNDATION_EXPORT JavaTimeMonthDay *JavaTimeMonthDay_parseWithJavaLangCharSequence_withJavaTimeFormatDateTimeFormatter_(id<JavaLangCharSequence> text, JavaTimeFormatDateTimeFormatter *formatter);

FOUNDATION_EXPORT JavaTimeMonthDay *JavaTimeMonthDay_readExternalWithJavaIoDataInput_(id<JavaIoDataInput> inArg);

J2OBJC_TYPE_LITERAL_HEADER(JavaTimeMonthDay)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaTimeMonthDay")
