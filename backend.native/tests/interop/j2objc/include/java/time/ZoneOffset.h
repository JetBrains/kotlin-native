//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/time/ZoneOffset.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaTimeZoneOffset")
#ifdef RESTRICT_JavaTimeZoneOffset
#define INCLUDE_ALL_JavaTimeZoneOffset 0
#else
#define INCLUDE_ALL_JavaTimeZoneOffset 1
#endif
#undef RESTRICT_JavaTimeZoneOffset

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaTimeZoneOffset_) && (INCLUDE_ALL_JavaTimeZoneOffset || defined(INCLUDE_JavaTimeZoneOffset))
#define JavaTimeZoneOffset_

#define RESTRICT_JavaTimeZoneId 1
#define INCLUDE_JavaTimeZoneId 1
#include "java/time/ZoneId.h"

#define RESTRICT_JavaTimeTemporalTemporalAccessor 1
#define INCLUDE_JavaTimeTemporalTemporalAccessor 1
#include "java/time/temporal/TemporalAccessor.h"

#define RESTRICT_JavaTimeTemporalTemporalAdjuster 1
#define INCLUDE_JavaTimeTemporalTemporalAdjuster 1
#include "java/time/temporal/TemporalAdjuster.h"

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "java/lang/Comparable.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class JavaTimeTemporalValueRange;
@class JavaTimeZoneZoneRules;
@protocol JavaIoDataInput;
@protocol JavaIoDataOutput;
@protocol JavaTimeTemporalTemporal;
@protocol JavaTimeTemporalTemporalField;
@protocol JavaTimeTemporalTemporalQuery;

/*!
 @brief A time-zone offset from Greenwich/UTC, such as <code>+02:00</code>.
 <p>
  A time-zone offset is the amount of time that a time-zone differs from Greenwich/UTC.
  This is usually a fixed number of hours and minutes. 
 <p>
  Different parts of the world have different time-zone offsets.
  The rules for how offsets vary by place and time of year are captured in the 
 <code>ZoneId</code> class. 
 <p>
  For example, Paris is one hour ahead of Greenwich/UTC in winter and two hours
  ahead in summer. The <code>ZoneId</code> instance for Paris will reference two 
 <code>ZoneOffset</code> instances - a <code>+01:00</code> instance for winter,
  and a <code>+02:00</code> instance for summer. 
 <p>
  In 2008, time-zone offsets around the world extended from -12:00 to +14:00.
  To prevent any problems with that range being extended, yet still provide
  validation, the range of offsets is restricted to -18:00 to 18:00 inclusive. 
 <p>
  This class is designed for use with the ISO calendar system.
  The fields of hours, minutes and seconds make assumptions that are valid for the
  standard ISO definitions of those fields. This class may be used with other
  calendar systems providing the definition of the time fields matches those
  of the ISO calendar system. 
 <p>
  Instances of <code>ZoneOffset</code> must be compared using <code>equals</code>.
  Implementations may choose to cache certain common offsets, however
  applications must not rely on such caching.
 @since 1.8
 */
@interface JavaTimeZoneOffset : JavaTimeZoneId < JavaTimeTemporalTemporalAccessor, JavaTimeTemporalTemporalAdjuster, JavaLangComparable, JavaIoSerializable >
@property (readonly, class, strong) JavaTimeZoneOffset *UTC NS_SWIFT_NAME(UTC);
@property (readonly, class, strong) JavaTimeZoneOffset *MIN NS_SWIFT_NAME(MIN);
@property (readonly, class, strong) JavaTimeZoneOffset *MAX NS_SWIFT_NAME(MAX);

+ (JavaTimeZoneOffset *)UTC;

+ (JavaTimeZoneOffset *)MIN;

+ (JavaTimeZoneOffset *)MAX;

#pragma mark Public

/*!
 @brief Adjusts the specified temporal object to have the same offset as this object.
 <p>
  This returns a temporal object of the same observable type as the input
  with the offset changed to be the same as this. 
 <p>
  The adjustment is equivalent to using <code>Temporal.with(TemporalField, long)</code>
  passing <code>ChronoField.OFFSET_SECONDS</code> as the field. 
 <p>
  In most cases, it is clearer to reverse the calling pattern by using 
 <code>Temporal.with(TemporalAdjuster)</code>:
  @code

    // these two lines are equivalent, but the second approach is recommended
    temporal = thisOffset.adjustInto(temporal);
    temporal = temporal.with(thisOffset); 
  
@endcode
  <p>
  This instance is immutable and unaffected by this method call.
 @param temporal the target object to be adjusted, not null
 @return the adjusted object, not null
 @throw DateTimeExceptionif unable to make the adjustment
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (id<JavaTimeTemporalTemporal>)adjustIntoWithJavaTimeTemporalTemporal:(id<JavaTimeTemporalTemporal>)temporal;

/*!
 @brief Compares this offset to another offset in descending order.
 <p>
  The offsets are compared in the order that they occur for the same time
  of day around the world. Thus, an offset of <code>+10:00</code> comes before an
  offset of <code>+09:00</code> and so on down to <code>-18:00</code>.
  <p>
  The comparison is "consistent with equals", as defined by <code>Comparable</code>.
 @param other the other date to compare to, not null
 @return the comparator value, negative if less, postive if greater
 @throw NullPointerExceptionif <code>other</code> is null
 */
- (jint)compareToWithId:(JavaTimeZoneOffset *)other;

/*!
 @brief Checks if this offset is equal to another offset.
 <p>
  The comparison is based on the amount of the offset in seconds.
  This is equivalent to a comparison by ID.
 @param obj the object to check, null returns false
 @return true if this is equal to the other offset
 */
- (jboolean)isEqual:(id)obj;

/*!
 @brief Obtains an instance of <code>ZoneOffset</code> from a temporal object.
 <p>
  This obtains an offset based on the specified temporal.
  A <code>TemporalAccessor</code> represents an arbitrary set of date and time information,
  which this factory converts to an instance of <code>ZoneOffset</code>.
  <p>
  A <code>TemporalAccessor</code> represents some form of date and time information.
  This factory converts the arbitrary temporal object to an instance of <code>ZoneOffset</code>.
  <p>
  The conversion uses the <code>TemporalQueries.offset()</code> query, which relies
  on extracting the <code>OFFSET_SECONDS</code> field. 
 <p>
  This method matches the signature of the functional interface <code>TemporalQuery</code>
  allowing it to be used as a query via method reference, <code>ZoneOffset::from</code>.
 @param temporal the temporal object to convert, not null
 @return the zone-offset, not null
 @throw DateTimeExceptionif unable to convert to an <code>ZoneOffset</code>
 */
+ (JavaTimeZoneOffset *)fromWithJavaTimeTemporalTemporalAccessor:(id<JavaTimeTemporalTemporalAccessor>)temporal;

/*!
 @brief Gets the value of the specified field from this offset as an <code>int</code>.
 <p>
  This queries this offset for the value of the specified field.
  The returned value will always be within the valid range of values for the field.
  If it is not possible to return the value, because the field is not supported
  or for some other reason, an exception is thrown. 
 <p>
  If the field is a <code>ChronoField</code> then the query is implemented here.
  The <code>OFFSET_SECONDS</code> field returns the value of the offset.
  All other <code>ChronoField</code> instances will throw an <code>UnsupportedTemporalTypeException</code>.
  <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.getFrom(TemporalAccessor)</code>
  passing <code>this</code> as the argument. Whether the value can be obtained,
  and what the value represents, is determined by the field.
 @param field the field to get, not null
 @return the value for the field
 @throw DateTimeExceptionif a value for the field cannot be obtained or
          the value is outside the range of valid values for the field
 @throw UnsupportedTemporalTypeExceptionif the field is not supported or
          the range of values exceeds an <code>int</code>
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (jint)getWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field;

/*!
 @brief Gets the normalized zone offset ID.
 <p>
  The ID is minor variation to the standard ISO-8601 formatted string
  for the offset. There are three formats: 
 <ul>
  <li><code>Z</code> - for UTC (ISO-8601) 
 <li><code>+hh:mm</code> or <code>-hh:mm</code> - if the seconds are zero (ISO-8601) 
 <li><code>+hh:mm:ss</code> or <code>-hh:mm:ss</code> - if the seconds are non-zero (not ISO-8601) 
 </ul>
 @return the zone offset ID, not null
 */
- (NSString *)getId;

/*!
 @brief Gets the value of the specified field from this offset as a <code>long</code>.
 <p>
  This queries this offset for the value of the specified field.
  If it is not possible to return the value, because the field is not supported
  or for some other reason, an exception is thrown. 
 <p>
  If the field is a <code>ChronoField</code> then the query is implemented here.
  The <code>OFFSET_SECONDS</code> field returns the value of the offset.
  All other <code>ChronoField</code> instances will throw an <code>UnsupportedTemporalTypeException</code>.
  <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.getFrom(TemporalAccessor)</code>
  passing <code>this</code> as the argument. Whether the value can be obtained,
  and what the value represents, is determined by the field.
 @param field the field to get, not null
 @return the value for the field
 @throw DateTimeExceptionif a value for the field cannot be obtained
 @throw UnsupportedTemporalTypeExceptionif the field is not supported
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (jlong)getLongWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field;

/*!
 @brief Gets the associated time-zone rules.
 <p>
  The rules will always return this offset when queried.
  The implementation class is immutable, thread-safe and serializable.
 @return the rules, not null
 */
- (JavaTimeZoneZoneRules *)getRules;

/*!
 @brief Gets the total zone offset in seconds.
 <p>
  This is the primary way to access the offset amount.
  It returns the total of the hours, minutes and seconds fields as a
  single offset that can be added to a time.
 @return the total zone offset amount in seconds
 */
- (jint)getTotalSeconds;

/*!
 @brief A hash code for this offset.
 @return a suitable hash code
 */
- (NSUInteger)hash;

/*!
 @brief Checks if the specified field is supported.
 <p>
  This checks if this offset can be queried for the specified field.
  If false, then calling the <code>range</code> and 
 <code>get</code> methods will throw an exception. 
 <p>
  If the field is a <code>ChronoField</code> then the query is implemented here.
  The <code>OFFSET_SECONDS</code> field returns true.
  All other <code>ChronoField</code> instances will return false. 
 <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.isSupportedBy(TemporalAccessor)</code>
  passing <code>this</code> as the argument.
  Whether the field is supported is determined by the field.
 @param field the field to check, null returns false
 @return true if the field is supported on this offset, false if not
 */
- (jboolean)isSupportedWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field;

/*!
 @brief Obtains an instance of <code>ZoneOffset</code> using the ID.
 <p>
  This method parses the string ID of a <code>ZoneOffset</code> to
  return an instance. The parsing accepts all the formats generated by 
 <code>getId()</code>, plus some additional formats: 
 <ul>
  <li><code>Z</code> - for UTC 
 <li><code>+h</code>
  <li><code>+hh</code>
  <li><code>+hh:mm</code>
  <li><code>-hh:mm</code>
  <li><code>+hhmm</code>
  <li><code>-hhmm</code>
  <li><code>+hh:mm:ss</code>
  <li><code>-hh:mm:ss</code>
  <li><code>+hhmmss</code>
  <li><code>-hhmmss</code>
  </ul>
  Note that &plusmn; means either the plus or minus symbol. 
 <p>
  The ID of the returned offset will be normalized to one of the formats
  described by <code>getId()</code>.
  <p>
  The maximum supported range is from +18:00 to -18:00 inclusive.
 @param offsetId the offset ID, not null
 @return the zone-offset, not null
 @throw DateTimeExceptionif the offset ID is invalid
 */
+ (JavaTimeZoneOffset *)ofWithNSString:(NSString *)offsetId;

/*!
 @brief Obtains an instance of <code>ZoneOffset</code> using an offset in hours.
 @param hours the time-zone offset in hours, from -18 to +18
 @return the zone-offset, not null
 @throw DateTimeExceptionif the offset is not in the required range
 */
+ (JavaTimeZoneOffset *)ofHoursWithInt:(jint)hours;

/*!
 @brief Obtains an instance of <code>ZoneOffset</code> using an offset in
  hours and minutes.
 <p>
  The sign of the hours and minutes components must match.
  Thus, if the hours is negative, the minutes must be negative or zero.
  If the hours is zero, the minutes may be positive, negative or zero.
 @param hours the time-zone offset in hours, from -18 to +18
 @param minutes the time-zone offset in minutes, from 0 to  &plusmn; 59, sign matches hours
 @return the zone-offset, not null
 @throw DateTimeExceptionif the offset is not in the required range
 */
+ (JavaTimeZoneOffset *)ofHoursMinutesWithInt:(jint)hours
                                      withInt:(jint)minutes;

/*!
 @brief Obtains an instance of <code>ZoneOffset</code> using an offset in
  hours, minutes and seconds.
 <p>
  The sign of the hours, minutes and seconds components must match.
  Thus, if the hours is negative, the minutes and seconds must be negative or zero.
 @param hours the time-zone offset in hours, from -18 to +18
 @param minutes the time-zone offset in minutes, from 0 to  &plusmn; 59, sign matches hours and seconds
 @param seconds the time-zone offset in seconds, from 0 to  &plusmn; 59, sign matches hours and minutes
 @return the zone-offset, not null
 @throw DateTimeExceptionif the offset is not in the required range
 */
+ (JavaTimeZoneOffset *)ofHoursMinutesSecondsWithInt:(jint)hours
                                             withInt:(jint)minutes
                                             withInt:(jint)seconds;

/*!
 @brief Obtains an instance of <code>ZoneOffset</code> specifying the total offset in seconds
 <p>
  The offset must be in the range <code>-18:00</code> to <code>+18:00</code>, which corresponds to -64800 to +64800.
 @param totalSeconds the total time-zone offset in seconds, from -64800 to +64800
 @return the ZoneOffset, not null
 @throw DateTimeExceptionif the offset is not in the required range
 */
+ (JavaTimeZoneOffset *)ofTotalSecondsWithInt:(jint)totalSeconds;

/*!
 @brief Queries this offset using the specified query.
 <p>
  This queries this offset using the specified query strategy object.
  The <code>TemporalQuery</code> object defines the logic to be used to
  obtain the result. Read the documentation of the query to understand
  what the result of this method will be. 
 <p>
  The result of this method is obtained by invoking the 
 <code>TemporalQuery.queryFrom(TemporalAccessor)</code> method on the
  specified query passing <code>this</code> as the argument.
 @param query the query to invoke, not null
 @return the query result, null may be returned (defined by the query)
 @throw DateTimeExceptionif unable to query (defined by the query)
 @throw ArithmeticExceptionif numeric overflow occurs (defined by the query)
 */
- (id)queryWithJavaTimeTemporalTemporalQuery:(id<JavaTimeTemporalTemporalQuery>)query;

/*!
 @brief Gets the range of valid values for the specified field.
 <p>
  The range object expresses the minimum and maximum valid values for a field.
  This offset is used to enhance the accuracy of the returned range.
  If it is not possible to return the range, because the field is not supported
  or for some other reason, an exception is thrown. 
 <p>
  If the field is a <code>ChronoField</code> then the query is implemented here.
  The <code>supported fields</code> will return
  appropriate range instances.
  All other <code>ChronoField</code> instances will throw an <code>UnsupportedTemporalTypeException</code>.
  <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.rangeRefinedBy(TemporalAccessor)</code>
  passing <code>this</code> as the argument.
  Whether the range can be obtained is determined by the field.
 @param field the field to query the range for, not null
 @return the range of valid values for the field, not null
 @throw DateTimeExceptionif the range for the field cannot be obtained
 @throw UnsupportedTemporalTypeExceptionif the field is not supported
 */
- (JavaTimeTemporalValueRange *)rangeWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field;

/*!
 @brief Outputs this offset as a <code>String</code>, using the normalized ID.
 @return a string representation of this offset, not null
 */
- (NSString *)description;

#pragma mark Package-Private

+ (JavaTimeZoneOffset *)readExternalWithJavaIoDataInput:(id<JavaIoDataInput>)inArg;

- (void)writeWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg;

- (void)writeExternalWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(JavaTimeZoneOffset)

/*!
 @brief The time-zone offset for UTC, with an ID of 'Z'.
 */
inline JavaTimeZoneOffset *JavaTimeZoneOffset_get_UTC(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaTimeZoneOffset *JavaTimeZoneOffset_UTC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaTimeZoneOffset, UTC, JavaTimeZoneOffset *)

/*!
 @brief Constant for the maximum supported offset.
 */
inline JavaTimeZoneOffset *JavaTimeZoneOffset_get_MIN(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaTimeZoneOffset *JavaTimeZoneOffset_MIN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaTimeZoneOffset, MIN, JavaTimeZoneOffset *)

/*!
 @brief Constant for the maximum supported offset.
 */
inline JavaTimeZoneOffset *JavaTimeZoneOffset_get_MAX(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaTimeZoneOffset *JavaTimeZoneOffset_MAX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaTimeZoneOffset, MAX, JavaTimeZoneOffset *)

FOUNDATION_EXPORT JavaTimeZoneOffset *JavaTimeZoneOffset_ofWithNSString_(NSString *offsetId);

FOUNDATION_EXPORT JavaTimeZoneOffset *JavaTimeZoneOffset_ofHoursWithInt_(jint hours);

FOUNDATION_EXPORT JavaTimeZoneOffset *JavaTimeZoneOffset_ofHoursMinutesWithInt_withInt_(jint hours, jint minutes);

FOUNDATION_EXPORT JavaTimeZoneOffset *JavaTimeZoneOffset_ofHoursMinutesSecondsWithInt_withInt_withInt_(jint hours, jint minutes, jint seconds);

FOUNDATION_EXPORT JavaTimeZoneOffset *JavaTimeZoneOffset_fromWithJavaTimeTemporalTemporalAccessor_(id<JavaTimeTemporalTemporalAccessor> temporal);

FOUNDATION_EXPORT JavaTimeZoneOffset *JavaTimeZoneOffset_ofTotalSecondsWithInt_(jint totalSeconds);

FOUNDATION_EXPORT JavaTimeZoneOffset *JavaTimeZoneOffset_readExternalWithJavaIoDataInput_(id<JavaIoDataInput> inArg);

J2OBJC_TYPE_LITERAL_HEADER(JavaTimeZoneOffset)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaTimeZoneOffset")
