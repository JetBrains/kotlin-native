//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/time/temporal/Temporal.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaTimeTemporalTemporal")
#ifdef RESTRICT_JavaTimeTemporalTemporal
#define INCLUDE_ALL_JavaTimeTemporalTemporal 0
#else
#define INCLUDE_ALL_JavaTimeTemporalTemporal 1
#endif
#undef RESTRICT_JavaTimeTemporalTemporal

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaTimeTemporalTemporal_) && (INCLUDE_ALL_JavaTimeTemporalTemporal || defined(INCLUDE_JavaTimeTemporalTemporal))
#define JavaTimeTemporalTemporal_

#define RESTRICT_JavaTimeTemporalTemporalAccessor 1
#define INCLUDE_JavaTimeTemporalTemporalAccessor 1
#include "java/time/temporal/TemporalAccessor.h"

@protocol JavaTimeTemporalTemporalAdjuster;
@protocol JavaTimeTemporalTemporalAmount;
@protocol JavaTimeTemporalTemporalField;
@protocol JavaTimeTemporalTemporalUnit;

/*!
 @brief Framework-level interface defining read-write access to a temporal object,
  such as a date, time, offset or some combination of these.
 <p>
  This is the base interface type for date, time and offset objects that
  are complete enough to be manipulated using plus and minus.
  It is implemented by those classes that can provide and manipulate information
  as fields or queries.
  See <code>TemporalAccessor</code> for the read-only version of this interface. 
 <p>
  Most date and time information can be represented as a number.
  These are modeled using <code>TemporalField</code> with the number held using
  a <code>long</code> to handle large values. Year, month and day-of-month are
  simple examples of fields, but they also include instant and offsets.
  See <code>ChronoField</code> for the standard set of fields. 
 <p>
  Two pieces of date/time information cannot be represented by numbers,
  the chronology and the 
 time-zone.
  These can be accessed via <code>queries</code> using
  the static methods defined on <code>TemporalQuery</code>.
  <p>
  This interface is a framework-level interface that should not be widely
  used in application code. Instead, applications should create and pass
  around instances of concrete types, such as <code>LocalDate</code>.
  There are many reasons for this, part of which is that implementations
  of this interface may be in calendar systems other than ISO.
  See <code>java.time.chrono.ChronoLocalDate</code> for a fuller discussion of the issues. 
 <h3>When to implement</h3>
  <p>
  A class should implement this interface if it meets three criteria: 
 <ul>
  <li>it provides access to date/time/offset information, as per <code>TemporalAccessor</code>
  <li>the set of fields are contiguous from the largest to the smallest 
 <li>the set of fields are complete, such that no other field is needed to define the
   valid range of values for the fields that are represented 
 </ul>
  <p>
  Four examples make this clear: 
 <ul>
  <li><code>LocalDate</code> implements this interface as it represents a set of fields
   that are contiguous from days to forever and require no external information to determine
   the validity of each date. It is therefore able to implement plus/minus correctly. 
 <li><code>LocalTime</code> implements this interface as it represents a set of fields
   that are contiguous from nanos to within days and require no external information to determine
   validity. It is able to implement plus/minus correctly, by wrapping around the day. 
 <li><code>MonthDay</code>, the combination of month-of-year and day-of-month, does not implement
   this interface.  While the combination is contiguous, from days to months within years,
   the combination does not have sufficient information to define the valid range of values
   for day-of-month.  As such, it is unable to implement plus/minus correctly. 
 <li>The combination day-of-week and day-of-month ("Friday the 13th") should not implement
   this interface. It does not represent a contiguous set of fields, as days to weeks overlaps
   days to months. 
 </ul>
 @since 1.8
 */
@protocol JavaTimeTemporalTemporal < JavaTimeTemporalTemporalAccessor, JavaObject >

/*!
 @brief Checks if the specified unit is supported.
 <p>
  This checks if the specified unit can be added to, or subtracted from, this date-time.
  If false, then calling the <code>plus(long, TemporalUnit)</code> and 
 <code>minus</code> methods will throw an exception.
 @param unit the unit to check, null returns false
 @return true if the unit can be added/subtracted, false if not
 */
- (jboolean)isSupportedWithJavaTimeTemporalTemporalUnit:(id<JavaTimeTemporalTemporalUnit>)unit;

/*!
 @brief Returns an adjusted object of the same type as this object with the adjustment made.
 <p>
  This adjusts this date-time according to the rules of the specified adjuster.
  A simple adjuster might simply set the one of the fields, such as the year field.
  A more complex adjuster might set the date to the last day of the month.
  A selection of common adjustments is provided in 
 <code>TemporalAdjusters</code>.
  These include finding the "last day of the month" and "next Wednesday".
  The adjuster is responsible for handling special cases, such as the varying
  lengths of month and leap years. 
 <p>
  Some example code indicating how and why this method is used: 
 @code

   date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster
   date = date.with(lastDayOfMonth());  // static import from Adjusters
   date = date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek 
  
@endcode
 @param adjuster the adjuster to use, not null
 @return an object of the same type with the specified adjustment made, not null
 @throw DateTimeExceptionif unable to make the adjustment
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (id<JavaTimeTemporalTemporal>)withWithJavaTimeTemporalTemporalAdjuster:(id<JavaTimeTemporalTemporalAdjuster>)adjuster;

/*!
 @brief Returns an object of the same type as this object with the specified field altered.
 <p>
  This returns a new object based on this one with the value for the specified field changed.
  For example, on a <code>LocalDate</code>, this could be used to set the year, month or day-of-month.
  The returned object will have the same observable type as this object. 
 <p>
  In some cases, changing a field is not fully defined. For example, if the target object is
  a date representing the 31st January, then changing the month to February would be unclear.
  In cases like this, the field is responsible for resolving the result. Typically it will choose
  the previous valid date, which would be the last valid day of February in this example.
 @param field the field to set in the result, not null
 @param newValue the new value of the field in the result
 @return an object of the same type with the specified field set, not null
 @throw DateTimeExceptionif the field cannot be set
 @throw UnsupportedTemporalTypeExceptionif the field is not supported
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (id<JavaTimeTemporalTemporal>)withWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field
                                                             withLong:(jlong)newValue;

/*!
 @brief Returns an object of the same type as this object with an amount added.
 <p>
  This adjusts this temporal, adding according to the rules of the specified amount.
  The amount is typically a <code>java.time.Period</code> but may be any other type implementing
  the <code>TemporalAmount</code> interface, such as <code>java.time.Duration</code>.
  <p>
  Some example code indicating how and why this method is used: 
 @code

   date = date.plus(period);                // add a Period instance
   date = date.plus(duration);              // add a Duration instance
   date = date.plus(workingDays(6));        // example user-written workingDays method 
  
@endcode
  <p>
  Note that calling <code>plus</code> followed by <code>minus</code> is not guaranteed to
  return the same date-time.
 @param amount the amount to add, not null
 @return an object of the same type with the specified adjustment made, not null
 @throw DateTimeExceptionif the addition cannot be made
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (id<JavaTimeTemporalTemporal>)plusWithJavaTimeTemporalTemporalAmount:(id<JavaTimeTemporalTemporalAmount>)amount;

/*!
 @brief Returns an object of the same type as this object with the specified period added.
 <p>
  This method returns a new object based on this one with the specified period added.
  For example, on a <code>LocalDate</code>, this could be used to add a number of years, months or days.
  The returned object will have the same observable type as this object. 
 <p>
  In some cases, changing a field is not fully defined. For example, if the target object is
  a date representing the 31st January, then adding one month would be unclear.
  In cases like this, the field is responsible for resolving the result. Typically it will choose
  the previous valid date, which would be the last valid day of February in this example.
 @param amountToAdd the amount of the specified unit to add, may be negative
 @param unit the unit of the amount to add, not null
 @return an object of the same type with the specified period added, not null
 @throw DateTimeExceptionif the unit cannot be added
 @throw UnsupportedTemporalTypeExceptionif the unit is not supported
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (id<JavaTimeTemporalTemporal>)plusWithLong:(jlong)amountToAdd
            withJavaTimeTemporalTemporalUnit:(id<JavaTimeTemporalTemporalUnit>)unit;

/*!
 @brief Returns an object of the same type as this object with an amount subtracted.
 <p>
  This adjusts this temporal, subtracting according to the rules of the specified amount.
  The amount is typically a <code>java.time.Period</code> but may be any other type implementing
  the <code>TemporalAmount</code> interface, such as <code>java.time.Duration</code>.
  <p>
  Some example code indicating how and why this method is used: 
 @code

   date = date.minus(period);               // subtract a Period instance
   date = date.minus(duration);             // subtract a Duration instance
   date = date.minus(workingDays(6));       // example user-written workingDays method 
  
@endcode
  <p>
  Note that calling <code>plus</code> followed by <code>minus</code> is not guaranteed to
  return the same date-time.
 @param amount the amount to subtract, not null
 @return an object of the same type with the specified adjustment made, not null
 @throw DateTimeExceptionif the subtraction cannot be made
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (id<JavaTimeTemporalTemporal>)minusWithJavaTimeTemporalTemporalAmount:(id<JavaTimeTemporalTemporalAmount>)amount;

/*!
 @brief Returns an object of the same type as this object with the specified period subtracted.
 <p>
  This method returns a new object based on this one with the specified period subtracted.
  For example, on a <code>LocalDate</code>, this could be used to subtract a number of years, months or days.
  The returned object will have the same observable type as this object. 
 <p>
  In some cases, changing a field is not fully defined. For example, if the target object is
  a date representing the 31st March, then subtracting one month would be unclear.
  In cases like this, the field is responsible for resolving the result. Typically it will choose
  the previous valid date, which would be the last valid day of February in this example.
 @param amountToSubtract the amount of the specified unit to subtract, may be negative
 @param unit the unit of the amount to subtract, not null
 @return an object of the same type with the specified period subtracted, not null
 @throw DateTimeExceptionif the unit cannot be subtracted
 @throw UnsupportedTemporalTypeExceptionif the unit is not supported
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (id<JavaTimeTemporalTemporal>)minusWithLong:(jlong)amountToSubtract
             withJavaTimeTemporalTemporalUnit:(id<JavaTimeTemporalTemporalUnit>)unit;

/*!
 @brief Calculates the amount of time until another temporal in terms of the specified unit.
 <p>
  This calculates the amount of time between two temporal objects
  in terms of a single <code>TemporalUnit</code>.
  The start and end points are <code>this</code> and the specified temporal.
  The end point is converted to be of the same type as the start point if different.
  The result will be negative if the end is before the start.
  For example, the amount in hours between two temporal objects can be
  calculated using <code>startTime.until(endTime, HOURS)</code>.
  <p>
  The calculation returns a whole number, representing the number of
  complete units between the two temporals.
  For example, the amount in hours between the times 11:30 and 13:29
  will only be one hour as it is one minute short of two hours. 
 <p>
  There are two equivalent ways of using this method.
  The first is to invoke this method directly.
  The second is to use <code>TemporalUnit.between(Temporal, Temporal)</code>:
  @code

    // these two lines are equivalent
    temporal = start.until(end, unit);
    temporal = unit.between(start, end); 
  
@endcode
  The choice should be made based on which makes the code more readable. 
 <p>
  For example, this method allows the number of days between two dates to
  be calculated: 
 @code

   long daysBetween = start.until(end, DAYS);
   // or alternatively
   long daysBetween = DAYS.between(start, end); 
  
@endcode
 @param endExclusive the end temporal, exclusive, converted to be of the   same type as this object, not null
 @param unit the unit to measure the amount in, not null
 @return the amount of time between this temporal object and the specified one
   in terms of the unit; positive if the specified object is later than this one,
   negative if it is earlier than this one
 @throw DateTimeExceptionif the amount cannot be calculated, or the end
   temporal cannot be converted to the same type as this temporal
 @throw UnsupportedTemporalTypeExceptionif the unit is not supported
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (jlong)untilWithJavaTimeTemporalTemporal:(id<JavaTimeTemporalTemporal>)endExclusive
          withJavaTimeTemporalTemporalUnit:(id<JavaTimeTemporalTemporalUnit>)unit;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaTimeTemporalTemporal)

FOUNDATION_EXPORT id<JavaTimeTemporalTemporal> JavaTimeTemporalTemporal_withWithJavaTimeTemporalTemporalAdjuster_(id<JavaTimeTemporalTemporal> self, id<JavaTimeTemporalTemporalAdjuster> adjuster);

FOUNDATION_EXPORT id<JavaTimeTemporalTemporal> JavaTimeTemporalTemporal_plusWithJavaTimeTemporalTemporalAmount_(id<JavaTimeTemporalTemporal> self, id<JavaTimeTemporalTemporalAmount> amount);

FOUNDATION_EXPORT id<JavaTimeTemporalTemporal> JavaTimeTemporalTemporal_minusWithJavaTimeTemporalTemporalAmount_(id<JavaTimeTemporalTemporal> self, id<JavaTimeTemporalTemporalAmount> amount);

FOUNDATION_EXPORT id<JavaTimeTemporalTemporal> JavaTimeTemporalTemporal_minusWithLong_withJavaTimeTemporalTemporalUnit_(id<JavaTimeTemporalTemporal> self, jlong amountToSubtract, id<JavaTimeTemporalTemporalUnit> unit);

J2OBJC_TYPE_LITERAL_HEADER(JavaTimeTemporalTemporal)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaTimeTemporalTemporal")
