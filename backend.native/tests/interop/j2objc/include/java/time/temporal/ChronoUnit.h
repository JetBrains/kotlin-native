//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/time/temporal/ChronoUnit.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaTimeTemporalChronoUnit")
#ifdef RESTRICT_JavaTimeTemporalChronoUnit
#define INCLUDE_ALL_JavaTimeTemporalChronoUnit 0
#else
#define INCLUDE_ALL_JavaTimeTemporalChronoUnit 1
#endif
#undef RESTRICT_JavaTimeTemporalChronoUnit

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaTimeTemporalChronoUnit_) && (INCLUDE_ALL_JavaTimeTemporalChronoUnit || defined(INCLUDE_JavaTimeTemporalChronoUnit))
#define JavaTimeTemporalChronoUnit_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

#define RESTRICT_JavaTimeTemporalTemporalUnit 1
#define INCLUDE_JavaTimeTemporalTemporalUnit 1
#include "java/time/temporal/TemporalUnit.h"

@class IOSObjectArray;
@class JavaTimeDuration;
@protocol JavaTimeTemporalTemporal;

typedef NS_ENUM(NSUInteger, JavaTimeTemporalChronoUnit_Enum) {
  JavaTimeTemporalChronoUnit_Enum_NANOS = 0,
  JavaTimeTemporalChronoUnit_Enum_MICROS = 1,
  JavaTimeTemporalChronoUnit_Enum_MILLIS = 2,
  JavaTimeTemporalChronoUnit_Enum_SECONDS = 3,
  JavaTimeTemporalChronoUnit_Enum_MINUTES = 4,
  JavaTimeTemporalChronoUnit_Enum_HOURS = 5,
  JavaTimeTemporalChronoUnit_Enum_HALF_DAYS = 6,
  JavaTimeTemporalChronoUnit_Enum_DAYS = 7,
  JavaTimeTemporalChronoUnit_Enum_WEEKS = 8,
  JavaTimeTemporalChronoUnit_Enum_MONTHS = 9,
  JavaTimeTemporalChronoUnit_Enum_YEARS = 10,
  JavaTimeTemporalChronoUnit_Enum_DECADES = 11,
  JavaTimeTemporalChronoUnit_Enum_CENTURIES = 12,
  JavaTimeTemporalChronoUnit_Enum_MILLENNIA = 13,
  JavaTimeTemporalChronoUnit_Enum_ERAS = 14,
  JavaTimeTemporalChronoUnit_Enum_FOREVER = 15,
};

/*!
 @brief A standard set of date periods units.
 <p>
  This set of units provide unit-based access to manipulate a date, time or date-time.
  The standard set of units can be extended by implementing <code>TemporalUnit</code>.
  <p>
  These units are intended to be applicable in multiple calendar systems.
  For example, most non-ISO calendar systems define units of years, months and days,
  just with slightly different rules.
  The documentation of each unit explains how it operates.
 @since 1.8
 */
@interface JavaTimeTemporalChronoUnit : JavaLangEnum < JavaTimeTemporalTemporalUnit >

@property (readonly, class, nonnull) JavaTimeTemporalChronoUnit *NANOS NS_SWIFT_NAME(NANOS);
@property (readonly, class, nonnull) JavaTimeTemporalChronoUnit *MICROS NS_SWIFT_NAME(MICROS);
@property (readonly, class, nonnull) JavaTimeTemporalChronoUnit *MILLIS NS_SWIFT_NAME(MILLIS);
@property (readonly, class, nonnull) JavaTimeTemporalChronoUnit *SECONDS NS_SWIFT_NAME(SECONDS);
@property (readonly, class, nonnull) JavaTimeTemporalChronoUnit *MINUTES NS_SWIFT_NAME(MINUTES);
@property (readonly, class, nonnull) JavaTimeTemporalChronoUnit *HOURS NS_SWIFT_NAME(HOURS);
@property (readonly, class, nonnull) JavaTimeTemporalChronoUnit *HALF_DAYS NS_SWIFT_NAME(HALF_DAYS);
@property (readonly, class, nonnull) JavaTimeTemporalChronoUnit *DAYS NS_SWIFT_NAME(DAYS);
@property (readonly, class, nonnull) JavaTimeTemporalChronoUnit *WEEKS NS_SWIFT_NAME(WEEKS);
@property (readonly, class, nonnull) JavaTimeTemporalChronoUnit *MONTHS NS_SWIFT_NAME(MONTHS);
@property (readonly, class, nonnull) JavaTimeTemporalChronoUnit *YEARS NS_SWIFT_NAME(YEARS);
@property (readonly, class, nonnull) JavaTimeTemporalChronoUnit *DECADES NS_SWIFT_NAME(DECADES);
@property (readonly, class, nonnull) JavaTimeTemporalChronoUnit *CENTURIES NS_SWIFT_NAME(CENTURIES);
@property (readonly, class, nonnull) JavaTimeTemporalChronoUnit *MILLENNIA NS_SWIFT_NAME(MILLENNIA);
@property (readonly, class, nonnull) JavaTimeTemporalChronoUnit *ERAS NS_SWIFT_NAME(ERAS);
@property (readonly, class, nonnull) JavaTimeTemporalChronoUnit *FOREVER NS_SWIFT_NAME(FOREVER);
+ (JavaTimeTemporalChronoUnit * __nonnull)NANOS;

+ (JavaTimeTemporalChronoUnit * __nonnull)MICROS;

+ (JavaTimeTemporalChronoUnit * __nonnull)MILLIS;

+ (JavaTimeTemporalChronoUnit * __nonnull)SECONDS;

+ (JavaTimeTemporalChronoUnit * __nonnull)MINUTES;

+ (JavaTimeTemporalChronoUnit * __nonnull)HOURS;

+ (JavaTimeTemporalChronoUnit * __nonnull)HALF_DAYS;

+ (JavaTimeTemporalChronoUnit * __nonnull)DAYS;

+ (JavaTimeTemporalChronoUnit * __nonnull)WEEKS;

+ (JavaTimeTemporalChronoUnit * __nonnull)MONTHS;

+ (JavaTimeTemporalChronoUnit * __nonnull)YEARS;

+ (JavaTimeTemporalChronoUnit * __nonnull)DECADES;

+ (JavaTimeTemporalChronoUnit * __nonnull)CENTURIES;

+ (JavaTimeTemporalChronoUnit * __nonnull)MILLENNIA;

+ (JavaTimeTemporalChronoUnit * __nonnull)ERAS;

+ (JavaTimeTemporalChronoUnit * __nonnull)FOREVER;

#pragma mark Public

- (id<JavaTimeTemporalTemporal>)addToWithJavaTimeTemporalTemporal:(id<JavaTimeTemporalTemporal>)temporal
                                                         withLong:(jlong)amount;

- (jlong)betweenWithJavaTimeTemporalTemporal:(id<JavaTimeTemporalTemporal>)temporal1Inclusive
                withJavaTimeTemporalTemporal:(id<JavaTimeTemporalTemporal>)temporal2Exclusive;

/*!
 @brief Gets the estimated duration of this unit in the ISO calendar system.
 <p>
  All of the units in this class have an estimated duration.
  Days vary due to daylight saving time, while months have different lengths.
 @return the estimated duration of this unit, not null
 */
- (JavaTimeDuration *)getDuration;

/*!
 @brief Checks if this unit is a date unit.
 <p>
  All units from days to eras inclusive are date-based.
  Time-based units and <code>FOREVER</code> return false.
 @return true if a date unit, false if a time unit
 */
- (jboolean)isDateBased;

/*!
 @brief Checks if the duration of the unit is an estimate.
 <p>
  All time units in this class are considered to be accurate, while all date
  units in this class are considered to be estimated. 
 <p>
  This definition ignores leap seconds, but considers that Days vary due to
  daylight saving time and months have different lengths.
 @return true if the duration is estimated, false if accurate
 */
- (jboolean)isDurationEstimated;

- (jboolean)isSupportedByWithJavaTimeTemporalTemporal:(id<JavaTimeTemporalTemporal>)temporal;

/*!
 @brief Checks if this unit is a time unit.
 <p>
  All units from nanos to half-days inclusive are time-based.
  Date-based units and <code>FOREVER</code> return false.
 @return true if a time unit, false if a date unit
 */
- (jboolean)isTimeBased;

- (NSString *)description;

+ (JavaTimeTemporalChronoUnit *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (JavaTimeTemporalChronoUnit_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(JavaTimeTemporalChronoUnit)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT JavaTimeTemporalChronoUnit *JavaTimeTemporalChronoUnit_values_[];

/*!
 @brief Unit that represents the concept of a nanosecond, the smallest supported unit of time.
 For the ISO calendar system, it is equal to the 1,000,000,000th part of the second unit.
 */
inline JavaTimeTemporalChronoUnit *JavaTimeTemporalChronoUnit_get_NANOS(void);
J2OBJC_ENUM_CONSTANT(JavaTimeTemporalChronoUnit, NANOS)

/*!
 @brief Unit that represents the concept of a microsecond.
 For the ISO calendar system, it is equal to the 1,000,000th part of the second unit.
 */
inline JavaTimeTemporalChronoUnit *JavaTimeTemporalChronoUnit_get_MICROS(void);
J2OBJC_ENUM_CONSTANT(JavaTimeTemporalChronoUnit, MICROS)

/*!
 @brief Unit that represents the concept of a millisecond.
 For the ISO calendar system, it is equal to the 1000th part of the second unit.
 */
inline JavaTimeTemporalChronoUnit *JavaTimeTemporalChronoUnit_get_MILLIS(void);
J2OBJC_ENUM_CONSTANT(JavaTimeTemporalChronoUnit, MILLIS)

/*!
 @brief Unit that represents the concept of a second.
 For the ISO calendar system, it is equal to the second in the SI system
  of units, except around a leap-second.
 */
inline JavaTimeTemporalChronoUnit *JavaTimeTemporalChronoUnit_get_SECONDS(void);
J2OBJC_ENUM_CONSTANT(JavaTimeTemporalChronoUnit, SECONDS)

/*!
 @brief Unit that represents the concept of a minute.
 For the ISO calendar system, it is equal to 60 seconds.
 */
inline JavaTimeTemporalChronoUnit *JavaTimeTemporalChronoUnit_get_MINUTES(void);
J2OBJC_ENUM_CONSTANT(JavaTimeTemporalChronoUnit, MINUTES)

/*!
 @brief Unit that represents the concept of an hour.
 For the ISO calendar system, it is equal to 60 minutes.
 */
inline JavaTimeTemporalChronoUnit *JavaTimeTemporalChronoUnit_get_HOURS(void);
J2OBJC_ENUM_CONSTANT(JavaTimeTemporalChronoUnit, HOURS)

/*!
 @brief Unit that represents the concept of half a day, as used in AM/PM.
 For the ISO calendar system, it is equal to 12 hours.
 */
inline JavaTimeTemporalChronoUnit *JavaTimeTemporalChronoUnit_get_HALF_DAYS(void);
J2OBJC_ENUM_CONSTANT(JavaTimeTemporalChronoUnit, HALF_DAYS)

/*!
 @brief Unit that represents the concept of a day.
 For the ISO calendar system, it is the standard day from midnight to midnight.
  The estimated duration of a day is <code>24 Hours</code>.
  <p>
  When used with other calendar systems it must correspond to the day defined by
  the rising and setting of the Sun on Earth. It is not required that days begin
  at midnight - when converting between calendar systems, the date should be
  equivalent at midday.
 */
inline JavaTimeTemporalChronoUnit *JavaTimeTemporalChronoUnit_get_DAYS(void);
J2OBJC_ENUM_CONSTANT(JavaTimeTemporalChronoUnit, DAYS)

/*!
 @brief Unit that represents the concept of a week.
 For the ISO calendar system, it is equal to 7 days. 
 <p>
  When used with other calendar systems it must correspond to an integral number of days.
 */
inline JavaTimeTemporalChronoUnit *JavaTimeTemporalChronoUnit_get_WEEKS(void);
J2OBJC_ENUM_CONSTANT(JavaTimeTemporalChronoUnit, WEEKS)

/*!
 @brief Unit that represents the concept of a month.
 For the ISO calendar system, the length of the month varies by month-of-year.
  The estimated duration of a month is one twelfth of <code>365.2425 Days</code>.
  <p>
  When used with other calendar systems it must correspond to an integral number of days.
 */
inline JavaTimeTemporalChronoUnit *JavaTimeTemporalChronoUnit_get_MONTHS(void);
J2OBJC_ENUM_CONSTANT(JavaTimeTemporalChronoUnit, MONTHS)

/*!
 @brief Unit that represents the concept of a year.
 For the ISO calendar system, it is equal to 12 months.
  The estimated duration of a year is <code>365.2425 Days</code>.
  <p>
  When used with other calendar systems it must correspond to an integral number of days
  or months roughly equal to a year defined by the passage of the Earth around the Sun.
 */
inline JavaTimeTemporalChronoUnit *JavaTimeTemporalChronoUnit_get_YEARS(void);
J2OBJC_ENUM_CONSTANT(JavaTimeTemporalChronoUnit, YEARS)

/*!
 @brief Unit that represents the concept of a decade.
 For the ISO calendar system, it is equal to 10 years. 
 <p>
  When used with other calendar systems it must correspond to an integral number of days
  and is normally an integral number of years.
 */
inline JavaTimeTemporalChronoUnit *JavaTimeTemporalChronoUnit_get_DECADES(void);
J2OBJC_ENUM_CONSTANT(JavaTimeTemporalChronoUnit, DECADES)

/*!
 @brief Unit that represents the concept of a century.
 For the ISO calendar system, it is equal to 100 years. 
 <p>
  When used with other calendar systems it must correspond to an integral number of days
  and is normally an integral number of years.
 */
inline JavaTimeTemporalChronoUnit *JavaTimeTemporalChronoUnit_get_CENTURIES(void);
J2OBJC_ENUM_CONSTANT(JavaTimeTemporalChronoUnit, CENTURIES)

/*!
 @brief Unit that represents the concept of a millennium.
 For the ISO calendar system, it is equal to 1000 years. 
 <p>
  When used with other calendar systems it must correspond to an integral number of days
  and is normally an integral number of years.
 */
inline JavaTimeTemporalChronoUnit *JavaTimeTemporalChronoUnit_get_MILLENNIA(void);
J2OBJC_ENUM_CONSTANT(JavaTimeTemporalChronoUnit, MILLENNIA)

/*!
 @brief Unit that represents the concept of an era.
 The ISO calendar system doesn't have eras thus it is impossible to add
  an era to a date or date-time.
  The estimated duration of the era is artificially defined as <code>1,000,000,000 Years</code>.
  <p>
  When used with other calendar systems there are no restrictions on the unit.
 */
inline JavaTimeTemporalChronoUnit *JavaTimeTemporalChronoUnit_get_ERAS(void);
J2OBJC_ENUM_CONSTANT(JavaTimeTemporalChronoUnit, ERAS)

/*!
 @brief Artificial unit that represents the concept of forever.
 This is primarily used with <code>TemporalField</code> to represent unbounded fields
  such as the year or era.
  The estimated duration of the era is artificially defined as the largest duration
  supported by <code>Duration</code>.
 */
inline JavaTimeTemporalChronoUnit *JavaTimeTemporalChronoUnit_get_FOREVER(void);
J2OBJC_ENUM_CONSTANT(JavaTimeTemporalChronoUnit, FOREVER)

FOUNDATION_EXPORT IOSObjectArray *JavaTimeTemporalChronoUnit_values(void);

FOUNDATION_EXPORT JavaTimeTemporalChronoUnit *JavaTimeTemporalChronoUnit_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT JavaTimeTemporalChronoUnit *JavaTimeTemporalChronoUnit_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(JavaTimeTemporalChronoUnit)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaTimeTemporalChronoUnit")
