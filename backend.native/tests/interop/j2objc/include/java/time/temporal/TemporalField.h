//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/time/temporal/TemporalField.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaTimeTemporalTemporalField")
#ifdef RESTRICT_JavaTimeTemporalTemporalField
#define INCLUDE_ALL_JavaTimeTemporalTemporalField 0
#else
#define INCLUDE_ALL_JavaTimeTemporalTemporalField 1
#endif
#undef RESTRICT_JavaTimeTemporalTemporalField

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaTimeTemporalTemporalField_) && (INCLUDE_ALL_JavaTimeTemporalTemporalField || defined(INCLUDE_JavaTimeTemporalTemporalField))
#define JavaTimeTemporalTemporalField_

@class JavaTimeFormatResolverStyle;
@class JavaTimeTemporalValueRange;
@class JavaUtilLocale;
@protocol JavaTimeTemporalTemporal;
@protocol JavaTimeTemporalTemporalAccessor;
@protocol JavaTimeTemporalTemporalUnit;
@protocol JavaUtilMap;

/*!
 @brief A field of date-time, such as month-of-year or hour-of-minute.
 <p>
  Date and time is expressed using fields which partition the time-line into something
  meaningful for humans. Implementations of this interface represent those fields. 
 <p>
  The most commonly used units are defined in <code>ChronoField</code>.
  Further fields are supplied in <code>IsoFields</code>, <code>WeekFields</code> and <code>JulianFields</code>.
  Fields can also be written by application code by implementing this interface. 
 <p>
  The field works using double dispatch. Client code calls methods on a date-time like 
 <code>LocalDateTime</code> which check if the field is a <code>ChronoField</code>.
  If it is, then the date-time must handle it.
  Otherwise, the method call is re-dispatched to the matching method in this interface.
 @since 1.8
 */
@protocol JavaTimeTemporalTemporalField < JavaObject >

/*!
 @brief Gets the display name for the field in the requested locale.
 <p>
  If there is no display name for the locale then a suitable default must be returned. 
 <p>
  The default implementation must check the locale is not null
  and return <code>toString()</code>.
 @param locale the locale to use, not null
 @return the display name for the locale or a suitable default, not null
 */
- (NSString *)getDisplayNameWithJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Gets the unit that the field is measured in.
 <p>
  The unit of the field is the period that varies within the range.
  For example, in the field 'MonthOfYear', the unit is 'Months'.
  See also <code>getRangeUnit()</code>.
 @return the unit defining the base unit of the field, not null
 */
- (id<JavaTimeTemporalTemporalUnit>)getBaseUnit;

/*!
 @brief Gets the range that the field is bound by.
 <p>
  The range of the field is the period that the field varies within.
  For example, in the field 'MonthOfYear', the range is 'Years'.
  See also <code>getBaseUnit()</code>.
  <p>
  The range is never null. For example, the 'Year' field is shorthand for
  'YearOfForever'. It therefore has a unit of 'Years' and a range of 'Forever'.
 @return the unit defining the range of the field, not null
 */
- (id<JavaTimeTemporalTemporalUnit>)getRangeUnit;

/*!
 @brief Gets the range of valid values for the field.
 <p>
  All fields can be expressed as a <code>long</code> integer.
  This method returns an object that describes the valid range for that value.
  This method is generally only applicable to the ISO-8601 calendar system. 
 <p>
  Note that the result only describes the minimum and maximum valid values
  and it is important not to read too much into them. For example, there
  could be values within the range that are invalid for the field.
 @return the range of valid values for the field, not null
 */
- (JavaTimeTemporalValueRange *)range;

/*!
 @brief Checks if this field represents a component of a date.
 <p>
  A field is date-based if it can be derived from 
 <code>EPOCH_DAY</code>.
  Note that it is valid for both <code>isDateBased()</code> and <code>isTimeBased()</code>
  to return false, such as when representing a field like minute-of-week.
 @return true if this field is a component of a date
 */
- (jboolean)isDateBased;

/*!
 @brief Checks if this field represents a component of a time.
 <p>
  A field is time-based if it can be derived from 
 <code>NANO_OF_DAY</code>.
  Note that it is valid for both <code>isDateBased()</code> and <code>isTimeBased()</code>
  to return false, such as when representing a field like minute-of-week.
 @return true if this field is a component of a time
 */
- (jboolean)isTimeBased;

/*!
 @brief Checks if this field is supported by the temporal object.
 <p>
  This determines whether the temporal accessor supports this field.
  If this returns false, then the temporal cannot be queried for this field. 
 <p>
  There are two equivalent ways of using this method.
  The first is to invoke this method directly.
  The second is to use <code>TemporalAccessor.isSupported(TemporalField)</code>:
  @code

    // these two lines are equivalent, but the second approach is recommended
    temporal = thisField.isSupportedBy(temporal);
    temporal = temporal.isSupported(thisField); 
  
@endcode
  It is recommended to use the second approach, <code>isSupported(TemporalField)</code>,
  as it is a lot clearer to read in code. 
 <p>
  Implementations should determine whether they are supported using the fields
  available in <code>ChronoField</code>.
 @param temporal the temporal object to query, not null
 @return true if the date-time can be queried for this field, false if not
 */
- (jboolean)isSupportedByWithJavaTimeTemporalTemporalAccessor:(id<JavaTimeTemporalTemporalAccessor>)temporal;

/*!
 @brief Get the range of valid values for this field using the temporal object to
  refine the result.
 <p>
  This uses the temporal object to find the range of valid values for the field.
  This is similar to <code>range()</code>, however this method refines the result
  using the temporal. For example, if the field is <code>DAY_OF_MONTH</code> the 
 <code>range</code> method is not accurate as there are four possible month lengths,
  28, 29, 30 and 31 days. Using this method with a date allows the range to be
  accurate, returning just one of those four options. 
 <p>
  There are two equivalent ways of using this method.
  The first is to invoke this method directly.
  The second is to use <code>TemporalAccessor.range(TemporalField)</code>:
  @code

    // these two lines are equivalent, but the second approach is recommended
    temporal = thisField.rangeRefinedBy(temporal);
    temporal = temporal.range(thisField); 
  
@endcode
  It is recommended to use the second approach, <code>range(TemporalField)</code>,
  as it is a lot clearer to read in code. 
 <p>
  Implementations should perform any queries or calculations using the fields
  available in <code>ChronoField</code>.
  If the field is not supported an <code>UnsupportedTemporalTypeException</code> must be thrown.
 @param temporal the temporal object used to refine the result, not null
 @return the range of valid values for this field, not null
 @throw DateTimeExceptionif the range for the field cannot be obtained
 @throw UnsupportedTemporalTypeExceptionif the field is not supported by the temporal
 */
- (JavaTimeTemporalValueRange *)rangeRefinedByWithJavaTimeTemporalTemporalAccessor:(id<JavaTimeTemporalTemporalAccessor>)temporal;

/*!
 @brief Gets the value of this field from the specified temporal object.
 <p>
  This queries the temporal object for the value of this field. 
 <p>
  There are two equivalent ways of using this method.
  The first is to invoke this method directly.
  The second is to use <code>TemporalAccessor.getLong(TemporalField)</code>
  (or <code>TemporalAccessor.get(TemporalField)</code>):
  @code

    // these two lines are equivalent, but the second approach is recommended
    temporal = thisField.getFrom(temporal);
    temporal = temporal.getLong(thisField); 
  
@endcode
  It is recommended to use the second approach, <code>getLong(TemporalField)</code>,
  as it is a lot clearer to read in code. 
 <p>
  Implementations should perform any queries or calculations using the fields
  available in <code>ChronoField</code>.
  If the field is not supported an <code>UnsupportedTemporalTypeException</code> must be thrown.
 @param temporal the temporal object to query, not null
 @return the value of this field, not null
 @throw DateTimeExceptionif a value for the field cannot be obtained
 @throw UnsupportedTemporalTypeExceptionif the field is not supported by the temporal
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (jlong)getFromWithJavaTimeTemporalTemporalAccessor:(id<JavaTimeTemporalTemporalAccessor>)temporal;

/*!
 @brief Returns a copy of the specified temporal object with the value of this field set.
 <p>
  This returns a new temporal object based on the specified one with the value for
  this field changed. For example, on a <code>LocalDate</code>, this could be used to
  set the year, month or day-of-month.
  The returned object has the same observable type as the specified object. 
 <p>
  In some cases, changing a field is not fully defined. For example, if the target object is
  a date representing the 31st January, then changing the month to February would be unclear.
  In cases like this, the implementation is responsible for resolving the result.
  Typically it will choose the previous valid date, which would be the last valid
  day of February in this example. 
 <p>
  There are two equivalent ways of using this method.
  The first is to invoke this method directly.
  The second is to use <code>Temporal.with(TemporalField, long)</code>:
  @code

    // these two lines are equivalent, but the second approach is recommended
    temporal = thisField.adjustInto(temporal);
    temporal = temporal.with(thisField); 
  
@endcode
  It is recommended to use the second approach, <code>with(TemporalField)</code>,
  as it is a lot clearer to read in code. 
 <p>
  Implementations should perform any queries or calculations using the fields
  available in <code>ChronoField</code>.
  If the field is not supported an <code>UnsupportedTemporalTypeException</code> must be thrown. 
 <p>
  Implementations must not alter the specified temporal object.
  Instead, an adjusted copy of the original must be returned.
  This provides equivalent, safe behavior for immutable and mutable implementations.
 @param temporal the temporal object to adjust, not null
 @param newValue the new value of the field
 @return the adjusted temporal object, not null
 @throw DateTimeExceptionif the field cannot be set
 @throw UnsupportedTemporalTypeExceptionif the field is not supported by the temporal
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (id<JavaTimeTemporalTemporal>)adjustIntoWithJavaTimeTemporalTemporal:(id<JavaTimeTemporalTemporal>)temporal
                                                              withLong:(jlong)newValue;

/*!
 @brief Resolves this field to provide a simpler alternative or a date.
 <p>
  This method is invoked during the resolve phase of parsing.
  It is designed to allow application defined fields to be simplified into
  more standard fields, such as those on <code>ChronoField</code>, or into a date. 
 <p>
  Applications should not normally invoke this method directly.
 @param fieldValues the map of fields to values, which can be updated, not null
 @param partialTemporal the partially complete temporal to query for zone and   chronology; querying for other things is undefined and not recommended, not null
 @param resolverStyle the requested type of resolve, not null
 @return the resolved temporal object; null if resolving only
   changed the map, or no resolve occurred
 @throw ArithmeticExceptionif numeric overflow occurs
 @throw DateTimeExceptionif resolving results in an error. This must not be thrown
   by querying a field on the temporal without first checking if it is supported
 */
- (id<JavaTimeTemporalTemporalAccessor>)resolveWithJavaUtilMap:(id<JavaUtilMap>)fieldValues
                          withJavaTimeTemporalTemporalAccessor:(id<JavaTimeTemporalTemporalAccessor>)partialTemporal
                               withJavaTimeFormatResolverStyle:(JavaTimeFormatResolverStyle *)resolverStyle;

/*!
 @brief Gets a descriptive name for the field.
 <p>
  The should be of the format 'BaseOfRange', such as 'MonthOfYear',
  unless the field has a range of <code>FOREVER</code>, when only
  the base unit is mentioned, such as 'Year' or 'Era'.
 @return the name of the field, not null
 */
- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaTimeTemporalTemporalField)

FOUNDATION_EXPORT NSString *JavaTimeTemporalTemporalField_getDisplayNameWithJavaUtilLocale_(id<JavaTimeTemporalTemporalField> self, JavaUtilLocale *locale);

FOUNDATION_EXPORT id<JavaTimeTemporalTemporalAccessor> JavaTimeTemporalTemporalField_resolveWithJavaUtilMap_withJavaTimeTemporalTemporalAccessor_withJavaTimeFormatResolverStyle_(id<JavaTimeTemporalTemporalField> self, id<JavaUtilMap> fieldValues, id<JavaTimeTemporalTemporalAccessor> partialTemporal, JavaTimeFormatResolverStyle *resolverStyle);

J2OBJC_TYPE_LITERAL_HEADER(JavaTimeTemporalTemporalField)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaTimeTemporalTemporalField")
