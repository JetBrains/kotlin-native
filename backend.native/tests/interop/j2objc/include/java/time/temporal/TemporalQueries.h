//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/time/temporal/TemporalQueries.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaTimeTemporalTemporalQueries")
#ifdef RESTRICT_JavaTimeTemporalTemporalQueries
#define INCLUDE_ALL_JavaTimeTemporalTemporalQueries 0
#else
#define INCLUDE_ALL_JavaTimeTemporalTemporalQueries 1
#endif
#undef RESTRICT_JavaTimeTemporalTemporalQueries

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaTimeTemporalTemporalQueries_) && (INCLUDE_ALL_JavaTimeTemporalTemporalQueries || defined(INCLUDE_JavaTimeTemporalTemporalQueries))
#define JavaTimeTemporalTemporalQueries_

@protocol JavaTimeTemporalTemporalQuery;

/*!
 @brief Common implementations of <code>TemporalQuery</code>.
 <p>
  This class provides common implementations of <code>TemporalQuery</code>.
  These are defined here as they must be constants, and the definition
  of lambdas does not guarantee that. By assigning them once here,
  they become 'normal' Java constants. 
 <p>
  Queries are a key tool for extracting information from temporal objects.
  They exist to externalize the process of querying, permitting different
  approaches, as per the strategy design pattern.
  Examples might be a query that checks if the date is the day before February 29th
  in a leap year, or calculates the number of days to your next birthday. 
 <p>
  The <code>TemporalField</code> interface provides another mechanism for querying
  temporal objects. That interface is limited to returning a <code>long</code>.
  By contrast, queries can return any type. 
 <p>
  There are two equivalent ways of using a <code>TemporalQuery</code>.
  The first is to invoke the method on this interface directly.
  The second is to use <code>TemporalAccessor.query(TemporalQuery)</code>:
  @code

    // these two lines are equivalent, but the second approach is recommended
    temporal = thisQuery.queryFrom(temporal);
    temporal = temporal.query(thisQuery); 
  
@endcode
  It is recommended to use the second approach, <code>query(TemporalQuery)</code>,
  as it is a lot clearer to read in code. 
 <p>
  The most common implementations are method references, such as 
 <code>LocalDate::from</code> and <code>ZoneId::from</code>.
  Additional common queries are provided to return: 
 <ul>
  <li> a Chronology, 
 <li> a LocalDate, 
 <li> a LocalTime, 
 <li> a ZoneOffset, 
 <li> a precision, 
 <li> a zone, or 
 <li> a zoneId. 
 </ul>
 @since 1.8
 */
@interface JavaTimeTemporalTemporalQueries : NSObject
@property (readonly, class, strong) id<JavaTimeTemporalTemporalQuery> ZONE_ID NS_SWIFT_NAME(ZONE_ID);
@property (readonly, class, strong) id<JavaTimeTemporalTemporalQuery> CHRONO NS_SWIFT_NAME(CHRONO);
@property (readonly, class, strong) id<JavaTimeTemporalTemporalQuery> PRECISION NS_SWIFT_NAME(PRECISION);
@property (readonly, class, strong) id<JavaTimeTemporalTemporalQuery> OFFSET NS_SWIFT_NAME(OFFSET);
@property (readonly, class, strong) id<JavaTimeTemporalTemporalQuery> ZONE NS_SWIFT_NAME(ZONE);
@property (readonly, class, strong) id<JavaTimeTemporalTemporalQuery> LOCAL_DATE NS_SWIFT_NAME(LOCAL_DATE);
@property (readonly, class, strong) id<JavaTimeTemporalTemporalQuery> LOCAL_TIME NS_SWIFT_NAME(LOCAL_TIME);

+ (id<JavaTimeTemporalTemporalQuery>)ZONE_ID;

+ (id<JavaTimeTemporalTemporalQuery>)CHRONO;

+ (id<JavaTimeTemporalTemporalQuery>)PRECISION;

+ (id<JavaTimeTemporalTemporalQuery>)OFFSET;

+ (id<JavaTimeTemporalTemporalQuery>)ZONE;

+ (id<JavaTimeTemporalTemporalQuery>)LOCAL_DATE;

+ (id<JavaTimeTemporalTemporalQuery>)LOCAL_TIME;

#pragma mark Public

/*!
 @brief A query for the <code>Chronology</code>.
 <p>
  This queries a <code>TemporalAccessor</code> for the chronology.
  If the target <code>TemporalAccessor</code> represents a date, or part of a date,
  then it should return the chronology that the date is expressed in.
  As a result of this definition, objects only representing time, such as 
 <code>LocalTime</code>, will return null. 
 <p>
  The result from JDK classes implementing <code>TemporalAccessor</code> is as follows:<br>
  <code>LocalDate</code> returns <code>IsoChronology.INSTANCE</code><br>
  <code>LocalTime</code> returns null (does not represent a date)<br>
  <code>LocalDateTime</code> returns <code>IsoChronology.INSTANCE</code><br>
  <code>ZonedDateTime</code> returns <code>IsoChronology.INSTANCE</code><br>
  <code>OffsetTime</code> returns null (does not represent a date)<br>
  <code>OffsetDateTime</code> returns <code>IsoChronology.INSTANCE</code><br>
  <code>ChronoLocalDate</code> returns the associated chronology<br>
  <code>ChronoLocalDateTime</code> returns the associated chronology<br>
  <code>ChronoZonedDateTime</code> returns the associated chronology<br>
  <code>Era</code> returns the associated chronology<br>
  <code>DayOfWeek</code> returns null (shared across chronologies)<br>
  <code>Month</code> returns <code>IsoChronology.INSTANCE</code><br>
  <code>Year</code> returns <code>IsoChronology.INSTANCE</code><br>
  <code>YearMonth</code> returns <code>IsoChronology.INSTANCE</code><br>
  <code>MonthDay</code> returns null <code>IsoChronology.INSTANCE</code><br>
  <code>ZoneOffset</code> returns null (does not represent a date)<br>
  <code>Instant</code> returns null (does not represent a date)<br>
  <p>
  The method <code>java.time.chrono.Chronology.from(TemporalAccessor)</code> can be used as a 
 <code>TemporalQuery</code> via a method reference, <code>Chronology::from</code>.
  That method is equivalent to this query, except that it throws an
  exception if a chronology cannot be obtained.
 @return a query that can obtain the chronology of a temporal, not null
 */
+ (id<JavaTimeTemporalTemporalQuery>)chronology;

/*!
 @brief A query for <code>LocalDate</code> returning null if not found.
 <p>
  This returns a <code>TemporalQuery</code> that can be used to query a temporal
  object for the local date. The query will return null if the temporal
  object cannot supply a local date. 
 <p>
  The query implementation examines the <code>EPOCH_DAY</code>
  field and uses it to create a <code>LocalDate</code>.
  <p>
  The method <code>ZoneOffset.from(TemporalAccessor)</code> can be used as a 
 <code>TemporalQuery</code> via a method reference, <code>LocalDate::from</code>.
  This query and <code>LocalDate::from</code> will return the same result if the
  temporal object contains a date. If the temporal object does not contain
  a date, then the method reference will throw an exception, whereas this
  query will return null.
 @return a query that can obtain the date of a temporal, not null
 */
+ (id<JavaTimeTemporalTemporalQuery>)localDate;

/*!
 @brief A query for <code>LocalTime</code> returning null if not found.
 <p>
  This returns a <code>TemporalQuery</code> that can be used to query a temporal
  object for the local time. The query will return null if the temporal
  object cannot supply a local time. 
 <p>
  The query implementation examines the <code>NANO_OF_DAY</code>
  field and uses it to create a <code>LocalTime</code>.
  <p>
  The method <code>ZoneOffset.from(TemporalAccessor)</code> can be used as a 
 <code>TemporalQuery</code> via a method reference, <code>LocalTime::from</code>.
  This query and <code>LocalTime::from</code> will return the same result if the
  temporal object contains a time. If the temporal object does not contain
  a time, then the method reference will throw an exception, whereas this
  query will return null.
 @return a query that can obtain the time of a temporal, not null
 */
+ (id<JavaTimeTemporalTemporalQuery>)localTime;

/*!
 @brief A query for <code>ZoneOffset</code> returning null if not found.
 <p>
  This returns a <code>TemporalQuery</code> that can be used to query a temporal
  object for the offset. The query will return null if the temporal
  object cannot supply an offset. 
 <p>
  The query implementation examines the <code>OFFSET_SECONDS</code>
  field and uses it to create a <code>ZoneOffset</code>.
  <p>
  The method <code>java.time.ZoneOffset.from(TemporalAccessor)</code> can be used as a 
 <code>TemporalQuery</code> via a method reference, <code>ZoneOffset::from</code>.
  This query and <code>ZoneOffset::from</code> will return the same result if the
  temporal object contains an offset. If the temporal object does not contain
  an offset, then the method reference will throw an exception, whereas this
  query will return null.
 @return a query that can obtain the offset of a temporal, not null
 */
+ (id<JavaTimeTemporalTemporalQuery>)offset;

/*!
 @brief A query for the smallest supported unit.
 <p>
  This queries a <code>TemporalAccessor</code> for the time precision.
  If the target <code>TemporalAccessor</code> represents a consistent or complete date-time,
  date or time then this must return the smallest precision actually supported.
  Note that fields such as <code>NANO_OF_DAY</code> and <code>NANO_OF_SECOND</code>
  are defined to always return ignoring the precision, thus this is the only
  way to find the actual smallest supported unit.
  For example, were <code>GregorianCalendar</code> to implement <code>TemporalAccessor</code>
  it would return a precision of <code>MILLIS</code>.
  <p>
  The result from JDK classes implementing <code>TemporalAccessor</code> is as follows:<br>
  <code>LocalDate</code> returns <code>DAYS</code><br>
  <code>LocalTime</code> returns <code>NANOS</code><br>
  <code>LocalDateTime</code> returns <code>NANOS</code><br>
  <code>ZonedDateTime</code> returns <code>NANOS</code><br>
  <code>OffsetTime</code> returns <code>NANOS</code><br>
  <code>OffsetDateTime</code> returns <code>NANOS</code><br>
  <code>ChronoLocalDate</code> returns <code>DAYS</code><br>
  <code>ChronoLocalDateTime</code> returns <code>NANOS</code><br>
  <code>ChronoZonedDateTime</code> returns <code>NANOS</code><br>
  <code>Era</code> returns <code>ERAS</code><br>
  <code>DayOfWeek</code> returns <code>DAYS</code><br>
  <code>Month</code> returns <code>MONTHS</code><br>
  <code>Year</code> returns <code>YEARS</code><br>
  <code>YearMonth</code> returns <code>MONTHS</code><br>
  <code>MonthDay</code> returns null (does not represent a complete date or time)<br>
  <code>ZoneOffset</code> returns null (does not represent a date or time)<br>
  <code>Instant</code> returns <code>NANOS</code><br>
 @return a query that can obtain the precision of a temporal, not null
 */
+ (id<JavaTimeTemporalTemporalQuery>)precision;

/*!
 @brief A lenient query for the <code>ZoneId</code>, falling back to the <code>ZoneOffset</code>.
 <p>
  This queries a <code>TemporalAccessor</code> for the zone.
  It first tries to obtain the zone, using <code>zoneId()</code>.
  If that is not found it tries to obtain the <code>offset()</code>.
  Thus a <code>java.time.ZonedDateTime</code> will return the result of <code>getZone()</code>,
  while an <code>java.time.OffsetDateTime</code> will return the result of <code>getOffset()</code>.
  <p>
  In most cases, applications should use this query rather than <code>#zoneId()</code>.
  <p>
  The method <code>ZoneId.from(TemporalAccessor)</code> can be used as a 
 <code>TemporalQuery</code> via a method reference, <code>ZoneId::from</code>.
  That method is equivalent to this query, except that it throws an
  exception if a zone cannot be obtained.
 @return a query that can obtain the zone ID or offset of a temporal, not null
 */
+ (id<JavaTimeTemporalTemporalQuery>)zone;

/*!
 @brief A strict query for the <code>ZoneId</code>.
 <p>
  This queries a <code>TemporalAccessor</code> for the zone.
  The zone is only returned if the date-time conceptually contains a <code>ZoneId</code>.
  It will not be returned if the date-time only conceptually has an <code>ZoneOffset</code>.
  Thus a <code>java.time.ZonedDateTime</code> will return the result of <code>getZone()</code>,
  but an <code>java.time.OffsetDateTime</code> will return null. 
 <p>
  In most cases, applications should use <code>zone()</code> as this query is too strict. 
 <p>
  The result from JDK classes implementing <code>TemporalAccessor</code> is as follows:<br>
  <code>LocalDate</code> returns null<br>
  <code>LocalTime</code> returns null<br>
  <code>LocalDateTime</code> returns null<br>
  <code>ZonedDateTime</code> returns the associated zone<br>
  <code>OffsetTime</code> returns null<br>
  <code>OffsetDateTime</code> returns null<br>
  <code>ChronoLocalDate</code> returns null<br>
  <code>ChronoLocalDateTime</code> returns null<br>
  <code>ChronoZonedDateTime</code> returns the associated zone<br>
  <code>Era</code> returns null<br>
  <code>DayOfWeek</code> returns null<br>
  <code>Month</code> returns null<br>
  <code>Year</code> returns null<br>
  <code>YearMonth</code> returns null<br>
  <code>MonthDay</code> returns null<br>
  <code>ZoneOffset</code> returns null<br>
  <code>Instant</code> returns null<br>
 @return a query that can obtain the zone ID of a temporal, not null
 */
+ (id<JavaTimeTemporalTemporalQuery>)zoneId;

@end

J2OBJC_STATIC_INIT(JavaTimeTemporalTemporalQueries)

/*!
 @brief A strict query for the <code>ZoneId</code>.
 */
inline id<JavaTimeTemporalTemporalQuery> JavaTimeTemporalTemporalQueries_get_ZONE_ID(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaTimeTemporalTemporalQuery> JavaTimeTemporalTemporalQueries_ZONE_ID;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaTimeTemporalTemporalQueries, ZONE_ID, id<JavaTimeTemporalTemporalQuery>)

/*!
 @brief A query for the <code>Chronology</code>.
 */
inline id<JavaTimeTemporalTemporalQuery> JavaTimeTemporalTemporalQueries_get_CHRONO(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaTimeTemporalTemporalQuery> JavaTimeTemporalTemporalQueries_CHRONO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaTimeTemporalTemporalQueries, CHRONO, id<JavaTimeTemporalTemporalQuery>)

/*!
 @brief A query for the smallest supported unit.
 */
inline id<JavaTimeTemporalTemporalQuery> JavaTimeTemporalTemporalQueries_get_PRECISION(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaTimeTemporalTemporalQuery> JavaTimeTemporalTemporalQueries_PRECISION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaTimeTemporalTemporalQueries, PRECISION, id<JavaTimeTemporalTemporalQuery>)

/*!
 @brief A query for <code>ZoneOffset</code> returning null if not found.
 */
inline id<JavaTimeTemporalTemporalQuery> JavaTimeTemporalTemporalQueries_get_OFFSET(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaTimeTemporalTemporalQuery> JavaTimeTemporalTemporalQueries_OFFSET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaTimeTemporalTemporalQueries, OFFSET, id<JavaTimeTemporalTemporalQuery>)

/*!
 @brief A lenient query for the <code>ZoneId</code>, falling back to the <code>ZoneOffset</code>.
 */
inline id<JavaTimeTemporalTemporalQuery> JavaTimeTemporalTemporalQueries_get_ZONE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaTimeTemporalTemporalQuery> JavaTimeTemporalTemporalQueries_ZONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaTimeTemporalTemporalQueries, ZONE, id<JavaTimeTemporalTemporalQuery>)

/*!
 @brief A query for <code>LocalDate</code> returning null if not found.
 */
inline id<JavaTimeTemporalTemporalQuery> JavaTimeTemporalTemporalQueries_get_LOCAL_DATE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaTimeTemporalTemporalQuery> JavaTimeTemporalTemporalQueries_LOCAL_DATE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaTimeTemporalTemporalQueries, LOCAL_DATE, id<JavaTimeTemporalTemporalQuery>)

/*!
 @brief A query for <code>LocalTime</code> returning null if not found.
 */
inline id<JavaTimeTemporalTemporalQuery> JavaTimeTemporalTemporalQueries_get_LOCAL_TIME(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaTimeTemporalTemporalQuery> JavaTimeTemporalTemporalQueries_LOCAL_TIME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaTimeTemporalTemporalQueries, LOCAL_TIME, id<JavaTimeTemporalTemporalQuery>)

FOUNDATION_EXPORT id<JavaTimeTemporalTemporalQuery> JavaTimeTemporalTemporalQueries_zoneId(void);

FOUNDATION_EXPORT id<JavaTimeTemporalTemporalQuery> JavaTimeTemporalTemporalQueries_chronology(void);

FOUNDATION_EXPORT id<JavaTimeTemporalTemporalQuery> JavaTimeTemporalTemporalQueries_precision(void);

FOUNDATION_EXPORT id<JavaTimeTemporalTemporalQuery> JavaTimeTemporalTemporalQueries_zone(void);

FOUNDATION_EXPORT id<JavaTimeTemporalTemporalQuery> JavaTimeTemporalTemporalQueries_offset(void);

FOUNDATION_EXPORT id<JavaTimeTemporalTemporalQuery> JavaTimeTemporalTemporalQueries_localDate(void);

FOUNDATION_EXPORT id<JavaTimeTemporalTemporalQuery> JavaTimeTemporalTemporalQueries_localTime(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaTimeTemporalTemporalQueries)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaTimeTemporalTemporalQueries")
