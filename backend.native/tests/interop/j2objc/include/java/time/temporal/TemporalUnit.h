//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/time/temporal/TemporalUnit.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaTimeTemporalTemporalUnit")
#ifdef RESTRICT_JavaTimeTemporalTemporalUnit
#define INCLUDE_ALL_JavaTimeTemporalTemporalUnit 0
#else
#define INCLUDE_ALL_JavaTimeTemporalTemporalUnit 1
#endif
#undef RESTRICT_JavaTimeTemporalTemporalUnit

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaTimeTemporalTemporalUnit_) && (INCLUDE_ALL_JavaTimeTemporalTemporalUnit || defined(INCLUDE_JavaTimeTemporalTemporalUnit))
#define JavaTimeTemporalTemporalUnit_

@class JavaTimeDuration;
@protocol JavaTimeTemporalTemporal;

/*!
 @brief A unit of date-time, such as Days or Hours.
 <p>
  Measurement of time is built on units, such as years, months, days, hours, minutes and seconds.
  Implementations of this interface represent those units. 
 <p>
  An instance of this interface represents the unit itself, rather than an amount of the unit.
  See <code>Period</code> for a class that represents an amount in terms of the common units. 
 <p>
  The most commonly used units are defined in <code>ChronoUnit</code>.
  Further units are supplied in <code>IsoFields</code>.
  Units can also be written by application code by implementing this interface. 
 <p>
  The unit works using double dispatch. Client code calls methods on a date-time like 
 <code>LocalDateTime</code> which check if the unit is a <code>ChronoUnit</code>.
  If it is, then the date-time must handle it.
  Otherwise, the method call is re-dispatched to the matching method in this interface.
 @since 1.8
 */
@protocol JavaTimeTemporalTemporalUnit < JavaObject >

/*!
 @brief Gets the duration of this unit, which may be an estimate.
 <p>
  All units return a duration measured in standard nanoseconds from this method.
  The duration will be positive and non-zero.
  For example, an hour has a duration of <code>60 * 60 * 1,000,000,000ns</code>.
  <p>
  Some units may return an accurate duration while others return an estimate.
  For example, days have an estimated duration due to the possibility of
  daylight saving time changes.
  To determine if the duration is an estimate, use <code>isDurationEstimated()</code>.
 @return the duration of this unit, which may be an estimate, not null
 */
- (JavaTimeDuration *)getDuration;

/*!
 @brief Checks if the duration of the unit is an estimate.
 <p>
  All units have a duration, however the duration is not always accurate.
  For example, days have an estimated duration due to the possibility of
  daylight saving time changes.
  This method returns true if the duration is an estimate and false if it is
  accurate. Note that accurate/estimated ignores leap seconds.
 @return true if the duration is estimated, false if accurate
 */
- (jboolean)isDurationEstimated;

/*!
 @brief Checks if this unit represents a component of a date.
 <p>
  A date is time-based if it can be used to imply meaning from a date.
  It must have a duration that is an integral
  multiple of the length of a standard day.
  Note that it is valid for both <code>isDateBased()</code> and <code>isTimeBased()</code>
  to return false, such as when representing a unit like 36 hours.
 @return true if this unit is a component of a date
 */
- (jboolean)isDateBased;

/*!
 @brief Checks if this unit represents a component of a time.
 <p>
  A unit is time-based if it can be used to imply meaning from a time.
  It must have a duration that divides into
  the length of a standard day without remainder.
  Note that it is valid for both <code>isDateBased()</code> and <code>isTimeBased()</code>
  to return false, such as when representing a unit like 36 hours.
 @return true if this unit is a component of a time
 */
- (jboolean)isTimeBased;

/*!
 @brief Checks if this unit is supported by the specified temporal object.
 <p>
  This checks that the implementing date-time can add/subtract this unit.
  This can be used to avoid throwing an exception. 
 <p>
  This default implementation derives the value using 
 <code>Temporal.plus(long, TemporalUnit)</code>.
 @param temporal the temporal object to check, not null
 @return true if the unit is supported
 */
- (jboolean)isSupportedByWithJavaTimeTemporalTemporal:(id<JavaTimeTemporalTemporal>)temporal;

/*!
 @brief Returns a copy of the specified temporal object with the specified period added.
 <p>
  The period added is a multiple of this unit. For example, this method
  could be used to add "3 days" to a date by calling this method on the
  instance representing "days", passing the date and the period "3".
  The period to be added may be negative, which is equivalent to subtraction. 
 <p>
  There are two equivalent ways of using this method.
  The first is to invoke this method directly.
  The second is to use <code>Temporal.plus(long, TemporalUnit)</code>:
  @code

    // these two lines are equivalent, but the second approach is recommended
    temporal = thisUnit.addTo(temporal);
    temporal = temporal.plus(thisUnit); 
  
@endcode
  It is recommended to use the second approach, <code>plus(TemporalUnit)</code>,
  as it is a lot clearer to read in code. 
 <p>
  Implementations should perform any queries or calculations using the units
  available in <code>ChronoUnit</code> or the fields available in <code>ChronoField</code>.
  If the unit is not supported an <code>UnsupportedTemporalTypeException</code> must be thrown. 
 <p>
  Implementations must not alter the specified temporal object.
  Instead, an adjusted copy of the original must be returned.
  This provides equivalent, safe behavior for immutable and mutable implementations.
 @param temporal the temporal object to adjust, not null
 @param amount the amount of this unit to add, positive or negative
 @return the adjusted temporal object, not null
 @throw DateTimeExceptionif the amount cannot be added
 @throw UnsupportedTemporalTypeExceptionif the unit is not supported by the temporal
 */
- (id<JavaTimeTemporalTemporal>)addToWithJavaTimeTemporalTemporal:(id<JavaTimeTemporalTemporal>)temporal
                                                         withLong:(jlong)amount;

/*!
 @brief Calculates the amount of time between two temporal objects.
 <p>
  This calculates the amount in terms of this unit. The start and end
  points are supplied as temporal objects and must be of compatible types.
  The implementation will convert the second type to be an instance of the
  first type before the calculating the amount.
  The result will be negative if the end is before the start.
  For example, the amount in hours between two temporal objects can be
  calculated using <code>HOURS.between(startTime, endTime)</code>.
  <p>
  The calculation returns a whole number, representing the number of
  complete units between the two temporals.
  For example, the amount in hours between the times 11:30 and 13:29
  will only be one hour as it is one minute short of two hours. 
 <p>
  There are two equivalent ways of using this method.
  The first is to invoke this method directly.
  The second is to use <code>Temporal.until(Temporal, TemporalUnit)</code>:
  @code

    // these two lines are equivalent
    between = thisUnit.between(start, end);
    between = start.until(end, thisUnit); 
  
@endcode
  The choice should be made based on which makes the code more readable. 
 <p>
  For example, this method allows the number of days between two dates to
  be calculated: 
 @code

   long daysBetween = DAYS.between(start, end);
   // or alternatively
   long daysBetween = start.until(end, DAYS); 
  
@endcode
  <p>
  Implementations should perform any queries or calculations using the units
  available in <code>ChronoUnit</code> or the fields available in <code>ChronoField</code>.
  If the unit is not supported an <code>UnsupportedTemporalTypeException</code> must be thrown.
  Implementations must not alter the specified temporal objects.
 @param temporal1Inclusive the base temporal object, not null
 @param temporal2Exclusive the other temporal object, exclusive, not null
 @return the amount of time between temporal1Inclusive and temporal2Exclusive
   in terms of this unit; positive if temporal2Exclusive is later than
   temporal1Inclusive, negative if earlier
 @throw DateTimeExceptionif the amount cannot be calculated, or the end
   temporal cannot be converted to the same type as the start temporal
 @throw UnsupportedTemporalTypeExceptionif the unit is not supported by the temporal
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (jlong)betweenWithJavaTimeTemporalTemporal:(id<JavaTimeTemporalTemporal>)temporal1Inclusive
                withJavaTimeTemporalTemporal:(id<JavaTimeTemporalTemporal>)temporal2Exclusive;

/*!
 @brief Gets a descriptive name for the unit.
 <p>
  This should be in the plural and upper-first camel case, such as 'Days' or 'Minutes'.
 @return the name of this unit, not null
 */
- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaTimeTemporalTemporalUnit)

FOUNDATION_EXPORT jboolean JavaTimeTemporalTemporalUnit_isSupportedByWithJavaTimeTemporalTemporal_(id<JavaTimeTemporalTemporalUnit> self, id<JavaTimeTemporalTemporal> temporal);

J2OBJC_TYPE_LITERAL_HEADER(JavaTimeTemporalTemporalUnit)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaTimeTemporalTemporalUnit")
