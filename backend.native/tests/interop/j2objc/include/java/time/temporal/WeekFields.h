//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/time/temporal/WeekFields.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaTimeTemporalWeekFields")
#ifdef RESTRICT_JavaTimeTemporalWeekFields
#define INCLUDE_ALL_JavaTimeTemporalWeekFields 0
#else
#define INCLUDE_ALL_JavaTimeTemporalWeekFields 1
#endif
#undef RESTRICT_JavaTimeTemporalWeekFields

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaTimeTemporalWeekFields_) && (INCLUDE_ALL_JavaTimeTemporalWeekFields || defined(INCLUDE_JavaTimeTemporalWeekFields))
#define JavaTimeTemporalWeekFields_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class JavaTimeDayOfWeek;
@class JavaUtilLocale;
@protocol JavaTimeTemporalTemporalField;
@protocol JavaTimeTemporalTemporalUnit;

/*!
 @brief Localized definitions of the day-of-week, week-of-month and week-of-year fields.
 <p>
  A standard week is seven days long, but cultures have different definitions for some
  other aspects of a week. This class represents the definition of the week, for the
  purpose of providing <code>TemporalField</code> instances. 
 <p>
  WeekFields provides five fields, 
 <code>dayOfWeek()</code>, <code>weekOfMonth()</code>, <code>weekOfYear()</code>,
  <code>weekOfWeekBasedYear()</code>, and <code>weekBasedYear()</code>
  that provide access to the values from any temporal object.
  <p>
  The computations for day-of-week, week-of-month, and week-of-year are based
  on the  proleptic-year,
  month-of-year,
  day-of-month, and 
 ISO day-of-week which are based on the 
 epoch-day and the chronology.
  The values may not be aligned with the year-of-Era
  depending on the Chronology. 
 <p>A week is defined by: 
 <ul>
  <li>The first day-of-week.
  For example, the ISO-8601 standard considers Monday to be the first day-of-week. 
 <li>The minimal number of days in the first week.
  For example, the ISO-8601 standard counts the first week as needing at least 4 days. 
 </ul>
  Together these two values allow a year or month to be divided into weeks. 
 <h3>Week of Month</h3>
  One field is used: week-of-month.
  The calculation ensures that weeks never overlap a month boundary.
  The month is divided into periods where each period starts on the defined first day-of-week.
  The earliest period is referred to as week 0 if it has less than the minimal number of days
  and week 1 if it has at least the minimal number of days. 
 <table cellpadding="0" cellspacing="3" border="0" style="text-align: left; width: 50%;">
  <caption>Examples of WeekFields</caption>
  <tr><th>Date</th><td>Day-of-week</td>
   <td>First day: Monday<br>Minimal days: 4</td><td>First day: Monday<br>Minimal days: 5</td></tr>
  <tr><th>2008-12-31</th><td>Wednesday</td>
   <td>Week 5 of December 2008</td><td>Week 5 of December 2008</td></tr>
  <tr><th>2009-01-01</th><td>Thursday</td>
   <td>Week 1 of January 2009</td><td>Week 0 of January 2009</td></tr>
  <tr><th>2009-01-04</th><td>Sunday</td>
   <td>Week 1 of January 2009</td><td>Week 0 of January 2009</td></tr>
  <tr><th>2009-01-05</th><td>Monday</td>
   <td>Week 2 of January 2009</td><td>Week 1 of January 2009</td></tr>
  </table>
  
 <h3>Week of Year</h3>
  One field is used: week-of-year.
  The calculation ensures that weeks never overlap a year boundary.
  The year is divided into periods where each period starts on the defined first day-of-week.
  The earliest period is referred to as week 0 if it has less than the minimal number of days
  and week 1 if it has at least the minimal number of days. 
 <h3>Week Based Year</h3>
  Two fields are used for week-based-year, one for the 
 <code>week-of-week-based-year</code> and one for 
 <code>week-based-year</code>.  In a week-based-year, each week
  belongs to only a single year.  Week 1 of a year is the first week that
  starts on the first day-of-week and has at least the minimum number of days.
  The first and last weeks of a year may contain days from the
  previous calendar year or next calendar year respectively. 
 <table cellpadding="0" cellspacing="3" border="0" style="text-align: left; width: 50%;">
  <caption>Examples of WeekFields for week-based-year</caption>
  <tr><th>Date</th><td>Day-of-week</td>
   <td>First day: Monday<br>Minimal days: 4</td><td>First day: Monday<br>Minimal days: 5</td></tr>
  <tr><th>2008-12-31</th><td>Wednesday</td>
   <td>Week 1 of 2009</td><td>Week 53 of 2008</td></tr>
  <tr><th>2009-01-01</th><td>Thursday</td>
   <td>Week 1 of 2009</td><td>Week 53 of 2008</td></tr>
  <tr><th>2009-01-04</th><td>Sunday</td>
   <td>Week 1 of 2009</td><td>Week 53 of 2008</td></tr>
  <tr><th>2009-01-05</th><td>Monday</td>
   <td>Week 2 of 2009</td><td>Week 1 of 2009</td></tr>
  </table>
 @since 1.8
 */
@interface JavaTimeTemporalWeekFields : NSObject < JavaIoSerializable >
@property (readonly, class, strong) JavaTimeTemporalWeekFields *ISO NS_SWIFT_NAME(ISO);
@property (readonly, class, strong) JavaTimeTemporalWeekFields *SUNDAY_START NS_SWIFT_NAME(SUNDAY_START);
@property (readonly, class, strong) id<JavaTimeTemporalTemporalUnit> WEEK_BASED_YEARS NS_SWIFT_NAME(WEEK_BASED_YEARS);

+ (JavaTimeTemporalWeekFields *)ISO;

+ (JavaTimeTemporalWeekFields *)SUNDAY_START;

+ (id<JavaTimeTemporalTemporalUnit>)WEEK_BASED_YEARS;

#pragma mark Public

/*!
 @brief Returns a field to access the day of week based on this <code>WeekFields</code>.
 <p>
  This is similar to <code>ChronoField.DAY_OF_WEEK</code> but uses values for
  the day-of-week based on this <code>WeekFields</code>.
  The days are numbered from 1 to 7 where the 
 <code>first day-of-week</code> is assigned the value 1. 
 <p>
  For example, if the first day-of-week is Sunday, then that will have the
  value 1, with other days ranging from Monday as 2 to Saturday as 7. 
 <p>
  In the resolving phase of parsing, a localized day-of-week will be converted
  to a standardized <code>ChronoField</code> day-of-week.
  The day-of-week must be in the valid range 1 to 7.
  Other fields in this class build dates using the standardized day-of-week.
 @return a field providing access to the day-of-week with localized numbering, not null
 */
- (id<JavaTimeTemporalTemporalField>)dayOfWeek;

/*!
 @brief Checks if this <code>WeekFields</code> is equal to the specified object.
 <p>
  The comparison is based on the entire state of the rules, which is
  the first day-of-week and minimal days.
 @param object the other rules to compare to, null returns false
 @return true if this is equal to the specified rules
 */
- (jboolean)isEqual:(id)object;

/*!
 @brief Gets the first day-of-week.
 <p>
  The first day-of-week varies by culture.
  For example, the US uses Sunday, while France and the ISO-8601 standard use Monday.
  This method returns the first day using the standard <code>DayOfWeek</code> enum.
 @return the first day-of-week, not null
 */
- (JavaTimeDayOfWeek *)getFirstDayOfWeek;

/*!
 @brief Gets the minimal number of days in the first week.
 <p>
  The number of days considered to define the first week of a month or year
  varies by culture.
  For example, the ISO-8601 requires 4 days (more than half a week) to
  be present before counting the first week.
 @return the minimal number of days in the first week of a month or year, from 1 to 7
 */
- (jint)getMinimalDaysInFirstWeek;

/*!
 @brief A hash code for this <code>WeekFields</code>.
 @return a suitable hash code
 */
- (NSUInteger)hash;

/*!
 @brief Obtains an instance of <code>WeekFields</code> from the first day-of-week and minimal days.
 <p>
  The first day-of-week defines the ISO <code>DayOfWeek</code> that is day 1 of the week.
  The minimal number of days in the first week defines how many days must be present
  in a month or year, starting from the first day-of-week, before the week is counted
  as the first week. A value of 1 will count the first day of the month or year as part
  of the first week, whereas a value of 7 will require the whole seven days to be in
  the new month or year. 
 <p>
  WeekFields instances are singletons; for each unique combination
  of <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code> the
  the same instance will be returned.
 @param firstDayOfWeek the first day of the week, not null
 @param minimalDaysInFirstWeek the minimal number of days in the first week, from 1 to 7
 @return the week-definition, not null
 @throw IllegalArgumentExceptionif the minimal days value is less than one
       or greater than 7
 */
+ (JavaTimeTemporalWeekFields *)ofWithJavaTimeDayOfWeek:(JavaTimeDayOfWeek *)firstDayOfWeek
                                                withInt:(jint)minimalDaysInFirstWeek;

/*!
 @brief Obtains an instance of <code>WeekFields</code> appropriate for a locale.
 <p>
  This will look up appropriate values from the provider of localization data.
 @param locale the locale to use, not null
 @return the week-definition, not null
 */
+ (JavaTimeTemporalWeekFields *)ofWithJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief A string representation of this <code>WeekFields</code> instance.
 @return the string representation, not null
 */
- (NSString *)description;

/*!
 @brief Returns a field to access the year of a week-based-year based on this <code>WeekFields</code>.
 <p>
  This represents the concept of the year where weeks start on a fixed day-of-week,
  such as Monday and each week belongs to exactly one year.
  This field is typically used with <code>WeekFields.dayOfWeek()</code> and 
 <code>WeekFields.weekOfWeekBasedYear()</code>.
  <p>
  Week one(1) is the week starting on the <code>WeekFields.getFirstDayOfWeek</code>
  where there are at least <code>WeekFields.getMinimalDaysInFirstWeek()</code> days in the year.
  Thus, week one may start before the start of the year.
  If the first week starts after the start of the year then the period before
  is in the last week of the previous year. 
 <p>
  This field can be used with any calendar system. 
 <p>
  In the resolving phase of parsing, a date can be created from a week-based-year,
  week-of-year and day-of-week. 
 <p>
  In strict mode, all three fields are
  validated against their range of valid values. The week-of-year field
  is validated to ensure that the resulting week-based-year is the
  week-based-year requested. 
 <p>
  In smart mode, all three fields are
  validated against their range of valid values. The week-of-week-based-year field
  is validated from 1 to 53, meaning that the resulting date can be in the
  following week-based-year to that specified. 
 <p>
  In lenient mode, the year and day-of-week
  are validated against the range of valid values. The resulting date is calculated
  equivalent to the following three stage approach.
  First, create a date on the first day of the first week in the requested week-based-year.
  Then take the week-of-week-based-year, subtract one, and add the amount in weeks to the date.
  Finally, adjust to the correct day-of-week within the localized week.
 @return a field providing access to the week-based-year, not null
 */
- (id<JavaTimeTemporalTemporalField>)weekBasedYear;

/*!
 @brief Returns a field to access the week of month based on this <code>WeekFields</code>.
 <p>
  This represents the concept of the count of weeks within the month where weeks
  start on a fixed day-of-week, such as Monday.
  This field is typically used with <code>WeekFields.dayOfWeek()</code>.
  <p>
  Week one (1) is the week starting on the <code>WeekFields.getFirstDayOfWeek</code>
  where there are at least <code>WeekFields.getMinimalDaysInFirstWeek()</code> days in the month.
  Thus, week one may start up to <code>minDays</code> days before the start of the month.
  If the first week starts after the start of the month then the period before is week zero (0). 
 <p>
  For example:<br>
  - if the 1st day of the month is a Monday, week one starts on the 1st and there is no week zero<br>
  - if the 2nd day of the month is a Monday, week one starts on the 2nd and the 1st is in week zero<br>
  - if the 4th day of the month is a Monday, week one starts on the 4th and the 1st to 3rd is in week zero<br>
  - if the 5th day of the month is a Monday, week two starts on the 5th and the 1st to 4th is in week one<br>
  <p>
  This field can be used with any calendar system. 
 <p>
  In the resolving phase of parsing, a date can be created from a year,
  week-of-month, month-of-year and day-of-week. 
 <p>
  In strict mode, all four fields are
  validated against their range of valid values. The week-of-month field
  is validated to ensure that the resulting month is the month requested. 
 <p>
  In smart mode, all four fields are
  validated against their range of valid values. The week-of-month field
  is validated from 0 to 6, meaning that the resulting date can be in a
  different month to that specified. 
 <p>
  In lenient mode, the year and day-of-week
  are validated against the range of valid values. The resulting date is calculated
  equivalent to the following four stage approach.
  First, create a date on the first day of the first week of January in the requested year.
  Then take the month-of-year, subtract one, and add the amount in months to the date.
  Then take the week-of-month, subtract one, and add the amount in weeks to the date.
  Finally, adjust to the correct day-of-week within the localized week.
 @return a field providing access to the week-of-month, not null
 */
- (id<JavaTimeTemporalTemporalField>)weekOfMonth;

/*!
 @brief Returns a field to access the week of a week-based-year based on this <code>WeekFields</code>.
 <p>
  This represents the concept of the count of weeks within the year where weeks
  start on a fixed day-of-week, such as Monday and each week belongs to exactly one year.
  This field is typically used with <code>WeekFields.dayOfWeek()</code> and 
 <code>WeekFields.weekBasedYear()</code>.
  <p>
  Week one(1) is the week starting on the <code>WeekFields.getFirstDayOfWeek</code>
  where there are at least <code>WeekFields.getMinimalDaysInFirstWeek()</code> days in the year.
  If the first week starts after the start of the year then the period before
  is in the last week of the previous year. 
 <p>
  For example:<br>
  - if the 1st day of the year is a Monday, week one starts on the 1st<br>
  - if the 2nd day of the year is a Monday, week one starts on the 2nd and
    the 1st is in the last week of the previous year<br>
  - if the 4th day of the year is a Monday, week one starts on the 4th and
    the 1st to 3rd is in the last week of the previous year<br>
  - if the 5th day of the year is a Monday, week two starts on the 5th and
    the 1st to 4th is in week one<br>
  <p>
  This field can be used with any calendar system. 
 <p>
  In the resolving phase of parsing, a date can be created from a week-based-year,
  week-of-year and day-of-week. 
 <p>
  In strict mode, all three fields are
  validated against their range of valid values. The week-of-year field
  is validated to ensure that the resulting week-based-year is the
  week-based-year requested. 
 <p>
  In smart mode, all three fields are
  validated against their range of valid values. The week-of-week-based-year field
  is validated from 1 to 53, meaning that the resulting date can be in the
  following week-based-year to that specified. 
 <p>
  In lenient mode, the year and day-of-week
  are validated against the range of valid values. The resulting date is calculated
  equivalent to the following three stage approach.
  First, create a date on the first day of the first week in the requested week-based-year.
  Then take the week-of-week-based-year, subtract one, and add the amount in weeks to the date.
  Finally, adjust to the correct day-of-week within the localized week.
 @return a field providing access to the week-of-week-based-year, not null
 */
- (id<JavaTimeTemporalTemporalField>)weekOfWeekBasedYear;

/*!
 @brief Returns a field to access the week of year based on this <code>WeekFields</code>.
 <p>
  This represents the concept of the count of weeks within the year where weeks
  start on a fixed day-of-week, such as Monday.
  This field is typically used with <code>WeekFields.dayOfWeek()</code>.
  <p>
  Week one(1) is the week starting on the <code>WeekFields.getFirstDayOfWeek</code>
  where there are at least <code>WeekFields.getMinimalDaysInFirstWeek()</code> days in the year.
  Thus, week one may start up to <code>minDays</code> days before the start of the year.
  If the first week starts after the start of the year then the period before is week zero (0). 
 <p>
  For example:<br>
  - if the 1st day of the year is a Monday, week one starts on the 1st and there is no week zero<br>
  - if the 2nd day of the year is a Monday, week one starts on the 2nd and the 1st is in week zero<br>
  - if the 4th day of the year is a Monday, week one starts on the 4th and the 1st to 3rd is in week zero<br>
  - if the 5th day of the year is a Monday, week two starts on the 5th and the 1st to 4th is in week one<br>
  <p>
  This field can be used with any calendar system. 
 <p>
  In the resolving phase of parsing, a date can be created from a year,
  week-of-year and day-of-week. 
 <p>
  In strict mode, all three fields are
  validated against their range of valid values. The week-of-year field
  is validated to ensure that the resulting year is the year requested. 
 <p>
  In smart mode, all three fields are
  validated against their range of valid values. The week-of-year field
  is validated from 0 to 54, meaning that the resulting date can be in a
  different year to that specified. 
 <p>
  In lenient mode, the year and day-of-week
  are validated against the range of valid values. The resulting date is calculated
  equivalent to the following three stage approach.
  First, create a date on the first day of the first week in the requested year.
  Then take the week-of-year, subtract one, and add the amount in weeks to the date.
  Finally, adjust to the correct day-of-week within the localized week.
 @return a field providing access to the week-of-year, not null
 */
- (id<JavaTimeTemporalTemporalField>)weekOfYear;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(JavaTimeTemporalWeekFields)

/*!
 @brief The ISO-8601 definition, where a week starts on Monday and the first week
  has a minimum of 4 days.
 <p>
  The ISO-8601 standard defines a calendar system based on weeks.
  It uses the week-based-year and week-of-week-based-year concepts to split
  up the passage of days instead of the standard year/month/day. 
 <p>
  Note that the first week may start in the previous calendar year.
  Note also that the first few days of a calendar year may be in the
  week-based-year corresponding to the previous calendar year.
 */
inline JavaTimeTemporalWeekFields *JavaTimeTemporalWeekFields_get_ISO(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaTimeTemporalWeekFields *JavaTimeTemporalWeekFields_ISO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaTimeTemporalWeekFields, ISO, JavaTimeTemporalWeekFields *)

/*!
 @brief The common definition of a week that starts on Sunday and the first week
  has a minimum of 1 day.
 <p>
  Defined as starting on Sunday and with a minimum of 1 day in the month.
  This week definition is in use in the US and other European countries.
 */
inline JavaTimeTemporalWeekFields *JavaTimeTemporalWeekFields_get_SUNDAY_START(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaTimeTemporalWeekFields *JavaTimeTemporalWeekFields_SUNDAY_START;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaTimeTemporalWeekFields, SUNDAY_START, JavaTimeTemporalWeekFields *)

/*!
 @brief The unit that represents week-based-years for the purpose of addition and subtraction.
 <p>
  This allows a number of week-based-years to be added to, or subtracted from, a date.
  The unit is equal to either 52 or 53 weeks.
  The estimated duration of a week-based-year is the same as that of a standard ISO
  year at <code>365.2425 Days</code>.
  <p>
  The rules for addition add the number of week-based-years to the existing value
  for the week-based-year field retaining the week-of-week-based-year
  and day-of-week, unless the week number it too large for the target year.
  In that case, the week is set to the last week of the year
  with the same day-of-week. 
 <p>
  This unit is an immutable and thread-safe singleton.
 */
inline id<JavaTimeTemporalTemporalUnit> JavaTimeTemporalWeekFields_get_WEEK_BASED_YEARS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaTimeTemporalTemporalUnit> JavaTimeTemporalWeekFields_WEEK_BASED_YEARS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaTimeTemporalWeekFields, WEEK_BASED_YEARS, id<JavaTimeTemporalTemporalUnit>)

FOUNDATION_EXPORT JavaTimeTemporalWeekFields *JavaTimeTemporalWeekFields_ofWithJavaUtilLocale_(JavaUtilLocale *locale);

FOUNDATION_EXPORT JavaTimeTemporalWeekFields *JavaTimeTemporalWeekFields_ofWithJavaTimeDayOfWeek_withInt_(JavaTimeDayOfWeek *firstDayOfWeek, jint minimalDaysInFirstWeek);

J2OBJC_TYPE_LITERAL_HEADER(JavaTimeTemporalWeekFields)

#endif

#if !defined (JavaTimeTemporalWeekFields_ComputedDayOfField_) && (INCLUDE_ALL_JavaTimeTemporalWeekFields || defined(INCLUDE_JavaTimeTemporalWeekFields_ComputedDayOfField))
#define JavaTimeTemporalWeekFields_ComputedDayOfField_

#define RESTRICT_JavaTimeTemporalTemporalField 1
#define INCLUDE_JavaTimeTemporalTemporalField 1
#include "java/time/temporal/TemporalField.h"

@class JavaTimeFormatResolverStyle;
@class JavaTimeTemporalValueRange;
@class JavaTimeTemporalWeekFields;
@class JavaUtilLocale;
@protocol JavaTimeChronoChronoLocalDate;
@protocol JavaTimeTemporalTemporal;
@protocol JavaTimeTemporalTemporalAccessor;
@protocol JavaTimeTemporalTemporalUnit;
@protocol JavaUtilMap;

/*!
 @brief Field type that computes DayOfWeek, WeekOfMonth, and WeekOfYear
  based on a WeekFields.
 A separate Field instance is required for each different WeekFields;
  combination of start of week and minimum number of days.
  Constructors are provided to create fields for DayOfWeek, WeekOfMonth,
  and WeekOfYear.
 */
@interface JavaTimeTemporalWeekFields_ComputedDayOfField : NSObject < JavaTimeTemporalTemporalField >

#pragma mark Public

- (id<JavaTimeTemporalTemporal>)adjustIntoWithJavaTimeTemporalTemporal:(id<JavaTimeTemporalTemporal>)temporal
                                                              withLong:(jlong)newValue;

- (id<JavaTimeTemporalTemporalUnit>)getBaseUnit;

- (NSString *)getDisplayNameWithJavaUtilLocale:(JavaUtilLocale *)locale;

- (jlong)getFromWithJavaTimeTemporalTemporalAccessor:(id<JavaTimeTemporalTemporalAccessor>)temporal;

- (id<JavaTimeTemporalTemporalUnit>)getRangeUnit;

- (jboolean)isDateBased;

- (jboolean)isSupportedByWithJavaTimeTemporalTemporalAccessor:(id<JavaTimeTemporalTemporalAccessor>)temporal;

- (jboolean)isTimeBased;

- (JavaTimeTemporalValueRange *)range;

- (JavaTimeTemporalValueRange *)rangeRefinedByWithJavaTimeTemporalTemporalAccessor:(id<JavaTimeTemporalTemporalAccessor>)temporal;

- (id<JavaTimeChronoChronoLocalDate>)resolveWithJavaUtilMap:(id<JavaUtilMap>)fieldValues
                       withJavaTimeTemporalTemporalAccessor:(id<JavaTimeTemporalTemporalAccessor>)partialTemporal
                            withJavaTimeFormatResolverStyle:(JavaTimeFormatResolverStyle *)resolverStyle;

- (NSString *)description;

#pragma mark Package-Private

/*!
 @brief Returns a field to access the day of week,
  computed based on a WeekFields.
 <p>
  The WeekDefintion of the first day of the week is used with
  the ISO DAY_OF_WEEK field to compute week boundaries.
 */
+ (JavaTimeTemporalWeekFields_ComputedDayOfField *)ofDayOfWeekFieldWithJavaTimeTemporalWeekFields:(JavaTimeTemporalWeekFields *)weekDef;

/*!
 @brief Returns a field to access the week of week-based-year,
  computed based on a WeekFields.
 - seealso: WeekFields#weekBasedYear()
 */
+ (JavaTimeTemporalWeekFields_ComputedDayOfField *)ofWeekBasedYearFieldWithJavaTimeTemporalWeekFields:(JavaTimeTemporalWeekFields *)weekDef;

/*!
 @brief Returns a field to access the week of month,
  computed based on a WeekFields.
 - seealso: WeekFields#weekOfMonth()
 */
+ (JavaTimeTemporalWeekFields_ComputedDayOfField *)ofWeekOfMonthFieldWithJavaTimeTemporalWeekFields:(JavaTimeTemporalWeekFields *)weekDef;

/*!
 @brief Returns a field to access the week of week-based-year,
  computed based on a WeekFields.
 - seealso: WeekFields#weekOfWeekBasedYear()
 */
+ (JavaTimeTemporalWeekFields_ComputedDayOfField *)ofWeekOfWeekBasedYearFieldWithJavaTimeTemporalWeekFields:(JavaTimeTemporalWeekFields *)weekDef;

/*!
 @brief Returns a field to access the week of year,
  computed based on a WeekFields.
 - seealso: WeekFields#weekOfYear()
 */
+ (JavaTimeTemporalWeekFields_ComputedDayOfField *)ofWeekOfYearFieldWithJavaTimeTemporalWeekFields:(JavaTimeTemporalWeekFields *)weekDef;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(JavaTimeTemporalWeekFields_ComputedDayOfField)

FOUNDATION_EXPORT JavaTimeTemporalWeekFields_ComputedDayOfField *JavaTimeTemporalWeekFields_ComputedDayOfField_ofDayOfWeekFieldWithJavaTimeTemporalWeekFields_(JavaTimeTemporalWeekFields *weekDef);

FOUNDATION_EXPORT JavaTimeTemporalWeekFields_ComputedDayOfField *JavaTimeTemporalWeekFields_ComputedDayOfField_ofWeekOfMonthFieldWithJavaTimeTemporalWeekFields_(JavaTimeTemporalWeekFields *weekDef);

FOUNDATION_EXPORT JavaTimeTemporalWeekFields_ComputedDayOfField *JavaTimeTemporalWeekFields_ComputedDayOfField_ofWeekOfYearFieldWithJavaTimeTemporalWeekFields_(JavaTimeTemporalWeekFields *weekDef);

FOUNDATION_EXPORT JavaTimeTemporalWeekFields_ComputedDayOfField *JavaTimeTemporalWeekFields_ComputedDayOfField_ofWeekOfWeekBasedYearFieldWithJavaTimeTemporalWeekFields_(JavaTimeTemporalWeekFields *weekDef);

FOUNDATION_EXPORT JavaTimeTemporalWeekFields_ComputedDayOfField *JavaTimeTemporalWeekFields_ComputedDayOfField_ofWeekBasedYearFieldWithJavaTimeTemporalWeekFields_(JavaTimeTemporalWeekFields *weekDef);

J2OBJC_TYPE_LITERAL_HEADER(JavaTimeTemporalWeekFields_ComputedDayOfField)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaTimeTemporalWeekFields")
