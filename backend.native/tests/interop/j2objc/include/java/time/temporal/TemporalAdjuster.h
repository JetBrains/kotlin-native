//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/time/temporal/TemporalAdjuster.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaTimeTemporalTemporalAdjuster")
#ifdef RESTRICT_JavaTimeTemporalTemporalAdjuster
#define INCLUDE_ALL_JavaTimeTemporalTemporalAdjuster 0
#else
#define INCLUDE_ALL_JavaTimeTemporalTemporalAdjuster 1
#endif
#undef RESTRICT_JavaTimeTemporalTemporalAdjuster

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaTimeTemporalTemporalAdjuster_) && (INCLUDE_ALL_JavaTimeTemporalTemporalAdjuster || defined(INCLUDE_JavaTimeTemporalTemporalAdjuster))
#define JavaTimeTemporalTemporalAdjuster_

@protocol JavaTimeTemporalTemporal;

/*!
 @brief Strategy for adjusting a temporal object.
 <p>
  Adjusters are a key tool for modifying temporal objects.
  They exist to externalize the process of adjustment, permitting different
  approaches, as per the strategy design pattern.
  Examples might be an adjuster that sets the date avoiding weekends, or one that
  sets the date to the last day of the month. 
 <p>
  There are two equivalent ways of using a <code>TemporalAdjuster</code>.
  The first is to invoke the method on this interface directly.
  The second is to use <code>Temporal.with(TemporalAdjuster)</code>:
  @code

    // these two lines are equivalent, but the second approach is recommended
    temporal = thisAdjuster.adjustInto(temporal);
    temporal = temporal.with(thisAdjuster); 
  
@endcode
  It is recommended to use the second approach, <code>with(TemporalAdjuster)</code>,
  as it is a lot clearer to read in code. 
 <p>
  The <code>TemporalAdjusters</code> class contains a standard set of adjusters,
  available as static methods.
  These include: 
 <ul>
  <li>finding the first or last day of the month 
 <li>finding the first day of next month 
 <li>finding the first or last day of the year 
 <li>finding the first day of next year 
 <li>finding the first or last day-of-week within a month, such as "first Wednesday in June" 
 <li>finding the next or previous day-of-week, such as "next Thursday" 
 </ul>
 - seealso: TemporalAdjusters
 @since 1.8
 */
@protocol JavaTimeTemporalTemporalAdjuster < JavaObject >

/*!
 @brief Adjusts the specified temporal object.
 <p>
  This adjusts the specified temporal object using the logic
  encapsulated in the implementing class.
  Examples might be an adjuster that sets the date avoiding weekends, or one that
  sets the date to the last day of the month. 
 <p>
  There are two equivalent ways of using this method.
  The first is to invoke this method directly.
  The second is to use <code>Temporal.with(TemporalAdjuster)</code>:
  @code

    // these two lines are equivalent, but the second approach is recommended
    temporal = thisAdjuster.adjustInto(temporal);
    temporal = temporal.with(thisAdjuster); 
  
@endcode
  It is recommended to use the second approach, <code>with(TemporalAdjuster)</code>,
  as it is a lot clearer to read in code.
 @param temporal the temporal object to adjust, not null
 @return an object of the same observable type with the adjustment made, not null
 @throw DateTimeExceptionif unable to make the adjustment
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (id<JavaTimeTemporalTemporal>)adjustIntoWithJavaTimeTemporalTemporal:(id<JavaTimeTemporalTemporal>)temporal;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaTimeTemporalTemporalAdjuster)

J2OBJC_TYPE_LITERAL_HEADER(JavaTimeTemporalTemporalAdjuster)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaTimeTemporalTemporalAdjuster")
