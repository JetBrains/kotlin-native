//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/time/chrono/IsoChronology.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaTimeChronoIsoChronology")
#ifdef RESTRICT_JavaTimeChronoIsoChronology
#define INCLUDE_ALL_JavaTimeChronoIsoChronology 0
#else
#define INCLUDE_ALL_JavaTimeChronoIsoChronology 1
#endif
#undef RESTRICT_JavaTimeChronoIsoChronology

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaTimeChronoIsoChronology_) && (INCLUDE_ALL_JavaTimeChronoIsoChronology || defined(INCLUDE_JavaTimeChronoIsoChronology))
#define JavaTimeChronoIsoChronology_

#define RESTRICT_JavaTimeChronoAbstractChronology 1
#define INCLUDE_JavaTimeChronoAbstractChronology 1
#include "java/time/chrono/AbstractChronology.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class JavaTimeChronoIsoEra;
@class JavaTimeClock;
@class JavaTimeFormatResolverStyle;
@class JavaTimeInstant;
@class JavaTimeLocalDate;
@class JavaTimeLocalDateTime;
@class JavaTimePeriod;
@class JavaTimeTemporalChronoField;
@class JavaTimeTemporalValueRange;
@class JavaTimeZoneId;
@class JavaTimeZonedDateTime;
@protocol JavaTimeChronoEra;
@protocol JavaTimeTemporalTemporalAccessor;
@protocol JavaUtilList;
@protocol JavaUtilMap;

/*!
 @brief The ISO calendar system.
 <p>
  This chronology defines the rules of the ISO calendar system.
  This calendar system is based on the ISO-8601 standard, which is the 
 <i>de facto</i> world calendar. 
 <p>
  The fields are defined as follows: 
 <ul>
  <li>era - There are two eras, 'Current Era' (CE) and 'Before Current Era' (BCE). 
 <li>year-of-era - The year-of-era is the same as the proleptic-year for the current CE era.
   For the BCE era before the ISO epoch the year increases from 1 upwards as time goes backwards. 
 <li>proleptic-year - The proleptic year is the same as the year-of-era for the
   current era. For the previous era, years have zero, then negative values. 
 <li>month-of-year - There are 12 months in an ISO year, numbered from 1 to 12. 
 <li>day-of-month - There are between 28 and 31 days in each of the ISO month, numbered from 1 to 31.
   Months 4, 6, 9 and 11 have 30 days, Months 1, 3, 5, 7, 8, 10 and 12 have 31 days.
   Month 2 has 28 days, or 29 in a leap year. 
 <li>day-of-year - There are 365 days in a standard ISO year and 366 in a leap year.
   The days are numbered from 1 to 365 or 1 to 366. 
 <li>leap-year - Leap years occur every 4 years, except where the year is divisble by 100 and not divisble by 400. 
 </ul>
 @since 1.8
 */
@interface JavaTimeChronoIsoChronology : JavaTimeChronoAbstractChronology < JavaIoSerializable >
@property (readonly, class, strong) JavaTimeChronoIsoChronology *INSTANCE NS_SWIFT_NAME(INSTANCE);

+ (JavaTimeChronoIsoChronology *)INSTANCE;

#pragma mark Public

/*!
 @brief Obtains an ISO local date from the era, year-of-era, month-of-year
  and day-of-month fields.
 @param era the ISO era, not null
 @param yearOfEra the ISO year-of-era
 @param month the ISO month-of-year
 @param dayOfMonth the ISO day-of-month
 @return the ISO local date, not null
 @throw DateTimeExceptionif unable to create the date
 @throw ClassCastExceptionif the type of <code>era</code> is not <code>IsoEra</code>
 */
- (JavaTimeLocalDate *)dateWithJavaTimeChronoEra:(id<JavaTimeChronoEra>)era
                                         withInt:(jint)yearOfEra
                                         withInt:(jint)month
                                         withInt:(jint)dayOfMonth;

/*!
 @brief Obtains an ISO local date from the proleptic-year, month-of-year
  and day-of-month fields.
 <p>
  This is equivalent to <code>LocalDate.of(int, int, int)</code>.
 @param prolepticYear the ISO proleptic-year
 @param month the ISO month-of-year
 @param dayOfMonth the ISO day-of-month
 @return the ISO local date, not null
 @throw DateTimeExceptionif unable to create the date
 */
- (JavaTimeLocalDate *)dateWithInt:(jint)prolepticYear
                           withInt:(jint)month
                           withInt:(jint)dayOfMonth;

/*!
 @brief Obtains an ISO local date from another date-time object.
 <p>
  This is equivalent to <code>LocalDate.from(TemporalAccessor)</code>.
 @param temporal the date-time object to convert, not null
 @return the ISO local date, not null
 @throw DateTimeExceptionif unable to create the date
 */
- (JavaTimeLocalDate *)dateWithJavaTimeTemporalTemporalAccessor:(id<JavaTimeTemporalTemporalAccessor>)temporal;

/*!
 @brief Obtains an ISO local date from the epoch-day.
 <p>
  This is equivalent to <code>LocalDate.ofEpochDay(long)</code>.
 @param epochDay the epoch day
 @return the ISO local date, not null
 @throw DateTimeExceptionif unable to create the date
 */
- (JavaTimeLocalDate *)dateEpochDayWithLong:(jlong)epochDay;

/*!
 @brief Obtains the current ISO local date from the system clock in the default time-zone.
 <p>
  This will query the <code>system clock</code> in the default
  time-zone to obtain the current date. 
 <p>
  Using this method will prevent the ability to use an alternate clock for testing
  because the clock is hard-coded.
 @return the current ISO local date using the system clock and default time-zone, not null
 @throw DateTimeExceptionif unable to create the date
 */
- (JavaTimeLocalDate *)dateNow;

/*!
 @brief Obtains the current ISO local date from the specified clock.
 <p>
  This will query the specified clock to obtain the current date - today.
  Using this method allows the use of an alternate clock for testing.
  The alternate clock may be introduced using <code>dependency injection</code>.
 @param clock the clock to use, not null
 @return the current ISO local date, not null
 @throw DateTimeExceptionif unable to create the date
 */
- (JavaTimeLocalDate *)dateNowWithJavaTimeClock:(JavaTimeClock *)clock;

/*!
 @brief Obtains the current ISO local date from the system clock in the specified time-zone.
 <p>
  This will query the <code>system clock</code> to obtain the current date.
  Specifying the time-zone avoids dependence on the default time-zone. 
 <p>
  Using this method will prevent the ability to use an alternate clock for testing
  because the clock is hard-coded.
 @return the current ISO local date using the system clock, not null
 @throw DateTimeExceptionif unable to create the date
 */
- (JavaTimeLocalDate *)dateNowWithJavaTimeZoneId:(JavaTimeZoneId *)zone;

/*!
 @brief Obtains an ISO local date from the era, year-of-era and day-of-year fields.
 @param era the ISO era, not null
 @param yearOfEra the ISO year-of-era
 @param dayOfYear the ISO day-of-year
 @return the ISO local date, not null
 @throw DateTimeExceptionif unable to create the date
 */
- (JavaTimeLocalDate *)dateYearDayWithJavaTimeChronoEra:(id<JavaTimeChronoEra>)era
                                                withInt:(jint)yearOfEra
                                                withInt:(jint)dayOfYear;

/*!
 @brief Obtains an ISO local date from the proleptic-year and day-of-year fields.
 <p>
  This is equivalent to <code>LocalDate.ofYearDay(int, int)</code>.
 @param prolepticYear the ISO proleptic-year
 @param dayOfYear the ISO day-of-year
 @return the ISO local date, not null
 @throw DateTimeExceptionif unable to create the date
 */
- (JavaTimeLocalDate *)dateYearDayWithInt:(jint)prolepticYear
                                  withInt:(jint)dayOfYear;

- (JavaTimeChronoIsoEra *)eraOfWithInt:(jint)eraValue;

- (id<JavaUtilList>)eras;

/*!
 @brief Gets the calendar type of the underlying calendar system - 'iso8601'.
 <p>
  The calendar type is an identifier defined by the 
 <em>Unicode Locale Data Markup Language (LDML)</em> specification.
  It can be used to lookup the <code>Chronology</code> using <code>Chronology.of(String)</code>.
  It can also be used as part of a locale, accessible via 
 <code>Locale.getUnicodeLocaleType(String)</code> with the key 'ca'.
 @return the calendar system type - 'iso8601'
 - seealso: #getId()
 */
- (NSString *)getCalendarType;

/*!
 @brief Gets the ID of the chronology - 'ISO'.
 <p>
  The ID uniquely identifies the <code>Chronology</code>.
  It can be used to lookup the <code>Chronology</code> using <code>Chronology.of(String)</code>.
 @return the chronology ID - 'ISO'
 - seealso: #getCalendarType()
 */
- (NSString *)getId;

/*!
 @brief Checks if the year is a leap year, according to the ISO proleptic
  calendar system rules.
 <p>
  This method applies the current rules for leap years across the whole time-line.
  In general, a year is a leap year if it is divisible by four without
  remainder. However, years divisible by 100, are not leap years, with
  the exception of years divisible by 400 which are. 
 <p>
  For example, 1904 is a leap year it is divisible by 4.
  1900 was not a leap year as it is divisible by 100, however 2000 was a
  leap year as it is divisible by 400. 
 <p>
  The calculation is proleptic - applying the same rules into the far future and far past.
  This is historically inaccurate, but is correct for the ISO-8601 standard.
 @param prolepticYear the ISO proleptic year to check
 @return true if the year is leap, false otherwise
 */
- (jboolean)isLeapYearWithLong:(jlong)prolepticYear;

/*!
 @brief Obtains an ISO local date-time from another date-time object.
 <p>
  This is equivalent to <code>LocalDateTime.from(TemporalAccessor)</code>.
 @param temporal the date-time object to convert, not null
 @return the ISO local date-time, not null
 @throw DateTimeExceptionif unable to create the date-time
 */
- (JavaTimeLocalDateTime *)localDateTimeWithJavaTimeTemporalTemporalAccessor:(id<JavaTimeTemporalTemporalAccessor>)temporal;

/*!
 @brief Obtains a period for this chronology based on years, months and days.
 <p>
  This returns a period tied to the ISO chronology using the specified
  years, months and days. See <code>Period</code> for further details.
 @param years the number of years, may be negative
 @param months the number of years, may be negative
 @param days the number of years, may be negative
 @return the period in terms of this chronology, not null
 @return the ISO period, not null
 */
- (JavaTimePeriod *)periodWithInt:(jint)years
                          withInt:(jint)months
                          withInt:(jint)days;

- (jint)prolepticYearWithJavaTimeChronoEra:(id<JavaTimeChronoEra>)era
                                   withInt:(jint)yearOfEra;

- (JavaTimeTemporalValueRange *)rangeWithJavaTimeTemporalChronoField:(JavaTimeTemporalChronoField *)field;

/*!
 @brief Resolves parsed <code>ChronoField</code> values into a date during parsing.
 <p>
  Most <code>TemporalField</code> implementations are resolved using the
  resolve method on the field. By contrast, the <code>ChronoField</code> class
  defines fields that only have meaning relative to the chronology.
  As such, <code>ChronoField</code> date fields are resolved here in the
  context of a specific chronology. 
 <p>
  <code>ChronoField</code> instances on the ISO calendar system are resolved
  as follows. 
 <ul>
  <li><code>EPOCH_DAY</code> - If present, this is converted to a <code>LocalDate</code>
   and all other date fields are then cross-checked against the date. 
 <li><code>PROLEPTIC_MONTH</code> - If present, then it is split into the
   <code>YEAR</code> and <code>MONTH_OF_YEAR</code>. If the mode is strict or smart
   then the field is validated. 
 <li><code>YEAR_OF_ERA</code> and <code>ERA</code> - If both are present, then they
   are combined to form a <code>YEAR</code>. In lenient mode, the <code>YEAR_OF_ERA</code>
   range is not validated, in smart and strict mode it is. The <code>ERA</code> is
   validated for range in all three modes. If only the <code>YEAR_OF_ERA</code> is
   present, and the mode is smart or lenient, then the current era (CE/AD)
   is assumed. In strict mode, no era is assumed and the <code>YEAR_OF_ERA</code> is
   left untouched. If only the <code>ERA</code> is present, then it is left untouched. 
 <li><code>YEAR</code>, <code>MONTH_OF_YEAR</code> and <code>DAY_OF_MONTH</code> -
   If all three are present, then they are combined to form a <code>LocalDate</code>.
   In all three modes, the <code>YEAR</code> is validated. If the mode is smart or strict,
   then the month and day are validated, with the day validated from 1 to 31.
   If the mode is lenient, then the date is combined in a manner equivalent to
   creating a date on the first of January in the requested year, then adding
   the difference in months, then the difference in days.
   If the mode is smart, and the day-of-month is greater than the maximum for
   the year-month, then the day-of-month is adjusted to the last day-of-month.
   If the mode is strict, then the three fields must form a valid date. 
 <li><code>YEAR</code> and <code>DAY_OF_YEAR</code> -
   If both are present, then they are combined to form a <code>LocalDate</code>.
   In all three modes, the <code>YEAR</code> is validated.
   If the mode is lenient, then the date is combined in a manner equivalent to
   creating a date on the first of January in the requested year, then adding
   the difference in days.
   If the mode is smart or strict, then the two fields must form a valid date. 
 <li><code>YEAR</code>, <code>MONTH_OF_YEAR</code>, <code>ALIGNED_WEEK_OF_MONTH</code> and
   <code>ALIGNED_DAY_OF_WEEK_IN_MONTH</code> -
   If all four are present, then they are combined to form a <code>LocalDate</code>.
   In all three modes, the <code>YEAR</code> is validated.
   If the mode is lenient, then the date is combined in a manner equivalent to
   creating a date on the first of January in the requested year, then adding
   the difference in months, then the difference in weeks, then in days.
   If the mode is smart or strict, then the all four fields are validated to
   their outer ranges. The date is then combined in a manner equivalent to
   creating a date on the first day of the requested year and month, then adding
   the amount in weeks and days to reach their values. If the mode is strict,
   the date is additionally validated to check that the day and week adjustment
   did not change the month. 
 <li><code>YEAR</code>, <code>MONTH_OF_YEAR</code>, <code>ALIGNED_WEEK_OF_MONTH</code> and
   <code>DAY_OF_WEEK</code> - If all four are present, then they are combined to
   form a <code>LocalDate</code>. The approach is the same as described above for
   years, months and weeks in <code>ALIGNED_DAY_OF_WEEK_IN_MONTH</code>.
   The day-of-week is adjusted as the next or same matching day-of-week once
   the years, months and weeks have been handled. 
 <li><code>YEAR</code>, <code>ALIGNED_WEEK_OF_YEAR</code> and <code>ALIGNED_DAY_OF_WEEK_IN_YEAR</code> -
   If all three are present, then they are combined to form a <code>LocalDate</code>.
   In all three modes, the <code>YEAR</code> is validated.
   If the mode is lenient, then the date is combined in a manner equivalent to
   creating a date on the first of January in the requested year, then adding
   the difference in weeks, then in days.
   If the mode is smart or strict, then the all three fields are validated to
   their outer ranges. The date is then combined in a manner equivalent to
   creating a date on the first day of the requested year, then adding
   the amount in weeks and days to reach their values. If the mode is strict,
   the date is additionally validated to check that the day and week adjustment
   did not change the year. 
 <li><code>YEAR</code>, <code>ALIGNED_WEEK_OF_YEAR</code> and <code>DAY_OF_WEEK</code> -
   If all three are present, then they are combined to form a <code>LocalDate</code>.
   The approach is the same as described above for years and weeks in  
 <code>ALIGNED_DAY_OF_WEEK_IN_YEAR</code>. The day-of-week is adjusted as the
   next or same matching day-of-week once the years and weeks have been handled. 
 </ul>
 @param fieldValues the map of fields to values, which can be updated, not null
 @param resolverStyle the requested type of resolve, not null
 @return the resolved date, null if insufficient information to create a date
 @throw DateTimeExceptionif the date cannot be resolved, typically
   because of a conflict in the input data
 */
- (JavaTimeLocalDate *)resolveDateWithJavaUtilMap:(id<JavaUtilMap>)fieldValues
                  withJavaTimeFormatResolverStyle:(JavaTimeFormatResolverStyle *)resolverStyle;

/*!
 @brief Obtains an ISO zoned date-time in this chronology from an <code>Instant</code>.
 <p>
  This is equivalent to <code>ZonedDateTime.ofInstant(Instant, ZoneId)</code>.
 @param instant the instant to create the date-time from, not null
 @param zone the time-zone, not null
 @return the zoned date-time, not null
 @throw DateTimeExceptionif the result exceeds the supported range
 */
- (JavaTimeZonedDateTime *)zonedDateTimeWithJavaTimeInstant:(JavaTimeInstant *)instant
                                         withJavaTimeZoneId:(JavaTimeZoneId *)zone;

/*!
 @brief Obtains an ISO zoned date-time from another date-time object.
 <p>
  This is equivalent to <code>ZonedDateTime.from(TemporalAccessor)</code>.
 @param temporal the date-time object to convert, not null
 @return the ISO zoned date-time, not null
 @throw DateTimeExceptionif unable to create the date-time
 */
- (JavaTimeZonedDateTime *)zonedDateTimeWithJavaTimeTemporalTemporalAccessor:(id<JavaTimeTemporalTemporalAccessor>)temporal;

#pragma mark Package-Private

- (void)resolveProlepticMonthWithJavaUtilMap:(id<JavaUtilMap>)fieldValues
             withJavaTimeFormatResolverStyle:(JavaTimeFormatResolverStyle *)resolverStyle;

- (JavaTimeLocalDate *)resolveYearOfEraWithJavaUtilMap:(id<JavaUtilMap>)fieldValues
                       withJavaTimeFormatResolverStyle:(JavaTimeFormatResolverStyle *)resolverStyle;

- (JavaTimeLocalDate *)resolveYMDWithJavaUtilMap:(id<JavaUtilMap>)fieldValues
                 withJavaTimeFormatResolverStyle:(JavaTimeFormatResolverStyle *)resolverStyle;

/*!
 @brief Writes the Chronology using a 
 <a href="../../..
 /serialized-form.html#java.time.chrono.Ser">dedicated serialized form</a>.
 @return the instance of <code>Ser</code>, not null
 */
- (id)writeReplace;

@end

J2OBJC_STATIC_INIT(JavaTimeChronoIsoChronology)

/*!
 @brief Singleton instance of the ISO chronology.
 */
inline JavaTimeChronoIsoChronology *JavaTimeChronoIsoChronology_get_INSTANCE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaTimeChronoIsoChronology *JavaTimeChronoIsoChronology_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaTimeChronoIsoChronology, INSTANCE, JavaTimeChronoIsoChronology *)

J2OBJC_TYPE_LITERAL_HEADER(JavaTimeChronoIsoChronology)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaTimeChronoIsoChronology")
