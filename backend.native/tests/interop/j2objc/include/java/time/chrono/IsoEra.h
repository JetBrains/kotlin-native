//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/time/chrono/IsoEra.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaTimeChronoIsoEra")
#ifdef RESTRICT_JavaTimeChronoIsoEra
#define INCLUDE_ALL_JavaTimeChronoIsoEra 0
#else
#define INCLUDE_ALL_JavaTimeChronoIsoEra 1
#endif
#undef RESTRICT_JavaTimeChronoIsoEra

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaTimeChronoIsoEra_) && (INCLUDE_ALL_JavaTimeChronoIsoEra || defined(INCLUDE_JavaTimeChronoIsoEra))
#define JavaTimeChronoIsoEra_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

#define RESTRICT_JavaTimeChronoEra 1
#define INCLUDE_JavaTimeChronoEra 1
#include "java/time/chrono/Era.h"

@class IOSObjectArray;
@class JavaTimeFormatTextStyle;
@class JavaTimeTemporalValueRange;
@class JavaUtilLocale;
@protocol JavaTimeTemporalTemporal;
@protocol JavaTimeTemporalTemporalField;
@protocol JavaTimeTemporalTemporalQuery;

typedef NS_ENUM(NSUInteger, JavaTimeChronoIsoEra_Enum) {
  JavaTimeChronoIsoEra_Enum_BCE = 0,
  JavaTimeChronoIsoEra_Enum_CE = 1,
};

/*!
 @brief An era in the ISO calendar system.
 <p>
  The ISO-8601 standard does not define eras.
  A definition has therefore been created with two eras - 'Current era' (CE) for
  years on or after 0001-01-01 (ISO), and 'Before current era' (BCE) for years before that. 
 <table summary="ISO years and eras" cellpadding="2" cellspacing="3" border="0">
  <thead>
  <tr class="tableSubHeadingColor">
  <th class="colFirst" align="left">year-of-era</th>
  <th class="colFirst" align="left">era</th>
  <th class="colLast" align="left">proleptic-year</th>
  </tr>
  </thead>
  <tbody>
  <tr class="rowColor">
  <td>2</td><td>CE</td><td>2</td>
  </tr>
  <tr class="altColor">
  <td>1</td><td>CE</td><td>1</td>
  </tr>
  <tr class="rowColor">
  <td>1</td><td>BCE</td><td>0</td>
  </tr>
  <tr class="altColor">
  <td>2</td><td>BCE</td><td>-1</td>
  </tr>
  </tbody>
  </table>
  <p>
  <b>Do not use <code>ordinal()</code> to obtain the numeric representation of <code>IsoEra</code>.
  Use <code>getValue()</code> instead.</b>
 @since 1.8
 */
@interface JavaTimeChronoIsoEra : JavaLangEnum < JavaTimeChronoEra >

@property (readonly, class, nonnull) JavaTimeChronoIsoEra *BCE NS_SWIFT_NAME(BCE);
@property (readonly, class, nonnull) JavaTimeChronoIsoEra *CE NS_SWIFT_NAME(CE);
+ (JavaTimeChronoIsoEra * __nonnull)BCE;

+ (JavaTimeChronoIsoEra * __nonnull)CE;

#pragma mark Public

/*!
 @brief Gets the numeric era <code>int</code> value.
 <p>
  The era BCE has the value 0, while the era CE has the value 1.
 @return the era value, from 0 (BCE) to 1 (CE)
 */
- (jint)getValue;

/*!
 @brief Obtains an instance of <code>IsoEra</code> from an <code>int</code> value.
 <p>
  <code>IsoEra</code> is an enum representing the ISO eras of BCE/CE.
  This factory allows the enum to be obtained from the <code>int</code> value.
 @param isoEra the BCE/CE value to represent, from 0 (BCE) to 1 (CE)
 @return the era singleton, not null
 @throw DateTimeExceptionif the value is invalid
 */
+ (JavaTimeChronoIsoEra *)ofWithInt:(jint)isoEra;

+ (JavaTimeChronoIsoEra *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (JavaTimeChronoIsoEra_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(JavaTimeChronoIsoEra)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT JavaTimeChronoIsoEra *JavaTimeChronoIsoEra_values_[];

/*!
 @brief The singleton instance for the era before the current one, 'Before Current Era',
  which has the numeric value 0.
 */
inline JavaTimeChronoIsoEra *JavaTimeChronoIsoEra_get_BCE(void);
J2OBJC_ENUM_CONSTANT(JavaTimeChronoIsoEra, BCE)

/*!
 @brief The singleton instance for the current era, 'Current Era',
  which has the numeric value 1.
 */
inline JavaTimeChronoIsoEra *JavaTimeChronoIsoEra_get_CE(void);
J2OBJC_ENUM_CONSTANT(JavaTimeChronoIsoEra, CE)

FOUNDATION_EXPORT JavaTimeChronoIsoEra *JavaTimeChronoIsoEra_ofWithInt_(jint isoEra);

FOUNDATION_EXPORT IOSObjectArray *JavaTimeChronoIsoEra_values(void);

FOUNDATION_EXPORT JavaTimeChronoIsoEra *JavaTimeChronoIsoEra_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT JavaTimeChronoIsoEra *JavaTimeChronoIsoEra_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(JavaTimeChronoIsoEra)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaTimeChronoIsoEra")
