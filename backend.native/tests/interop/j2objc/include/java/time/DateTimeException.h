//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/time/DateTimeException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaTimeDateTimeException")
#ifdef RESTRICT_JavaTimeDateTimeException
#define INCLUDE_ALL_JavaTimeDateTimeException 0
#else
#define INCLUDE_ALL_JavaTimeDateTimeException 1
#endif
#undef RESTRICT_JavaTimeDateTimeException

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaTimeDateTimeException_) && (INCLUDE_ALL_JavaTimeDateTimeException || defined(INCLUDE_JavaTimeDateTimeException))
#define JavaTimeDateTimeException_

#define RESTRICT_JavaLangRuntimeException 1
#define INCLUDE_JavaLangRuntimeException 1
#include "java/lang/RuntimeException.h"

@class JavaLangThrowable;

/*!
 @brief Exception used to indicate a problem while calculating a date-time.
 <p>
  This exception is used to indicate problems with creating, querying
  and manipulating date-time objects.
 @since 1.8
 */
@interface JavaTimeDateTimeException : JavaLangRuntimeException

#pragma mark Public

/*!
 @brief Constructs a new date-time exception with the specified message.
 @param message the message to use for this exception, may be null
 */
- (instancetype __nonnull)initWithNSString:(NSString *)message;

/*!
 @brief Constructs a new date-time exception with the specified message and cause.
 @param message the message to use for this exception, may be null
 @param cause the cause of the exception, may be null
 */
- (instancetype __nonnull)initWithNSString:(NSString *)message
                     withJavaLangThrowable:(JavaLangThrowable *)cause;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1
                               withBoolean:(jboolean)arg2
                               withBoolean:(jboolean)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaTimeDateTimeException)

FOUNDATION_EXPORT void JavaTimeDateTimeException_initWithNSString_(JavaTimeDateTimeException *self, NSString *message);

FOUNDATION_EXPORT JavaTimeDateTimeException *new_JavaTimeDateTimeException_initWithNSString_(NSString *message) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaTimeDateTimeException *create_JavaTimeDateTimeException_initWithNSString_(NSString *message);

FOUNDATION_EXPORT void JavaTimeDateTimeException_initWithNSString_withJavaLangThrowable_(JavaTimeDateTimeException *self, NSString *message, JavaLangThrowable *cause);

FOUNDATION_EXPORT JavaTimeDateTimeException *new_JavaTimeDateTimeException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaTimeDateTimeException *create_JavaTimeDateTimeException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause);

J2OBJC_TYPE_LITERAL_HEADER(JavaTimeDateTimeException)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaTimeDateTimeException")
