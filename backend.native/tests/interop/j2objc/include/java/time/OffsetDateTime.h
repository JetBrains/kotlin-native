//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/time/OffsetDateTime.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaTimeOffsetDateTime")
#ifdef RESTRICT_JavaTimeOffsetDateTime
#define INCLUDE_ALL_JavaTimeOffsetDateTime 0
#else
#define INCLUDE_ALL_JavaTimeOffsetDateTime 1
#endif
#undef RESTRICT_JavaTimeOffsetDateTime

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaTimeOffsetDateTime_) && (INCLUDE_ALL_JavaTimeOffsetDateTime || defined(INCLUDE_JavaTimeOffsetDateTime))
#define JavaTimeOffsetDateTime_

#define RESTRICT_JavaTimeTemporalTemporal 1
#define INCLUDE_JavaTimeTemporalTemporal 1
#include "java/time/temporal/Temporal.h"

#define RESTRICT_JavaTimeTemporalTemporalAdjuster 1
#define INCLUDE_JavaTimeTemporalTemporalAdjuster 1
#include "java/time/temporal/TemporalAdjuster.h"

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "java/lang/Comparable.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class JavaTimeClock;
@class JavaTimeDayOfWeek;
@class JavaTimeFormatDateTimeFormatter;
@class JavaTimeInstant;
@class JavaTimeLocalDate;
@class JavaTimeLocalDateTime;
@class JavaTimeLocalTime;
@class JavaTimeMonth;
@class JavaTimeOffsetTime;
@class JavaTimeTemporalValueRange;
@class JavaTimeZoneId;
@class JavaTimeZoneOffset;
@class JavaTimeZonedDateTime;
@protocol JavaIoObjectInput;
@protocol JavaIoObjectOutput;
@protocol JavaLangCharSequence;
@protocol JavaTimeTemporalTemporalAccessor;
@protocol JavaTimeTemporalTemporalAmount;
@protocol JavaTimeTemporalTemporalField;
@protocol JavaTimeTemporalTemporalQuery;
@protocol JavaTimeTemporalTemporalUnit;
@protocol JavaUtilComparator;

/*!
 @brief A date-time with an offset from UTC/Greenwich in the ISO-8601 calendar system,
  such as <code>2007-12-03T10:15:30+01:00</code>.
 <p>
  <code>OffsetDateTime</code> is an immutable representation of a date-time with an offset.
  This class stores all date and time fields, to a precision of nanoseconds,
  as well as the offset from UTC/Greenwich. For example, the value
  "2nd October 2007 at 13:45.30.123456789 +02:00" can be stored in an <code>OffsetDateTime</code>.
  <p>
  <code>OffsetDateTime</code>, <code>java.time.ZonedDateTime</code> and <code>java.time.Instant</code> all store an instant
  on the time-line to nanosecond precision. 
 <code>Instant</code> is the simplest, simply representing the instant. 
 <code>OffsetDateTime</code> adds to the instant the offset from UTC/Greenwich, which allows
  the local date-time to be obtained. 
 <code>ZonedDateTime</code> adds full time-zone rules. 
 <p>
  It is intended that <code>ZonedDateTime</code> or <code>Instant</code> is used to model data
  in simpler applications. This class may be used when modeling date-time concepts in
  more detail, or when communicating to a database or in a network protocol.
 @since 1.8
 */
@interface JavaTimeOffsetDateTime : NSObject < JavaTimeTemporalTemporal, JavaTimeTemporalTemporalAdjuster, JavaLangComparable, JavaIoSerializable >
@property (readonly, class, strong) JavaTimeOffsetDateTime *MIN NS_SWIFT_NAME(MIN);
@property (readonly, class, strong) JavaTimeOffsetDateTime *MAX NS_SWIFT_NAME(MAX);

+ (JavaTimeOffsetDateTime *)MIN;

+ (JavaTimeOffsetDateTime *)MAX;

#pragma mark Public

/*!
 @brief Adjusts the specified temporal object to have the same offset, date
  and time as this object.
 <p>
  This returns a temporal object of the same observable type as the input
  with the offset, date and time changed to be the same as this. 
 <p>
  The adjustment is equivalent to using <code>Temporal.with(TemporalField, long)</code>
  three times, passing <code>ChronoField.EPOCH_DAY</code>,
  <code>ChronoField.NANO_OF_DAY</code> and <code>ChronoField.OFFSET_SECONDS</code> as the fields. 
 <p>
  In most cases, it is clearer to reverse the calling pattern by using 
 <code>Temporal.with(TemporalAdjuster)</code>:
  @code

    // these two lines are equivalent, but the second approach is recommended
    temporal = thisOffsetDateTime.adjustInto(temporal);
    temporal = temporal.with(thisOffsetDateTime); 
  
@endcode
  <p>
  This instance is immutable and unaffected by this method call.
 @param temporal the target object to be adjusted, not null
 @return the adjusted object, not null
 @throw DateTimeExceptionif unable to make the adjustment
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (id<JavaTimeTemporalTemporal>)adjustIntoWithJavaTimeTemporalTemporal:(id<JavaTimeTemporalTemporal>)temporal;

/*!
 @brief Combines this date-time with a time-zone to create a <code>ZonedDateTime</code>
  ensuring that the result has the same instant.
 <p>
  This returns a <code>ZonedDateTime</code> formed from this date-time and the specified time-zone.
  This conversion will ignore the visible local date-time and use the underlying instant instead.
  This avoids any problems with local time-line gaps or overlaps.
  The result might have different values for fields such as hour, minute an even day. 
 <p>
  To attempt to retain the values of the fields, use <code>atZoneSimilarLocal(ZoneId)</code>.
  To use the offset as the zone ID, use <code>toZonedDateTime()</code>.
 @param zone the time-zone to use, not null
 @return the zoned date-time formed from this date-time, not null
 */
- (JavaTimeZonedDateTime *)atZoneSameInstantWithJavaTimeZoneId:(JavaTimeZoneId *)zone;

/*!
 @brief Combines this date-time with a time-zone to create a <code>ZonedDateTime</code>
  trying to keep the same local date and time.
 <p>
  This returns a <code>ZonedDateTime</code> formed from this date-time and the specified time-zone.
  Where possible, the result will have the same local date-time as this object. 
 <p>
  Time-zone rules, such as daylight savings, mean that not every time on the
  local time-line exists. If the local date-time is in a gap or overlap according to
  the rules then a resolver is used to determine the resultant local time and offset.
  This method uses <code>ZonedDateTime.ofLocal(LocalDateTime, ZoneId, ZoneOffset)</code>
  to retain the offset from this instance if possible. 
 <p>
  Finer control over gaps and overlaps is available in two ways.
  If you simply want to use the later offset at overlaps then call 
 <code>ZonedDateTime.withLaterOffsetAtOverlap()</code> immediately after this method. 
 <p>
  To create a zoned date-time at the same instant irrespective of the local time-line,
  use <code>atZoneSameInstant(ZoneId)</code>.
  To use the offset as the zone ID, use <code>toZonedDateTime()</code>.
 @param zone the time-zone to use, not null
 @return the zoned date-time formed from this date and the earliest valid time for the zone, not null
 */
- (JavaTimeZonedDateTime *)atZoneSimilarLocalWithJavaTimeZoneId:(JavaTimeZoneId *)zone;

/*!
 @brief Compares this date-time to another date-time.
 <p>
  The comparison is based on the instant then on the local date-time.
  It is "consistent with equals", as defined by <code>Comparable</code>.
  <p>
  For example, the following is the comparator order: 
 <ol>
  <li><code>2008-12-03T10:30+01:00</code></li>
  <li><code>2008-12-03T11:00+01:00</code></li>
  <li><code>2008-12-03T12:00+02:00</code></li>
  <li><code>2008-12-03T11:30+01:00</code></li>
  <li><code>2008-12-03T12:00+01:00</code></li>
  <li><code>2008-12-03T12:30+01:00</code></li>
  </ol>
  Values #2 and #3 represent the same instant on the time-line.
  When two values represent the same instant, the local date-time is compared
  to distinguish them. This step is needed to make the ordering
  consistent with <code>equals()</code>.
 @param other the other date-time to compare to, not null
 @return the comparator value, negative if less, positive if greater
 */
- (jint)compareToWithId:(JavaTimeOffsetDateTime *)other;

/*!
 @brief Checks if this date-time is equal to another date-time.
 <p>
  The comparison is based on the local date-time and the offset.
  To compare for the same instant on the time-line, use <code>isEqual</code>.
  Only objects of type <code>OffsetDateTime</code> are compared, other types return false.
 @param obj the object to check, null returns false
 @return true if this is equal to the other date-time
 */
- (jboolean)isEqual:(id)obj;

/*!
 @brief Formats this date-time using the specified formatter.
 <p>
  This date-time will be passed to the formatter to produce a string.
 @param formatter the formatter to use, not null
 @return the formatted date-time string, not null
 @throw DateTimeExceptionif an error occurs during printing
 */
- (NSString *)formatWithJavaTimeFormatDateTimeFormatter:(JavaTimeFormatDateTimeFormatter *)formatter;

/*!
 @brief Obtains an instance of <code>OffsetDateTime</code> from a temporal object.
 <p>
  This obtains an offset date-time based on the specified temporal.
  A <code>TemporalAccessor</code> represents an arbitrary set of date and time information,
  which this factory converts to an instance of <code>OffsetDateTime</code>.
  <p>
  The conversion will first obtain a <code>ZoneOffset</code> from the temporal object.
  It will then try to obtain a <code>LocalDateTime</code>, falling back to an <code>Instant</code> if necessary.
  The result will be the combination of <code>ZoneOffset</code> with either with 
 <code>LocalDateTime</code> or <code>Instant</code>.
  Implementations are permitted to perform optimizations such as accessing
  those fields that are equivalent to the relevant objects. 
 <p>
  This method matches the signature of the functional interface <code>TemporalQuery</code>
  allowing it to be used as a query via method reference, <code>OffsetDateTime::from</code>.
 @param temporal the temporal object to convert, not null
 @return the offset date-time, not null
 @throw DateTimeExceptionif unable to convert to an <code>OffsetDateTime</code>
 */
+ (JavaTimeOffsetDateTime *)fromWithJavaTimeTemporalTemporalAccessor:(id<JavaTimeTemporalTemporalAccessor>)temporal;

/*!
 @brief Gets the value of the specified field from this date-time as an <code>int</code>.
 <p>
  This queries this date-time for the value of the specified field.
  The returned value will always be within the valid range of values for the field.
  If it is not possible to return the value, because the field is not supported
  or for some other reason, an exception is thrown. 
 <p>
  If the field is a <code>ChronoField</code> then the query is implemented here.
  The <code>supported fields</code> will return valid
  values based on this date-time, except <code>NANO_OF_DAY</code>, <code>MICRO_OF_DAY</code>,
  <code>EPOCH_DAY</code>, <code>PROLEPTIC_MONTH</code> and <code>INSTANT_SECONDS</code> which are too
  large to fit in an <code>int</code> and throw a <code>DateTimeException</code>.
  All other <code>ChronoField</code> instances will throw an <code>UnsupportedTemporalTypeException</code>.
  <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.getFrom(TemporalAccessor)</code>
  passing <code>this</code> as the argument. Whether the value can be obtained,
  and what the value represents, is determined by the field.
 @param field the field to get, not null
 @return the value for the field
 @throw DateTimeExceptionif a value for the field cannot be obtained or
          the value is outside the range of valid values for the field
 @throw UnsupportedTemporalTypeExceptionif the field is not supported or
          the range of values exceeds an <code>int</code>
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (jint)getWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field;

/*!
 @brief Gets the day-of-month field.
 <p>
  This method returns the primitive <code>int</code> value for the day-of-month.
 @return the day-of-month, from 1 to 31
 */
- (jint)getDayOfMonth;

/*!
 @brief Gets the day-of-week field, which is an enum <code>DayOfWeek</code>.
 <p>
  This method returns the enum <code>DayOfWeek</code> for the day-of-week.
  This avoids confusion as to what <code>int</code> values mean.
  If you need access to the primitive <code>int</code> value then the enum
  provides the <code>int value</code>.
  <p>
  Additional information can be obtained from the <code>DayOfWeek</code>.
  This includes textual names of the values.
 @return the day-of-week, not null
 */
- (JavaTimeDayOfWeek *)getDayOfWeek;

/*!
 @brief Gets the day-of-year field.
 <p>
  This method returns the primitive <code>int</code> value for the day-of-year.
 @return the day-of-year, from 1 to 365, or 366 in a leap year
 */
- (jint)getDayOfYear;

/*!
 @brief Gets the hour-of-day field.
 @return the hour-of-day, from 0 to 23
 */
- (jint)getHour;

/*!
 @brief Gets the value of the specified field from this date-time as a <code>long</code>.
 <p>
  This queries this date-time for the value of the specified field.
  If it is not possible to return the value, because the field is not supported
  or for some other reason, an exception is thrown. 
 <p>
  If the field is a <code>ChronoField</code> then the query is implemented here.
  The <code>supported fields</code> will return valid
  values based on this date-time.
  All other <code>ChronoField</code> instances will throw an <code>UnsupportedTemporalTypeException</code>.
  <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.getFrom(TemporalAccessor)</code>
  passing <code>this</code> as the argument. Whether the value can be obtained,
  and what the value represents, is determined by the field.
 @param field the field to get, not null
 @return the value for the field
 @throw DateTimeExceptionif a value for the field cannot be obtained
 @throw UnsupportedTemporalTypeExceptionif the field is not supported
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (jlong)getLongWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field;

/*!
 @brief Gets the minute-of-hour field.
 @return the minute-of-hour, from 0 to 59
 */
- (jint)getMinute;

/*!
 @brief Gets the month-of-year field using the <code>Month</code> enum.
 <p>
  This method returns the enum <code>Month</code> for the month.
  This avoids confusion as to what <code>int</code> values mean.
  If you need access to the primitive <code>int</code> value then the enum
  provides the <code>int value</code>.
 @return the month-of-year, not null
 - seealso: #getMonthValue()
 */
- (JavaTimeMonth *)getMonth;

/*!
 @brief Gets the month-of-year field from 1 to 12.
 <p>
  This method returns the month as an <code>int</code> from 1 to 12.
  Application code is frequently clearer if the enum <code>Month</code>
  is used by calling <code>getMonth()</code>.
 @return the month-of-year, from 1 to 12
 - seealso: #getMonth()
 */
- (jint)getMonthValue;

/*!
 @brief Gets the nano-of-second field.
 @return the nano-of-second, from 0 to 999,999,999
 */
- (jint)getNano;

/*!
 @brief Gets the zone offset, such as '+01:00'.
 <p>
  This is the offset of the local date-time from UTC/Greenwich.
 @return the zone offset, not null
 */
- (JavaTimeZoneOffset *)getOffset;

/*!
 @brief Gets the second-of-minute field.
 @return the second-of-minute, from 0 to 59
 */
- (jint)getSecond;

/*!
 @brief Gets the year field.
 <p>
  This method returns the primitive <code>int</code> value for the year. 
 <p>
  The year returned by this method is proleptic as per <code>get(YEAR)</code>.
  To obtain the year-of-era, use <code>get(YEAR_OF_ERA)</code>.
 @return the year, from MIN_YEAR to MAX_YEAR
 */
- (jint)getYear;

/*!
 @brief A hash code for this date-time.
 @return a suitable hash code
 */
- (NSUInteger)hash;

/*!
 @brief Checks if the instant of this date-time is after that of the specified date-time.
 <p>
  This method differs from the comparison in <code>compareTo</code> and <code>equals</code> in that it
  only compares the instant of the date-time. This is equivalent to using 
 <code>dateTime1.toInstant().isAfter(dateTime2.toInstant());</code>.
 @param other the other date-time to compare to, not null
 @return true if this is after the instant of the specified date-time
 */
- (jboolean)isAfterWithJavaTimeOffsetDateTime:(JavaTimeOffsetDateTime *)other;

/*!
 @brief Checks if the instant of this date-time is before that of the specified date-time.
 <p>
  This method differs from the comparison in <code>compareTo</code> in that it
  only compares the instant of the date-time. This is equivalent to using 
 <code>dateTime1.toInstant().isBefore(dateTime2.toInstant());</code>.
 @param other the other date-time to compare to, not null
 @return true if this is before the instant of the specified date-time
 */
- (jboolean)isBeforeWithJavaTimeOffsetDateTime:(JavaTimeOffsetDateTime *)other;

/*!
 @brief Checks if the instant of this date-time is equal to that of the specified date-time.
 <p>
  This method differs from the comparison in <code>compareTo</code> and <code>equals</code>
  in that it only compares the instant of the date-time. This is equivalent to using 
 <code>dateTime1.toInstant().equals(dateTime2.toInstant());</code>.
 @param other the other date-time to compare to, not null
 @return true if the instant equals the instant of the specified date-time
 */
- (jboolean)isEqualWithJavaTimeOffsetDateTime:(JavaTimeOffsetDateTime *)other;

/*!
 @brief Checks if the specified field is supported.
 <p>
  This checks if this date-time can be queried for the specified field.
  If false, then calling the <code>range</code>,
  <code>get</code> and <code>with(TemporalField, long)</code>
  methods will throw an exception. 
 <p>
  If the field is a <code>ChronoField</code> then the query is implemented here.
  The supported fields are: 
 <ul>
  <li><code>NANO_OF_SECOND</code>
  <li><code>NANO_OF_DAY</code>
  <li><code>MICRO_OF_SECOND</code>
  <li><code>MICRO_OF_DAY</code>
  <li><code>MILLI_OF_SECOND</code>
  <li><code>MILLI_OF_DAY</code>
  <li><code>SECOND_OF_MINUTE</code>
  <li><code>SECOND_OF_DAY</code>
  <li><code>MINUTE_OF_HOUR</code>
  <li><code>MINUTE_OF_DAY</code>
  <li><code>HOUR_OF_AMPM</code>
  <li><code>CLOCK_HOUR_OF_AMPM</code>
  <li><code>HOUR_OF_DAY</code>
  <li><code>CLOCK_HOUR_OF_DAY</code>
  <li><code>AMPM_OF_DAY</code>
  <li><code>DAY_OF_WEEK</code>
  <li><code>ALIGNED_DAY_OF_WEEK_IN_MONTH</code>
  <li><code>ALIGNED_DAY_OF_WEEK_IN_YEAR</code>
  <li><code>DAY_OF_MONTH</code>
  <li><code>DAY_OF_YEAR</code>
  <li><code>EPOCH_DAY</code>
  <li><code>ALIGNED_WEEK_OF_MONTH</code>
  <li><code>ALIGNED_WEEK_OF_YEAR</code>
  <li><code>MONTH_OF_YEAR</code>
  <li><code>PROLEPTIC_MONTH</code>
  <li><code>YEAR_OF_ERA</code>
  <li><code>YEAR</code>
  <li><code>ERA</code>
  <li><code>INSTANT_SECONDS</code>
  <li><code>OFFSET_SECONDS</code>
  </ul>
  All other <code>ChronoField</code> instances will return false. 
 <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.isSupportedBy(TemporalAccessor)</code>
  passing <code>this</code> as the argument.
  Whether the field is supported is determined by the field.
 @param field the field to check, null returns false
 @return true if the field is supported on this date-time, false if not
 */
- (jboolean)isSupportedWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field;

/*!
 @brief Checks if the specified unit is supported.
 <p>
  This checks if the specified unit can be added to, or subtracted from, this date-time.
  If false, then calling the <code>plus(long, TemporalUnit)</code> and 
 <code>minus</code> methods will throw an exception. 
 <p>
  If the unit is a <code>ChronoUnit</code> then the query is implemented here.
  The supported units are: 
 <ul>
  <li><code>NANOS</code>
  <li><code>MICROS</code>
  <li><code>MILLIS</code>
  <li><code>SECONDS</code>
  <li><code>MINUTES</code>
  <li><code>HOURS</code>
  <li><code>HALF_DAYS</code>
  <li><code>DAYS</code>
  <li><code>WEEKS</code>
  <li><code>MONTHS</code>
  <li><code>YEARS</code>
  <li><code>DECADES</code>
  <li><code>CENTURIES</code>
  <li><code>MILLENNIA</code>
  <li><code>ERAS</code>
  </ul>
  All other <code>ChronoUnit</code> instances will return false. 
 <p>
  If the unit is not a <code>ChronoUnit</code>, then the result of this method
  is obtained by invoking <code>TemporalUnit.isSupportedBy(Temporal)</code>
  passing <code>this</code> as the argument.
  Whether the unit is supported is determined by the unit.
 @param unit the unit to check, null returns false
 @return true if the unit can be added/subtracted, false if not
 */
- (jboolean)isSupportedWithJavaTimeTemporalTemporalUnit:(id<JavaTimeTemporalTemporalUnit>)unit;

/*!
 @brief Returns a copy of this date-time with the specified amount subtracted.
 <p>
  This returns an <code>OffsetDateTime</code>, based on this one, with the amount
  in terms of the unit subtracted. If it is not possible to subtract the amount,
  because the unit is not supported or for some other reason, an exception is thrown. 
 <p>
  This method is equivalent to <code>plus(long, TemporalUnit)</code> with the amount negated.
  See that method for a full description of how addition, and thus subtraction, works. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param amountToSubtract the amount of the unit to subtract from the result, may be negative
 @param unit the unit of the amount to subtract, not null
 @return an <code>OffsetDateTime</code> based on this date-time with the specified amount subtracted, not null
 @throw DateTimeExceptionif the subtraction cannot be made
 @throw UnsupportedTemporalTypeExceptionif the unit is not supported
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeOffsetDateTime *)minusWithLong:(jlong)amountToSubtract
         withJavaTimeTemporalTemporalUnit:(id<JavaTimeTemporalTemporalUnit>)unit;

/*!
 @brief Returns a copy of this date-time with the specified amount subtracted.
 <p>
  This returns an <code>OffsetDateTime</code>, based on this one, with the specified amount subtracted.
  The amount is typically <code>Period</code> or <code>Duration</code> but may be
  any other type implementing the <code>TemporalAmount</code> interface. 
 <p>
  The calculation is delegated to the amount object by calling 
 <code>TemporalAmount.subtractFrom(Temporal)</code>. The amount implementation is free
  to implement the subtraction in any way it wishes, however it typically
  calls back to <code>minus(long, TemporalUnit)</code>. Consult the documentation
  of the amount implementation to determine if it can be successfully subtracted. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param amountToSubtract the amount to subtract, not null
 @return an <code>OffsetDateTime</code> based on this date-time with the subtraction made, not null
 @throw DateTimeExceptionif the subtraction cannot be made
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeOffsetDateTime *)minusWithJavaTimeTemporalTemporalAmount:(id<JavaTimeTemporalTemporalAmount>)amountToSubtract;

/*!
 @brief Returns a copy of this <code>OffsetDateTime</code> with the specified number of days subtracted.
 <p>
  This method subtracts the specified amount from the days field decrementing the
  month and year fields as necessary to ensure the result remains valid.
  The result is only invalid if the maximum/minimum year is exceeded. 
 <p>
  For example, 2008-12-31 minus one day would result in 2009-01-01. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param days the days to subtract, may be negative
 @return an <code>OffsetDateTime</code> based on this date-time with the days subtracted, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeOffsetDateTime *)minusDaysWithLong:(jlong)days;

/*!
 @brief Returns a copy of this <code>OffsetDateTime</code> with the specified number of hours subtracted.
 <p>
  This instance is immutable and unaffected by this method call.
 @param hours the hours to subtract, may be negative
 @return an <code>OffsetDateTime</code> based on this date-time with the hours subtracted, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeOffsetDateTime *)minusHoursWithLong:(jlong)hours;

/*!
 @brief Returns a copy of this <code>OffsetDateTime</code> with the specified number of minutes subtracted.
 <p>
  This instance is immutable and unaffected by this method call.
 @param minutes the minutes to subtract, may be negative
 @return an <code>OffsetDateTime</code> based on this date-time with the minutes subtracted, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeOffsetDateTime *)minusMinutesWithLong:(jlong)minutes;

/*!
 @brief Returns a copy of this <code>OffsetDateTime</code> with the specified number of months subtracted.
 <p>
  This method subtracts the specified amount from the months field in three steps: 
 <ol>
  <li>Subtract the input months from the month-of-year field</li>
  <li>Check if the resulting date would be invalid</li>
  <li>Adjust the day-of-month to the last valid day if necessary</li>
  </ol>
  <p>
  For example, 2007-03-31 minus one month would result in the invalid date
  2007-04-31. Instead of returning an invalid result, the last valid day
  of the month, 2007-04-30, is selected instead. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param months the months to subtract, may be negative
 @return an <code>OffsetDateTime</code> based on this date-time with the months subtracted, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeOffsetDateTime *)minusMonthsWithLong:(jlong)months;

/*!
 @brief Returns a copy of this <code>OffsetDateTime</code> with the specified number of nanoseconds subtracted.
 <p>
  This instance is immutable and unaffected by this method call.
 @param nanos the nanos to subtract, may be negative
 @return an <code>OffsetDateTime</code> based on this date-time with the nanoseconds subtracted, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeOffsetDateTime *)minusNanosWithLong:(jlong)nanos;

/*!
 @brief Returns a copy of this <code>OffsetDateTime</code> with the specified number of seconds subtracted.
 <p>
  This instance is immutable and unaffected by this method call.
 @param seconds the seconds to subtract, may be negative
 @return an <code>OffsetDateTime</code> based on this date-time with the seconds subtracted, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeOffsetDateTime *)minusSecondsWithLong:(jlong)seconds;

/*!
 @brief Returns a copy of this <code>OffsetDateTime</code> with the specified number of weeks subtracted.
 <p>
  This method subtracts the specified amount in weeks from the days field decrementing
  the month and year fields as necessary to ensure the result remains valid.
  The result is only invalid if the maximum/minimum year is exceeded. 
 <p>
  For example, 2008-12-31 minus one week would result in 2009-01-07. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param weeks the weeks to subtract, may be negative
 @return an <code>OffsetDateTime</code> based on this date-time with the weeks subtracted, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeOffsetDateTime *)minusWeeksWithLong:(jlong)weeks;

/*!
 @brief Returns a copy of this <code>OffsetDateTime</code> with the specified number of years subtracted.
 <p>
  This method subtracts the specified amount from the years field in three steps: 
 <ol>
  <li>Subtract the input years from the year field</li>
  <li>Check if the resulting date would be invalid</li>
  <li>Adjust the day-of-month to the last valid day if necessary</li>
  </ol>
  <p>
  For example, 2008-02-29 (leap year) minus one year would result in the
  invalid date 2009-02-29 (standard year). Instead of returning an invalid
  result, the last valid day of the month, 2009-02-28, is selected instead. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param years the years to subtract, may be negative
 @return an <code>OffsetDateTime</code> based on this date-time with the years subtracted, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeOffsetDateTime *)minusYearsWithLong:(jlong)years;

/*!
 @brief Obtains the current date-time from the system clock in the default time-zone.
 <p>
  This will query the <code>system clock</code> in the default
  time-zone to obtain the current date-time.
  The offset will be calculated from the time-zone in the clock. 
 <p>
  Using this method will prevent the ability to use an alternate clock for testing
  because the clock is hard-coded.
 @return the current date-time using the system clock, not null
 */
+ (JavaTimeOffsetDateTime *)now;

/*!
 @brief Obtains the current date-time from the specified clock.
 <p>
  This will query the specified clock to obtain the current date-time.
  The offset will be calculated from the time-zone in the clock. 
 <p>
  Using this method allows the use of an alternate clock for testing.
  The alternate clock may be introduced using <code>dependency injection</code>.
 @param clock the clock to use, not null
 @return the current date-time, not null
 */
+ (JavaTimeOffsetDateTime *)nowWithJavaTimeClock:(JavaTimeClock *)clock;

/*!
 @brief Obtains the current date-time from the system clock in the specified time-zone.
 <p>
  This will query the <code>system clock</code> to obtain the current date-time.
  Specifying the time-zone avoids dependence on the default time-zone.
  The offset will be calculated from the specified time-zone. 
 <p>
  Using this method will prevent the ability to use an alternate clock for testing
  because the clock is hard-coded.
 @param zone the zone ID to use, not null
 @return the current date-time using the system clock, not null
 */
+ (JavaTimeOffsetDateTime *)nowWithJavaTimeZoneId:(JavaTimeZoneId *)zone;

/*!
 @brief Obtains an instance of <code>OffsetDateTime</code> from a year, month, day,
  hour, minute, second, nanosecond and offset.
 <p>
  This creates an offset date-time with the seven specified fields. 
 <p>
  This method exists primarily for writing test cases.
  Non test-code will typically use other methods to create an offset time. 
 <code>LocalDateTime</code> has five additional convenience variants of the
  equivalent factory method taking fewer arguments.
  They are not provided here to reduce the footprint of the API.
 @param year the year to represent, from MIN_YEAR to MAX_YEAR
 @param month the month-of-year to represent, from 1 (January) to 12 (December)
 @param dayOfMonth the day-of-month to represent, from 1 to 31
 @param hour the hour-of-day to represent, from 0 to 23
 @param minute the minute-of-hour to represent, from 0 to 59
 @param second the second-of-minute to represent, from 0 to 59
 @param nanoOfSecond the nano-of-second to represent, from 0 to 999,999,999
 @param offset the zone offset, not null
 @return the offset date-time, not null
 @throw DateTimeExceptionif the value of any field is out of range, or
   if the day-of-month is invalid for the month-year
 */
+ (JavaTimeOffsetDateTime *)ofWithInt:(jint)year
                              withInt:(jint)month
                              withInt:(jint)dayOfMonth
                              withInt:(jint)hour
                              withInt:(jint)minute
                              withInt:(jint)second
                              withInt:(jint)nanoOfSecond
               withJavaTimeZoneOffset:(JavaTimeZoneOffset *)offset;

/*!
 @brief Obtains an instance of <code>OffsetDateTime</code> from a date, time and offset.
 <p>
  This creates an offset date-time with the specified local date, time and offset.
 @param date the local date, not null
 @param time the local time, not null
 @param offset the zone offset, not null
 @return the offset date-time, not null
 */
+ (JavaTimeOffsetDateTime *)ofWithJavaTimeLocalDate:(JavaTimeLocalDate *)date
                              withJavaTimeLocalTime:(JavaTimeLocalTime *)time
                             withJavaTimeZoneOffset:(JavaTimeZoneOffset *)offset;

/*!
 @brief Obtains an instance of <code>OffsetDateTime</code> from a date-time and offset.
 <p>
  This creates an offset date-time with the specified local date-time and offset.
 @param dateTime the local date-time, not null
 @param offset the zone offset, not null
 @return the offset date-time, not null
 */
+ (JavaTimeOffsetDateTime *)ofWithJavaTimeLocalDateTime:(JavaTimeLocalDateTime *)dateTime
                                 withJavaTimeZoneOffset:(JavaTimeZoneOffset *)offset;

/*!
 @brief Obtains an instance of <code>OffsetDateTime</code> from an <code>Instant</code> and zone ID.
 <p>
  This creates an offset date-time with the same instant as that specified.
  Finding the offset from UTC/Greenwich is simple as there is only one valid
  offset for each instant.
 @param instant the instant to create the date-time from, not null
 @param zone the time-zone, which may be an offset, not null
 @return the offset date-time, not null
 @throw DateTimeExceptionif the result exceeds the supported range
 */
+ (JavaTimeOffsetDateTime *)ofInstantWithJavaTimeInstant:(JavaTimeInstant *)instant
                                      withJavaTimeZoneId:(JavaTimeZoneId *)zone;

/*!
 @brief Obtains an instance of <code>OffsetDateTime</code> from a text string
  such as <code>2007-12-03T10:15:30+01:00</code>.
 <p>
  The string must represent a valid date-time and is parsed using 
 <code>java.time.format.DateTimeFormatter.ISO_OFFSET_DATE_TIME</code>.
 @param text the text to parse such as "2007-12-03T10:15:30+01:00", not null
 @return the parsed offset date-time, not null
 @throw DateTimeParseExceptionif the text cannot be parsed
 */
+ (JavaTimeOffsetDateTime *)parseWithJavaLangCharSequence:(id<JavaLangCharSequence>)text;

/*!
 @brief Obtains an instance of <code>OffsetDateTime</code> from a text string using a specific formatter.
 <p>
  The text is parsed using the formatter, returning a date-time.
 @param text the text to parse, not null
 @param formatter the formatter to use, not null
 @return the parsed offset date-time, not null
 @throw DateTimeParseExceptionif the text cannot be parsed
 */
+ (JavaTimeOffsetDateTime *)parseWithJavaLangCharSequence:(id<JavaLangCharSequence>)text
                      withJavaTimeFormatDateTimeFormatter:(JavaTimeFormatDateTimeFormatter *)formatter;

/*!
 @brief Returns a copy of this date-time with the specified amount added.
 <p>
  This returns an <code>OffsetDateTime</code>, based on this one, with the amount
  in terms of the unit added. If it is not possible to add the amount, because the
  unit is not supported or for some other reason, an exception is thrown. 
 <p>
  If the field is a <code>ChronoUnit</code> then the addition is implemented by 
 <code>LocalDateTime.plus(long, TemporalUnit)</code>.
  The offset is not part of the calculation and will be unchanged in the result. 
 <p>
  If the field is not a <code>ChronoUnit</code>, then the result of this method
  is obtained by invoking <code>TemporalUnit.addTo(Temporal, long)</code>
  passing <code>this</code> as the argument. In this case, the unit determines
  whether and how to perform the addition. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param amountToAdd the amount of the unit to add to the result, may be negative
 @param unit the unit of the amount to add, not null
 @return an <code>OffsetDateTime</code> based on this date-time with the specified amount added, not null
 @throw DateTimeExceptionif the addition cannot be made
 @throw UnsupportedTemporalTypeExceptionif the unit is not supported
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeOffsetDateTime *)plusWithLong:(jlong)amountToAdd
        withJavaTimeTemporalTemporalUnit:(id<JavaTimeTemporalTemporalUnit>)unit;

/*!
 @brief Returns a copy of this date-time with the specified amount added.
 <p>
  This returns an <code>OffsetDateTime</code>, based on this one, with the specified amount added.
  The amount is typically <code>Period</code> or <code>Duration</code> but may be
  any other type implementing the <code>TemporalAmount</code> interface. 
 <p>
  The calculation is delegated to the amount object by calling 
 <code>TemporalAmount.addTo(Temporal)</code>. The amount implementation is free
  to implement the addition in any way it wishes, however it typically
  calls back to <code>plus(long, TemporalUnit)</code>. Consult the documentation
  of the amount implementation to determine if it can be successfully added. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param amountToAdd the amount to add, not null
 @return an <code>OffsetDateTime</code> based on this date-time with the addition made, not null
 @throw DateTimeExceptionif the addition cannot be made
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeOffsetDateTime *)plusWithJavaTimeTemporalTemporalAmount:(id<JavaTimeTemporalTemporalAmount>)amountToAdd;

/*!
 @brief Returns a copy of this OffsetDateTime with the specified number of days added.
 <p>
  This method adds the specified amount to the days field incrementing the
  month and year fields as necessary to ensure the result remains valid.
  The result is only invalid if the maximum/minimum year is exceeded. 
 <p>
  For example, 2008-12-31 plus one day would result in 2009-01-01. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param days the days to add, may be negative
 @return an <code>OffsetDateTime</code> based on this date-time with the days added, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeOffsetDateTime *)plusDaysWithLong:(jlong)days;

/*!
 @brief Returns a copy of this <code>OffsetDateTime</code> with the specified number of hours added.
 <p>
  This instance is immutable and unaffected by this method call.
 @param hours the hours to add, may be negative
 @return an <code>OffsetDateTime</code> based on this date-time with the hours added, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeOffsetDateTime *)plusHoursWithLong:(jlong)hours;

/*!
 @brief Returns a copy of this <code>OffsetDateTime</code> with the specified number of minutes added.
 <p>
  This instance is immutable and unaffected by this method call.
 @param minutes the minutes to add, may be negative
 @return an <code>OffsetDateTime</code> based on this date-time with the minutes added, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeOffsetDateTime *)plusMinutesWithLong:(jlong)minutes;

/*!
 @brief Returns a copy of this <code>OffsetDateTime</code> with the specified number of months added.
 <p>
  This method adds the specified amount to the months field in three steps: 
 <ol>
  <li>Add the input months to the month-of-year field</li>
  <li>Check if the resulting date would be invalid</li>
  <li>Adjust the day-of-month to the last valid day if necessary</li>
  </ol>
  <p>
  For example, 2007-03-31 plus one month would result in the invalid date
  2007-04-31. Instead of returning an invalid result, the last valid day
  of the month, 2007-04-30, is selected instead. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param months the months to add, may be negative
 @return an <code>OffsetDateTime</code> based on this date-time with the months added, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeOffsetDateTime *)plusMonthsWithLong:(jlong)months;

/*!
 @brief Returns a copy of this <code>OffsetDateTime</code> with the specified number of nanoseconds added.
 <p>
  This instance is immutable and unaffected by this method call.
 @param nanos the nanos to add, may be negative
 @return an <code>OffsetDateTime</code> based on this date-time with the nanoseconds added, not null
 @throw DateTimeExceptionif the unit cannot be added to this type
 */
- (JavaTimeOffsetDateTime *)plusNanosWithLong:(jlong)nanos;

/*!
 @brief Returns a copy of this <code>OffsetDateTime</code> with the specified number of seconds added.
 <p>
  This instance is immutable and unaffected by this method call.
 @param seconds the seconds to add, may be negative
 @return an <code>OffsetDateTime</code> based on this date-time with the seconds added, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeOffsetDateTime *)plusSecondsWithLong:(jlong)seconds;

/*!
 @brief Returns a copy of this OffsetDateTime with the specified number of weeks added.
 <p>
  This method adds the specified amount in weeks to the days field incrementing
  the month and year fields as necessary to ensure the result remains valid.
  The result is only invalid if the maximum/minimum year is exceeded. 
 <p>
  For example, 2008-12-31 plus one week would result in 2009-01-07. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param weeks the weeks to add, may be negative
 @return an <code>OffsetDateTime</code> based on this date-time with the weeks added, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeOffsetDateTime *)plusWeeksWithLong:(jlong)weeks;

/*!
 @brief Returns a copy of this <code>OffsetDateTime</code> with the specified number of years added.
 <p>
  This method adds the specified amount to the years field in three steps: 
 <ol>
  <li>Add the input years to the year field</li>
  <li>Check if the resulting date would be invalid</li>
  <li>Adjust the day-of-month to the last valid day if necessary</li>
  </ol>
  <p>
  For example, 2008-02-29 (leap year) plus one year would result in the
  invalid date 2009-02-29 (standard year). Instead of returning an invalid
  result, the last valid day of the month, 2009-02-28, is selected instead. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param years the years to add, may be negative
 @return an <code>OffsetDateTime</code> based on this date-time with the years added, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeOffsetDateTime *)plusYearsWithLong:(jlong)years;

/*!
 @brief Queries this date-time using the specified query.
 <p>
  This queries this date-time using the specified query strategy object.
  The <code>TemporalQuery</code> object defines the logic to be used to
  obtain the result. Read the documentation of the query to understand
  what the result of this method will be. 
 <p>
  The result of this method is obtained by invoking the 
 <code>TemporalQuery.queryFrom(TemporalAccessor)</code> method on the
  specified query passing <code>this</code> as the argument.
 @param query the query to invoke, not null
 @return the query result, null may be returned (defined by the query)
 @throw DateTimeExceptionif unable to query (defined by the query)
 @throw ArithmeticExceptionif numeric overflow occurs (defined by the query)
 */
- (id)queryWithJavaTimeTemporalTemporalQuery:(id<JavaTimeTemporalTemporalQuery>)query;

/*!
 @brief Gets the range of valid values for the specified field.
 <p>
  The range object expresses the minimum and maximum valid values for a field.
  This date-time is used to enhance the accuracy of the returned range.
  If it is not possible to return the range, because the field is not supported
  or for some other reason, an exception is thrown. 
 <p>
  If the field is a <code>ChronoField</code> then the query is implemented here.
  The <code>supported fields</code> will return
  appropriate range instances.
  All other <code>ChronoField</code> instances will throw an <code>UnsupportedTemporalTypeException</code>.
  <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.rangeRefinedBy(TemporalAccessor)</code>
  passing <code>this</code> as the argument.
  Whether the range can be obtained is determined by the field.
 @param field the field to query the range for, not null
 @return the range of valid values for the field, not null
 @throw DateTimeExceptionif the range for the field cannot be obtained
 @throw UnsupportedTemporalTypeExceptionif the field is not supported
 */
- (JavaTimeTemporalValueRange *)rangeWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field;

/*!
 @brief Gets a comparator that compares two <code>OffsetDateTime</code> instances
  based solely on the instant.
 <p>
  This method differs from the comparison in <code>compareTo</code> in that it
  only compares the underlying instant.
 @return a comparator that compares in time-line order
 - seealso: #isAfter
 - seealso: #isBefore
 - seealso: #isEqual
 */
+ (id<JavaUtilComparator>)timeLineOrder;

/*!
 @brief Converts this date-time to the number of seconds from the epoch of 1970-01-01T00:00:00Z.
 <p>
  This allows this date-time to be converted to a value of the 
 <code>epoch-seconds</code> field. This is primarily
  intended for low-level conversions rather than general application usage.
 @return the number of seconds from the epoch of 1970-01-01T00:00:00Z
 */
- (jlong)toEpochSecond;

/*!
 @brief Converts this date-time to an <code>Instant</code>.
 <p>
  This returns an <code>Instant</code> representing the same point on the
  time-line as this date-time.
 @return an <code>Instant</code> representing the same instant, not null
 */
- (JavaTimeInstant *)toInstant;

/*!
 @brief Gets the <code>LocalDate</code> part of this date-time.
 <p>
  This returns a <code>LocalDate</code> with the same year, month and day
  as this date-time.
 @return the date part of this date-time, not null
 */
- (JavaTimeLocalDate *)toLocalDate;

/*!
 @brief Gets the <code>LocalDateTime</code> part of this date-time.
 <p>
  This returns a <code>LocalDateTime</code> with the same year, month, day and time
  as this date-time.
 @return the local date-time part of this date-time, not null
 */
- (JavaTimeLocalDateTime *)toLocalDateTime;

/*!
 @brief Gets the <code>LocalTime</code> part of this date-time.
 <p>
  This returns a <code>LocalTime</code> with the same hour, minute, second and
  nanosecond as this date-time.
 @return the time part of this date-time, not null
 */
- (JavaTimeLocalTime *)toLocalTime;

/*!
 @brief Converts this date-time to an <code>OffsetTime</code>.
 <p>
  This returns an offset time with the same local time and offset.
 @return an OffsetTime representing the time and offset, not null
 */
- (JavaTimeOffsetTime *)toOffsetTime;

/*!
 @brief Outputs this date-time as a <code>String</code>, such as <code>2007-12-03T10:15:30+01:00</code>.
 <p>
  The output will be one of the following ISO-8601 formats: 
 <ul>
  <li><code>uuuu-MM-dd'T'HH:mmXXXXX</code></li>
  <li><code>uuuu-MM-dd'T'HH:mm:ssXXXXX</code></li>
  <li><code>uuuu-MM-dd'T'HH:mm:ss.SSSXXXXX</code></li>
  <li><code>uuuu-MM-dd'T'HH:mm:ss.SSSSSSXXXXX</code></li>
  <li><code>uuuu-MM-dd'T'HH:mm:ss.SSSSSSSSSXXXXX</code></li>
  </ul>
  The format used will be the shortest that outputs the full value of
  the time where the omitted parts are implied to be zero.
 @return a string representation of this date-time, not null
 */
- (NSString *)description;

/*!
 @brief Converts this date-time to a <code>ZonedDateTime</code> using the offset as the zone ID.
 <p>
  This creates the simplest possible <code>ZonedDateTime</code> using the offset
  as the zone ID. 
 <p>
  To control the time-zone used, see <code>atZoneSameInstant(ZoneId)</code> and 
 <code>atZoneSimilarLocal(ZoneId)</code>.
 @return a zoned date-time representing the same local date-time and offset, not null
 */
- (JavaTimeZonedDateTime *)toZonedDateTime;

/*!
 @brief Returns a copy of this <code>OffsetDateTime</code> with the time truncated.
 <p>
  Truncation returns a copy of the original date-time with fields
  smaller than the specified unit set to zero.
  For example, truncating with the <code>minutes</code> unit
  will set the second-of-minute and nano-of-second field to zero. 
 <p>
  The unit must have a duration
  that divides into the length of a standard day without remainder.
  This includes all supplied time units on <code>ChronoUnit</code> and 
 <code>DAYS</code>. Other units throw an exception. 
 <p>
  The offset does not affect the calculation and will be the same in the result. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param unit the unit to truncate to, not null
 @return an <code>OffsetDateTime</code> based on this date-time with the time truncated, not null
 @throw DateTimeExceptionif unable to truncate
 @throw UnsupportedTemporalTypeExceptionif the unit is not supported
 */
- (JavaTimeOffsetDateTime *)truncatedToWithJavaTimeTemporalTemporalUnit:(id<JavaTimeTemporalTemporalUnit>)unit;

/*!
 @brief Calculates the amount of time until another date-time in terms of the specified unit.
 <p>
  This calculates the amount of time between two <code>OffsetDateTime</code>
  objects in terms of a single <code>TemporalUnit</code>.
  The start and end points are <code>this</code> and the specified date-time.
  The result will be negative if the end is before the start.
  For example, the amount in days between two date-times can be calculated
  using <code>startDateTime.until(endDateTime, DAYS)</code>.
  <p>
  The <code>Temporal</code> passed to this method is converted to a 
 <code>OffsetDateTime</code> using <code>from(TemporalAccessor)</code>.
  If the offset differs between the two date-times, the specified
  end date-time is normalized to have the same offset as this date-time. 
 <p>
  The calculation returns a whole number, representing the number of
  complete units between the two date-times.
  For example, the amount in months between 2012-06-15T00:00Z and 2012-08-14T23:59Z
  will only be one month as it is one minute short of two months. 
 <p>
  There are two equivalent ways of using this method.
  The first is to invoke this method.
  The second is to use <code>TemporalUnit.between(Temporal, Temporal)</code>:
  @code

    // these two lines are equivalent
    amount = start.until(end, MONTHS);
    amount = MONTHS.between(start, end); 
  
@endcode
  The choice should be made based on which makes the code more readable. 
 <p>
  The calculation is implemented in this method for <code>ChronoUnit</code>.
  The units <code>NANOS</code>, <code>MICROS</code>, <code>MILLIS</code>, <code>SECONDS</code>,
  <code>MINUTES</code>, <code>HOURS</code> and <code>HALF_DAYS</code>, <code>DAYS</code>,
  <code>WEEKS</code>, <code>MONTHS</code>, <code>YEARS</code>, <code>DECADES</code>,
  <code>CENTURIES</code>, <code>MILLENNIA</code> and <code>ERAS</code> are supported.
  Other <code>ChronoUnit</code> values will throw an exception. 
 <p>
  If the unit is not a <code>ChronoUnit</code>, then the result of this method
  is obtained by invoking <code>TemporalUnit.between(Temporal, Temporal)</code>
  passing <code>this</code> as the first argument and the converted input temporal
  as the second argument. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param endExclusive the end date, exclusive, which is converted to an <code>OffsetDateTime</code> , not null
 @param unit the unit to measure the amount in, not null
 @return the amount of time between this date-time and the end date-time
 @throw DateTimeExceptionif the amount cannot be calculated, or the end
   temporal cannot be converted to an <code>OffsetDateTime</code>
 @throw UnsupportedTemporalTypeExceptionif the unit is not supported
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (jlong)untilWithJavaTimeTemporalTemporal:(id<JavaTimeTemporalTemporal>)endExclusive
          withJavaTimeTemporalTemporalUnit:(id<JavaTimeTemporalTemporalUnit>)unit;

/*!
 @brief Returns an adjusted copy of this date-time.
 <p>
  This returns an <code>OffsetDateTime</code>, based on this one, with the date-time adjusted.
  The adjustment takes place using the specified adjuster strategy object.
  Read the documentation of the adjuster to understand what adjustment will be made. 
 <p>
  A simple adjuster might simply set the one of the fields, such as the year field.
  A more complex adjuster might set the date to the last day of the month.
  A selection of common adjustments is provided in 
 <code>TemporalAdjusters</code>.
  These include finding the "last day of the month" and "next Wednesday".
  Key date-time classes also implement the <code>TemporalAdjuster</code> interface,
  such as <code>Month</code> and <code>MonthDay</code>.
  The adjuster is responsible for handling special cases, such as the varying
  lengths of month and leap years. 
 <p>
  For example this code returns a date on the last day of July: 
 @code

   import static java.time.Month.*;
   import static java.time.temporal.TemporalAdjusters.*;
   result = offsetDateTime.with(JULY).with(lastDayOfMonth()); 
  
@endcode
  <p>
  The classes <code>LocalDate</code>, <code>LocalTime</code> and <code>ZoneOffset</code> implement 
 <code>TemporalAdjuster</code>, thus this method can be used to change the date, time or offset: 
 @code

   result = offsetDateTime.with(date);
   result = offsetDateTime.with(time);
   result = offsetDateTime.with(offset); 
  
@endcode
  <p>
  The result of this method is obtained by invoking the 
 <code>TemporalAdjuster.adjustInto(Temporal)</code> method on the
  specified adjuster passing <code>this</code> as the argument. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param adjuster the adjuster to use, not null
 @return an <code>OffsetDateTime</code> based on <code>this</code> with the adjustment made, not null
 @throw DateTimeExceptionif the adjustment cannot be made
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeOffsetDateTime *)withWithJavaTimeTemporalTemporalAdjuster:(id<JavaTimeTemporalTemporalAdjuster>)adjuster;

/*!
 @brief Returns a copy of this date-time with the specified field set to a new value.
 <p>
  This returns an <code>OffsetDateTime</code>, based on this one, with the value
  for the specified field changed.
  This can be used to change any supported field, such as the year, month or day-of-month.
  If it is not possible to set the value, because the field is not supported or for
  some other reason, an exception is thrown. 
 <p>
  In some cases, changing the specified field can cause the resulting date-time to become invalid,
  such as changing the month from 31st January to February would make the day-of-month invalid.
  In cases like this, the field is responsible for resolving the date. Typically it will choose
  the previous valid date, which would be the last valid day of February in this example. 
 <p>
  If the field is a <code>ChronoField</code> then the adjustment is implemented here. 
 <p>
  The <code>INSTANT_SECONDS</code> field will return a date-time with the specified instant.
  The offset and nano-of-second are unchanged.
  If the new instant value is outside the valid range then a <code>DateTimeException</code> will be thrown. 
 <p>
  The <code>OFFSET_SECONDS</code> field will return a date-time with the specified offset.
  The local date-time is unaltered. If the new offset value is outside the valid range
  then a <code>DateTimeException</code> will be thrown. 
 <p>
  The other <code>supported fields</code> will behave as per
  the matching method on <code>LocalDateTime</code>.
  In this case, the offset is not part of the calculation and will be unchanged. 
 <p>
  All other <code>ChronoField</code> instances will throw an <code>UnsupportedTemporalTypeException</code>.
  <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.adjustInto(Temporal, long)</code>
  passing <code>this</code> as the argument. In this case, the field determines
  whether and how to adjust the instant. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param field the field to set in the result, not null
 @param newValue the new value of the field in the result
 @return an <code>OffsetDateTime</code> based on <code>this</code> with the specified field set, not null
 @throw DateTimeExceptionif the field cannot be set
 @throw UnsupportedTemporalTypeExceptionif the field is not supported
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeOffsetDateTime *)withWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field
                                                         withLong:(jlong)newValue;

/*!
 @brief Returns a copy of this <code>OffsetDateTime</code> with the day-of-month altered.
 <p>
  If the resulting <code>OffsetDateTime</code> is invalid, an exception is thrown.
  The time and offset do not affect the calculation and will be the same in the result. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param dayOfMonth the day-of-month to set in the result, from 1 to 28-31
 @return an <code>OffsetDateTime</code> based on this date-time with the requested day, not null
 @throw DateTimeExceptionif the day-of-month value is invalid,
   or if the day-of-month is invalid for the month-year
 */
- (JavaTimeOffsetDateTime *)withDayOfMonthWithInt:(jint)dayOfMonth;

/*!
 @brief Returns a copy of this <code>OffsetDateTime</code> with the day-of-year altered.
 <p>
  The time and offset do not affect the calculation and will be the same in the result.
  If the resulting <code>OffsetDateTime</code> is invalid, an exception is thrown. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param dayOfYear the day-of-year to set in the result, from 1 to 365-366
 @return an <code>OffsetDateTime</code> based on this date with the requested day, not null
 @throw DateTimeExceptionif the day-of-year value is invalid,
   or if the day-of-year is invalid for the year
 */
- (JavaTimeOffsetDateTime *)withDayOfYearWithInt:(jint)dayOfYear;

/*!
 @brief Returns a copy of this <code>OffsetDateTime</code> with the hour-of-day altered.
 <p>
  The date and offset do not affect the calculation and will be the same in the result. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param hour the hour-of-day to set in the result, from 0 to 23
 @return an <code>OffsetDateTime</code> based on this date-time with the requested hour, not null
 @throw DateTimeExceptionif the hour value is invalid
 */
- (JavaTimeOffsetDateTime *)withHourWithInt:(jint)hour;

/*!
 @brief Returns a copy of this <code>OffsetDateTime</code> with the minute-of-hour altered.
 <p>
  The date and offset do not affect the calculation and will be the same in the result. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param minute the minute-of-hour to set in the result, from 0 to 59
 @return an <code>OffsetDateTime</code> based on this date-time with the requested minute, not null
 @throw DateTimeExceptionif the minute value is invalid
 */
- (JavaTimeOffsetDateTime *)withMinuteWithInt:(jint)minute;

/*!
 @brief Returns a copy of this <code>OffsetDateTime</code> with the month-of-year altered.
 <p>
  The time and offset do not affect the calculation and will be the same in the result.
  If the day-of-month is invalid for the year, it will be changed to the last valid day of the month. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param month the month-of-year to set in the result, from 1 (January) to 12 (December)
 @return an <code>OffsetDateTime</code> based on this date-time with the requested month, not null
 @throw DateTimeExceptionif the month-of-year value is invalid
 */
- (JavaTimeOffsetDateTime *)withMonthWithInt:(jint)month;

/*!
 @brief Returns a copy of this <code>OffsetDateTime</code> with the nano-of-second altered.
 <p>
  The date and offset do not affect the calculation and will be the same in the result. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param nanoOfSecond the nano-of-second to set in the result, from 0 to 999,999,999
 @return an <code>OffsetDateTime</code> based on this date-time with the requested nanosecond, not null
 @throw DateTimeExceptionif the nano value is invalid
 */
- (JavaTimeOffsetDateTime *)withNanoWithInt:(jint)nanoOfSecond;

/*!
 @brief Returns a copy of this <code>OffsetDateTime</code> with the specified offset ensuring
  that the result is at the same instant.
 <p>
  This method returns an object with the specified <code>ZoneOffset</code> and a <code>LocalDateTime</code>
  adjusted by the difference between the two offsets.
  This will result in the old and new objects representing the same instant.
  This is useful for finding the local time in a different offset.
  For example, if this time represents <code>2007-12-03T10:30+02:00</code> and the offset specified is 
 <code>+03:00</code>, then this method will return <code>2007-12-03T11:30+03:00</code>.
  <p>
  To change the offset without adjusting the local time use <code>withOffsetSameLocal</code>.
  <p>
  This instance is immutable and unaffected by this method call.
 @param offset the zone offset to change to, not null
 @return an <code>OffsetDateTime</code> based on this date-time with the requested offset, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeOffsetDateTime *)withOffsetSameInstantWithJavaTimeZoneOffset:(JavaTimeZoneOffset *)offset;

/*!
 @brief Returns a copy of this <code>OffsetDateTime</code> with the specified offset ensuring
  that the result has the same local date-time.
 <p>
  This method returns an object with the same <code>LocalDateTime</code> and the specified <code>ZoneOffset</code>.
  No calculation is needed or performed.
  For example, if this time represents <code>2007-12-03T10:30+02:00</code> and the offset specified is 
 <code>+03:00</code>, then this method will return <code>2007-12-03T10:30+03:00</code>.
  <p>
  To take into account the difference between the offsets, and adjust the time fields,
  use <code>withOffsetSameInstant</code>.
  <p>
  This instance is immutable and unaffected by this method call.
 @param offset the zone offset to change to, not null
 @return an <code>OffsetDateTime</code> based on this date-time with the requested offset, not null
 */
- (JavaTimeOffsetDateTime *)withOffsetSameLocalWithJavaTimeZoneOffset:(JavaTimeZoneOffset *)offset;

/*!
 @brief Returns a copy of this <code>OffsetDateTime</code> with the second-of-minute altered.
 <p>
  The date and offset do not affect the calculation and will be the same in the result. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param second the second-of-minute to set in the result, from 0 to 59
 @return an <code>OffsetDateTime</code> based on this date-time with the requested second, not null
 @throw DateTimeExceptionif the second value is invalid
 */
- (JavaTimeOffsetDateTime *)withSecondWithInt:(jint)second;

/*!
 @brief Returns a copy of this <code>OffsetDateTime</code> with the year altered.
 <p>
  The time and offset do not affect the calculation and will be the same in the result.
  If the day-of-month is invalid for the year, it will be changed to the last valid day of the month. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param year the year to set in the result, from MIN_YEAR to MAX_YEAR
 @return an <code>OffsetDateTime</code> based on this date-time with the requested year, not null
 @throw DateTimeExceptionif the year value is invalid
 */
- (JavaTimeOffsetDateTime *)withYearWithInt:(jint)year;

#pragma mark Package-Private

+ (JavaTimeOffsetDateTime *)readExternalWithJavaIoObjectInput:(id<JavaIoObjectInput>)inArg;

- (void)writeExternalWithJavaIoObjectOutput:(id<JavaIoObjectOutput>)outArg;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(JavaTimeOffsetDateTime)

/*!
 @brief The minimum supported <code>OffsetDateTime</code>, '-999999999-01-01T00:00:00+18:00'.
 This is the local date-time of midnight at the start of the minimum date
  in the maximum offset (larger offsets are earlier on the time-line).
  This combines <code>LocalDateTime.MIN</code> and <code>ZoneOffset.MAX</code>.
  This could be used by an application as a "far past" date-time.
 */
inline JavaTimeOffsetDateTime *JavaTimeOffsetDateTime_get_MIN(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaTimeOffsetDateTime *JavaTimeOffsetDateTime_MIN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaTimeOffsetDateTime, MIN, JavaTimeOffsetDateTime *)

/*!
 @brief The maximum supported <code>OffsetDateTime</code>, '+999999999-12-31T23:59:59.999999999-18:00'.
 This is the local date-time just before midnight at the end of the maximum date
  in the minimum offset (larger negative offsets are later on the time-line).
  This combines <code>LocalDateTime.MAX</code> and <code>ZoneOffset.MIN</code>.
  This could be used by an application as a "far future" date-time.
 */
inline JavaTimeOffsetDateTime *JavaTimeOffsetDateTime_get_MAX(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaTimeOffsetDateTime *JavaTimeOffsetDateTime_MAX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaTimeOffsetDateTime, MAX, JavaTimeOffsetDateTime *)

FOUNDATION_EXPORT id<JavaUtilComparator> JavaTimeOffsetDateTime_timeLineOrder(void);

FOUNDATION_EXPORT JavaTimeOffsetDateTime *JavaTimeOffsetDateTime_now(void);

FOUNDATION_EXPORT JavaTimeOffsetDateTime *JavaTimeOffsetDateTime_nowWithJavaTimeZoneId_(JavaTimeZoneId *zone);

FOUNDATION_EXPORT JavaTimeOffsetDateTime *JavaTimeOffsetDateTime_nowWithJavaTimeClock_(JavaTimeClock *clock);

FOUNDATION_EXPORT JavaTimeOffsetDateTime *JavaTimeOffsetDateTime_ofWithJavaTimeLocalDate_withJavaTimeLocalTime_withJavaTimeZoneOffset_(JavaTimeLocalDate *date, JavaTimeLocalTime *time, JavaTimeZoneOffset *offset);

FOUNDATION_EXPORT JavaTimeOffsetDateTime *JavaTimeOffsetDateTime_ofWithJavaTimeLocalDateTime_withJavaTimeZoneOffset_(JavaTimeLocalDateTime *dateTime, JavaTimeZoneOffset *offset);

FOUNDATION_EXPORT JavaTimeOffsetDateTime *JavaTimeOffsetDateTime_ofWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withJavaTimeZoneOffset_(jint year, jint month, jint dayOfMonth, jint hour, jint minute, jint second, jint nanoOfSecond, JavaTimeZoneOffset *offset);

FOUNDATION_EXPORT JavaTimeOffsetDateTime *JavaTimeOffsetDateTime_ofInstantWithJavaTimeInstant_withJavaTimeZoneId_(JavaTimeInstant *instant, JavaTimeZoneId *zone);

FOUNDATION_EXPORT JavaTimeOffsetDateTime *JavaTimeOffsetDateTime_fromWithJavaTimeTemporalTemporalAccessor_(id<JavaTimeTemporalTemporalAccessor> temporal);

FOUNDATION_EXPORT JavaTimeOffsetDateTime *JavaTimeOffsetDateTime_parseWithJavaLangCharSequence_(id<JavaLangCharSequence> text);

FOUNDATION_EXPORT JavaTimeOffsetDateTime *JavaTimeOffsetDateTime_parseWithJavaLangCharSequence_withJavaTimeFormatDateTimeFormatter_(id<JavaLangCharSequence> text, JavaTimeFormatDateTimeFormatter *formatter);

FOUNDATION_EXPORT JavaTimeOffsetDateTime *JavaTimeOffsetDateTime_readExternalWithJavaIoObjectInput_(id<JavaIoObjectInput> inArg);

J2OBJC_TYPE_LITERAL_HEADER(JavaTimeOffsetDateTime)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaTimeOffsetDateTime")
