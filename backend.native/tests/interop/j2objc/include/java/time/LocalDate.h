//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/time/LocalDate.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaTimeLocalDate")
#ifdef RESTRICT_JavaTimeLocalDate
#define INCLUDE_ALL_JavaTimeLocalDate 0
#else
#define INCLUDE_ALL_JavaTimeLocalDate 1
#endif
#undef RESTRICT_JavaTimeLocalDate

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaTimeLocalDate_) && (INCLUDE_ALL_JavaTimeLocalDate || defined(INCLUDE_JavaTimeLocalDate))
#define JavaTimeLocalDate_

#define RESTRICT_JavaTimeTemporalTemporal 1
#define INCLUDE_JavaTimeTemporalTemporal 1
#include "java/time/temporal/Temporal.h"

#define RESTRICT_JavaTimeTemporalTemporalAdjuster 1
#define INCLUDE_JavaTimeTemporalTemporalAdjuster 1
#include "java/time/temporal/TemporalAdjuster.h"

#define RESTRICT_JavaTimeChronoChronoLocalDate 1
#define INCLUDE_JavaTimeChronoChronoLocalDate 1
#include "java/time/chrono/ChronoLocalDate.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class JavaTimeChronoIsoChronology;
@class JavaTimeClock;
@class JavaTimeDayOfWeek;
@class JavaTimeFormatDateTimeFormatter;
@class JavaTimeLocalDateTime;
@class JavaTimeLocalTime;
@class JavaTimeMonth;
@class JavaTimeOffsetDateTime;
@class JavaTimeOffsetTime;
@class JavaTimePeriod;
@class JavaTimeTemporalValueRange;
@class JavaTimeZoneId;
@class JavaTimeZonedDateTime;
@protocol JavaIoDataInput;
@protocol JavaIoDataOutput;
@protocol JavaLangCharSequence;
@protocol JavaTimeChronoEra;
@protocol JavaTimeTemporalTemporalAccessor;
@protocol JavaTimeTemporalTemporalAmount;
@protocol JavaTimeTemporalTemporalField;
@protocol JavaTimeTemporalTemporalQuery;
@protocol JavaTimeTemporalTemporalUnit;

/*!
 @brief A date without a time-zone in the ISO-8601 calendar system,
  such as <code>2007-12-03</code>.
 <p>
  <code>LocalDate</code> is an immutable date-time object that represents a date,
  often viewed as year-month-day. Other date fields, such as day-of-year,
  day-of-week and week-of-year, can also be accessed.
  For example, the value "2nd October 2007" can be stored in a <code>LocalDate</code>.
  <p>
  This class does not store or represent a time or time-zone.
  Instead, it is a description of the date, as used for birthdays.
  It cannot represent an instant on the time-line without additional information
  such as an offset or time-zone. 
 <p>
  The ISO-8601 calendar system is the modern civil calendar system used today
  in most of the world. It is equivalent to the proleptic Gregorian calendar
  system, in which today's rules for leap years are applied for all time.
  For most applications written today, the ISO-8601 rules are entirely suitable.
  However, any application that makes use of historical dates, and requires them
  to be accurate will find the ISO-8601 approach unsuitable.
 @since 1.8
 */
@interface JavaTimeLocalDate : NSObject < JavaTimeTemporalTemporal, JavaTimeTemporalTemporalAdjuster, JavaTimeChronoChronoLocalDate, JavaIoSerializable >
@property (readonly, class, strong) JavaTimeLocalDate *MIN NS_SWIFT_NAME(MIN);
@property (readonly, class, strong) JavaTimeLocalDate *MAX NS_SWIFT_NAME(MAX);
@property (readonly, class) jlong DAYS_0000_TO_1970 NS_SWIFT_NAME(DAYS_0000_TO_1970);

+ (JavaTimeLocalDate *)MIN;

+ (JavaTimeLocalDate *)MAX;

+ (jlong)DAYS_0000_TO_1970;

#pragma mark Public

/*!
 @brief Adjusts the specified temporal object to have the same date as this object.
 <p>
  This returns a temporal object of the same observable type as the input
  with the date changed to be the same as this. 
 <p>
  The adjustment is equivalent to using <code>Temporal.with(TemporalField, long)</code>
  passing <code>ChronoField.EPOCH_DAY</code> as the field. 
 <p>
  In most cases, it is clearer to reverse the calling pattern by using 
 <code>Temporal.with(TemporalAdjuster)</code>:
  @code

    // these two lines are equivalent, but the second approach is recommended
    temporal = thisLocalDate.adjustInto(temporal);
    temporal = temporal.with(thisLocalDate); 
  
@endcode
  <p>
  This instance is immutable and unaffected by this method call.
 @param temporal the target object to be adjusted, not null
 @return the adjusted object, not null
 @throw DateTimeExceptionif unable to make the adjustment
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (id<JavaTimeTemporalTemporal>)adjustIntoWithJavaTimeTemporalTemporal:(id<JavaTimeTemporalTemporal>)temporal;

/*!
 @brief Combines this date with the time of midnight to create a <code>LocalDateTime</code>
  at the start of this date.
 <p>
  This returns a <code>LocalDateTime</code> formed from this date at the time of
  midnight, 00:00, at the start of this date.
 @return the local date-time of midnight at the start of this date, not null
 */
- (JavaTimeLocalDateTime *)atStartOfDay;

/*!
 @brief Returns a zoned date-time from this date at the earliest valid time according
  to the rules in the time-zone.
 <p>
  Time-zone rules, such as daylight savings, mean that not every local date-time
  is valid for the specified zone, thus the local date-time may not be midnight. 
 <p>
  In most cases, there is only one valid offset for a local date-time.
  In the case of an overlap, there are two valid offsets, and the earlier one is used,
  corresponding to the first occurrence of midnight on the date.
  In the case of a gap, the zoned date-time will represent the instant just after the gap. 
 <p>
  If the zone ID is a <code>ZoneOffset</code>, then the result always has a time of midnight. 
 <p>
  To convert to a specific time in a given time-zone call <code>atTime(LocalTime)</code>
  followed by <code>LocalDateTime.atZone(ZoneId)</code>.
 @param zone the zone ID to use, not null
 @return the zoned date-time formed from this date and the earliest valid time for the zone, not null
 */
- (JavaTimeZonedDateTime *)atStartOfDayWithJavaTimeZoneId:(JavaTimeZoneId *)zone;

/*!
 @brief Combines this date with a time to create a <code>LocalDateTime</code>.
 <p>
  This returns a <code>LocalDateTime</code> formed from this date at the
  specified hour and minute.
  The seconds and nanosecond fields will be set to zero.
  The individual time fields must be within their valid range.
  All possible combinations of date and time are valid.
 @param hour the hour-of-day to use, from 0 to 23
 @param minute the minute-of-hour to use, from 0 to 59
 @return the local date-time formed from this date and the specified time, not null
 @throw DateTimeExceptionif the value of any field is out of range
 */
- (JavaTimeLocalDateTime *)atTimeWithInt:(jint)hour
                                 withInt:(jint)minute;

/*!
 @brief Combines this date with a time to create a <code>LocalDateTime</code>.
 <p>
  This returns a <code>LocalDateTime</code> formed from this date at the
  specified hour, minute and second.
  The nanosecond field will be set to zero.
  The individual time fields must be within their valid range.
  All possible combinations of date and time are valid.
 @param hour the hour-of-day to use, from 0 to 23
 @param minute the minute-of-hour to use, from 0 to 59
 @param second the second-of-minute to represent, from 0 to 59
 @return the local date-time formed from this date and the specified time, not null
 @throw DateTimeExceptionif the value of any field is out of range
 */
- (JavaTimeLocalDateTime *)atTimeWithInt:(jint)hour
                                 withInt:(jint)minute
                                 withInt:(jint)second;

/*!
 @brief Combines this date with a time to create a <code>LocalDateTime</code>.
 <p>
  This returns a <code>LocalDateTime</code> formed from this date at the
  specified hour, minute, second and nanosecond.
  The individual time fields must be within their valid range.
  All possible combinations of date and time are valid.
 @param hour the hour-of-day to use, from 0 to 23
 @param minute the minute-of-hour to use, from 0 to 59
 @param second the second-of-minute to represent, from 0 to 59
 @param nanoOfSecond the nano-of-second to represent, from 0 to 999,999,999
 @return the local date-time formed from this date and the specified time, not null
 @throw DateTimeExceptionif the value of any field is out of range
 */
- (JavaTimeLocalDateTime *)atTimeWithInt:(jint)hour
                                 withInt:(jint)minute
                                 withInt:(jint)second
                                 withInt:(jint)nanoOfSecond;

/*!
 @brief Combines this date with a time to create a <code>LocalDateTime</code>.
 <p>
  This returns a <code>LocalDateTime</code> formed from this date at the specified time.
  All possible combinations of date and time are valid.
 @param time the time to combine with, not null
 @return the local date-time formed from this date and the specified time, not null
 */
- (JavaTimeLocalDateTime *)atTimeWithJavaTimeLocalTime:(JavaTimeLocalTime *)time;

/*!
 @brief Combines this date with an offset time to create an <code>OffsetDateTime</code>.
 <p>
  This returns an <code>OffsetDateTime</code> formed from this date at the specified time.
  All possible combinations of date and time are valid.
 @param time the time to combine with, not null
 @return the offset date-time formed from this date and the specified time, not null
 */
- (JavaTimeOffsetDateTime *)atTimeWithJavaTimeOffsetTime:(JavaTimeOffsetTime *)time;

/*!
 @brief Compares this date to another date.
 <p>
  The comparison is primarily based on the date, from earliest to latest.
  It is "consistent with equals", as defined by <code>Comparable</code>.
  <p>
  If all the dates being compared are instances of <code>LocalDate</code>,
  then the comparison will be entirely based on the date.
  If some dates being compared are in different chronologies, then the
  chronology is also considered, see <code>java.time.chrono.ChronoLocalDate.compareTo</code>.
 @param other the other date to compare to, not null
 @return the comparator value, negative if less, positive if greater
 */
- (jint)compareToWithId:(id<JavaTimeChronoChronoLocalDate>)other;

/*!
 @brief Checks if this date is equal to another date.
 <p>
  Compares this <code>LocalDate</code> with another ensuring that the date is the same. 
 <p>
  Only objects of type <code>LocalDate</code> are compared, other types return false.
  To compare the dates of two <code>TemporalAccessor</code> instances, including dates
  in two different chronologies, use <code>ChronoField.EPOCH_DAY</code> as a comparator.
 @param obj the object to check, null returns false
 @return true if this is equal to the other date
 */
- (jboolean)isEqual:(id)obj;

/*!
 @brief Formats this date using the specified formatter.
 <p>
  This date will be passed to the formatter to produce a string.
 @param formatter the formatter to use, not null
 @return the formatted date string, not null
 @throw DateTimeExceptionif an error occurs during printing
 */
- (NSString *)formatWithJavaTimeFormatDateTimeFormatter:(JavaTimeFormatDateTimeFormatter *)formatter;

/*!
 @brief Obtains an instance of <code>LocalDate</code> from a temporal object.
 <p>
  This obtains a local date based on the specified temporal.
  A <code>TemporalAccessor</code> represents an arbitrary set of date and time information,
  which this factory converts to an instance of <code>LocalDate</code>.
  <p>
  The conversion uses the <code>TemporalQueries.localDate()</code> query, which relies
  on extracting the <code>EPOCH_DAY</code> field. 
 <p>
  This method matches the signature of the functional interface <code>TemporalQuery</code>
  allowing it to be used as a query via method reference, <code>LocalDate::from</code>.
 @param temporal the temporal object to convert, not null
 @return the local date, not null
 @throw DateTimeExceptionif unable to convert to a <code>LocalDate</code>
 */
+ (JavaTimeLocalDate *)fromWithJavaTimeTemporalTemporalAccessor:(id<JavaTimeTemporalTemporalAccessor>)temporal;

/*!
 @brief Gets the value of the specified field from this date as an <code>int</code>.
 <p>
  This queries this date for the value of the specified field.
  The returned value will always be within the valid range of values for the field.
  If it is not possible to return the value, because the field is not supported
  or for some other reason, an exception is thrown. 
 <p>
  If the field is a <code>ChronoField</code> then the query is implemented here.
  The <code>supported fields</code> will return valid
  values based on this date, except <code>EPOCH_DAY</code> and <code>PROLEPTIC_MONTH</code>
  which are too large to fit in an <code>int</code> and throw a <code>DateTimeException</code>.
  All other <code>ChronoField</code> instances will throw an <code>UnsupportedTemporalTypeException</code>.
  <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.getFrom(TemporalAccessor)</code>
  passing <code>this</code> as the argument. Whether the value can be obtained,
  and what the value represents, is determined by the field.
 @param field the field to get, not null
 @return the value for the field
 @throw DateTimeExceptionif a value for the field cannot be obtained or
          the value is outside the range of valid values for the field
 @throw UnsupportedTemporalTypeExceptionif the field is not supported or
          the range of values exceeds an <code>int</code>
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (jint)getWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field;

/*!
 @brief Gets the chronology of this date, which is the ISO calendar system.
 <p>
  The <code>Chronology</code> represents the calendar system in use.
  The ISO-8601 calendar system is the modern civil calendar system used today
  in most of the world. It is equivalent to the proleptic Gregorian calendar
  system, in which today's rules for leap years are applied for all time.
 @return the ISO chronology, not null
 */
- (JavaTimeChronoIsoChronology *)getChronology;

/*!
 @brief Gets the day-of-month field.
 <p>
  This method returns the primitive <code>int</code> value for the day-of-month.
 @return the day-of-month, from 1 to 31
 */
- (jint)getDayOfMonth;

/*!
 @brief Gets the day-of-week field, which is an enum <code>DayOfWeek</code>.
 <p>
  This method returns the enum <code>DayOfWeek</code> for the day-of-week.
  This avoids confusion as to what <code>int</code> values mean.
  If you need access to the primitive <code>int</code> value then the enum
  provides the <code>int value</code>.
  <p>
  Additional information can be obtained from the <code>DayOfWeek</code>.
  This includes textual names of the values.
 @return the day-of-week, not null
 */
- (JavaTimeDayOfWeek *)getDayOfWeek;

/*!
 @brief Gets the day-of-year field.
 <p>
  This method returns the primitive <code>int</code> value for the day-of-year.
 @return the day-of-year, from 1 to 365, or 366 in a leap year
 */
- (jint)getDayOfYear;

/*!
 @brief Gets the era applicable at this date.
 <p>
  The official ISO-8601 standard does not define eras, however <code>IsoChronology</code> does.
  It defines two eras, 'CE' from year one onwards and 'BCE' from year zero backwards.
  Since dates before the Julian-Gregorian cutover are not in line with history,
  the cutover between 'BCE' and 'CE' is also not aligned with the commonly used
  eras, often referred to using 'BC' and 'AD'. 
 <p>
  Users of this class should typically ignore this method as it exists primarily
  to fulfill the <code>ChronoLocalDate</code> contract where it is necessary to support
  the Japanese calendar system. 
 <p>
  The returned era will be a singleton capable of being compared with the constants
  in <code>IsoChronology</code> using the <code>==</code> operator.
 @return the <code>IsoChronology</code> era constant applicable at this date, not null
 */
- (id<JavaTimeChronoEra>)getEra;

/*!
 @brief Gets the value of the specified field from this date as a <code>long</code>.
 <p>
  This queries this date for the value of the specified field.
  If it is not possible to return the value, because the field is not supported
  or for some other reason, an exception is thrown. 
 <p>
  If the field is a <code>ChronoField</code> then the query is implemented here.
  The <code>supported fields</code> will return valid
  values based on this date.
  All other <code>ChronoField</code> instances will throw an <code>UnsupportedTemporalTypeException</code>.
  <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.getFrom(TemporalAccessor)</code>
  passing <code>this</code> as the argument. Whether the value can be obtained,
  and what the value represents, is determined by the field.
 @param field the field to get, not null
 @return the value for the field
 @throw DateTimeExceptionif a value for the field cannot be obtained
 @throw UnsupportedTemporalTypeExceptionif the field is not supported
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (jlong)getLongWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field;

/*!
 @brief Gets the month-of-year field using the <code>Month</code> enum.
 <p>
  This method returns the enum <code>Month</code> for the month.
  This avoids confusion as to what <code>int</code> values mean.
  If you need access to the primitive <code>int</code> value then the enum
  provides the <code>int value</code>.
 @return the month-of-year, not null
 - seealso: #getMonthValue()
 */
- (JavaTimeMonth *)getMonth;

/*!
 @brief Gets the month-of-year field from 1 to 12.
 <p>
  This method returns the month as an <code>int</code> from 1 to 12.
  Application code is frequently clearer if the enum <code>Month</code>
  is used by calling <code>getMonth()</code>.
 @return the month-of-year, from 1 to 12
 - seealso: #getMonth()
 */
- (jint)getMonthValue;

/*!
 @brief Gets the year field.
 <p>
  This method returns the primitive <code>int</code> value for the year. 
 <p>
  The year returned by this method is proleptic as per <code>get(YEAR)</code>.
  To obtain the year-of-era, use <code>get(YEAR_OF_ERA)</code>.
 @return the year, from MIN_YEAR to MAX_YEAR
 */
- (jint)getYear;

/*!
 @brief A hash code for this date.
 @return a suitable hash code
 */
- (NSUInteger)hash;

/*!
 @brief Checks if this date is after the specified date.
 <p>
  This checks to see if this date represents a point on the
  local time-line after the other date. 
 @code

    LocalDate a = LocalDate.of(2012, 6, 30);
    LocalDate b = LocalDate.of(2012, 7, 1);
    a.isAfter(b) == false
    a.isAfter(a) == false
    b.isAfter(a) == true 
  
@endcode
  <p>
  This method only considers the position of the two dates on the local time-line.
  It does not take into account the chronology, or calendar system.
  This is different from the comparison in <code>compareTo(ChronoLocalDate)</code>,
  but is the same approach as <code>ChronoLocalDate.timeLineOrder()</code>.
 @param other the other date to compare to, not null
 @return true if this date is after the specified date
 */
- (jboolean)isAfterWithJavaTimeChronoChronoLocalDate:(id<JavaTimeChronoChronoLocalDate>)other;

/*!
 @brief Checks if this date is before the specified date.
 <p>
  This checks to see if this date represents a point on the
  local time-line before the other date. 
 @code

    LocalDate a = LocalDate.of(2012, 6, 30);
    LocalDate b = LocalDate.of(2012, 7, 1);
    a.isBefore(b) == true
    a.isBefore(a) == false
    b.isBefore(a) == false 
  
@endcode
  <p>
  This method only considers the position of the two dates on the local time-line.
  It does not take into account the chronology, or calendar system.
  This is different from the comparison in <code>compareTo(ChronoLocalDate)</code>,
  but is the same approach as <code>ChronoLocalDate.timeLineOrder()</code>.
 @param other the other date to compare to, not null
 @return true if this date is before the specified date
 */
- (jboolean)isBeforeWithJavaTimeChronoChronoLocalDate:(id<JavaTimeChronoChronoLocalDate>)other;

/*!
 @brief Checks if this date is equal to the specified date.
 <p>
  This checks to see if this date represents the same point on the
  local time-line as the other date. 
 @code

    LocalDate a = LocalDate.of(2012, 6, 30);
    LocalDate b = LocalDate.of(2012, 7, 1);
    a.isEqual(b) == false
    a.isEqual(a) == true
    b.isEqual(a) == false 
  
@endcode
  <p>
  This method only considers the position of the two dates on the local time-line.
  It does not take into account the chronology, or calendar system.
  This is different from the comparison in <code>compareTo(ChronoLocalDate)</code>
  but is the same approach as <code>ChronoLocalDate.timeLineOrder()</code>.
 @param other the other date to compare to, not null
 @return true if this date is equal to the specified date
 */
- (jboolean)isEqualWithJavaTimeChronoChronoLocalDate:(id<JavaTimeChronoChronoLocalDate>)other;

/*!
 @brief Checks if the year is a leap year, according to the ISO proleptic
  calendar system rules.
 <p>
  This method applies the current rules for leap years across the whole time-line.
  In general, a year is a leap year if it is divisible by four without
  remainder. However, years divisible by 100, are not leap years, with
  the exception of years divisible by 400 which are. 
 <p>
  For example, 1904 is a leap year it is divisible by 4.
  1900 was not a leap year as it is divisible by 100, however 2000 was a
  leap year as it is divisible by 400. 
 <p>
  The calculation is proleptic - applying the same rules into the far future and far past.
  This is historically inaccurate, but is correct for the ISO-8601 standard.
 @return true if the year is leap, false otherwise
 */
- (jboolean)isLeapYear;

/*!
 @brief Checks if the specified field is supported.
 <p>
  This checks if this date can be queried for the specified field.
  If false, then calling the <code>range</code>,
  <code>get</code> and <code>with(TemporalField, long)</code>
  methods will throw an exception. 
 <p>
  If the field is a <code>ChronoField</code> then the query is implemented here.
  The supported fields are: 
 <ul>
  <li><code>DAY_OF_WEEK</code>
  <li><code>ALIGNED_DAY_OF_WEEK_IN_MONTH</code>
  <li><code>ALIGNED_DAY_OF_WEEK_IN_YEAR</code>
  <li><code>DAY_OF_MONTH</code>
  <li><code>DAY_OF_YEAR</code>
  <li><code>EPOCH_DAY</code>
  <li><code>ALIGNED_WEEK_OF_MONTH</code>
  <li><code>ALIGNED_WEEK_OF_YEAR</code>
  <li><code>MONTH_OF_YEAR</code>
  <li><code>PROLEPTIC_MONTH</code>
  <li><code>YEAR_OF_ERA</code>
  <li><code>YEAR</code>
  <li><code>ERA</code>
  </ul>
  All other <code>ChronoField</code> instances will return false. 
 <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.isSupportedBy(TemporalAccessor)</code>
  passing <code>this</code> as the argument.
  Whether the field is supported is determined by the field.
 @param field the field to check, null returns false
 @return true if the field is supported on this date, false if not
 */
- (jboolean)isSupportedWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field;

/*!
 @brief Checks if the specified unit is supported.
 <p>
  This checks if the specified unit can be added to, or subtracted from, this date.
  If false, then calling the <code>plus(long, TemporalUnit)</code> and 
 <code>minus</code> methods will throw an exception. 
 <p>
  If the unit is a <code>ChronoUnit</code> then the query is implemented here.
  The supported units are: 
 <ul>
  <li><code>DAYS</code>
  <li><code>WEEKS</code>
  <li><code>MONTHS</code>
  <li><code>YEARS</code>
  <li><code>DECADES</code>
  <li><code>CENTURIES</code>
  <li><code>MILLENNIA</code>
  <li><code>ERAS</code>
  </ul>
  All other <code>ChronoUnit</code> instances will return false. 
 <p>
  If the unit is not a <code>ChronoUnit</code>, then the result of this method
  is obtained by invoking <code>TemporalUnit.isSupportedBy(Temporal)</code>
  passing <code>this</code> as the argument.
  Whether the unit is supported is determined by the unit.
 @param unit the unit to check, null returns false
 @return true if the unit can be added/subtracted, false if not
 */
- (jboolean)isSupportedWithJavaTimeTemporalTemporalUnit:(id<JavaTimeTemporalTemporalUnit>)unit;

/*!
 @brief Returns the length of the month represented by this date.
 <p>
  This returns the length of the month in days.
  For example, a date in January would return 31.
 @return the length of the month in days
 */
- (jint)lengthOfMonth;

/*!
 @brief Returns the length of the year represented by this date.
 <p>
  This returns the length of the year in days, either 365 or 366.
 @return 366 if the year is leap, 365 otherwise
 */
- (jint)lengthOfYear;

/*!
 @brief Returns a copy of this date with the specified amount subtracted.
 <p>
  This returns a <code>LocalDate</code>, based on this one, with the amount
  in terms of the unit subtracted. If it is not possible to subtract the amount,
  because the unit is not supported or for some other reason, an exception is thrown. 
 <p>
  This method is equivalent to <code>plus(long, TemporalUnit)</code> with the amount negated.
  See that method for a full description of how addition, and thus subtraction, works. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param amountToSubtract the amount of the unit to subtract from the result, may be negative
 @param unit the unit of the amount to subtract, not null
 @return a <code>LocalDate</code> based on this date with the specified amount subtracted, not null
 @throw DateTimeExceptionif the subtraction cannot be made
 @throw UnsupportedTemporalTypeExceptionif the unit is not supported
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeLocalDate *)minusWithLong:(jlong)amountToSubtract
    withJavaTimeTemporalTemporalUnit:(id<JavaTimeTemporalTemporalUnit>)unit;

/*!
 @brief Returns a copy of this date with the specified amount subtracted.
 <p>
  This returns a <code>LocalDate</code>, based on this one, with the specified amount subtracted.
  The amount is typically <code>Period</code> but may be any other type implementing
  the <code>TemporalAmount</code> interface. 
 <p>
  The calculation is delegated to the amount object by calling 
 <code>TemporalAmount.subtractFrom(Temporal)</code>. The amount implementation is free
  to implement the subtraction in any way it wishes, however it typically
  calls back to <code>minus(long, TemporalUnit)</code>. Consult the documentation
  of the amount implementation to determine if it can be successfully subtracted. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param amountToSubtract the amount to subtract, not null
 @return a <code>LocalDate</code> based on this date with the subtraction made, not null
 @throw DateTimeExceptionif the subtraction cannot be made
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeLocalDate *)minusWithJavaTimeTemporalTemporalAmount:(id<JavaTimeTemporalTemporalAmount>)amountToSubtract;

/*!
 @brief Returns a copy of this <code>LocalDate</code> with the specified number of days subtracted.
 <p>
  This method subtracts the specified amount from the days field decrementing the
  month and year fields as necessary to ensure the result remains valid.
  The result is only invalid if the maximum/minimum year is exceeded. 
 <p>
  For example, 2009-01-01 minus one day would result in 2008-12-31. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param daysToSubtract the days to subtract, may be negative
 @return a <code>LocalDate</code> based on this date with the days subtracted, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeLocalDate *)minusDaysWithLong:(jlong)daysToSubtract;

/*!
 @brief Returns a copy of this <code>LocalDate</code> with the specified number of months subtracted.
 <p>
  This method subtracts the specified amount from the months field in three steps: 
 <ol>
  <li>Subtract the input months from the month-of-year field</li>
  <li>Check if the resulting date would be invalid</li>
  <li>Adjust the day-of-month to the last valid day if necessary</li>
  </ol>
  <p>
  For example, 2007-03-31 minus one month would result in the invalid date
  2007-02-31. Instead of returning an invalid result, the last valid day
  of the month, 2007-02-28, is selected instead. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param monthsToSubtract the months to subtract, may be negative
 @return a <code>LocalDate</code> based on this date with the months subtracted, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeLocalDate *)minusMonthsWithLong:(jlong)monthsToSubtract;

/*!
 @brief Returns a copy of this <code>LocalDate</code> with the specified number of weeks subtracted.
 <p>
  This method subtracts the specified amount in weeks from the days field decrementing
  the month and year fields as necessary to ensure the result remains valid.
  The result is only invalid if the maximum/minimum year is exceeded. 
 <p>
  For example, 2009-01-07 minus one week would result in 2008-12-31. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param weeksToSubtract the weeks to subtract, may be negative
 @return a <code>LocalDate</code> based on this date with the weeks subtracted, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeLocalDate *)minusWeeksWithLong:(jlong)weeksToSubtract;

/*!
 @brief Returns a copy of this <code>LocalDate</code> with the specified number of years subtracted.
 <p>
  This method subtracts the specified amount from the years field in three steps: 
 <ol>
  <li>Subtract the input years from the year field</li>
  <li>Check if the resulting date would be invalid</li>
  <li>Adjust the day-of-month to the last valid day if necessary</li>
  </ol>
  <p>
  For example, 2008-02-29 (leap year) minus one year would result in the
  invalid date 2007-02-29 (standard year). Instead of returning an invalid
  result, the last valid day of the month, 2007-02-28, is selected instead. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param yearsToSubtract the years to subtract, may be negative
 @return a <code>LocalDate</code> based on this date with the years subtracted, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeLocalDate *)minusYearsWithLong:(jlong)yearsToSubtract;

/*!
 @brief Obtains the current date from the system clock in the default time-zone.
 <p>
  This will query the <code>system clock</code> in the default
  time-zone to obtain the current date. 
 <p>
  Using this method will prevent the ability to use an alternate clock for testing
  because the clock is hard-coded.
 @return the current date using the system clock and default time-zone, not null
 */
+ (JavaTimeLocalDate *)now;

/*!
 @brief Obtains the current date from the specified clock.
 <p>
  This will query the specified clock to obtain the current date - today.
  Using this method allows the use of an alternate clock for testing.
  The alternate clock may be introduced using <code>dependency injection</code>.
 @param clock the clock to use, not null
 @return the current date, not null
 */
+ (JavaTimeLocalDate *)nowWithJavaTimeClock:(JavaTimeClock *)clock;

/*!
 @brief Obtains the current date from the system clock in the specified time-zone.
 <p>
  This will query the <code>system clock</code> to obtain the current date.
  Specifying the time-zone avoids dependence on the default time-zone. 
 <p>
  Using this method will prevent the ability to use an alternate clock for testing
  because the clock is hard-coded.
 @param zone the zone ID to use, not null
 @return the current date using the system clock, not null
 */
+ (JavaTimeLocalDate *)nowWithJavaTimeZoneId:(JavaTimeZoneId *)zone;

/*!
 @brief Obtains an instance of <code>LocalDate</code> from a year, month and day.
 <p>
  This returns a <code>LocalDate</code> with the specified year, month and day-of-month.
  The day must be valid for the year and month, otherwise an exception will be thrown.
 @param year the year to represent, from MIN_YEAR to MAX_YEAR
 @param month the month-of-year to represent, from 1 (January) to 12 (December)
 @param dayOfMonth the day-of-month to represent, from 1 to 31
 @return the local date, not null
 @throw DateTimeExceptionif the value of any field is out of range,
   or if the day-of-month is invalid for the month-year
 */
+ (JavaTimeLocalDate *)ofWithInt:(jint)year
                         withInt:(jint)month
                         withInt:(jint)dayOfMonth;

/*!
 @brief Obtains an instance of <code>LocalDate</code> from a year, month and day.
 <p>
  This returns a <code>LocalDate</code> with the specified year, month and day-of-month.
  The day must be valid for the year and month, otherwise an exception will be thrown.
 @param year the year to represent, from MIN_YEAR to MAX_YEAR
 @param month the month-of-year to represent, not null
 @param dayOfMonth the day-of-month to represent, from 1 to 31
 @return the local date, not null
 @throw DateTimeExceptionif the value of any field is out of range,
   or if the day-of-month is invalid for the month-year
 */
+ (JavaTimeLocalDate *)ofWithInt:(jint)year
               withJavaTimeMonth:(JavaTimeMonth *)month
                         withInt:(jint)dayOfMonth;

/*!
 @brief Obtains an instance of <code>LocalDate</code> from the epoch day count.
 <p>
  This returns a <code>LocalDate</code> with the specified epoch-day.
  The <code>EPOCH_DAY</code> is a simple incrementing count
  of days where day 0 is 1970-01-01. Negative numbers represent earlier days.
 @param epochDay the Epoch Day to convert, based on the epoch 1970-01-01
 @return the local date, not null
 @throw DateTimeExceptionif the epoch day exceeds the supported date range
 */
+ (JavaTimeLocalDate *)ofEpochDayWithLong:(jlong)epochDay;

/*!
 @brief Obtains an instance of <code>LocalDate</code> from a year and day-of-year.
 <p>
  This returns a <code>LocalDate</code> with the specified year and day-of-year.
  The day-of-year must be valid for the year, otherwise an exception will be thrown.
 @param year the year to represent, from MIN_YEAR to MAX_YEAR
 @param dayOfYear the day-of-year to represent, from 1 to 366
 @return the local date, not null
 @throw DateTimeExceptionif the value of any field is out of range,
   or if the day-of-year is invalid for the year
 */
+ (JavaTimeLocalDate *)ofYearDayWithInt:(jint)year
                                withInt:(jint)dayOfYear;

/*!
 @brief Obtains an instance of <code>LocalDate</code> from a text string such as <code>2007-12-03</code>.
 <p>
  The string must represent a valid date and is parsed using 
 <code>java.time.format.DateTimeFormatter.ISO_LOCAL_DATE</code>.
 @param text the text to parse such as "2007-12-03", not null
 @return the parsed local date, not null
 @throw DateTimeParseExceptionif the text cannot be parsed
 */
+ (JavaTimeLocalDate *)parseWithJavaLangCharSequence:(id<JavaLangCharSequence>)text;

/*!
 @brief Obtains an instance of <code>LocalDate</code> from a text string using a specific formatter.
 <p>
  The text is parsed using the formatter, returning a date.
 @param text the text to parse, not null
 @param formatter the formatter to use, not null
 @return the parsed local date, not null
 @throw DateTimeParseExceptionif the text cannot be parsed
 */
+ (JavaTimeLocalDate *)parseWithJavaLangCharSequence:(id<JavaLangCharSequence>)text
                 withJavaTimeFormatDateTimeFormatter:(JavaTimeFormatDateTimeFormatter *)formatter;

/*!
 @brief Returns a copy of this date with the specified amount added.
 <p>
  This returns a <code>LocalDate</code>, based on this one, with the amount
  in terms of the unit added. If it is not possible to add the amount, because the
  unit is not supported or for some other reason, an exception is thrown. 
 <p>
  In some cases, adding the amount can cause the resulting date to become invalid.
  For example, adding one month to 31st January would result in 31st February.
  In cases like this, the unit is responsible for resolving the date.
  Typically it will choose the previous valid date, which would be the last valid
  day of February in this example. 
 <p>
  If the field is a <code>ChronoUnit</code> then the addition is implemented here.
  The supported fields behave as follows: 
 <ul>
  <li><code>DAYS</code> -
   Returns a <code>LocalDate</code> with the specified number of days added.
   This is equivalent to <code>plusDays(long)</code>.
  <li><code>WEEKS</code> -
   Returns a <code>LocalDate</code> with the specified number of weeks added.
   This is equivalent to <code>plusWeeks(long)</code> and uses a 7 day week. 
 <li><code>MONTHS</code> -
   Returns a <code>LocalDate</code> with the specified number of months added.
   This is equivalent to <code>plusMonths(long)</code>.
   The day-of-month will be unchanged unless it would be invalid for the new
   month and year. In that case, the day-of-month is adjusted to the maximum
   valid value for the new month and year. 
 <li><code>YEARS</code> -
   Returns a <code>LocalDate</code> with the specified number of years added.
   This is equivalent to <code>plusYears(long)</code>.
   The day-of-month will be unchanged unless it would be invalid for the new
   month and year. In that case, the day-of-month is adjusted to the maximum
   valid value for the new month and year. 
 <li><code>DECADES</code> -
   Returns a <code>LocalDate</code> with the specified number of decades added.
   This is equivalent to calling <code>plusYears(long)</code> with the amount
   multiplied by 10.
   The day-of-month will be unchanged unless it would be invalid for the new
   month and year. In that case, the day-of-month is adjusted to the maximum
   valid value for the new month and year. 
 <li><code>CENTURIES</code> -
   Returns a <code>LocalDate</code> with the specified number of centuries added.
   This is equivalent to calling <code>plusYears(long)</code> with the amount
   multiplied by 100.
   The day-of-month will be unchanged unless it would be invalid for the new
   month and year. In that case, the day-of-month is adjusted to the maximum
   valid value for the new month and year. 
 <li><code>MILLENNIA</code> -
   Returns a <code>LocalDate</code> with the specified number of millennia added.
   This is equivalent to calling <code>plusYears(long)</code> with the amount
   multiplied by 1,000.
   The day-of-month will be unchanged unless it would be invalid for the new
   month and year. In that case, the day-of-month is adjusted to the maximum
   valid value for the new month and year. 
 <li><code>ERAS</code> -
   Returns a <code>LocalDate</code> with the specified number of eras added.
   Only two eras are supported so the amount must be one, zero or minus one.
   If the amount is non-zero then the year is changed such that the year-of-era
   is unchanged.
   The day-of-month will be unchanged unless it would be invalid for the new
   month and year. In that case, the day-of-month is adjusted to the maximum
   valid value for the new month and year. 
 </ul>
  <p>
  All other <code>ChronoUnit</code> instances will throw an <code>UnsupportedTemporalTypeException</code>.
  <p>
  If the field is not a <code>ChronoUnit</code>, then the result of this method
  is obtained by invoking <code>TemporalUnit.addTo(Temporal, long)</code>
  passing <code>this</code> as the argument. In this case, the unit determines
  whether and how to perform the addition. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param amountToAdd the amount of the unit to add to the result, may be negative
 @param unit the unit of the amount to add, not null
 @return a <code>LocalDate</code> based on this date with the specified amount added, not null
 @throw DateTimeExceptionif the addition cannot be made
 @throw UnsupportedTemporalTypeExceptionif the unit is not supported
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeLocalDate *)plusWithLong:(jlong)amountToAdd
   withJavaTimeTemporalTemporalUnit:(id<JavaTimeTemporalTemporalUnit>)unit;

/*!
 @brief Returns a copy of this date with the specified amount added.
 <p>
  This returns a <code>LocalDate</code>, based on this one, with the specified amount added.
  The amount is typically <code>Period</code> but may be any other type implementing
  the <code>TemporalAmount</code> interface. 
 <p>
  The calculation is delegated to the amount object by calling 
 <code>TemporalAmount.addTo(Temporal)</code>. The amount implementation is free
  to implement the addition in any way it wishes, however it typically
  calls back to <code>plus(long, TemporalUnit)</code>. Consult the documentation
  of the amount implementation to determine if it can be successfully added. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param amountToAdd the amount to add, not null
 @return a <code>LocalDate</code> based on this date with the addition made, not null
 @throw DateTimeExceptionif the addition cannot be made
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeLocalDate *)plusWithJavaTimeTemporalTemporalAmount:(id<JavaTimeTemporalTemporalAmount>)amountToAdd;

/*!
 @brief Returns a copy of this <code>LocalDate</code> with the specified number of days added.
 <p>
  This method adds the specified amount to the days field incrementing the
  month and year fields as necessary to ensure the result remains valid.
  The result is only invalid if the maximum/minimum year is exceeded. 
 <p>
  For example, 2008-12-31 plus one day would result in 2009-01-01. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param daysToAdd the days to add, may be negative
 @return a <code>LocalDate</code> based on this date with the days added, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeLocalDate *)plusDaysWithLong:(jlong)daysToAdd;

/*!
 @brief Returns a copy of this <code>LocalDate</code> with the specified number of months added.
 <p>
  This method adds the specified amount to the months field in three steps: 
 <ol>
  <li>Add the input months to the month-of-year field</li>
  <li>Check if the resulting date would be invalid</li>
  <li>Adjust the day-of-month to the last valid day if necessary</li>
  </ol>
  <p>
  For example, 2007-03-31 plus one month would result in the invalid date
  2007-04-31. Instead of returning an invalid result, the last valid day
  of the month, 2007-04-30, is selected instead. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param monthsToAdd the months to add, may be negative
 @return a <code>LocalDate</code> based on this date with the months added, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeLocalDate *)plusMonthsWithLong:(jlong)monthsToAdd;

/*!
 @brief Returns a copy of this <code>LocalDate</code> with the specified number of weeks added.
 <p>
  This method adds the specified amount in weeks to the days field incrementing
  the month and year fields as necessary to ensure the result remains valid.
  The result is only invalid if the maximum/minimum year is exceeded. 
 <p>
  For example, 2008-12-31 plus one week would result in 2009-01-07. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param weeksToAdd the weeks to add, may be negative
 @return a <code>LocalDate</code> based on this date with the weeks added, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeLocalDate *)plusWeeksWithLong:(jlong)weeksToAdd;

/*!
 @brief Returns a copy of this <code>LocalDate</code> with the specified number of years added.
 <p>
  This method adds the specified amount to the years field in three steps: 
 <ol>
  <li>Add the input years to the year field</li>
  <li>Check if the resulting date would be invalid</li>
  <li>Adjust the day-of-month to the last valid day if necessary</li>
  </ol>
  <p>
  For example, 2008-02-29 (leap year) plus one year would result in the
  invalid date 2009-02-29 (standard year). Instead of returning an invalid
  result, the last valid day of the month, 2009-02-28, is selected instead. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param yearsToAdd the years to add, may be negative
 @return a <code>LocalDate</code> based on this date with the years added, not null
 @throw DateTimeExceptionif the result exceeds the supported date range
 */
- (JavaTimeLocalDate *)plusYearsWithLong:(jlong)yearsToAdd;

/*!
 @brief Queries this date using the specified query.
 <p>
  This queries this date using the specified query strategy object.
  The <code>TemporalQuery</code> object defines the logic to be used to
  obtain the result. Read the documentation of the query to understand
  what the result of this method will be. 
 <p>
  The result of this method is obtained by invoking the 
 <code>TemporalQuery.queryFrom(TemporalAccessor)</code> method on the
  specified query passing <code>this</code> as the argument.
 @param query the query to invoke, not null
 @return the query result, null may be returned (defined by the query)
 @throw DateTimeExceptionif unable to query (defined by the query)
 @throw ArithmeticExceptionif numeric overflow occurs (defined by the query)
 */
- (id)queryWithJavaTimeTemporalTemporalQuery:(id<JavaTimeTemporalTemporalQuery>)query;

/*!
 @brief Gets the range of valid values for the specified field.
 <p>
  The range object expresses the minimum and maximum valid values for a field.
  This date is used to enhance the accuracy of the returned range.
  If it is not possible to return the range, because the field is not supported
  or for some other reason, an exception is thrown. 
 <p>
  If the field is a <code>ChronoField</code> then the query is implemented here.
  The <code>supported fields</code> will return
  appropriate range instances.
  All other <code>ChronoField</code> instances will throw an <code>UnsupportedTemporalTypeException</code>.
  <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.rangeRefinedBy(TemporalAccessor)</code>
  passing <code>this</code> as the argument.
  Whether the range can be obtained is determined by the field.
 @param field the field to query the range for, not null
 @return the range of valid values for the field, not null
 @throw DateTimeExceptionif the range for the field cannot be obtained
 @throw UnsupportedTemporalTypeExceptionif the field is not supported
 */
- (JavaTimeTemporalValueRange *)rangeWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field;

- (jlong)toEpochDay;

/*!
 @brief Outputs this date as a <code>String</code>, such as <code>2007-12-03</code>.
 <p>
  The output will be in the ISO-8601 format <code>uuuu-MM-dd</code>.
 @return a string representation of this date, not null
 */
- (NSString *)description;

/*!
 @brief Calculates the period between this date and another date as a <code>Period</code>.
 <p>
  This calculates the period between two dates in terms of years, months and days.
  The start and end points are <code>this</code> and the specified date.
  The result will be negative if the end is before the start.
  The negative sign will be the same in each of year, month and day. 
 <p>
  The calculation is performed using the ISO calendar system.
  If necessary, the input date will be converted to ISO. 
 <p>
  The start date is included, but the end date is not.
  The period is calculated by removing complete months, then calculating
  the remaining number of days, adjusting to ensure that both have the same sign.
  The number of months is then normalized into years and months based on a 12 month year.
  A month is considered to be complete if the end day-of-month is greater
  than or equal to the start day-of-month.
  For example, from <code>2010-01-15</code> to <code>2011-03-18</code> is "1 year, 2 months and 3 days". 
 <p>
  There are two equivalent ways of using this method.
  The first is to invoke this method.
  The second is to use <code>Period.between(LocalDate, LocalDate)</code>:
  @code

    // these two lines are equivalent
    period = start.until(end);
    period = Period.between(start, end); 
  
@endcode
  The choice should be made based on which makes the code more readable.
 @param endDateExclusive the end date, exclusive, which may be in any chronology, not null
 @return the period between this date and the end date, not null
 */
- (JavaTimePeriod *)untilWithJavaTimeChronoChronoLocalDate:(id<JavaTimeChronoChronoLocalDate>)endDateExclusive;

/*!
 @brief Calculates the amount of time until another date in terms of the specified unit.
 <p>
  This calculates the amount of time between two <code>LocalDate</code>
  objects in terms of a single <code>TemporalUnit</code>.
  The start and end points are <code>this</code> and the specified date.
  The result will be negative if the end is before the start. The 
 <code>Temporal</code> passed to this method is converted to a 
 <code>LocalDate</code> using <code>from(TemporalAccessor)</code>.
  For example, the amount in days between two dates can be calculated
  using <code>startDate.until(endDate, DAYS)</code>.
  <p>
  The calculation returns a whole number, representing the number of
  complete units between the two dates.
  For example, the amount in months between 2012-06-15 and 2012-08-14
  will only be one month as it is one day short of two months. 
 <p>
  There are two equivalent ways of using this method.
  The first is to invoke this method.
  The second is to use <code>TemporalUnit.between(Temporal, Temporal)</code>:
  @code

    // these two lines are equivalent
    amount = start.until(end, MONTHS);
    amount = MONTHS.between(start, end); 
  
@endcode
  The choice should be made based on which makes the code more readable. 
 <p>
  The calculation is implemented in this method for <code>ChronoUnit</code>.
  The units <code>DAYS</code>, <code>WEEKS</code>, <code>MONTHS</code>, <code>YEARS</code>,
  <code>DECADES</code>, <code>CENTURIES</code>, <code>MILLENNIA</code> and <code>ERAS</code>
  are supported. Other <code>ChronoUnit</code> values will throw an exception. 
 <p>
  If the unit is not a <code>ChronoUnit</code>, then the result of this method
  is obtained by invoking <code>TemporalUnit.between(Temporal, Temporal)</code>
  passing <code>this</code> as the first argument and the converted input temporal
  as the second argument. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param endExclusive the end date, exclusive, which is converted to a <code>LocalDate</code> , not null
 @param unit the unit to measure the amount in, not null
 @return the amount of time between this date and the end date
 @throw DateTimeExceptionif the amount cannot be calculated, or the end
   temporal cannot be converted to a <code>LocalDate</code>
 @throw UnsupportedTemporalTypeExceptionif the unit is not supported
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (jlong)untilWithJavaTimeTemporalTemporal:(id<JavaTimeTemporalTemporal>)endExclusive
          withJavaTimeTemporalTemporalUnit:(id<JavaTimeTemporalTemporalUnit>)unit;

/*!
 @brief Returns an adjusted copy of this date.
 <p>
  This returns a <code>LocalDate</code>, based on this one, with the date adjusted.
  The adjustment takes place using the specified adjuster strategy object.
  Read the documentation of the adjuster to understand what adjustment will be made. 
 <p>
  A simple adjuster might simply set the one of the fields, such as the year field.
  A more complex adjuster might set the date to the last day of the month. 
 <p>
  A selection of common adjustments is provided in 
 <code>TemporalAdjusters</code>.
  These include finding the "last day of the month" and "next Wednesday".
  Key date-time classes also implement the <code>TemporalAdjuster</code> interface,
  such as <code>Month</code> and <code>MonthDay</code>.
  The adjuster is responsible for handling special cases, such as the varying
  lengths of month and leap years. 
 <p>
  For example this code returns a date on the last day of July: 
 @code

   import static java.time.Month.*;
   import static java.time.temporal.TemporalAdjusters.*;
   result = localDate.with(JULY).with(lastDayOfMonth()); 
  
@endcode
  <p>
  The result of this method is obtained by invoking the 
 <code>TemporalAdjuster.adjustInto(Temporal)</code> method on the
  specified adjuster passing <code>this</code> as the argument. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param adjuster the adjuster to use, not null
 @return a <code>LocalDate</code> based on <code>this</code> with the adjustment made, not null
 @throw DateTimeExceptionif the adjustment cannot be made
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeLocalDate *)withWithJavaTimeTemporalTemporalAdjuster:(id<JavaTimeTemporalTemporalAdjuster>)adjuster;

/*!
 @brief Returns a copy of this date with the specified field set to a new value.
 <p>
  This returns a <code>LocalDate</code>, based on this one, with the value
  for the specified field changed.
  This can be used to change any supported field, such as the year, month or day-of-month.
  If it is not possible to set the value, because the field is not supported or for
  some other reason, an exception is thrown. 
 <p>
  In some cases, changing the specified field can cause the resulting date to become invalid,
  such as changing the month from 31st January to February would make the day-of-month invalid.
  In cases like this, the field is responsible for resolving the date. Typically it will choose
  the previous valid date, which would be the last valid day of February in this example. 
 <p>
  If the field is a <code>ChronoField</code> then the adjustment is implemented here.
  The supported fields behave as follows: 
 <ul>
  <li><code>DAY_OF_WEEK</code> -
   Returns a <code>LocalDate</code> with the specified day-of-week.
   The date is adjusted up to 6 days forward or backward within the boundary
   of a Monday to Sunday week. 
 <li><code>ALIGNED_DAY_OF_WEEK_IN_MONTH</code> -
   Returns a <code>LocalDate</code> with the specified aligned-day-of-week.
   The date is adjusted to the specified month-based aligned-day-of-week.
   Aligned weeks are counted such that the first week of a given month starts
   on the first day of that month.
   This may cause the date to be moved up to 6 days into the following month. 
 <li><code>ALIGNED_DAY_OF_WEEK_IN_YEAR</code> -
   Returns a <code>LocalDate</code> with the specified aligned-day-of-week.
   The date is adjusted to the specified year-based aligned-day-of-week.
   Aligned weeks are counted such that the first week of a given year starts
   on the first day of that year.
   This may cause the date to be moved up to 6 days into the following year. 
 <li><code>DAY_OF_MONTH</code> -
   Returns a <code>LocalDate</code> with the specified day-of-month.
   The month and year will be unchanged. If the day-of-month is invalid for the
   year and month, then a <code>DateTimeException</code> is thrown. 
 <li><code>DAY_OF_YEAR</code> -
   Returns a <code>LocalDate</code> with the specified day-of-year.
   The year will be unchanged. If the day-of-year is invalid for the
   year, then a <code>DateTimeException</code> is thrown. 
 <li><code>EPOCH_DAY</code> -
   Returns a <code>LocalDate</code> with the specified epoch-day.
   This completely replaces the date and is equivalent to <code>ofEpochDay(long)</code>.
  <li><code>ALIGNED_WEEK_OF_MONTH</code> -
   Returns a <code>LocalDate</code> with the specified aligned-week-of-month.
   Aligned weeks are counted such that the first week of a given month starts
   on the first day of that month.
   This adjustment moves the date in whole week chunks to match the specified week.
   The result will have the same day-of-week as this date.
   This may cause the date to be moved into the following month. 
 <li><code>ALIGNED_WEEK_OF_YEAR</code> -
   Returns a <code>LocalDate</code> with the specified aligned-week-of-year.
   Aligned weeks are counted such that the first week of a given year starts
   on the first day of that year.
   This adjustment moves the date in whole week chunks to match the specified week.
   The result will have the same day-of-week as this date.
   This may cause the date to be moved into the following year. 
 <li><code>MONTH_OF_YEAR</code> -
   Returns a <code>LocalDate</code> with the specified month-of-year.
   The year will be unchanged. The day-of-month will also be unchanged,
   unless it would be invalid for the new month and year. In that case, the
   day-of-month is adjusted to the maximum valid value for the new month and year. 
 <li><code>PROLEPTIC_MONTH</code> -
   Returns a <code>LocalDate</code> with the specified proleptic-month.
   The day-of-month will be unchanged, unless it would be invalid for the new month
   and year. In that case, the day-of-month is adjusted to the maximum valid value
   for the new month and year. 
 <li><code>YEAR_OF_ERA</code> -
   Returns a <code>LocalDate</code> with the specified year-of-era.
   The era and month will be unchanged. The day-of-month will also be unchanged,
   unless it would be invalid for the new month and year. In that case, the
   day-of-month is adjusted to the maximum valid value for the new month and year. 
 <li><code>YEAR</code> -
   Returns a <code>LocalDate</code> with the specified year.
   The month will be unchanged. The day-of-month will also be unchanged,
   unless it would be invalid for the new month and year. In that case, the
   day-of-month is adjusted to the maximum valid value for the new month and year. 
 <li><code>ERA</code> -
   Returns a <code>LocalDate</code> with the specified era.
   The year-of-era and month will be unchanged. The day-of-month will also be unchanged,
   unless it would be invalid for the new month and year. In that case, the
   day-of-month is adjusted to the maximum valid value for the new month and year. 
 </ul>
  <p>
  In all cases, if the new value is outside the valid range of values for the field
  then a <code>DateTimeException</code> will be thrown. 
 <p>
  All other <code>ChronoField</code> instances will throw an <code>UnsupportedTemporalTypeException</code>.
  <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.adjustInto(Temporal, long)</code>
  passing <code>this</code> as the argument. In this case, the field determines
  whether and how to adjust the instant. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param field the field to set in the result, not null
 @param newValue the new value of the field in the result
 @return a <code>LocalDate</code> based on <code>this</code> with the specified field set, not null
 @throw DateTimeExceptionif the field cannot be set
 @throw UnsupportedTemporalTypeExceptionif the field is not supported
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeLocalDate *)withWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field
                                                    withLong:(jlong)newValue;

/*!
 @brief Returns a copy of this <code>LocalDate</code> with the day-of-month altered.
 <p>
  If the resulting date is invalid, an exception is thrown. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param dayOfMonth the day-of-month to set in the result, from 1 to 28-31
 @return a <code>LocalDate</code> based on this date with the requested day, not null
 @throw DateTimeExceptionif the day-of-month value is invalid,
   or if the day-of-month is invalid for the month-year
 */
- (JavaTimeLocalDate *)withDayOfMonthWithInt:(jint)dayOfMonth;

/*!
 @brief Returns a copy of this <code>LocalDate</code> with the day-of-year altered.
 <p>
  If the resulting date is invalid, an exception is thrown. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param dayOfYear the day-of-year to set in the result, from 1 to 365-366
 @return a <code>LocalDate</code> based on this date with the requested day, not null
 @throw DateTimeExceptionif the day-of-year value is invalid,
   or if the day-of-year is invalid for the year
 */
- (JavaTimeLocalDate *)withDayOfYearWithInt:(jint)dayOfYear;

/*!
 @brief Returns a copy of this <code>LocalDate</code> with the month-of-year altered.
 <p>
  If the day-of-month is invalid for the year, it will be changed to the last valid day of the month. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param month the month-of-year to set in the result, from 1 (January) to 12 (December)
 @return a <code>LocalDate</code> based on this date with the requested month, not null
 @throw DateTimeExceptionif the month-of-year value is invalid
 */
- (JavaTimeLocalDate *)withMonthWithInt:(jint)month;

/*!
 @brief Returns a copy of this <code>LocalDate</code> with the year altered.
 <p>
  If the day-of-month is invalid for the year, it will be changed to the last valid day of the month. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param year the year to set in the result, from MIN_YEAR to MAX_YEAR
 @return a <code>LocalDate</code> based on this date with the requested year, not null
 @throw DateTimeExceptionif the year value is invalid
 */
- (JavaTimeLocalDate *)withYearWithInt:(jint)year;

#pragma mark Package-Private

- (jint)compareTo0WithJavaTimeLocalDate:(JavaTimeLocalDate *)otherDate;

- (jlong)daysUntilWithJavaTimeLocalDate:(JavaTimeLocalDate *)end;

+ (JavaTimeLocalDate *)readExternalWithJavaIoDataInput:(id<JavaIoDataInput>)inArg;

- (void)writeExternalWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(JavaTimeLocalDate)

/*!
 @brief The minimum supported <code>LocalDate</code>, '-999999999-01-01'.
 This could be used by an application as a "far past" date.
 */
inline JavaTimeLocalDate *JavaTimeLocalDate_get_MIN(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaTimeLocalDate *JavaTimeLocalDate_MIN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaTimeLocalDate, MIN, JavaTimeLocalDate *)

/*!
 @brief The maximum supported <code>LocalDate</code>, '+999999999-12-31'.
 This could be used by an application as a "far future" date.
 */
inline JavaTimeLocalDate *JavaTimeLocalDate_get_MAX(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaTimeLocalDate *JavaTimeLocalDate_MAX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaTimeLocalDate, MAX, JavaTimeLocalDate *)

/*!
 @brief The number of days from year zero to year 1970.
 There are five 400 year cycles from year zero to 2000.
  There are 7 leap years from 1970 to 2000.
 */
inline jlong JavaTimeLocalDate_get_DAYS_0000_TO_1970(void);
#define JavaTimeLocalDate_DAYS_0000_TO_1970 719528LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaTimeLocalDate, DAYS_0000_TO_1970, jlong)

FOUNDATION_EXPORT JavaTimeLocalDate *JavaTimeLocalDate_now(void);

FOUNDATION_EXPORT JavaTimeLocalDate *JavaTimeLocalDate_nowWithJavaTimeZoneId_(JavaTimeZoneId *zone);

FOUNDATION_EXPORT JavaTimeLocalDate *JavaTimeLocalDate_nowWithJavaTimeClock_(JavaTimeClock *clock);

FOUNDATION_EXPORT JavaTimeLocalDate *JavaTimeLocalDate_ofWithInt_withJavaTimeMonth_withInt_(jint year, JavaTimeMonth *month, jint dayOfMonth);

FOUNDATION_EXPORT JavaTimeLocalDate *JavaTimeLocalDate_ofWithInt_withInt_withInt_(jint year, jint month, jint dayOfMonth);

FOUNDATION_EXPORT JavaTimeLocalDate *JavaTimeLocalDate_ofYearDayWithInt_withInt_(jint year, jint dayOfYear);

FOUNDATION_EXPORT JavaTimeLocalDate *JavaTimeLocalDate_ofEpochDayWithLong_(jlong epochDay);

FOUNDATION_EXPORT JavaTimeLocalDate *JavaTimeLocalDate_fromWithJavaTimeTemporalTemporalAccessor_(id<JavaTimeTemporalTemporalAccessor> temporal);

FOUNDATION_EXPORT JavaTimeLocalDate *JavaTimeLocalDate_parseWithJavaLangCharSequence_(id<JavaLangCharSequence> text);

FOUNDATION_EXPORT JavaTimeLocalDate *JavaTimeLocalDate_parseWithJavaLangCharSequence_withJavaTimeFormatDateTimeFormatter_(id<JavaLangCharSequence> text, JavaTimeFormatDateTimeFormatter *formatter);

FOUNDATION_EXPORT JavaTimeLocalDate *JavaTimeLocalDate_readExternalWithJavaIoDataInput_(id<JavaIoDataInput> inArg);

J2OBJC_TYPE_LITERAL_HEADER(JavaTimeLocalDate)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaTimeLocalDate")
