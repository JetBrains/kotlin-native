//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/time/ZoneId.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaTimeZoneId")
#ifdef RESTRICT_JavaTimeZoneId
#define INCLUDE_ALL_JavaTimeZoneId 0
#else
#define INCLUDE_ALL_JavaTimeZoneId 1
#endif
#undef RESTRICT_JavaTimeZoneId

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaTimeZoneId_) && (INCLUDE_ALL_JavaTimeZoneId || defined(INCLUDE_JavaTimeZoneId))
#define JavaTimeZoneId_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class JavaTimeFormatTextStyle;
@class JavaTimeZoneOffset;
@class JavaTimeZoneZoneRules;
@class JavaUtilLocale;
@class JavaUtilTimeZone;
@protocol JavaIoDataOutput;
@protocol JavaTimeTemporalTemporalAccessor;
@protocol JavaUtilMap;
@protocol JavaUtilSet;

/*!
 @brief A time-zone ID, such as <code>Europe/Paris</code>.
 <p>
  A <code>ZoneId</code> is used to identify the rules used to convert between
  an <code>Instant</code> and a <code>LocalDateTime</code>.
  There are two distinct types of ID: 
 <ul>
  <li>Fixed offsets - a fully resolved offset from UTC/Greenwich, that uses
   the same offset for all local date-times 
 <li>Geographical regions - an area where a specific set of rules for finding
   the offset from UTC/Greenwich apply 
 </ul>
  Most fixed offsets are represented by <code>ZoneOffset</code>.
  Calling <code>normalized()</code> on any <code>ZoneId</code> will ensure that a
  fixed offset ID will be represented as a <code>ZoneOffset</code>.
  <p>
  The actual rules, describing when and how the offset changes, are defined by <code>ZoneRules</code>.
  This class is simply an ID used to obtain the underlying rules.
  This approach is taken because rules are defined by governments and change
  frequently, whereas the ID is stable. 
 <p>
  The distinction has other effects. Serializing the <code>ZoneId</code> will only send
  the ID, whereas serializing the rules sends the entire data set.
  Similarly, a comparison of two IDs only examines the ID, whereas
  a comparison of two rules examines the entire data set. 
 <h3>Time-zone IDs</h3>
  The ID is unique within the system.
  There are three types of ID. 
 <p>
  The simplest type of ID is that from <code>ZoneOffset</code>.
  This consists of 'Z' and IDs starting with '+' or '-'. 
 <p>
  The next type of ID are offset-style IDs with some form of prefix,
  such as 'GMT+2' or 'UTC+01:00'.
  The recognised prefixes are 'UTC', 'GMT' and 'UT'.
  The offset is the suffix and will be normalized during creation.
  These IDs can be normalized to a <code>ZoneOffset</code> using <code>normalized()</code>.
  <p>
  The third type of ID are region-based IDs. A region-based ID must be of
  two or more characters, and not start with 'UTC', 'GMT', 'UT' '+' or '-'.
  Region-based IDs are defined by configuration.
  The configuration focuses on providing the lookup from the ID to the
  underlying <code>ZoneRules</code>.
  <p>
  Time-zone rules are defined by governments and change frequently.
  There are a number of organizations, known here as groups, that monitor
  time-zone changes and collate them.
  The default group is the IANA Time Zone Database (TZDB).
  Other organizations include IATA (the airline industry body) and Microsoft. 
 <p>
  Each group defines its own format for the region ID it provides.
  The TZDB group defines IDs such as 'Europe/London' or 'America/New_York'.
  TZDB IDs take precedence over other groups. 
 <p>
  It is strongly recommended that the group name is included in all IDs supplied by
  groups other than TZDB to avoid conflicts. For example, IATA airline time-zone
  region IDs are typically the same as the three letter airport code.
  However, the airport of Utrecht has the code 'UTC', which is obviously a conflict.
  The recommended format for region IDs from groups other than TZDB is 'group~region'.
  Thus if IATA data were defined, Utrecht airport would be 'IATA~UTC'. 
 <h3>Serialization</h3>
  This class can be serialized and stores the string zone ID in the external form.
  The <code>ZoneOffset</code> subclass uses a dedicated format that only stores the
  offset from UTC/Greenwich. 
 <p>
  A <code>ZoneId</code> can be deserialized in a Java Runtime where the ID is unknown.
  For example, if a server-side Java Runtime has been updated with a new zone ID, but
  the client-side Java Runtime has not been updated. In this case, the <code>ZoneId</code>
  object will exist, and can be queried using <code>getId</code>, <code>equals</code>,
  <code>hashCode</code>, <code>toString</code>, <code>getDisplayName</code> and <code>normalized</code>.
  However, any call to <code>getRules</code> will fail with <code>ZoneRulesException</code>.
  This approach is designed to allow a <code>ZonedDateTime</code> to be loaded and
  queried, but not modified, on a Java Runtime with incomplete time-zone information.
 @since 1.8
 */
@interface JavaTimeZoneId : NSObject < JavaIoSerializable >
@property (readonly, class, strong) id<JavaUtilMap> SHORT_IDS NS_SWIFT_NAME(SHORT_IDS);

+ (id<JavaUtilMap>)SHORT_IDS;

#pragma mark Public

/*!
 @brief Checks if this time-zone ID is equal to another time-zone ID.
 <p>
  The comparison is based on the ID.
 @param obj the object to check, null returns false
 @return true if this is equal to the other time-zone ID
 */
- (jboolean)isEqual:(id)obj;

/*!
 @brief Obtains an instance of <code>ZoneId</code> from a temporal object.
 <p>
  This obtains a zone based on the specified temporal.
  A <code>TemporalAccessor</code> represents an arbitrary set of date and time information,
  which this factory converts to an instance of <code>ZoneId</code>.
  <p>
  A <code>TemporalAccessor</code> represents some form of date and time information.
  This factory converts the arbitrary temporal object to an instance of <code>ZoneId</code>.
  <p>
  The conversion will try to obtain the zone in a way that favours region-based
  zones over offset-based zones using <code>TemporalQueries.zone()</code>.
  <p>
  This method matches the signature of the functional interface <code>TemporalQuery</code>
  allowing it to be used as a query via method reference, <code>ZoneId::from</code>.
 @param temporal the temporal object to convert, not null
 @return the zone ID, not null
 @throw DateTimeExceptionif unable to convert to a <code>ZoneId</code>
 */
+ (JavaTimeZoneId *)fromWithJavaTimeTemporalTemporalAccessor:(id<JavaTimeTemporalTemporalAccessor>)temporal;

/*!
 @brief Gets the set of available zone IDs.
 <p>
  This set includes the string form of all available region-based IDs.
  Offset-based zone IDs are not included in the returned set.
  The ID can be passed to <code>of(String)</code> to create a <code>ZoneId</code>.
  <p>
  The set of zone IDs can increase over time, although in a typical application
  the set of IDs is fixed. Each call to this method is thread-safe.
 @return a modifiable copy of the set of zone IDs, not null
 */
+ (id<JavaUtilSet>)getAvailableZoneIds;

/*!
 @brief Gets the textual representation of the zone, such as 'British Time' or
  '+02:00'.
 <p>
  This returns the textual name used to identify the time-zone ID,
  suitable for presentation to the user.
  The parameters control the style of the returned text and the locale. 
 <p>
  If no textual mapping is found then the <code>full ID</code> is returned.
 @param style the length of the text required, not null
 @param locale the locale to use, not null
 @return the text value of the zone, not null
 */
- (NSString *)getDisplayNameWithJavaTimeFormatTextStyle:(JavaTimeFormatTextStyle *)style
                                     withJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Gets the unique time-zone ID.
 <p>
  This ID uniquely defines this object.
  The format of an offset based ID is defined by <code>ZoneOffset.getId()</code>.
 @return the time-zone unique ID, not null
 */
- (NSString *)getId;

/*!
 @brief Gets the time-zone rules for this ID allowing calculations to be performed.
 <p>
  The rules provide the functionality associated with a time-zone,
  such as finding the offset for a given instant or local date-time. 
 <p>
  A time-zone can be invalid if it is deserialized in a Java Runtime which
  does not have the same rules loaded as the Java Runtime that stored it.
  In this case, calling this method will throw a <code>ZoneRulesException</code>.
  <p>
  <code>ZoneOffset</code> will always return a set of rules where the offset never changes.
 @return the rules, not null
 @throw ZoneRulesExceptionif no rules are available for this ID
 */
- (JavaTimeZoneZoneRules *)getRules;

/*!
 @brief A hash code for this time-zone ID.
 @return a suitable hash code
 */
- (NSUInteger)hash;

/*!
 @brief Normalizes the time-zone ID, returning a <code>ZoneOffset</code> where possible.
 <p>
  The returns a normalized <code>ZoneId</code> that can be used in place of this ID.
  The result will have <code>ZoneRules</code> equivalent to those returned by this object,
  however the ID returned by <code>getId()</code> may be different. 
 <p>
  The normalization checks if the rules of this <code>ZoneId</code> have a fixed offset.
  If they do, then the <code>ZoneOffset</code> equal to that offset is returned.
  Otherwise <code>this</code> is returned.
 @return the time-zone unique ID, not null
 */
- (JavaTimeZoneId *)normalized;

/*!
 @brief Obtains an instance of <code>ZoneId</code> from an ID ensuring that the
  ID is valid and available for use.
 <p>
  This method parses the ID producing a <code>ZoneId</code> or <code>ZoneOffset</code>.
  A <code>ZoneOffset</code> is returned if the ID is 'Z', or starts with '+' or '-'.
  The result will always be a valid ID for which <code>ZoneRules</code> can be obtained. 
 <p>
  Parsing matches the zone ID step by step as follows. 
 <ul>
  <li>If the zone ID equals 'Z', the result is <code>ZoneOffset.UTC</code>.
  <li>If the zone ID consists of a single letter, the zone ID is invalid
   and <code>DateTimeException</code> is thrown. 
 <li>If the zone ID starts with '+' or '-', the ID is parsed as a
   <code>ZoneOffset</code> using <code>ZoneOffset.of(String)</code>.
  <li>If the zone ID equals 'GMT', 'UTC' or 'UT' then the result is a <code>ZoneId</code>
   with the same ID and rules equivalent to <code>ZoneOffset.UTC</code>.
  <li>If the zone ID starts with 'UTC+', 'UTC-', 'GMT+', 'GMT-', 'UT+' or 'UT-'
   then the ID is a prefixed offset-based ID. The ID is split in two, with
   a two or three letter prefix and a suffix starting with the sign.
   The suffix is parsed as a <code>ZoneOffset</code>.
   The result will be a <code>ZoneId</code> with the specified UTC/GMT/UT prefix
   and the normalized offset ID as per <code>ZoneOffset.getId()</code>.
   The rules of the returned <code>ZoneId</code> will be equivalent to the
   parsed <code>ZoneOffset</code>.
  <li>All other IDs are parsed as region-based zone IDs. Region IDs must
   match the regular expression <code>[A-Za-z][A-Za-z0-9~/._+-]+</code>
   otherwise a <code>DateTimeException</code> is thrown. If the zone ID is not
   in the configured set of IDs, <code>ZoneRulesException</code> is thrown.
   The detailed format of the region ID depends on the group supplying the data.
   The default set of data is supplied by the IANA Time Zone Database (TZDB).
   This has region IDs of the form '{area}/{city}', such as 'Europe/Paris' or 'America/New_York'.
   This is compatible with most IDs from <code>java.util.TimeZone</code>.
  </ul>
 @param zoneId the time-zone ID, not null
 @return the zone ID, not null
 @throw DateTimeExceptionif the zone ID has an invalid format
 @throw ZoneRulesExceptionif the zone ID is a region ID that cannot be found
 */
+ (JavaTimeZoneId *)ofWithNSString:(NSString *)zoneId;

/*!
 @brief Obtains an instance of <code>ZoneId</code> using its ID using a map
  of aliases to supplement the standard zone IDs.
 <p>
  Many users of time-zones use short abbreviations, such as PST for
  'Pacific Standard Time' and PDT for 'Pacific Daylight Time'.
  These abbreviations are not unique, and so cannot be used as IDs.
  This method allows a map of string to time-zone to be setup and reused
  within an application.
 @param zoneId the time-zone ID, not null
 @param aliasMap a map of alias zone IDs (typically abbreviations) to real zone IDs, not null
 @return the zone ID, not null
 @throw DateTimeExceptionif the zone ID has an invalid format
 @throw ZoneRulesExceptionif the zone ID is a region ID that cannot be found
 */
+ (JavaTimeZoneId *)ofWithNSString:(NSString *)zoneId
                   withJavaUtilMap:(id<JavaUtilMap>)aliasMap;

/*!
 @brief Obtains an instance of <code>ZoneId</code> wrapping an offset.
 <p>
  If the prefix is "GMT", "UTC", or "UT" a <code>ZoneId</code>
  with the prefix and the non-zero offset is returned.
  If the prefix is empty <code>""</code> the <code>ZoneOffset</code> is returned.
 @param prefix the time-zone ID, not null
 @param offset the offset, not null
 @return the zone ID, not null
 @throw IllegalArgumentExceptionif the prefix is not one of
      "GMT", "UTC", or "UT", or ""
 */
+ (JavaTimeZoneId *)ofOffsetWithNSString:(NSString *)prefix
                  withJavaTimeZoneOffset:(JavaTimeZoneOffset *)offset;

/*!
 @brief Gets the system default time-zone.
 <p>
  This queries <code>TimeZone.getDefault()</code> to find the default time-zone
  and converts it to a <code>ZoneId</code>. If the system default time-zone is changed,
  then the result of this method will also change.
 @return the zone ID, not null
 @throw DateTimeExceptionif the converted zone ID has an invalid format
 @throw ZoneRulesExceptionif the converted zone region ID cannot be found
 */
+ (JavaTimeZoneId *)systemDefault;

/*!
 @brief Outputs this zone as a <code>String</code>, using the ID.
 @return a string representation of this time-zone ID, not null
 */
- (NSString *)description;

/*!
 @brief J2ObjC: moved from java.util to keep jre_core independent of jre_time.
 Converts a <code>TimeZone</code> object to a <code>ZoneId</code>.
 @return a <code>ZoneId</code> representing the same time zone as this
          <code>TimeZone</code>
 @since 1.8
 */
+ (JavaTimeZoneId *)toZoneIdWithJavaUtilTimeZone:(JavaUtilTimeZone *)tz;

#pragma mark Package-Private

/*!
 @brief Constructor only accessible within the package.
 */
- (instancetype __nonnull)init;

/*!
 @brief Parses the ID, taking a flag to indicate whether <code>ZoneRulesException</code>
  should be thrown or not, used in deserialization.
 @param zoneId the time-zone ID, not null
 @param checkAvailable whether to check if the zone ID is available
 @return the zone ID, not null
 @throw DateTimeExceptionif the ID format is invalid
 @throw ZoneRulesExceptionif checking availability and the ID cannot be found
 */
+ (JavaTimeZoneId *)ofWithNSString:(NSString *)zoneId
                       withBoolean:(jboolean)checkAvailable;

- (void)writeWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg;

@end

J2OBJC_STATIC_INIT(JavaTimeZoneId)

/*!
 @brief A map of zone overrides to enable the short time-zone names to be used.
 <p>
  Use of short zone IDs has been deprecated in <code>java.util.TimeZone</code>.
  This map allows the IDs to continue to be used via the 
 <code>of(String, Map)</code> factory method. 
 <p>
  This map contains a mapping of the IDs that is in line with TZDB 2005r and
  later, where 'EST', 'MST' and 'HST' map to IDs which do not include daylight
  savings. 
 <p>
  This maps as follows: 
 <ul>
  <li>EST - -05:00</li>
  <li>HST - -10:00</li>
  <li>MST - -07:00</li>
  <li>ACT - Australia/Darwin</li>
  <li>AET - Australia/Sydney</li>
  <li>AGT - America/Argentina/Buenos_Aires</li>
  <li>ART - Africa/Cairo</li>
  <li>AST - America/Anchorage</li>
  <li>BET - America/Sao_Paulo</li>
  <li>BST - Asia/Dhaka</li>
  <li>CAT - Africa/Harare</li>
  <li>CNT - America/St_Johns</li>
  <li>CST - America/Chicago</li>
  <li>CTT - Asia/Shanghai</li>
  <li>EAT - Africa/Addis_Ababa</li>
  <li>ECT - Europe/Paris</li>
  <li>IET - America/Indiana/Indianapolis</li>
  <li>IST - Asia/Kolkata</li>
  <li>JST - Asia/Tokyo</li>
  <li>MIT - Pacific/Apia</li>
  <li>NET - Asia/Yerevan</li>
  <li>NST - Pacific/Auckland</li>
  <li>PLT - Asia/Karachi</li>
  <li>PNT - America/Phoenix</li>
  <li>PRT - America/Puerto_Rico</li>
  <li>PST - America/Los_Angeles</li>
  <li>SST - Pacific/Guadalcanal</li>
  <li>VST - Asia/Ho_Chi_Minh</li>
  </ul>
  The map is unmodifiable.
 */
inline id<JavaUtilMap> JavaTimeZoneId_get_SHORT_IDS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilMap> JavaTimeZoneId_SHORT_IDS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaTimeZoneId, SHORT_IDS, id<JavaUtilMap>)

FOUNDATION_EXPORT JavaTimeZoneId *JavaTimeZoneId_systemDefault(void);

FOUNDATION_EXPORT JavaTimeZoneId *JavaTimeZoneId_toZoneIdWithJavaUtilTimeZone_(JavaUtilTimeZone *tz);

FOUNDATION_EXPORT id<JavaUtilSet> JavaTimeZoneId_getAvailableZoneIds(void);

FOUNDATION_EXPORT JavaTimeZoneId *JavaTimeZoneId_ofWithNSString_withJavaUtilMap_(NSString *zoneId, id<JavaUtilMap> aliasMap);

FOUNDATION_EXPORT JavaTimeZoneId *JavaTimeZoneId_ofWithNSString_(NSString *zoneId);

FOUNDATION_EXPORT JavaTimeZoneId *JavaTimeZoneId_ofOffsetWithNSString_withJavaTimeZoneOffset_(NSString *prefix, JavaTimeZoneOffset *offset);

FOUNDATION_EXPORT JavaTimeZoneId *JavaTimeZoneId_ofWithNSString_withBoolean_(NSString *zoneId, jboolean checkAvailable);

FOUNDATION_EXPORT JavaTimeZoneId *JavaTimeZoneId_fromWithJavaTimeTemporalTemporalAccessor_(id<JavaTimeTemporalTemporalAccessor> temporal);

FOUNDATION_EXPORT void JavaTimeZoneId_init(JavaTimeZoneId *self);

J2OBJC_TYPE_LITERAL_HEADER(JavaTimeZoneId)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaTimeZoneId")
