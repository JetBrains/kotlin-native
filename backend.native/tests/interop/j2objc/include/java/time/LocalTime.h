//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/time/LocalTime.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaTimeLocalTime")
#ifdef RESTRICT_JavaTimeLocalTime
#define INCLUDE_ALL_JavaTimeLocalTime 0
#else
#define INCLUDE_ALL_JavaTimeLocalTime 1
#endif
#undef RESTRICT_JavaTimeLocalTime

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaTimeLocalTime_) && (INCLUDE_ALL_JavaTimeLocalTime || defined(INCLUDE_JavaTimeLocalTime))
#define JavaTimeLocalTime_

#define RESTRICT_JavaTimeTemporalTemporal 1
#define INCLUDE_JavaTimeTemporalTemporal 1
#include "java/time/temporal/Temporal.h"

#define RESTRICT_JavaTimeTemporalTemporalAdjuster 1
#define INCLUDE_JavaTimeTemporalTemporalAdjuster 1
#include "java/time/temporal/TemporalAdjuster.h"

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "java/lang/Comparable.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class JavaTimeClock;
@class JavaTimeFormatDateTimeFormatter;
@class JavaTimeLocalDate;
@class JavaTimeLocalDateTime;
@class JavaTimeOffsetTime;
@class JavaTimeTemporalValueRange;
@class JavaTimeZoneId;
@class JavaTimeZoneOffset;
@protocol JavaIoDataInput;
@protocol JavaIoDataOutput;
@protocol JavaLangCharSequence;
@protocol JavaTimeTemporalTemporalAccessor;
@protocol JavaTimeTemporalTemporalAmount;
@protocol JavaTimeTemporalTemporalField;
@protocol JavaTimeTemporalTemporalQuery;
@protocol JavaTimeTemporalTemporalUnit;

/*!
 @brief A time without a time-zone in the ISO-8601 calendar system,
  such as <code>10:15:30</code>.
 <p>
  <code>LocalTime</code> is an immutable date-time object that represents a time,
  often viewed as hour-minute-second.
  Time is represented to nanosecond precision.
  For example, the value "13:45.30.123456789" can be stored in a <code>LocalTime</code>.
  <p>
  This class does not store or represent a date or time-zone.
  Instead, it is a description of the local time as seen on a wall clock.
  It cannot represent an instant on the time-line without additional information
  such as an offset or time-zone. 
 <p>
  The ISO-8601 calendar system is the modern civil calendar system used today
  in most of the world. This API assumes that all calendar systems use the same
  representation, this class, for time-of-day.
 @since 1.8
 */
@interface JavaTimeLocalTime : NSObject < JavaTimeTemporalTemporal, JavaTimeTemporalTemporalAdjuster, JavaLangComparable, JavaIoSerializable >
@property (readonly, class, strong) JavaTimeLocalTime *MIN NS_SWIFT_NAME(MIN);
@property (readonly, class, strong) JavaTimeLocalTime *MAX NS_SWIFT_NAME(MAX);
@property (readonly, class, strong) JavaTimeLocalTime *MIDNIGHT NS_SWIFT_NAME(MIDNIGHT);
@property (readonly, class, strong) JavaTimeLocalTime *NOON NS_SWIFT_NAME(NOON);
@property (readonly, class) jint HOURS_PER_DAY NS_SWIFT_NAME(HOURS_PER_DAY);
@property (readonly, class) jint MINUTES_PER_HOUR NS_SWIFT_NAME(MINUTES_PER_HOUR);
@property (readonly, class) jint MINUTES_PER_DAY NS_SWIFT_NAME(MINUTES_PER_DAY);
@property (readonly, class) jint SECONDS_PER_MINUTE NS_SWIFT_NAME(SECONDS_PER_MINUTE);
@property (readonly, class) jint SECONDS_PER_HOUR NS_SWIFT_NAME(SECONDS_PER_HOUR);
@property (readonly, class) jint SECONDS_PER_DAY NS_SWIFT_NAME(SECONDS_PER_DAY);
@property (readonly, class) jlong MILLIS_PER_DAY NS_SWIFT_NAME(MILLIS_PER_DAY);
@property (readonly, class) jlong MICROS_PER_DAY NS_SWIFT_NAME(MICROS_PER_DAY);
@property (readonly, class) jlong NANOS_PER_SECOND NS_SWIFT_NAME(NANOS_PER_SECOND);
@property (readonly, class) jlong NANOS_PER_MINUTE NS_SWIFT_NAME(NANOS_PER_MINUTE);
@property (readonly, class) jlong NANOS_PER_HOUR NS_SWIFT_NAME(NANOS_PER_HOUR);
@property (readonly, class) jlong NANOS_PER_DAY NS_SWIFT_NAME(NANOS_PER_DAY);

+ (JavaTimeLocalTime *)MIN;

+ (JavaTimeLocalTime *)MAX;

+ (JavaTimeLocalTime *)MIDNIGHT;

+ (JavaTimeLocalTime *)NOON;

+ (jint)HOURS_PER_DAY;

+ (jint)MINUTES_PER_HOUR;

+ (jint)MINUTES_PER_DAY;

+ (jint)SECONDS_PER_MINUTE;

+ (jint)SECONDS_PER_HOUR;

+ (jint)SECONDS_PER_DAY;

+ (jlong)MILLIS_PER_DAY;

+ (jlong)MICROS_PER_DAY;

+ (jlong)NANOS_PER_SECOND;

+ (jlong)NANOS_PER_MINUTE;

+ (jlong)NANOS_PER_HOUR;

+ (jlong)NANOS_PER_DAY;

#pragma mark Public

/*!
 @brief Adjusts the specified temporal object to have the same time as this object.
 <p>
  This returns a temporal object of the same observable type as the input
  with the time changed to be the same as this. 
 <p>
  The adjustment is equivalent to using <code>Temporal.with(TemporalField, long)</code>
  passing <code>ChronoField.NANO_OF_DAY</code> as the field. 
 <p>
  In most cases, it is clearer to reverse the calling pattern by using 
 <code>Temporal.with(TemporalAdjuster)</code>:
  @code

    // these two lines are equivalent, but the second approach is recommended
    temporal = thisLocalTime.adjustInto(temporal);
    temporal = temporal.with(thisLocalTime); 
  
@endcode
  <p>
  This instance is immutable and unaffected by this method call.
 @param temporal the target object to be adjusted, not null
 @return the adjusted object, not null
 @throw DateTimeExceptionif unable to make the adjustment
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (id<JavaTimeTemporalTemporal>)adjustIntoWithJavaTimeTemporalTemporal:(id<JavaTimeTemporalTemporal>)temporal;

/*!
 @brief Combines this time with a date to create a <code>LocalDateTime</code>.
 <p>
  This returns a <code>LocalDateTime</code> formed from this time at the specified date.
  All possible combinations of date and time are valid.
 @param date the date to combine with, not null
 @return the local date-time formed from this time and the specified date, not null
 */
- (JavaTimeLocalDateTime *)atDateWithJavaTimeLocalDate:(JavaTimeLocalDate *)date;

/*!
 @brief Combines this time with an offset to create an <code>OffsetTime</code>.
 <p>
  This returns an <code>OffsetTime</code> formed from this time at the specified offset.
  All possible combinations of time and offset are valid.
 @param offset the offset to combine with, not null
 @return the offset time formed from this time and the specified offset, not null
 */
- (JavaTimeOffsetTime *)atOffsetWithJavaTimeZoneOffset:(JavaTimeZoneOffset *)offset;

/*!
 @brief Compares this time to another time.
 <p>
  The comparison is based on the time-line position of the local times within a day.
  It is "consistent with equals", as defined by <code>Comparable</code>.
 @param other the other time to compare to, not null
 @return the comparator value, negative if less, positive if greater
 @throw NullPointerExceptionif <code>other</code> is null
 */
- (jint)compareToWithId:(JavaTimeLocalTime *)other;

/*!
 @brief Checks if this time is equal to another time.
 <p>
  The comparison is based on the time-line position of the time within a day. 
 <p>
  Only objects of type <code>LocalTime</code> are compared, other types return false.
  To compare the date of two <code>TemporalAccessor</code> instances, use 
 <code>ChronoField.NANO_OF_DAY</code> as a comparator.
 @param obj the object to check, null returns false
 @return true if this is equal to the other time
 */
- (jboolean)isEqual:(id)obj;

/*!
 @brief Formats this time using the specified formatter.
 <p>
  This time will be passed to the formatter to produce a string.
 @param formatter the formatter to use, not null
 @return the formatted time string, not null
 @throw DateTimeExceptionif an error occurs during printing
 */
- (NSString *)formatWithJavaTimeFormatDateTimeFormatter:(JavaTimeFormatDateTimeFormatter *)formatter;

/*!
 @brief Obtains an instance of <code>LocalTime</code> from a temporal object.
 <p>
  This obtains a local time based on the specified temporal.
  A <code>TemporalAccessor</code> represents an arbitrary set of date and time information,
  which this factory converts to an instance of <code>LocalTime</code>.
  <p>
  The conversion uses the <code>TemporalQueries.localTime()</code> query, which relies
  on extracting the <code>NANO_OF_DAY</code> field. 
 <p>
  This method matches the signature of the functional interface <code>TemporalQuery</code>
  allowing it to be used as a query via method reference, <code>LocalTime::from</code>.
 @param temporal the temporal object to convert, not null
 @return the local time, not null
 @throw DateTimeExceptionif unable to convert to a <code>LocalTime</code>
 */
+ (JavaTimeLocalTime *)fromWithJavaTimeTemporalTemporalAccessor:(id<JavaTimeTemporalTemporalAccessor>)temporal;

/*!
 @brief Gets the value of the specified field from this time as an <code>int</code>.
 <p>
  This queries this time for the value of the specified field.
  The returned value will always be within the valid range of values for the field.
  If it is not possible to return the value, because the field is not supported
  or for some other reason, an exception is thrown. 
 <p>
  If the field is a <code>ChronoField</code> then the query is implemented here.
  The <code>supported fields</code> will return valid
  values based on this time, except <code>NANO_OF_DAY</code> and <code>MICRO_OF_DAY</code>
  which are too large to fit in an <code>int</code> and throw a <code>DateTimeException</code>.
  All other <code>ChronoField</code> instances will throw an <code>UnsupportedTemporalTypeException</code>.
  <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.getFrom(TemporalAccessor)</code>
  passing <code>this</code> as the argument. Whether the value can be obtained,
  and what the value represents, is determined by the field.
 @param field the field to get, not null
 @return the value for the field
 @throw DateTimeExceptionif a value for the field cannot be obtained or
          the value is outside the range of valid values for the field
 @throw UnsupportedTemporalTypeExceptionif the field is not supported or
          the range of values exceeds an <code>int</code>
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (jint)getWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field;

/*!
 @brief Gets the hour-of-day field.
 @return the hour-of-day, from 0 to 23
 */
- (jint)getHour;

/*!
 @brief Gets the value of the specified field from this time as a <code>long</code>.
 <p>
  This queries this time for the value of the specified field.
  If it is not possible to return the value, because the field is not supported
  or for some other reason, an exception is thrown. 
 <p>
  If the field is a <code>ChronoField</code> then the query is implemented here.
  The <code>supported fields</code> will return valid
  values based on this time.
  All other <code>ChronoField</code> instances will throw an <code>UnsupportedTemporalTypeException</code>.
  <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.getFrom(TemporalAccessor)</code>
  passing <code>this</code> as the argument. Whether the value can be obtained,
  and what the value represents, is determined by the field.
 @param field the field to get, not null
 @return the value for the field
 @throw DateTimeExceptionif a value for the field cannot be obtained
 @throw UnsupportedTemporalTypeExceptionif the field is not supported
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (jlong)getLongWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field;

/*!
 @brief Gets the minute-of-hour field.
 @return the minute-of-hour, from 0 to 59
 */
- (jint)getMinute;

/*!
 @brief Gets the nano-of-second field.
 @return the nano-of-second, from 0 to 999,999,999
 */
- (jint)getNano;

/*!
 @brief Gets the second-of-minute field.
 @return the second-of-minute, from 0 to 59
 */
- (jint)getSecond;

/*!
 @brief A hash code for this time.
 @return a suitable hash code
 */
- (NSUInteger)hash;

/*!
 @brief Checks if this time is after the specified time.
 <p>
  The comparison is based on the time-line position of the time within a day.
 @param other the other time to compare to, not null
 @return true if this is after the specified time
 @throw NullPointerExceptionif <code>other</code> is null
 */
- (jboolean)isAfterWithJavaTimeLocalTime:(JavaTimeLocalTime *)other;

/*!
 @brief Checks if this time is before the specified time.
 <p>
  The comparison is based on the time-line position of the time within a day.
 @param other the other time to compare to, not null
 @return true if this point is before the specified time
 @throw NullPointerExceptionif <code>other</code> is null
 */
- (jboolean)isBeforeWithJavaTimeLocalTime:(JavaTimeLocalTime *)other;

/*!
 @brief Checks if the specified field is supported.
 <p>
  This checks if this time can be queried for the specified field.
  If false, then calling the <code>range</code>,
  <code>get</code> and <code>with(TemporalField, long)</code>
  methods will throw an exception. 
 <p>
  If the field is a <code>ChronoField</code> then the query is implemented here.
  The supported fields are: 
 <ul>
  <li><code>NANO_OF_SECOND</code>
  <li><code>NANO_OF_DAY</code>
  <li><code>MICRO_OF_SECOND</code>
  <li><code>MICRO_OF_DAY</code>
  <li><code>MILLI_OF_SECOND</code>
  <li><code>MILLI_OF_DAY</code>
  <li><code>SECOND_OF_MINUTE</code>
  <li><code>SECOND_OF_DAY</code>
  <li><code>MINUTE_OF_HOUR</code>
  <li><code>MINUTE_OF_DAY</code>
  <li><code>HOUR_OF_AMPM</code>
  <li><code>CLOCK_HOUR_OF_AMPM</code>
  <li><code>HOUR_OF_DAY</code>
  <li><code>CLOCK_HOUR_OF_DAY</code>
  <li><code>AMPM_OF_DAY</code>
  </ul>
  All other <code>ChronoField</code> instances will return false. 
 <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.isSupportedBy(TemporalAccessor)</code>
  passing <code>this</code> as the argument.
  Whether the field is supported is determined by the field.
 @param field the field to check, null returns false
 @return true if the field is supported on this time, false if not
 */
- (jboolean)isSupportedWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field;

/*!
 @brief Checks if the specified unit is supported.
 <p>
  This checks if the specified unit can be added to, or subtracted from, this time.
  If false, then calling the <code>plus(long, TemporalUnit)</code> and 
 <code>minus</code> methods will throw an exception. 
 <p>
  If the unit is a <code>ChronoUnit</code> then the query is implemented here.
  The supported units are: 
 <ul>
  <li><code>NANOS</code>
  <li><code>MICROS</code>
  <li><code>MILLIS</code>
  <li><code>SECONDS</code>
  <li><code>MINUTES</code>
  <li><code>HOURS</code>
  <li><code>HALF_DAYS</code>
  </ul>
  All other <code>ChronoUnit</code> instances will return false. 
 <p>
  If the unit is not a <code>ChronoUnit</code>, then the result of this method
  is obtained by invoking <code>TemporalUnit.isSupportedBy(Temporal)</code>
  passing <code>this</code> as the argument.
  Whether the unit is supported is determined by the unit.
 @param unit the unit to check, null returns false
 @return true if the unit can be added/subtracted, false if not
 */
- (jboolean)isSupportedWithJavaTimeTemporalTemporalUnit:(id<JavaTimeTemporalTemporalUnit>)unit;

/*!
 @brief Returns a copy of this time with the specified amount subtracted.
 <p>
  This returns a <code>LocalTime</code>, based on this one, with the amount
  in terms of the unit subtracted. If it is not possible to subtract the amount,
  because the unit is not supported or for some other reason, an exception is thrown. 
 <p>
  This method is equivalent to <code>plus(long, TemporalUnit)</code> with the amount negated.
  See that method for a full description of how addition, and thus subtraction, works. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param amountToSubtract the amount of the unit to subtract from the result, may be negative
 @param unit the unit of the amount to subtract, not null
 @return a <code>LocalTime</code> based on this time with the specified amount subtracted, not null
 @throw DateTimeExceptionif the subtraction cannot be made
 @throw UnsupportedTemporalTypeExceptionif the unit is not supported
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeLocalTime *)minusWithLong:(jlong)amountToSubtract
    withJavaTimeTemporalTemporalUnit:(id<JavaTimeTemporalTemporalUnit>)unit;

/*!
 @brief Returns a copy of this time with the specified amount subtracted.
 <p>
  This returns a <code>LocalTime</code>, based on this one, with the specified amount subtracted.
  The amount is typically <code>Duration</code> but may be any other type implementing
  the <code>TemporalAmount</code> interface. 
 <p>
  The calculation is delegated to the amount object by calling 
 <code>TemporalAmount.subtractFrom(Temporal)</code>. The amount implementation is free
  to implement the subtraction in any way it wishes, however it typically
  calls back to <code>minus(long, TemporalUnit)</code>. Consult the documentation
  of the amount implementation to determine if it can be successfully subtracted. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param amountToSubtract the amount to subtract, not null
 @return a <code>LocalTime</code> based on this time with the subtraction made, not null
 @throw DateTimeExceptionif the subtraction cannot be made
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeLocalTime *)minusWithJavaTimeTemporalTemporalAmount:(id<JavaTimeTemporalTemporalAmount>)amountToSubtract;

/*!
 @brief Returns a copy of this <code>LocalTime</code> with the specified number of hours subtracted.
 <p>
  This subtracts the specified number of hours from this time, returning a new time.
  The calculation wraps around midnight. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param hoursToSubtract the hours to subtract, may be negative
 @return a <code>LocalTime</code> based on this time with the hours subtracted, not null
 */
- (JavaTimeLocalTime *)minusHoursWithLong:(jlong)hoursToSubtract;

/*!
 @brief Returns a copy of this <code>LocalTime</code> with the specified number of minutes subtracted.
 <p>
  This subtracts the specified number of minutes from this time, returning a new time.
  The calculation wraps around midnight. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param minutesToSubtract the minutes to subtract, may be negative
 @return a <code>LocalTime</code> based on this time with the minutes subtracted, not null
 */
- (JavaTimeLocalTime *)minusMinutesWithLong:(jlong)minutesToSubtract;

/*!
 @brief Returns a copy of this <code>LocalTime</code> with the specified number of nanoseconds subtracted.
 <p>
  This subtracts the specified number of nanoseconds from this time, returning a new time.
  The calculation wraps around midnight. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param nanosToSubtract the nanos to subtract, may be negative
 @return a <code>LocalTime</code> based on this time with the nanoseconds subtracted, not null
 */
- (JavaTimeLocalTime *)minusNanosWithLong:(jlong)nanosToSubtract;

/*!
 @brief Returns a copy of this <code>LocalTime</code> with the specified number of seconds subtracted.
 <p>
  This subtracts the specified number of seconds from this time, returning a new time.
  The calculation wraps around midnight. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param secondsToSubtract the seconds to subtract, may be negative
 @return a <code>LocalTime</code> based on this time with the seconds subtracted, not null
 */
- (JavaTimeLocalTime *)minusSecondsWithLong:(jlong)secondsToSubtract;

/*!
 @brief Obtains the current time from the system clock in the default time-zone.
 <p>
  This will query the <code>system clock</code> in the default
  time-zone to obtain the current time. 
 <p>
  Using this method will prevent the ability to use an alternate clock for testing
  because the clock is hard-coded.
 @return the current time using the system clock and default time-zone, not null
 */
+ (JavaTimeLocalTime *)now;

/*!
 @brief Obtains the current time from the specified clock.
 <p>
  This will query the specified clock to obtain the current time.
  Using this method allows the use of an alternate clock for testing.
  The alternate clock may be introduced using <code>dependency injection</code>.
 @param clock the clock to use, not null
 @return the current time, not null
 */
+ (JavaTimeLocalTime *)nowWithJavaTimeClock:(JavaTimeClock *)clock;

/*!
 @brief Obtains the current time from the system clock in the specified time-zone.
 <p>
  This will query the <code>system clock</code> to obtain the current time.
  Specifying the time-zone avoids dependence on the default time-zone. 
 <p>
  Using this method will prevent the ability to use an alternate clock for testing
  because the clock is hard-coded.
 @param zone the zone ID to use, not null
 @return the current time using the system clock, not null
 */
+ (JavaTimeLocalTime *)nowWithJavaTimeZoneId:(JavaTimeZoneId *)zone;

/*!
 @brief Obtains an instance of <code>LocalTime</code> from an hour and minute.
 <p>
  This returns a <code>LocalTime</code> with the specified hour and minute.
  The second and nanosecond fields will be set to zero.
 @param hour the hour-of-day to represent, from 0 to 23
 @param minute the minute-of-hour to represent, from 0 to 59
 @return the local time, not null
 @throw DateTimeExceptionif the value of any field is out of range
 */
+ (JavaTimeLocalTime *)ofWithInt:(jint)hour
                         withInt:(jint)minute;

/*!
 @brief Obtains an instance of <code>LocalTime</code> from an hour, minute and second.
 <p>
  This returns a <code>LocalTime</code> with the specified hour, minute and second.
  The nanosecond field will be set to zero.
 @param hour the hour-of-day to represent, from 0 to 23
 @param minute the minute-of-hour to represent, from 0 to 59
 @param second the second-of-minute to represent, from 0 to 59
 @return the local time, not null
 @throw DateTimeExceptionif the value of any field is out of range
 */
+ (JavaTimeLocalTime *)ofWithInt:(jint)hour
                         withInt:(jint)minute
                         withInt:(jint)second;

/*!
 @brief Obtains an instance of <code>LocalTime</code> from an hour, minute, second and nanosecond.
 <p>
  This returns a <code>LocalTime</code> with the specified hour, minute, second and nanosecond.
 @param hour the hour-of-day to represent, from 0 to 23
 @param minute the minute-of-hour to represent, from 0 to 59
 @param second the second-of-minute to represent, from 0 to 59
 @param nanoOfSecond the nano-of-second to represent, from 0 to 999,999,999
 @return the local time, not null
 @throw DateTimeExceptionif the value of any field is out of range
 */
+ (JavaTimeLocalTime *)ofWithInt:(jint)hour
                         withInt:(jint)minute
                         withInt:(jint)second
                         withInt:(jint)nanoOfSecond;

/*!
 @brief Obtains an instance of <code>LocalTime</code> from a nanos-of-day value.
 <p>
  This returns a <code>LocalTime</code> with the specified nanosecond-of-day.
 @param nanoOfDay the nano of day, from <code>0</code>  to <code>24 * 60 * 60 * 1,000,000,000 - 1</code>
 @return the local time, not null
 @throw DateTimeExceptionif the nanos of day value is invalid
 */
+ (JavaTimeLocalTime *)ofNanoOfDayWithLong:(jlong)nanoOfDay;

/*!
 @brief Obtains an instance of <code>LocalTime</code> from a second-of-day value.
 <p>
  This returns a <code>LocalTime</code> with the specified second-of-day.
  The nanosecond field will be set to zero.
 @param secondOfDay the second-of-day, from <code>0</code>  to <code>24 * 60 * 60 - 1</code>
 @return the local time, not null
 @throw DateTimeExceptionif the second-of-day value is invalid
 */
+ (JavaTimeLocalTime *)ofSecondOfDayWithLong:(jlong)secondOfDay;

/*!
 @brief Obtains an instance of <code>LocalTime</code> from a text string such as <code>10:15</code>.
 <p>
  The string must represent a valid time and is parsed using 
 <code>java.time.format.DateTimeFormatter.ISO_LOCAL_TIME</code>.
 @param text the text to parse such as "10:15:30", not null
 @return the parsed local time, not null
 @throw DateTimeParseExceptionif the text cannot be parsed
 */
+ (JavaTimeLocalTime *)parseWithJavaLangCharSequence:(id<JavaLangCharSequence>)text;

/*!
 @brief Obtains an instance of <code>LocalTime</code> from a text string using a specific formatter.
 <p>
  The text is parsed using the formatter, returning a time.
 @param text the text to parse, not null
 @param formatter the formatter to use, not null
 @return the parsed local time, not null
 @throw DateTimeParseExceptionif the text cannot be parsed
 */
+ (JavaTimeLocalTime *)parseWithJavaLangCharSequence:(id<JavaLangCharSequence>)text
                 withJavaTimeFormatDateTimeFormatter:(JavaTimeFormatDateTimeFormatter *)formatter;

/*!
 @brief Returns a copy of this time with the specified amount added.
 <p>
  This returns a <code>LocalTime</code>, based on this one, with the amount
  in terms of the unit added. If it is not possible to add the amount, because the
  unit is not supported or for some other reason, an exception is thrown. 
 <p>
  If the field is a <code>ChronoUnit</code> then the addition is implemented here.
  The supported fields behave as follows: 
 <ul>
  <li><code>NANOS</code> -
   Returns a <code>LocalTime</code> with the specified number of nanoseconds added.
   This is equivalent to <code>plusNanos(long)</code>.
  <li><code>MICROS</code> -
   Returns a <code>LocalTime</code> with the specified number of microseconds added.
   This is equivalent to <code>plusNanos(long)</code> with the amount
   multiplied by 1,000. 
 <li><code>MILLIS</code> -
   Returns a <code>LocalTime</code> with the specified number of milliseconds added.
   This is equivalent to <code>plusNanos(long)</code> with the amount
   multiplied by 1,000,000. 
 <li><code>SECONDS</code> -
   Returns a <code>LocalTime</code> with the specified number of seconds added.
   This is equivalent to <code>plusSeconds(long)</code>.
  <li><code>MINUTES</code> -
   Returns a <code>LocalTime</code> with the specified number of minutes added.
   This is equivalent to <code>plusMinutes(long)</code>.
  <li><code>HOURS</code> -
   Returns a <code>LocalTime</code> with the specified number of hours added.
   This is equivalent to <code>plusHours(long)</code>.
  <li><code>HALF_DAYS</code> -
   Returns a <code>LocalTime</code> with the specified number of half-days added.
   This is equivalent to <code>plusHours(long)</code> with the amount
   multiplied by 12. 
 </ul>
  <p>
  All other <code>ChronoUnit</code> instances will throw an <code>UnsupportedTemporalTypeException</code>.
  <p>
  If the field is not a <code>ChronoUnit</code>, then the result of this method
  is obtained by invoking <code>TemporalUnit.addTo(Temporal, long)</code>
  passing <code>this</code> as the argument. In this case, the unit determines
  whether and how to perform the addition. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param amountToAdd the amount of the unit to add to the result, may be negative
 @param unit the unit of the amount to add, not null
 @return a <code>LocalTime</code> based on this time with the specified amount added, not null
 @throw DateTimeExceptionif the addition cannot be made
 @throw UnsupportedTemporalTypeExceptionif the unit is not supported
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeLocalTime *)plusWithLong:(jlong)amountToAdd
   withJavaTimeTemporalTemporalUnit:(id<JavaTimeTemporalTemporalUnit>)unit;

/*!
 @brief Returns a copy of this time with the specified amount added.
 <p>
  This returns a <code>LocalTime</code>, based on this one, with the specified amount added.
  The amount is typically <code>Duration</code> but may be any other type implementing
  the <code>TemporalAmount</code> interface. 
 <p>
  The calculation is delegated to the amount object by calling 
 <code>TemporalAmount.addTo(Temporal)</code>. The amount implementation is free
  to implement the addition in any way it wishes, however it typically
  calls back to <code>plus(long, TemporalUnit)</code>. Consult the documentation
  of the amount implementation to determine if it can be successfully added. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param amountToAdd the amount to add, not null
 @return a <code>LocalTime</code> based on this time with the addition made, not null
 @throw DateTimeExceptionif the addition cannot be made
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeLocalTime *)plusWithJavaTimeTemporalTemporalAmount:(id<JavaTimeTemporalTemporalAmount>)amountToAdd;

/*!
 @brief Returns a copy of this <code>LocalTime</code> with the specified number of hours added.
 <p>
  This adds the specified number of hours to this time, returning a new time.
  The calculation wraps around midnight. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param hoursToAdd the hours to add, may be negative
 @return a <code>LocalTime</code> based on this time with the hours added, not null
 */
- (JavaTimeLocalTime *)plusHoursWithLong:(jlong)hoursToAdd;

/*!
 @brief Returns a copy of this <code>LocalTime</code> with the specified number of minutes added.
 <p>
  This adds the specified number of minutes to this time, returning a new time.
  The calculation wraps around midnight. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param minutesToAdd the minutes to add, may be negative
 @return a <code>LocalTime</code> based on this time with the minutes added, not null
 */
- (JavaTimeLocalTime *)plusMinutesWithLong:(jlong)minutesToAdd;

/*!
 @brief Returns a copy of this <code>LocalTime</code> with the specified number of nanoseconds added.
 <p>
  This adds the specified number of nanoseconds to this time, returning a new time.
  The calculation wraps around midnight. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param nanosToAdd the nanos to add, may be negative
 @return a <code>LocalTime</code> based on this time with the nanoseconds added, not null
 */
- (JavaTimeLocalTime *)plusNanosWithLong:(jlong)nanosToAdd;

/*!
 @brief Returns a copy of this <code>LocalTime</code> with the specified number of seconds added.
 <p>
  This adds the specified number of seconds to this time, returning a new time.
  The calculation wraps around midnight. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param secondstoAdd the seconds to add, may be negative
 @return a <code>LocalTime</code> based on this time with the seconds added, not null
 */
- (JavaTimeLocalTime *)plusSecondsWithLong:(jlong)secondstoAdd;

/*!
 @brief Queries this time using the specified query.
 <p>
  This queries this time using the specified query strategy object.
  The <code>TemporalQuery</code> object defines the logic to be used to
  obtain the result. Read the documentation of the query to understand
  what the result of this method will be. 
 <p>
  The result of this method is obtained by invoking the 
 <code>TemporalQuery.queryFrom(TemporalAccessor)</code> method on the
  specified query passing <code>this</code> as the argument.
 @param query the query to invoke, not null
 @return the query result, null may be returned (defined by the query)
 @throw DateTimeExceptionif unable to query (defined by the query)
 @throw ArithmeticExceptionif numeric overflow occurs (defined by the query)
 */
- (id)queryWithJavaTimeTemporalTemporalQuery:(id<JavaTimeTemporalTemporalQuery>)query;

/*!
 @brief Gets the range of valid values for the specified field.
 <p>
  The range object expresses the minimum and maximum valid values for a field.
  This time is used to enhance the accuracy of the returned range.
  If it is not possible to return the range, because the field is not supported
  or for some other reason, an exception is thrown. 
 <p>
  If the field is a <code>ChronoField</code> then the query is implemented here.
  The <code>supported fields</code> will return
  appropriate range instances.
  All other <code>ChronoField</code> instances will throw an <code>UnsupportedTemporalTypeException</code>.
  <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.rangeRefinedBy(TemporalAccessor)</code>
  passing <code>this</code> as the argument.
  Whether the range can be obtained is determined by the field.
 @param field the field to query the range for, not null
 @return the range of valid values for the field, not null
 @throw DateTimeExceptionif the range for the field cannot be obtained
 @throw UnsupportedTemporalTypeExceptionif the field is not supported
 */
- (JavaTimeTemporalValueRange *)rangeWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field;

/*!
 @brief Extracts the time as nanos of day,
  from <code>0</code> to <code>24 * 60 * 60 * 1,000,000,000 - 1</code>.
 @return the nano of day equivalent to this time
 */
- (jlong)toNanoOfDay;

/*!
 @brief Extracts the time as seconds of day,
  from <code>0</code> to <code>24 * 60 * 60 - 1</code>.
 @return the second-of-day equivalent to this time
 */
- (jint)toSecondOfDay;

/*!
 @brief Outputs this time as a <code>String</code>, such as <code>10:15</code>.
 <p>
  The output will be one of the following ISO-8601 formats: 
 <ul>
  <li><code>HH:mm</code></li>
  <li><code>HH:mm:ss</code></li>
  <li><code>HH:mm:ss.SSS</code></li>
  <li><code>HH:mm:ss.SSSSSS</code></li>
  <li><code>HH:mm:ss.SSSSSSSSS</code></li>
  </ul>
  The format used will be the shortest that outputs the full value of
  the time where the omitted parts are implied to be zero.
 @return a string representation of this time, not null
 */
- (NSString *)description;

/*!
 @brief Returns a copy of this <code>LocalTime</code> with the time truncated.
 <p>
  Truncation returns a copy of the original time with fields
  smaller than the specified unit set to zero.
  For example, truncating with the <code>minutes</code> unit
  will set the second-of-minute and nano-of-second field to zero. 
 <p>
  The unit must have a duration
  that divides into the length of a standard day without remainder.
  This includes all supplied time units on <code>ChronoUnit</code> and 
 <code>DAYS</code>. Other units throw an exception. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param unit the unit to truncate to, not null
 @return a <code>LocalTime</code> based on this time with the time truncated, not null
 @throw DateTimeExceptionif unable to truncate
 @throw UnsupportedTemporalTypeExceptionif the unit is not supported
 */
- (JavaTimeLocalTime *)truncatedToWithJavaTimeTemporalTemporalUnit:(id<JavaTimeTemporalTemporalUnit>)unit;

/*!
 @brief Calculates the amount of time until another time in terms of the specified unit.
 <p>
  This calculates the amount of time between two <code>LocalTime</code>
  objects in terms of a single <code>TemporalUnit</code>.
  The start and end points are <code>this</code> and the specified time.
  The result will be negative if the end is before the start. The 
 <code>Temporal</code> passed to this method is converted to a 
 <code>LocalTime</code> using <code>from(TemporalAccessor)</code>.
  For example, the amount in hours between two times can be calculated
  using <code>startTime.until(endTime, HOURS)</code>.
  <p>
  The calculation returns a whole number, representing the number of
  complete units between the two times.
  For example, the amount in hours between 11:30 and 13:29 will only
  be one hour as it is one minute short of two hours. 
 <p>
  There are two equivalent ways of using this method.
  The first is to invoke this method.
  The second is to use <code>TemporalUnit.between(Temporal, Temporal)</code>:
  @code

    // these two lines are equivalent
    amount = start.until(end, MINUTES);
    amount = MINUTES.between(start, end); 
  
@endcode
  The choice should be made based on which makes the code more readable. 
 <p>
  The calculation is implemented in this method for <code>ChronoUnit</code>.
  The units <code>NANOS</code>, <code>MICROS</code>, <code>MILLIS</code>, <code>SECONDS</code>,
  <code>MINUTES</code>, <code>HOURS</code> and <code>HALF_DAYS</code> are supported.
  Other <code>ChronoUnit</code> values will throw an exception. 
 <p>
  If the unit is not a <code>ChronoUnit</code>, then the result of this method
  is obtained by invoking <code>TemporalUnit.between(Temporal, Temporal)</code>
  passing <code>this</code> as the first argument and the converted input temporal
  as the second argument. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param endExclusive the end time, exclusive, which is converted to a <code>LocalTime</code> , not null
 @param unit the unit to measure the amount in, not null
 @return the amount of time between this time and the end time
 @throw DateTimeExceptionif the amount cannot be calculated, or the end
   temporal cannot be converted to a <code>LocalTime</code>
 @throw UnsupportedTemporalTypeExceptionif the unit is not supported
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (jlong)untilWithJavaTimeTemporalTemporal:(id<JavaTimeTemporalTemporal>)endExclusive
          withJavaTimeTemporalTemporalUnit:(id<JavaTimeTemporalTemporalUnit>)unit;

/*!
 @brief Returns an adjusted copy of this time.
 <p>
  This returns a <code>LocalTime</code>, based on this one, with the time adjusted.
  The adjustment takes place using the specified adjuster strategy object.
  Read the documentation of the adjuster to understand what adjustment will be made. 
 <p>
  A simple adjuster might simply set the one of the fields, such as the hour field.
  A more complex adjuster might set the time to the last hour of the day. 
 <p>
  The result of this method is obtained by invoking the 
 <code>TemporalAdjuster.adjustInto(Temporal)</code> method on the
  specified adjuster passing <code>this</code> as the argument. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param adjuster the adjuster to use, not null
 @return a <code>LocalTime</code> based on <code>this</code> with the adjustment made, not null
 @throw DateTimeExceptionif the adjustment cannot be made
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeLocalTime *)withWithJavaTimeTemporalTemporalAdjuster:(id<JavaTimeTemporalTemporalAdjuster>)adjuster;

/*!
 @brief Returns a copy of this time with the specified field set to a new value.
 <p>
  This returns a <code>LocalTime</code>, based on this one, with the value
  for the specified field changed.
  This can be used to change any supported field, such as the hour, minute or second.
  If it is not possible to set the value, because the field is not supported or for
  some other reason, an exception is thrown. 
 <p>
  If the field is a <code>ChronoField</code> then the adjustment is implemented here.
  The supported fields behave as follows: 
 <ul>
  <li><code>NANO_OF_SECOND</code> -
   Returns a <code>LocalTime</code> with the specified nano-of-second.
   The hour, minute and second will be unchanged. 
 <li><code>NANO_OF_DAY</code> -
   Returns a <code>LocalTime</code> with the specified nano-of-day.
   This completely replaces the time and is equivalent to <code>ofNanoOfDay(long)</code>.
  <li><code>MICRO_OF_SECOND</code> -
   Returns a <code>LocalTime</code> with the nano-of-second replaced by the specified
   micro-of-second multiplied by 1,000.
   The hour, minute and second will be unchanged. 
 <li><code>MICRO_OF_DAY</code> -
   Returns a <code>LocalTime</code> with the specified micro-of-day.
   This completely replaces the time and is equivalent to using <code>ofNanoOfDay(long)</code>
   with the micro-of-day multiplied by 1,000. 
 <li><code>MILLI_OF_SECOND</code> -
   Returns a <code>LocalTime</code> with the nano-of-second replaced by the specified
   milli-of-second multiplied by 1,000,000.
   The hour, minute and second will be unchanged. 
 <li><code>MILLI_OF_DAY</code> -
   Returns a <code>LocalTime</code> with the specified milli-of-day.
   This completely replaces the time and is equivalent to using <code>ofNanoOfDay(long)</code>
   with the milli-of-day multiplied by 1,000,000. 
 <li><code>SECOND_OF_MINUTE</code> -
   Returns a <code>LocalTime</code> with the specified second-of-minute.
   The hour, minute and nano-of-second will be unchanged. 
 <li><code>SECOND_OF_DAY</code> -
   Returns a <code>LocalTime</code> with the specified second-of-day.
   The nano-of-second will be unchanged. 
 <li><code>MINUTE_OF_HOUR</code> -
   Returns a <code>LocalTime</code> with the specified minute-of-hour.
   The hour, second-of-minute and nano-of-second will be unchanged. 
 <li><code>MINUTE_OF_DAY</code> -
   Returns a <code>LocalTime</code> with the specified minute-of-day.
   The second-of-minute and nano-of-second will be unchanged. 
 <li><code>HOUR_OF_AMPM</code> -
   Returns a <code>LocalTime</code> with the specified hour-of-am-pm.
   The AM/PM, minute-of-hour, second-of-minute and nano-of-second will be unchanged. 
 <li><code>CLOCK_HOUR_OF_AMPM</code> -
   Returns a <code>LocalTime</code> with the specified clock-hour-of-am-pm.
   The AM/PM, minute-of-hour, second-of-minute and nano-of-second will be unchanged. 
 <li><code>HOUR_OF_DAY</code> -
   Returns a <code>LocalTime</code> with the specified hour-of-day.
   The minute-of-hour, second-of-minute and nano-of-second will be unchanged. 
 <li><code>CLOCK_HOUR_OF_DAY</code> -
   Returns a <code>LocalTime</code> with the specified clock-hour-of-day.
   The minute-of-hour, second-of-minute and nano-of-second will be unchanged. 
 <li><code>AMPM_OF_DAY</code> -
   Returns a <code>LocalTime</code> with the specified AM/PM.
   The hour-of-am-pm, minute-of-hour, second-of-minute and nano-of-second will be unchanged. 
 </ul>
  <p>
  In all cases, if the new value is outside the valid range of values for the field
  then a <code>DateTimeException</code> will be thrown. 
 <p>
  All other <code>ChronoField</code> instances will throw an <code>UnsupportedTemporalTypeException</code>.
  <p>
  If the field is not a <code>ChronoField</code>, then the result of this method
  is obtained by invoking <code>TemporalField.adjustInto(Temporal, long)</code>
  passing <code>this</code> as the argument. In this case, the field determines
  whether and how to adjust the instant. 
 <p>
  This instance is immutable and unaffected by this method call.
 @param field the field to set in the result, not null
 @param newValue the new value of the field in the result
 @return a <code>LocalTime</code> based on <code>this</code> with the specified field set, not null
 @throw DateTimeExceptionif the field cannot be set
 @throw UnsupportedTemporalTypeExceptionif the field is not supported
 @throw ArithmeticExceptionif numeric overflow occurs
 */
- (JavaTimeLocalTime *)withWithJavaTimeTemporalTemporalField:(id<JavaTimeTemporalTemporalField>)field
                                                    withLong:(jlong)newValue;

/*!
 @brief Returns a copy of this <code>LocalTime</code> with the hour-of-day altered.
 <p>
  This instance is immutable and unaffected by this method call.
 @param hour the hour-of-day to set in the result, from 0 to 23
 @return a <code>LocalTime</code> based on this time with the requested hour, not null
 @throw DateTimeExceptionif the hour value is invalid
 */
- (JavaTimeLocalTime *)withHourWithInt:(jint)hour;

/*!
 @brief Returns a copy of this <code>LocalTime</code> with the minute-of-hour altered.
 <p>
  This instance is immutable and unaffected by this method call.
 @param minute the minute-of-hour to set in the result, from 0 to 59
 @return a <code>LocalTime</code> based on this time with the requested minute, not null
 @throw DateTimeExceptionif the minute value is invalid
 */
- (JavaTimeLocalTime *)withMinuteWithInt:(jint)minute;

/*!
 @brief Returns a copy of this <code>LocalTime</code> with the nano-of-second altered.
 <p>
  This instance is immutable and unaffected by this method call.
 @param nanoOfSecond the nano-of-second to set in the result, from 0 to 999,999,999
 @return a <code>LocalTime</code> based on this time with the requested nanosecond, not null
 @throw DateTimeExceptionif the nanos value is invalid
 */
- (JavaTimeLocalTime *)withNanoWithInt:(jint)nanoOfSecond;

/*!
 @brief Returns a copy of this <code>LocalTime</code> with the second-of-minute altered.
 <p>
  This instance is immutable and unaffected by this method call.
 @param second the second-of-minute to set in the result, from 0 to 59
 @return a <code>LocalTime</code> based on this time with the requested second, not null
 @throw DateTimeExceptionif the second value is invalid
 */
- (JavaTimeLocalTime *)withSecondWithInt:(jint)second;

#pragma mark Package-Private

+ (JavaTimeLocalTime *)readExternalWithJavaIoDataInput:(id<JavaIoDataInput>)inArg;

- (void)writeExternalWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(JavaTimeLocalTime)

/*!
 @brief The minimum supported <code>LocalTime</code>, '00:00'.
 This is the time of midnight at the start of the day.
 */
inline JavaTimeLocalTime *JavaTimeLocalTime_get_MIN(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaTimeLocalTime *JavaTimeLocalTime_MIN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaTimeLocalTime, MIN, JavaTimeLocalTime *)

/*!
 @brief The maximum supported <code>LocalTime</code>, '23:59:59.999999999'.
 This is the time just before midnight at the end of the day.
 */
inline JavaTimeLocalTime *JavaTimeLocalTime_get_MAX(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaTimeLocalTime *JavaTimeLocalTime_MAX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaTimeLocalTime, MAX, JavaTimeLocalTime *)

/*!
 @brief The time of midnight at the start of the day, '00:00'.
 */
inline JavaTimeLocalTime *JavaTimeLocalTime_get_MIDNIGHT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaTimeLocalTime *JavaTimeLocalTime_MIDNIGHT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaTimeLocalTime, MIDNIGHT, JavaTimeLocalTime *)

/*!
 @brief The time of noon in the middle of the day, '12:00'.
 */
inline JavaTimeLocalTime *JavaTimeLocalTime_get_NOON(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaTimeLocalTime *JavaTimeLocalTime_NOON;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaTimeLocalTime, NOON, JavaTimeLocalTime *)

/*!
 @brief Hours per day.
 */
inline jint JavaTimeLocalTime_get_HOURS_PER_DAY(void);
#define JavaTimeLocalTime_HOURS_PER_DAY 24
J2OBJC_STATIC_FIELD_CONSTANT(JavaTimeLocalTime, HOURS_PER_DAY, jint)

/*!
 @brief Minutes per hour.
 */
inline jint JavaTimeLocalTime_get_MINUTES_PER_HOUR(void);
#define JavaTimeLocalTime_MINUTES_PER_HOUR 60
J2OBJC_STATIC_FIELD_CONSTANT(JavaTimeLocalTime, MINUTES_PER_HOUR, jint)

/*!
 @brief Minutes per day.
 */
inline jint JavaTimeLocalTime_get_MINUTES_PER_DAY(void);
#define JavaTimeLocalTime_MINUTES_PER_DAY 1440
J2OBJC_STATIC_FIELD_CONSTANT(JavaTimeLocalTime, MINUTES_PER_DAY, jint)

/*!
 @brief Seconds per minute.
 */
inline jint JavaTimeLocalTime_get_SECONDS_PER_MINUTE(void);
#define JavaTimeLocalTime_SECONDS_PER_MINUTE 60
J2OBJC_STATIC_FIELD_CONSTANT(JavaTimeLocalTime, SECONDS_PER_MINUTE, jint)

/*!
 @brief Seconds per hour.
 */
inline jint JavaTimeLocalTime_get_SECONDS_PER_HOUR(void);
#define JavaTimeLocalTime_SECONDS_PER_HOUR 3600
J2OBJC_STATIC_FIELD_CONSTANT(JavaTimeLocalTime, SECONDS_PER_HOUR, jint)

/*!
 @brief Seconds per day.
 */
inline jint JavaTimeLocalTime_get_SECONDS_PER_DAY(void);
#define JavaTimeLocalTime_SECONDS_PER_DAY 86400
J2OBJC_STATIC_FIELD_CONSTANT(JavaTimeLocalTime, SECONDS_PER_DAY, jint)

/*!
 @brief Milliseconds per day.
 */
inline jlong JavaTimeLocalTime_get_MILLIS_PER_DAY(void);
#define JavaTimeLocalTime_MILLIS_PER_DAY 86400000LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaTimeLocalTime, MILLIS_PER_DAY, jlong)

/*!
 @brief Microseconds per day.
 */
inline jlong JavaTimeLocalTime_get_MICROS_PER_DAY(void);
#define JavaTimeLocalTime_MICROS_PER_DAY 86400000000LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaTimeLocalTime, MICROS_PER_DAY, jlong)

/*!
 @brief Nanos per second.
 */
inline jlong JavaTimeLocalTime_get_NANOS_PER_SECOND(void);
#define JavaTimeLocalTime_NANOS_PER_SECOND 1000000000LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaTimeLocalTime, NANOS_PER_SECOND, jlong)

/*!
 @brief Nanos per minute.
 */
inline jlong JavaTimeLocalTime_get_NANOS_PER_MINUTE(void);
#define JavaTimeLocalTime_NANOS_PER_MINUTE 60000000000LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaTimeLocalTime, NANOS_PER_MINUTE, jlong)

/*!
 @brief Nanos per hour.
 */
inline jlong JavaTimeLocalTime_get_NANOS_PER_HOUR(void);
#define JavaTimeLocalTime_NANOS_PER_HOUR 3600000000000LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaTimeLocalTime, NANOS_PER_HOUR, jlong)

/*!
 @brief Nanos per day.
 */
inline jlong JavaTimeLocalTime_get_NANOS_PER_DAY(void);
#define JavaTimeLocalTime_NANOS_PER_DAY 86400000000000LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaTimeLocalTime, NANOS_PER_DAY, jlong)

FOUNDATION_EXPORT JavaTimeLocalTime *JavaTimeLocalTime_now(void);

FOUNDATION_EXPORT JavaTimeLocalTime *JavaTimeLocalTime_nowWithJavaTimeZoneId_(JavaTimeZoneId *zone);

FOUNDATION_EXPORT JavaTimeLocalTime *JavaTimeLocalTime_nowWithJavaTimeClock_(JavaTimeClock *clock);

FOUNDATION_EXPORT JavaTimeLocalTime *JavaTimeLocalTime_ofWithInt_withInt_(jint hour, jint minute);

FOUNDATION_EXPORT JavaTimeLocalTime *JavaTimeLocalTime_ofWithInt_withInt_withInt_(jint hour, jint minute, jint second);

FOUNDATION_EXPORT JavaTimeLocalTime *JavaTimeLocalTime_ofWithInt_withInt_withInt_withInt_(jint hour, jint minute, jint second, jint nanoOfSecond);

FOUNDATION_EXPORT JavaTimeLocalTime *JavaTimeLocalTime_ofSecondOfDayWithLong_(jlong secondOfDay);

FOUNDATION_EXPORT JavaTimeLocalTime *JavaTimeLocalTime_ofNanoOfDayWithLong_(jlong nanoOfDay);

FOUNDATION_EXPORT JavaTimeLocalTime *JavaTimeLocalTime_fromWithJavaTimeTemporalTemporalAccessor_(id<JavaTimeTemporalTemporalAccessor> temporal);

FOUNDATION_EXPORT JavaTimeLocalTime *JavaTimeLocalTime_parseWithJavaLangCharSequence_(id<JavaLangCharSequence> text);

FOUNDATION_EXPORT JavaTimeLocalTime *JavaTimeLocalTime_parseWithJavaLangCharSequence_withJavaTimeFormatDateTimeFormatter_(id<JavaLangCharSequence> text, JavaTimeFormatDateTimeFormatter *formatter);

FOUNDATION_EXPORT JavaTimeLocalTime *JavaTimeLocalTime_readExternalWithJavaIoDataInput_(id<JavaIoDataInput> inArg);

J2OBJC_TYPE_LITERAL_HEADER(JavaTimeLocalTime)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaTimeLocalTime")
