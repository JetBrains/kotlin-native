//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/time/zone/ZoneRulesException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaTimeZoneZoneRulesException")
#ifdef RESTRICT_JavaTimeZoneZoneRulesException
#define INCLUDE_ALL_JavaTimeZoneZoneRulesException 0
#else
#define INCLUDE_ALL_JavaTimeZoneZoneRulesException 1
#endif
#undef RESTRICT_JavaTimeZoneZoneRulesException

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaTimeZoneZoneRulesException_) && (INCLUDE_ALL_JavaTimeZoneZoneRulesException || defined(INCLUDE_JavaTimeZoneZoneRulesException))
#define JavaTimeZoneZoneRulesException_

#define RESTRICT_JavaTimeDateTimeException 1
#define INCLUDE_JavaTimeDateTimeException 1
#include "java/time/DateTimeException.h"

@class JavaLangThrowable;

/*!
 @brief Thrown to indicate a problem with time-zone configuration.
 <p>
  This exception is used to indicate a problems with the configured
  time-zone rules.
 @since 1.8
 */
@interface JavaTimeZoneZoneRulesException : JavaTimeDateTimeException

#pragma mark Public

/*!
 @brief Constructs a new date-time exception with the specified message.
 @param message the message to use for this exception, may be null
 */
- (instancetype __nonnull)initWithNSString:(NSString *)message;

/*!
 @brief Constructs a new date-time exception with the specified message and cause.
 @param message the message to use for this exception, may be null
 @param cause the cause of the exception, may be null
 */
- (instancetype __nonnull)initWithNSString:(NSString *)message
                     withJavaLangThrowable:(JavaLangThrowable *)cause;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaTimeZoneZoneRulesException)

FOUNDATION_EXPORT void JavaTimeZoneZoneRulesException_initWithNSString_(JavaTimeZoneZoneRulesException *self, NSString *message);

FOUNDATION_EXPORT JavaTimeZoneZoneRulesException *new_JavaTimeZoneZoneRulesException_initWithNSString_(NSString *message) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaTimeZoneZoneRulesException *create_JavaTimeZoneZoneRulesException_initWithNSString_(NSString *message);

FOUNDATION_EXPORT void JavaTimeZoneZoneRulesException_initWithNSString_withJavaLangThrowable_(JavaTimeZoneZoneRulesException *self, NSString *message, JavaLangThrowable *cause);

FOUNDATION_EXPORT JavaTimeZoneZoneRulesException *new_JavaTimeZoneZoneRulesException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaTimeZoneZoneRulesException *create_JavaTimeZoneZoneRulesException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause);

J2OBJC_TYPE_LITERAL_HEADER(JavaTimeZoneZoneRulesException)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaTimeZoneZoneRulesException")
