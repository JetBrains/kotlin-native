//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/time/zone/ZoneOffsetTransitionRule.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaTimeZoneZoneOffsetTransitionRule")
#ifdef RESTRICT_JavaTimeZoneZoneOffsetTransitionRule
#define INCLUDE_ALL_JavaTimeZoneZoneOffsetTransitionRule 0
#else
#define INCLUDE_ALL_JavaTimeZoneZoneOffsetTransitionRule 1
#endif
#undef RESTRICT_JavaTimeZoneZoneOffsetTransitionRule

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaTimeZoneZoneOffsetTransitionRule_) && (INCLUDE_ALL_JavaTimeZoneZoneOffsetTransitionRule || defined(INCLUDE_JavaTimeZoneZoneOffsetTransitionRule))
#define JavaTimeZoneZoneOffsetTransitionRule_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class JavaTimeDayOfWeek;
@class JavaTimeLocalTime;
@class JavaTimeMonth;
@class JavaTimeZoneOffset;
@class JavaTimeZoneZoneOffsetTransition;
@class JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition;
@protocol JavaIoDataInput;
@protocol JavaIoDataOutput;

/*!
 @brief A rule expressing how to create a transition.
 <p>
  This class allows rules for identifying future transitions to be expressed.
  A rule might be written in many forms: 
 <ul>
  <li>the 16th March 
 <li>the Sunday on or after the 16th March 
 <li>the Sunday on or before the 16th March 
 <li>the last Sunday in February 
 </ul>
  These different rule types can be expressed and queried.
 @since 1.8
 */
@interface JavaTimeZoneZoneOffsetTransitionRule : NSObject < JavaIoSerializable >

#pragma mark Public

/*!
 @brief Creates a transition instance for the specified year.
 <p>
  Calculations are performed using the ISO-8601 chronology.
 @param year the year to create a transition for, not null
 @return the transition instance, not null
 */
- (JavaTimeZoneZoneOffsetTransition *)createTransitionWithInt:(jint)year;

/*!
 @brief Checks if this object equals another.
 <p>
  The entire state of the object is compared.
 @param otherRule the other object to compare to, null returns false
 @return true if equal
 */
- (jboolean)isEqual:(id)otherRule;

/*!
 @brief Gets the indicator of the day-of-month of the transition.
 <p>
  If the rule defines an exact date then the day is the month of that date. 
 <p>
  If the rule defines a week where the transition might occur, then the day
  defines either the start of the end of the transition week. 
 <p>
  If the value is positive, then it represents a normal day-of-month, and is the
  earliest possible date that the transition can be.
  The date may refer to 29th February which should be treated as 1st March in non-leap years. 
 <p>
  If the value is negative, then it represents the number of days back from the
  end of the month where <code>-1</code> is the last day of the month.
  In this case, the day identified is the latest possible date that the transition can be.
 @return the day-of-month indicator, from -28 to 31 excluding 0
 */
- (jint)getDayOfMonthIndicator;

/*!
 @brief Gets the day-of-week of the transition.
 <p>
  If the rule defines an exact date then this returns null. 
 <p>
  If the rule defines a week where the cutover might occur, then this method
  returns the day-of-week that the month-day will be adjusted to.
  If the day is positive then the adjustment is later.
  If the day is negative then the adjustment is earlier.
 @return the day-of-week that the transition occurs, null if the rule defines an exact date
 */
- (JavaTimeDayOfWeek *)getDayOfWeek;

/*!
 @brief Gets the local time of day of the transition which must be checked with 
 <code>isMidnightEndOfDay()</code>.
 <p>
  The time is converted into an instant using the time definition.
 @return the local time of day of the transition, not null
 */
- (JavaTimeLocalTime *)getLocalTime;

/*!
 @brief Gets the month of the transition.
 <p>
  If the rule defines an exact date then the month is the month of that date. 
 <p>
  If the rule defines a week where the transition might occur, then the month
  if the month of either the earliest or latest possible date of the cutover.
 @return the month of the transition, not null
 */
- (JavaTimeMonth *)getMonth;

/*!
 @brief Gets the offset after the transition.
 @return the offset after, not null
 */
- (JavaTimeZoneOffset *)getOffsetAfter;

/*!
 @brief Gets the offset before the transition.
 @return the offset before, not null
 */
- (JavaTimeZoneOffset *)getOffsetBefore;

/*!
 @brief Gets the standard offset in force at the transition.
 @return the standard offset, not null
 */
- (JavaTimeZoneOffset *)getStandardOffset;

/*!
 @brief Gets the time definition, specifying how to convert the time to an instant.
 <p>
  The local time can be converted to an instant using the standard offset,
  the wall offset or UTC.
 @return the time definition, not null
 */
- (JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition *)getTimeDefinition;

/*!
 @brief Returns a suitable hash code.
 @return the hash code
 */
- (NSUInteger)hash;

/*!
 @brief Is the transition local time midnight at the end of day.
 <p>
  The transition may be represented as occurring at 24:00.
 @return whether a local time of midnight is at the start or end of the day
 */
- (jboolean)isMidnightEndOfDay;

/*!
 @brief Obtains an instance defining the yearly rule to create transitions between two offsets.
 <p>
  Applications should normally obtain an instance from <code>ZoneRules</code>.
  This factory is only intended for use when creating <code>ZoneRules</code>.
 @param month the month of the month-day of the first day of the cutover week, not null
 @param dayOfMonthIndicator the day of the month-day of the cutover week, positive if the week is that   day or later, negative if the week is that day or earlier, counting from the last day of the month,
    from -28 to 31 excluding 0
 @param dayOfWeek the required day-of-week, null if the month-day should not be changed
 @param time the cutover time in the 'before' offset, not null
 @param timeEndOfDay whether the time is midnight at the end of day
 @param timeDefnition how to interpret the cutover
 @param standardOffset the standard offset in force at the cutover, not null
 @param offsetBefore the offset before the cutover, not null
 @param offsetAfter the offset after the cutover, not null
 @return the rule, not null
 @throw IllegalArgumentExceptionif the day of month indicator is invalid
 @throw IllegalArgumentExceptionif the end of day flag is true when the time is not midnight
 */
+ (JavaTimeZoneZoneOffsetTransitionRule *)ofWithJavaTimeMonth:(JavaTimeMonth *)month
                                                      withInt:(jint)dayOfMonthIndicator
                                        withJavaTimeDayOfWeek:(JavaTimeDayOfWeek *)dayOfWeek
                                        withJavaTimeLocalTime:(JavaTimeLocalTime *)time
                                                  withBoolean:(jboolean)timeEndOfDay
      withJavaTimeZoneZoneOffsetTransitionRule_TimeDefinition:(JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition *)timeDefnition
                                       withJavaTimeZoneOffset:(JavaTimeZoneOffset *)standardOffset
                                       withJavaTimeZoneOffset:(JavaTimeZoneOffset *)offsetBefore
                                       withJavaTimeZoneOffset:(JavaTimeZoneOffset *)offsetAfter;

/*!
 @brief Returns a string describing this object.
 @return a string for debugging, not null
 */
- (NSString *)description;

#pragma mark Package-Private

/*!
 @brief Creates an instance defining the yearly rule to create transitions between two offsets.
 @param month the month of the month-day of the first day of the cutover week, not null
 @param dayOfMonthIndicator the day of the month-day of the cutover week, positive if the week is that   day or later, negative if the week is that day or earlier, counting from the last day of the month,
    from -28 to 31 excluding 0
 @param dayOfWeek the required day-of-week, null if the month-day should not be changed
 @param time the cutover time in the 'before' offset, not null
 @param timeEndOfDay whether the time is midnight at the end of day
 @param timeDefnition how to interpret the cutover
 @param standardOffset the standard offset in force at the cutover, not null
 @param offsetBefore the offset before the cutover, not null
 @param offsetAfter the offset after the cutover, not null
 @throw IllegalArgumentExceptionif the day of month indicator is invalid
 @throw IllegalArgumentExceptionif the end of day flag is true when the time is not midnight
 */
- (instancetype __nonnull)initWithJavaTimeMonth:(JavaTimeMonth *)month
                                        withInt:(jint)dayOfMonthIndicator
                          withJavaTimeDayOfWeek:(JavaTimeDayOfWeek *)dayOfWeek
                          withJavaTimeLocalTime:(JavaTimeLocalTime *)time
                                    withBoolean:(jboolean)timeEndOfDay
withJavaTimeZoneZoneOffsetTransitionRule_TimeDefinition:(JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition *)timeDefnition
                         withJavaTimeZoneOffset:(JavaTimeZoneOffset *)standardOffset
                         withJavaTimeZoneOffset:(JavaTimeZoneOffset *)offsetBefore
                         withJavaTimeZoneOffset:(JavaTimeZoneOffset *)offsetAfter;

/*!
 @brief Reads the state from the stream.
 @param inArg the input stream, not null
 @return the created object, not null
 @throw IOExceptionif an error occurs
 */
+ (JavaTimeZoneZoneOffsetTransitionRule *)readExternalWithJavaIoDataInput:(id<JavaIoDataInput>)inArg;

/*!
 @brief Writes the state to the stream.
 @param outArg the output stream, not null
 @throw IOExceptionif an error occurs
 */
- (void)writeExternalWithJavaIoDataOutput:(id<JavaIoDataOutput>)outArg;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaTimeZoneZoneOffsetTransitionRule)

FOUNDATION_EXPORT JavaTimeZoneZoneOffsetTransitionRule *JavaTimeZoneZoneOffsetTransitionRule_ofWithJavaTimeMonth_withInt_withJavaTimeDayOfWeek_withJavaTimeLocalTime_withBoolean_withJavaTimeZoneZoneOffsetTransitionRule_TimeDefinition_withJavaTimeZoneOffset_withJavaTimeZoneOffset_withJavaTimeZoneOffset_(JavaTimeMonth *month, jint dayOfMonthIndicator, JavaTimeDayOfWeek *dayOfWeek, JavaTimeLocalTime *time, jboolean timeEndOfDay, JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition *timeDefnition, JavaTimeZoneOffset *standardOffset, JavaTimeZoneOffset *offsetBefore, JavaTimeZoneOffset *offsetAfter);

FOUNDATION_EXPORT void JavaTimeZoneZoneOffsetTransitionRule_initWithJavaTimeMonth_withInt_withJavaTimeDayOfWeek_withJavaTimeLocalTime_withBoolean_withJavaTimeZoneZoneOffsetTransitionRule_TimeDefinition_withJavaTimeZoneOffset_withJavaTimeZoneOffset_withJavaTimeZoneOffset_(JavaTimeZoneZoneOffsetTransitionRule *self, JavaTimeMonth *month, jint dayOfMonthIndicator, JavaTimeDayOfWeek *dayOfWeek, JavaTimeLocalTime *time, jboolean timeEndOfDay, JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition *timeDefnition, JavaTimeZoneOffset *standardOffset, JavaTimeZoneOffset *offsetBefore, JavaTimeZoneOffset *offsetAfter);

FOUNDATION_EXPORT JavaTimeZoneZoneOffsetTransitionRule *new_JavaTimeZoneZoneOffsetTransitionRule_initWithJavaTimeMonth_withInt_withJavaTimeDayOfWeek_withJavaTimeLocalTime_withBoolean_withJavaTimeZoneZoneOffsetTransitionRule_TimeDefinition_withJavaTimeZoneOffset_withJavaTimeZoneOffset_withJavaTimeZoneOffset_(JavaTimeMonth *month, jint dayOfMonthIndicator, JavaTimeDayOfWeek *dayOfWeek, JavaTimeLocalTime *time, jboolean timeEndOfDay, JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition *timeDefnition, JavaTimeZoneOffset *standardOffset, JavaTimeZoneOffset *offsetBefore, JavaTimeZoneOffset *offsetAfter) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaTimeZoneZoneOffsetTransitionRule *create_JavaTimeZoneZoneOffsetTransitionRule_initWithJavaTimeMonth_withInt_withJavaTimeDayOfWeek_withJavaTimeLocalTime_withBoolean_withJavaTimeZoneZoneOffsetTransitionRule_TimeDefinition_withJavaTimeZoneOffset_withJavaTimeZoneOffset_withJavaTimeZoneOffset_(JavaTimeMonth *month, jint dayOfMonthIndicator, JavaTimeDayOfWeek *dayOfWeek, JavaTimeLocalTime *time, jboolean timeEndOfDay, JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition *timeDefnition, JavaTimeZoneOffset *standardOffset, JavaTimeZoneOffset *offsetBefore, JavaTimeZoneOffset *offsetAfter);

FOUNDATION_EXPORT JavaTimeZoneZoneOffsetTransitionRule *JavaTimeZoneZoneOffsetTransitionRule_readExternalWithJavaIoDataInput_(id<JavaIoDataInput> inArg);

J2OBJC_TYPE_LITERAL_HEADER(JavaTimeZoneZoneOffsetTransitionRule)

#endif

#if !defined (JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition_) && (INCLUDE_ALL_JavaTimeZoneZoneOffsetTransitionRule || defined(INCLUDE_JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition))
#define JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;
@class JavaTimeLocalDateTime;
@class JavaTimeZoneOffset;

typedef NS_ENUM(NSUInteger, JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition_Enum) {
  JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition_Enum_UTC = 0,
  JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition_Enum_WALL = 1,
  JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition_Enum_STANDARD = 2,
};

/*!
 @brief A definition of the way a local time can be converted to the actual
  transition date-time.
 <p>
  Time zone rules are expressed in one of three ways: 
 <ul>
  <li>Relative to UTC</li>
  <li>Relative to the standard offset in force</li>
  <li>Relative to the wall offset (what you would see on a clock on the wall)</li>
  </ul>
 */
@interface JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition : JavaLangEnum

@property (readonly, class, nonnull) JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition *UTC NS_SWIFT_NAME(UTC);
@property (readonly, class, nonnull) JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition *WALL NS_SWIFT_NAME(WALL);
@property (readonly, class, nonnull) JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition *STANDARD NS_SWIFT_NAME(STANDARD);
+ (JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition * __nonnull)UTC;

+ (JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition * __nonnull)WALL;

+ (JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition * __nonnull)STANDARD;

#pragma mark Public

/*!
 @brief Converts the specified local date-time to the local date-time actually
  seen on a wall clock.
 <p>
  This method converts using the type of this enum.
  The output is defined relative to the 'before' offset of the transition. 
 <p>
  The UTC type uses the UTC offset.
  The STANDARD type uses the standard offset.
  The WALL type returns the input date-time.
  The result is intended for use with the wall-offset.
 @param dateTime the local date-time, not null
 @param standardOffset the standard offset, not null
 @param wallOffset the wall offset, not null
 @return the date-time relative to the wall/before offset, not null
 */
- (JavaTimeLocalDateTime *)createDateTimeWithJavaTimeLocalDateTime:(JavaTimeLocalDateTime *)dateTime
                                            withJavaTimeZoneOffset:(JavaTimeZoneOffset *)standardOffset
                                            withJavaTimeZoneOffset:(JavaTimeZoneOffset *)wallOffset;

+ (JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition *JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition_values_[];

/*!
 @brief The local date-time is expressed in terms of the UTC offset.
 */
inline JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition *JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition_get_UTC(void);
J2OBJC_ENUM_CONSTANT(JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition, UTC)

/*!
 @brief The local date-time is expressed in terms of the wall offset.
 */
inline JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition *JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition_get_WALL(void);
J2OBJC_ENUM_CONSTANT(JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition, WALL)

/*!
 @brief The local date-time is expressed in terms of the standard offset.
 */
inline JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition *JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition_get_STANDARD(void);
J2OBJC_ENUM_CONSTANT(JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition, STANDARD)

FOUNDATION_EXPORT IOSObjectArray *JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition_values(void);

FOUNDATION_EXPORT JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition *JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition *JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(JavaTimeZoneZoneOffsetTransitionRule_TimeDefinition)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaTimeZoneZoneOffsetTransitionRule")
