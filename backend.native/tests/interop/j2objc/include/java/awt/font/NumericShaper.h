//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/awt/font/NumericShaper.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaAwtFontNumericShaper")
#ifdef RESTRICT_JavaAwtFontNumericShaper
#define INCLUDE_ALL_JavaAwtFontNumericShaper 0
#else
#define INCLUDE_ALL_JavaAwtFontNumericShaper 1
#endif
#undef RESTRICT_JavaAwtFontNumericShaper

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaAwtFontNumericShaper_) && (INCLUDE_ALL_JavaAwtFontNumericShaper || defined(INCLUDE_JavaAwtFontNumericShaper))
#define JavaAwtFontNumericShaper_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class IOSCharArray;
@class JavaAwtFontNumericShaper_Range;
@protocol JavaUtilSet;

/*!
 @brief The <code>NumericShaper</code> class is used to convert Latin-1 (European)
  digits to other Unicode decimal digits.Users of this class will
  primarily be people who wish to present data using
  national digit shapes, but find it more convenient to represent the
  data internally using Latin-1 (European) digits.
 This does not
  interpret the deprecated numeric shape selector character (U+206E). 
 <p>
  Instances of <code>NumericShaper</code> are typically applied
  as attributes to text with the 
 <code>NUMERIC_SHAPING</code> attribute
  of the <code>TextAttribute</code> class.
  For example, this code snippet causes a <code>TextLayout</code> to
  shape European digits to Arabic in an Arabic context:<br>
  <blockquote>@code

  Map map = new HashMap();
  map.put(TextAttribute.NUMERIC_SHAPING,
      NumericShaper.getContextualShaper(NumericShaper.ARABIC));
  FontRenderContext frc = ...;
  TextLayout layout = new TextLayout(text, map, frc);
  layout.draw(g2d, x, y); 
  
@endcode</blockquote>
  <br>
  It is also possible to perform numeric shaping explicitly using instances
  of <code>NumericShaper</code>, as this code snippet demonstrates:<br>
  <blockquote>@code

  char[] text = ...;
  // shape all EUROPEAN digits (except zero) to ARABIC digits
  NumericShaper shaper = NumericShaper.getShaper(NumericShaper.ARABIC);
  shaper.shape(text, start, count);
  // shape European digits to ARABIC digits if preceding text is Arabic, or
  // shape European digits to TAMIL digits if preceding text is Tamil, or
  // leave European digits alone if there is no preceding text, or
  // preceding text is neither Arabic nor Tamil
  NumericShaper shaper =
      NumericShaper.getContextualShaper(NumericShaper.ARABIC |
                                          NumericShaper.TAMIL,
                                        NumericShaper.EUROPEAN);
  shaper.shape(text, start, count); 
  
@endcode</blockquote>
  
 <p><b>Bit mask- and enum-based Unicode ranges</b></p>
  
 <p>This class supports two different programming interfaces to
  represent Unicode ranges for script-specific digits: bit
  mask-based ones, such as <code>NumericShaper.ARABIC</code>, and
  enum-based ones, such as <code>NumericShaper.Range.ARABIC</code>.
  Multiple ranges can be specified by ORing bit mask-based constants,
  such as: 
 <blockquote>@code

  NumericShaper.ARABIC | NumericShaper.TAMIL 
  
@endcode</blockquote>
  or creating a <code>Set</code> with the <code>NumericShaper.Range</code>
  constants, such as: 
 <blockquote>@code

  EnumSet.of(NumericShaper.Scirpt.ARABIC, NumericShaper.Range.TAMIL) 
  
@endcode</blockquote>
  The enum-based ranges are a super set of the bit mask-based ones. 
 <p>If the two interfaces are mixed (including serialization),
  Unicode range values are mapped to their counterparts where such
  mapping is possible, such as <code>NumericShaper.Range.ARABIC</code>
  from/to <code>NumericShaper.ARABIC</code>.  If any unmappable range
  values are specified, such as <code>NumericShaper.Range.BALINESE</code>,
  those ranges are ignored. 
 <p><b>Decimal Digits Precedence</b></p>
  
 <p>A Unicode range may have more than one set of decimal digits. If
  multiple decimal digits sets are specified for the same Unicode
  range, one of the sets will take precedence as follows. 
 <table border=1 cellspacing=3 cellpadding=0 summary="NumericShaper constants precedence.">
     <tr>
        <th class="TableHeadingColor">Unicode Range</th>
        <th class="TableHeadingColor"><code>NumericShaper</code> Constants</th>
        <th class="TableHeadingColor">Precedence</th>
     </tr>
     <tr>
        <td rowspan="2">Arabic</td>
        <td><code>NumericShaper.ARABIC</code><br>
            <code>NumericShaper.EASTERN_ARABIC</code></td>
        <td><code>NumericShaper.EASTERN_ARABIC</code></td>
     </tr>
     <tr>
        <td><code>NumericShaper.Range.ARABIC</code><br>
            <code>NumericShaper.Range.EASTERN_ARABIC</code></td>
        <td><code>NumericShaper.Range.EASTERN_ARABIC</code></td>
     </tr>
     <tr>
        <td>Tai Tham</td>
        <td><code>NumericShaper.Range.TAI_THAM_HORA</code><br>
            <code>NumericShaper.Range.TAI_THAM_THAM</code></td>
        <td><code>NumericShaper.Range.TAI_THAM_THAM</code></td>
     </tr>
  </table>
 @since 1.4
 */
@interface JavaAwtFontNumericShaper : NSObject < JavaIoSerializable >
@property (readonly, class) jint EUROPEAN NS_SWIFT_NAME(EUROPEAN);
@property (readonly, class) jint ARABIC NS_SWIFT_NAME(ARABIC);
@property (readonly, class) jint EASTERN_ARABIC NS_SWIFT_NAME(EASTERN_ARABIC);
@property (readonly, class) jint DEVANAGARI NS_SWIFT_NAME(DEVANAGARI);
@property (readonly, class) jint BENGALI NS_SWIFT_NAME(BENGALI);
@property (readonly, class) jint GURMUKHI NS_SWIFT_NAME(GURMUKHI);
@property (readonly, class) jint GUJARATI NS_SWIFT_NAME(GUJARATI);
@property (readonly, class) jint ORIYA NS_SWIFT_NAME(ORIYA);
@property (readonly, class) jint TAMIL NS_SWIFT_NAME(TAMIL);
@property (readonly, class) jint TELUGU NS_SWIFT_NAME(TELUGU);
@property (readonly, class) jint KANNADA NS_SWIFT_NAME(KANNADA);
@property (readonly, class) jint MALAYALAM NS_SWIFT_NAME(MALAYALAM);
@property (readonly, class) jint THAI NS_SWIFT_NAME(THAI);
@property (readonly, class) jint LAO NS_SWIFT_NAME(LAO);
@property (readonly, class) jint TIBETAN NS_SWIFT_NAME(TIBETAN);
@property (readonly, class) jint MYANMAR NS_SWIFT_NAME(MYANMAR);
@property (readonly, class) jint ETHIOPIC NS_SWIFT_NAME(ETHIOPIC);
@property (readonly, class) jint KHMER NS_SWIFT_NAME(KHMER);
@property (readonly, class) jint MONGOLIAN NS_SWIFT_NAME(MONGOLIAN);
@property (readonly, class) jint ALL_RANGES NS_SWIFT_NAME(ALL_RANGES);

+ (jint)EUROPEAN;

+ (jint)ARABIC;

+ (jint)EASTERN_ARABIC;

+ (jint)DEVANAGARI;

+ (jint)BENGALI;

+ (jint)GURMUKHI;

+ (jint)GUJARATI;

+ (jint)ORIYA;

+ (jint)TAMIL;

+ (jint)TELUGU;

+ (jint)KANNADA;

+ (jint)MALAYALAM;

+ (jint)THAI;

+ (jint)LAO;

+ (jint)TIBETAN;

+ (jint)MYANMAR;

+ (jint)ETHIOPIC;

+ (jint)KHMER;

+ (jint)MONGOLIAN;

+ (jint)ALL_RANGES;

#pragma mark Public

/*!
 @brief Returns <code>true</code> if the specified object is an instance of 
 <code>NumericShaper</code> and shapes identically to this one,
  regardless of the range representations, the bit mask or the
  enum.For example, the following code produces <code>"true"</code>.
 <blockquote>@code

  NumericShaper ns1 = NumericShaper.getShaper(NumericShaper.ARABIC);
  NumericShaper ns2 = NumericShaper.getShaper(NumericShaper.Range.ARABIC);
  System.out.println(ns1.equals(ns2)); 
  
@endcode</blockquote>
 @param o the specified object to compare to this           
  <code> NumericShaper </code>
 @return <code>true</code> if <code>o</code> is an instance
          of <code>NumericShaper</code> and shapes in the same way;
          <code>false</code> otherwise.
 - seealso: java.lang.Object#equals(java.lang.Object)
 */
- (jboolean)isEqual:(id)o;

/*!
 @brief Returns a contextual shaper for the provided unicode range(s).
 Latin-1 (EUROPEAN) digits are converted to the decimal digits
  corresponding to the range of the preceding text, if the
  range is one of the provided ranges.  Multiple ranges are
  represented by or-ing the values together, such as, 
 <code>NumericShaper.ARABIC | NumericShaper.THAI</code>.  The
  shaper assumes EUROPEAN as the starting context, that is, if
  EUROPEAN digits are encountered before any strong directional
  text in the string, the context is presumed to be EUROPEAN, and
  so the digits will not shape.
 @param ranges the specified Unicode ranges
 @return a shaper for the specified ranges
 */
+ (JavaAwtFontNumericShaper *)getContextualShaperWithInt:(jint)ranges;

/*!
 @brief Returns a contextual shaper for the provided unicode range(s).
 Latin-1 (EUROPEAN) digits will be converted to the decimal digits
  corresponding to the range of the preceding text, if the
  range is one of the provided ranges.  Multiple ranges are
  represented by or-ing the values together, for example, 
 <code>NumericShaper.ARABIC | NumericShaper.THAI</code>.  The
  shaper uses defaultContext as the starting context.
 @param ranges the specified Unicode ranges
 @param defaultContext the starting context, such as  
  <code> NumericShaper.EUROPEAN </code>
 @return a shaper for the specified Unicode ranges.
 @throw IllegalArgumentExceptionif the specified 
 <code>defaultContext</code> is not a single valid range.
 */
+ (JavaAwtFontNumericShaper *)getContextualShaperWithInt:(jint)ranges
                                                 withInt:(jint)defaultContext;

/*!
 @brief Returns a contextual shaper for the provided Unicode
  range(s).The Latin-1 (EUROPEAN) digits are converted to the
  decimal digits corresponding to the range of the preceding
  text, if the range is one of the provided ranges.
 <p>The shaper assumes EUROPEAN as the starting context, that
  is, if EUROPEAN digits are encountered before any strong
  directional text in the string, the context is presumed to be
  EUROPEAN, and so the digits will not shape.
 @param ranges the specified Unicode ranges
 @return a contextual shaper for the specified ranges
 @throw NullPointerExceptionif <code>ranges</code> is <code>null</code>.
 @since 1.7
 */
+ (JavaAwtFontNumericShaper *)getContextualShaperWithJavaUtilSet:(id<JavaUtilSet>)ranges;

/*!
 @brief Returns a contextual shaper for the provided Unicode range(s).
 The Latin-1 (EUROPEAN) digits will be converted to the decimal
  digits corresponding to the range of the preceding text, if the
  range is one of the provided ranges. The shaper uses <code>defaultContext</code>
  as the starting context.
 @param ranges the specified Unicode ranges
 @param defaultContext the starting context, such as                        
 <code>NumericShaper.Range.EUROPEAN</code>
 @return a contextual shaper for the specified Unicode ranges.
 @throw NullPointerException
 if <code>ranges</code> or <code>defaultContext</code> is <code>null</code>
 @since 1.7
 */
+ (JavaAwtFontNumericShaper *)getContextualShaperWithJavaUtilSet:(id<JavaUtilSet>)ranges
                              withJavaAwtFontNumericShaper_Range:(JavaAwtFontNumericShaper_Range *)defaultContext;

/*!
 @brief Returns an <code>int</code> that ORs together the values for
  all the ranges that will be shaped.
 <p>
  For example, to check if a shaper shapes to Arabic, you would use the
  following: 
 <blockquote>
    <code>if ((shaper.getRanges() & shaper.ARABIC) != 0) &#123; ...</code>
  </blockquote>
  
 <p>Note that this method supports only the bit mask-based
  ranges. Call <code>getRangeSet()</code> for the enum-based ranges.
 @return the values for all the ranges to be shaped.
 */
- (jint)getRanges;

/*!
 @brief Returns a <code>Set</code> representing all the Unicode ranges in
  this <code>NumericShaper</code> that will be shaped.
 @return all the Unicode ranges to be shaped.
 @since 1.7
 */
- (id<JavaUtilSet>)getRangeSet;

/*!
 @brief Returns a shaper for the provided unicode range.All
  Latin-1 (EUROPEAN) digits are converted
  to the corresponding decimal unicode digits.
 @param singleRange the specified Unicode range
 @return a non-contextual numeric shaper
 @throw IllegalArgumentExceptionif the range is not a single range
 */
+ (JavaAwtFontNumericShaper *)getShaperWithInt:(jint)singleRange;

/*!
 @brief Returns a shaper for the provided Unicode
  range.All Latin-1 (EUROPEAN) digits are converted to the
  corresponding decimal digits of the specified Unicode range.
 @param singleRange the Unicode range given by a <code>NumericShaper.Range</code>
   constant.
 @return a non-contextual <code>NumericShaper</code>.
 @throw NullPointerExceptionif <code>singleRange</code> is <code>null</code>
 @since 1.7
 */
+ (JavaAwtFontNumericShaper *)getShaperWithJavaAwtFontNumericShaper_Range:(JavaAwtFontNumericShaper_Range *)singleRange;

/*!
 @brief Returns a hash code for this shaper.
 @return this shaper's hash code.
 - seealso: java.lang.Object#hashCode
 */
- (NSUInteger)hash;

/*!
 @brief Returns a <code>boolean</code> indicating whether or not
  this shaper shapes contextually.
 @return <code>true</code> if this shaper is contextual;
          <code>false</code> otherwise.
 */
- (jboolean)isContextual;

/*!
 @brief Converts the digits in the text that occur between start and
  start + count.
 @param text an array of characters to convert
 @param start the index into  <code> text </code>  to start
          converting
 @param count the number of characters in  <code> text </code>
          to convert
 @throw IndexOutOfBoundsExceptionif start or start + count is
         out of bounds
 @throw NullPointerExceptionif text is null
 */
- (void)shapeWithCharArray:(IOSCharArray *)text
                   withInt:(jint)start
                   withInt:(jint)count;

/*!
 @brief Converts the digits in the text that occur between start and
  start + count, using the provided context.
 Context is ignored if the shaper is not a contextual shaper.
 @param text an array of characters
 @param start the index into  <code> text </code>  to start
          converting
 @param count the number of characters in  <code> text </code>
          to convert
 @param context the context to which to convert the         characters, such as 
  <code> NumericShaper.EUROPEAN </code>
 @throw IndexOutOfBoundsExceptionif start or start + count is
         out of bounds
 @throw NullPointerExceptionif text is null
 @throw IllegalArgumentExceptionif this is a contextual shaper
  and the specified <code>context</code> is not a single valid
  range.
 */
- (void)shapeWithCharArray:(IOSCharArray *)text
                   withInt:(jint)start
                   withInt:(jint)count
                   withInt:(jint)context;

/*!
 @brief Converts the digits in the text that occur between <code>start</code>
  and <code>start + count</code>, using the provided <code>context</code>
 .
 <code>Context</code> is ignored if the shaper is not a
  contextual shaper.
 @param text a <code>char</code>  array
 @param start the index into <code>text</code>  to start converting
 @param count the number of <code>char</code> s in <code>text</code>
                to convert
 @param context the context to which to convert the characters,                 such as 
 <code>NumericShaper.Range.EUROPEAN</code>
 @throw IndexOutOfBoundsException
 if <code>start</code> or <code>start + count</code> is out of bounds
 @throw NullPointerException
 if <code>text</code> or <code>context</code> is null
 @since 1.7
 */
- (void)shapeWithCharArray:(IOSCharArray *)text
                   withInt:(jint)start
                   withInt:(jint)count
withJavaAwtFontNumericShaper_Range:(JavaAwtFontNumericShaper_Range *)context;

/*!
 @brief Returns a <code>String</code> that describes this shaper.This method
  is used for debugging purposes only.
 @return a <code>String</code> describing this shaper.
 */
- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(JavaAwtFontNumericShaper)

/*!
 @brief Identifies the Latin-1 (European) and extended range, and
   Latin-1 (European) decimal base.
 */
inline jint JavaAwtFontNumericShaper_get_EUROPEAN(void);
#define JavaAwtFontNumericShaper_EUROPEAN 1
J2OBJC_STATIC_FIELD_CONSTANT(JavaAwtFontNumericShaper, EUROPEAN, jint)

/*!
 @brief Identifies the ARABIC range and decimal base.
 */
inline jint JavaAwtFontNumericShaper_get_ARABIC(void);
#define JavaAwtFontNumericShaper_ARABIC 2
J2OBJC_STATIC_FIELD_CONSTANT(JavaAwtFontNumericShaper, ARABIC, jint)

/*!
 @brief Identifies the ARABIC range and ARABIC_EXTENDED decimal base.
 */
inline jint JavaAwtFontNumericShaper_get_EASTERN_ARABIC(void);
#define JavaAwtFontNumericShaper_EASTERN_ARABIC 4
J2OBJC_STATIC_FIELD_CONSTANT(JavaAwtFontNumericShaper, EASTERN_ARABIC, jint)

/*!
 @brief Identifies the DEVANAGARI range and decimal base.
 */
inline jint JavaAwtFontNumericShaper_get_DEVANAGARI(void);
#define JavaAwtFontNumericShaper_DEVANAGARI 8
J2OBJC_STATIC_FIELD_CONSTANT(JavaAwtFontNumericShaper, DEVANAGARI, jint)

/*!
 @brief Identifies the BENGALI range and decimal base.
 */
inline jint JavaAwtFontNumericShaper_get_BENGALI(void);
#define JavaAwtFontNumericShaper_BENGALI 16
J2OBJC_STATIC_FIELD_CONSTANT(JavaAwtFontNumericShaper, BENGALI, jint)

/*!
 @brief Identifies the GURMUKHI range and decimal base.
 */
inline jint JavaAwtFontNumericShaper_get_GURMUKHI(void);
#define JavaAwtFontNumericShaper_GURMUKHI 32
J2OBJC_STATIC_FIELD_CONSTANT(JavaAwtFontNumericShaper, GURMUKHI, jint)

/*!
 @brief Identifies the GUJARATI range and decimal base.
 */
inline jint JavaAwtFontNumericShaper_get_GUJARATI(void);
#define JavaAwtFontNumericShaper_GUJARATI 64
J2OBJC_STATIC_FIELD_CONSTANT(JavaAwtFontNumericShaper, GUJARATI, jint)

/*!
 @brief Identifies the ORIYA range and decimal base.
 */
inline jint JavaAwtFontNumericShaper_get_ORIYA(void);
#define JavaAwtFontNumericShaper_ORIYA 128
J2OBJC_STATIC_FIELD_CONSTANT(JavaAwtFontNumericShaper, ORIYA, jint)

/*!
 @brief Identifies the TAMIL range and decimal base.
 */
inline jint JavaAwtFontNumericShaper_get_TAMIL(void);
#define JavaAwtFontNumericShaper_TAMIL 256
J2OBJC_STATIC_FIELD_CONSTANT(JavaAwtFontNumericShaper, TAMIL, jint)

/*!
 @brief Identifies the TELUGU range and decimal base.
 */
inline jint JavaAwtFontNumericShaper_get_TELUGU(void);
#define JavaAwtFontNumericShaper_TELUGU 512
J2OBJC_STATIC_FIELD_CONSTANT(JavaAwtFontNumericShaper, TELUGU, jint)

/*!
 @brief Identifies the KANNADA range and decimal base.
 */
inline jint JavaAwtFontNumericShaper_get_KANNADA(void);
#define JavaAwtFontNumericShaper_KANNADA 1024
J2OBJC_STATIC_FIELD_CONSTANT(JavaAwtFontNumericShaper, KANNADA, jint)

/*!
 @brief Identifies the MALAYALAM range and decimal base.
 */
inline jint JavaAwtFontNumericShaper_get_MALAYALAM(void);
#define JavaAwtFontNumericShaper_MALAYALAM 2048
J2OBJC_STATIC_FIELD_CONSTANT(JavaAwtFontNumericShaper, MALAYALAM, jint)

/*!
 @brief Identifies the THAI range and decimal base.
 */
inline jint JavaAwtFontNumericShaper_get_THAI(void);
#define JavaAwtFontNumericShaper_THAI 4096
J2OBJC_STATIC_FIELD_CONSTANT(JavaAwtFontNumericShaper, THAI, jint)

/*!
 @brief Identifies the LAO range and decimal base.
 */
inline jint JavaAwtFontNumericShaper_get_LAO(void);
#define JavaAwtFontNumericShaper_LAO 8192
J2OBJC_STATIC_FIELD_CONSTANT(JavaAwtFontNumericShaper, LAO, jint)

/*!
 @brief Identifies the TIBETAN range and decimal base.
 */
inline jint JavaAwtFontNumericShaper_get_TIBETAN(void);
#define JavaAwtFontNumericShaper_TIBETAN 16384
J2OBJC_STATIC_FIELD_CONSTANT(JavaAwtFontNumericShaper, TIBETAN, jint)

/*!
 @brief Identifies the MYANMAR range and decimal base.
 */
inline jint JavaAwtFontNumericShaper_get_MYANMAR(void);
#define JavaAwtFontNumericShaper_MYANMAR 32768
J2OBJC_STATIC_FIELD_CONSTANT(JavaAwtFontNumericShaper, MYANMAR, jint)

/*!
 @brief Identifies the ETHIOPIC range and decimal base.
 */
inline jint JavaAwtFontNumericShaper_get_ETHIOPIC(void);
#define JavaAwtFontNumericShaper_ETHIOPIC 65536
J2OBJC_STATIC_FIELD_CONSTANT(JavaAwtFontNumericShaper, ETHIOPIC, jint)

/*!
 @brief Identifies the KHMER range and decimal base.
 */
inline jint JavaAwtFontNumericShaper_get_KHMER(void);
#define JavaAwtFontNumericShaper_KHMER 131072
J2OBJC_STATIC_FIELD_CONSTANT(JavaAwtFontNumericShaper, KHMER, jint)

/*!
 @brief Identifies the MONGOLIAN range and decimal base.
 */
inline jint JavaAwtFontNumericShaper_get_MONGOLIAN(void);
#define JavaAwtFontNumericShaper_MONGOLIAN 262144
J2OBJC_STATIC_FIELD_CONSTANT(JavaAwtFontNumericShaper, MONGOLIAN, jint)

/*!
 @brief Identifies all ranges, for full contextual shaping.
 <p>This constant specifies all of the bit mask-based
  ranges. Use <code>EmunSet.allOf(NumericShaper.Range.class)</code> to
  specify all of the enum-based ranges.
 */
inline jint JavaAwtFontNumericShaper_get_ALL_RANGES(void);
#define JavaAwtFontNumericShaper_ALL_RANGES 524287
J2OBJC_STATIC_FIELD_CONSTANT(JavaAwtFontNumericShaper, ALL_RANGES, jint)

FOUNDATION_EXPORT JavaAwtFontNumericShaper *JavaAwtFontNumericShaper_getShaperWithInt_(jint singleRange);

FOUNDATION_EXPORT JavaAwtFontNumericShaper *JavaAwtFontNumericShaper_getShaperWithJavaAwtFontNumericShaper_Range_(JavaAwtFontNumericShaper_Range *singleRange);

FOUNDATION_EXPORT JavaAwtFontNumericShaper *JavaAwtFontNumericShaper_getContextualShaperWithInt_(jint ranges);

FOUNDATION_EXPORT JavaAwtFontNumericShaper *JavaAwtFontNumericShaper_getContextualShaperWithJavaUtilSet_(id<JavaUtilSet> ranges);

FOUNDATION_EXPORT JavaAwtFontNumericShaper *JavaAwtFontNumericShaper_getContextualShaperWithInt_withInt_(jint ranges, jint defaultContext);

FOUNDATION_EXPORT JavaAwtFontNumericShaper *JavaAwtFontNumericShaper_getContextualShaperWithJavaUtilSet_withJavaAwtFontNumericShaper_Range_(id<JavaUtilSet> ranges, JavaAwtFontNumericShaper_Range *defaultContext);

J2OBJC_TYPE_LITERAL_HEADER(JavaAwtFontNumericShaper)

#endif

#if !defined (JavaAwtFontNumericShaper_Range_) && (INCLUDE_ALL_JavaAwtFontNumericShaper || defined(INCLUDE_JavaAwtFontNumericShaper_Range))
#define JavaAwtFontNumericShaper_Range_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, JavaAwtFontNumericShaper_Range_Enum) {
  JavaAwtFontNumericShaper_Range_Enum_EUROPEAN = 0,
  JavaAwtFontNumericShaper_Range_Enum_ARABIC = 1,
  JavaAwtFontNumericShaper_Range_Enum_EASTERN_ARABIC = 2,
  JavaAwtFontNumericShaper_Range_Enum_DEVANAGARI = 3,
  JavaAwtFontNumericShaper_Range_Enum_BENGALI = 4,
  JavaAwtFontNumericShaper_Range_Enum_GURMUKHI = 5,
  JavaAwtFontNumericShaper_Range_Enum_GUJARATI = 6,
  JavaAwtFontNumericShaper_Range_Enum_ORIYA = 7,
  JavaAwtFontNumericShaper_Range_Enum_TAMIL = 8,
  JavaAwtFontNumericShaper_Range_Enum_TELUGU = 9,
  JavaAwtFontNumericShaper_Range_Enum_KANNADA = 10,
  JavaAwtFontNumericShaper_Range_Enum_MALAYALAM = 11,
  JavaAwtFontNumericShaper_Range_Enum_THAI = 12,
  JavaAwtFontNumericShaper_Range_Enum_LAO = 13,
  JavaAwtFontNumericShaper_Range_Enum_TIBETAN = 14,
  JavaAwtFontNumericShaper_Range_Enum_MYANMAR = 15,
  JavaAwtFontNumericShaper_Range_Enum_ETHIOPIC = 16,
  JavaAwtFontNumericShaper_Range_Enum_KHMER = 17,
  JavaAwtFontNumericShaper_Range_Enum_MONGOLIAN = 18,
  JavaAwtFontNumericShaper_Range_Enum_NKO = 19,
  JavaAwtFontNumericShaper_Range_Enum_MYANMAR_SHAN = 20,
  JavaAwtFontNumericShaper_Range_Enum_LIMBU = 21,
  JavaAwtFontNumericShaper_Range_Enum_NEW_TAI_LUE = 22,
  JavaAwtFontNumericShaper_Range_Enum_BALINESE = 23,
  JavaAwtFontNumericShaper_Range_Enum_SUNDANESE = 24,
  JavaAwtFontNumericShaper_Range_Enum_LEPCHA = 25,
  JavaAwtFontNumericShaper_Range_Enum_OL_CHIKI = 26,
  JavaAwtFontNumericShaper_Range_Enum_VAI = 27,
  JavaAwtFontNumericShaper_Range_Enum_SAURASHTRA = 28,
  JavaAwtFontNumericShaper_Range_Enum_KAYAH_LI = 29,
  JavaAwtFontNumericShaper_Range_Enum_CHAM = 30,
  JavaAwtFontNumericShaper_Range_Enum_TAI_THAM_HORA = 31,
  JavaAwtFontNumericShaper_Range_Enum_TAI_THAM_THAM = 32,
  JavaAwtFontNumericShaper_Range_Enum_JAVANESE = 33,
  JavaAwtFontNumericShaper_Range_Enum_MEETEI_MAYEK = 34,
};

/*!
 @brief A <code>NumericShaper.Range</code> represents a Unicode range of a
  script having its own decimal digits.For example, the <code>NumericShaper.Range.THAI</code>
  range has the Thai digits, THAI DIGIT
  ZERO (U+0E50) to THAI DIGIT NINE (U+0E59).
 <p>The <code>Range</code> enum replaces the traditional bit
  mask-based values (e.g., <code>NumericShaper.ARABIC</code>), and
  supports more Unicode ranges than the bit mask-based ones. For
  example, the following code using the bit mask: 
 <blockquote>@code

  NumericShaper.getContextualShaper(NumericShaper.ARABIC |
                                      NumericShaper.TAMIL,
                                    NumericShaper.EUROPEAN); 
  
@endcode</blockquote>
  can be written using this enum as: 
 <blockquote>@code

  NumericShaper.getContextualShaper(EnumSet.of(
                                      NumericShaper.Range.ARABIC,
                                      NumericShaper.Range.TAMIL),
                                    NumericShaper.Range.EUROPEAN); 
  
@endcode</blockquote>
 @since 1.7
 */
@interface JavaAwtFontNumericShaper_Range : JavaLangEnum

@property (readonly, class, nonnull) JavaAwtFontNumericShaper_Range *EUROPEAN NS_SWIFT_NAME(EUROPEAN);
@property (readonly, class, nonnull) JavaAwtFontNumericShaper_Range *ARABIC NS_SWIFT_NAME(ARABIC);
@property (readonly, class, nonnull) JavaAwtFontNumericShaper_Range *EASTERN_ARABIC NS_SWIFT_NAME(EASTERN_ARABIC);
@property (readonly, class, nonnull) JavaAwtFontNumericShaper_Range *DEVANAGARI NS_SWIFT_NAME(DEVANAGARI);
@property (readonly, class, nonnull) JavaAwtFontNumericShaper_Range *BENGALI NS_SWIFT_NAME(BENGALI);
@property (readonly, class, nonnull) JavaAwtFontNumericShaper_Range *GURMUKHI NS_SWIFT_NAME(GURMUKHI);
@property (readonly, class, nonnull) JavaAwtFontNumericShaper_Range *GUJARATI NS_SWIFT_NAME(GUJARATI);
@property (readonly, class, nonnull) JavaAwtFontNumericShaper_Range *ORIYA NS_SWIFT_NAME(ORIYA);
@property (readonly, class, nonnull) JavaAwtFontNumericShaper_Range *TAMIL NS_SWIFT_NAME(TAMIL);
@property (readonly, class, nonnull) JavaAwtFontNumericShaper_Range *TELUGU NS_SWIFT_NAME(TELUGU);
@property (readonly, class, nonnull) JavaAwtFontNumericShaper_Range *KANNADA NS_SWIFT_NAME(KANNADA);
@property (readonly, class, nonnull) JavaAwtFontNumericShaper_Range *MALAYALAM NS_SWIFT_NAME(MALAYALAM);
@property (readonly, class, nonnull) JavaAwtFontNumericShaper_Range *THAI NS_SWIFT_NAME(THAI);
@property (readonly, class, nonnull) JavaAwtFontNumericShaper_Range *LAO NS_SWIFT_NAME(LAO);
@property (readonly, class, nonnull) JavaAwtFontNumericShaper_Range *TIBETAN NS_SWIFT_NAME(TIBETAN);
@property (readonly, class, nonnull) JavaAwtFontNumericShaper_Range *MYANMAR NS_SWIFT_NAME(MYANMAR);
@property (readonly, class, nonnull) JavaAwtFontNumericShaper_Range *ETHIOPIC NS_SWIFT_NAME(ETHIOPIC);
@property (readonly, class, nonnull) JavaAwtFontNumericShaper_Range *KHMER NS_SWIFT_NAME(KHMER);
@property (readonly, class, nonnull) JavaAwtFontNumericShaper_Range *MONGOLIAN NS_SWIFT_NAME(MONGOLIAN);
@property (readonly, class, nonnull) JavaAwtFontNumericShaper_Range *NKO NS_SWIFT_NAME(NKO);
@property (readonly, class, nonnull) JavaAwtFontNumericShaper_Range *MYANMAR_SHAN NS_SWIFT_NAME(MYANMAR_SHAN);
@property (readonly, class, nonnull) JavaAwtFontNumericShaper_Range *LIMBU NS_SWIFT_NAME(LIMBU);
@property (readonly, class, nonnull) JavaAwtFontNumericShaper_Range *NEW_TAI_LUE NS_SWIFT_NAME(NEW_TAI_LUE);
@property (readonly, class, nonnull) JavaAwtFontNumericShaper_Range *BALINESE NS_SWIFT_NAME(BALINESE);
@property (readonly, class, nonnull) JavaAwtFontNumericShaper_Range *SUNDANESE NS_SWIFT_NAME(SUNDANESE);
@property (readonly, class, nonnull) JavaAwtFontNumericShaper_Range *LEPCHA NS_SWIFT_NAME(LEPCHA);
@property (readonly, class, nonnull) JavaAwtFontNumericShaper_Range *OL_CHIKI NS_SWIFT_NAME(OL_CHIKI);
@property (readonly, class, nonnull) JavaAwtFontNumericShaper_Range *VAI NS_SWIFT_NAME(VAI);
@property (readonly, class, nonnull) JavaAwtFontNumericShaper_Range *SAURASHTRA NS_SWIFT_NAME(SAURASHTRA);
@property (readonly, class, nonnull) JavaAwtFontNumericShaper_Range *KAYAH_LI NS_SWIFT_NAME(KAYAH_LI);
@property (readonly, class, nonnull) JavaAwtFontNumericShaper_Range *CHAM NS_SWIFT_NAME(CHAM);
@property (readonly, class, nonnull) JavaAwtFontNumericShaper_Range *TAI_THAM_HORA NS_SWIFT_NAME(TAI_THAM_HORA);
@property (readonly, class, nonnull) JavaAwtFontNumericShaper_Range *TAI_THAM_THAM NS_SWIFT_NAME(TAI_THAM_THAM);
@property (readonly, class, nonnull) JavaAwtFontNumericShaper_Range *JAVANESE NS_SWIFT_NAME(JAVANESE);
@property (readonly, class, nonnull) JavaAwtFontNumericShaper_Range *MEETEI_MAYEK NS_SWIFT_NAME(MEETEI_MAYEK);
+ (JavaAwtFontNumericShaper_Range * __nonnull)EUROPEAN;

+ (JavaAwtFontNumericShaper_Range * __nonnull)ARABIC;

+ (JavaAwtFontNumericShaper_Range * __nonnull)EASTERN_ARABIC;

+ (JavaAwtFontNumericShaper_Range * __nonnull)DEVANAGARI;

+ (JavaAwtFontNumericShaper_Range * __nonnull)BENGALI;

+ (JavaAwtFontNumericShaper_Range * __nonnull)GURMUKHI;

+ (JavaAwtFontNumericShaper_Range * __nonnull)GUJARATI;

+ (JavaAwtFontNumericShaper_Range * __nonnull)ORIYA;

+ (JavaAwtFontNumericShaper_Range * __nonnull)TAMIL;

+ (JavaAwtFontNumericShaper_Range * __nonnull)TELUGU;

+ (JavaAwtFontNumericShaper_Range * __nonnull)KANNADA;

+ (JavaAwtFontNumericShaper_Range * __nonnull)MALAYALAM;

+ (JavaAwtFontNumericShaper_Range * __nonnull)THAI;

+ (JavaAwtFontNumericShaper_Range * __nonnull)LAO;

+ (JavaAwtFontNumericShaper_Range * __nonnull)TIBETAN;

+ (JavaAwtFontNumericShaper_Range * __nonnull)MYANMAR;

+ (JavaAwtFontNumericShaper_Range * __nonnull)ETHIOPIC;

+ (JavaAwtFontNumericShaper_Range * __nonnull)KHMER;

+ (JavaAwtFontNumericShaper_Range * __nonnull)MONGOLIAN;

+ (JavaAwtFontNumericShaper_Range * __nonnull)NKO;

+ (JavaAwtFontNumericShaper_Range * __nonnull)MYANMAR_SHAN;

+ (JavaAwtFontNumericShaper_Range * __nonnull)LIMBU;

+ (JavaAwtFontNumericShaper_Range * __nonnull)NEW_TAI_LUE;

+ (JavaAwtFontNumericShaper_Range * __nonnull)BALINESE;

+ (JavaAwtFontNumericShaper_Range * __nonnull)SUNDANESE;

+ (JavaAwtFontNumericShaper_Range * __nonnull)LEPCHA;

+ (JavaAwtFontNumericShaper_Range * __nonnull)OL_CHIKI;

+ (JavaAwtFontNumericShaper_Range * __nonnull)VAI;

+ (JavaAwtFontNumericShaper_Range * __nonnull)SAURASHTRA;

+ (JavaAwtFontNumericShaper_Range * __nonnull)KAYAH_LI;

+ (JavaAwtFontNumericShaper_Range * __nonnull)CHAM;

+ (JavaAwtFontNumericShaper_Range * __nonnull)TAI_THAM_HORA;

+ (JavaAwtFontNumericShaper_Range * __nonnull)TAI_THAM_THAM;

+ (JavaAwtFontNumericShaper_Range * __nonnull)JAVANESE;

+ (JavaAwtFontNumericShaper_Range * __nonnull)MEETEI_MAYEK;

#pragma mark Public

+ (JavaAwtFontNumericShaper_Range *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (jchar)getNumericBase;

- (JavaAwtFontNumericShaper_Range_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(JavaAwtFontNumericShaper_Range)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT JavaAwtFontNumericShaper_Range *JavaAwtFontNumericShaper_Range_values_[];

/*!
 @brief The Latin (European) range with the Latin (ASCII) digits.
 */
inline JavaAwtFontNumericShaper_Range *JavaAwtFontNumericShaper_Range_get_EUROPEAN(void);
J2OBJC_ENUM_CONSTANT(JavaAwtFontNumericShaper_Range, EUROPEAN)

/*!
 @brief The Arabic range with the Arabic-Indic digits.
 */
inline JavaAwtFontNumericShaper_Range *JavaAwtFontNumericShaper_Range_get_ARABIC(void);
J2OBJC_ENUM_CONSTANT(JavaAwtFontNumericShaper_Range, ARABIC)

/*!
 @brief The Arabic range with the Eastern Arabic-Indic digits.
 */
inline JavaAwtFontNumericShaper_Range *JavaAwtFontNumericShaper_Range_get_EASTERN_ARABIC(void);
J2OBJC_ENUM_CONSTANT(JavaAwtFontNumericShaper_Range, EASTERN_ARABIC)

/*!
 @brief The Devanagari range with the Devanagari digits.
 */
inline JavaAwtFontNumericShaper_Range *JavaAwtFontNumericShaper_Range_get_DEVANAGARI(void);
J2OBJC_ENUM_CONSTANT(JavaAwtFontNumericShaper_Range, DEVANAGARI)

/*!
 @brief The Bengali range with the Bengali digits.
 */
inline JavaAwtFontNumericShaper_Range *JavaAwtFontNumericShaper_Range_get_BENGALI(void);
J2OBJC_ENUM_CONSTANT(JavaAwtFontNumericShaper_Range, BENGALI)

/*!
 @brief The Gurmukhi range with the Gurmukhi digits.
 */
inline JavaAwtFontNumericShaper_Range *JavaAwtFontNumericShaper_Range_get_GURMUKHI(void);
J2OBJC_ENUM_CONSTANT(JavaAwtFontNumericShaper_Range, GURMUKHI)

/*!
 @brief The Gujarati range with the Gujarati digits.
 */
inline JavaAwtFontNumericShaper_Range *JavaAwtFontNumericShaper_Range_get_GUJARATI(void);
J2OBJC_ENUM_CONSTANT(JavaAwtFontNumericShaper_Range, GUJARATI)

/*!
 @brief The Oriya range with the Oriya digits.
 */
inline JavaAwtFontNumericShaper_Range *JavaAwtFontNumericShaper_Range_get_ORIYA(void);
J2OBJC_ENUM_CONSTANT(JavaAwtFontNumericShaper_Range, ORIYA)

/*!
 @brief The Tamil range with the Tamil digits.
 */
inline JavaAwtFontNumericShaper_Range *JavaAwtFontNumericShaper_Range_get_TAMIL(void);
J2OBJC_ENUM_CONSTANT(JavaAwtFontNumericShaper_Range, TAMIL)

/*!
 @brief The Telugu range with the Telugu digits.
 */
inline JavaAwtFontNumericShaper_Range *JavaAwtFontNumericShaper_Range_get_TELUGU(void);
J2OBJC_ENUM_CONSTANT(JavaAwtFontNumericShaper_Range, TELUGU)

/*!
 @brief The Kannada range with the Kannada digits.
 */
inline JavaAwtFontNumericShaper_Range *JavaAwtFontNumericShaper_Range_get_KANNADA(void);
J2OBJC_ENUM_CONSTANT(JavaAwtFontNumericShaper_Range, KANNADA)

/*!
 @brief The Malayalam range with the Malayalam digits.
 */
inline JavaAwtFontNumericShaper_Range *JavaAwtFontNumericShaper_Range_get_MALAYALAM(void);
J2OBJC_ENUM_CONSTANT(JavaAwtFontNumericShaper_Range, MALAYALAM)

/*!
 @brief The Thai range with the Thai digits.
 */
inline JavaAwtFontNumericShaper_Range *JavaAwtFontNumericShaper_Range_get_THAI(void);
J2OBJC_ENUM_CONSTANT(JavaAwtFontNumericShaper_Range, THAI)

/*!
 @brief The Lao range with the Lao digits.
 */
inline JavaAwtFontNumericShaper_Range *JavaAwtFontNumericShaper_Range_get_LAO(void);
J2OBJC_ENUM_CONSTANT(JavaAwtFontNumericShaper_Range, LAO)

/*!
 @brief The Tibetan range with the Tibetan digits.
 */
inline JavaAwtFontNumericShaper_Range *JavaAwtFontNumericShaper_Range_get_TIBETAN(void);
J2OBJC_ENUM_CONSTANT(JavaAwtFontNumericShaper_Range, TIBETAN)

/*!
 @brief The Myanmar range with the Myanmar digits.
 */
inline JavaAwtFontNumericShaper_Range *JavaAwtFontNumericShaper_Range_get_MYANMAR(void);
J2OBJC_ENUM_CONSTANT(JavaAwtFontNumericShaper_Range, MYANMAR)

/*!
 @brief The Ethiopic range with the Ethiopic digits.Ethiopic
  does not have a decimal digit 0 so Latin (European) 0 is
  used.
 */
inline JavaAwtFontNumericShaper_Range *JavaAwtFontNumericShaper_Range_get_ETHIOPIC(void);
J2OBJC_ENUM_CONSTANT(JavaAwtFontNumericShaper_Range, ETHIOPIC)

/*!
 @brief The Khmer range with the Khmer digits.
 */
inline JavaAwtFontNumericShaper_Range *JavaAwtFontNumericShaper_Range_get_KHMER(void);
J2OBJC_ENUM_CONSTANT(JavaAwtFontNumericShaper_Range, KHMER)

/*!
 @brief The Mongolian range with the Mongolian digits.
 */
inline JavaAwtFontNumericShaper_Range *JavaAwtFontNumericShaper_Range_get_MONGOLIAN(void);
J2OBJC_ENUM_CONSTANT(JavaAwtFontNumericShaper_Range, MONGOLIAN)

/*!
 @brief The N'Ko range with the N'Ko digits.
 */
inline JavaAwtFontNumericShaper_Range *JavaAwtFontNumericShaper_Range_get_NKO(void);
J2OBJC_ENUM_CONSTANT(JavaAwtFontNumericShaper_Range, NKO)

/*!
 @brief The Myanmar range with the Myanmar Shan digits.
 */
inline JavaAwtFontNumericShaper_Range *JavaAwtFontNumericShaper_Range_get_MYANMAR_SHAN(void);
J2OBJC_ENUM_CONSTANT(JavaAwtFontNumericShaper_Range, MYANMAR_SHAN)

/*!
 @brief The Limbu range with the Limbu digits.
 */
inline JavaAwtFontNumericShaper_Range *JavaAwtFontNumericShaper_Range_get_LIMBU(void);
J2OBJC_ENUM_CONSTANT(JavaAwtFontNumericShaper_Range, LIMBU)

/*!
 @brief The New Tai Lue range with the New Tai Lue digits.
 */
inline JavaAwtFontNumericShaper_Range *JavaAwtFontNumericShaper_Range_get_NEW_TAI_LUE(void);
J2OBJC_ENUM_CONSTANT(JavaAwtFontNumericShaper_Range, NEW_TAI_LUE)

/*!
 @brief The Balinese range with the Balinese digits.
 */
inline JavaAwtFontNumericShaper_Range *JavaAwtFontNumericShaper_Range_get_BALINESE(void);
J2OBJC_ENUM_CONSTANT(JavaAwtFontNumericShaper_Range, BALINESE)

/*!
 @brief The Sundanese range with the Sundanese digits.
 */
inline JavaAwtFontNumericShaper_Range *JavaAwtFontNumericShaper_Range_get_SUNDANESE(void);
J2OBJC_ENUM_CONSTANT(JavaAwtFontNumericShaper_Range, SUNDANESE)

/*!
 @brief The Lepcha range with the Lepcha digits.
 */
inline JavaAwtFontNumericShaper_Range *JavaAwtFontNumericShaper_Range_get_LEPCHA(void);
J2OBJC_ENUM_CONSTANT(JavaAwtFontNumericShaper_Range, LEPCHA)

/*!
 @brief The Ol Chiki range with the Ol Chiki digits.
 */
inline JavaAwtFontNumericShaper_Range *JavaAwtFontNumericShaper_Range_get_OL_CHIKI(void);
J2OBJC_ENUM_CONSTANT(JavaAwtFontNumericShaper_Range, OL_CHIKI)

/*!
 @brief The Vai range with the Vai digits.
 */
inline JavaAwtFontNumericShaper_Range *JavaAwtFontNumericShaper_Range_get_VAI(void);
J2OBJC_ENUM_CONSTANT(JavaAwtFontNumericShaper_Range, VAI)

/*!
 @brief The Saurashtra range with the Saurashtra digits.
 */
inline JavaAwtFontNumericShaper_Range *JavaAwtFontNumericShaper_Range_get_SAURASHTRA(void);
J2OBJC_ENUM_CONSTANT(JavaAwtFontNumericShaper_Range, SAURASHTRA)

/*!
 @brief The Kayah Li range with the Kayah Li digits.
 */
inline JavaAwtFontNumericShaper_Range *JavaAwtFontNumericShaper_Range_get_KAYAH_LI(void);
J2OBJC_ENUM_CONSTANT(JavaAwtFontNumericShaper_Range, KAYAH_LI)

/*!
 @brief The Cham range with the Cham digits.
 */
inline JavaAwtFontNumericShaper_Range *JavaAwtFontNumericShaper_Range_get_CHAM(void);
J2OBJC_ENUM_CONSTANT(JavaAwtFontNumericShaper_Range, CHAM)

/*!
 @brief The Tai Tham Hora range with the Tai Tham Hora digits.
 */
inline JavaAwtFontNumericShaper_Range *JavaAwtFontNumericShaper_Range_get_TAI_THAM_HORA(void);
J2OBJC_ENUM_CONSTANT(JavaAwtFontNumericShaper_Range, TAI_THAM_HORA)

/*!
 @brief The Tai Tham Tham range with the Tai Tham Tham digits.
 */
inline JavaAwtFontNumericShaper_Range *JavaAwtFontNumericShaper_Range_get_TAI_THAM_THAM(void);
J2OBJC_ENUM_CONSTANT(JavaAwtFontNumericShaper_Range, TAI_THAM_THAM)

/*!
 @brief The Javanese range with the Javanese digits.
 */
inline JavaAwtFontNumericShaper_Range *JavaAwtFontNumericShaper_Range_get_JAVANESE(void);
J2OBJC_ENUM_CONSTANT(JavaAwtFontNumericShaper_Range, JAVANESE)

/*!
 @brief The Meetei Mayek range with the Meetei Mayek digits.
 */
inline JavaAwtFontNumericShaper_Range *JavaAwtFontNumericShaper_Range_get_MEETEI_MAYEK(void);
J2OBJC_ENUM_CONSTANT(JavaAwtFontNumericShaper_Range, MEETEI_MAYEK)

FOUNDATION_EXPORT IOSObjectArray *JavaAwtFontNumericShaper_Range_values(void);

FOUNDATION_EXPORT JavaAwtFontNumericShaper_Range *JavaAwtFontNumericShaper_Range_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT JavaAwtFontNumericShaper_Range *JavaAwtFontNumericShaper_Range_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(JavaAwtFontNumericShaper_Range)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaAwtFontNumericShaper")
