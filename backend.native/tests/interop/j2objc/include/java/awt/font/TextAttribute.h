//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/awt/font/TextAttribute.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaAwtFontTextAttribute")
#ifdef RESTRICT_JavaAwtFontTextAttribute
#define INCLUDE_ALL_JavaAwtFontTextAttribute 0
#else
#define INCLUDE_ALL_JavaAwtFontTextAttribute 1
#endif
#undef RESTRICT_JavaAwtFontTextAttribute

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaAwtFontTextAttribute_) && (INCLUDE_ALL_JavaAwtFontTextAttribute || defined(INCLUDE_JavaAwtFontTextAttribute))
#define JavaAwtFontTextAttribute_

#define RESTRICT_JavaTextAttributedCharacterIterator 1
#define INCLUDE_JavaTextAttributedCharacterIterator_Attribute 1
#include "java/text/AttributedCharacterIterator.h"

@class JavaLangBoolean;
@class JavaLangFloat;
@class JavaLangInteger;

/*!
 @brief The <code>TextAttribute</code> class defines attribute keys and
  attribute values used for text rendering.
 <p>
  <code>TextAttribute</code> instances are used as attribute keys to
  identify attributes in classes handling text attributes. Other
  constants defined in this class can be used as attribute values. 
 <p>
  For each text attribute, the documentation provides: 
 <UL>
    <LI>the type of its value,
    <LI>the relevant predefined constants, if any
    <LI>the default effect if the attribute is absent
    <LI>the valid values if there are limitations
    <LI>a description of the effect. 
 </UL>
  <p>
  <H4>Values</H4>
  <UL>
    <LI>The values of attributes must always be immutable.
    <LI>Where value limitations are given, any value outside of that
    set is reserved for future use; the value will be treated as
    the default.   
 <LI>The value <code>null</code> is treated the same as the
    default value and results in the default behavior.   
 <li>If the value is not of the proper type, the attribute
    will be ignored.   
 <li>The identity of the value does not matter, only the actual
    value.  For example, <code>TextAttribute.WEIGHT_BOLD</code> and
    <code>new Float(2.0)</code>
    indicate the same <code>WEIGHT</code>.
    <li>Attribute values of type <code>Number</code> (used for
    <code>WEIGHT</code>, <code>WIDTH</code>, <code>POSTURE</code>,
    <code>SIZE</code>, <code>JUSTIFICATION</code>, and
    <code>TRACKING</code>) can vary along their natural range and are
    not restricted to the predefined constants.   
 <code>Number.floatValue()</code> is used to get the actual value
    from the <code>Number</code>.
    <li>The values for <code>WEIGHT</code>, <code>WIDTH</code>, and
    <code>POSTURE</code> are interpolated by the system, which
    can select the 'nearest available' font or use other techniques to
    approximate the user's request. 
 </UL>
 - seealso: java.text.AttributedCharacterIterator
 */
@interface JavaAwtFontTextAttribute : JavaTextAttributedCharacterIterator_Attribute
@property (readonly, class) jlong serialVersionUID NS_SWIFT_NAME(serialVersionUID);
@property (readonly, class, strong) JavaAwtFontTextAttribute *FAMILY NS_SWIFT_NAME(FAMILY);
@property (readonly, class, strong) JavaAwtFontTextAttribute *WEIGHT NS_SWIFT_NAME(WEIGHT);
@property (readonly, class, strong) JavaLangFloat *WEIGHT_EXTRA_LIGHT NS_SWIFT_NAME(WEIGHT_EXTRA_LIGHT);
@property (readonly, class, strong) JavaLangFloat *WEIGHT_LIGHT NS_SWIFT_NAME(WEIGHT_LIGHT);
@property (readonly, class, strong) JavaLangFloat *WEIGHT_DEMILIGHT NS_SWIFT_NAME(WEIGHT_DEMILIGHT);
@property (readonly, class, strong) JavaLangFloat *WEIGHT_REGULAR NS_SWIFT_NAME(WEIGHT_REGULAR);
@property (readonly, class, strong) JavaLangFloat *WEIGHT_SEMIBOLD NS_SWIFT_NAME(WEIGHT_SEMIBOLD);
@property (readonly, class, strong) JavaLangFloat *WEIGHT_MEDIUM NS_SWIFT_NAME(WEIGHT_MEDIUM);
@property (readonly, class, strong) JavaLangFloat *WEIGHT_DEMIBOLD NS_SWIFT_NAME(WEIGHT_DEMIBOLD);
@property (readonly, class, strong) JavaLangFloat *WEIGHT_BOLD NS_SWIFT_NAME(WEIGHT_BOLD);
@property (readonly, class, strong) JavaLangFloat *WEIGHT_HEAVY NS_SWIFT_NAME(WEIGHT_HEAVY);
@property (readonly, class, strong) JavaLangFloat *WEIGHT_EXTRABOLD NS_SWIFT_NAME(WEIGHT_EXTRABOLD);
@property (readonly, class, strong) JavaLangFloat *WEIGHT_ULTRABOLD NS_SWIFT_NAME(WEIGHT_ULTRABOLD);
@property (readonly, class, strong) JavaAwtFontTextAttribute *WIDTH NS_SWIFT_NAME(WIDTH);
@property (readonly, class, strong) JavaLangFloat *WIDTH_CONDENSED NS_SWIFT_NAME(WIDTH_CONDENSED);
@property (readonly, class, strong) JavaLangFloat *WIDTH_SEMI_CONDENSED NS_SWIFT_NAME(WIDTH_SEMI_CONDENSED);
@property (readonly, class, strong) JavaLangFloat *WIDTH_REGULAR NS_SWIFT_NAME(WIDTH_REGULAR);
@property (readonly, class, strong) JavaLangFloat *WIDTH_SEMI_EXTENDED NS_SWIFT_NAME(WIDTH_SEMI_EXTENDED);
@property (readonly, class, strong) JavaLangFloat *WIDTH_EXTENDED NS_SWIFT_NAME(WIDTH_EXTENDED);
@property (readonly, class, strong) JavaAwtFontTextAttribute *POSTURE NS_SWIFT_NAME(POSTURE);
@property (readonly, class, strong) JavaLangFloat *POSTURE_REGULAR NS_SWIFT_NAME(POSTURE_REGULAR);
@property (readonly, class, strong) JavaLangFloat *POSTURE_OBLIQUE NS_SWIFT_NAME(POSTURE_OBLIQUE);
@property (readonly, class, strong) JavaAwtFontTextAttribute *SIZE NS_SWIFT_NAME(SIZE);
@property (readonly, class, strong) JavaAwtFontTextAttribute *TRANSFORM NS_SWIFT_NAME(TRANSFORM);
@property (readonly, class, strong) JavaAwtFontTextAttribute *SUPERSCRIPT NS_SWIFT_NAME(SUPERSCRIPT);
@property (readonly, class, strong) JavaLangInteger *SUPERSCRIPT_SUPER NS_SWIFT_NAME(SUPERSCRIPT_SUPER);
@property (readonly, class, strong) JavaLangInteger *SUPERSCRIPT_SUB NS_SWIFT_NAME(SUPERSCRIPT_SUB);
@property (readonly, class, strong) JavaAwtFontTextAttribute *FONT NS_SWIFT_NAME(FONT);
@property (readonly, class, strong) JavaAwtFontTextAttribute *CHAR_REPLACEMENT NS_SWIFT_NAME(CHAR_REPLACEMENT);
@property (readonly, class, strong) JavaAwtFontTextAttribute *FOREGROUND NS_SWIFT_NAME(FOREGROUND);
@property (readonly, class, strong) JavaAwtFontTextAttribute *BACKGROUND NS_SWIFT_NAME(BACKGROUND);
@property (readonly, class, strong) JavaAwtFontTextAttribute *UNDERLINE NS_SWIFT_NAME(UNDERLINE);
@property (readonly, class, strong) JavaLangInteger *UNDERLINE_ON NS_SWIFT_NAME(UNDERLINE_ON);
@property (readonly, class, strong) JavaAwtFontTextAttribute *STRIKETHROUGH NS_SWIFT_NAME(STRIKETHROUGH);
@property (readonly, class, strong) JavaLangBoolean *STRIKETHROUGH_ON NS_SWIFT_NAME(STRIKETHROUGH_ON);
@property (readonly, class, strong) JavaAwtFontTextAttribute *RUN_DIRECTION NS_SWIFT_NAME(RUN_DIRECTION);
@property (readonly, class, strong) JavaLangBoolean *RUN_DIRECTION_LTR NS_SWIFT_NAME(RUN_DIRECTION_LTR);
@property (readonly, class, strong) JavaLangBoolean *RUN_DIRECTION_RTL NS_SWIFT_NAME(RUN_DIRECTION_RTL);
@property (readonly, class, strong) JavaAwtFontTextAttribute *BIDI_EMBEDDING NS_SWIFT_NAME(BIDI_EMBEDDING);
@property (readonly, class, strong) JavaAwtFontTextAttribute *JUSTIFICATION NS_SWIFT_NAME(JUSTIFICATION);
@property (readonly, class, strong) JavaLangFloat *JUSTIFICATION_FULL NS_SWIFT_NAME(JUSTIFICATION_FULL);
@property (readonly, class, strong) JavaLangFloat *JUSTIFICATION_NONE NS_SWIFT_NAME(JUSTIFICATION_NONE);
@property (readonly, class, strong) JavaAwtFontTextAttribute *INPUT_METHOD_HIGHLIGHT NS_SWIFT_NAME(INPUT_METHOD_HIGHLIGHT);
@property (readonly, class, strong) JavaAwtFontTextAttribute *INPUT_METHOD_UNDERLINE NS_SWIFT_NAME(INPUT_METHOD_UNDERLINE);
@property (readonly, class, strong) JavaLangInteger *UNDERLINE_LOW_ONE_PIXEL NS_SWIFT_NAME(UNDERLINE_LOW_ONE_PIXEL);
@property (readonly, class, strong) JavaLangInteger *UNDERLINE_LOW_TWO_PIXEL NS_SWIFT_NAME(UNDERLINE_LOW_TWO_PIXEL);
@property (readonly, class, strong) JavaLangInteger *UNDERLINE_LOW_DOTTED NS_SWIFT_NAME(UNDERLINE_LOW_DOTTED);
@property (readonly, class, strong) JavaLangInteger *UNDERLINE_LOW_GRAY NS_SWIFT_NAME(UNDERLINE_LOW_GRAY);
@property (readonly, class, strong) JavaLangInteger *UNDERLINE_LOW_DASHED NS_SWIFT_NAME(UNDERLINE_LOW_DASHED);
@property (readonly, class, strong) JavaAwtFontTextAttribute *SWAP_COLORS NS_SWIFT_NAME(SWAP_COLORS);
@property (readonly, class, strong) JavaLangBoolean *SWAP_COLORS_ON NS_SWIFT_NAME(SWAP_COLORS_ON);
@property (readonly, class, strong) JavaAwtFontTextAttribute *NUMERIC_SHAPING NS_SWIFT_NAME(NUMERIC_SHAPING);
@property (readonly, class, strong) JavaAwtFontTextAttribute *KERNING NS_SWIFT_NAME(KERNING);
@property (readonly, class, strong) JavaLangInteger *KERNING_ON NS_SWIFT_NAME(KERNING_ON);
@property (readonly, class, strong) JavaAwtFontTextAttribute *LIGATURES NS_SWIFT_NAME(LIGATURES);
@property (readonly, class, strong) JavaLangInteger *LIGATURES_ON NS_SWIFT_NAME(LIGATURES_ON);
@property (readonly, class, strong) JavaAwtFontTextAttribute *TRACKING NS_SWIFT_NAME(TRACKING);
@property (readonly, class, strong) JavaLangFloat *TRACKING_TIGHT NS_SWIFT_NAME(TRACKING_TIGHT);
@property (readonly, class, strong) JavaLangFloat *TRACKING_LOOSE NS_SWIFT_NAME(TRACKING_LOOSE);

+ (jlong)serialVersionUID;

+ (JavaAwtFontTextAttribute *)FAMILY;

+ (JavaAwtFontTextAttribute *)WEIGHT;

+ (JavaLangFloat *)WEIGHT_EXTRA_LIGHT;

+ (JavaLangFloat *)WEIGHT_LIGHT;

+ (JavaLangFloat *)WEIGHT_DEMILIGHT;

+ (JavaLangFloat *)WEIGHT_REGULAR;

+ (JavaLangFloat *)WEIGHT_SEMIBOLD;

+ (JavaLangFloat *)WEIGHT_MEDIUM;

+ (JavaLangFloat *)WEIGHT_DEMIBOLD;

+ (JavaLangFloat *)WEIGHT_BOLD;

+ (JavaLangFloat *)WEIGHT_HEAVY;

+ (JavaLangFloat *)WEIGHT_EXTRABOLD;

+ (JavaLangFloat *)WEIGHT_ULTRABOLD;

+ (JavaAwtFontTextAttribute *)WIDTH;

+ (JavaLangFloat *)WIDTH_CONDENSED;

+ (JavaLangFloat *)WIDTH_SEMI_CONDENSED;

+ (JavaLangFloat *)WIDTH_REGULAR;

+ (JavaLangFloat *)WIDTH_SEMI_EXTENDED;

+ (JavaLangFloat *)WIDTH_EXTENDED;

+ (JavaAwtFontTextAttribute *)POSTURE;

+ (JavaLangFloat *)POSTURE_REGULAR;

+ (JavaLangFloat *)POSTURE_OBLIQUE;

+ (JavaAwtFontTextAttribute *)SIZE;

+ (JavaAwtFontTextAttribute *)TRANSFORM;

+ (JavaAwtFontTextAttribute *)SUPERSCRIPT;

+ (JavaLangInteger *)SUPERSCRIPT_SUPER;

+ (JavaLangInteger *)SUPERSCRIPT_SUB;

+ (JavaAwtFontTextAttribute *)FONT;

+ (JavaAwtFontTextAttribute *)CHAR_REPLACEMENT;

+ (JavaAwtFontTextAttribute *)FOREGROUND;

+ (JavaAwtFontTextAttribute *)BACKGROUND;

+ (JavaAwtFontTextAttribute *)UNDERLINE;

+ (JavaLangInteger *)UNDERLINE_ON;

+ (JavaAwtFontTextAttribute *)STRIKETHROUGH;

+ (JavaLangBoolean *)STRIKETHROUGH_ON;

+ (JavaAwtFontTextAttribute *)RUN_DIRECTION;

+ (JavaLangBoolean *)RUN_DIRECTION_LTR;

+ (JavaLangBoolean *)RUN_DIRECTION_RTL;

+ (JavaAwtFontTextAttribute *)BIDI_EMBEDDING;

+ (JavaAwtFontTextAttribute *)JUSTIFICATION;

+ (JavaLangFloat *)JUSTIFICATION_FULL;

+ (JavaLangFloat *)JUSTIFICATION_NONE;

+ (JavaAwtFontTextAttribute *)INPUT_METHOD_HIGHLIGHT;

+ (JavaAwtFontTextAttribute *)INPUT_METHOD_UNDERLINE;

+ (JavaLangInteger *)UNDERLINE_LOW_ONE_PIXEL;

+ (JavaLangInteger *)UNDERLINE_LOW_TWO_PIXEL;

+ (JavaLangInteger *)UNDERLINE_LOW_DOTTED;

+ (JavaLangInteger *)UNDERLINE_LOW_GRAY;

+ (JavaLangInteger *)UNDERLINE_LOW_DASHED;

+ (JavaAwtFontTextAttribute *)SWAP_COLORS;

+ (JavaLangBoolean *)SWAP_COLORS_ON;

+ (JavaAwtFontTextAttribute *)NUMERIC_SHAPING;

+ (JavaAwtFontTextAttribute *)KERNING;

+ (JavaLangInteger *)KERNING_ON;

+ (JavaAwtFontTextAttribute *)LIGATURES;

+ (JavaLangInteger *)LIGATURES_ON;

+ (JavaAwtFontTextAttribute *)TRACKING;

+ (JavaLangFloat *)TRACKING_TIGHT;

+ (JavaLangFloat *)TRACKING_LOOSE;

#pragma mark Protected

/*!
 @brief Constructs a <code>TextAttribute</code> with the specified name.
 @param name the attribute name to assign to this  
  <code> TextAttribute </code>
 */
- (instancetype __nonnull)initWithNSString:(NSString *)name;

/*!
 @brief Resolves instances being deserialized to the predefined constants.
 */
- (id)readResolve;

@end

J2OBJC_STATIC_INIT(JavaAwtFontTextAttribute)

inline jlong JavaAwtFontTextAttribute_get_serialVersionUID(void);
#define JavaAwtFontTextAttribute_serialVersionUID 7744112784117861702LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaAwtFontTextAttribute, serialVersionUID, jlong)

/*!
 @brief Attribute key for the font name.Values are instances of 
 <b><code>String</code></b>.
 The default value is 
 <code>"Default"</code>, which causes the platform default font
  family to be used. 
 <p> The <code>Font</code> class defines constants for the logical
  font names. 
 <p>This defines the value passed as <code>name</code> to the 
 <code>Font</code> constructor.  Both logical and physical
  font names are allowed. If a font with the requested name
  is not found, the default font is used. 
 <p><em>Note:</em> This attribute is unfortunately misnamed, as
  it specifies the face name and not just the family.  Thus
  values such as "Lucida Sans Bold" will select that face if it
  exists.  Note, though, that if the requested face does not
  exist, the default will be used with <em>regular</em> weight.
  The "Bold" in the name is part of the face name, not a separate
  request that the font's weight be bold.</p>
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_FAMILY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_FAMILY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, FAMILY, JavaAwtFontTextAttribute *)

/*!
 @brief Attribute key for the weight of a font.Values are instances
  of <b><code>Number</code></b>.
 The default value is 
 <code>WEIGHT_REGULAR</code>.
  
 <p>Several constant values are provided, see <code>WEIGHT_EXTRA_LIGHT</code>
 , <code>WEIGHT_LIGHT</code>, <code>WEIGHT_DEMILIGHT</code>
 , <code>WEIGHT_REGULAR</code>, <code>WEIGHT_SEMIBOLD</code>
 , <code>WEIGHT_MEDIUM</code>, <code>WEIGHT_DEMIBOLD</code>
 , <code>WEIGHT_BOLD</code>, <code>WEIGHT_HEAVY</code>,
  <code>WEIGHT_EXTRABOLD</code>, and <code>WEIGHT_ULTRABOLD</code>.  The
  value <code>WEIGHT_BOLD</code> corresponds to the
  style value <code>Font.BOLD</code> as passed to the 
 <code>Font</code> constructor. 
 <p>The value is roughly the ratio of the stem width to that of
  the regular weight. 
 <p>The system can interpolate the provided value.
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_WEIGHT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_WEIGHT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, WEIGHT, JavaAwtFontTextAttribute *)

/*!
 @brief The lightest predefined weight.
 - seealso: #WEIGHT
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_WEIGHT_EXTRA_LIGHT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_WEIGHT_EXTRA_LIGHT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, WEIGHT_EXTRA_LIGHT, JavaLangFloat *)

/*!
 @brief The standard light weight.
 - seealso: #WEIGHT
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_WEIGHT_LIGHT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_WEIGHT_LIGHT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, WEIGHT_LIGHT, JavaLangFloat *)

/*!
 @brief An intermediate weight between <code>WEIGHT_LIGHT</code> and 
 <code>WEIGHT_STANDARD</code>.
 - seealso: #WEIGHT
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_WEIGHT_DEMILIGHT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_WEIGHT_DEMILIGHT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, WEIGHT_DEMILIGHT, JavaLangFloat *)

/*!
 @brief The standard weight.This is the default value for <code>WEIGHT</code>.
 - seealso: #WEIGHT
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_WEIGHT_REGULAR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_WEIGHT_REGULAR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, WEIGHT_REGULAR, JavaLangFloat *)

/*!
 @brief A moderately heavier weight than <code>WEIGHT_REGULAR</code>.
 - seealso: #WEIGHT
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_WEIGHT_SEMIBOLD(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_WEIGHT_SEMIBOLD;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, WEIGHT_SEMIBOLD, JavaLangFloat *)

/*!
 @brief An intermediate weight between <code>WEIGHT_REGULAR</code> and 
 <code>WEIGHT_BOLD</code>.
 - seealso: #WEIGHT
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_WEIGHT_MEDIUM(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_WEIGHT_MEDIUM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, WEIGHT_MEDIUM, JavaLangFloat *)

/*!
 @brief A moderately lighter weight than <code>WEIGHT_BOLD</code>.
 - seealso: #WEIGHT
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_WEIGHT_DEMIBOLD(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_WEIGHT_DEMIBOLD;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, WEIGHT_DEMIBOLD, JavaLangFloat *)

/*!
 @brief The standard bold weight.
 - seealso: #WEIGHT
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_WEIGHT_BOLD(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_WEIGHT_BOLD;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, WEIGHT_BOLD, JavaLangFloat *)

/*!
 @brief A moderately heavier weight than <code>WEIGHT_BOLD</code>.
 - seealso: #WEIGHT
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_WEIGHT_HEAVY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_WEIGHT_HEAVY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, WEIGHT_HEAVY, JavaLangFloat *)

/*!
 @brief An extra heavy weight.
 - seealso: #WEIGHT
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_WEIGHT_EXTRABOLD(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_WEIGHT_EXTRABOLD;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, WEIGHT_EXTRABOLD, JavaLangFloat *)

/*!
 @brief The heaviest predefined weight.
 - seealso: #WEIGHT
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_WEIGHT_ULTRABOLD(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_WEIGHT_ULTRABOLD;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, WEIGHT_ULTRABOLD, JavaLangFloat *)

/*!
 @brief Attribute key for the width of a font.Values are instances of 
 <b><code>Number</code></b>.
 The default value is 
 <code>WIDTH_REGULAR</code>.
  
 <p>Several constant values are provided, see <code>WIDTH_CONDENSED</code>
 , <code>WIDTH_SEMI_CONDENSED</code>, <code>WIDTH_REGULAR</code>
 , <code>WIDTH_SEMI_EXTENDED</code>, <code>WIDTH_EXTENDED</code>
 .
  
 <p>The value is roughly the ratio of the advance width to that
  of the regular width. 
 <p>The system can interpolate the provided value.
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_WIDTH(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_WIDTH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, WIDTH, JavaAwtFontTextAttribute *)

/*!
 @brief The most condensed predefined width.
 - seealso: #WIDTH
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_WIDTH_CONDENSED(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_WIDTH_CONDENSED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, WIDTH_CONDENSED, JavaLangFloat *)

/*!
 @brief A moderately condensed width.
 - seealso: #WIDTH
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_WIDTH_SEMI_CONDENSED(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_WIDTH_SEMI_CONDENSED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, WIDTH_SEMI_CONDENSED, JavaLangFloat *)

/*!
 @brief The standard width.This is the default value for 
 <code>WIDTH</code>.
 - seealso: #WIDTH
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_WIDTH_REGULAR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_WIDTH_REGULAR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, WIDTH_REGULAR, JavaLangFloat *)

/*!
 @brief A moderately extended width.
 - seealso: #WIDTH
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_WIDTH_SEMI_EXTENDED(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_WIDTH_SEMI_EXTENDED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, WIDTH_SEMI_EXTENDED, JavaLangFloat *)

/*!
 @brief The most extended predefined width.
 - seealso: #WIDTH
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_WIDTH_EXTENDED(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_WIDTH_EXTENDED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, WIDTH_EXTENDED, JavaLangFloat *)

/*!
 @brief Attribute key for the posture of a font.Values are instances
  of <b><code>Number</code></b>.
 The default value is 
 <code>POSTURE_REGULAR</code>.
  
 <p>Two constant values are provided, <code>POSTURE_REGULAR</code>
  and <code>POSTURE_OBLIQUE</code>. The value 
 <code>POSTURE_OBLIQUE</code> corresponds to the style value 
 <code>Font.ITALIC</code> as passed to the <code>Font</code>
  constructor. 
 <p>The value is roughly the slope of the stems of the font,
  expressed as the run over the rise.  Positive values lean right. 
 <p>The system can interpolate the provided value. 
 <p>This will affect the font's italic angle as returned by 
 <code>Font.getItalicAngle</code>.
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_POSTURE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_POSTURE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, POSTURE, JavaAwtFontTextAttribute *)

/*!
 @brief The standard posture, upright.This is the default value for 
 <code>POSTURE</code>.
 - seealso: #POSTURE
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_POSTURE_REGULAR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_POSTURE_REGULAR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, POSTURE_REGULAR, JavaLangFloat *)

/*!
 @brief The standard italic posture.
 - seealso: #POSTURE
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_POSTURE_OBLIQUE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_POSTURE_OBLIQUE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, POSTURE_OBLIQUE, JavaLangFloat *)

/*!
 @brief Attribute key for the font size.Values are instances of 
 <b><code>Number</code></b>.
 The default value is 12pt. 
 <p>This corresponds to the <code>size</code> parameter to the 
 <code>Font</code> constructor. 
 <p>Very large or small sizes will impact rendering performance,
  and the rendering system might not render text at these sizes.
  Negative sizes are illegal and result in the default size. 
 <p>Note that the appearance and metrics of a 12pt font with a
  2x transform might be different than that of a 24 point font
  with no transform.
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_SIZE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_SIZE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, SIZE, JavaAwtFontTextAttribute *)

/*!
 @brief Attribute key for the transform of a font.Values are
  instances of <b><code>TransformAttribute</code></b>.
 The
  default value is <code>TransformAttribute.IDENTITY</code>.
  
 <p>The primary intent is to support scaling and skewing, though
  other effects are possible.</p>
  
 <p>Some transforms will cause the baseline to be rotated and/or
  shifted.  The text and the baseline are transformed together so
  that the text follows the new baseline.  For example, with text
  on a horizontal baseline, the new baseline follows the
  direction of the unit x vector passed through the
  transform. Text metrics are measured against this new baseline.
  So, for example, with other things being equal, text rendered
  with a rotated TRANSFORM and an unrotated TRANSFORM will measure as
  having the same ascent, descent, and advance.</p>
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_TRANSFORM(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_TRANSFORM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, TRANSFORM, JavaAwtFontTextAttribute *)

/*!
 @brief Attribute key for superscripting and subscripting.Values are
  instances of <b><code>Integer</code></b>.
 The default value is
  0, which means that no superscript or subscript is used. 
 <p>Two constant values are provided, see <code>SUPERSCRIPT_SUPER</code>
  and <code>SUPERSCRIPT_SUB</code>.  These have
  the values 1 and -1 respectively.  Values of
  greater magnitude define greater levels of superscript or
  subscripting, for example, 2 corresponds to super-superscript,
  3 to super-super-superscript, and similarly for negative values
  and subscript, up to a level of 7 (or -7).  Values beyond this
  range are reserved; behavior is platform-dependent. 
 <p><code>SUPERSCRIPT</code> can
  impact the ascent and descent of a font.  The ascent
  and descent can never become negative, however.
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_SUPERSCRIPT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_SUPERSCRIPT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, SUPERSCRIPT, JavaAwtFontTextAttribute *)

/*!
 @brief Standard superscript.
 - seealso: #SUPERSCRIPT
 */
inline JavaLangInteger *JavaAwtFontTextAttribute_get_SUPERSCRIPT_SUPER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *JavaAwtFontTextAttribute_SUPERSCRIPT_SUPER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, SUPERSCRIPT_SUPER, JavaLangInteger *)

/*!
 @brief Standard subscript.
 - seealso: #SUPERSCRIPT
 */
inline JavaLangInteger *JavaAwtFontTextAttribute_get_SUPERSCRIPT_SUB(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *JavaAwtFontTextAttribute_SUPERSCRIPT_SUB;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, SUPERSCRIPT_SUB, JavaLangInteger *)

/*!
 @brief Attribute key used to provide the font to use to render text.
 The default
  value is null, indicating that normal resolution of a 
 <code>Font</code> from attributes should be performed. 
 <p><code>TextLayout</code> and 
 <code>AttributedCharacterIterator</code> work in terms of 
 <code>Maps</code> of <code>TextAttributes</code>.  Normally,
  all the attributes are examined and used to select and
  configure a <code>Font</code> instance.  If a <code>FONT</code>
  attribute is present, though, its associated <code>Font</code>
  will be used.  This provides a way for users to override the
  resolution of font attributes into a <code>Font</code>, or
  force use of a particular <code>Font</code> instance.  This
  also allows users to specify subclasses of <code>Font</code> in
  cases where a <code>Font</code> can be subclassed. 
 <p><code>FONT</code> is used for special situations where
  clients already have a <code>Font</code> instance but still
  need to use <code>Map</code>-based APIs.  Typically, there will
  be no other attributes in the <code>Map</code> except the 
 <code>FONT</code> attribute.  With <code>Map</code>-based APIs
  the common case is to specify all attributes individually, so 
 <code>FONT</code> is not needed or desireable. 
 <p>However, if both <code>FONT</code> and other attributes are
  present in the <code>Map</code>, the rendering system will
  merge the attributes defined in the <code>Font</code> with the
  additional attributes.  This merging process classifies 
 <code>TextAttributes</code> into two groups.  One group, the
  'primary' group, is considered fundamental to the selection and
  metric behavior of a font.  These attributes are 
 <code>FAMILY</code>, <code>WEIGHT</code>, <code>WIDTH</code>,
  <code>POSTURE</code>, <code>SIZE</code>,
  <code>TRANSFORM</code>, <code>SUPERSCRIPT</code>, and 
 <code>TRACKING</code>. The other group, the 'secondary' group,
  consists of all other defined attributes, with the exception of 
 <code>FONT</code> itself. 
 <p>To generate the new <code>Map</code>, first the 
 <code>Font</code> is obtained from the <code>FONT</code>
  attribute, and <em>all</em> of its attributes extracted into a
  new <code>Map</code>.  Then only the <em>secondary</em>
  attributes from the original <code>Map</code> are added to
  those in the new <code>Map</code>.  Thus the values of primary
  attributes come solely from the <code>Font</code>, and the
  values of secondary attributes originate with the 
 <code>Font</code> but can be overridden by other values in the 
 <code>Map</code>.
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_FONT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_FONT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, FONT, JavaAwtFontTextAttribute *)

/*!
 @brief Attribute key for a user-defined glyph to display in lieu
  of the font's standard glyph for a character.Values are
  intances of GraphicAttribute.
 The default value is null,
  indicating that the standard glyphs provided by the font
  should be used. 
 <p>This attribute is used to reserve space for a graphic or
  other component embedded in a line of text.  It is required for
  correct positioning of 'inline' components within a line when
  bidirectional reordering (see <code>java.text.Bidi</code>) is
  performed.  Each character (Unicode code point) will be
  rendered using the provided GraphicAttribute. Typically, the
  characters to which this attribute is applied should be 
 <code>&#92;uFFFC</code>.
  
 <p>The GraphicAttribute determines the logical and visual
  bounds of the text; the actual Font values are ignored.
 - seealso: GraphicAttribute
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_CHAR_REPLACEMENT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_CHAR_REPLACEMENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, CHAR_REPLACEMENT, JavaAwtFontTextAttribute *)

/*!
 @brief Attribute key for the paint used to render the text.Values are
  instances of <b><code>Paint</code></b>.
 The default value is
  null, indicating that the <code>Paint</code> set on the 
 <code>Graphics2D</code> at the time of rendering is used. 
 <p>Glyphs will be rendered using this 
 <code>Paint</code> regardless of the <code>Paint</code> value
  set on the <code>Graphics</code> (but see <code>SWAP_COLORS</code>).
 - seealso: java.awt.Paint
 - seealso: #SWAP_COLORS
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_FOREGROUND(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_FOREGROUND;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, FOREGROUND, JavaAwtFontTextAttribute *)

/*!
 @brief Attribute key for the paint used to render the background of
  the text.Values are instances of <b><code>Paint</code></b>.
 The default value is null, indicating that the background
  should not be rendered. 
 <p>The logical bounds of the text will be filled using this 
 <code>Paint</code>, and then the text will be rendered on top
  of it (but see <code>SWAP_COLORS</code>).
  
 <p>The visual bounds of the text is extended to include the
  logical bounds, if necessary.  The outline is not affected.
 - seealso: java.awt.Paint
 - seealso: #SWAP_COLORS
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_BACKGROUND(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_BACKGROUND;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, BACKGROUND, JavaAwtFontTextAttribute *)

/*!
 @brief Attribute key for underline.Values are instances of 
 <b><code>Integer</code></b>.
 The default value is -1, which
  means no underline. 
 <p>The constant value <code>UNDERLINE_ON</code> is provided. 
 <p>The underline affects both the visual bounds and the outline
  of the text.
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_UNDERLINE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_UNDERLINE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, UNDERLINE, JavaAwtFontTextAttribute *)

/*!
 @brief Standard underline.
 - seealso: #UNDERLINE
 */
inline JavaLangInteger *JavaAwtFontTextAttribute_get_UNDERLINE_ON(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *JavaAwtFontTextAttribute_UNDERLINE_ON;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, UNDERLINE_ON, JavaLangInteger *)

/*!
 @brief Attribute key for strikethrough.Values are instances of 
 <b><code>Boolean</code></b>.
 The default value is 
 <code>false</code>, which means no strikethrough. 
 <p>The constant value <code>STRIKETHROUGH_ON</code> is provided. 
 <p>The strikethrough affects both the visual bounds and the
  outline of the text.
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_STRIKETHROUGH(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_STRIKETHROUGH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, STRIKETHROUGH, JavaAwtFontTextAttribute *)

/*!
 @brief A single strikethrough.
 - seealso: #STRIKETHROUGH
 */
inline JavaLangBoolean *JavaAwtFontTextAttribute_get_STRIKETHROUGH_ON(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangBoolean *JavaAwtFontTextAttribute_STRIKETHROUGH_ON;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, STRIKETHROUGH_ON, JavaLangBoolean *)

/*!
 @brief Attribute key for the run direction of the line.Values are
  instances of <b><code>Boolean</code></b>.
 The default value is
  null, which indicates that the standard Bidi algorithm for
  determining run direction should be used with the value <code>java.text.Bidi.DIRECTION_DEFAULT_LEFT_TO_RIGHT</code>
 .
  
 <p>The constants <code>RUN_DIRECTION_RTL</code> and <code>RUN_DIRECTION_LTR</code>
  are provided. 
 <p>This determines the value passed to the <code>java.text.Bidi</code>
  constructor to select the primary direction of
  the text in the paragraph. 
 <p><em>Note:</em> This attribute should have the same value for
  all the text in a paragraph, otherwise the behavior is
  undetermined.
 - seealso: java.text.Bidi
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_RUN_DIRECTION(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_RUN_DIRECTION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, RUN_DIRECTION, JavaAwtFontTextAttribute *)

/*!
 @brief Left-to-right run direction.
 - seealso: #RUN_DIRECTION
 */
inline JavaLangBoolean *JavaAwtFontTextAttribute_get_RUN_DIRECTION_LTR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangBoolean *JavaAwtFontTextAttribute_RUN_DIRECTION_LTR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, RUN_DIRECTION_LTR, JavaLangBoolean *)

/*!
 @brief Right-to-left run direction.
 - seealso: #RUN_DIRECTION
 */
inline JavaLangBoolean *JavaAwtFontTextAttribute_get_RUN_DIRECTION_RTL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangBoolean *JavaAwtFontTextAttribute_RUN_DIRECTION_RTL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, RUN_DIRECTION_RTL, JavaLangBoolean *)

/*!
 @brief Attribute key for the embedding level of the text.Values are
  instances of <b><code>Integer</code></b>.
 The default value is 
 <code>null</code>, indicating that the the Bidirectional
  algorithm should run without explicit embeddings. 
 <p>Positive values 1 through 61 are <em>embedding</em> levels,
  negative values -1 through -61 are <em>override</em> levels.
  The value 0 means that the base line direction is used.  These
  levels are passed in the embedding levels array to the <code>java.text.Bidi</code>
  constructor. 
 <p><em>Note:</em> When this attribute is present anywhere in
  a paragraph, then any Unicode bidi control characters (RLO,
  LRO, RLE, LRE, and PDF) in the paragraph are
  disregarded, and runs of text where this attribute is not
  present are treated as though it were present and had the value
  0.
 - seealso: java.text.Bidi
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_BIDI_EMBEDDING(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_BIDI_EMBEDDING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, BIDI_EMBEDDING, JavaAwtFontTextAttribute *)

/*!
 @brief Attribute key for the justification of a paragraph.Values are
  instances of <b><code>Number</code></b>.
 The default value is
  1, indicating that justification should use the full width
  provided.  Values are pinned to the range [0..1]. 
 <p>The constants <code>JUSTIFICATION_FULL</code> and <code>JUSTIFICATION_NONE</code>
  are provided. 
 <p>Specifies the fraction of the extra space to use when
  justification is requested on a <code>TextLayout</code>. For
  example, if the line is 50 points wide and it is requested to
  justify to 70 points, a value of 0.75 will pad to use
  three-quarters of the remaining space, or 15 points, so that
  the resulting line will be 65 points in length. 
 <p><em>Note:</em> This should have the same value for all the
  text in a paragraph, otherwise the behavior is undetermined.
 - seealso: TextLayout#getJustifiedLayout
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_JUSTIFICATION(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_JUSTIFICATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, JUSTIFICATION, JavaAwtFontTextAttribute *)

/*!
 @brief Justify the line to the full requested width.This is the
  default value for <code>JUSTIFICATION</code>.
 - seealso: #JUSTIFICATION
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_JUSTIFICATION_FULL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_JUSTIFICATION_FULL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, JUSTIFICATION_FULL, JavaLangFloat *)

/*!
 @brief Do not allow the line to be justified.
 - seealso: #JUSTIFICATION
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_JUSTIFICATION_NONE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_JUSTIFICATION_NONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, JUSTIFICATION_NONE, JavaLangFloat *)

/*!
 @brief Attribute key for input method highlight styles.
 The default value is <code>null</code>,
  which means that input method styles should not be applied
  before rendering.
 - seealso: java.text.Annotation
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_INPUT_METHOD_HIGHLIGHT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_INPUT_METHOD_HIGHLIGHT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, INPUT_METHOD_HIGHLIGHT, JavaAwtFontTextAttribute *)

/*!
 @brief Attribute key for input method underlines.Values
  are instances of <b><code>Integer</code></b>.
 The default
  value is <code>-1</code>, which means no underline. 
 <p>Several constant values are provided, see <code>UNDERLINE_LOW_ONE_PIXEL</code>
 , <code>UNDERLINE_LOW_TWO_PIXEL</code>,
  <code>UNDERLINE_LOW_DOTTED</code>, <code>UNDERLINE_LOW_GRAY</code>, and 
 <code>UNDERLINE_LOW_DASHED</code>.
  
 <p>This may be used in conjunction with <code>UNDERLINE</code> if
  desired.  The primary purpose is for use by input methods.
  Other use of these underlines for simple ornamentation might
  confuse users. 
 <p>The input method underline affects both the visual bounds and
  the outline of the text.
 @since 1.3
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_INPUT_METHOD_UNDERLINE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_INPUT_METHOD_UNDERLINE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, INPUT_METHOD_UNDERLINE, JavaAwtFontTextAttribute *)

/*!
 @brief Single pixel solid low underline.
 - seealso: #INPUT_METHOD_UNDERLINE
 @since 1.3
 */
inline JavaLangInteger *JavaAwtFontTextAttribute_get_UNDERLINE_LOW_ONE_PIXEL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *JavaAwtFontTextAttribute_UNDERLINE_LOW_ONE_PIXEL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, UNDERLINE_LOW_ONE_PIXEL, JavaLangInteger *)

/*!
 @brief Double pixel solid low underline.
 - seealso: #INPUT_METHOD_UNDERLINE
 @since 1.3
 */
inline JavaLangInteger *JavaAwtFontTextAttribute_get_UNDERLINE_LOW_TWO_PIXEL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *JavaAwtFontTextAttribute_UNDERLINE_LOW_TWO_PIXEL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, UNDERLINE_LOW_TWO_PIXEL, JavaLangInteger *)

/*!
 @brief Single pixel dotted low underline.
 - seealso: #INPUT_METHOD_UNDERLINE
 @since 1.3
 */
inline JavaLangInteger *JavaAwtFontTextAttribute_get_UNDERLINE_LOW_DOTTED(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *JavaAwtFontTextAttribute_UNDERLINE_LOW_DOTTED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, UNDERLINE_LOW_DOTTED, JavaLangInteger *)

/*!
 @brief Double pixel gray low underline.
 - seealso: #INPUT_METHOD_UNDERLINE
 @since 1.3
 */
inline JavaLangInteger *JavaAwtFontTextAttribute_get_UNDERLINE_LOW_GRAY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *JavaAwtFontTextAttribute_UNDERLINE_LOW_GRAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, UNDERLINE_LOW_GRAY, JavaLangInteger *)

/*!
 @brief Single pixel dashed low underline.
 - seealso: #INPUT_METHOD_UNDERLINE
 @since 1.3
 */
inline JavaLangInteger *JavaAwtFontTextAttribute_get_UNDERLINE_LOW_DASHED(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *JavaAwtFontTextAttribute_UNDERLINE_LOW_DASHED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, UNDERLINE_LOW_DASHED, JavaLangInteger *)

/*!
 @brief Attribute key for swapping foreground and background 
 <code>Paints</code>.Values are instances of 
 <b><code>Boolean</code></b>.
 The default value is 
 <code>false</code>, which means do not swap colors. 
 <p>The constant value <code>SWAP_COLORS_ON</code> is defined. 
 <p>If the <code>FOREGROUND</code> attribute is set, its 
 <code>Paint</code> will be used as the background, otherwise the 
 <code>Paint</code> currently on the <code>Graphics</code>
  will be used.  If the <code>BACKGROUND</code> attribute is set, its 
 <code>Paint</code> will be used as the foreground, otherwise
  the system will find a contrasting color to the
  (resolved) background so that the text will be visible.
 - seealso: #FOREGROUND
 - seealso: #BACKGROUND
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_SWAP_COLORS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_SWAP_COLORS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, SWAP_COLORS, JavaAwtFontTextAttribute *)

/*!
 @brief Swap foreground and background.
 - seealso: #SWAP_COLORS
 @since 1.3
 */
inline JavaLangBoolean *JavaAwtFontTextAttribute_get_SWAP_COLORS_ON(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangBoolean *JavaAwtFontTextAttribute_SWAP_COLORS_ON;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, SWAP_COLORS_ON, JavaLangBoolean *)

/*!
 @brief Attribute key for converting ASCII decimal digits to other
  decimal ranges.Values are instances of <code>NumericShaper</code>.
 The default is <code>null</code>, which means do not perform
  numeric shaping. 
 <p>When a numeric shaper is defined, the text is first
  processed by the shaper before any other analysis of the text
  is performed. 
 <p><em>Note:</em> This should have the same value for all the
  text in the paragraph, otherwise the behavior is undetermined.
 - seealso: NumericShaper
 @since 1.4
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_NUMERIC_SHAPING(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_NUMERIC_SHAPING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, NUMERIC_SHAPING, JavaAwtFontTextAttribute *)

/*!
 @brief Attribute key to request kerning.Values are instances of 
 <b><code>Integer</code></b>.
 The default value is 
 <code>0</code>, which does not request kerning. 
 <p>The constant value <code>KERNING_ON</code> is provided. 
 <p>The default advances of single characters are not
  appropriate for some character sequences, for example "To" or
  "AWAY".  Without kerning the adjacent characters appear to be
  separated by too much space.  Kerning causes selected sequences
  of characters to be spaced differently for a more pleasing
  visual appearance.
 @since 1.6
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_KERNING(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_KERNING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, KERNING, JavaAwtFontTextAttribute *)

/*!
 @brief Request standard kerning.
 - seealso: #KERNING
 @since 1.6
 */
inline JavaLangInteger *JavaAwtFontTextAttribute_get_KERNING_ON(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *JavaAwtFontTextAttribute_KERNING_ON;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, KERNING_ON, JavaLangInteger *)

/*!
 @brief Attribute key for enabling optional ligatures.Values are
  instances of <b><code>Integer</code></b>.
 The default value is 
 <code>0</code>, which means do not use optional ligatures. 
 <p>The constant value <code>LIGATURES_ON</code> is defined. 
 <p>Ligatures required by the writing system are always enabled.
 @since 1.6
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_LIGATURES(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_LIGATURES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, LIGATURES, JavaAwtFontTextAttribute *)

/*!
 @brief Request standard optional ligatures.
 - seealso: #LIGATURES
 @since 1.6
 */
inline JavaLangInteger *JavaAwtFontTextAttribute_get_LIGATURES_ON(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *JavaAwtFontTextAttribute_LIGATURES_ON;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, LIGATURES_ON, JavaLangInteger *)

/*!
 @brief Attribute key to control tracking.Values are instances of 
 <b><code>Number</code></b>.
 The default value is 
 <code>0</code>, which means no additional tracking. 
 <p>The constant values <code>TRACKING_TIGHT</code> and <code>TRACKING_LOOSE</code>
  are provided. 
 <p>The tracking value is multiplied by the font point size and
  passed through the font transform to determine an additional
  amount to add to the advance of each glyph cluster.  Positive
  tracking values will inhibit formation of optional ligatures.
  Tracking values are typically between <code>-0.1</code> and 
 <code>0.3</code>; values outside this range are generally not
  desireable.
 @since 1.6
 */
inline JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_get_TRACKING(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaAwtFontTextAttribute *JavaAwtFontTextAttribute_TRACKING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, TRACKING, JavaAwtFontTextAttribute *)

/*!
 @brief Perform tight tracking.
 - seealso: #TRACKING
 @since 1.6
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_TRACKING_TIGHT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_TRACKING_TIGHT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, TRACKING_TIGHT, JavaLangFloat *)

/*!
 @brief Perform loose tracking.
 - seealso: #TRACKING
 @since 1.6
 */
inline JavaLangFloat *JavaAwtFontTextAttribute_get_TRACKING_LOOSE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangFloat *JavaAwtFontTextAttribute_TRACKING_LOOSE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaAwtFontTextAttribute, TRACKING_LOOSE, JavaLangFloat *)

FOUNDATION_EXPORT void JavaAwtFontTextAttribute_initWithNSString_(JavaAwtFontTextAttribute *self, NSString *name);

FOUNDATION_EXPORT JavaAwtFontTextAttribute *new_JavaAwtFontTextAttribute_initWithNSString_(NSString *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaAwtFontTextAttribute *create_JavaAwtFontTextAttribute_initWithNSString_(NSString *name);

J2OBJC_TYPE_LITERAL_HEADER(JavaAwtFontTextAttribute)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaAwtFontTextAttribute")
