//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/security/KeyStore.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecurityKeyStore")
#ifdef RESTRICT_JavaSecurityKeyStore
#define INCLUDE_ALL_JavaSecurityKeyStore 0
#else
#define INCLUDE_ALL_JavaSecurityKeyStore 1
#endif
#undef RESTRICT_JavaSecurityKeyStore
#ifdef INCLUDE_JavaSecurityKeyStore_SimpleLoadStoreParameter
#define INCLUDE_JavaSecurityKeyStore_LoadStoreParameter 1
#endif
#ifdef INCLUDE_JavaSecurityKeyStore_TrustedCertificateEntry
#define INCLUDE_JavaSecurityKeyStore_Entry 1
#endif
#ifdef INCLUDE_JavaSecurityKeyStore_SecretKeyEntry
#define INCLUDE_JavaSecurityKeyStore_Entry 1
#endif
#ifdef INCLUDE_JavaSecurityKeyStore_PrivateKeyEntry
#define INCLUDE_JavaSecurityKeyStore_Entry 1
#endif
#ifdef INCLUDE_JavaSecurityKeyStore_CallbackHandlerProtection
#define INCLUDE_JavaSecurityKeyStore_ProtectionParameter 1
#endif
#ifdef INCLUDE_JavaSecurityKeyStore_PasswordProtection
#define INCLUDE_JavaSecurityKeyStore_ProtectionParameter 1
#endif

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSecurityKeyStore_) && (INCLUDE_ALL_JavaSecurityKeyStore || defined(INCLUDE_JavaSecurityKeyStore))
#define JavaSecurityKeyStore_

@class IOSByteArray;
@class IOSCharArray;
@class IOSClass;
@class IOSObjectArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaSecurityCertCertificate;
@class JavaSecurityKeyStoreSpi;
@class JavaSecurityProvider;
@class JavaUtilDate;
@protocol JavaSecurityKey;
@protocol JavaSecurityKeyStore_Entry;
@protocol JavaSecurityKeyStore_LoadStoreParameter;
@protocol JavaSecurityKeyStore_ProtectionParameter;
@protocol JavaUtilEnumeration;

/*!
 @brief This class represents a storage facility for cryptographic
  keys and certificates.
 <p> A <code>KeyStore</code> manages different types of entries.
  Each type of entry implements the <code>KeyStore.Entry</code> interface.
  Three basic <code>KeyStore.Entry</code> implementations are provided: 
 <ul>
  <li><b>KeyStore.PrivateKeyEntry</b>
  <p> This type of entry holds a cryptographic <code>PrivateKey</code>,
  which is optionally stored in a protected format to prevent
  unauthorized access.  It is also accompanied by a certificate chain
  for the corresponding public key. 
 <p> Private keys and certificate chains are used by a given entity for
  self-authentication. Applications for this authentication include software
  distribution organizations which sign JAR files as part of releasing
  and/or licensing software. 
 <li><b>KeyStore.SecretKeyEntry</b>
  <p> This type of entry holds a cryptographic <code>SecretKey</code>,
  which is optionally stored in a protected format to prevent
  unauthorized access. 
 <li><b>KeyStore.TrustedCertificateEntry</b>
  <p> This type of entry contains a single public key <code>Certificate</code>
  belonging to another party. It is called a <i>trusted certificate</i>
  because the keystore owner trusts that the public key in the certificate
  indeed belongs to the identity identified by the <i>subject</i> (owner)
  of the certificate. 
 <p>This type of entry can be used to authenticate other parties. 
 </ul>
  
 <p> Each entry in a keystore is identified by an "alias" string. In the
  case of private keys and their associated certificate chains, these strings
  distinguish among the different ways in which the entity may authenticate
  itself. For example, the entity may authenticate itself using different
  certificate authorities, or using different public key algorithms. 
 <p> Whether aliases are case sensitive is implementation dependent. In order
  to avoid problems, it is recommended not to use aliases in a KeyStore that
  only differ in case. 
 <p> Whether keystores are persistent, and the mechanisms used by the
  keystore if it is persistent, are not specified here. This allows
  use of a variety of techniques for protecting sensitive (e.g., private or
  secret) keys. Smart cards or other integrated cryptographic engines
  (SafeKeyper) are one option, and simpler mechanisms such as files may also
  be used (in a variety of formats). 
 <p> Typical ways to request a KeyStore object include
  relying on the default type and providing a specific keystore type. 
 <ul>
  <li>To rely on the default type: 
 @code

     KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType()); 
  
@endcode
  The system will return a keystore implementation for the default type. 
 <p>
  
 <li>To provide a specific keystore type: 
 @code

       KeyStore ks = KeyStore.getInstance("JKS"); 
  
@endcode
  The system will return the most preferred implementation of the
  specified keystore type available in the environment. <p>
  </ul>
  
 <p> Before a keystore can be accessed, it must be 
 <code>loaded</code>.
  @code

     KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
     // get user password and file input stream
     char[] password = getPassword();
     java.io.FileInputStream fis = null;
     try {
         fis = new java.io.FileInputStream("keyStoreName");
         ks.load(fis, password);
     } finally {
         if (fis != null) {
             fis.close();
         }       }    
  
@endcode
  To create an empty keystore using the above <code>load</code> method,
  pass <code>null</code> as the <code>InputStream</code> argument. 
 <p> Once the keystore has been loaded, it is possible
  to read existing entries from the keystore, or to write new entries
  into the keystore: 
 @code

     KeyStore.ProtectionParameter protParam =
         new KeyStore.PasswordProtection(password);
     // get my private key
     KeyStore.PrivateKeyEntry pkEntry = (KeyStore.PrivateKeyEntry)
         ks.getEntry("privateKeyAlias", protParam);
     PrivateKey myPrivateKey = pkEntry.getPrivateKey();
     // save my secret key
     javax.crypto.SecretKey mySecretKey;
     KeyStore.SecretKeyEntry skEntry =
         new KeyStore.SecretKeyEntry(mySecretKey);
     ks.setEntry("secretKeyAlias", skEntry, protParam);
     // store away the keystore
     java.io.FileOutputStream fos = null;
     try {
         fos = new java.io.FileOutputStream("newKeyStoreName");
         ks.store(fos, password);
     } finally {
         if (fos != null) {
             fos.close();
         }       }    
  
@endcode
  Note that although the same password may be used to
  load the keystore, to protect the private key entry,
  to protect the secret key entry, and to store the keystore
  (as is shown in the sample code above),
  different passwords or other protection parameters
  may also be used. 
 <p> Android provides the following <code>KeyStore</code> types: 
 <table>
      <thead>
          <tr>
              <th>Name</th>
              <th>Supported (API Levels)</th>
          </tr>
      </thead>
      <tbody>
          <tr>
              <td>AndroidCAStore</td>
              <td>14+</td>
          </tr>
          <tr>
              <td>AndroidKeyStore</td>
              <td>18+</td>
          </tr>
          <tr>
              <td>BCPKCS12</td>
              <td>1&ndash;8</td>
          </tr>
          <tr>
              <td>BKS</td>
              <td>1+</td>
          </tr>
          <tr>
              <td>BouncyCastle</td>
              <td>1+</td>
          </tr>
          <tr>
              <td>PKCS12</td>
              <td>1+</td>
          </tr>
          <tr>
              <td>PKCS12-DEF</td>
              <td>1&ndash;8</td>
          </tr>
      </tbody>
  </table>
  These types are described in the <a href="{@@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/security/StandardNames.html#KeyStore">
  KeyStore section</a> of the
  Java Cryptography Architecture Standard Algorithm Name Documentation.
 @author Jan Luehe
 - seealso: java.security.PrivateKey
 - seealso: javax.crypto.SecretKey
 - seealso: java.security.cert.Certificate
 @since 1.2
 */
@interface JavaSecurityKeyStore : NSObject

#pragma mark Public

/*!
 @brief Lists all the alias names of this keystore.
 @return enumeration of the alias names
 @throw KeyStoreExceptionif the keystore has not been initialized
  (loaded).
 */
- (id<JavaUtilEnumeration>)aliases;

/*!
 @brief Checks if the given alias exists in this keystore.
 @param alias the alias name
 @return true if the alias exists, false otherwise
 @throw KeyStoreExceptionif the keystore has not been initialized
  (loaded).
 */
- (jboolean)containsAliasWithNSString:(NSString *)alias;

/*!
 @brief Deletes the entry identified by the given alias from this keystore.
 @param alias the alias name
 @throw KeyStoreExceptionif the keystore has not been initialized,
  or if the entry cannot be removed.
 */
- (void)deleteEntryWithNSString:(NSString *)alias;

/*!
 @brief Determines if the keystore <code>Entry</code> for the specified 
 <code>alias</code> is an instance or subclass of the specified 
 <code>entryClass</code>.
 @param alias the alias name
 @param entryClass the entry class
 @return true if the keystore <code>Entry</code> for the specified
           <code>alias</code> is an instance or subclass of the
           specified <code>entryClass</code>, false otherwise
 @throw NullPointerExceptionif
           <code>alias</code> or <code>entryClass</code>
           is <code>null</code>
 @throw KeyStoreExceptionif the keystore has not been
           initialized (loaded)
 @since 1.5
 */
- (jboolean)entryInstanceOfWithNSString:(NSString *)alias
                           withIOSClass:(IOSClass *)entryClass;

/*!
 @brief Returns the certificate associated with the given alias.
 <p> If the given alias name identifies an entry
  created by a call to <code>setCertificateEntry</code>,
  or created by a call to <code>setEntry</code> with a 
 <code>TrustedCertificateEntry</code>,
  then the trusted certificate contained in that entry is returned. 
 <p> If the given alias name identifies an entry
  created by a call to <code>setKeyEntry</code>,
  or created by a call to <code>setEntry</code> with a 
 <code>PrivateKeyEntry</code>,
  then the first element of the certificate chain in that entry
  is returned.
 @param alias the alias name
 @return the certificate, or null if the given alias does not exist or
  does not contain a certificate.
 @throw KeyStoreExceptionif the keystore has not been initialized
  (loaded).
 */
- (JavaSecurityCertCertificate *)getCertificateWithNSString:(NSString *)alias;

/*!
 @brief Returns the (alias) name of the first keystore entry whose certificate
  matches the given certificate.
 <p> This method attempts to match the given certificate with each
  keystore entry. If the entry being considered was
  created by a call to <code>setCertificateEntry</code>,
  or created by a call to <code>setEntry</code> with a 
 <code>TrustedCertificateEntry</code>,
  then the given certificate is compared to that entry's certificate. 
 <p> If the entry being considered was
  created by a call to <code>setKeyEntry</code>,
  or created by a call to <code>setEntry</code> with a 
 <code>PrivateKeyEntry</code>,
  then the given certificate is compared to the first
  element of that entry's certificate chain.
 @param cert the certificate to match with.
 @return the alias name of the first entry with a matching certificate,
  or null if no such entry exists in this keystore.
 @throw KeyStoreExceptionif the keystore has not been initialized
  (loaded).
 */
- (NSString *)getCertificateAliasWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)cert;

/*!
 @brief Returns the certificate chain associated with the given alias.
 The certificate chain must have been associated with the alias
  by a call to <code>setKeyEntry</code>,
  or by a call to <code>setEntry</code> with a 
 <code>PrivateKeyEntry</code>.
 @param alias the alias name
 @return the certificate chain (ordered with the user's certificate first
  followed by zero or more certificate authorities), or null if the given alias
  does not exist or does not contain a certificate chain
 @throw KeyStoreExceptionif the keystore has not been initialized
  (loaded).
 */
- (IOSObjectArray *)getCertificateChainWithNSString:(NSString *)alias;

/*!
 @brief Returns the creation date of the entry identified by the given alias.
 @param alias the alias name
 @return the creation date of this entry, or null if the given alias does
  not exist
 @throw KeyStoreExceptionif the keystore has not been initialized
  (loaded).
 */
- (JavaUtilDate *)getCreationDateWithNSString:(NSString *)alias;

/*!
 @brief Returns the default keystore type as specified in the Java security
  properties file, or the string 
 &quot;jks&quot; (acronym for &quot;Java keystore&quot;)
  if no such property exists.
 The Java security properties file is located in the file named 
 &lt;JAVA_HOME&gt;/lib/security/java.security.
  &lt;JAVA_HOME&gt; refers to the value of the java.home system property,
  and specifies the directory where the JRE is installed. 
 <p>The default keystore type can be used by applications that do not
  want to use a hard-coded keystore type when calling one of the 
 <code>getInstance</code> methods, and want to provide a default keystore
  type in case a user does not specify its own. 
 <p>The default keystore type can be changed by setting the value of the
  "keystore.type" security property (in the Java security properties
  file) to the desired keystore type.
 @return the default keystore type as specified in the
  Java security properties file, or the string &quot;jks&quot;
  if no such property exists.
 */
+ (NSString *)getDefaultType;

/*!
 @brief Gets a keystore <code>Entry</code> for the specified alias
  with the specified protection parameter.
 @param alias get the keystore  <code> Entry </code>  for this alias
 @param protParam the  <code> ProtectionParameter </code>
            used to protect the  <code> Entry </code> ,
            which may be  <code> null </code>
 @return the keystore <code>Entry</code> for the specified alias,
           or <code>null</code> if there is no such entry
 @throw NullPointerExceptionif
           <code>alias</code> is <code>null</code>
 @throw NoSuchAlgorithmExceptionif the algorithm for recovering the
           entry cannot be found
 @throw UnrecoverableEntryExceptionif the specified
           <code>protParam</code> were insufficient or invalid
 @throw UnrecoverableKeyExceptionif the entry is a
           <code>PrivateKeyEntry</code> or <code>SecretKeyEntry</code>
           and the specified <code>protParam</code> does not contain
           the information needed to recover the key (e.g. wrong password)
 @throw KeyStoreExceptionif the keystore has not been initialized
           (loaded).
 - seealso: #setEntry(String, KeyStore.Entry, KeyStore.ProtectionParameter)
 @since 1.5
 */
- (id<JavaSecurityKeyStore_Entry>)getEntryWithNSString:(NSString *)alias
          withJavaSecurityKeyStore_ProtectionParameter:(id<JavaSecurityKeyStore_ProtectionParameter>)protParam;

/*!
 @brief Returns a keystore object of the specified type.
 <p> This method traverses the list of registered security Providers,
  starting with the most preferred Provider.
  A new KeyStore object encapsulating the
  KeyStoreSpi implementation from the first
  Provider that supports the specified type is returned. 
 <p> Note that the list of registered providers may be retrieved via the 
 <code>Security.getProviders()</code> method.
 @param type the type of keystore.  See the KeyStore section in the 
  <a href="{@@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/security/StandardNames.html#KeyStore">
   Java Cryptography Architecture Standard Algorithm Name Documentation
  </a>  for information about standard keystore types.
 @return a keystore object of the specified type.
 @throw KeyStoreExceptionif no Provider supports a
           KeyStoreSpi implementation for the
           specified type.
 - seealso: Provider
 */
+ (JavaSecurityKeyStore *)getInstanceWithNSString:(NSString *)type;

/*!
 @brief Returns a keystore object of the specified type.
 <p> A new KeyStore object encapsulating the
  KeyStoreSpi implementation from the specified Provider
  object is returned.  Note that the specified Provider object
  does not have to be registered in the provider list.
 @param type the type of keystore.  See the KeyStore section in the 
  <a href="{@@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/security/StandardNames.html#KeyStore">
   Java Cryptography Architecture Standard Algorithm Name Documentation
  </a>  for information about standard keystore types.
 @param provider the provider.
 @return a keystore object of the specified type.
 @throw KeyStoreExceptionif KeyStoreSpi
           implementation for the specified type is not available
           from the specified Provider object.
 @throw IllegalArgumentExceptionif the specified provider is null.
 - seealso: Provider
 @since 1.4
 */
+ (JavaSecurityKeyStore *)getInstanceWithNSString:(NSString *)type
                         withJavaSecurityProvider:(JavaSecurityProvider *)provider;

/*!
 @brief Returns a keystore object of the specified type.
 <p> A new KeyStore object encapsulating the
  KeyStoreSpi implementation from the specified provider
  is returned.  The specified provider must be registered
  in the security provider list. 
 <p> Note that the list of registered providers may be retrieved via the 
 <code>Security.getProviders()</code> method.
 @param type the type of keystore.  See the KeyStore section in the 
  <a href="{@@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/security/StandardNames.html#KeyStore">
   Java Cryptography Architecture Standard Algorithm Name Documentation
  </a>  for information about standard keystore types.
 @param provider the name of the provider.
 @return a keystore object of the specified type.
 @throw KeyStoreExceptionif a KeyStoreSpi
           implementation for the specified type is not
           available from the specified provider.
 @throw NoSuchProviderExceptionif the specified provider is not
           registered in the security provider list.
 @throw IllegalArgumentExceptionif the provider name is null
           or empty.
 - seealso: Provider
 */
+ (JavaSecurityKeyStore *)getInstanceWithNSString:(NSString *)type
                                     withNSString:(NSString *)provider;

/*!
 @brief Returns the key associated with the given alias, using the given
  password to recover it.The key must have been associated with
  the alias by a call to <code>setKeyEntry</code>,
  or by a call to <code>setEntry</code> with a 
 <code>PrivateKeyEntry</code> or <code>SecretKeyEntry</code>.
 @param alias the alias name
 @param password the password for recovering the key
 @return the requested key, or null if the given alias does not exist
  or does not identify a key-related entry.
 @throw KeyStoreExceptionif the keystore has not been initialized
  (loaded).
 @throw NoSuchAlgorithmExceptionif the algorithm for recovering the
  key cannot be found
 @throw UnrecoverableKeyExceptionif the key cannot be recovered
  (e.g., the given password is wrong).
 */
- (id<JavaSecurityKey>)getKeyWithNSString:(NSString *)alias
                            withCharArray:(IOSCharArray *)password;

/*!
 @brief Returns the provider of this keystore.
 @return the provider of this keystore.
 */
- (JavaSecurityProvider *)getProvider;

/*!
 @brief Returns the type of this keystore.
 @return the type of this keystore.
 */
- (NSString *)getType;

/*!
 @brief Returns true if the entry identified by the given alias
  was created by a call to <code>setCertificateEntry</code>,
  or created by a call to <code>setEntry</code> with a 
 <code>TrustedCertificateEntry</code>.
 @param alias the alias for the keystore entry to be checked
 @return true if the entry identified by the given alias contains a
  trusted certificate, false otherwise.
 @throw KeyStoreExceptionif the keystore has not been initialized
  (loaded).
 */
- (jboolean)isCertificateEntryWithNSString:(NSString *)alias;

/*!
 @brief Returns true if the entry identified by the given alias
  was created by a call to <code>setKeyEntry</code>,
  or created by a call to <code>setEntry</code> with a 
 <code>PrivateKeyEntry</code> or a <code>SecretKeyEntry</code>.
 @param alias the alias for the keystore entry to be checked
 @return true if the entry identified by the given alias is a
  key-related entry, false otherwise.
 @throw KeyStoreExceptionif the keystore has not been initialized
  (loaded).
 */
- (jboolean)isKeyEntryWithNSString:(NSString *)alias;

/*!
 @brief Loads this KeyStore from the given input stream.
 <p>A password may be given to unlock the keystore
  (e.g. the keystore resides on a hardware token device),
  or to check the integrity of the keystore data.
  If a password is not given for integrity checking,
  then integrity checking is not performed. 
 <p>In order to create an empty keystore, or if the keystore cannot
  be initialized from a stream, pass <code>null</code>
  as the <code>stream</code> argument. 
 <p> Note that if this keystore has already been loaded, it is
  reinitialized and loaded again from the given input stream.
 @param stream the input stream from which the keystore is loaded,  or 
  <code> null </code>
 @param password the password used to check the integrity of  the keystore, the password used to unlock the keystore,
   or  <code>
  null </code>
 @throw IOExceptionif there is an I/O or format problem with the
  keystore data, if a password is required but not given,
  or if the given password was incorrect. If the error is due to a
  wrong password, the <code>cause</code> of the 
 <code>IOException</code> should be an 
 <code>UnrecoverableKeyException</code>
 @throw NoSuchAlgorithmExceptionif the algorithm used to check
  the integrity of the keystore cannot be found
 @throw CertificateExceptionif any of the certificates in the
  keystore could not be loaded
 */
- (void)load__WithJavaIoInputStream:(JavaIoInputStream *)stream
                      withCharArray:(IOSCharArray *)password;

/*!
 @brief Loads this keystore using the given <code>LoadStoreParameter</code>.
 <p> Note that if this KeyStore has already been loaded, it is
  reinitialized and loaded again from the given parameter.
 @param param the  <code> LoadStoreParameter </code>
            that specifies how to load the keystore,           which may be 
  <code> null </code>
 @throw IllegalArgumentExceptionif the given
           <code>LoadStoreParameter</code>
           input is not recognized
 @throw IOExceptionif there is an I/O or format problem with the
           keystore data. If the error is due to an incorrect         
 <code>ProtectionParameter</code> (e.g. wrong password)
          the <code>cause</code> of the
          <code>IOException</code> should be an
          <code>UnrecoverableKeyException</code>
 @throw NoSuchAlgorithmExceptionif the algorithm used to check
           the integrity of the keystore cannot be found
 @throw CertificateExceptionif any of the certificates in the
           keystore could not be loaded
 @since 1.5
 */
- (void)load__WithJavaSecurityKeyStore_LoadStoreParameter:(id<JavaSecurityKeyStore_LoadStoreParameter>)param;

/*!
 @brief Assigns the given trusted certificate to the given alias.
 <p> If the given alias identifies an existing entry
  created by a call to <code>setCertificateEntry</code>,
  or created by a call to <code>setEntry</code> with a 
 <code>TrustedCertificateEntry</code>,
  the trusted certificate in the existing entry
  is overridden by the given certificate.
 @param alias the alias name
 @param cert the certificate
 @throw KeyStoreExceptionif the keystore has not been initialized,
  or the given alias already exists and does not identify an
  entry containing a trusted certificate,
  or this operation fails for some other reason.
 */
- (void)setCertificateEntryWithNSString:(NSString *)alias
        withJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)cert;

/*!
 @brief Saves a keystore <code>Entry</code> under the specified alias.
 The protection parameter is used to protect the 
 <code>Entry</code>.
  
 <p> If an entry already exists for the specified alias,
  it is overridden.
 @param alias save the keystore  <code> Entry </code>  under this alias
 @param entry_ the  <code> Entry </code>  to save
 @param protParam the  <code> ProtectionParameter </code>
            used to protect the  <code> Entry </code> ,
            which may be  <code> null </code>
 @throw NullPointerExceptionif
           <code>alias</code> or <code>entry</code>
           is <code>null</code>
 @throw KeyStoreExceptionif the keystore has not been initialized
           (loaded), or if this operation fails for some other reason
 - seealso: #getEntry(String, KeyStore.ProtectionParameter)
 @since 1.5
 */
- (void)setEntryWithNSString:(NSString *)alias
withJavaSecurityKeyStore_Entry:(id<JavaSecurityKeyStore_Entry>)entry_
withJavaSecurityKeyStore_ProtectionParameter:(id<JavaSecurityKeyStore_ProtectionParameter>)protParam;

/*!
 @brief Assigns the given key (that has already been protected) to the given
  alias.
 <p>If the protected key is of type 
 <code>java.security.PrivateKey</code>, it must be accompanied by a
  certificate chain certifying the corresponding public key. If the
  underlying keystore implementation is of type <code>jks</code>,
  <code>key</code> must be encoded as an 
 <code>EncryptedPrivateKeyInfo</code> as defined in the PKCS #8 standard. 
 <p>If the given alias already exists, the keystore information
  associated with it is overridden by the given key (and possibly
  certificate chain).
 @param alias the alias name
 @param key the key (in protected format) to be associated with the alias
 @param chain the certificate chain for the corresponding public           key (only useful if the protected key is of type
            
  <code> java.security.PrivateKey </code> ).
 @throw KeyStoreExceptionif the keystore has not been initialized
  (loaded), or if this operation fails for some other reason.
 */
- (void)setKeyEntryWithNSString:(NSString *)alias
                  withByteArray:(IOSByteArray *)key
withJavaSecurityCertCertificateArray:(IOSObjectArray *)chain;

/*!
 @brief Assigns the given key to the given alias, protecting it with the given
  password.
 <p>If the given key is of type <code>java.security.PrivateKey</code>,
  it must be accompanied by a certificate chain certifying the
  corresponding public key. 
 <p>If the given alias already exists, the keystore information
  associated with it is overridden by the given key (and possibly
  certificate chain).
 @param alias the alias name
 @param key the key to be associated with the alias
 @param password the password to protect the key
 @param chain the certificate chain for the corresponding public  key (only required if the given key is of type
    <code>
  java.security.PrivateKey </code> ).
 @throw KeyStoreExceptionif the keystore has not been initialized
  (loaded), the given key cannot be protected, or this operation fails
  for some other reason
 */
- (void)setKeyEntryWithNSString:(NSString *)alias
            withJavaSecurityKey:(id<JavaSecurityKey>)key
                  withCharArray:(IOSCharArray *)password
withJavaSecurityCertCertificateArray:(IOSObjectArray *)chain;

/*!
 @brief Retrieves the number of entries in this keystore.
 @return the number of entries in this keystore
 @throw KeyStoreExceptionif the keystore has not been initialized
  (loaded).
 */
- (jint)size;

/*!
 @brief Stores this keystore using the given <code>LoadStoreParameter</code>.
 @param param the  <code> LoadStoreParameter </code>
            that specifies how to store the keystore,           which may be 
  <code> null </code>
 @throw IllegalArgumentExceptionif the given
           <code>LoadStoreParameter</code>
           input is not recognized
 @throw KeyStoreExceptionif the keystore has not been initialized
           (loaded)
 @throw IOExceptionif there was an I/O problem with data
 @throw NoSuchAlgorithmExceptionif the appropriate data integrity
           algorithm could not be found
 @throw CertificateExceptionif any of the certificates included in
           the keystore data could not be stored
 @since 1.5
 */
- (void)storeWithJavaSecurityKeyStore_LoadStoreParameter:(id<JavaSecurityKeyStore_LoadStoreParameter>)param;

/*!
 @brief Stores this keystore to the given output stream, and protects its
  integrity with the given password.
 @param stream the output stream to which this keystore is written.
 @param password the password to generate the keystore integrity check
 @throw KeyStoreExceptionif the keystore has not been initialized
  (loaded).
 @throw IOExceptionif there was an I/O problem with data
 @throw NoSuchAlgorithmExceptionif the appropriate data integrity
  algorithm could not be found
 @throw CertificateExceptionif any of the certificates included in
  the keystore data could not be stored
 */
- (void)storeWithJavaIoOutputStream:(JavaIoOutputStream *)stream
                      withCharArray:(IOSCharArray *)password;

#pragma mark Protected

/*!
 @brief Creates a KeyStore object of the given type, and encapsulates the given
  provider implementation (SPI object) in it.
 @param keyStoreSpi the provider implementation.
 @param provider the provider.
 @param type the keystore type.
 */
- (instancetype __nonnull)initWithJavaSecurityKeyStoreSpi:(JavaSecurityKeyStoreSpi *)keyStoreSpi
                                 withJavaSecurityProvider:(JavaSecurityProvider *)provider
                                             withNSString:(NSString *)type;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityKeyStore)

FOUNDATION_EXPORT void JavaSecurityKeyStore_initWithJavaSecurityKeyStoreSpi_withJavaSecurityProvider_withNSString_(JavaSecurityKeyStore *self, JavaSecurityKeyStoreSpi *keyStoreSpi, JavaSecurityProvider *provider, NSString *type);

FOUNDATION_EXPORT JavaSecurityKeyStore *new_JavaSecurityKeyStore_initWithJavaSecurityKeyStoreSpi_withJavaSecurityProvider_withNSString_(JavaSecurityKeyStoreSpi *keyStoreSpi, JavaSecurityProvider *provider, NSString *type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityKeyStore *create_JavaSecurityKeyStore_initWithJavaSecurityKeyStoreSpi_withJavaSecurityProvider_withNSString_(JavaSecurityKeyStoreSpi *keyStoreSpi, JavaSecurityProvider *provider, NSString *type);

FOUNDATION_EXPORT JavaSecurityKeyStore *JavaSecurityKeyStore_getInstanceWithNSString_(NSString *type);

FOUNDATION_EXPORT JavaSecurityKeyStore *JavaSecurityKeyStore_getInstanceWithNSString_withNSString_(NSString *type, NSString *provider);

FOUNDATION_EXPORT JavaSecurityKeyStore *JavaSecurityKeyStore_getInstanceWithNSString_withJavaSecurityProvider_(NSString *type, JavaSecurityProvider *provider);

FOUNDATION_EXPORT NSString *JavaSecurityKeyStore_getDefaultType(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityKeyStore)

#endif

#if !defined (JavaSecurityKeyStore_LoadStoreParameter_) && (INCLUDE_ALL_JavaSecurityKeyStore || defined(INCLUDE_JavaSecurityKeyStore_LoadStoreParameter))
#define JavaSecurityKeyStore_LoadStoreParameter_

@protocol JavaSecurityKeyStore_ProtectionParameter;

/*!
 @brief A marker interface for <code>KeyStore</code>
  <code>load</code>
  and 
 <code>store</code>
  parameters.
 @since 1.5
 */
@protocol JavaSecurityKeyStore_LoadStoreParameter < JavaObject >

/*!
 @brief Gets the parameter used to protect keystore data.
 @return the parameter used to protect keystore data, or null
 */
- (id<JavaSecurityKeyStore_ProtectionParameter>)getProtectionParameter;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityKeyStore_LoadStoreParameter)

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityKeyStore_LoadStoreParameter)

#endif

#if !defined (JavaSecurityKeyStore_ProtectionParameter_) && (INCLUDE_ALL_JavaSecurityKeyStore || defined(INCLUDE_JavaSecurityKeyStore_ProtectionParameter))
#define JavaSecurityKeyStore_ProtectionParameter_

/*!
 @brief A marker interface for keystore protection parameters.
 <p> The information stored in a <code>ProtectionParameter</code>
  object protects the contents of a keystore.
  For example, protection parameters may be used to check
  the integrity of keystore data, or to protect the
  confidentiality of sensitive keystore data
  (such as a <code>PrivateKey</code>).
 @since 1.5
 */
@protocol JavaSecurityKeyStore_ProtectionParameter < JavaObject >

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityKeyStore_ProtectionParameter)

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityKeyStore_ProtectionParameter)

#endif

#if !defined (JavaSecurityKeyStore_PasswordProtection_) && (INCLUDE_ALL_JavaSecurityKeyStore || defined(INCLUDE_JavaSecurityKeyStore_PasswordProtection))
#define JavaSecurityKeyStore_PasswordProtection_

#define RESTRICT_JavaxSecurityAuthDestroyable 1
#define INCLUDE_JavaxSecurityAuthDestroyable 1
#include "javax/security/auth/Destroyable.h"

@class IOSCharArray;

/*!
 @brief A password-based implementation of <code>ProtectionParameter</code>.
 @since 1.5
 */
@interface JavaSecurityKeyStore_PasswordProtection : NSObject < JavaSecurityKeyStore_ProtectionParameter, JavaxSecurityAuthDestroyable >

#pragma mark Public

/*!
 @brief Creates a password parameter.
 <p> The specified <code>password</code> is cloned before it is stored
  in the new <code>PasswordProtection</code> object.
 @param password the password, which may be  <code> null </code>
 */
- (instancetype __nonnull)initWithCharArray:(IOSCharArray *)password;

/*!
 @brief Clears the password.
 @throw DestroyFailedExceptionif this method was unable
       to clear the password
 */
- (void)destroy;

/*!
 @brief Gets the password.
 <p>Note that this method returns a reference to the password.
  If a clone of the array is created it is the caller's
  responsibility to zero out the password information
  after it is no longer needed.
 - seealso: #destroy()
 @return the password, which may be <code>null</code>
 @throw IllegalStateExceptionif the password has
               been cleared (destroyed)
 */
- (IOSCharArray *)getPassword;

/*!
 @brief Determines if password has been cleared.
 @return true if the password has been cleared, false otherwise
 */
- (jboolean)isDestroyed;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityKeyStore_PasswordProtection)

FOUNDATION_EXPORT void JavaSecurityKeyStore_PasswordProtection_initWithCharArray_(JavaSecurityKeyStore_PasswordProtection *self, IOSCharArray *password);

FOUNDATION_EXPORT JavaSecurityKeyStore_PasswordProtection *new_JavaSecurityKeyStore_PasswordProtection_initWithCharArray_(IOSCharArray *password) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityKeyStore_PasswordProtection *create_JavaSecurityKeyStore_PasswordProtection_initWithCharArray_(IOSCharArray *password);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityKeyStore_PasswordProtection)

#endif

#if !defined (JavaSecurityKeyStore_CallbackHandlerProtection_) && (INCLUDE_ALL_JavaSecurityKeyStore || defined(INCLUDE_JavaSecurityKeyStore_CallbackHandlerProtection))
#define JavaSecurityKeyStore_CallbackHandlerProtection_

@protocol JavaxSecurityAuthCallbackCallbackHandler;

/*!
 @brief A ProtectionParameter encapsulating a CallbackHandler.
 @since 1.5
 */
@interface JavaSecurityKeyStore_CallbackHandlerProtection : NSObject < JavaSecurityKeyStore_ProtectionParameter >

#pragma mark Public

/*!
 @brief Constructs a new CallbackHandlerProtection from a
  CallbackHandler.
 @param handler the CallbackHandler
 @throw NullPointerExceptionif handler is null
 */
- (instancetype __nonnull)initWithJavaxSecurityAuthCallbackCallbackHandler:(id<JavaxSecurityAuthCallbackCallbackHandler>)handler;

/*!
 @brief Returns the CallbackHandler.
 @return the CallbackHandler.
 */
- (id<JavaxSecurityAuthCallbackCallbackHandler>)getCallbackHandler;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityKeyStore_CallbackHandlerProtection)

FOUNDATION_EXPORT void JavaSecurityKeyStore_CallbackHandlerProtection_initWithJavaxSecurityAuthCallbackCallbackHandler_(JavaSecurityKeyStore_CallbackHandlerProtection *self, id<JavaxSecurityAuthCallbackCallbackHandler> handler);

FOUNDATION_EXPORT JavaSecurityKeyStore_CallbackHandlerProtection *new_JavaSecurityKeyStore_CallbackHandlerProtection_initWithJavaxSecurityAuthCallbackCallbackHandler_(id<JavaxSecurityAuthCallbackCallbackHandler> handler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityKeyStore_CallbackHandlerProtection *create_JavaSecurityKeyStore_CallbackHandlerProtection_initWithJavaxSecurityAuthCallbackCallbackHandler_(id<JavaxSecurityAuthCallbackCallbackHandler> handler);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityKeyStore_CallbackHandlerProtection)

#endif

#if !defined (JavaSecurityKeyStore_Entry_) && (INCLUDE_ALL_JavaSecurityKeyStore || defined(INCLUDE_JavaSecurityKeyStore_Entry))
#define JavaSecurityKeyStore_Entry_

/*!
 @brief A marker interface for <code>KeyStore</code> entry types.
 @since 1.5
 */
@protocol JavaSecurityKeyStore_Entry < JavaObject >

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityKeyStore_Entry)

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityKeyStore_Entry)

#endif

#if !defined (JavaSecurityKeyStore_PrivateKeyEntry_) && (INCLUDE_ALL_JavaSecurityKeyStore || defined(INCLUDE_JavaSecurityKeyStore_PrivateKeyEntry))
#define JavaSecurityKeyStore_PrivateKeyEntry_

@class IOSObjectArray;
@class JavaSecurityCertCertificate;
@protocol JavaSecurityPrivateKey;

/*!
 @brief A <code>KeyStore</code> entry that holds a <code>PrivateKey</code>
  and corresponding certificate chain.
 @since 1.5
 */
@interface JavaSecurityKeyStore_PrivateKeyEntry : NSObject < JavaSecurityKeyStore_Entry >

#pragma mark Public

/*!
 @brief Constructs a <code>PrivateKeyEntry</code> with a 
 <code>PrivateKey</code> and corresponding certificate chain.
 <p> The specified <code>chain</code> is cloned before it is stored
  in the new <code>PrivateKeyEntry</code> object.
 @param privateKey the  <code> PrivateKey </code>
 @param chain an array of  <code> Certificate </code>
  s       representing the certificate chain.       The chain must be ordered and contain a
         <code> Certificate
  </code>  at index 0       corresponding to the private key.
 @throw NullPointerExceptionif
       <code>privateKey</code> or <code>chain</code>
       is <code>null</code>
 @throw IllegalArgumentExceptionif the specified chain has a
       length of 0, if the specified chain does not contain      
 <code>Certificate</code>s of the same type,
       or if the <code>PrivateKey</code> algorithm
       does not match the algorithm of the <code>PublicKey</code>
       in the end entity <code>Certificate</code> (at index 0)
 */
- (instancetype __nonnull)initWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)privateKey
                    withJavaSecurityCertCertificateArray:(IOSObjectArray *)chain;

/*!
 @brief Gets the end entity <code>Certificate</code>
  from the certificate chain in this entry.
 @return the end entity <code>Certificate</code> (at index 0)
       from the certificate chain in this entry.
       If the certificate is of type X.509,
       the runtime type of the returned certificate is      
 <code>X509Certificate</code>.
 */
- (JavaSecurityCertCertificate *)getCertificate;

/*!
 @brief Gets the <code>Certificate</code> chain from this entry.
 <p> The stored chain is cloned before being returned.
 @return an array of <code>Certificate</code>s corresponding
       to the certificate chain for the public key.
       If the certificates are of type X.509,
       the runtime type of the returned array is      
 <code>X509Certificate[]</code>.
 */
- (IOSObjectArray *)getCertificateChain;

/*!
 @brief Gets the <code>PrivateKey</code> from this entry.
 @return the <code>PrivateKey</code> from this entry
 */
- (id<JavaSecurityPrivateKey>)getPrivateKey;

/*!
 @brief Returns a string representation of this PrivateKeyEntry.
 @return a string representation of this PrivateKeyEntry.
 */
- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityKeyStore_PrivateKeyEntry)

FOUNDATION_EXPORT void JavaSecurityKeyStore_PrivateKeyEntry_initWithJavaSecurityPrivateKey_withJavaSecurityCertCertificateArray_(JavaSecurityKeyStore_PrivateKeyEntry *self, id<JavaSecurityPrivateKey> privateKey, IOSObjectArray *chain);

FOUNDATION_EXPORT JavaSecurityKeyStore_PrivateKeyEntry *new_JavaSecurityKeyStore_PrivateKeyEntry_initWithJavaSecurityPrivateKey_withJavaSecurityCertCertificateArray_(id<JavaSecurityPrivateKey> privateKey, IOSObjectArray *chain) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityKeyStore_PrivateKeyEntry *create_JavaSecurityKeyStore_PrivateKeyEntry_initWithJavaSecurityPrivateKey_withJavaSecurityCertCertificateArray_(id<JavaSecurityPrivateKey> privateKey, IOSObjectArray *chain);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityKeyStore_PrivateKeyEntry)

#endif

#if !defined (JavaSecurityKeyStore_SecretKeyEntry_) && (INCLUDE_ALL_JavaSecurityKeyStore || defined(INCLUDE_JavaSecurityKeyStore_SecretKeyEntry))
#define JavaSecurityKeyStore_SecretKeyEntry_

@protocol JavaxCryptoSecretKey;

/*!
 @brief A <code>KeyStore</code> entry that holds a <code>SecretKey</code>.
 @since 1.5
 */
@interface JavaSecurityKeyStore_SecretKeyEntry : NSObject < JavaSecurityKeyStore_Entry >

#pragma mark Public

/*!
 @brief Constructs a <code>SecretKeyEntry</code> with a 
 <code>SecretKey</code>.
 @param secretKey the  <code> SecretKey </code>
 @throw NullPointerExceptionif <code>secretKey</code>
       is <code>null</code>
 */
- (instancetype __nonnull)initWithJavaxCryptoSecretKey:(id<JavaxCryptoSecretKey>)secretKey;

/*!
 @brief Gets the <code>SecretKey</code> from this entry.
 @return the <code>SecretKey</code> from this entry
 */
- (id<JavaxCryptoSecretKey>)getSecretKey;

/*!
 @brief Returns a string representation of this SecretKeyEntry.
 @return a string representation of this SecretKeyEntry.
 */
- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityKeyStore_SecretKeyEntry)

FOUNDATION_EXPORT void JavaSecurityKeyStore_SecretKeyEntry_initWithJavaxCryptoSecretKey_(JavaSecurityKeyStore_SecretKeyEntry *self, id<JavaxCryptoSecretKey> secretKey);

FOUNDATION_EXPORT JavaSecurityKeyStore_SecretKeyEntry *new_JavaSecurityKeyStore_SecretKeyEntry_initWithJavaxCryptoSecretKey_(id<JavaxCryptoSecretKey> secretKey) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityKeyStore_SecretKeyEntry *create_JavaSecurityKeyStore_SecretKeyEntry_initWithJavaxCryptoSecretKey_(id<JavaxCryptoSecretKey> secretKey);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityKeyStore_SecretKeyEntry)

#endif

#if !defined (JavaSecurityKeyStore_TrustedCertificateEntry_) && (INCLUDE_ALL_JavaSecurityKeyStore || defined(INCLUDE_JavaSecurityKeyStore_TrustedCertificateEntry))
#define JavaSecurityKeyStore_TrustedCertificateEntry_

@class JavaSecurityCertCertificate;

/*!
 @brief A <code>KeyStore</code> entry that holds a trusted 
 <code>Certificate</code>.
 @since 1.5
 */
@interface JavaSecurityKeyStore_TrustedCertificateEntry : NSObject < JavaSecurityKeyStore_Entry >

#pragma mark Public

/*!
 @brief Constructs a <code>TrustedCertificateEntry</code> with a
  trusted <code>Certificate</code>.
 @param trustedCert the trusted  <code> Certificate </code>
 @throw NullPointerExceptionif
       <code>trustedCert</code> is <code>null</code>
 */
- (instancetype __nonnull)initWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)trustedCert;

/*!
 @brief Gets the trusted <code>Certficate</code> from this entry.
 @return the trusted <code>Certificate</code> from this entry
 */
- (JavaSecurityCertCertificate *)getTrustedCertificate;

/*!
 @brief Returns a string representation of this TrustedCertificateEntry.
 @return a string representation of this TrustedCertificateEntry.
 */
- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityKeyStore_TrustedCertificateEntry)

FOUNDATION_EXPORT void JavaSecurityKeyStore_TrustedCertificateEntry_initWithJavaSecurityCertCertificate_(JavaSecurityKeyStore_TrustedCertificateEntry *self, JavaSecurityCertCertificate *trustedCert);

FOUNDATION_EXPORT JavaSecurityKeyStore_TrustedCertificateEntry *new_JavaSecurityKeyStore_TrustedCertificateEntry_initWithJavaSecurityCertCertificate_(JavaSecurityCertCertificate *trustedCert) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityKeyStore_TrustedCertificateEntry *create_JavaSecurityKeyStore_TrustedCertificateEntry_initWithJavaSecurityCertCertificate_(JavaSecurityCertCertificate *trustedCert);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityKeyStore_TrustedCertificateEntry)

#endif

#if !defined (JavaSecurityKeyStore_Builder_) && (INCLUDE_ALL_JavaSecurityKeyStore || defined(INCLUDE_JavaSecurityKeyStore_Builder))
#define JavaSecurityKeyStore_Builder_

@class JavaIoFile;
@class JavaSecurityKeyStore;
@class JavaSecurityProvider;
@protocol JavaSecurityKeyStore_ProtectionParameter;

/*!
 @brief A description of a to-be-instantiated KeyStore object.
 <p>An instance of this class encapsulates the information needed to
  instantiate and initialize a KeyStore object. That process is
  triggered when the getKeyStore method is called. 
 <p>This makes it possible to decouple configuration from KeyStore
  object creation and e.g. delay a password prompt until it is
  needed.
 - seealso: KeyStore
 - seealso: javax.net.ssl.KeyStoreBuilderParameters
 @since 1.5
 */
@interface JavaSecurityKeyStore_Builder : NSObject
@property (readonly, class) jint MAX_CALLBACK_TRIES NS_SWIFT_NAME(MAX_CALLBACK_TRIES);

+ (jint)MAX_CALLBACK_TRIES;

#pragma mark Public

/*!
 @brief Returns the KeyStore described by this object.
 @throw KeyStoreExceptionif an error occured during the
    operation, for example if the KeyStore could not be
    instantiated or loaded
 */
- (JavaSecurityKeyStore *)getKeyStore;

/*!
 @brief Returns the ProtectionParameters that should be used to obtain the 
 <code>Entry</code> with the given alias.
 The <code>getKeyStore</code> method must be invoked before this
  method may be called.
 @return the ProtectionParameters that should be used to obtain
    the <code>Entry</code> with the given alias.
 @param alias the alias of the KeyStore entry
 @throw NullPointerExceptionif alias is null
 @throw KeyStoreExceptionif an error occured during the
    operation
 @throw IllegalStateExceptionif the getKeyStore method has
    not been invoked prior to calling this method
 */
- (id<JavaSecurityKeyStore_ProtectionParameter>)getProtectionParameterWithNSString:(NSString *)alias;

/*!
 @brief Returns a new Builder that encapsulates the given KeyStore.
 The getKeyStore method of the returned object
  will return <code>keyStore</code>, the getProtectionParameter()
  method will
  return <code>protectionParameters</code>.
  
 <p> This is useful if an existing KeyStore object needs to be
  used with Builder-based APIs.
 @return a new Builder object
 @param keyStore the KeyStore to be encapsulated
 @param protectionParameter the ProtectionParameter used to    protect the KeyStore entries
 @throw NullPointerExceptionif keyStore or
    protectionParameters is null
 @throw IllegalArgumentExceptionif the keyStore has not been
    initialized
 */
+ (JavaSecurityKeyStore_Builder *)newInstanceWithJavaSecurityKeyStore:(JavaSecurityKeyStore *)keyStore
                         withJavaSecurityKeyStore_ProtectionParameter:(id<JavaSecurityKeyStore_ProtectionParameter>)protectionParameter OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns a new Builder object.
 <p>The first call to the <code>getKeyStore</code> method on the returned
  builder will create a KeyStore of type <code>type</code> and call
  its <code>load()</code> method.
  The <code>inputStream</code> argument is constructed from 
 <code>file</code>.
  If <code>protection</code> is a 
 <code>PasswordProtection</code>, the password is obtained by
  calling the <code>getPassword</code> method.
  Otherwise, if <code>protection</code> is a 
 <code>CallbackHandlerProtection</code>, the password is obtained
  by invoking the CallbackHandler. 
 <p>Subsequent calls to <code>getKeyStore</code> return the same object
  as the initial call. If the initial call to failed with a
  KeyStoreException, subsequent calls also throw a
  KeyStoreException. 
 <p>The KeyStore is instantiated from <code>provider</code> if
  non-null. Otherwise, all installed providers are searched. 
 <p>Calls to <code>getProtectionParameter()</code>
  will return a <code>PasswordProtection</code>
  object encapsulating the password that was used to invoke the 
 <code>load</code> method. 
 <p><em>Note</em> that the <code>getKeyStore</code> method is executed
  within the <code>AccessControlContext</code> of the code invoking this
  method.
 @return a new Builder object
 @param type the type of KeyStore to be constructed
 @param provider the provider from which the KeyStore is to    be instantiated (or null)
 @param file the File that contains the KeyStore data
 @param protection the ProtectionParameter securing the KeyStore data
 @throw NullPointerExceptionif type, file or protection is null
 @throw IllegalArgumentExceptionif protection is not an instance
    of either PasswordProtection or CallbackHandlerProtection; or
    if file does not exist or does not refer to a normal file
 */
+ (JavaSecurityKeyStore_Builder *)newInstanceWithNSString:(NSString *)type
                                 withJavaSecurityProvider:(JavaSecurityProvider *)provider
                                           withJavaIoFile:(JavaIoFile *)file
             withJavaSecurityKeyStore_ProtectionParameter:(id<JavaSecurityKeyStore_ProtectionParameter>)protection OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns a new Builder object.
 <p>Each call to the <code>getKeyStore</code> method on the returned
  builder will return a new KeyStore object of type <code>type</code>.
  Its <code>load()</code>
  method is invoked using a 
 <code>LoadStoreParameter</code> that encapsulates 
 <code>protection</code>.
  
 <p>The KeyStore is instantiated from <code>provider</code> if
  non-null. Otherwise, all installed providers are searched. 
 <p>Calls to <code>getProtectionParameter()</code>
  will return <code>protection</code>.
  
 <p><em>Note</em> that the <code>getKeyStore</code> method is executed
  within the <code>AccessControlContext</code> of the code invoking this
  method.
 @return a new Builder object
 @param type the type of KeyStore to be constructed
 @param provider the provider from which the KeyStore is to    be instantiated (or null)
 @param protection the ProtectionParameter securing the Keystore
 @throw NullPointerExceptionif type or protection is null
 */
+ (JavaSecurityKeyStore_Builder *)newInstanceWithNSString:(NSString *)type
                                 withJavaSecurityProvider:(JavaSecurityProvider *)provider
             withJavaSecurityKeyStore_ProtectionParameter:(id<JavaSecurityKeyStore_ProtectionParameter>)protection OBJC_METHOD_FAMILY_NONE;

#pragma mark Protected

/*!
 @brief Construct a new Builder.
 */
- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityKeyStore_Builder)

inline jint JavaSecurityKeyStore_Builder_get_MAX_CALLBACK_TRIES(void);
#define JavaSecurityKeyStore_Builder_MAX_CALLBACK_TRIES 3
J2OBJC_STATIC_FIELD_CONSTANT(JavaSecurityKeyStore_Builder, MAX_CALLBACK_TRIES, jint)

FOUNDATION_EXPORT void JavaSecurityKeyStore_Builder_init(JavaSecurityKeyStore_Builder *self);

FOUNDATION_EXPORT JavaSecurityKeyStore_Builder *JavaSecurityKeyStore_Builder_newInstanceWithJavaSecurityKeyStore_withJavaSecurityKeyStore_ProtectionParameter_(JavaSecurityKeyStore *keyStore, id<JavaSecurityKeyStore_ProtectionParameter> protectionParameter);

FOUNDATION_EXPORT JavaSecurityKeyStore_Builder *JavaSecurityKeyStore_Builder_newInstanceWithNSString_withJavaSecurityProvider_withJavaIoFile_withJavaSecurityKeyStore_ProtectionParameter_(NSString *type, JavaSecurityProvider *provider, JavaIoFile *file, id<JavaSecurityKeyStore_ProtectionParameter> protection);

FOUNDATION_EXPORT JavaSecurityKeyStore_Builder *JavaSecurityKeyStore_Builder_newInstanceWithNSString_withJavaSecurityProvider_withJavaSecurityKeyStore_ProtectionParameter_(NSString *type, JavaSecurityProvider *provider, id<JavaSecurityKeyStore_ProtectionParameter> protection);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityKeyStore_Builder)

#endif

#if !defined (JavaSecurityKeyStore_SimpleLoadStoreParameter_) && (INCLUDE_ALL_JavaSecurityKeyStore || defined(INCLUDE_JavaSecurityKeyStore_SimpleLoadStoreParameter))
#define JavaSecurityKeyStore_SimpleLoadStoreParameter_

@protocol JavaSecurityKeyStore_ProtectionParameter;

@interface JavaSecurityKeyStore_SimpleLoadStoreParameter : NSObject < JavaSecurityKeyStore_LoadStoreParameter >

#pragma mark Public

- (id<JavaSecurityKeyStore_ProtectionParameter>)getProtectionParameter;

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaSecurityKeyStore_ProtectionParameter:(id<JavaSecurityKeyStore_ProtectionParameter>)protection;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityKeyStore_SimpleLoadStoreParameter)

FOUNDATION_EXPORT void JavaSecurityKeyStore_SimpleLoadStoreParameter_initWithJavaSecurityKeyStore_ProtectionParameter_(JavaSecurityKeyStore_SimpleLoadStoreParameter *self, id<JavaSecurityKeyStore_ProtectionParameter> protection);

FOUNDATION_EXPORT JavaSecurityKeyStore_SimpleLoadStoreParameter *new_JavaSecurityKeyStore_SimpleLoadStoreParameter_initWithJavaSecurityKeyStore_ProtectionParameter_(id<JavaSecurityKeyStore_ProtectionParameter> protection) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityKeyStore_SimpleLoadStoreParameter *create_JavaSecurityKeyStore_SimpleLoadStoreParameter_initWithJavaSecurityKeyStore_ProtectionParameter_(id<JavaSecurityKeyStore_ProtectionParameter> protection);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityKeyStore_SimpleLoadStoreParameter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSecurityKeyStore")
