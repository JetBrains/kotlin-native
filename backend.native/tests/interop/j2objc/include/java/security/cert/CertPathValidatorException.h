//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/security/cert/CertPathValidatorException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecurityCertCertPathValidatorException")
#ifdef RESTRICT_JavaSecurityCertCertPathValidatorException
#define INCLUDE_ALL_JavaSecurityCertCertPathValidatorException 0
#else
#define INCLUDE_ALL_JavaSecurityCertCertPathValidatorException 1
#endif
#undef RESTRICT_JavaSecurityCertCertPathValidatorException
#ifdef INCLUDE_JavaSecurityCertCertPathValidatorException_BasicReason
#define INCLUDE_JavaSecurityCertCertPathValidatorException_Reason 1
#endif

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSecurityCertCertPathValidatorException_) && (INCLUDE_ALL_JavaSecurityCertCertPathValidatorException || defined(INCLUDE_JavaSecurityCertCertPathValidatorException))
#define JavaSecurityCertCertPathValidatorException_

#define RESTRICT_JavaSecurityGeneralSecurityException 1
#define INCLUDE_JavaSecurityGeneralSecurityException 1
#include "java/security/GeneralSecurityException.h"

@class JavaLangThrowable;
@class JavaSecurityCertCertPath;
@protocol JavaSecurityCertCertPathValidatorException_Reason;

/*!
 @brief An exception indicating one of a variety of problems encountered when
  validating a certification path.
 <p>
  A <code>CertPathValidatorException</code> provides support for wrapping
  exceptions. The <code>getCause</code> method returns the throwable,
  if any, that caused this exception to be thrown. 
 <p>
  A <code>CertPathValidatorException</code> may also include the
  certification path that was being validated when the exception was thrown,
  the index of the certificate in the certification path that caused the
  exception to be thrown, and the reason that caused the failure. Use the 
 <code>getCertPath</code>, <code>getIndex</code>, and 
 <code>getReason</code> methods to retrieve this information. 
 <p>
  <b>Concurrent Access</b>
  <p>
  Unless otherwise specified, the methods defined in this class are not
  thread-safe. Multiple threads that need to access a single
  object concurrently should synchronize amongst themselves and
  provide the necessary locking. Multiple threads each manipulating
  separate objects need not synchronize.
 - seealso: CertPathValidator
 @since 1.4
 @author Yassir Elley
 */
@interface JavaSecurityCertCertPathValidatorException : JavaSecurityGeneralSecurityException

#pragma mark Public

/*!
 @brief Creates a <code>CertPathValidatorException</code> with
  no detail message.
 */
- (instancetype __nonnull)init;

/*!
 @brief Creates a <code>CertPathValidatorException</code> with the given
  detail message.A detail message is a <code>String</code> that
  describes this particular exception.
 @param msg the detail message
 */
- (instancetype __nonnull)initWithNSString:(NSString *)msg;

/*!
 @brief Creates a <code>CertPathValidatorException</code> with the specified
  detail message and cause.
 @param msg the detail message
 @param cause the cause (which is saved for later retrieval by the  
 <code>getCause()</code>  method). (A <code>null</code>  value is  permitted, and indicates that the cause is nonexistent or unknown.)
 */
- (instancetype __nonnull)initWithNSString:(NSString *)msg
                     withJavaLangThrowable:(JavaLangThrowable *)cause;

/*!
 @brief Creates a <code>CertPathValidatorException</code> with the specified
  detail message, cause, certification path, and index.
 @param msg the detail message (or <code>null</code>  if none)
 @param cause the cause (or <code>null</code>  if none)
 @param certPath the certification path that was in the process of  being validated when the error was encountered
 @param index the index of the certificate in the certification path  that caused the error (or -1 if not applicable). Note that
   the list of certificates in a 
 <code>CertPath</code>  is zero based.
 @throw IndexOutOfBoundsExceptionif the index is out of range 
 <code>(index < -1 || (certPath != null && index >=
  certPath.getCertificates().size())</code>
 @throw IllegalArgumentExceptionif <code>certPath</code> is 
 <code>null</code> and <code>index</code> is not -1
 */
- (instancetype __nonnull)initWithNSString:(NSString *)msg
                     withJavaLangThrowable:(JavaLangThrowable *)cause
              withJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                   withInt:(jint)index;

/*!
 @brief Creates a <code>CertPathValidatorException</code> with the specified
  detail message, cause, certification path, index, and reason.
 @param msg the detail message (or <code>null</code>  if none)
 @param cause the cause (or <code>null</code>  if none)
 @param certPath the certification path that was in the process of  being validated when the error was encountered
 @param index the index of the certificate in the certification path  that caused the error (or -1 if not applicable). Note that
   the list of certificates in a 
 <code>CertPath</code>  is zero based.
 @param reason the reason the validation failed
 @throw IndexOutOfBoundsExceptionif the index is out of range 
 <code>(index < -1 || (certPath != null && index >=
  certPath.getCertificates().size())</code>
 @throw IllegalArgumentExceptionif <code>certPath</code> is 
 <code>null</code> and <code>index</code> is not -1
 @throw NullPointerExceptionif <code>reason</code> is <code>null</code>
 @since 1.7
 */
- (instancetype __nonnull)initWithNSString:(NSString *)msg
                     withJavaLangThrowable:(JavaLangThrowable *)cause
              withJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                   withInt:(jint)index
withJavaSecurityCertCertPathValidatorException_Reason:(id<JavaSecurityCertCertPathValidatorException_Reason>)reason;

/*!
 @brief Creates a <code>CertPathValidatorException</code> that wraps the
  specified throwable.This allows any exception to be converted into a 
 <code>CertPathValidatorException</code>, while retaining information
  about the wrapped exception, which may be useful for debugging.
 The
  detail message is set to (<code>cause==null ? null : cause.toString()</code>)
  (which typically contains the class and detail message of
  cause).
 @param cause the cause (which is saved for later retrieval by the  
 <code>getCause()</code>  method). (A <code>null</code>  value is  permitted, and indicates that the cause is nonexistent or unknown.)
 */
- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)cause;

/*!
 @brief Returns the certification path that was being validated when
  the exception was thrown.
 @return the <code>CertPath</code> that was being validated when
  the exception was thrown (or <code>null</code> if not specified)
 */
- (JavaSecurityCertCertPath *)getCertPath;

/*!
 @brief Returns the index of the certificate in the certification path
  that caused the exception to be thrown.Note that the list of
  certificates in a <code>CertPath</code> is zero based.
 If no
  index has been set, -1 is returned.
 @return the index that has been set, or -1 if none has been set
 */
- (jint)getIndex;

/*!
 @brief Returns the reason that the validation failed.The reason is
  associated with the index of the certificate returned by 
 <code>getIndex</code>.
 @return the reason that the validation failed, or
     <code>BasicReason.UNSPECIFIED</code> if a reason has not been
     specified
 @since 1.7
 */
- (id<JavaSecurityCertCertPathValidatorException_Reason>)getReason;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityCertCertPathValidatorException)

FOUNDATION_EXPORT void JavaSecurityCertCertPathValidatorException_init(JavaSecurityCertCertPathValidatorException *self);

FOUNDATION_EXPORT JavaSecurityCertCertPathValidatorException *new_JavaSecurityCertCertPathValidatorException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityCertCertPathValidatorException *create_JavaSecurityCertCertPathValidatorException_init(void);

FOUNDATION_EXPORT void JavaSecurityCertCertPathValidatorException_initWithNSString_(JavaSecurityCertCertPathValidatorException *self, NSString *msg);

FOUNDATION_EXPORT JavaSecurityCertCertPathValidatorException *new_JavaSecurityCertCertPathValidatorException_initWithNSString_(NSString *msg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityCertCertPathValidatorException *create_JavaSecurityCertCertPathValidatorException_initWithNSString_(NSString *msg);

FOUNDATION_EXPORT void JavaSecurityCertCertPathValidatorException_initWithJavaLangThrowable_(JavaSecurityCertCertPathValidatorException *self, JavaLangThrowable *cause);

FOUNDATION_EXPORT JavaSecurityCertCertPathValidatorException *new_JavaSecurityCertCertPathValidatorException_initWithJavaLangThrowable_(JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityCertCertPathValidatorException *create_JavaSecurityCertCertPathValidatorException_initWithJavaLangThrowable_(JavaLangThrowable *cause);

FOUNDATION_EXPORT void JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_(JavaSecurityCertCertPathValidatorException *self, NSString *msg, JavaLangThrowable *cause);

FOUNDATION_EXPORT JavaSecurityCertCertPathValidatorException *new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_(NSString *msg, JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityCertCertPathValidatorException *create_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_(NSString *msg, JavaLangThrowable *cause);

FOUNDATION_EXPORT void JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(JavaSecurityCertCertPathValidatorException *self, NSString *msg, JavaLangThrowable *cause, JavaSecurityCertCertPath *certPath, jint index);

FOUNDATION_EXPORT JavaSecurityCertCertPathValidatorException *new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(NSString *msg, JavaLangThrowable *cause, JavaSecurityCertCertPath *certPath, jint index) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityCertCertPathValidatorException *create_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(NSString *msg, JavaLangThrowable *cause, JavaSecurityCertCertPath *certPath, jint index);

FOUNDATION_EXPORT void JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_withJavaSecurityCertCertPathValidatorException_Reason_(JavaSecurityCertCertPathValidatorException *self, NSString *msg, JavaLangThrowable *cause, JavaSecurityCertCertPath *certPath, jint index, id<JavaSecurityCertCertPathValidatorException_Reason> reason);

FOUNDATION_EXPORT JavaSecurityCertCertPathValidatorException *new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_withJavaSecurityCertCertPathValidatorException_Reason_(NSString *msg, JavaLangThrowable *cause, JavaSecurityCertCertPath *certPath, jint index, id<JavaSecurityCertCertPathValidatorException_Reason> reason) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityCertCertPathValidatorException *create_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_withJavaSecurityCertCertPathValidatorException_Reason_(NSString *msg, JavaLangThrowable *cause, JavaSecurityCertCertPath *certPath, jint index, id<JavaSecurityCertCertPathValidatorException_Reason> reason);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityCertCertPathValidatorException)

#endif

#if !defined (JavaSecurityCertCertPathValidatorException_Reason_) && (INCLUDE_ALL_JavaSecurityCertCertPathValidatorException || defined(INCLUDE_JavaSecurityCertCertPathValidatorException_Reason))
#define JavaSecurityCertCertPathValidatorException_Reason_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

/*!
 @brief The reason the validation algorithm failed.
 @since 1.7
 */
@protocol JavaSecurityCertCertPathValidatorException_Reason < JavaIoSerializable, JavaObject >

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityCertCertPathValidatorException_Reason)

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityCertCertPathValidatorException_Reason)

#endif

#if !defined (JavaSecurityCertCertPathValidatorException_BasicReason_) && (INCLUDE_ALL_JavaSecurityCertCertPathValidatorException || defined(INCLUDE_JavaSecurityCertCertPathValidatorException_BasicReason))
#define JavaSecurityCertCertPathValidatorException_BasicReason_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, JavaSecurityCertCertPathValidatorException_BasicReason_Enum) {
  JavaSecurityCertCertPathValidatorException_BasicReason_Enum_UNSPECIFIED = 0,
  JavaSecurityCertCertPathValidatorException_BasicReason_Enum_EXPIRED = 1,
  JavaSecurityCertCertPathValidatorException_BasicReason_Enum_NOT_YET_VALID = 2,
  JavaSecurityCertCertPathValidatorException_BasicReason_Enum_REVOKED = 3,
  JavaSecurityCertCertPathValidatorException_BasicReason_Enum_UNDETERMINED_REVOCATION_STATUS = 4,
  JavaSecurityCertCertPathValidatorException_BasicReason_Enum_INVALID_SIGNATURE = 5,
  JavaSecurityCertCertPathValidatorException_BasicReason_Enum_ALGORITHM_CONSTRAINED = 6,
};

/*!
 @brief The BasicReason enumerates the potential reasons that a certification
  path of any type may be invalid.
 @since 1.7
 */
@interface JavaSecurityCertCertPathValidatorException_BasicReason : JavaLangEnum < JavaSecurityCertCertPathValidatorException_Reason >

@property (readonly, class, nonnull) JavaSecurityCertCertPathValidatorException_BasicReason *UNSPECIFIED NS_SWIFT_NAME(UNSPECIFIED);
@property (readonly, class, nonnull) JavaSecurityCertCertPathValidatorException_BasicReason *EXPIRED NS_SWIFT_NAME(EXPIRED);
@property (readonly, class, nonnull) JavaSecurityCertCertPathValidatorException_BasicReason *NOT_YET_VALID NS_SWIFT_NAME(NOT_YET_VALID);
@property (readonly, class, nonnull) JavaSecurityCertCertPathValidatorException_BasicReason *REVOKED NS_SWIFT_NAME(REVOKED);
@property (readonly, class, nonnull) JavaSecurityCertCertPathValidatorException_BasicReason *UNDETERMINED_REVOCATION_STATUS NS_SWIFT_NAME(UNDETERMINED_REVOCATION_STATUS);
@property (readonly, class, nonnull) JavaSecurityCertCertPathValidatorException_BasicReason *INVALID_SIGNATURE NS_SWIFT_NAME(INVALID_SIGNATURE);
@property (readonly, class, nonnull) JavaSecurityCertCertPathValidatorException_BasicReason *ALGORITHM_CONSTRAINED NS_SWIFT_NAME(ALGORITHM_CONSTRAINED);
+ (JavaSecurityCertCertPathValidatorException_BasicReason * __nonnull)UNSPECIFIED;

+ (JavaSecurityCertCertPathValidatorException_BasicReason * __nonnull)EXPIRED;

+ (JavaSecurityCertCertPathValidatorException_BasicReason * __nonnull)NOT_YET_VALID;

+ (JavaSecurityCertCertPathValidatorException_BasicReason * __nonnull)REVOKED;

+ (JavaSecurityCertCertPathValidatorException_BasicReason * __nonnull)UNDETERMINED_REVOCATION_STATUS;

+ (JavaSecurityCertCertPathValidatorException_BasicReason * __nonnull)INVALID_SIGNATURE;

+ (JavaSecurityCertCertPathValidatorException_BasicReason * __nonnull)ALGORITHM_CONSTRAINED;

#pragma mark Public

+ (JavaSecurityCertCertPathValidatorException_BasicReason *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (JavaSecurityCertCertPathValidatorException_BasicReason_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(JavaSecurityCertCertPathValidatorException_BasicReason)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT JavaSecurityCertCertPathValidatorException_BasicReason *JavaSecurityCertCertPathValidatorException_BasicReason_values_[];

/*!
 @brief Unspecified reason.
 */
inline JavaSecurityCertCertPathValidatorException_BasicReason *JavaSecurityCertCertPathValidatorException_BasicReason_get_UNSPECIFIED(void);
J2OBJC_ENUM_CONSTANT(JavaSecurityCertCertPathValidatorException_BasicReason, UNSPECIFIED)

/*!
 @brief The certificate is expired.
 */
inline JavaSecurityCertCertPathValidatorException_BasicReason *JavaSecurityCertCertPathValidatorException_BasicReason_get_EXPIRED(void);
J2OBJC_ENUM_CONSTANT(JavaSecurityCertCertPathValidatorException_BasicReason, EXPIRED)

/*!
 @brief The certificate is not yet valid.
 */
inline JavaSecurityCertCertPathValidatorException_BasicReason *JavaSecurityCertCertPathValidatorException_BasicReason_get_NOT_YET_VALID(void);
J2OBJC_ENUM_CONSTANT(JavaSecurityCertCertPathValidatorException_BasicReason, NOT_YET_VALID)

/*!
 @brief The certificate is revoked.
 */
inline JavaSecurityCertCertPathValidatorException_BasicReason *JavaSecurityCertCertPathValidatorException_BasicReason_get_REVOKED(void);
J2OBJC_ENUM_CONSTANT(JavaSecurityCertCertPathValidatorException_BasicReason, REVOKED)

/*!
 @brief The revocation status of the certificate could not be determined.
 */
inline JavaSecurityCertCertPathValidatorException_BasicReason *JavaSecurityCertCertPathValidatorException_BasicReason_get_UNDETERMINED_REVOCATION_STATUS(void);
J2OBJC_ENUM_CONSTANT(JavaSecurityCertCertPathValidatorException_BasicReason, UNDETERMINED_REVOCATION_STATUS)

/*!
 @brief The signature is invalid.
 */
inline JavaSecurityCertCertPathValidatorException_BasicReason *JavaSecurityCertCertPathValidatorException_BasicReason_get_INVALID_SIGNATURE(void);
J2OBJC_ENUM_CONSTANT(JavaSecurityCertCertPathValidatorException_BasicReason, INVALID_SIGNATURE)

/*!
 @brief The public key or the signature algorithm has been constrained.
 */
inline JavaSecurityCertCertPathValidatorException_BasicReason *JavaSecurityCertCertPathValidatorException_BasicReason_get_ALGORITHM_CONSTRAINED(void);
J2OBJC_ENUM_CONSTANT(JavaSecurityCertCertPathValidatorException_BasicReason, ALGORITHM_CONSTRAINED)

FOUNDATION_EXPORT IOSObjectArray *JavaSecurityCertCertPathValidatorException_BasicReason_values(void);

FOUNDATION_EXPORT JavaSecurityCertCertPathValidatorException_BasicReason *JavaSecurityCertCertPathValidatorException_BasicReason_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT JavaSecurityCertCertPathValidatorException_BasicReason *JavaSecurityCertCertPathValidatorException_BasicReason_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityCertCertPathValidatorException_BasicReason)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSecurityCertCertPathValidatorException")
