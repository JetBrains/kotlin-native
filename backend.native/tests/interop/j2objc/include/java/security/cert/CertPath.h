//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/security/cert/CertPath.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecurityCertCertPath")
#ifdef RESTRICT_JavaSecurityCertCertPath
#define INCLUDE_ALL_JavaSecurityCertCertPath 0
#else
#define INCLUDE_ALL_JavaSecurityCertCertPath 1
#endif
#undef RESTRICT_JavaSecurityCertCertPath

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSecurityCertCertPath_) && (INCLUDE_ALL_JavaSecurityCertCertPath || defined(INCLUDE_JavaSecurityCertCertPath))
#define JavaSecurityCertCertPath_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class IOSByteArray;
@protocol JavaUtilIterator;
@protocol JavaUtilList;

/*!
 @brief An immutable sequence of certificates (a certification path).
 <p>
  This is an abstract class that defines the methods common to all 
 <code>CertPath</code>s. Subclasses can handle different kinds of
  certificates (X.509, PGP, etc.). 
 <p>
  All <code>CertPath</code> objects have a type, a list of 
 <code>Certificate</code>s, and one or more supported encodings. Because the 
 <code>CertPath</code> class is immutable, a <code>CertPath</code> cannot
  change in any externally visible way after being constructed. This
  stipulation applies to all public fields and methods of this class and any
  added or overridden by subclasses. 
 <p>
  The type is a <code>String</code> that identifies the type of 
 <code>Certificate</code>s in the certification path. For each
  certificate <code>cert</code> in a certification path <code>certPath</code>,
  <code>cert.getType().equals(certPath.getType())</code> must be 
 <code>true</code>.
  <p>
  The list of <code>Certificate</code>s is an ordered <code>List</code> of
  zero or more <code>Certificate</code>s. This <code>List</code> and all
  of the <code>Certificate</code>s contained in it must be immutable. 
 <p>
  Each <code>CertPath</code> object must support one or more encodings
  so that the object can be translated into a byte array for storage or
  transmission to other parties. Preferably, these encodings should be
  well-documented standards (such as PKCS#7). One of the encodings supported
  by a <code>CertPath</code> is considered the default encoding. This
  encoding is used if no encoding is explicitly requested (for the 
 <code>getEncoded()</code> method, for instance). 
 <p>
  All <code>CertPath</code> objects are also <code>Serializable</code>.
  <code>CertPath</code> objects are resolved into an alternate 
 <code>CertPathRep</code> object during serialization. This allows
  a <code>CertPath</code> object to be serialized into an equivalent
  representation regardless of its underlying implementation. 
 <p>
  <code>CertPath</code> objects can be created with a 
 <code>CertificateFactory</code> or they can be returned by other classes,
  such as a <code>CertPathBuilder</code>.
  <p>
  By convention, X.509 <code>CertPath</code>s (consisting of 
 <code>X509Certificate</code>s), are ordered starting with the target
  certificate and ending with a certificate issued by the trust anchor. That
  is, the issuer of one certificate is the subject of the following one. The
  certificate representing the <code>TrustAnchor</code> should not be
  included in the certification path. Unvalidated X.509 <code>CertPath</code>s
  may not follow these conventions. PKIX <code>CertPathValidator</code>s will
  detect any departure from these conventions that cause the certification
  path to be invalid and throw a <code>CertPathValidatorException</code>.
  
 <p> Every implementation of the Java platform is required to support the
  following standard <code>CertPath</code> encodings: 
 <ul>
  <li><code>PKCS7</code></li>
  <li><code>PkiPath</code></li>
  </ul>
  These encodings are described in the <a href="{@@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/security/StandardNames.html#CertPathEncodings">
  CertPath Encodings section</a> of the
  Java Cryptography Architecture Standard Algorithm Name Documentation.
  Consult the release documentation for your implementation to see if any
  other encodings are supported. 
 <p>
  <b>Concurrent Access</b>
  <p>
  All <code>CertPath</code> objects must be thread-safe. That is, multiple
  threads may concurrently invoke the methods defined in this class on a
  single <code>CertPath</code> object (or more than one) with no
  ill effects. This is also true for the <code>List</code> returned by 
 <code>CertPath.getCertificates</code>.
  <p>
  Requiring <code>CertPath</code> objects to be immutable and thread-safe
  allows them to be passed around to various pieces of code without worrying
  about coordinating access.  Providing this thread-safety is
  generally not difficult, since the <code>CertPath</code> and 
 <code>List</code> objects in question are immutable.
 - seealso: CertificateFactory
 - seealso: CertPathBuilder
 @author Yassir Elley
 @since 1.4
 */
@interface JavaSecurityCertCertPath : NSObject < JavaIoSerializable >

#pragma mark Public

/*!
 @brief Compares this certification path for equality with the specified
  object.Two <code>CertPath</code>s are equal if and only if their
  types are equal and their certificate <code>List</code>s (and by
  implication the <code>Certificate</code>s in those <code>List</code>s)
  are equal.
 A <code>CertPath</code> is never equal to an object that is
  not a <code>CertPath</code>.
  <p>
  This algorithm is implemented by this method. If it is overridden,
  the behavior specified here must be maintained.
 @param other the object to test for equality with this certification path
 @return true if the specified object is equal to this certification path,
  false otherwise
 */
- (jboolean)isEqual:(id)other;

/*!
 @brief Returns the list of certificates in this certification path.
 The <code>List</code> returned must be immutable and thread-safe.
 @return an immutable <code>List</code> of <code>Certificate</code>s
          (may be empty, but not null)
 */
- (id<JavaUtilList>)getCertificates;

/*!
 @brief Returns the encoded form of this certification path, using the default
  encoding.
 @return the encoded bytes
 @throw CertificateEncodingExceptionif an encoding error occurs
 */
- (IOSByteArray *)getEncoded;

/*!
 @brief Returns the encoded form of this certification path, using the
  specified encoding.
 @param encoding the name of the encoding to use
 @return the encoded bytes
 @throw CertificateEncodingExceptionif an encoding error occurs or
    the encoding requested is not supported
 */
- (IOSByteArray *)getEncodedWithNSString:(NSString *)encoding;

/*!
 @brief Returns an iteration of the encodings supported by this certification
  path, with the default encoding first.Attempts to modify the returned 
 <code>Iterator</code> via its <code>remove</code> method result in an 
 <code>UnsupportedOperationException</code>.
 @return an <code>Iterator</code> over the names of the supported
          encodings (as Strings)
 */
- (id<JavaUtilIterator>)getEncodings;

/*!
 @brief Returns the type of <code>Certificate</code>s in this certification
  path.This is the same string that would be returned by 
 <code>cert.getType()</code>
  for all <code>Certificate</code>s in the certification path.
 @return the type of <code>Certificate</code>s in this certification
  path (never null)
 */
- (NSString *)getType;

/*!
 @brief Returns the hashcode for this certification path.The hash code of
  a certification path is defined to be the result of the following
  calculation: 
 @code
 hashCode = path.getType().hashCode();
   hashCode = 31*hashCode + path.getCertificates().hashCode(); 
 
@endcode
  This ensures that <code>path1.equals(path2)</code> implies that 
 <code>path1.hashCode()==path2.hashCode()</code> for any two certification
  paths, <code>path1</code> and <code>path2</code>, as required by the
  general contract of <code>Object.hashCode</code>.
 @return the hashcode value for this certification path
 */
- (NSUInteger)hash;

/*!
 @brief Returns a string representation of this certification path.
 This calls the <code>toString</code> method on each of the 
 <code>Certificate</code>s in the path.
 @return a string representation of this certification path
 */
- (NSString *)description;

#pragma mark Protected

/*!
 @brief Creates a <code>CertPath</code> of the specified type.
 <p>
  This constructor is protected because most users should use a 
 <code>CertificateFactory</code> to create <code>CertPath</code>s.
 @param type the standard name of the type of  
 <code>Certificate</code> s in this path
 */
- (instancetype __nonnull)initWithNSString:(NSString *)type;

/*!
 @brief Replaces the <code>CertPath</code> to be serialized with a 
 <code>CertPathRep</code> object.
 @return the <code>CertPathRep</code> to be serialized
 @throw ObjectStreamExceptionif a <code>CertPathRep</code> object
  representing this certification path could not be created
 */
- (id)writeReplace;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityCertCertPath)

FOUNDATION_EXPORT void JavaSecurityCertCertPath_initWithNSString_(JavaSecurityCertCertPath *self, NSString *type);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityCertCertPath)

#endif

#if !defined (JavaSecurityCertCertPath_CertPathRep_) && (INCLUDE_ALL_JavaSecurityCertCertPath || defined(INCLUDE_JavaSecurityCertCertPath_CertPathRep))
#define JavaSecurityCertCertPath_CertPathRep_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class IOSByteArray;

/*!
 @brief Alternate <code>CertPath</code> class for serialization.
 @since 1.4
 */
@interface JavaSecurityCertCertPath_CertPathRep : NSObject < JavaIoSerializable >

#pragma mark Protected

/*!
 @brief Creates a <code>CertPathRep</code> with the specified
  type and encoded form of a certification path.
 @param type the standard name of a <code>CertPath</code>  type
 @param data the encoded form of the certification path
 */
- (instancetype __nonnull)initWithNSString:(NSString *)type
                             withByteArray:(IOSByteArray *)data;

/*!
 @brief Returns a <code>CertPath</code> constructed from the type and data.
 @return the resolved <code>CertPath</code> object
 @throw ObjectStreamExceptionif a <code>CertPath</code> could not
  be constructed
 */
- (id)readResolve;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityCertCertPath_CertPathRep)

FOUNDATION_EXPORT void JavaSecurityCertCertPath_CertPathRep_initWithNSString_withByteArray_(JavaSecurityCertCertPath_CertPathRep *self, NSString *type, IOSByteArray *data);

FOUNDATION_EXPORT JavaSecurityCertCertPath_CertPathRep *new_JavaSecurityCertCertPath_CertPathRep_initWithNSString_withByteArray_(NSString *type, IOSByteArray *data) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityCertCertPath_CertPathRep *create_JavaSecurityCertCertPath_CertPathRep_initWithNSString_withByteArray_(NSString *type, IOSByteArray *data);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityCertCertPath_CertPathRep)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSecurityCertCertPath")
