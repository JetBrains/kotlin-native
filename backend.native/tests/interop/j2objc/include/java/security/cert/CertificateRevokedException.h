//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/security/cert/CertificateRevokedException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecurityCertCertificateRevokedException")
#ifdef RESTRICT_JavaSecurityCertCertificateRevokedException
#define INCLUDE_ALL_JavaSecurityCertCertificateRevokedException 0
#else
#define INCLUDE_ALL_JavaSecurityCertCertificateRevokedException 1
#endif
#undef RESTRICT_JavaSecurityCertCertificateRevokedException

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSecurityCertCertificateRevokedException_) && (INCLUDE_ALL_JavaSecurityCertCertificateRevokedException || defined(INCLUDE_JavaSecurityCertCertificateRevokedException))
#define JavaSecurityCertCertificateRevokedException_

#define RESTRICT_JavaSecurityCertCertificateException 1
#define INCLUDE_JavaSecurityCertCertificateException 1
#include "java/security/cert/CertificateException.h"

@class JavaLangThrowable;
@class JavaSecurityCertCRLReason;
@class JavaUtilDate;
@class JavaxSecurityAuthX500X500Principal;
@protocol JavaUtilMap;

/*!
 @brief An exception that indicates an X.509 certificate is revoked.A
  <code>CertificateRevokedException</code> contains additional information
  about the revoked certificate, such as the date on which the
  certificate was revoked and the reason it was revoked.
 @author Sean Mullan
 @since 1.7
 - seealso: CertPathValidatorException
 */
@interface JavaSecurityCertCertificateRevokedException : JavaSecurityCertCertificateException

#pragma mark Public

/*!
 @brief Constructs a <code>CertificateRevokedException</code> with
  the specified revocation date, reason code, authority name, and map
  of extensions.
 @param revocationDate the date on which the certificate was revoked. The     date is copied to protect against subsequent modification.
 @param reason the revocation reason
 @param extensions a map of X.509 Extensions. Each key is an OID String     that maps to the corresponding Extension. The map is copied to
      prevent subsequent modification.
 @param authority the <code>X500Principal</code>  that represents the name
      of the authority that signed the certificate's revocation status     information
 @throw NullPointerExceptionif <code>revocationDate</code>,
     <code>reason</code>, <code>authority</code>, or
     <code>extensions</code> is <code>null</code>
 */
- (instancetype __nonnull)initWithJavaUtilDate:(JavaUtilDate *)revocationDate
                 withJavaSecurityCertCRLReason:(JavaSecurityCertCRLReason *)reason
        withJavaxSecurityAuthX500X500Principal:(JavaxSecurityAuthX500X500Principal *)authority
                               withJavaUtilMap:(id<JavaUtilMap>)extensions;

/*!
 @brief Returns the name of the authority that signed the certificate's
  revocation status information.
 @return the <code>X500Principal</code> that represents the name of the
      authority that signed the certificate's revocation status information
 */
- (JavaxSecurityAuthX500X500Principal *)getAuthorityName;

/*!
 @brief Returns a map of X.509 extensions containing additional information
  about the revoked certificate, such as the Invalidity Date
  Extension.Each key is an OID String that maps to the corresponding
  Extension.
 @return an unmodifiable map of X.509 extensions, or an empty map
     if there are no extensions
 */
- (id<JavaUtilMap>)getExtensions;

/*!
 @brief Returns the invalidity date, as specified in the Invalidity Date
  extension of this <code>CertificateRevokedException</code>.The
  invalidity date is the date on which it is known or suspected that the
  private key was compromised or that the certificate otherwise became
  invalid.
 This implementation calls <code>getExtensions()</code> and
  checks the returned map for an entry for the Invalidity Date extension
  OID ("2.5.29.24"). If found, it returns the invalidity date in the
  extension; otherwise null. A new Date object is returned each time the
  method is invoked to protect against subsequent modification.
 @return the invalidity date, or <code>null</code> if not specified
 */
- (JavaUtilDate *)getInvalidityDate;

- (NSString *)getMessage;

/*!
 @brief Returns the date on which the certificate was revoked.A new copy is
  returned each time the method is invoked to protect against subsequent
  modification.
 @return the revocation date
 */
- (JavaUtilDate *)getRevocationDate;

/*!
 @brief Returns the reason the certificate was revoked.
 @return the revocation reason
 */
- (JavaSecurityCertCRLReason *)getRevocationReason;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityCertCertificateRevokedException)

FOUNDATION_EXPORT void JavaSecurityCertCertificateRevokedException_initWithJavaUtilDate_withJavaSecurityCertCRLReason_withJavaxSecurityAuthX500X500Principal_withJavaUtilMap_(JavaSecurityCertCertificateRevokedException *self, JavaUtilDate *revocationDate, JavaSecurityCertCRLReason *reason, JavaxSecurityAuthX500X500Principal *authority, id<JavaUtilMap> extensions);

FOUNDATION_EXPORT JavaSecurityCertCertificateRevokedException *new_JavaSecurityCertCertificateRevokedException_initWithJavaUtilDate_withJavaSecurityCertCRLReason_withJavaxSecurityAuthX500X500Principal_withJavaUtilMap_(JavaUtilDate *revocationDate, JavaSecurityCertCRLReason *reason, JavaxSecurityAuthX500X500Principal *authority, id<JavaUtilMap> extensions) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityCertCertificateRevokedException *create_JavaSecurityCertCertificateRevokedException_initWithJavaUtilDate_withJavaSecurityCertCRLReason_withJavaxSecurityAuthX500X500Principal_withJavaUtilMap_(JavaUtilDate *revocationDate, JavaSecurityCertCRLReason *reason, JavaxSecurityAuthX500X500Principal *authority, id<JavaUtilMap> extensions);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityCertCertificateRevokedException)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSecurityCertCertificateRevokedException")
