//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/security/cert/CertificateEncodingException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecurityCertCertificateEncodingException")
#ifdef RESTRICT_JavaSecurityCertCertificateEncodingException
#define INCLUDE_ALL_JavaSecurityCertCertificateEncodingException 0
#else
#define INCLUDE_ALL_JavaSecurityCertCertificateEncodingException 1
#endif
#undef RESTRICT_JavaSecurityCertCertificateEncodingException

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSecurityCertCertificateEncodingException_) && (INCLUDE_ALL_JavaSecurityCertCertificateEncodingException || defined(INCLUDE_JavaSecurityCertCertificateEncodingException))
#define JavaSecurityCertCertificateEncodingException_

#define RESTRICT_JavaSecurityCertCertificateException 1
#define INCLUDE_JavaSecurityCertCertificateException 1
#include "java/security/cert/CertificateException.h"

@class JavaLangThrowable;

/*!
 @brief Certificate Encoding Exception.This is thrown whenever an error
  occurs while attempting to encode a certificate.
 @author Hemma Prafullchandra
 */
@interface JavaSecurityCertCertificateEncodingException : JavaSecurityCertCertificateException

#pragma mark Public

/*!
 @brief Constructs a CertificateEncodingException with no detail message.A
  detail message is a String that describes this particular
  exception.
 */
- (instancetype __nonnull)init;

/*!
 @brief Constructs a CertificateEncodingException with the specified detail
  message.A detail message is a String that describes this
  particular exception.
 @param message the detail message.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)message;

/*!
 @brief Creates a <code>CertificateEncodingException</code> with the specified
  detail message and cause.
 @param message the detail message (which is saved for later retrieval         by the 
 <code>getMessage()</code>  method).
 @param cause the cause (which is saved for later retrieval by the         
 <code>getCause()</code>  method).  (A <code>null</code>  value is permitted,         and indicates that the cause is nonexistent or unknown.)
 @since 1.5
 */
- (instancetype __nonnull)initWithNSString:(NSString *)message
                     withJavaLangThrowable:(JavaLangThrowable *)cause;

/*!
 @brief Creates a <code>CertificateEncodingException</code>
  with the specified cause and a detail message of 
 <code>(cause==null ?
 null : cause.toString())</code>
  (which typically contains the class and detail message of 
 <code>cause</code>).
 @param cause the cause (which is saved for later retrieval by the         
 <code>getCause()</code>  method).  (A <code>null</code>  value is permitted,         and indicates that the cause is nonexistent or unknown.)
 @since 1.5
 */
- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)cause;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityCertCertificateEncodingException)

FOUNDATION_EXPORT void JavaSecurityCertCertificateEncodingException_init(JavaSecurityCertCertificateEncodingException *self);

FOUNDATION_EXPORT JavaSecurityCertCertificateEncodingException *new_JavaSecurityCertCertificateEncodingException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityCertCertificateEncodingException *create_JavaSecurityCertCertificateEncodingException_init(void);

FOUNDATION_EXPORT void JavaSecurityCertCertificateEncodingException_initWithNSString_(JavaSecurityCertCertificateEncodingException *self, NSString *message);

FOUNDATION_EXPORT JavaSecurityCertCertificateEncodingException *new_JavaSecurityCertCertificateEncodingException_initWithNSString_(NSString *message) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityCertCertificateEncodingException *create_JavaSecurityCertCertificateEncodingException_initWithNSString_(NSString *message);

FOUNDATION_EXPORT void JavaSecurityCertCertificateEncodingException_initWithNSString_withJavaLangThrowable_(JavaSecurityCertCertificateEncodingException *self, NSString *message, JavaLangThrowable *cause);

FOUNDATION_EXPORT JavaSecurityCertCertificateEncodingException *new_JavaSecurityCertCertificateEncodingException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityCertCertificateEncodingException *create_JavaSecurityCertCertificateEncodingException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause);

FOUNDATION_EXPORT void JavaSecurityCertCertificateEncodingException_initWithJavaLangThrowable_(JavaSecurityCertCertificateEncodingException *self, JavaLangThrowable *cause);

FOUNDATION_EXPORT JavaSecurityCertCertificateEncodingException *new_JavaSecurityCertCertificateEncodingException_initWithJavaLangThrowable_(JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityCertCertificateEncodingException *create_JavaSecurityCertCertificateEncodingException_initWithJavaLangThrowable_(JavaLangThrowable *cause);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityCertCertificateEncodingException)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSecurityCertCertificateEncodingException")
