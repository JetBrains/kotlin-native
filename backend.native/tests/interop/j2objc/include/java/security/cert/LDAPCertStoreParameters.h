//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/security/cert/LDAPCertStoreParameters.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecurityCertLDAPCertStoreParameters")
#ifdef RESTRICT_JavaSecurityCertLDAPCertStoreParameters
#define INCLUDE_ALL_JavaSecurityCertLDAPCertStoreParameters 0
#else
#define INCLUDE_ALL_JavaSecurityCertLDAPCertStoreParameters 1
#endif
#undef RESTRICT_JavaSecurityCertLDAPCertStoreParameters

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSecurityCertLDAPCertStoreParameters_) && (INCLUDE_ALL_JavaSecurityCertLDAPCertStoreParameters || defined(INCLUDE_JavaSecurityCertLDAPCertStoreParameters))
#define JavaSecurityCertLDAPCertStoreParameters_

#define RESTRICT_JavaSecurityCertCertStoreParameters 1
#define INCLUDE_JavaSecurityCertCertStoreParameters 1
#include "java/security/cert/CertStoreParameters.h"

/*!
 @brief Parameters used as input for the LDAP <code>CertStore</code> algorithm.
 <p>
  This class is used to provide necessary configuration parameters (server
  name and port number) to implementations of the LDAP <code>CertStore</code>
  algorithm. 
 <p>
  <b>Concurrent Access</b>
  <p>
  Unless otherwise specified, the methods defined in this class are not
  thread-safe. Multiple threads that need to access a single
  object concurrently should synchronize amongst themselves and
  provide the necessary locking. Multiple threads each manipulating
  separate objects need not synchronize.
 @since 1.4
 @author Steve Hanna
 - seealso: CertStore
 */
@interface JavaSecurityCertLDAPCertStoreParameters : NSObject < JavaSecurityCertCertStoreParameters >

#pragma mark Public

/*!
 @brief Creates an instance of <code>LDAPCertStoreParameters</code> with the
  default parameter values (server name "localhost", port 389).
 */
- (instancetype __nonnull)init;

/*!
 @brief Creates an instance of <code>LDAPCertStoreParameters</code> with the
  specified server name and a default port of 389.
 @param serverName the DNS name of the LDAP server
 @throw NullPointerExceptionif <code>serverName</code> is 
 <code>null</code>
 */
- (instancetype __nonnull)initWithNSString:(NSString *)serverName;

/*!
 @brief Creates an instance of <code>LDAPCertStoreParameters</code> with the
  specified parameter values.
 @param serverName the DNS name of the LDAP server
 @param port the port number of the LDAP server
 @throw NullPointerExceptionif <code>serverName</code> is 
 <code>null</code>
 */
- (instancetype __nonnull)initWithNSString:(NSString *)serverName
                                   withInt:(jint)port;

/*!
 @brief Returns a copy of this object.Changes to the copy will not affect
  the original and vice versa.
 <p>
  Note: this method currently performs a shallow copy of the object
  (simply calls <code>Object.clone()</code>). This may be changed in a
  future revision to perform a deep copy if new parameters are added
  that should not be shared.
 @return the copy
 */
- (id)java_clone;

/*!
 @brief Returns the port number of the LDAP server.
 @return the port number
 */
- (jint)getPort;

/*!
 @brief Returns the DNS name of the LDAP server.
 @return the name (not <code>null</code>)
 */
- (NSString *)getServerName;

/*!
 @brief Returns a formatted string describing the parameters.
 @return a formatted string describing the parameters
 */
- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityCertLDAPCertStoreParameters)

FOUNDATION_EXPORT void JavaSecurityCertLDAPCertStoreParameters_initWithNSString_withInt_(JavaSecurityCertLDAPCertStoreParameters *self, NSString *serverName, jint port);

FOUNDATION_EXPORT JavaSecurityCertLDAPCertStoreParameters *new_JavaSecurityCertLDAPCertStoreParameters_initWithNSString_withInt_(NSString *serverName, jint port) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityCertLDAPCertStoreParameters *create_JavaSecurityCertLDAPCertStoreParameters_initWithNSString_withInt_(NSString *serverName, jint port);

FOUNDATION_EXPORT void JavaSecurityCertLDAPCertStoreParameters_initWithNSString_(JavaSecurityCertLDAPCertStoreParameters *self, NSString *serverName);

FOUNDATION_EXPORT JavaSecurityCertLDAPCertStoreParameters *new_JavaSecurityCertLDAPCertStoreParameters_initWithNSString_(NSString *serverName) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityCertLDAPCertStoreParameters *create_JavaSecurityCertLDAPCertStoreParameters_initWithNSString_(NSString *serverName);

FOUNDATION_EXPORT void JavaSecurityCertLDAPCertStoreParameters_init(JavaSecurityCertLDAPCertStoreParameters *self);

FOUNDATION_EXPORT JavaSecurityCertLDAPCertStoreParameters *new_JavaSecurityCertLDAPCertStoreParameters_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityCertLDAPCertStoreParameters *create_JavaSecurityCertLDAPCertStoreParameters_init(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityCertLDAPCertStoreParameters)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSecurityCertLDAPCertStoreParameters")
