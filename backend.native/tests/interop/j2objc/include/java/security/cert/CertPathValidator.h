//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/security/cert/CertPathValidator.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecurityCertCertPathValidator")
#ifdef RESTRICT_JavaSecurityCertCertPathValidator
#define INCLUDE_ALL_JavaSecurityCertCertPathValidator 0
#else
#define INCLUDE_ALL_JavaSecurityCertCertPathValidator 1
#endif
#undef RESTRICT_JavaSecurityCertCertPathValidator

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSecurityCertCertPathValidator_) && (INCLUDE_ALL_JavaSecurityCertCertPathValidator || defined(INCLUDE_JavaSecurityCertCertPathValidator))
#define JavaSecurityCertCertPathValidator_

@class JavaSecurityCertCertPath;
@class JavaSecurityCertCertPathValidatorSpi;
@class JavaSecurityProvider;
@protocol JavaSecurityCertCertPathChecker;
@protocol JavaSecurityCertCertPathParameters;
@protocol JavaSecurityCertCertPathValidatorResult;

/*!
 @brief A class for validating certification paths (also known as certificate
  chains).
 <p>
  This class uses a provider-based architecture.
  To create a <code>CertPathValidator</code>,
  call one of the static <code>getInstance</code> methods, passing in the
  algorithm name of the <code>CertPathValidator</code> desired and
  optionally the name of the provider desired. 
 <p>Once a <code>CertPathValidator</code> object has been created, it can
  be used to validate certification paths by calling the <code>validate</code>
  method and passing it the <code>CertPath</code> to be validated
  and an algorithm-specific set of parameters. If successful, the result is
  returned in an object that implements the 
 <code>CertPathValidatorResult</code> interface. 
 <p>The <code>getRevocationChecker</code> method allows an application to specify
  additional algorithm-specific parameters and options used by the 
 <code>CertPathValidator</code> when checking the revocation status of
  certificates. Here is an example demonstrating how it is used with the PKIX
  algorithm: 
 @code

  CertPathValidator cpv = CertPathValidator.getInstance("PKIX");
  PKIXRevocationChecker rc = (PKIXRevocationChecker)cpv.getRevocationChecker();
  rc.setOptions(EnumSet.of(Option.SOFT_FAIL));
  params.addCertPathChecker(rc);
  CertPathValidatorResult cpvr = cpv.validate(path, params); 
  
@endcode
  
 <p> Android provides the following <code>CertPathValidator</code> algorithms: 
 <table>
    <thead>
      <tr>
        <th>Algorithm</th>
        <th>Supported API Levels</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>PKIX</td>
        <td>1+</td>
      </tr>
    </tbody>
  </table>
  This algorithm is described in the <a href="{@@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/security/StandardNames.html#CertPathValidator">
  CertPathValidator section</a> of the
  Java Cryptography Architecture Standard Algorithm Name Documentation. 
 <p>
  <b>Concurrent Access</b>
  <p>
  The static methods of this class are guaranteed to be thread-safe.
  Multiple threads may concurrently invoke the static methods defined in
  this class with no ill effects. 
 <p>
  However, this is not true for the non-static methods defined by this class.
  Unless otherwise documented by a specific provider, threads that need to
  access a single <code>CertPathValidator</code> instance concurrently should
  synchronize amongst themselves and provide the necessary locking. Multiple
  threads each manipulating a different <code>CertPathValidator</code>
  instance need not synchronize.
 - seealso: CertPath
 @since 1.4
 @author Yassir Elley
 */
@interface JavaSecurityCertCertPathValidator : NSObject

#pragma mark Public

/*!
 @brief Returns the algorithm name of this <code>CertPathValidator</code>.
 @return the algorithm name of this <code>CertPathValidator</code>
 */
- (NSString *)getAlgorithm;

/*!
 @brief Returns the default <code>CertPathValidator</code> type as specified by
  the <code>certpathvalidator.type</code> security property, or the string 
 &quot;PKIX&quot; if no such property exists.
 <p>The default <code>CertPathValidator</code> type can be used by
  applications that do not want to use a hard-coded type when calling one
  of the <code>getInstance</code> methods, and want to provide a default
  type in case a user does not specify its own. 
 <p>The default <code>CertPathValidator</code> type can be changed by
  setting the value of the <code>certpathvalidator.type</code> security
  property to the desired type.
 - seealso: java.security.Securitysecurity properties
 @return the default <code>CertPathValidator</code> type as specified
  by the <code>certpathvalidator.type</code> security property, or the string 
 &quot;PKIX&quot; if no such property exists.
 */
+ (NSString *)getDefaultType;

/*!
 @brief Returns a <code>CertPathValidator</code> object that implements the
  specified algorithm.
 <p> This method traverses the list of registered security Providers,
  starting with the most preferred Provider.
  A new CertPathValidator object encapsulating the
  CertPathValidatorSpi implementation from the first
  Provider that supports the specified algorithm is returned. 
 <p> Note that the list of registered providers may be retrieved via the 
 <code>Security.getProviders()</code> method.
 @param algorithm the name of the requested <code>CertPathValidator</code>   algorithm. See the CertPathValidator section in the 
  <a href="{@@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/security/StandardNames.html#CertPathValidator">
   Java Cryptography Architecture Standard Algorithm Name Documentation
  </a>  for information about standard algorithm names.
 @return a <code>CertPathValidator</code> object that implements the
           specified algorithm.
 @throw NoSuchAlgorithmExceptionif no Provider supports a
           CertPathValidatorSpi implementation for the
           specified algorithm.
 - seealso: java.security.Provider
 */
+ (JavaSecurityCertCertPathValidator *)getInstanceWithNSString:(NSString *)algorithm;

/*!
 @brief Returns a <code>CertPathValidator</code> object that implements the
  specified algorithm.
 <p> A new CertPathValidator object encapsulating the
  CertPathValidatorSpi implementation from the specified Provider
  object is returned.  Note that the specified Provider object
  does not have to be registered in the provider list.
 @param algorithm the name of the requested <code>CertPathValidator</code>  algorithm. See the CertPathValidator section in the 
  <a href="{@@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/security/StandardNames.html#CertPathValidator">
   Java Cryptography Architecture Standard Algorithm Name Documentation
  </a>  for information about standard algorithm names.
 @param provider the provider.
 @return a <code>CertPathValidator</code> object that implements the
           specified algorithm.
 @throw NoSuchAlgorithmExceptionif a CertPathValidatorSpi
           implementation for the specified algorithm is not available
           from the specified Provider object.
 @throw IllegalArgumentExceptionif the <code>provider</code> is
           null.
 - seealso: java.security.Provider
 */
+ (JavaSecurityCertCertPathValidator *)getInstanceWithNSString:(NSString *)algorithm
                                      withJavaSecurityProvider:(JavaSecurityProvider *)provider;

/*!
 @brief Returns a <code>CertPathValidator</code> object that implements the
  specified algorithm.
 <p> A new CertPathValidator object encapsulating the
  CertPathValidatorSpi implementation from the specified provider
  is returned.  The specified provider must be registered
  in the security provider list. 
 <p> Note that the list of registered providers may be retrieved via the 
 <code>Security.getProviders()</code> method.
 @param algorithm the name of the requested <code>CertPathValidator</code>   algorithm. See the CertPathValidator section in the 
  <a href="{@@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/security/StandardNames.html#CertPathValidator">
   Java Cryptography Architecture Standard Algorithm Name Documentation
  </a>  for information about standard algorithm names.
 @param provider the name of the provider.
 @return a <code>CertPathValidator</code> object that implements the
           specified algorithm.
 @throw NoSuchAlgorithmExceptionif a CertPathValidatorSpi
           implementation for the specified algorithm is not
           available from the specified provider.
 @throw NoSuchProviderExceptionif the specified provider is not
           registered in the security provider list.
 @throw IllegalArgumentExceptionif the <code>provider</code> is
           null or empty.
 - seealso: java.security.Provider
 */
+ (JavaSecurityCertCertPathValidator *)getInstanceWithNSString:(NSString *)algorithm
                                                  withNSString:(NSString *)provider;

/*!
 @brief Returns the <code>Provider</code> of this 
 <code>CertPathValidator</code>.
 @return the <code>Provider</code> of this <code>CertPathValidator</code>
 */
- (JavaSecurityProvider *)getProvider;

/*!
 @brief Returns a <code>CertPathChecker</code> that the encapsulated 
 <code>CertPathValidatorSpi</code> implementation uses to check the revocation
  status of certificates.A PKIX implementation returns objects of
  type <code>PKIXRevocationChecker</code>.
 Each invocation of this method
  returns a new instance of <code>CertPathChecker</code>.
  
 <p>The primary purpose of this method is to allow callers to specify
  additional input parameters and options specific to revocation checking.
  See the class description for an example.
 @return a <code>CertPathChecker</code>
 @throw UnsupportedOperationExceptionif the service provider does not
          support this method
 @since 1.8
 */
- (id<JavaSecurityCertCertPathChecker>)getRevocationChecker;

/*!
 @brief Validates the specified certification path using the specified
  algorithm parameter set.
 <p>
  The <code>CertPath</code> specified must be of a type that is
  supported by the validation algorithm, otherwise an 
 <code>InvalidAlgorithmParameterException</code> will be thrown. For
  example, a <code>CertPathValidator</code> that implements the PKIX
  algorithm validates <code>CertPath</code> objects of type X.509.
 @param certPath the <code>CertPath</code>  to be validated
 @param params the algorithm parameters
 @return the result of the validation algorithm
 @throw CertPathValidatorExceptionif the <code>CertPath</code>
  does not validate
 @throw InvalidAlgorithmParameterExceptionif the specified
  parameters or the type of the specified <code>CertPath</code> are
  inappropriate for this <code>CertPathValidator</code>
 */
- (id<JavaSecurityCertCertPathValidatorResult>)validateWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                             withJavaSecurityCertCertPathParameters:(id<JavaSecurityCertCertPathParameters>)params;

#pragma mark Protected

/*!
 @brief Creates a <code>CertPathValidator</code> object of the given algorithm,
  and encapsulates the given provider implementation (SPI object) in it.
 @param validatorSpi the provider implementation
 @param provider the provider
 @param algorithm the algorithm name
 */
- (instancetype __nonnull)initWithJavaSecurityCertCertPathValidatorSpi:(JavaSecurityCertCertPathValidatorSpi *)validatorSpi
                                              withJavaSecurityProvider:(JavaSecurityProvider *)provider
                                                          withNSString:(NSString *)algorithm;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityCertCertPathValidator)

FOUNDATION_EXPORT void JavaSecurityCertCertPathValidator_initWithJavaSecurityCertCertPathValidatorSpi_withJavaSecurityProvider_withNSString_(JavaSecurityCertCertPathValidator *self, JavaSecurityCertCertPathValidatorSpi *validatorSpi, JavaSecurityProvider *provider, NSString *algorithm);

FOUNDATION_EXPORT JavaSecurityCertCertPathValidator *new_JavaSecurityCertCertPathValidator_initWithJavaSecurityCertCertPathValidatorSpi_withJavaSecurityProvider_withNSString_(JavaSecurityCertCertPathValidatorSpi *validatorSpi, JavaSecurityProvider *provider, NSString *algorithm) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityCertCertPathValidator *create_JavaSecurityCertCertPathValidator_initWithJavaSecurityCertCertPathValidatorSpi_withJavaSecurityProvider_withNSString_(JavaSecurityCertCertPathValidatorSpi *validatorSpi, JavaSecurityProvider *provider, NSString *algorithm);

FOUNDATION_EXPORT JavaSecurityCertCertPathValidator *JavaSecurityCertCertPathValidator_getInstanceWithNSString_(NSString *algorithm);

FOUNDATION_EXPORT JavaSecurityCertCertPathValidator *JavaSecurityCertCertPathValidator_getInstanceWithNSString_withNSString_(NSString *algorithm, NSString *provider);

FOUNDATION_EXPORT JavaSecurityCertCertPathValidator *JavaSecurityCertCertPathValidator_getInstanceWithNSString_withJavaSecurityProvider_(NSString *algorithm, JavaSecurityProvider *provider);

FOUNDATION_EXPORT NSString *JavaSecurityCertCertPathValidator_getDefaultType(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityCertCertPathValidator)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSecurityCertCertPathValidator")
