//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/security/cert/X509CertSelector.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecurityCertX509CertSelector")
#ifdef RESTRICT_JavaSecurityCertX509CertSelector
#define INCLUDE_ALL_JavaSecurityCertX509CertSelector 0
#else
#define INCLUDE_ALL_JavaSecurityCertX509CertSelector 1
#endif
#undef RESTRICT_JavaSecurityCertX509CertSelector

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSecurityCertX509CertSelector_) && (INCLUDE_ALL_JavaSecurityCertX509CertSelector || defined(INCLUDE_JavaSecurityCertX509CertSelector))
#define JavaSecurityCertX509CertSelector_

#define RESTRICT_JavaSecurityCertCertSelector 1
#define INCLUDE_JavaSecurityCertCertSelector 1
#include "java/security/cert/CertSelector.h"

@class IOSBooleanArray;
@class IOSByteArray;
@class JavaMathBigInteger;
@class JavaSecurityCertCertificate;
@class JavaSecurityCertX509Certificate;
@class JavaUtilDate;
@class JavaxSecurityAuthX500X500Principal;
@protocol JavaSecurityPublicKey;
@protocol JavaUtilCollection;
@protocol JavaUtilSet;
@protocol SunSecurityX509GeneralNameInterface;

/*!
 @brief A <code>CertSelector</code> that selects <code>X509Certificates</code> that
  match all specified criteria.This class is particularly useful when
  selecting certificates from a <code>CertStore</code> to build a
  PKIX-compliant certification path.
 <p>
  When first constructed, an <code>X509CertSelector</code> has no criteria
  enabled and each of the <code>get</code> methods return a default value
  (<code>null</code>, or <code>-1</code> for the <code>getBasicConstraints</code>
  method). Therefore, the <code>match</code>
  method would return <code>true</code> for any <code>X509Certificate</code>.
  Typically, several criteria are enabled (by calling 
 <code>setIssuer</code> or 
 <code>setKeyUsage</code>, for instance) and then the 
 <code>X509CertSelector</code> is passed to 
 <code>CertStore.getCertificates</code> or some similar
  method. 
 <p>
  Several criteria can be enabled (by calling <code>setIssuer</code>
  and <code>setSerialNumber</code>,
  for example) such that the <code>match</code> method
  usually uniquely matches a single <code>X509Certificate</code>. We say
  usually, since it is possible for two issuing CAs to have the same
  distinguished name and each issue a certificate with the same serial
  number. Other unique combinations include the issuer, subject,
  subjectKeyIdentifier and/or the subjectPublicKey criteria. 
 <p>
  Please refer to <a href="http://www.ietf.org/rfc/rfc3280.txt">RFC 3280:
  Internet X.509 Public Key Infrastructure Certificate and CRL Profile</a> for
  definitions of the X.509 certificate extensions mentioned below. 
 <p>
  <b>Concurrent Access</b>
  <p>
  Unless otherwise specified, the methods defined in this class are not
  thread-safe. Multiple threads that need to access a single
  object concurrently should synchronize amongst themselves and
  provide the necessary locking. Multiple threads each manipulating
  separate objects need not synchronize.
 - seealso: CertSelector
 - seealso: X509Certificate
 @since 1.4
 @author Steve Hanna
 */
@interface JavaSecurityCertX509CertSelector : NSObject < JavaSecurityCertCertSelector >
@property (readonly, class) jint NAME_ANY NS_SWIFT_NAME(NAME_ANY);
@property (readonly, class) jint NAME_RFC822 NS_SWIFT_NAME(NAME_RFC822);
@property (readonly, class) jint NAME_DNS NS_SWIFT_NAME(NAME_DNS);
@property (readonly, class) jint NAME_X400 NS_SWIFT_NAME(NAME_X400);
@property (readonly, class) jint NAME_DIRECTORY NS_SWIFT_NAME(NAME_DIRECTORY);
@property (readonly, class) jint NAME_EDI NS_SWIFT_NAME(NAME_EDI);
@property (readonly, class) jint NAME_URI NS_SWIFT_NAME(NAME_URI);
@property (readonly, class) jint NAME_IP NS_SWIFT_NAME(NAME_IP);
@property (readonly, class) jint NAME_OID NS_SWIFT_NAME(NAME_OID);

+ (jint)NAME_ANY;

+ (jint)NAME_RFC822;

+ (jint)NAME_DNS;

+ (jint)NAME_X400;

+ (jint)NAME_DIRECTORY;

+ (jint)NAME_EDI;

+ (jint)NAME_URI;

+ (jint)NAME_IP;

+ (jint)NAME_OID;

#pragma mark Public

/*!
 @brief Creates an <code>X509CertSelector</code>.Initially, no criteria are set
  so any <code>X509Certificate</code> will match.
 */
- (instancetype __nonnull)init;

/*!
 @brief Adds a name to the pathToNames criterion.The <code>X509Certificate</code>
  must not include name constraints that would prohibit building a
  path to the specified name.
 <p>
  This method allows the caller to add a name to the set of names which the 
 <code>X509Certificates</code>'s name constraints must permit.
  The specified name is added to any previous value for the
  pathToNames criterion. If the name is a duplicate, it may be ignored. 
 <p>
  The name is provided as a byte array. This byte array should contain
  the DER encoded name, as it would appear in the GeneralName structure
  defined in RFC 3280 and X.509. The ASN.1 definition of this structure
  appears in the documentation for 
 <code>addSubjectAlternativeName(int type, byte [] name)</code>
 .
  <p>
  Note that the byte array supplied here is cloned to protect against
  subsequent modifications.
 @param type the name type (0-8, as specified in              RFC 3280, section 4.2.1.7)
 @param name a byte array containing the name in ASN.1 DER encoded form
 @throw IOExceptionif a parsing error occurs
 */
- (void)addPathToNameWithInt:(jint)type
               withByteArray:(IOSByteArray *)name;

/*!
 @brief Adds a name to the pathToNames criterion.The <code>X509Certificate</code>
  must not include name constraints that would prohibit building a
  path to the specified name.
 <p>
  This method allows the caller to add a name to the set of names which the 
 <code>X509Certificates</code>'s name constraints must permit.
  The specified name is added to any previous value for the
  pathToNames criterion.  If the name is a duplicate, it may be ignored. 
 <p>
  The name is provided in string format. RFC 822, DNS, and URI names
  use the well-established string formats for those types (subject to
  the restrictions included in RFC 3280). IPv4 address names are
  supplied using dotted quad notation. OID address names are represented
  as a series of nonnegative integers separated by periods. And
  directory names (distinguished names) are supplied in RFC 2253 format.
  No standard string format is defined for otherNames, X.400 names,
  EDI party names, IPv6 address names, or any other type of names. They
  should be specified using the 
 <code>addPathToName(int type, byte [] name)</code>
  method. 
 <p>
  <strong>Note:</strong> for distinguished names, use 
 addPathToName(int, byte[]) instead.
  This method should not be relied on as it can fail to match some
  certificates because of a loss of encoding information in the RFC 2253
  String form of some distinguished names.
 @param type the name type (0-8, as specified in              RFC 3280, section 4.2.1.7)
 @param name the name in string form
 @throw IOExceptionif a parsing error occurs
 */
- (void)addPathToNameWithInt:(jint)type
                withNSString:(NSString *)name;

/*!
 @brief Adds a name to the subjectAlternativeNames criterion.The
  <code>X509Certificate</code> must contain all or at least one
  of the specified subjectAlternativeNames, depending on the value of
  the matchAllNames flag (see <code>setMatchAllSubjectAltNames</code>
 ).
 <p>
  This method allows the caller to add a name to the set of subject
  alternative names.
  The specified name is added to any previous value for the
  subjectAlternativeNames criterion. If the specified name is a
  duplicate, it may be ignored. 
 <p>
  The name is provided as a byte array. This byte array should contain
  the DER encoded name, as it would appear in the GeneralName structure
  defined in RFC 3280 and X.509. The encoded byte array should only contain
  the encoded value of the name, and should not include the tag associated
  with the name in the GeneralName structure. The ASN.1 definition of this
  structure appears below. 
 @code
 GeneralName ::= CHOICE {
        otherName                       [0]     OtherName,
        rfc822Name                      [1]     IA5String,
        dNSName                         [2]     IA5String,
        x400Address                     [3]     ORAddress,
        directoryName                   [4]     Name,
        ediPartyName                    [5]     EDIPartyName,
        uniformResourceIdentifier       [6]     IA5String,
        iPAddress                       [7]     OCTET STRING,
        registeredID                    [8]     OBJECT IDENTIFIER} 
 
@endcode
  <p>
  Note that the byte array supplied here is cloned to protect against
  subsequent modifications.
 @param type the name type (0-8, as listed above)
 @param name a byte array containing the name in ASN.1 DER encoded form
 @throw IOExceptionif a parsing error occurs
 */
- (void)addSubjectAlternativeNameWithInt:(jint)type
                           withByteArray:(IOSByteArray *)name;

/*!
 @brief Adds a name to the subjectAlternativeNames criterion.The
  <code>X509Certificate</code> must contain all or at least one
  of the specified subjectAlternativeNames, depending on the value of
  the matchAllNames flag (see <code>setMatchAllSubjectAltNames</code>
 ).
 <p>
  This method allows the caller to add a name to the set of subject
  alternative names.
  The specified name is added to any previous value for the
  subjectAlternativeNames criterion. If the specified name is a
  duplicate, it may be ignored. 
 <p>
  The name is provided in string format. 
 <a href="http://www.ietf.org/rfc/rfc822.txt">RFC 822</a>, DNS, and URI
  names use the well-established string formats for those types (subject to
  the restrictions included in RFC 3280). IPv4 address names are
  supplied using dotted quad notation. OID address names are represented
  as a series of nonnegative integers separated by periods. And
  directory names (distinguished names) are supplied in RFC 2253 format.
  No standard string format is defined for otherNames, X.400 names,
  EDI party names, IPv6 address names, or any other type of names. They
  should be specified using the 
 <code>addSubjectAlternativeName(int type, byte [] name)</code>
  method. 
 <p>
  <strong>Note:</strong> for distinguished names, use 
 addSubjectAlternativeName(int, byte[]) instead.
  This method should not be relied on as it can fail to match some
  certificates because of a loss of encoding information in the RFC 2253
  String form of some distinguished names.
 @param type the name type (0-8, as specified in              RFC 3280, section 4.2.1.7)
 @param name the name in string form (not <code>null</code> )
 @throw IOExceptionif a parsing error occurs
 */
- (void)addSubjectAlternativeNameWithInt:(jint)type
                            withNSString:(NSString *)name;

/*!
 @brief Returns a copy of this object.
 @return the copy
 */
- (id)java_clone;

/*!
 @brief Returns the authorityKeyIdentifier criterion.The
  <code>X509Certificate</code> must contain a AuthorityKeyIdentifier
  extension with the specified value.
 If <code>null</code>, no
  authorityKeyIdentifier check will be done. 
 <p>
  Note that the byte array returned is cloned to protect against
  subsequent modifications.
 @return the key identifier (or <code>null</code>)
 - seealso: #setAuthorityKeyIdentifier
 */
- (IOSByteArray *)getAuthorityKeyIdentifier;

/*!
 @brief Returns the basic constraints constraint.If the value is greater than
  or equal to zero, the <code>X509Certificates</code> must include a
  basicConstraints extension with a pathLen of at least this value.
 If the value is -2, only end-entity certificates are accepted. If
  the value is -1, no basicConstraints check is done.
 @return the value for the basic constraints constraint
 - seealso: #setBasicConstraints
 */
- (jint)getBasicConstraints;

/*!
 @brief Returns the certificateEquals criterion.The specified 
 <code>X509Certificate</code> must be equal to the 
 <code>X509Certificate</code> passed to the <code>match</code> method.
 If <code>null</code>, this check is not applied.
 @return the <code>X509Certificate</code> to match (or <code>null</code>)
 - seealso: #setCertificate
 */
- (JavaSecurityCertX509Certificate *)getCertificate;

/*!
 @brief Returns the certificateValid criterion.The specified date must fall
  within the certificate validity period for the 
 <code>X509Certificate</code>.
 If <code>null</code>, no certificateValid
  check will be done. 
 <p>
  Note that the <code>Date</code> returned is cloned to protect against
  subsequent modifications.
 @return the <code>Date</code> to check (or <code>null</code>)
 - seealso: #setCertificateValid
 */
- (JavaUtilDate *)getCertificateValid;

/*!
 @brief Returns the extendedKeyUsage criterion.The <code>X509Certificate</code>
  must allow the specified key purposes in its extended key usage
  extension.
 If the <code>keyPurposeSet</code> returned is empty or 
 <code>null</code>, no extendedKeyUsage check will be done. Note that an 
 <code>X509Certificate</code> that has no extendedKeyUsage extension
  implicitly allows all key purposes.
 @return an immutable <code>Set</code> of key purpose OIDs in string
  format (or <code>null</code>)
 - seealso: #setExtendedKeyUsage
 */
- (id<JavaUtilSet>)getExtendedKeyUsage;

/*!
 @brief Returns the issuer criterion as an <code>X500Principal</code>.This
  distinguished name must match the issuer distinguished name in the 
 <code>X509Certificate</code>.
 If <code>null</code>, the issuer criterion
  is disabled and any issuer distinguished name will do.
 @return the required issuer distinguished name as X500Principal
          (or <code>null</code>)
 @since 1.5
 */
- (JavaxSecurityAuthX500X500Principal *)getIssuer;

/*!
 @brief Returns the issuer criterion as a byte array.This distinguished name
  must match the issuer distinguished name in the 
 <code>X509Certificate</code>.
 If <code>null</code>, the issuer criterion
  is disabled and any issuer distinguished name will do. 
 <p>
  If the value returned is not <code>null</code>, it is a byte
  array containing a single DER encoded distinguished name, as defined in
  X.501. The ASN.1 notation for this structure is supplied in the
  documentation for 
 <code>setIssuer(byte [] issuerDN)</code>.
  <p>
  Note that the byte array returned is cloned to protect against
  subsequent modifications.
 @return a byte array containing the required issuer distinguished name
          in ASN.1 DER format (or <code>null</code>)
 @throw IOExceptionif an encoding error occurs
 */
- (IOSByteArray *)getIssuerAsBytes;

/*!
 @brief <strong>Denigrated</strong>, use getIssuer() or 
 getIssuerAsBytes() instead.This method should not be
  relied on as it can fail to match some certificates because of a loss of
  encoding information in the RFC 2253 String form of some distinguished
  names.
 <p>
  Returns the issuer criterion as a <code>String</code>. This
  distinguished name must match the issuer distinguished name in the 
 <code>X509Certificate</code>. If <code>null</code>, the issuer criterion
  is disabled and any issuer distinguished name will do. 
 <p>
  If the value returned is not <code>null</code>, it is a
  distinguished name, in RFC 2253 format.
 @return the required issuer distinguished name in RFC 2253 format
          (or <code>null</code>)
 */
- (NSString *)getIssuerAsString;

/*!
 @brief Returns the keyUsage criterion.The <code>X509Certificate</code>
  must allow the specified keyUsage values.
 If null, no keyUsage
  check will be done. 
 <p>
  Note that the boolean array returned is cloned to protect against
  subsequent modifications.
 @return a boolean array in the same format as the boolean
                  array returned by 
 <code>X509Certificate.getKeyUsage()</code>.
                  Or <code>null</code>.
 - seealso: #setKeyUsage
 */
- (IOSBooleanArray *)getKeyUsage;

/*!
 @brief Indicates if the <code>X509Certificate</code> must contain all
  or at least one of the subjectAlternativeNames
  specified in the <code>setSubjectAlternativeNames</code>
  or <code>addSubjectAlternativeName</code>
  methods.If <code>true</code>,
  the <code>X509Certificate</code> must contain all of the
  specified subject alternative names.
 If <code>false</code>, the 
 <code>X509Certificate</code> must contain at least one of the
  specified subject alternative names.
 @return <code>true</code> if the flag is enabled; 
 <code>false</code> if the flag is disabled. The flag is 
 <code>true</code> by default.
 - seealso: #setMatchAllSubjectAltNames
 */
- (jboolean)getMatchAllSubjectAltNames;

/*!
 @brief Returns the name constraints criterion.The <code>X509Certificate</code>
  must have subject and subject alternative names that
  meet the specified name constraints.
 <p>
  The name constraints are returned as a byte array. This byte array
  contains the DER encoded form of the name constraints, as they
  would appear in the NameConstraints structure defined in RFC 3280
  and X.509. The ASN.1 notation for this structure is supplied in the
  documentation for 
 <code>setNameConstraints(byte [] bytes)</code>.
  <p>
  Note that the byte array returned is cloned to protect against
  subsequent modifications.
 @return a byte array containing the ASN.1 DER encoding of
          a NameConstraints extension used for checking name constraints.         
 <code>null</code> if no name constraints check will be performed.
 - seealso: #setNameConstraints
 */
- (IOSByteArray *)getNameConstraints;

/*!
 @brief Returns a copy of the pathToNames criterion.The
  <code>X509Certificate</code> must not include name constraints that would
  prohibit building a path to the specified names.
 If the value
  returned is <code>null</code>, no pathToNames check will be performed. 
 <p>
  If the value returned is not <code>null</code>, it is a 
 <code>Collection</code> with one
  entry for each name to be included in the pathToNames
  criterion. Each entry is a <code>List</code> whose first entry is an 
 <code>Integer</code> (the name type, 0-8) and whose second
  entry is a <code>String</code> or a byte array (the name, in
  string or ASN.1 DER encoded form, respectively).
  There can be multiple names of the same type. Note that the 
 <code>Collection</code> returned may contain duplicate names (same
  name and name type). 
 <p>
  Each name in the <code>Collection</code>
  may be specified either as a <code>String</code> or as an ASN.1 encoded
  byte array. For more details about the formats used, see 
 <code>addPathToName(int type, String name)</code>
  and 
 <code>addPathToName(int type, byte [] name)</code>
 .
  <p>
  Note that a deep copy is performed on the <code>Collection</code> to
  protect against subsequent modifications.
 @return a <code>Collection</code> of names (or <code>null</code>)
 - seealso: #setPathToNames
 */
- (id<JavaUtilCollection>)getPathToNames;

/*!
 @brief Returns the policy criterion.The <code>X509Certificate</code> must
  include at least one of the specified policies in its certificate policies
  extension.
 If the <code>Set</code> returned is empty, then the 
 <code>X509Certificate</code> must include at least some specified policy
  in its certificate policies extension. If the <code>Set</code> returned is 
 <code>null</code>, no policy check will be performed.
 @return an immutable <code>Set</code> of certificate policy OIDs in
          string format (or <code>null</code>)
 - seealso: #setPolicy
 */
- (id<JavaUtilSet>)getPolicy;

/*!
 @brief Returns the privateKeyValid criterion.The specified date must fall
  within the private key validity period for the 
 <code>X509Certificate</code>.
 If <code>null</code>, no privateKeyValid
  check will be done. 
 <p>
  Note that the <code>Date</code> returned is cloned to protect against
  subsequent modifications.
 @return the <code>Date</code> to check (or <code>null</code>)
 - seealso: #setPrivateKeyValid
 */
- (JavaUtilDate *)getPrivateKeyValid;

/*!
 @brief Returns the serialNumber criterion.The specified serial number
  must match the certificate serial number in the 
 <code>X509Certificate</code>.
 If <code>null</code>, any certificate
  serial number will do.
 @return the certificate serial number to match
                 (or <code>null</code>)
 - seealso: #setSerialNumber
 */
- (JavaMathBigInteger *)getSerialNumber;

/*!
 @brief Returns the subject criterion as an <code>X500Principal</code>.This
  distinguished name must match the subject distinguished name in the 
 <code>X509Certificate</code>.
 If <code>null</code>, the subject criterion
  is disabled and any subject distinguished name will do.
 @return the required subject distinguished name as X500Principal
          (or <code>null</code>)
 @since 1.5
 */
- (JavaxSecurityAuthX500X500Principal *)getSubject;

/*!
 @brief Returns a copy of the subjectAlternativeNames criterion.
 The <code>X509Certificate</code> must contain all or at least one
  of the specified subjectAlternativeNames, depending on the value
  of the matchAllNames flag (see <code>getMatchAllSubjectAltNames</code>
 ). If the value returned is 
 <code>null</code>, no subjectAlternativeNames check will be performed. 
 <p>
  If the value returned is not <code>null</code>, it is a 
 <code>Collection</code> with
  one entry for each name to be included in the subject alternative name
  criterion. Each entry is a <code>List</code> whose first entry is an 
 <code>Integer</code> (the name type, 0-8) and whose second
  entry is a <code>String</code> or a byte array (the name, in
  string or ASN.1 DER encoded form, respectively).
  There can be multiple names of the same type.  Note that the 
 <code>Collection</code> returned may contain duplicate names (same name
  and name type). 
 <p>
  Each subject alternative name in the <code>Collection</code>
  may be specified either as a <code>String</code> or as an ASN.1 encoded
  byte array. For more details about the formats used, see 
 <code>addSubjectAlternativeName(int type, String name)</code>
  and 
 <code>addSubjectAlternativeName(int type, byte [] name)</code>
 .
  <p>
  Note that a deep copy is performed on the <code>Collection</code> to
  protect against subsequent modifications.
 @return a <code>Collection</code> of names (or <code>null</code>)
 - seealso: #setSubjectAlternativeNames
 */
- (id<JavaUtilCollection>)getSubjectAlternativeNames;

/*!
 @brief Returns the subject criterion as a byte array.This distinguished name
  must match the subject distinguished name in the 
 <code>X509Certificate</code>.
 If <code>null</code>, the subject criterion
  is disabled and any subject distinguished name will do. 
 <p>
  If the value returned is not <code>null</code>, it is a byte
  array containing a single DER encoded distinguished name, as defined in
  X.501. The ASN.1 notation for this structure is supplied in the
  documentation for 
 <code>setSubject(byte [] subjectDN)</code>.
  <p>
  Note that the byte array returned is cloned to protect against
  subsequent modifications.
 @return a byte array containing the required subject distinguished name
          in ASN.1 DER format (or <code>null</code>)
 @throw IOExceptionif an encoding error occurs
 */
- (IOSByteArray *)getSubjectAsBytes;

/*!
 @brief <strong>Denigrated</strong>, use getSubject() or 
 getSubjectAsBytes() instead.This method should not be
  relied on as it can fail to match some certificates because of a loss of
  encoding information in the RFC 2253 String form of some distinguished
  names.
 <p>
  Returns the subject criterion as a <code>String</code>. This
  distinguished name must match the subject distinguished name in the 
 <code>X509Certificate</code>. If <code>null</code>, the subject criterion
  is disabled and any subject distinguished name will do. 
 <p>
  If the value returned is not <code>null</code>, it is a
  distinguished name, in RFC 2253 format.
 @return the required subject distinguished name in RFC 2253 format
          (or <code>null</code>)
 */
- (NSString *)getSubjectAsString;

/*!
 @brief Returns the subjectKeyIdentifier criterion.The
  <code>X509Certificate</code> must contain a SubjectKeyIdentifier
  extension with the specified value.
 If <code>null</code>, no
  subjectKeyIdentifier check will be done. 
 <p>
  Note that the byte array returned is cloned to protect against
  subsequent modifications.
 @return the key identifier (or <code>null</code>)
 - seealso: #setSubjectKeyIdentifier
 */
- (IOSByteArray *)getSubjectKeyIdentifier;

/*!
 @brief Returns the subjectPublicKey criterion.The
  <code>X509Certificate</code> must contain the specified subject
  public key.
 If <code>null</code>, no subjectPublicKey check will be done.
 @return the subject public key to check for (or <code>null</code>)
 - seealso: #setSubjectPublicKey
 */
- (id<JavaSecurityPublicKey>)getSubjectPublicKey;

/*!
 @brief Returns the subjectPublicKeyAlgID criterion.The
  <code>X509Certificate</code> must contain a subject public key
  with the specified algorithm.
 If <code>null</code>, no
  subjectPublicKeyAlgID check will be done.
 @return the object identifier (OID) of the signature algorithm to check
          for (or <code>null</code>). An OID is represented by a set of
          nonnegative integers separated by periods.
 - seealso: #setSubjectPublicKeyAlgID
 */
- (NSString *)getSubjectPublicKeyAlgID;

/*!
 @brief Decides whether a <code>Certificate</code> should be selected.
 @param cert the <code>Certificate</code>  to be checked
 @return <code>true</code> if the <code>Certificate</code> should be
          selected, <code>false</code> otherwise
 */
- (jboolean)matchWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)cert;

/*!
 @brief Sets the authorityKeyIdentifier criterion.The
  <code>X509Certificate</code> must contain an
  AuthorityKeyIdentifier extension for which the contents of the
  extension value matches the specified criterion value.
 If the criterion value is <code>null</code>, no
  authorityKeyIdentifier check will be done. 
 <p>
  If <code>authorityKeyID</code> is not <code>null</code>, it
  should contain a single DER encoded value corresponding to the contents
  of the extension value (not including the object identifier,
  criticality setting, and encapsulating OCTET STRING)
  for an AuthorityKeyIdentifier extension.
  The ASN.1 notation for this structure follows. 
 @code
 AuthorityKeyIdentifier ::= SEQUENCE {
     keyIdentifier             [0] KeyIdentifier           OPTIONAL,
     authorityCertIssuer       [1] GeneralNames            OPTIONAL,
     authorityCertSerialNumber [2] CertificateSerialNumber OPTIONAL  }
  KeyIdentifier ::= OCTET STRING 
 
@endcode
  <p>
  Authority key identifiers are not parsed by the 
 <code>X509CertSelector</code>.  Instead, the values are
  compared using a byte-by-byte comparison. 
 <p>
  When the <code>keyIdentifier</code> field of 
 <code>AuthorityKeyIdentifier</code> is populated, the value is
  usually taken from the <code>SubjectKeyIdentifier</code> extension
  in the issuer's certificate.  Note, however, that the result of 
 <code>X509Certificate.getExtensionValue(<SubjectKeyIdentifier Object
  Identifier>)</code>
  on the issuer's certificate may NOT be used
  directly as the input to <code>setAuthorityKeyIdentifier</code>.
  This is because the SubjectKeyIdentifier contains
  only a KeyIdentifier OCTET STRING, and not a SEQUENCE of
  KeyIdentifier, GeneralNames, and CertificateSerialNumber.
  In order to use the extension value of the issuer certificate's 
 <code>SubjectKeyIdentifier</code>
  extension, it will be necessary to extract the value of the embedded 
 <code>KeyIdentifier</code> OCTET STRING, then DER encode this OCTET
  STRING inside a SEQUENCE.
  For more details on SubjectKeyIdentifier, see 
 <code>setSubjectKeyIdentifier(byte[] subjectKeyID)</code>.
  <p>
  Note also that the byte array supplied here is cloned to protect against
  subsequent modifications.
 @param authorityKeyID the authority key identifier         (or 
 <code>null</code> )
 - seealso: #getAuthorityKeyIdentifier
 */
- (void)setAuthorityKeyIdentifierWithByteArray:(IOSByteArray *)authorityKeyID;

/*!
 @brief Sets the basic constraints constraint.If the value is greater than or
  equal to zero, <code>X509Certificates</code> must include a
  basicConstraints extension with
  a pathLen of at least this value.
 If the value is -2, only end-entity
  certificates are accepted. If the value is -1, no check is done. 
 <p>
  This constraint is useful when building a certification path forward
  (from the target toward the trust anchor. If a partial path has been
  built, any candidate certificate must have a maxPathLen value greater
  than or equal to the number of certificates in the partial path.
 @param minMaxPathLen the value for the basic constraints constraint
 @throw IllegalArgumentExceptionif the value is less than -2
 - seealso: #getBasicConstraints
 */
- (void)setBasicConstraintsWithInt:(jint)minMaxPathLen;

/*!
 @brief Sets the certificateEquals criterion.The specified 
 <code>X509Certificate</code> must be equal to the 
 <code>X509Certificate</code> passed to the <code>match</code> method.
 If <code>null</code>, then this check is not applied. 
 <p>This method is particularly useful when it is necessary to
  match a single certificate. Although other criteria can be specified
  in conjunction with the certificateEquals criterion, it is usually not
  practical or necessary.
 @param cert the <code>X509Certificate</code>  to match (or
   <code>null</code> )
 - seealso: #getCertificate
 */
- (void)setCertificateWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert;

/*!
 @brief Sets the certificateValid criterion.The specified date must fall
  within the certificate validity period for the 
 <code>X509Certificate</code>.
 If <code>null</code>, no certificateValid
  check will be done. 
 <p>
  Note that the <code>Date</code> supplied here is cloned to protect
  against subsequent modifications.
 @param certValid the <code>Date</code>  to check (or <code>null</code> )
 - seealso: #getCertificateValid
 */
- (void)setCertificateValidWithJavaUtilDate:(JavaUtilDate *)certValid;

/*!
 @brief Sets the extendedKeyUsage criterion.The <code>X509Certificate</code>
  must allow the specified key purposes in its extended key usage
  extension.
 If <code>keyPurposeSet</code> is empty or <code>null</code>,
  no extendedKeyUsage check will be done. Note that an 
 <code>X509Certificate</code> that has no extendedKeyUsage extension
  implicitly allows all key purposes. 
 <p>
  Note that the <code>Set</code> is cloned to protect against
  subsequent modifications.
 @param keyPurposeSet a <code>Set</code>  of key purpose OIDs in string
   format (or <code>null</code> ). Each OID is represented by a set of  nonnegative integers separated by periods.
 @throw IOExceptionif the OID is invalid, such as
  the first component being not 0, 1 or 2 or the second component
  being greater than 39.
 - seealso: #getExtendedKeyUsage
 */
- (void)setExtendedKeyUsageWithJavaUtilSet:(id<JavaUtilSet>)keyPurposeSet;

/*!
 @brief Sets the issuer criterion.The specified distinguished name
  must match the issuer distinguished name in the 
 <code>X509Certificate</code>.
 If <code>null</code> is specified,
  the issuer criterion is disabled and any issuer distinguished name will
  do. 
 <p>
  If <code>issuerDN</code> is not <code>null</code>, it should contain a
  single DER encoded distinguished name, as defined in X.501. The ASN.1
  notation for this structure is as follows. 
 @code
 Name ::= CHOICE {
    RDNSequence }
  RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
  RelativeDistinguishedName ::=
    SET SIZE (1 .. MAX) OF AttributeTypeAndValue
  AttributeTypeAndValue ::= SEQUENCE {
    type     AttributeType,
    value    AttributeValue }
  AttributeType ::= OBJECT IDENTIFIER
  AttributeValue ::= ANY DEFINED BY AttributeType
  ....
  DirectoryString ::= CHOICE {
        teletexString           TeletexString (SIZE (1..MAX)),
        printableString         PrintableString (SIZE (1..MAX)),
        universalString         UniversalString (SIZE (1..MAX)),
        utf8String              UTF8String (SIZE (1.. MAX)),
        bmpString               BMPString (SIZE (1..MAX)) } 
 
@endcode
  <p>
  Note that the byte array specified here is cloned to protect against
  subsequent modifications.
 @param issuerDN a byte array containing the distinguished name                  in ASN.1 DER encoded form (or 
 <code>null</code> )
 @throw IOExceptionif an encoding error occurs (incorrect form for DN)
 */
- (void)setIssuerWithByteArray:(IOSByteArray *)issuerDN;

/*!
 @brief <strong>Denigrated</strong>, use setIssuer(X500Principal)
  or setIssuer(byte[]) instead.This method should not be
  relied on as it can fail to match some certificates because of a loss of
  encoding information in the 
 <a href="http://www.ietf.org/rfc/rfc2253.txt">RFC 2253</a> String form
  of some distinguished names.
 <p>
  Sets the issuer criterion. The specified distinguished name
  must match the issuer distinguished name in the 
 <code>X509Certificate</code>. If <code>null</code>, any issuer
  distinguished name will do. 
 <p>
  If <code>issuerDN</code> is not <code>null</code>, it should contain a
  distinguished name, in RFC 2253 format.
 @param issuerDN a distinguished name in RFC 2253 format                  (or 
 <code>null</code> )
 @throw IOExceptionif a parsing error occurs (incorrect form for DN)
 */
- (void)setIssuerWithNSString:(NSString *)issuerDN;

/*!
 @brief Sets the issuer criterion.The specified distinguished name
  must match the issuer distinguished name in the 
 <code>X509Certificate</code>.
 If <code>null</code>, any issuer
  distinguished name will do.
 @param issuer a distinguished name as X500Principal                  (or 
 <code>null</code> )
 @since 1.5
 */
- (void)setIssuerWithJavaxSecurityAuthX500X500Principal:(JavaxSecurityAuthX500X500Principal *)issuer;

/*!
 @brief Sets the keyUsage criterion.The <code>X509Certificate</code>
  must allow the specified keyUsage values.
 If <code>null</code>, no
  keyUsage check will be done. Note that an <code>X509Certificate</code>
  that has no keyUsage extension implicitly allows all keyUsage values. 
 <p>
  Note that the boolean array supplied here is cloned to protect against
  subsequent modifications.
 @param keyUsage a boolean array in the same format as the boolean                  array returned by
   <code>X509Certificate.getKeyUsage()</code>
  .                  Or 
 <code>null</code> .
 - seealso: #getKeyUsage
 */
- (void)setKeyUsageWithBooleanArray:(IOSBooleanArray *)keyUsage;

/*!
 @brief Enables/disables matching all of the subjectAlternativeNames
  specified in the <code>setSubjectAlternativeNames</code>
  or <code>addSubjectAlternativeName</code>
  methods.If enabled,
  the <code>X509Certificate</code> must contain all of the
  specified subject alternative names.
 If disabled, the 
 <code>X509Certificate</code> must contain at least one of the
  specified subject alternative names. 
 <p>The matchAllNames flag is <code>true</code> by default.
 @param matchAllNames if <code>true</code> , the flag is enabled;
   if <code>false</code> , the flag is disabled.
 - seealso: #getMatchAllSubjectAltNames
 */
- (void)setMatchAllSubjectAltNamesWithBoolean:(jboolean)matchAllNames;

/*!
 @brief Sets the name constraints criterion.The <code>X509Certificate</code>
  must have subject and subject alternative names that
  meet the specified name constraints.
 <p>
  The name constraints are specified as a byte array. This byte array
  should contain the DER encoded form of the name constraints, as they
  would appear in the NameConstraints structure defined in RFC 3280
  and X.509. The ASN.1 definition of this structure appears below. 
 @code
 NameConstraints ::= SEQUENCE {
        permittedSubtrees       [0]     GeneralSubtrees OPTIONAL,
        excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }
   GeneralSubtrees ::= SEQUENCE SIZE (1..MAX) OF GeneralSubtree
   GeneralSubtree ::= SEQUENCE {
        base                    GeneralName,
        minimum         [0]     BaseDistance DEFAULT 0,
        maximum         [1]     BaseDistance OPTIONAL }
   BaseDistance ::= INTEGER (0..MAX)
   GeneralName ::= CHOICE {
        otherName                       [0]     OtherName,
        rfc822Name                      [1]     IA5String,
        dNSName                         [2]     IA5String,
        x400Address                     [3]     ORAddress,
        directoryName                   [4]     Name,
        ediPartyName                    [5]     EDIPartyName,
        uniformResourceIdentifier       [6]     IA5String,
        iPAddress                       [7]     OCTET STRING,
        registeredID                    [8]     OBJECT IDENTIFIER} 
 
@endcode
  <p>
  Note that the byte array supplied here is cloned to protect against
  subsequent modifications.
 @param bytes a byte array containing the ASN.1 DER encoding of               a NameConstraints extension to be used for checking
                name constraints. Only the value of the extension is
                included, not the OID or criticality flag. Can be
                <code>null</code>
  ,               in which case no name constraints check will be performed.
 @throw IOExceptionif a parsing error occurs
 - seealso: #getNameConstraints
 */
- (void)setNameConstraintsWithByteArray:(IOSByteArray *)bytes;

/*!
 @brief Sets the pathToNames criterion.The <code>X509Certificate</code> must
  not include name constraints that would prohibit building a
  path to the specified names.
 <p>
  This method allows the caller to specify, with a single method call,
  the complete set of names which the <code>X509Certificates</code>'s
  name constraints must permit. The specified value replaces
  the previous value for the pathToNames criterion. 
 <p>
  This constraint is useful when building a certification path forward
  (from the target toward the trust anchor. If a partial path has been
  built, any candidate certificate must not include name constraints that
  would prohibit building a path to any of the names in the partial path. 
 <p>
  The <code>names</code> parameter (if not <code>null</code>) is a 
 <code>Collection</code> with one
  entry for each name to be included in the pathToNames
  criterion. Each entry is a <code>List</code> whose first entry is an 
 <code>Integer</code> (the name type, 0-8) and whose second
  entry is a <code>String</code> or a byte array (the name, in
  string or ASN.1 DER encoded form, respectively).
  There can be multiple names of the same type. If <code>null</code>
  is supplied as the value for this argument, no
  pathToNames check will be performed. 
 <p>
  Each name in the <code>Collection</code>
  may be specified either as a <code>String</code> or as an ASN.1 encoded
  byte array. For more details about the formats used, see 
 <code>addPathToName(int type, String name)</code>
  and 
 <code>addPathToName(int type, byte [] name)</code>
 .
  <p>
  <strong>Note:</strong> for distinguished names, specify the byte
  array form instead of the String form. See the note in 
 <code>addPathToName(int, String)</code> for more information. 
 <p>
  Note that the <code>names</code> parameter can contain duplicate
  names (same name and name type), but they may be removed from the 
 <code>Collection</code> of names returned by the 
 <code>getPathToNames</code> method. 
 <p>
  Note that a deep copy is performed on the <code>Collection</code> to
  protect against subsequent modifications.
 @param names a <code>Collection</code>  with one entry per name
                (or <code>null</code> )
 @throw IOExceptionif a parsing error occurs
 - seealso: #getPathToNames
 */
- (void)setPathToNamesWithJavaUtilCollection:(id<JavaUtilCollection>)names;

/*!
 @brief Sets the policy constraint.The <code>X509Certificate</code> must
  include at least one of the specified policies in its certificate
  policies extension.
 If <code>certPolicySet</code> is empty, then the 
 <code>X509Certificate</code> must include at least some specified policy
  in its certificate policies extension. If <code>certPolicySet</code> is 
 <code>null</code>, no policy check will be performed. 
 <p>
  Note that the <code>Set</code> is cloned to protect against
  subsequent modifications.
 @param certPolicySet a <code>Set</code>  of certificate policy OIDs in
                        string format (or <code>null</code> ). Each OID is                       represented by a set of nonnegative integers
                      separated by periods.
 @throw IOExceptionif a parsing error occurs on the OID such as
  the first component is not 0, 1 or 2 or the second component is
  greater than 39.
 - seealso: #getPolicy
 */
- (void)setPolicyWithJavaUtilSet:(id<JavaUtilSet>)certPolicySet;

/*!
 @brief Sets the privateKeyValid criterion.The specified date must fall
  within the private key validity period for the 
 <code>X509Certificate</code>.
 If <code>null</code>, no privateKeyValid
  check will be done. 
 <p>
  Note that the <code>Date</code> supplied here is cloned to protect
  against subsequent modifications.
 @param privateKeyValid the <code>Date</code>  to check (or
                          <code>null</code> )
 - seealso: #getPrivateKeyValid
 */
- (void)setPrivateKeyValidWithJavaUtilDate:(JavaUtilDate *)privateKeyValid;

/*!
 @brief Sets the serialNumber criterion.The specified serial number
  must match the certificate serial number in the 
 <code>X509Certificate</code>.
 If <code>null</code>, any certificate
  serial number will do.
 @param serial the certificate serial number to match         (or 
 <code>null</code> )
 - seealso: #getSerialNumber
 */
- (void)setSerialNumberWithJavaMathBigInteger:(JavaMathBigInteger *)serial;

/*!
 @brief Sets the subject criterion.The specified distinguished name
  must match the subject distinguished name in the 
 <code>X509Certificate</code>.
 If <code>null</code>, any subject
  distinguished name will do. 
 <p>
  If <code>subjectDN</code> is not <code>null</code>, it should contain a
  single DER encoded distinguished name, as defined in X.501. For the ASN.1
  notation for this structure, see 
 <code>setIssuer(byte [] issuerDN)</code>.
 @param subjectDN a byte array containing the distinguished name in                   ASN.1 DER format (or 
 <code>null</code> )
 @throw IOExceptionif an encoding error occurs (incorrect form for DN)
 */
- (void)setSubjectWithByteArray:(IOSByteArray *)subjectDN;

/*!
 @brief <strong>Denigrated</strong>, use setSubject(X500Principal)
  or setSubject(byte[]) instead.This method should not be
  relied on as it can fail to match some certificates because of a loss of
  encoding information in the RFC 2253 String form of some distinguished
  names.
 <p>
  Sets the subject criterion. The specified distinguished name
  must match the subject distinguished name in the 
 <code>X509Certificate</code>. If <code>null</code>, any subject
  distinguished name will do. 
 <p>
  If <code>subjectDN</code> is not <code>null</code>, it should contain a
  distinguished name, in RFC 2253 format.
 @param subjectDN a distinguished name in RFC 2253 format                   (or 
 <code>null</code> )
 @throw IOExceptionif a parsing error occurs (incorrect form for DN)
 */
- (void)setSubjectWithNSString:(NSString *)subjectDN;

/*!
 @brief Sets the subject criterion.The specified distinguished name
  must match the subject distinguished name in the 
 <code>X509Certificate</code>.
 If <code>null</code>, any subject
  distinguished name will do.
 @param subject a distinguished name as X500Principal                   (or 
 <code>null</code> )
 @since 1.5
 */
- (void)setSubjectWithJavaxSecurityAuthX500X500Principal:(JavaxSecurityAuthX500X500Principal *)subject;

/*!
 @brief Sets the subjectAlternativeNames criterion.The
  <code>X509Certificate</code> must contain all or at least one of the
  specified subjectAlternativeNames, depending on the value of
  the matchAllNames flag (see <code>setMatchAllSubjectAltNames</code>
 ).
 <p>
  This method allows the caller to specify, with a single method call,
  the complete set of subject alternative names for the
  subjectAlternativeNames criterion. The specified value replaces
  the previous value for the subjectAlternativeNames criterion. 
 <p>
  The <code>names</code> parameter (if not <code>null</code>) is a 
 <code>Collection</code> with one
  entry for each name to be included in the subject alternative name
  criterion. Each entry is a <code>List</code> whose first entry is an 
 <code>Integer</code> (the name type, 0-8) and whose second
  entry is a <code>String</code> or a byte array (the name, in
  string or ASN.1 DER encoded form, respectively).
  There can be multiple names of the same type. If <code>null</code>
  is supplied as the value for this argument, no
  subjectAlternativeNames check will be performed. 
 <p>
  Each subject alternative name in the <code>Collection</code>
  may be specified either as a <code>String</code> or as an ASN.1 encoded
  byte array. For more details about the formats used, see 
 <code>addSubjectAlternativeName(int type, String name)</code>
  and 
 <code>addSubjectAlternativeName(int type, byte [] name)</code>
 .
  <p>
  <strong>Note:</strong> for distinguished names, specify the byte
  array form instead of the String form. See the note in 
 <code>addSubjectAlternativeName(int, String)</code> for more information. 
 <p>
  Note that the <code>names</code> parameter can contain duplicate
  names (same name and name type), but they may be removed from the 
 <code>Collection</code> of names returned by the 
 <code>getSubjectAlternativeNames</code> method. 
 <p>
  Note that a deep copy is performed on the <code>Collection</code> to
  protect against subsequent modifications.
 @param names a <code>Collection</code>  of names (or <code>null</code> )
 @throw IOExceptionif a parsing error occurs
 - seealso: #getSubjectAlternativeNames
 */
- (void)setSubjectAlternativeNamesWithJavaUtilCollection:(id<JavaUtilCollection>)names;

/*!
 @brief Sets the subjectKeyIdentifier criterion.The
  <code>X509Certificate</code> must contain a SubjectKeyIdentifier
  extension for which the contents of the extension
  matches the specified criterion value.
 If the criterion value is <code>null</code>, no
  subjectKeyIdentifier check will be done. 
 <p>
  If <code>subjectKeyID</code> is not <code>null</code>, it
  should contain a single DER encoded value corresponding to the contents
  of the extension value (not including the object identifier,
  criticality setting, and encapsulating OCTET STRING)
  for a SubjectKeyIdentifier extension.
  The ASN.1 notation for this structure follows. 
 @code
 SubjectKeyIdentifier ::= KeyIdentifier
  KeyIdentifier ::= OCTET STRING 
 
@endcode
  <p>
  Since the format of subject key identifiers is not mandated by
  any standard, subject key identifiers are not parsed by the 
 <code>X509CertSelector</code>. Instead, the values are compared using
  a byte-by-byte comparison. 
 <p>
  Note that the byte array supplied here is cloned to protect against
  subsequent modifications.
 @param subjectKeyID the subject key identifier (or <code>null</code> )
 - seealso: #getSubjectKeyIdentifier
 */
- (void)setSubjectKeyIdentifierWithByteArray:(IOSByteArray *)subjectKeyID;

/*!
 @brief Sets the subjectPublicKey criterion.The <code>X509Certificate</code>
  must contain the specified subject public key.
 If <code>null</code>,
  no subjectPublicKey check will be done. 
 <p>
  Because this method allows the public key to be specified as a byte
  array, it may be used for unknown key types. 
 <p>
  If <code>key</code> is not <code>null</code>, it should contain a
  single DER encoded SubjectPublicKeyInfo structure, as defined in X.509.
  The ASN.1 notation for this structure is as follows. 
 @code
 SubjectPublicKeyInfo  ::=  SEQUENCE  {
    algorithm            AlgorithmIdentifier,
    subjectPublicKey     BIT STRING  }
  AlgorithmIdentifier  ::=  SEQUENCE  {
    algorithm               OBJECT IDENTIFIER,
    parameters              ANY DEFINED BY algorithm OPTIONAL  }
                               -- contains a value of the type
                               -- registered for use with the
                               -- algorithm object identifier value 
 
@endcode
  <p>
  Note that the byte array supplied here is cloned to protect against
  subsequent modifications.
 @param key a byte array containing the subject public key in ASN.1 DER             form (or 
 <code>null</code> )
 @throw IOExceptionif an encoding error occurs (incorrect form for
  subject public key)
 - seealso: #getSubjectPublicKey
 */
- (void)setSubjectPublicKeyWithByteArray:(IOSByteArray *)key;

/*!
 @brief Sets the subjectPublicKey criterion.The
  <code>X509Certificate</code> must contain the specified subject public
  key.
 If <code>null</code>, no subjectPublicKey check will be done.
 @param key the subject public key to check for (or <code>null</code> )
 - seealso: #getSubjectPublicKey
 */
- (void)setSubjectPublicKeyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key;

/*!
 @brief Sets the subjectPublicKeyAlgID criterion.The
  <code>X509Certificate</code> must contain a subject public key
  with the specified algorithm.
 If <code>null</code>, no
  subjectPublicKeyAlgID check will be done.
 @param oid The object identifier (OID) of the algorithm to check             for (or 
 <code>null</code> ). An OID is represented by a             set of nonnegative integers separated by periods.
 @throw IOExceptionif the OID is invalid, such as
  the first component being not 0, 1 or 2 or the second component
  being greater than 39.
 - seealso: #getSubjectPublicKeyAlgID
 */
- (void)setSubjectPublicKeyAlgIDWithNSString:(NSString *)oid;

/*!
 @brief Return a printable representation of the <code>CertSelector</code>.
 @return a <code>String</code> describing the contents of the
          <code>CertSelector</code>
 */
- (NSString *)description;

#pragma mark Package-Private

/*!
 @brief Compare for equality two objects of the form passed to
  setSubjectAlternativeNames (or X509CRLSelector.setIssuerNames).
 Throw an <code>IllegalArgumentException</code> or a 
 <code>ClassCastException</code> if one of the objects is malformed.
 @param object1 a Collection containing the first object to compare
 @param object2 a Collection containing the second object to compare
 @return true if the objects are equal, false otherwise
 */
+ (jboolean)equalNamesWithJavaUtilCollection:(id<JavaUtilCollection>)object1
                      withJavaUtilCollection:(id<JavaUtilCollection>)object2;

/*!
 @brief Make a <code>GeneralNameInterface</code> out of a name type (0-8) and an
  Object that may be a byte array holding the ASN.1 DER encoded
  name or a String form of the name.Except for X.509
  Distinguished Names, the String form of the name must not be the
  result from calling toString on an existing GeneralNameInterface
  implementing class.
 The output of toString is not compatible
  with the String constructors for names other than Distinguished
  Names.
 @param type name type (0-8)
 @param name name as ASN.1 Der-encoded byte array or String
 @return a GeneralNameInterface name
 @throw IOExceptionif a parsing error occurs
 */
+ (id<SunSecurityX509GeneralNameInterface>)makeGeneralNameInterfaceWithInt:(jint)type
                                                                    withId:(id)name;

- (void)setPathToNamesInternalWithJavaUtilSet:(id<JavaUtilSet>)names;

@end

J2OBJC_STATIC_INIT(JavaSecurityCertX509CertSelector)

inline jint JavaSecurityCertX509CertSelector_get_NAME_ANY(void);
#define JavaSecurityCertX509CertSelector_NAME_ANY 0
J2OBJC_STATIC_FIELD_CONSTANT(JavaSecurityCertX509CertSelector, NAME_ANY, jint)

inline jint JavaSecurityCertX509CertSelector_get_NAME_RFC822(void);
#define JavaSecurityCertX509CertSelector_NAME_RFC822 1
J2OBJC_STATIC_FIELD_CONSTANT(JavaSecurityCertX509CertSelector, NAME_RFC822, jint)

inline jint JavaSecurityCertX509CertSelector_get_NAME_DNS(void);
#define JavaSecurityCertX509CertSelector_NAME_DNS 2
J2OBJC_STATIC_FIELD_CONSTANT(JavaSecurityCertX509CertSelector, NAME_DNS, jint)

inline jint JavaSecurityCertX509CertSelector_get_NAME_X400(void);
#define JavaSecurityCertX509CertSelector_NAME_X400 3
J2OBJC_STATIC_FIELD_CONSTANT(JavaSecurityCertX509CertSelector, NAME_X400, jint)

inline jint JavaSecurityCertX509CertSelector_get_NAME_DIRECTORY(void);
#define JavaSecurityCertX509CertSelector_NAME_DIRECTORY 4
J2OBJC_STATIC_FIELD_CONSTANT(JavaSecurityCertX509CertSelector, NAME_DIRECTORY, jint)

inline jint JavaSecurityCertX509CertSelector_get_NAME_EDI(void);
#define JavaSecurityCertX509CertSelector_NAME_EDI 5
J2OBJC_STATIC_FIELD_CONSTANT(JavaSecurityCertX509CertSelector, NAME_EDI, jint)

inline jint JavaSecurityCertX509CertSelector_get_NAME_URI(void);
#define JavaSecurityCertX509CertSelector_NAME_URI 6
J2OBJC_STATIC_FIELD_CONSTANT(JavaSecurityCertX509CertSelector, NAME_URI, jint)

inline jint JavaSecurityCertX509CertSelector_get_NAME_IP(void);
#define JavaSecurityCertX509CertSelector_NAME_IP 7
J2OBJC_STATIC_FIELD_CONSTANT(JavaSecurityCertX509CertSelector, NAME_IP, jint)

inline jint JavaSecurityCertX509CertSelector_get_NAME_OID(void);
#define JavaSecurityCertX509CertSelector_NAME_OID 8
J2OBJC_STATIC_FIELD_CONSTANT(JavaSecurityCertX509CertSelector, NAME_OID, jint)

FOUNDATION_EXPORT void JavaSecurityCertX509CertSelector_init(JavaSecurityCertX509CertSelector *self);

FOUNDATION_EXPORT JavaSecurityCertX509CertSelector *new_JavaSecurityCertX509CertSelector_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityCertX509CertSelector *create_JavaSecurityCertX509CertSelector_init(void);

FOUNDATION_EXPORT jboolean JavaSecurityCertX509CertSelector_equalNamesWithJavaUtilCollection_withJavaUtilCollection_(id<JavaUtilCollection> object1, id<JavaUtilCollection> object2);

FOUNDATION_EXPORT id<SunSecurityX509GeneralNameInterface> JavaSecurityCertX509CertSelector_makeGeneralNameInterfaceWithInt_withId_(jint type, id name);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityCertX509CertSelector)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSecurityCertX509CertSelector")
