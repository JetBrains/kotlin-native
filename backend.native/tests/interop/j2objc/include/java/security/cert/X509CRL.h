//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/security/cert/X509CRL.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecurityCertX509CRL")
#ifdef RESTRICT_JavaSecurityCertX509CRL
#define INCLUDE_ALL_JavaSecurityCertX509CRL 0
#else
#define INCLUDE_ALL_JavaSecurityCertX509CRL 1
#endif
#undef RESTRICT_JavaSecurityCertX509CRL

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSecurityCertX509CRL_) && (INCLUDE_ALL_JavaSecurityCertX509CRL || defined(INCLUDE_JavaSecurityCertX509CRL))
#define JavaSecurityCertX509CRL_

#define RESTRICT_JavaSecurityCertCRL 1
#define INCLUDE_JavaSecurityCertCRL 1
#include "java/security/cert/CRL.h"

#define RESTRICT_JavaSecurityCertX509Extension 1
#define INCLUDE_JavaSecurityCertX509Extension 1
#include "java/security/cert/X509Extension.h"

@class IOSByteArray;
@class JavaMathBigInteger;
@class JavaSecurityCertX509CRLEntry;
@class JavaSecurityCertX509Certificate;
@class JavaSecurityProvider;
@class JavaUtilDate;
@class JavaxSecurityAuthX500X500Principal;
@protocol JavaSecurityPrincipal;
@protocol JavaSecurityPublicKey;
@protocol JavaUtilSet;

/*!
 @brief <p>
  Abstract class for an X.509 Certificate Revocation List (CRL).
 A CRL is a time-stamped list identifying revoked certificates.
  It is signed by a Certificate Authority (CA) and made freely
  available in a public repository. 
 <p>Each revoked certificate is
  identified in a CRL by its certificate serial number. When a
  certificate-using system uses a certificate (e.g., for verifying a
  remote user's digital signature), that system not only checks the
  certificate signature and validity but also acquires a suitably-
  recent CRL and checks that the certificate serial number is not on
  that CRL.  The meaning of "suitably-recent" may vary with local
  policy, but it usually means the most recently-issued CRL.  A CA
  issues a new CRL on a regular periodic basis (e.g., hourly, daily, or
  weekly).  Entries are added to CRLs as revocations occur, and an
  entry may be removed when the certificate expiration date is reached. 
 <p>
  The X.509 v2 CRL format is described below in ASN.1: 
 @code

  CertificateList  ::=  SEQUENCE  {
      tbsCertList          TBSCertList,
      signatureAlgorithm   AlgorithmIdentifier,
      signature            BIT STRING  } 
  
@endcode
  <p>
  More information can be found in 
 <a href="http://www.ietf.org/rfc/rfc3280.txt">RFC 3280: Internet X.509
  Public Key Infrastructure Certificate and CRL Profile</a>.
  <p>
  The ASN.1 definition of <code>tbsCertList</code> is: 
 @code

  TBSCertList  ::=  SEQUENCE  {
      version                 Version OPTIONAL,
                              -- if present, must be v2
      signature               AlgorithmIdentifier,
      issuer                  Name,
      thisUpdate              ChoiceOfTime,
      nextUpdate              ChoiceOfTime OPTIONAL,
      revokedCertificates     SEQUENCE OF SEQUENCE  {
          userCertificate         CertificateSerialNumber,
          revocationDate          ChoiceOfTime,
          crlEntryExtensions      Extensions OPTIONAL
                                  -- if present, must be v2
          }  OPTIONAL,
      crlExtensions           [0]  EXPLICIT Extensions OPTIONAL
                                   -- if present, must be v2
      } 
  
@endcode
  <p>
  CRLs are instantiated using a certificate factory. The following is an
  example of how to instantiate an X.509 CRL: 
 @code
 try (InputStream inStream = new FileInputStream("fileName-of-crl")) {
      CertificateFactory cf = CertificateFactory.getInstance("X.509");
      X509CRL crl = (X509CRL)cf.generateCRL(inStream);
  } 
 
@endcode
 @author Hemma Prafullchandra
 - seealso: CRL
 - seealso: CertificateFactory
 - seealso: X509Extension
 */
@interface JavaSecurityCertX509CRL : JavaSecurityCertCRL < JavaSecurityCertX509Extension >

#pragma mark Public

/*!
 @brief Compares this CRL for equality with the given
  object.If the <code>other</code> object is an 
 <code>instanceof</code> <code>X509CRL</code>, then
  its encoded form is retrieved and compared with the
  encoded form of this CRL.
 @param other the object to test for equality with this CRL.
 @return true iff the encoded forms of the two CRLs
  match, false otherwise.
 */
- (jboolean)isEqual:(id)other;

/*!
 @brief Returns the ASN.1 DER-encoded form of this CRL.
 @return the encoded form of this certificate
 @throw CRLExceptionif an encoding error occurs.
 */
- (IOSByteArray *)getEncoded;

/*!
 @brief <strong>Denigrated</strong>, replaced by getIssuerX500Principal()
 .This method returns the <code>issuer</code>
  as an implementation specific Principal object, which should not be
  relied upon by portable code.
 <p>
  Gets the <code>issuer</code> (issuer distinguished name) value from
  the CRL. The issuer name identifies the entity that signed (and
  issued) the CRL. 
 <p>The issuer name field contains an
  X.500 distinguished name (DN).
  The ASN.1 definition for this is: 
 @code

  issuer    Name
  Name ::= CHOICE { RDNSequence }
  RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
  RelativeDistinguishedName ::=
      SET OF AttributeValueAssertion
  AttributeValueAssertion ::= SEQUENCE {
                                AttributeType,
                                AttributeValue }
  AttributeType ::= OBJECT IDENTIFIER
  AttributeValue ::= ANY 
  
@endcode
  The <code>Name</code> describes a hierarchical name composed of
  attributes,
  such as country name, and corresponding values, such as US.
  The type of the <code>AttributeValue</code> component is determined by
  the <code>AttributeType</code>; in general it will be a 
 <code>directoryString</code>. A <code>directoryString</code> is usually
  one of <code>PrintableString</code>,
  <code>TeletexString</code> or <code>UniversalString</code>.
 @return a Principal whose name is the issuer distinguished name.
 */
- (id<JavaSecurityPrincipal>)getIssuerDN;

/*!
 @brief Returns the issuer (issuer distinguished name) value from the
  CRL as an <code>X500Principal</code>.
 <p>
  It is recommended that subclasses override this method.
 @return an <code>X500Principal</code> representing the issuer
           distinguished name
 @since 1.4
 */
- (JavaxSecurityAuthX500X500Principal *)getIssuerX500Principal;

/*!
 @brief Gets the <code>nextUpdate</code> date from the CRL.
 @return the <code>nextUpdate</code> date from the CRL, or null if
  not present.
 */
- (JavaUtilDate *)getNextUpdate;

/*!
 @brief Gets the CRL entry, if any, with the given certificate serialNumber.
 @param serialNumber the serial number of the certificate for which a CRL entry  is to be looked up
 @return the entry with the given serial number, or null if no such entry
  exists in this CRL.
 - seealso: X509CRLEntry
 */
- (JavaSecurityCertX509CRLEntry *)getRevokedCertificateWithJavaMathBigInteger:(JavaMathBigInteger *)serialNumber;

/*!
 @brief Get the CRL entry, if any, for the given certificate.
 <p>This method can be used to lookup CRL entries in indirect CRLs,
  that means CRLs that contain entries from issuers other than the CRL
  issuer. The default implementation will only return entries for
  certificates issued by the CRL issuer. Subclasses that wish to
  support indirect CRLs should override this method.
 @param certificate the certificate for which a CRL entry is to be looked    up
 @return the entry for the given certificate, or null if no such entry
    exists in this CRL.
 @throw NullPointerExceptionif certificate is null
 @since 1.5
 */
- (JavaSecurityCertX509CRLEntry *)getRevokedCertificateWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)certificate;

/*!
 @brief Gets all the entries from this CRL.
 This returns a Set of X509CRLEntry objects.
 @return all the entries or null if there are none present.
 - seealso: X509CRLEntry
 */
- (id<JavaUtilSet>)getRevokedCertificates;

/*!
 @brief Gets the signature algorithm name for the CRL
  signature algorithm.An example is the string "SHA256withRSA".
 The ASN.1 definition for this is: 
 @code

  signatureAlgorithm   AlgorithmIdentifier
  AlgorithmIdentifier  ::=  SEQUENCE  {
      algorithm               OBJECT IDENTIFIER,
      parameters              ANY DEFINED BY algorithm OPTIONAL  }
                              -- contains a value of the type
                              -- registered for use with the
                              -- algorithm object identifier value 
  
@endcode
  
 <p>The algorithm name is determined from the <code>algorithm</code>
  OID string.
 @return the signature algorithm name.
 */
- (NSString *)getSigAlgName;

/*!
 @brief Gets the signature algorithm OID string from the CRL.
 An OID is represented by a set of nonnegative whole numbers separated
  by periods.
  For example, the string "1.2.840.10040.4.3" identifies the SHA-1
  with DSA signature algorithm defined in 
 <a href="http://www.ietf.org/rfc/rfc3279.txt">RFC 3279: Algorithms and
  Identifiers for the Internet X.509 Public Key Infrastructure Certificate
  and CRL Profile</a>.
  
 <p>See <code>getSigAlgName</code> for
  relevant ASN.1 definitions.
 @return the signature algorithm OID string.
 */
- (NSString *)getSigAlgOID;

/*!
 @brief Gets the DER-encoded signature algorithm parameters from this
  CRL's signature algorithm.In most cases, the signature
  algorithm parameters are null; the parameters are usually
  supplied with the public key.
 If access to individual parameter values is needed then use 
 <code>AlgorithmParameters</code>
  and instantiate with the name returned by 
 <code>getSigAlgName</code>.
  
 <p>See <code>getSigAlgName</code> for
  relevant ASN.1 definitions.
 @return the DER-encoded signature algorithm parameters, or
          null if no parameters are present.
 */
- (IOSByteArray *)getSigAlgParams;

/*!
 @brief Gets the <code>signature</code> value (the raw signature bits) from
  the CRL.
 The ASN.1 definition for this is: 
 @code

  signature     BIT STRING 
  
@endcode
 @return the signature.
 */
- (IOSByteArray *)getSignature;

/*!
 @brief Gets the DER-encoded CRL information, the 
 <code>tbsCertList</code> from this CRL.
 This can be used to verify the signature independently.
 @return the DER-encoded CRL information.
 @throw CRLExceptionif an encoding error occurs.
 */
- (IOSByteArray *)getTBSCertList;

/*!
 @brief Gets the <code>thisUpdate</code> date from the CRL.
 The ASN.1 definition for this is: 
 @code

  thisUpdate   ChoiceOfTime
  ChoiceOfTime ::= CHOICE {
      utcTime        UTCTime,
      generalTime    GeneralizedTime } 
  
@endcode
 @return the <code>thisUpdate</code> date from the CRL.
 */
- (JavaUtilDate *)getThisUpdate;

/*!
 @brief Gets the <code>version</code> (version number) value from the CRL.
 The ASN.1 definition for this is: 
 @code

  version    Version OPTIONAL,
              -- if present, must be v2
  Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }
              -- v3 does not apply to CRLs but appears for consistency
              -- with definition of Version for certs 
  
@endcode
 @return the version number, i.e. 1 or 2.
 */
- (jint)getVersion;

/*!
 @brief Returns a hashcode value for this CRL from its
  encoded form.
 @return the hashcode value.
 */
- (NSUInteger)hash;

/*!
 @brief Verifies that this CRL was signed using the
  private key that corresponds to the given public key.
 @param key the PublicKey used to carry out the verification.
 @throw NoSuchAlgorithmExceptionon unsupported signature
  algorithms.
 @throw InvalidKeyExceptionon incorrect key.
 @throw NoSuchProviderExceptionif there's no default provider.
 @throw SignatureExceptionon signature errors.
 @throw CRLExceptionon encoding errors.
 */
- (void)verifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key;

/*!
 @brief Verifies that this CRL was signed using the
  private key that corresponds to the given public key.
 This method uses the signature verification engine
  supplied by the given provider. Note that the specified Provider object
  does not have to be registered in the provider list.
  This method was added to version 1.8 of the Java Platform Standard
  Edition. In order to maintain backwards compatibility with existing
  service providers, this method is not <code>abstract</code>
  and it provides a default implementation.
 @param key the PublicKey used to carry out the verification.
 @param sigProvider the signature provider.
 @throw NoSuchAlgorithmExceptionon unsupported signature
  algorithms.
 @throw InvalidKeyExceptionon incorrect key.
 @throw SignatureExceptionon signature errors.
 @throw CRLExceptionon encoding errors.
 @since 1.8
 */
- (void)verifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
               withJavaSecurityProvider:(JavaSecurityProvider *)sigProvider;

/*!
 @brief Verifies that this CRL was signed using the
  private key that corresponds to the given public key.
 This method uses the signature verification engine
  supplied by the given provider.
 @param key the PublicKey used to carry out the verification.
 @param sigProvider the name of the signature provider.
 @throw NoSuchAlgorithmExceptionon unsupported signature
  algorithms.
 @throw InvalidKeyExceptionon incorrect key.
 @throw NoSuchProviderExceptionon incorrect provider.
 @throw SignatureExceptionon signature errors.
 @throw CRLExceptionon encoding errors.
 */
- (void)verifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
                           withNSString:(NSString *)sigProvider;

#pragma mark Protected

/*!
 @brief Constructor for X.509 CRLs.
 */
- (instancetype __nonnull)init;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityCertX509CRL)

FOUNDATION_EXPORT void JavaSecurityCertX509CRL_init(JavaSecurityCertX509CRL *self);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityCertX509CRL)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSecurityCertX509CRL")
