//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/security/cert/X509Certificate.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecurityCertX509Certificate")
#ifdef RESTRICT_JavaSecurityCertX509Certificate
#define INCLUDE_ALL_JavaSecurityCertX509Certificate 0
#else
#define INCLUDE_ALL_JavaSecurityCertX509Certificate 1
#endif
#undef RESTRICT_JavaSecurityCertX509Certificate

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSecurityCertX509Certificate_) && (INCLUDE_ALL_JavaSecurityCertX509Certificate || defined(INCLUDE_JavaSecurityCertX509Certificate))
#define JavaSecurityCertX509Certificate_

#define RESTRICT_JavaSecurityCertCertificate 1
#define INCLUDE_JavaSecurityCertCertificate 1
#include "java/security/cert/Certificate.h"

#define RESTRICT_JavaSecurityCertX509Extension 1
#define INCLUDE_JavaSecurityCertX509Extension 1
#include "java/security/cert/X509Extension.h"

@class IOSBooleanArray;
@class IOSByteArray;
@class JavaMathBigInteger;
@class JavaSecurityProvider;
@class JavaUtilDate;
@class JavaxSecurityAuthX500X500Principal;
@protocol JavaSecurityPrincipal;
@protocol JavaSecurityPublicKey;
@protocol JavaUtilCollection;
@protocol JavaUtilList;

/*!
 @brief <p>
  Abstract class for X.509 certificates.
 This provides a standard
  way to access all the attributes of an X.509 certificate. 
 <p>
  In June of 1996, the basic X.509 v3 format was completed by
  ISO/IEC and ANSI X9, which is described below in ASN.1: 
 @code

  Certificate  ::=  SEQUENCE  {
      tbsCertificate       TBSCertificate,
      signatureAlgorithm   AlgorithmIdentifier,
      signature            BIT STRING  } 
  
@endcode
  <p>
  These certificates are widely used to support authentication and
  other functionality in Internet security systems. Common applications
  include Privacy Enhanced Mail (PEM), Transport Layer Security (SSL),
  code signing for trusted software distribution, and Secure Electronic
  Transactions (SET). 
 <p>
  These certificates are managed and vouched for by <em>Certificate
  Authorities</em> (CAs). CAs are services which create certificates by
  placing data in the X.509 standard format and then digitally signing
  that data. CAs act as trusted third parties, making introductions
  between principals who have no direct knowledge of each other.
  CA certificates are either signed by themselves, or by some other
  CA such as a "root" CA. 
 <p>
  More information can be found in 
 <a href="http://www.ietf.org/rfc/rfc3280.txt">RFC 3280: Internet X.509
  Public Key Infrastructure Certificate and CRL Profile</a>.
  <p>
  The ASN.1 definition of <code>tbsCertificate</code> is: 
 @code

  TBSCertificate  ::=  SEQUENCE  {
      version         [0]  EXPLICIT Version DEFAULT v1,
      serialNumber         CertificateSerialNumber,
      signature            AlgorithmIdentifier,
      issuer               Name,
      validity             Validity,
      subject              Name,
      subjectPublicKeyInfo SubjectPublicKeyInfo,
      issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,
                           -- If present, version must be v2 or v3
      subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
                           -- If present, version must be v2 or v3
      extensions      [3]  EXPLICIT Extensions OPTIONAL
                           -- If present, version must be v3
      } 
  
@endcode
  <p>
  Certificates are instantiated using a certificate factory. The following is
  an example of how to instantiate an X.509 certificate: 
 @code

  try (InputStream inStream = new FileInputStream("fileName-of-cert")) {
      CertificateFactory cf = CertificateFactory.getInstance("X.509");
      X509Certificate cert = (X509Certificate)cf.generateCertificate(inStream);
  } 
  
@endcode
 @author Hemma Prafullchandra
 - seealso: Certificate
 - seealso: CertificateFactory
 - seealso: X509Extension
 */
@interface JavaSecurityCertX509Certificate : JavaSecurityCertCertificate < JavaSecurityCertX509Extension >

#pragma mark Public

/*!
 @brief Checks that the certificate is currently valid.It is if
  the current date and time are within the validity period given in the
  certificate.
 <p>
  The validity period consists of two date/time values:
  the first and last dates (and times) on which the certificate
  is valid. It is defined in
  ASN.1 as: 
 @code

  validity             Validity
  Validity ::= SEQUENCE {
      notBefore      CertificateValidityDate,
      notAfter       CertificateValidityDate }
  CertificateValidityDate ::= CHOICE {
      utcTime        UTCTime,
      generalTime    GeneralizedTime } 
  
@endcode
 @throw CertificateExpiredExceptionif the certificate has expired.
 @throw CertificateNotYetValidExceptionif the certificate is not
  yet valid.
 */
- (void)checkValidity;

/*!
 @brief Checks that the given date is within the certificate's
  validity period.In other words, this determines whether the
  certificate would be valid at the given date/time.
 @param date the Date to check against to see if this certificate         is valid at that date/time.
 @throw CertificateExpiredExceptionif the certificate has expired
  with respect to the <code>date</code> supplied.
 @throw CertificateNotYetValidExceptionif the certificate is not
  yet valid with respect to the <code>date</code> supplied.
 - seealso: #checkValidity()
 */
- (void)checkValidityWithJavaUtilDate:(JavaUtilDate *)date;

/*!
 @brief Gets the certificate constraints path length from the
  critical <code>BasicConstraints</code> extension, (OID = 2.5.29.19).
 <p>
  The basic constraints extension identifies whether the subject
  of the certificate is a Certificate Authority (CA) and
  how deep a certification path may exist through that CA. The 
 <code>pathLenConstraint</code> field (see below) is meaningful
  only if <code>cA</code> is set to TRUE. In this case, it gives the
  maximum number of CA certificates that may follow this certificate in a
  certification path. A value of zero indicates that only an end-entity
  certificate may follow in the path. 
 <p>
  The ASN.1 definition for this is: 
 @code

  BasicConstraints ::= SEQUENCE {
      cA                  BOOLEAN DEFAULT FALSE,
      pathLenConstraint   INTEGER (0..MAX) OPTIONAL } 
  
@endcode
 @return the value of <code>pathLenConstraint</code> if the
  BasicConstraints extension is present in the certificate and the
  subject of the certificate is a CA, otherwise -1.
  If the subject of the certificate is a CA and 
 <code>pathLenConstraint</code> does not appear, 
 <code>Integer.MAX_VALUE</code> is returned to indicate that there is no
  limit to the allowed length of the certification path.
 */
- (jint)getBasicConstraints;

/*!
 @brief Gets an unmodifiable list of Strings representing the OBJECT
  IDENTIFIERs of the <code>ExtKeyUsageSyntax</code> field of the
  extended key usage extension, (OID = 2.5.29.37).It indicates
  one or more purposes for which the certified public key may be
  used, in addition to or in place of the basic purposes
  indicated in the key usage extension field.
 The ASN.1
  definition for this is: 
 @code

  ExtKeyUsageSyntax ::= SEQUENCE SIZE (1..MAX) OF KeyPurposeId
  KeyPurposeId ::= OBJECT IDENTIFIER 
  
@endcode
  Key purposes may be defined by any organization with a
  need. Object identifiers used to identify key purposes shall be
  assigned in accordance with IANA or ITU-T Rec. X.660 |
  ISO/IEC/ITU 9834-1. 
 <p>
  This method was added to version 1.4 of the Java 2 Platform Standard
  Edition. In order to maintain backwards compatibility with existing
  service providers, this method is not <code>abstract</code>
  and it provides a default implementation. Subclasses
  should override this method with a correct implementation.
 @return the ExtendedKeyUsage extension of this certificate,
          as an unmodifiable list of object identifiers represented
          as Strings. Returns null if this certificate does not
          contain an ExtendedKeyUsage extension.
 @throw CertificateParsingExceptionif the extension cannot be decoded
 @since 1.4
 */
- (id<JavaUtilList>)getExtendedKeyUsage;

/*!
 @brief Gets an immutable collection of issuer alternative names from the 
 <code>IssuerAltName</code> extension, (OID = 2.5.29.18).
 <p>
  The ASN.1 definition of the <code>IssuerAltName</code> extension is: 
 @code

  IssuerAltName ::= GeneralNames 
  
@endcode
  The ASN.1 definition of <code>GeneralNames</code> is defined
  in <code>getSubjectAlternativeNames</code>.
  <p>
  If this certificate does not contain an <code>IssuerAltName</code>
  extension, <code>null</code> is returned. Otherwise, a 
 <code>Collection</code> is returned with an entry representing each 
 <code>GeneralName</code> included in the extension. Each entry is a 
 <code>List</code> whose first entry is an <code>Integer</code>
  (the name type, 0-8) and whose second entry is a <code>String</code>
  or a byte array (the name, in string or ASN.1 DER encoded form,
  respectively). For more details about the formats used for each
  name type, see the <code>getSubjectAlternativeNames</code> method. 
 <p>
  Note that the <code>Collection</code> returned may contain more
  than one name of the same type. Also, note that the returned 
 <code>Collection</code> is immutable and any entries containing byte
  arrays are cloned to protect against subsequent modifications. 
 <p>
  This method was added to version 1.4 of the Java 2 Platform Standard
  Edition. In order to maintain backwards compatibility with existing
  service providers, this method is not <code>abstract</code>
  and it provides a default implementation. Subclasses
  should override this method with a correct implementation.
 @return an immutable <code>Collection</code> of issuer alternative
  names (or <code>null</code>)
 @throw CertificateParsingExceptionif the extension cannot be decoded
 @since 1.4
 */
- (id<JavaUtilCollection>)getIssuerAlternativeNames;

/*!
 @brief <strong>Denigrated</strong>, replaced by getIssuerX500Principal()
 .This method returns the <code>issuer</code>
  as an implementation specific Principal object, which should not be
  relied upon by portable code.
 <p>
  Gets the <code>issuer</code> (issuer distinguished name) value from
  the certificate. The issuer name identifies the entity that signed (and
  issued) the certificate. 
 <p>The issuer name field contains an
  X.500 distinguished name (DN).
  The ASN.1 definition for this is: 
 @code

  issuer    Name
  Name ::= CHOICE { RDNSequence }
  RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
  RelativeDistinguishedName ::=
      SET OF AttributeValueAssertion
  AttributeValueAssertion ::= SEQUENCE {
                                AttributeType,
                                AttributeValue }
  AttributeType ::= OBJECT IDENTIFIER
  AttributeValue ::= ANY 
  
@endcode
  The <code>Name</code> describes a hierarchical name composed of
  attributes,
  such as country name, and corresponding values, such as US.
  The type of the <code>AttributeValue</code> component is determined by
  the <code>AttributeType</code>; in general it will be a 
 <code>directoryString</code>. A <code>directoryString</code> is usually
  one of <code>PrintableString</code>,
  <code>TeletexString</code> or <code>UniversalString</code>.
 @return a Principal whose name is the issuer distinguished name.
 */
- (id<JavaSecurityPrincipal>)getIssuerDN;

/*!
 @brief Gets the <code>issuerUniqueID</code> value from the certificate.
 The issuer unique identifier is present in the certificate
  to handle the possibility of reuse of issuer names over time.
  RFC 3280 recommends that names not be reused and that
  conforming certificates not make use of unique identifiers.
  Applications conforming to that profile should be capable of
  parsing unique identifiers and making comparisons. 
 <p>The ASN.1 definition for this is: 
 @code

  issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL
  UniqueIdentifier  ::=  BIT STRING 
  
@endcode
 @return the issuer unique identifier or null if it is not
  present in the certificate.
 */
- (IOSBooleanArray *)getIssuerUniqueID;

/*!
 @brief Returns the issuer (issuer distinguished name) value from the
  certificate as an <code>X500Principal</code>.
 <p>
  It is recommended that subclasses override this method.
 @return an <code>X500Principal</code> representing the issuer
           distinguished name
 @since 1.4
 */
- (JavaxSecurityAuthX500X500Principal *)getIssuerX500Principal;

/*!
 @brief Gets a boolean array representing bits of
  the <code>KeyUsage</code> extension, (OID = 2.5.29.15).
 The key usage extension defines the purpose (e.g., encipherment,
  signature, certificate signing) of the key contained in the
  certificate.
  The ASN.1 definition for this is: 
 @code

  KeyUsage ::= BIT STRING {
      digitalSignature        (0),
      nonRepudiation          (1),
      keyEncipherment         (2),
      dataEncipherment        (3),
      keyAgreement            (4),
      keyCertSign             (5),
      cRLSign                 (6),
      encipherOnly            (7),
      decipherOnly            (8) } 
  
@endcode
  RFC 3280 recommends that when used, this be marked
  as a critical extension.
 @return the KeyUsage extension of this certificate, represented as
  an array of booleans. The order of KeyUsage values in the array is
  the same as in the above ASN.1 definition. The array will contain a
  value for each KeyUsage defined above. If the KeyUsage list encoded
  in the certificate is longer than the above list, it will not be
  truncated. Returns null if this certificate does not
  contain a KeyUsage extension.
 */
- (IOSBooleanArray *)getKeyUsage;

/*!
 @brief Gets the <code>notAfter</code> date from the validity period of
  the certificate.See <code>getNotBefore</code>
  for relevant ASN.1 definitions.
 @return the end date of the validity period.
 - seealso: #checkValidity
 */
- (JavaUtilDate *)getNotAfter;

/*!
 @brief Gets the <code>notBefore</code> date from the validity period of
  the certificate.
 The relevant ASN.1 definitions are: 
 @code

  validity             Validity
  Validity ::= SEQUENCE {
      notBefore      CertificateValidityDate,
      notAfter       CertificateValidityDate }
  CertificateValidityDate ::= CHOICE {
      utcTime        UTCTime,
      generalTime    GeneralizedTime } 
  
@endcode
 @return the start date of the validity period.
 - seealso: #checkValidity
 */
- (JavaUtilDate *)getNotBefore;

/*!
 @brief Gets the <code>serialNumber</code> value from the certificate.
 The serial number is an integer assigned by the certification
  authority to each certificate. It must be unique for each
  certificate issued by a given CA (i.e., the issuer name and
  serial number identify a unique certificate).
  The ASN.1 definition for this is: 
 @code

  serialNumber     CertificateSerialNumber
  CertificateSerialNumber  ::=  INTEGER 
  
@endcode
 @return the serial number.
 */
- (JavaMathBigInteger *)getSerialNumber;

/*!
 @brief Gets the signature algorithm name for the certificate
  signature algorithm.An example is the string "SHA256withRSA".
 The ASN.1 definition for this is: 
 @code

  signatureAlgorithm   AlgorithmIdentifier
  AlgorithmIdentifier  ::=  SEQUENCE  {
      algorithm               OBJECT IDENTIFIER,
      parameters              ANY DEFINED BY algorithm OPTIONAL  }
                              -- contains a value of the type
                              -- registered for use with the
                              -- algorithm object identifier value 
  
@endcode
  
 <p>The algorithm name is determined from the <code>algorithm</code>
  OID string.
 @return the signature algorithm name.
 */
- (NSString *)getSigAlgName;

/*!
 @brief Gets the signature algorithm OID string from the certificate.
 An OID is represented by a set of nonnegative whole numbers separated
  by periods.
  For example, the string "1.2.840.10040.4.3" identifies the SHA-1
  with DSA signature algorithm defined in 
 <a href="http://www.ietf.org/rfc/rfc3279.txt">RFC 3279: Algorithms and
  Identifiers for the Internet X.509 Public Key Infrastructure Certificate
  and CRL Profile</a>.
  
 <p>See <code>getSigAlgName</code> for
  relevant ASN.1 definitions.
 @return the signature algorithm OID string.
 */
- (NSString *)getSigAlgOID;

/*!
 @brief Gets the DER-encoded signature algorithm parameters from this
  certificate's signature algorithm.In most cases, the signature
  algorithm parameters are null; the parameters are usually
  supplied with the certificate's public key.
 If access to individual parameter values is needed then use 
 <code>AlgorithmParameters</code>
  and instantiate with the name returned by 
 <code>getSigAlgName</code>.
  
 <p>See <code>getSigAlgName</code> for
  relevant ASN.1 definitions.
 @return the DER-encoded signature algorithm parameters, or
          null if no parameters are present.
 */
- (IOSByteArray *)getSigAlgParams;

/*!
 @brief Gets the <code>signature</code> value (the raw signature bits) from
  the certificate.
 The ASN.1 definition for this is: 
 @code

  signature     BIT STRING 
  
@endcode
 @return the signature.
 */
- (IOSByteArray *)getSignature;

/*!
 @brief Gets an immutable collection of subject alternative names from the 
 <code>SubjectAltName</code> extension, (OID = 2.5.29.17).
 <p>
  The ASN.1 definition of the <code>SubjectAltName</code> extension is: 
 @code

  SubjectAltName ::= GeneralNames
  GeneralNames :: = SEQUENCE SIZE (1..MAX) OF GeneralName
  GeneralName ::= CHOICE {
       otherName                       [0]     OtherName,
       rfc822Name                      [1]     IA5String,
       dNSName                         [2]     IA5String,
       x400Address                     [3]     ORAddress,
       directoryName                   [4]     Name,
       ediPartyName                    [5]     EDIPartyName,
       uniformResourceIdentifier       [6]     IA5String,
       iPAddress                       [7]     OCTET STRING,
       registeredID                    [8]     OBJECT IDENTIFIER} 
  
@endcode
  <p>
  If this certificate does not contain a <code>SubjectAltName</code>
  extension, <code>null</code> is returned. Otherwise, a 
 <code>Collection</code> is returned with an entry representing each 
 <code>GeneralName</code> included in the extension. Each entry is a 
 <code>List</code> whose first entry is an <code>Integer</code>
  (the name type, 0-8) and whose second entry is a <code>String</code>
  or a byte array (the name, in string or ASN.1 DER encoded form,
  respectively). 
 <p>
  <a href="http://www.ietf.org/rfc/rfc822.txt">RFC 822</a>, DNS, and URI
  names are returned as <code>String</code>s,
  using the well-established string formats for those types (subject to
  the restrictions included in RFC 3280). IPv4 address names are
  returned using dotted quad notation. IPv6 address names are returned
  in the form "a1:a2:...:a8", where a1-a8 are hexadecimal values
  representing the eight 16-bit pieces of the address. OID names are
  returned as <code>String</code>s represented as a series of nonnegative
  integers separated by periods. And directory names (distinguished names)
  are returned in <a href="http://www.ietf.org/rfc/rfc2253.txt">
  RFC 2253</a> string format. No standard string format is
  defined for otherNames, X.400 names, EDI party names, or any
  other type of names. They are returned as byte arrays
  containing the ASN.1 DER encoded form of the name. 
 <p>
  Note that the <code>Collection</code> returned may contain more
  than one name of the same type. Also, note that the returned 
 <code>Collection</code> is immutable and any entries containing byte
  arrays are cloned to protect against subsequent modifications. 
 <p>
  This method was added to version 1.4 of the Java 2 Platform Standard
  Edition. In order to maintain backwards compatibility with existing
  service providers, this method is not <code>abstract</code>
  and it provides a default implementation. Subclasses
  should override this method with a correct implementation.
 @return an immutable <code>Collection</code> of subject alternative
  names (or <code>null</code>)
 @throw CertificateParsingExceptionif the extension cannot be decoded
 @since 1.4
 */
- (id<JavaUtilCollection>)getSubjectAlternativeNames;

/*!
 @brief <strong>Denigrated</strong>, replaced by getSubjectX500Principal()
 .This method returns the <code>subject</code>
  as an implementation specific Principal object, which should not be
  relied upon by portable code.
 <p>
  Gets the <code>subject</code> (subject distinguished name) value
  from the certificate.  If the <code>subject</code> value is empty,
  then the <code>getName()</code> method of the returned 
 <code>Principal</code> object returns an empty string (""). 
 <p> The ASN.1 definition for this is: 
 @code

  subject    Name 
  
@endcode
  
 <p>See <code>getIssuerDN</code> for <code>Name</code>
  and other relevant definitions.
 @return a Principal whose name is the subject name.
 */
- (id<JavaSecurityPrincipal>)getSubjectDN;

/*!
 @brief Gets the <code>subjectUniqueID</code> value from the certificate.
 <p>The ASN.1 definition for this is: 
 @code

  subjectUniqueID  [2]  IMPLICIT UniqueIdentifier OPTIONAL
  UniqueIdentifier  ::=  BIT STRING 
  
@endcode
 @return the subject unique identifier or null if it is not
  present in the certificate.
 */
- (IOSBooleanArray *)getSubjectUniqueID;

/*!
 @brief Returns the subject (subject distinguished name) value from the
  certificate as an <code>X500Principal</code>.If the subject value
  is empty, then the <code>getName()</code> method of the returned 
 <code>X500Principal</code> object returns an empty string ("").
 <p>
  It is recommended that subclasses override this method.
 @return an <code>X500Principal</code> representing the subject
           distinguished name
 @since 1.4
 */
- (JavaxSecurityAuthX500X500Principal *)getSubjectX500Principal;

/*!
 @brief Gets the DER-encoded certificate information, the 
 <code>tbsCertificate</code> from this certificate.
 This can be used to verify the signature independently.
 @return the DER-encoded certificate information.
 @throw CertificateEncodingExceptionif an encoding error occurs.
 */
- (IOSByteArray *)getTBSCertificate;

/*!
 @brief Gets the <code>version</code> (version number) value from the
  certificate.
 The ASN.1 definition for this is: 
 @code

  version  [0] EXPLICIT Version DEFAULT v1
  Version ::=  INTEGER  {  v1(0), v2(1), v3(2)  } 
  
@endcode
 @return the version number, i.e. 1, 2 or 3.
 */
- (jint)getVersion;

/*!
 @brief Verifies that this certificate was signed using the
  private key that corresponds to the specified public key.
 This method uses the signature verification engine
  supplied by the specified provider. Note that the specified
  Provider object does not have to be registered in the provider list.
  This method was added to version 1.8 of the Java Platform Standard
  Edition. In order to maintain backwards compatibility with existing
  service providers, this method is not <code>abstract</code>
  and it provides a default implementation.
 @param key the PublicKey used to carry out the verification.
 @param sigProvider the signature provider.
 @throw NoSuchAlgorithmExceptionon unsupported signature
  algorithms.
 @throw InvalidKeyExceptionon incorrect key.
 @throw SignatureExceptionon signature errors.
 @throw CertificateExceptionon encoding errors.
 @throw UnsupportedOperationExceptionif the method is not supported
 @since 1.8
 */
- (void)verifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
               withJavaSecurityProvider:(JavaSecurityProvider *)sigProvider;

#pragma mark Protected

/*!
 @brief Constructor for X.509 certificates.
 */
- (instancetype __nonnull)init;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityCertX509Certificate)

FOUNDATION_EXPORT void JavaSecurityCertX509Certificate_init(JavaSecurityCertX509Certificate *self);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityCertX509Certificate)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSecurityCertX509Certificate")
