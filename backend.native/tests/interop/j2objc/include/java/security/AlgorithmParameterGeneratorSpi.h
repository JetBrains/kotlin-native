//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/security/AlgorithmParameterGeneratorSpi.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecurityAlgorithmParameterGeneratorSpi")
#ifdef RESTRICT_JavaSecurityAlgorithmParameterGeneratorSpi
#define INCLUDE_ALL_JavaSecurityAlgorithmParameterGeneratorSpi 0
#else
#define INCLUDE_ALL_JavaSecurityAlgorithmParameterGeneratorSpi 1
#endif
#undef RESTRICT_JavaSecurityAlgorithmParameterGeneratorSpi

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSecurityAlgorithmParameterGeneratorSpi_) && (INCLUDE_ALL_JavaSecurityAlgorithmParameterGeneratorSpi || defined(INCLUDE_JavaSecurityAlgorithmParameterGeneratorSpi))
#define JavaSecurityAlgorithmParameterGeneratorSpi_

@class JavaSecurityAlgorithmParameters;
@class JavaSecuritySecureRandom;
@protocol JavaSecuritySpecAlgorithmParameterSpec;

/*!
 @brief This class defines the <i>Service Provider Interface</i> (<b>SPI</b>)
  for the <code>AlgorithmParameterGenerator</code> class, which
  is used to generate a set of parameters to be used with a certain algorithm.
 <p> All the abstract methods in this class must be implemented by each
  cryptographic service provider who wishes to supply the implementation
  of a parameter generator for a particular algorithm. 
 <p> In case the client does not explicitly initialize the
  AlgorithmParameterGenerator (via a call to an <code>engineInit</code>
  method), each provider must supply (and document) a default initialization.
  For example, the Sun provider uses a default modulus prime size of 1024
  bits for the generation of DSA parameters.
 @author Jan Luehe
 - seealso: AlgorithmParameterGenerator
 - seealso: AlgorithmParameters
 - seealso: java.security.spec.AlgorithmParameterSpec
 @since 1.2
 */
@interface JavaSecurityAlgorithmParameterGeneratorSpi : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

#pragma mark Protected

/*!
 @brief Generates the parameters.
 @return the new AlgorithmParameters object.
 */
- (JavaSecurityAlgorithmParameters *)engineGenerateParameters;

/*!
 @brief Initializes this parameter generator with a set of
  algorithm-specific parameter generation values.
 @param genParamSpec the set of algorithm-specific parameter generation values.
 @param random the source of randomness.
 @throw InvalidAlgorithmParameterExceptionif the given parameter
  generation values are inappropriate for this parameter generator.
 */
- (void)engineInitWithJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)genParamSpec
                                withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

/*!
 @brief Initializes this parameter generator for a certain size
  and source of randomness.
 @param size the size (number of bits).
 @param random the source of randomness.
 */
- (void)engineInitWithInt:(jint)size
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityAlgorithmParameterGeneratorSpi)

FOUNDATION_EXPORT void JavaSecurityAlgorithmParameterGeneratorSpi_init(JavaSecurityAlgorithmParameterGeneratorSpi *self);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityAlgorithmParameterGeneratorSpi)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSecurityAlgorithmParameterGeneratorSpi")
