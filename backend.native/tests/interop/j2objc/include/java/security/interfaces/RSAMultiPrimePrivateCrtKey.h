//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/security/interfaces/RSAMultiPrimePrivateCrtKey.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecurityInterfacesRSAMultiPrimePrivateCrtKey")
#ifdef RESTRICT_JavaSecurityInterfacesRSAMultiPrimePrivateCrtKey
#define INCLUDE_ALL_JavaSecurityInterfacesRSAMultiPrimePrivateCrtKey 0
#else
#define INCLUDE_ALL_JavaSecurityInterfacesRSAMultiPrimePrivateCrtKey 1
#endif
#undef RESTRICT_JavaSecurityInterfacesRSAMultiPrimePrivateCrtKey

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSecurityInterfacesRSAMultiPrimePrivateCrtKey_) && (INCLUDE_ALL_JavaSecurityInterfacesRSAMultiPrimePrivateCrtKey || defined(INCLUDE_JavaSecurityInterfacesRSAMultiPrimePrivateCrtKey))
#define JavaSecurityInterfacesRSAMultiPrimePrivateCrtKey_

#define RESTRICT_JavaSecurityInterfacesRSAPrivateKey 1
#define INCLUDE_JavaSecurityInterfacesRSAPrivateKey 1
#include "java/security/interfaces/RSAPrivateKey.h"

@class IOSObjectArray;
@class JavaMathBigInteger;

/*!
 @brief The interface to an RSA multi-prime private key, as defined in the
  PKCS#1 v2.1, using the <i>Chinese Remainder Theorem</i>
  (CRT) information values.
 @author Valerie Peng
 - seealso: java.security.spec.RSAPrivateKeySpec
 - seealso: java.security.spec.RSAMultiPrimePrivateCrtKeySpec
 - seealso: RSAPrivateKey
 - seealso: RSAPrivateCrtKey
 @since 1.4
 */
@protocol JavaSecurityInterfacesRSAMultiPrimePrivateCrtKey < JavaSecurityInterfacesRSAPrivateKey, JavaObject >

/*!
 @brief Returns the public exponent.
 @return the public exponent.
 */
- (JavaMathBigInteger *)getPublicExponent;

/*!
 @brief Returns the primeP.
 @return the primeP.
 */
- (JavaMathBigInteger *)getPrimeP;

/*!
 @brief Returns the primeQ.
 @return the primeQ.
 */
- (JavaMathBigInteger *)getPrimeQ;

/*!
 @brief Returns the primeExponentP.
 @return the primeExponentP.
 */
- (JavaMathBigInteger *)getPrimeExponentP;

/*!
 @brief Returns the primeExponentQ.
 @return the primeExponentQ.
 */
- (JavaMathBigInteger *)getPrimeExponentQ;

/*!
 @brief Returns the crtCoefficient.
 @return the crtCoefficient.
 */
- (JavaMathBigInteger *)getCrtCoefficient;

/*!
 @brief Returns the otherPrimeInfo or null if there are only
  two prime factors (p and q).
 @return the otherPrimeInfo.
 */
- (IOSObjectArray *)getOtherPrimeInfo;

@end

@interface JavaSecurityInterfacesRSAMultiPrimePrivateCrtKey : NSObject
@property (readonly, class) jlong serialVersionUID NS_SWIFT_NAME(serialVersionUID);

+ (jlong)serialVersionUID;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityInterfacesRSAMultiPrimePrivateCrtKey)

/*!
 @brief The type fingerprint that is set to indicate
  serialization compatibility with a previous
  version of the type.
 */
inline jlong JavaSecurityInterfacesRSAMultiPrimePrivateCrtKey_get_serialVersionUID(void);
#define JavaSecurityInterfacesRSAMultiPrimePrivateCrtKey_serialVersionUID 618058533534628008LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaSecurityInterfacesRSAMultiPrimePrivateCrtKey, serialVersionUID, jlong)

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityInterfacesRSAMultiPrimePrivateCrtKey)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSecurityInterfacesRSAMultiPrimePrivateCrtKey")
