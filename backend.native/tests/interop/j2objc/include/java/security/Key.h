//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/security/Key.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecurityKey")
#ifdef RESTRICT_JavaSecurityKey
#define INCLUDE_ALL_JavaSecurityKey 0
#else
#define INCLUDE_ALL_JavaSecurityKey 1
#endif
#undef RESTRICT_JavaSecurityKey

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSecurityKey_) && (INCLUDE_ALL_JavaSecurityKey || defined(INCLUDE_JavaSecurityKey))
#define JavaSecurityKey_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class IOSByteArray;

/*!
 @brief The Key interface is the top-level interface for all keys.It
  defines the functionality shared by all key objects.
 All keys
  have three characteristics: 
 <UL>
  
 <LI>An Algorithm 
 <P>This is the key algorithm for that key. The key algorithm is usually
  an encryption or asymmetric operation algorithm (such as DSA or
  RSA), which will work with those algorithms and with related
  algorithms (such as MD5 with RSA, SHA-1 with RSA, Raw DSA, etc.)
  The name of the algorithm of a key is obtained using the 
 <code>getAlgorithm</code> method. 
 <LI>An Encoded Form 
 <P>This is an external encoded form for the key used when a standard
  representation of the key is needed outside the Java Virtual Machine,
  as when transmitting the key to some other party. The key
  is encoded according to a standard format (such as
  X.509 <code>SubjectPublicKeyInfo</code> or PKCS#8), and
  is returned using the <code>getEncoded</code> method.
  Note: The syntax of the ASN.1 type <code>SubjectPublicKeyInfo</code>
  is defined as follows: 
 @code

  SubjectPublicKeyInfo ::= SEQUENCE {
    algorithm AlgorithmIdentifier,
    subjectPublicKey BIT STRING }
  AlgorithmIdentifier ::= SEQUENCE {
    algorithm OBJECT IDENTIFIER,
    parameters ANY DEFINED BY algorithm OPTIONAL } 
  
@endcode
  For more information, see 
 <a href="http://www.ietf.org/rfc/rfc3280.txt">RFC 3280:
  Internet X.509 Public Key Infrastructure Certificate and CRL Profile</a>.
  
 <LI>A Format 
 <P>This is the name of the format of the encoded key. It is returned
  by the <code>getFormat</code> method. 
 </UL>
  Keys are generally obtained through key generators, certificates,
  or various Identity classes used to manage keys.
  Keys may also be obtained from key specifications (transparent
  representations of the underlying key material) through the use of a key
  factory (see <code>KeyFactory</code>).
  
 <p> A Key should use KeyRep as its serialized representation.
  Note that a serialized Key may contain sensitive information
  which should not be exposed in untrusted environments.  See the 
 <a href="{@@docRoot}openjdk-redirect.html?v=8&path=/platform/serialization/spec/security.html">
  Security Appendix</a>
  of the Serialization Specification for more information.
 - seealso: PublicKey
 - seealso: PrivateKey
 - seealso: KeyPair
 - seealso: KeyPairGenerator
 - seealso: KeyFactory
 - seealso: KeyRep
 - seealso: java.security.spec.KeySpec
 - seealso: Identity
 - seealso: Signer
 @author Benjamin Renaud
 */
@protocol JavaSecurityKey < JavaIoSerializable, JavaObject >

/*!
 @brief Returns the standard algorithm name for this key.For
  example, "DSA" would indicate that this key is a DSA key.
 See Appendix A in the <a href="{@@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/security/crypto/CryptoSpec.html#AppA">
  Java Cryptography Architecture API Specification &amp; Reference </a>
  for information about standard algorithm names.
 @return the name of the algorithm associated with this key.
 */
- (NSString *)getAlgorithm;

/*!
 @brief Returns the name of the primary encoding format of this key,
  or null if this key does not support encoding.
 The primary encoding format is
  named in terms of the appropriate ASN.1 data format, if an
  ASN.1 specification for this key exists.
  For example, the name of the ASN.1 data format for public
  keys is <I>SubjectPublicKeyInfo</I>, as
  defined by the X.509 standard; in this case, the returned format is 
 <code>"X.509"</code>. Similarly,
  the name of the ASN.1 data format for private keys is 
 <I>PrivateKeyInfo</I>,
  as defined by the PKCS #8 standard; in this case, the returned format is 
 <code>"PKCS#8"</code>.
 @return the primary encoding format of the key.
 */
- (NSString *)getFormat;

/*!
 @brief Returns the key in its primary encoding format, or null
  if this key does not support encoding.
 @return the encoded key, or null if the key does not support
  encoding.
 */
- (IOSByteArray *)getEncoded;

@end

@interface JavaSecurityKey : NSObject
@property (readonly, class) jlong serialVersionUID NS_SWIFT_NAME(serialVersionUID);

+ (jlong)serialVersionUID;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityKey)

/*!
 @brief The class fingerprint that is set to indicate
  serialization compatibility with a previous
  version of the class.
 */
inline jlong JavaSecurityKey_get_serialVersionUID(void);
#define JavaSecurityKey_serialVersionUID 6603384152749567654LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaSecurityKey, serialVersionUID, jlong)

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityKey)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSecurityKey")
