//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/security/AlgorithmConstraints.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecurityAlgorithmConstraints")
#ifdef RESTRICT_JavaSecurityAlgorithmConstraints
#define INCLUDE_ALL_JavaSecurityAlgorithmConstraints 0
#else
#define INCLUDE_ALL_JavaSecurityAlgorithmConstraints 1
#endif
#undef RESTRICT_JavaSecurityAlgorithmConstraints

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSecurityAlgorithmConstraints_) && (INCLUDE_ALL_JavaSecurityAlgorithmConstraints || defined(INCLUDE_JavaSecurityAlgorithmConstraints))
#define JavaSecurityAlgorithmConstraints_

@class JavaSecurityAlgorithmParameters;
@protocol JavaSecurityKey;
@protocol JavaUtilSet;

/*!
 @brief This interface specifies constraints for cryptographic algorithms,
  keys (key sizes), and other algorithm parameters.
 <p>
  <code>AlgorithmConstraints</code> objects are immutable.  An implementation
  of this interface should not provide methods that can change the state
  of an instance once it has been created. 
 <p>
  Note that <code>AlgorithmConstraints</code> can be used to represent the
  restrictions described by the security properties 
 <code>jdk.certpath.disabledAlgorithms</code> and 
 <code>jdk.tls.disabledAlgorithms</code>, or could be used by a
  concrete <code>PKIXCertPathChecker</code> to check whether a specified
  certificate in the certification path contains the required algorithm
  constraints.
 - seealso: javax.net.ssl.SSLParameters#getAlgorithmConstraints
 - seealso: javax.net.ssl.SSLParameters#setAlgorithmConstraints(AlgorithmConstraints)
 @since 1.7
 */
@protocol JavaSecurityAlgorithmConstraints < JavaObject >

/*!
 @brief Determines whether an algorithm is granted permission for the
  specified cryptographic primitives.
 @param primitives a set of cryptographic primitives
 @param algorithm the algorithm name
 @param parameters the algorithm parameters, or null if no additional      parameters
 @return true if the algorithm is permitted and can be used for all
      of the specified cryptographic primitives
 @throw IllegalArgumentExceptionif primitives or algorithm is null
      or empty
 */
- (jboolean)permitsWithJavaUtilSet:(id<JavaUtilSet>)primitives
                      withNSString:(NSString *)algorithm
withJavaSecurityAlgorithmParameters:(JavaSecurityAlgorithmParameters *)parameters;

/*!
 @brief Determines whether a key is granted permission for the specified
  cryptographic primitives.
 <p>
  This method is usually used to check key size and key usage.
 @param primitives a set of cryptographic primitives
 @param key the key
 @return true if the key can be used for all of the specified
      cryptographic primitives
 @throw IllegalArgumentExceptionif primitives is null or empty,
      or the key is null
 */
- (jboolean)permitsWithJavaUtilSet:(id<JavaUtilSet>)primitives
               withJavaSecurityKey:(id<JavaSecurityKey>)key;

/*!
 @brief Determines whether an algorithm and the corresponding key are granted
  permission for the specified cryptographic primitives.
 @param primitives a set of cryptographic primitives
 @param algorithm the algorithm name
 @param key the key
 @param parameters the algorithm parameters, or null if no additional      parameters
 @return true if the key and the algorithm can be used for all of the
      specified cryptographic primitives
 @throw IllegalArgumentExceptionif primitives or algorithm is null
      or empty, or the key is null
 */
- (jboolean)permitsWithJavaUtilSet:(id<JavaUtilSet>)primitives
                      withNSString:(NSString *)algorithm
               withJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecurityAlgorithmParameters:(JavaSecurityAlgorithmParameters *)parameters;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityAlgorithmConstraints)

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityAlgorithmConstraints)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSecurityAlgorithmConstraints")
