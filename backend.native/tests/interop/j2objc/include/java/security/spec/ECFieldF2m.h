//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/security/spec/ECFieldF2m.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecuritySpecECFieldF2m")
#ifdef RESTRICT_JavaSecuritySpecECFieldF2m
#define INCLUDE_ALL_JavaSecuritySpecECFieldF2m 0
#else
#define INCLUDE_ALL_JavaSecuritySpecECFieldF2m 1
#endif
#undef RESTRICT_JavaSecuritySpecECFieldF2m

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSecuritySpecECFieldF2m_) && (INCLUDE_ALL_JavaSecuritySpecECFieldF2m || defined(INCLUDE_JavaSecuritySpecECFieldF2m))
#define JavaSecuritySpecECFieldF2m_

#define RESTRICT_JavaSecuritySpecECField 1
#define INCLUDE_JavaSecuritySpecECField 1
#include "java/security/spec/ECField.h"

@class IOSIntArray;
@class JavaMathBigInteger;

/*!
 @brief This immutable class defines an elliptic curve (EC)
  characteristic 2 finite field.
 - seealso: ECField
 @author Valerie Peng
 @since 1.5
 */
@interface JavaSecuritySpecECFieldF2m : NSObject < JavaSecuritySpecECField >

#pragma mark Public

/*!
 @brief Creates an elliptic curve characteristic 2 finite
  field which has 2^<code>m</code> elements with normal basis.
 @param m with 2^<code>m</code>  being the number of elements.
 @throw IllegalArgumentExceptionif <code>m</code>
  is not positive.
 */
- (instancetype __nonnull)initWithInt:(jint)m;

/*!
 @brief Creates an elliptic curve characteristic 2 finite
  field which has 2^<code>m</code> elements with
  polynomial basis.
 The reduction polynomial for this field is based
  on <code>rp</code> whose i-th bit corresponds to
  the i-th coefficient of the reduction polynomial.<p>
  Note: A valid reduction polynomial is either a
  trinomial (X^<code>m</code> + X^<code>k</code> + 1
  with <code>m</code> &gt; <code>k</code> &gt;= 1) or a
  pentanomial (X^<code>m</code> + X^<code>k3</code>
  + X^<code>k2</code> + X^<code>k1</code> + 1 with 
 <code>m</code> &gt; <code>k3</code> &gt; <code>k2</code>
  &gt; <code>k1</code> &gt;= 1).
 @param m with 2^<code>m</code>  being the number of elements.
 @param rp the BigInteger whose i-th bit corresponds to  the i-th coefficient of the reduction polynomial.
 @throw NullPointerExceptionif <code>rp</code> is null.
 @throw IllegalArgumentExceptionif <code>m</code>
  is not positive, or <code>rp</code> does not represent
  a valid reduction polynomial.
 */
- (instancetype __nonnull)initWithInt:(jint)m
               withJavaMathBigInteger:(JavaMathBigInteger *)rp;

/*!
 @brief Creates an elliptic curve characteristic 2 finite
  field which has 2^<code>m</code> elements with
  polynomial basis.The reduction polynomial for this
  field is based on <code>ks</code> whose content
  contains the order of the middle term(s) of the
  reduction polynomial.
 Note: A valid reduction polynomial is either a
  trinomial (X^<code>m</code> + X^<code>k</code> + 1
  with <code>m</code> &gt; <code>k</code> &gt;= 1) or a
  pentanomial (X^<code>m</code> + X^<code>k3</code>
  + X^<code>k2</code> + X^<code>k1</code> + 1 with 
 <code>m</code> &gt; <code>k3</code> &gt; <code>k2</code>
  &gt; <code>k1</code> &gt;= 1), so <code>ks</code> should
  have length 1 or 3.
 @param m with 2^<code>m</code>  being the number of elements.
 @param ks the order of the middle term(s) of the  reduction polynomial. Contents of this array are copied
   to protect against subsequent modification.
 @throw NullPointerExceptionif <code>ks</code> is null.
 @throw IllegalArgumentExceptionif<code>m</code>
  is not positive, or the length of <code>ks</code>
  is neither 1 nor 3, or values in <code>ks</code>
  are not between <code>m</code>-1 and 1 (inclusive)
  and in descending order.
 */
- (instancetype __nonnull)initWithInt:(jint)m
                         withIntArray:(IOSIntArray *)ks;

/*!
 @brief Compares this finite field for equality with the
  specified object.
 @param obj the object to be compared.
 @return true if <code>obj</code> is an instance
  of ECFieldF2m and both <code>m</code> and the reduction
  polynomial match, false otherwise.
 */
- (jboolean)isEqual:(id)obj;

/*!
 @brief Returns the field size in bits which is <code>m</code>
  for this characteristic 2 finite field.
 @return the field size in bits.
 */
- (jint)getFieldSize;

/*!
 @brief Returns the value <code>m</code> of this characteristic
  2 finite field.
 @return <code>m</code> with 2^<code>m</code> being the
  number of elements.
 */
- (jint)getM;

/*!
 @brief Returns an integer array which contains the order of the
  middle term(s) of the reduction polynomial for polynomial
  basis or null for normal basis.
 @return an integer array which contains the order of the
  middle term(s) of the reduction polynomial for polynomial
  basis or null for normal basis. A new array is returned
  each time this method is called.
 */
- (IOSIntArray *)getMidTermsOfReductionPolynomial;

/*!
 @brief Returns a BigInteger whose i-th bit corresponds to the
  i-th coefficient of the reduction polynomial for polynomial
  basis or null for normal basis.
 @return a BigInteger whose i-th bit corresponds to the
  i-th coefficient of the reduction polynomial for polynomial
  basis or null for normal basis.
 */
- (JavaMathBigInteger *)getReductionPolynomial;

/*!
 @brief Returns a hash code value for this characteristic 2
  finite field.
 @return a hash code value.
 */
- (NSUInteger)hash;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecuritySpecECFieldF2m)

FOUNDATION_EXPORT void JavaSecuritySpecECFieldF2m_initWithInt_(JavaSecuritySpecECFieldF2m *self, jint m);

FOUNDATION_EXPORT JavaSecuritySpecECFieldF2m *new_JavaSecuritySpecECFieldF2m_initWithInt_(jint m) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecuritySpecECFieldF2m *create_JavaSecuritySpecECFieldF2m_initWithInt_(jint m);

FOUNDATION_EXPORT void JavaSecuritySpecECFieldF2m_initWithInt_withJavaMathBigInteger_(JavaSecuritySpecECFieldF2m *self, jint m, JavaMathBigInteger *rp);

FOUNDATION_EXPORT JavaSecuritySpecECFieldF2m *new_JavaSecuritySpecECFieldF2m_initWithInt_withJavaMathBigInteger_(jint m, JavaMathBigInteger *rp) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecuritySpecECFieldF2m *create_JavaSecuritySpecECFieldF2m_initWithInt_withJavaMathBigInteger_(jint m, JavaMathBigInteger *rp);

FOUNDATION_EXPORT void JavaSecuritySpecECFieldF2m_initWithInt_withIntArray_(JavaSecuritySpecECFieldF2m *self, jint m, IOSIntArray *ks);

FOUNDATION_EXPORT JavaSecuritySpecECFieldF2m *new_JavaSecuritySpecECFieldF2m_initWithInt_withIntArray_(jint m, IOSIntArray *ks) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecuritySpecECFieldF2m *create_JavaSecuritySpecECFieldF2m_initWithInt_withIntArray_(jint m, IOSIntArray *ks);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecuritySpecECFieldF2m)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSecuritySpecECFieldF2m")
