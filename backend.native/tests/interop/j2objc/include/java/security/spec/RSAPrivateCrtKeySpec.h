//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/security/spec/RSAPrivateCrtKeySpec.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecuritySpecRSAPrivateCrtKeySpec")
#ifdef RESTRICT_JavaSecuritySpecRSAPrivateCrtKeySpec
#define INCLUDE_ALL_JavaSecuritySpecRSAPrivateCrtKeySpec 0
#else
#define INCLUDE_ALL_JavaSecuritySpecRSAPrivateCrtKeySpec 1
#endif
#undef RESTRICT_JavaSecuritySpecRSAPrivateCrtKeySpec

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSecuritySpecRSAPrivateCrtKeySpec_) && (INCLUDE_ALL_JavaSecuritySpecRSAPrivateCrtKeySpec || defined(INCLUDE_JavaSecuritySpecRSAPrivateCrtKeySpec))
#define JavaSecuritySpecRSAPrivateCrtKeySpec_

#define RESTRICT_JavaSecuritySpecRSAPrivateKeySpec 1
#define INCLUDE_JavaSecuritySpecRSAPrivateKeySpec 1
#include "java/security/spec/RSAPrivateKeySpec.h"

@class JavaMathBigInteger;

/*!
 @brief This class specifies an RSA private key, as defined in the PKCS#1
  standard, using the Chinese Remainder Theorem (CRT) information values for
  efficiency.
 @author Jan Luehe
 - seealso: java.security.Key
 - seealso: java.security.KeyFactory
 - seealso: KeySpec
 - seealso: PKCS8EncodedKeySpec
 - seealso: RSAPrivateKeySpec
 - seealso: RSAPublicKeySpec
 */
@interface JavaSecuritySpecRSAPrivateCrtKeySpec : JavaSecuritySpecRSAPrivateKeySpec

#pragma mark Public

/*!
 @brief Creates a new <code>RSAPrivateCrtKeySpec</code>
  given the modulus, publicExponent, privateExponent,
  primeP, primeQ, primeExponentP, primeExponentQ, and
  crtCoefficient as defined in PKCS#1.
 @param modulus the modulus n
 @param publicExponent the public exponent e
 @param privateExponent the private exponent d
 @param primeP the prime factor p of n
 @param primeQ the prime factor q of n
 @param primeExponentP this is d mod (p-1)
 @param primeExponentQ this is d mod (q-1)
 @param crtCoefficient the Chinese Remainder Theorem  coefficient q-1 mod p
 */
- (instancetype __nonnull)initWithJavaMathBigInteger:(JavaMathBigInteger *)modulus
                              withJavaMathBigInteger:(JavaMathBigInteger *)publicExponent
                              withJavaMathBigInteger:(JavaMathBigInteger *)privateExponent
                              withJavaMathBigInteger:(JavaMathBigInteger *)primeP
                              withJavaMathBigInteger:(JavaMathBigInteger *)primeQ
                              withJavaMathBigInteger:(JavaMathBigInteger *)primeExponentP
                              withJavaMathBigInteger:(JavaMathBigInteger *)primeExponentQ
                              withJavaMathBigInteger:(JavaMathBigInteger *)crtCoefficient;

/*!
 @brief Returns the crtCoefficient.
 @return the crtCoefficient
 */
- (JavaMathBigInteger *)getCrtCoefficient;

/*!
 @brief Returns the primeExponentP.
 @return the primeExponentP
 */
- (JavaMathBigInteger *)getPrimeExponentP;

/*!
 @brief Returns the primeExponentQ.
 @return the primeExponentQ
 */
- (JavaMathBigInteger *)getPrimeExponentQ;

/*!
 @brief Returns the primeP.
 @return the primeP
 */
- (JavaMathBigInteger *)getPrimeP;

/*!
 @brief Returns the primeQ.
 @return the primeQ
 */
- (JavaMathBigInteger *)getPrimeQ;

/*!
 @brief Returns the public exponent.
 @return the public exponent
 */
- (JavaMathBigInteger *)getPublicExponent;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaMathBigInteger:(JavaMathBigInteger *)arg0
                              withJavaMathBigInteger:(JavaMathBigInteger *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecuritySpecRSAPrivateCrtKeySpec)

FOUNDATION_EXPORT void JavaSecuritySpecRSAPrivateCrtKeySpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaSecuritySpecRSAPrivateCrtKeySpec *self, JavaMathBigInteger *modulus, JavaMathBigInteger *publicExponent, JavaMathBigInteger *privateExponent, JavaMathBigInteger *primeP, JavaMathBigInteger *primeQ, JavaMathBigInteger *primeExponentP, JavaMathBigInteger *primeExponentQ, JavaMathBigInteger *crtCoefficient);

FOUNDATION_EXPORT JavaSecuritySpecRSAPrivateCrtKeySpec *new_JavaSecuritySpecRSAPrivateCrtKeySpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *modulus, JavaMathBigInteger *publicExponent, JavaMathBigInteger *privateExponent, JavaMathBigInteger *primeP, JavaMathBigInteger *primeQ, JavaMathBigInteger *primeExponentP, JavaMathBigInteger *primeExponentQ, JavaMathBigInteger *crtCoefficient) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecuritySpecRSAPrivateCrtKeySpec *create_JavaSecuritySpecRSAPrivateCrtKeySpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *modulus, JavaMathBigInteger *publicExponent, JavaMathBigInteger *privateExponent, JavaMathBigInteger *primeP, JavaMathBigInteger *primeQ, JavaMathBigInteger *primeExponentP, JavaMathBigInteger *primeExponentQ, JavaMathBigInteger *crtCoefficient);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecuritySpecRSAPrivateCrtKeySpec)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSecuritySpecRSAPrivateCrtKeySpec")
