//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/security/spec/RSAMultiPrimePrivateCrtKeySpec.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecuritySpecRSAMultiPrimePrivateCrtKeySpec")
#ifdef RESTRICT_JavaSecuritySpecRSAMultiPrimePrivateCrtKeySpec
#define INCLUDE_ALL_JavaSecuritySpecRSAMultiPrimePrivateCrtKeySpec 0
#else
#define INCLUDE_ALL_JavaSecuritySpecRSAMultiPrimePrivateCrtKeySpec 1
#endif
#undef RESTRICT_JavaSecuritySpecRSAMultiPrimePrivateCrtKeySpec

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSecuritySpecRSAMultiPrimePrivateCrtKeySpec_) && (INCLUDE_ALL_JavaSecuritySpecRSAMultiPrimePrivateCrtKeySpec || defined(INCLUDE_JavaSecuritySpecRSAMultiPrimePrivateCrtKeySpec))
#define JavaSecuritySpecRSAMultiPrimePrivateCrtKeySpec_

#define RESTRICT_JavaSecuritySpecRSAPrivateKeySpec 1
#define INCLUDE_JavaSecuritySpecRSAPrivateKeySpec 1
#include "java/security/spec/RSAPrivateKeySpec.h"

@class IOSObjectArray;
@class JavaMathBigInteger;

/*!
 @brief This class specifies an RSA multi-prime private key, as defined in the
  PKCS#1 v2.1, using the Chinese Remainder Theorem (CRT) information
  values for efficiency.
 @author Valerie Peng
 - seealso: java.security.Key
 - seealso: java.security.KeyFactory
 - seealso: KeySpec
 - seealso: PKCS8EncodedKeySpec
 - seealso: RSAPrivateKeySpec
 - seealso: RSAPublicKeySpec
 - seealso: RSAOtherPrimeInfo
 @since 1.4
 */
@interface JavaSecuritySpecRSAMultiPrimePrivateCrtKeySpec : JavaSecuritySpecRSAPrivateKeySpec

#pragma mark Public

/*!
 @brief Creates a new <code>RSAMultiPrimePrivateCrtKeySpec</code>
  given the modulus, publicExponent, privateExponent,
  primeP, primeQ, primeExponentP, primeExponentQ,
  crtCoefficient, and otherPrimeInfo as defined in PKCS#1 v2.1.
 <p>Note that the contents of <code>otherPrimeInfo</code>
  are copied to protect against subsequent modification when
  constructing this object.
 @param modulus the modulus n.
 @param publicExponent the public exponent e.
 @param privateExponent the private exponent d.
 @param primeP the prime factor p of n.
 @param primeQ the prime factor q of n.
 @param primeExponentP this is d mod (p-1).
 @param primeExponentQ this is d mod (q-1).
 @param crtCoefficient the Chinese Remainder Theorem  coefficient q-1 mod p.
 @param otherPrimeInfo triplets of the rest of primes, null can be  specified if there are only two prime factors (p and q).
 @throw NullPointerExceptionif any of the parameters, i.e. 
 <code>modulus</code>,
  <code>publicExponent</code>, <code>privateExponent</code>,
  <code>primeP</code>, <code>primeQ</code>,
  <code>primeExponentP</code>, <code>primeExponentQ</code>,
  <code>crtCoefficient</code>, is null.
 @throw IllegalArgumentExceptionif an empty, i.e. 0-length, 
 <code>otherPrimeInfo</code> is specified.
 */
- (instancetype __nonnull)initWithJavaMathBigInteger:(JavaMathBigInteger *)modulus
                              withJavaMathBigInteger:(JavaMathBigInteger *)publicExponent
                              withJavaMathBigInteger:(JavaMathBigInteger *)privateExponent
                              withJavaMathBigInteger:(JavaMathBigInteger *)primeP
                              withJavaMathBigInteger:(JavaMathBigInteger *)primeQ
                              withJavaMathBigInteger:(JavaMathBigInteger *)primeExponentP
                              withJavaMathBigInteger:(JavaMathBigInteger *)primeExponentQ
                              withJavaMathBigInteger:(JavaMathBigInteger *)crtCoefficient
          withJavaSecuritySpecRSAOtherPrimeInfoArray:(IOSObjectArray *)otherPrimeInfo;

/*!
 @brief Returns the crtCoefficient.
 @return the crtCoefficient.
 */
- (JavaMathBigInteger *)getCrtCoefficient;

/*!
 @brief Returns a copy of the otherPrimeInfo or null if there are
  only two prime factors (p and q).
 @return the otherPrimeInfo. Returns a new array each
  time this method is called.
 */
- (IOSObjectArray *)getOtherPrimeInfo;

/*!
 @brief Returns the primeExponentP.
 @return the primeExponentP.
 */
- (JavaMathBigInteger *)getPrimeExponentP;

/*!
 @brief Returns the primeExponentQ.
 @return the primeExponentQ.
 */
- (JavaMathBigInteger *)getPrimeExponentQ;

/*!
 @brief Returns the primeP.
 @return the primeP.
 */
- (JavaMathBigInteger *)getPrimeP;

/*!
 @brief Returns the primeQ.
 @return the primeQ.
 */
- (JavaMathBigInteger *)getPrimeQ;

/*!
 @brief Returns the public exponent.
 @return the public exponent.
 */
- (JavaMathBigInteger *)getPublicExponent;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaMathBigInteger:(JavaMathBigInteger *)arg0
                              withJavaMathBigInteger:(JavaMathBigInteger *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecuritySpecRSAMultiPrimePrivateCrtKeySpec)

FOUNDATION_EXPORT void JavaSecuritySpecRSAMultiPrimePrivateCrtKeySpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySpecRSAOtherPrimeInfoArray_(JavaSecuritySpecRSAMultiPrimePrivateCrtKeySpec *self, JavaMathBigInteger *modulus, JavaMathBigInteger *publicExponent, JavaMathBigInteger *privateExponent, JavaMathBigInteger *primeP, JavaMathBigInteger *primeQ, JavaMathBigInteger *primeExponentP, JavaMathBigInteger *primeExponentQ, JavaMathBigInteger *crtCoefficient, IOSObjectArray *otherPrimeInfo);

FOUNDATION_EXPORT JavaSecuritySpecRSAMultiPrimePrivateCrtKeySpec *new_JavaSecuritySpecRSAMultiPrimePrivateCrtKeySpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySpecRSAOtherPrimeInfoArray_(JavaMathBigInteger *modulus, JavaMathBigInteger *publicExponent, JavaMathBigInteger *privateExponent, JavaMathBigInteger *primeP, JavaMathBigInteger *primeQ, JavaMathBigInteger *primeExponentP, JavaMathBigInteger *primeExponentQ, JavaMathBigInteger *crtCoefficient, IOSObjectArray *otherPrimeInfo) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecuritySpecRSAMultiPrimePrivateCrtKeySpec *create_JavaSecuritySpecRSAMultiPrimePrivateCrtKeySpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySpecRSAOtherPrimeInfoArray_(JavaMathBigInteger *modulus, JavaMathBigInteger *publicExponent, JavaMathBigInteger *privateExponent, JavaMathBigInteger *primeP, JavaMathBigInteger *primeQ, JavaMathBigInteger *primeExponentP, JavaMathBigInteger *primeExponentQ, JavaMathBigInteger *crtCoefficient, IOSObjectArray *otherPrimeInfo);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecuritySpecRSAMultiPrimePrivateCrtKeySpec)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSecuritySpecRSAMultiPrimePrivateCrtKeySpec")
