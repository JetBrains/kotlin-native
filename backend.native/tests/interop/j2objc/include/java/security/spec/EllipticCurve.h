//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/security/spec/EllipticCurve.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecuritySpecEllipticCurve")
#ifdef RESTRICT_JavaSecuritySpecEllipticCurve
#define INCLUDE_ALL_JavaSecuritySpecEllipticCurve 0
#else
#define INCLUDE_ALL_JavaSecuritySpecEllipticCurve 1
#endif
#undef RESTRICT_JavaSecuritySpecEllipticCurve

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSecuritySpecEllipticCurve_) && (INCLUDE_ALL_JavaSecuritySpecEllipticCurve || defined(INCLUDE_JavaSecuritySpecEllipticCurve))
#define JavaSecuritySpecEllipticCurve_

@class IOSByteArray;
@class JavaMathBigInteger;
@protocol JavaSecuritySpecECField;

/*!
 @brief This immutable class holds the necessary values needed to represent
  an elliptic curve.
 - seealso: ECField
 - seealso: ECFieldFp
 - seealso: ECFieldF2m
 @author Valerie Peng
 @since 1.5
 */
@interface JavaSecuritySpecEllipticCurve : NSObject

#pragma mark Public

/*!
 @brief Creates an elliptic curve with the specified elliptic field 
 <code>field</code> and the coefficients <code>a</code> and 
 <code>b</code>.
 @param field the finite field that this elliptic curve is over.
 @param a the first coefficient of this elliptic curve.
 @param b the second coefficient of this elliptic curve.
 @throw NullPointerExceptionif <code>field</code>,
  <code>a</code>, or <code>b</code> is null.
 @throw IllegalArgumentExceptionif <code>a</code>
  or <code>b</code> is not null and not in <code>field</code>.
 */
- (instancetype __nonnull)initWithJavaSecuritySpecECField:(id<JavaSecuritySpecECField>)field
                                   withJavaMathBigInteger:(JavaMathBigInteger *)a
                                   withJavaMathBigInteger:(JavaMathBigInteger *)b;

/*!
 @brief Creates an elliptic curve with the specified elliptic field 
 <code>field</code>, the coefficients <code>a</code> and 
 <code>b</code>, and the <code>seed</code> used for curve generation.
 @param field the finite field that this elliptic curve is over.
 @param a the first coefficient of this elliptic curve.
 @param b the second coefficient of this elliptic curve.
 @param seed the bytes used during curve generation for later  validation. Contents of this array are copied to protect against
   subsequent modification.
 @throw NullPointerExceptionif <code>field</code>,
  <code>a</code>, or <code>b</code> is null.
 @throw IllegalArgumentExceptionif <code>a</code>
  or <code>b</code> is not null and not in <code>field</code>.
 */
- (instancetype __nonnull)initWithJavaSecuritySpecECField:(id<JavaSecuritySpecECField>)field
                                   withJavaMathBigInteger:(JavaMathBigInteger *)a
                                   withJavaMathBigInteger:(JavaMathBigInteger *)b
                                            withByteArray:(IOSByteArray *)seed;

/*!
 @brief Compares this elliptic curve for equality with the
  specified object.
 @param obj the object to be compared.
 @return true if <code>obj</code> is an instance of
  EllipticCurve and the field, A, and B match, false otherwise.
 */
- (jboolean)isEqual:(id)obj;

/*!
 @brief Returns the first coefficient <code>a</code> of the
  elliptic curve.
 @return the first coefficient <code>a</code>.
 */
- (JavaMathBigInteger *)getA;

/*!
 @brief Returns the second coefficient <code>b</code> of the
  elliptic curve.
 @return the second coefficient <code>b</code>.
 */
- (JavaMathBigInteger *)getB;

/*!
 @brief Returns the finite field <code>field</code> that this
  elliptic curve is over.
 @return the field <code>field</code> that this curve
  is over.
 */
- (id<JavaSecuritySpecECField>)getField;

/*!
 @brief Returns the seeding bytes <code>seed</code> used
  during curve generation.May be null if not specified.
 @return the seeding bytes <code>seed</code>. A new
  array is returned each time this method is called.
 */
- (IOSByteArray *)getSeed;

/*!
 @brief Returns a hash code value for this elliptic curve.
 @return a hash code value computed from the hash codes of the field, A,
  and B, as follows: 
 @code
    (field.hashCode() << 6) + (a.hashCode() << 4) + (b.hashCode() << 2) 
 
@endcode
 */
- (NSUInteger)hash;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecuritySpecEllipticCurve)

FOUNDATION_EXPORT void JavaSecuritySpecEllipticCurve_initWithJavaSecuritySpecECField_withJavaMathBigInteger_withJavaMathBigInteger_(JavaSecuritySpecEllipticCurve *self, id<JavaSecuritySpecECField> field, JavaMathBigInteger *a, JavaMathBigInteger *b);

FOUNDATION_EXPORT JavaSecuritySpecEllipticCurve *new_JavaSecuritySpecEllipticCurve_initWithJavaSecuritySpecECField_withJavaMathBigInteger_withJavaMathBigInteger_(id<JavaSecuritySpecECField> field, JavaMathBigInteger *a, JavaMathBigInteger *b) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecuritySpecEllipticCurve *create_JavaSecuritySpecEllipticCurve_initWithJavaSecuritySpecECField_withJavaMathBigInteger_withJavaMathBigInteger_(id<JavaSecuritySpecECField> field, JavaMathBigInteger *a, JavaMathBigInteger *b);

FOUNDATION_EXPORT void JavaSecuritySpecEllipticCurve_initWithJavaSecuritySpecECField_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(JavaSecuritySpecEllipticCurve *self, id<JavaSecuritySpecECField> field, JavaMathBigInteger *a, JavaMathBigInteger *b, IOSByteArray *seed);

FOUNDATION_EXPORT JavaSecuritySpecEllipticCurve *new_JavaSecuritySpecEllipticCurve_initWithJavaSecuritySpecECField_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(id<JavaSecuritySpecECField> field, JavaMathBigInteger *a, JavaMathBigInteger *b, IOSByteArray *seed) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecuritySpecEllipticCurve *create_JavaSecuritySpecEllipticCurve_initWithJavaSecuritySpecECField_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(id<JavaSecuritySpecECField> field, JavaMathBigInteger *a, JavaMathBigInteger *b, IOSByteArray *seed);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecuritySpecEllipticCurve)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSecuritySpecEllipticCurve")
