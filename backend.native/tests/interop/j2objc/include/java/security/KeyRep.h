//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/security/KeyRep.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecurityKeyRep")
#ifdef RESTRICT_JavaSecurityKeyRep
#define INCLUDE_ALL_JavaSecurityKeyRep 0
#else
#define INCLUDE_ALL_JavaSecurityKeyRep 1
#endif
#undef RESTRICT_JavaSecurityKeyRep

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSecurityKeyRep_) && (INCLUDE_ALL_JavaSecurityKeyRep || defined(INCLUDE_JavaSecurityKeyRep))
#define JavaSecurityKeyRep_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class IOSByteArray;
@class JavaSecurityKeyRep_Type;

/*!
 @brief Standardized representation for serialized Key objects.
 <p>
  Note that a serialized Key may contain sensitive information
  which should not be exposed in untrusted environments.  See the 
 <a href="{@@docRoot}openjdk-redirect.html?v=8&path=/platform/serialization/spec/security.html">
  Security Appendix</a>
  of the Serialization Specification for more information.
 - seealso: Key
 - seealso: KeyFactory
 - seealso: javax.crypto.spec.SecretKeySpec
 - seealso: java.security.spec.X509EncodedKeySpec
 - seealso: java.security.spec.PKCS8EncodedKeySpec
 @since 1.5
 */
@interface JavaSecurityKeyRep : NSObject < JavaIoSerializable >

#pragma mark Public

/*!
 @brief Construct the alternate Key class.
 <p>
 @param type either one of Type.SECRET, Type.PUBLIC, or Type.PRIVATE
 @param algorithm the algorithm returned from           
 <code>Key.getAlgorithm()</code>
 @param format the encoding format returned from           
 <code>Key.getFormat()</code>
 @param encoded the encoded bytes returned from           
 <code>Key.getEncoded()</code>
 @throw NullPointerException
 if type is <code>null</code>,
           if algorithm is <code>null</code>,
           if format is <code>null</code>,
           or if encoded is <code>null</code>
 */
- (instancetype __nonnull)initWithJavaSecurityKeyRep_Type:(JavaSecurityKeyRep_Type *)type
                                             withNSString:(NSString *)algorithm
                                             withNSString:(NSString *)format
                                            withByteArray:(IOSByteArray *)encoded;

#pragma mark Protected

/*!
 @brief Resolve the Key object.
 <p> This method supports three Type/format combinations: 
 <ul>
  <li> Type.SECRET/"RAW" - returns a SecretKeySpec object
  constructed using encoded key bytes and algorithm 
 <li> Type.PUBLIC/"X.509" - gets a KeyFactory instance for
  the key algorithm, constructs an X509EncodedKeySpec with the
  encoded key bytes, and generates a public key from the spec 
 <li> Type.PRIVATE/"PKCS#8" - gets a KeyFactory instance for
  the key algorithm, constructs a PKCS8EncodedKeySpec with the
  encoded key bytes, and generates a private key from the spec 
 </ul>
  
 <p>
 @return the resolved Key object
 @throw ObjectStreamExceptionif the Type/format
   combination is unrecognized, if the algorithm, key format, or
   encoded key bytes are unrecognized/invalid, of if the
   resolution of the key fails for any reason
 */
- (id)readResolve;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityKeyRep)

FOUNDATION_EXPORT void JavaSecurityKeyRep_initWithJavaSecurityKeyRep_Type_withNSString_withNSString_withByteArray_(JavaSecurityKeyRep *self, JavaSecurityKeyRep_Type *type, NSString *algorithm, NSString *format, IOSByteArray *encoded);

FOUNDATION_EXPORT JavaSecurityKeyRep *new_JavaSecurityKeyRep_initWithJavaSecurityKeyRep_Type_withNSString_withNSString_withByteArray_(JavaSecurityKeyRep_Type *type, NSString *algorithm, NSString *format, IOSByteArray *encoded) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityKeyRep *create_JavaSecurityKeyRep_initWithJavaSecurityKeyRep_Type_withNSString_withNSString_withByteArray_(JavaSecurityKeyRep_Type *type, NSString *algorithm, NSString *format, IOSByteArray *encoded);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityKeyRep)

#endif

#if !defined (JavaSecurityKeyRep_Type_) && (INCLUDE_ALL_JavaSecurityKeyRep || defined(INCLUDE_JavaSecurityKeyRep_Type))
#define JavaSecurityKeyRep_Type_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, JavaSecurityKeyRep_Type_Enum) {
  JavaSecurityKeyRep_Type_Enum_SECRET = 0,
  JavaSecurityKeyRep_Type_Enum_PUBLIC = 1,
  JavaSecurityKeyRep_Type_Enum_PRIVATE = 2,
};

/*!
 @brief Key type.
 @since 1.5
 */
@interface JavaSecurityKeyRep_Type : JavaLangEnum

@property (readonly, class, nonnull) JavaSecurityKeyRep_Type *SECRET NS_SWIFT_NAME(SECRET);
@property (readonly, class, nonnull) JavaSecurityKeyRep_Type *PUBLIC NS_SWIFT_NAME(PUBLIC);
@property (readonly, class, nonnull) JavaSecurityKeyRep_Type *PRIVATE NS_SWIFT_NAME(PRIVATE);
+ (JavaSecurityKeyRep_Type * __nonnull)SECRET;

+ (JavaSecurityKeyRep_Type * __nonnull)PUBLIC;

+ (JavaSecurityKeyRep_Type * __nonnull)PRIVATE;

#pragma mark Public

+ (JavaSecurityKeyRep_Type *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (JavaSecurityKeyRep_Type_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(JavaSecurityKeyRep_Type)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT JavaSecurityKeyRep_Type *JavaSecurityKeyRep_Type_values_[];

/*!
 @brief Type for secret keys.
 */
inline JavaSecurityKeyRep_Type *JavaSecurityKeyRep_Type_get_SECRET(void);
J2OBJC_ENUM_CONSTANT(JavaSecurityKeyRep_Type, SECRET)

/*!
 @brief Type for public keys.
 */
inline JavaSecurityKeyRep_Type *JavaSecurityKeyRep_Type_get_PUBLIC(void);
J2OBJC_ENUM_CONSTANT(JavaSecurityKeyRep_Type, PUBLIC)

/*!
 @brief Type for private keys.
 */
inline JavaSecurityKeyRep_Type *JavaSecurityKeyRep_Type_get_PRIVATE(void);
J2OBJC_ENUM_CONSTANT(JavaSecurityKeyRep_Type, PRIVATE)

FOUNDATION_EXPORT IOSObjectArray *JavaSecurityKeyRep_Type_values(void);

FOUNDATION_EXPORT JavaSecurityKeyRep_Type *JavaSecurityKeyRep_Type_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT JavaSecurityKeyRep_Type *JavaSecurityKeyRep_Type_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityKeyRep_Type)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSecurityKeyRep")
