//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/security/KeyFactorySpi.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecurityKeyFactorySpi")
#ifdef RESTRICT_JavaSecurityKeyFactorySpi
#define INCLUDE_ALL_JavaSecurityKeyFactorySpi 0
#else
#define INCLUDE_ALL_JavaSecurityKeyFactorySpi 1
#endif
#undef RESTRICT_JavaSecurityKeyFactorySpi

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSecurityKeyFactorySpi_) && (INCLUDE_ALL_JavaSecurityKeyFactorySpi || defined(INCLUDE_JavaSecurityKeyFactorySpi))
#define JavaSecurityKeyFactorySpi_

@class IOSClass;
@protocol JavaSecurityKey;
@protocol JavaSecurityPrivateKey;
@protocol JavaSecurityPublicKey;
@protocol JavaSecuritySpecKeySpec;

/*!
 @brief This class defines the <i>Service Provider Interface</i> (<b>SPI</b>)
  for the <code>KeyFactory</code> class.
 All the abstract methods in this class must be implemented by each
  cryptographic service provider who wishes to supply the implementation
  of a key factory for a particular algorithm. 
 <P> Key factories are used to convert <I>keys</I> (opaque
  cryptographic keys of type <code>Key</code>) into <I>key specifications</I>
  (transparent representations of the underlying key material), and vice
  versa. 
 <P> Key factories are bi-directional. That is, they allow you to build an
  opaque key object from a given key specification (key material), or to
  retrieve the underlying key material of a key object in a suitable format. 
 <P> Multiple compatible key specifications may exist for the same key.
  For example, a DSA public key may be specified using 
 <code>DSAPublicKeySpec</code> or 
 <code>X509EncodedKeySpec</code>. A key factory can be used to translate
  between compatible key specifications. 
 <P> A provider should document all the key specifications supported by its
  key factory.
 @author Jan Luehe
 - seealso: KeyFactory
 - seealso: Key
 - seealso: PublicKey
 - seealso: PrivateKey
 - seealso: java.security.spec.KeySpec
 - seealso: java.security.spec.DSAPublicKeySpec
 - seealso: java.security.spec.X509EncodedKeySpec
 @since 1.2
 */
@interface JavaSecurityKeyFactorySpi : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

#pragma mark Protected

/*!
 @brief Generates a private key object from the provided key
  specification (key material).
 @param keySpec the specification (key material) of the private key.
 @return the private key.
 @throw InvalidKeySpecExceptionif the given key specification
  is inappropriate for this key factory to produce a private key.
 */
- (id<JavaSecurityPrivateKey>)engineGeneratePrivateWithJavaSecuritySpecKeySpec:(id<JavaSecuritySpecKeySpec>)keySpec;

/*!
 @brief Generates a public key object from the provided key
  specification (key material).
 @param keySpec the specification (key material) of the public key.
 @return the public key.
 @throw InvalidKeySpecExceptionif the given key specification
  is inappropriate for this key factory to produce a public key.
 */
- (id<JavaSecurityPublicKey>)engineGeneratePublicWithJavaSecuritySpecKeySpec:(id<JavaSecuritySpecKeySpec>)keySpec;

/*!
 @brief Returns a specification (key material) of the given key
  object.
 <code>keySpec</code> identifies the specification class in which
  the key material should be returned. It could, for example, be 
 <code>DSAPublicKeySpec.class</code>, to indicate that the
  key material should be returned in an instance of the 
 <code>DSAPublicKeySpec</code> class.
 @param key the key.
 @param keySpec the specification class in which  the key material should be returned.
 @return the underlying key specification (key material) in an instance
  of the requested specification class.
 @throw InvalidKeySpecExceptionif the requested key specification is
  inappropriate for the given key, or the given key cannot be dealt with
  (e.g., the given key has an unrecognized format).
 */
- (id<JavaSecuritySpecKeySpec>)engineGetKeySpecWithJavaSecurityKey:(id<JavaSecurityKey>)key
                                                      withIOSClass:(IOSClass *)keySpec;

/*!
 @brief Translates a key object, whose provider may be unknown or
  potentially untrusted, into a corresponding key object of this key
  factory.
 @param key the key whose provider is unknown or untrusted.
 @return the translated key.
 @throw InvalidKeyExceptionif the given key cannot be processed
  by this key factory.
 */
- (id<JavaSecurityKey>)engineTranslateKeyWithJavaSecurityKey:(id<JavaSecurityKey>)key;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityKeyFactorySpi)

FOUNDATION_EXPORT void JavaSecurityKeyFactorySpi_init(JavaSecurityKeyFactorySpi *self);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityKeyFactorySpi)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSecurityKeyFactorySpi")
