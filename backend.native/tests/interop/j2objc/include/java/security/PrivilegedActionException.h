//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/security/PrivilegedActionException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecurityPrivilegedActionException")
#ifdef RESTRICT_JavaSecurityPrivilegedActionException
#define INCLUDE_ALL_JavaSecurityPrivilegedActionException 0
#else
#define INCLUDE_ALL_JavaSecurityPrivilegedActionException 1
#endif
#undef RESTRICT_JavaSecurityPrivilegedActionException

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSecurityPrivilegedActionException_) && (INCLUDE_ALL_JavaSecurityPrivilegedActionException || defined(INCLUDE_JavaSecurityPrivilegedActionException))
#define JavaSecurityPrivilegedActionException_

#define RESTRICT_JavaLangException 1
#define INCLUDE_JavaLangException 1
#include "java/lang/Exception.h"

@class JavaLangThrowable;

/*!
 @brief Legacy security code; do not use.
 This exception is thrown by 
 <code>doPrivileged(PrivilegedExceptionAction)</code> and 
 <code>doPrivileged(PrivilegedExceptionAction,
  AccessControlContext context)</code>
  to indicate
  that the action being performed threw a checked exception.  The exception
  thrown by the action can be obtained by calling the 
 <code>getException</code> method.  In effect, an 
 <code>PrivilegedActionException</code> is a "wrapper"
  for an exception thrown by a privileged action. 
 <p>As of release 1.4, this exception has been retrofitted to conform to
  the general purpose exception-chaining mechanism.  The "exception thrown
  by the privileged computation" that is provided at construction time and
  accessed via the <code>getException()</code> method is now known as the 
 <i>cause</i>, and may be accessed via the <code>Throwable.getCause()</code>
  method, as well as the aforementioned "legacy method."
 - seealso: PrivilegedExceptionAction
 - seealso: AccessController#doPrivileged(PrivilegedExceptionAction)
 - seealso: AccessController#doPrivileged(PrivilegedExceptionAction,AccessControlContext)
 */
@interface JavaSecurityPrivilegedActionException : JavaLangException

#pragma mark Public

/*!
 @brief Constructs a new PrivilegedActionException &quot;wrapping&quot;
  the specific Exception.
 @param exception The exception thrown
 */
- (instancetype __nonnull)initWithJavaLangException:(JavaLangException *)exception;

/*!
 @brief Returns the cause of this exception (the exception thrown by
  the privileged computation that resulted in this 
 <code>PrivilegedActionException</code>).
 @return the cause of this exception.
 @since 1.4
 */
- (JavaLangThrowable *)getCause;

/*!
 @brief Returns the exception thrown by the privileged computation that
  resulted in this <code>PrivilegedActionException</code>.
 <p>This method predates the general-purpose exception chaining facility.
  The <code>Throwable.getCause()</code> method is now the preferred means of
  obtaining this information.
 @return the exception thrown by the privileged computation that
          resulted in this <code>PrivilegedActionException</code>.
 - seealso: PrivilegedExceptionAction
 - seealso: AccessController#doPrivileged(PrivilegedExceptionAction)
 - seealso: AccessController#doPrivileged(PrivilegedExceptionAction,
                                            AccessControlContext)
 */
- (JavaLangException *)getException;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1
                               withBoolean:(jboolean)arg2
                               withBoolean:(jboolean)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityPrivilegedActionException)

FOUNDATION_EXPORT void JavaSecurityPrivilegedActionException_initWithJavaLangException_(JavaSecurityPrivilegedActionException *self, JavaLangException *exception);

FOUNDATION_EXPORT JavaSecurityPrivilegedActionException *new_JavaSecurityPrivilegedActionException_initWithJavaLangException_(JavaLangException *exception) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityPrivilegedActionException *create_JavaSecurityPrivilegedActionException_initWithJavaLangException_(JavaLangException *exception);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityPrivilegedActionException)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSecurityPrivilegedActionException")
