//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/security/GuardedObject.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecurityGuardedObject")
#ifdef RESTRICT_JavaSecurityGuardedObject
#define INCLUDE_ALL_JavaSecurityGuardedObject 0
#else
#define INCLUDE_ALL_JavaSecurityGuardedObject 1
#endif
#undef RESTRICT_JavaSecurityGuardedObject

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSecurityGuardedObject_) && (INCLUDE_ALL_JavaSecurityGuardedObject || defined(INCLUDE_JavaSecurityGuardedObject))
#define JavaSecurityGuardedObject_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@protocol JavaSecurityGuard;

/*!
 @brief A GuardedObject is an object that is used to protect access to
  another object.
 <p>A GuardedObject encapsulates a target object and a Guard object,
  such that access to the target object is possible
  only if the Guard object allows it.
  Once an object is encapsulated by a GuardedObject,
  access to that object is controlled by the <code>getObject</code>
  method, which invokes the 
 <code>checkGuard</code> method on the Guard object that is
  guarding access. If access is not allowed,
  an exception is thrown.
 - seealso: Guard
 - seealso: Permission
 @author Roland Schemers
 @author Li Gong
 */
@interface JavaSecurityGuardedObject : NSObject < JavaIoSerializable >

#pragma mark Public

/*!
 @brief Constructs a GuardedObject using the specified object and guard.
 If the Guard object is null, then no restrictions will
  be placed on who can access the object.
 @param object the object to be guarded.
 @param guard the Guard object that guards access to the object.
 */
- (instancetype __nonnull)initWithId:(id)object
               withJavaSecurityGuard:(id<JavaSecurityGuard>)guard;

/*!
 @brief Retrieves the guarded object, or throws an exception if access
  to the guarded object is denied by the guard.
 @return the guarded object.
 @throw SecurityExceptionif access to the guarded object is
  denied.
 */
- (id)getObject;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityGuardedObject)

FOUNDATION_EXPORT void JavaSecurityGuardedObject_initWithId_withJavaSecurityGuard_(JavaSecurityGuardedObject *self, id object, id<JavaSecurityGuard> guard);

FOUNDATION_EXPORT JavaSecurityGuardedObject *new_JavaSecurityGuardedObject_initWithId_withJavaSecurityGuard_(id object, id<JavaSecurityGuard> guard) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityGuardedObject *create_JavaSecurityGuardedObject_initWithId_withJavaSecurityGuard_(id object, id<JavaSecurityGuard> guard);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityGuardedObject)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSecurityGuardedObject")
