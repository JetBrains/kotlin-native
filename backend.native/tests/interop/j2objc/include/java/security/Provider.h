//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/security/Provider.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecurityProvider")
#ifdef RESTRICT_JavaSecurityProvider
#define INCLUDE_ALL_JavaSecurityProvider 0
#else
#define INCLUDE_ALL_JavaSecurityProvider 1
#endif
#undef RESTRICT_JavaSecurityProvider

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSecurityProvider_) && (INCLUDE_ALL_JavaSecurityProvider || defined(INCLUDE_JavaSecurityProvider))
#define JavaSecurityProvider_

#define RESTRICT_JavaUtilProperties 1
#define INCLUDE_JavaUtilProperties 1
#include "java/util/Properties.h"

@class JavaIoInputStream;
@class JavaSecurityProvider_Service;
@protocol JavaUtilCollection;
@protocol JavaUtilEnumeration;
@protocol JavaUtilFunctionBiConsumer;
@protocol JavaUtilMap;
@protocol JavaUtilSet;

/*!
 @brief This class represents a "provider" for the
  Java Security API, where a provider implements some or all parts of
  Java Security.Services that a provider may implement include: 
 <ul>
  
 <li>Algorithms (such as DSA, RSA, MD5 or SHA-1).
 <li>Key generation, conversion, and management facilities (such as for
  algorithm-specific keys).
 </ul>
  
 <p>Each provider has a name and a version number, and is configured
  in each runtime it is installed in. 
 <p>See <a href="{@@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/security/crypto/CryptoSpec.html#Provider">
 The Provider Class</a>
  in the "Java Cryptography Architecture API Specification &amp; Reference"
  for information about how a particular type of provider, the
  cryptographic service provider, works and is installed. However,
  please note that a provider can be used to implement any security
  service in Java that uses a pluggable architecture with a choice
  of implementations that fit underneath. 
 <p>Some provider implementations may encounter unrecoverable internal
  errors during their operation, for example a failure to communicate with a
  security token. A <code>ProviderException</code> should be used to indicate
  such errors. 
 <p>The service type <code>Provider</code> is reserved for use by the
  security framework. Services of this type cannot be added, removed,
  or modified by applications.
  The following attributes are automatically placed in each Provider object: 
 <table cellspacing=4>
  <tr><th>Name</th><th>Value</th>
  <tr><td><code>Provider.id name</code></td>
     <td><code>String.valueOf(provider.getName())</code></td>
  <tr><td><code>Provider.id version</code></td>
      <td><code>String.valueOf(provider.getVersion())</code></td>
  <tr><td><code>Provider.id info</code></td>
        <td><code>String.valueOf(provider.getInfo())</code></td>
  <tr><td><code>Provider.id className</code></td>
      <td><code>provider.getClass().getName()</code></td>
  </table>
 @author Benjamin Renaud
 @author Andreas Sterbenz
 */
@interface JavaSecurityProvider : JavaUtilProperties
@property (readonly, class) jlong serialVersionUID NS_SWIFT_NAME(serialVersionUID);

+ (jlong)serialVersionUID;

#pragma mark Public

/*!
 @brief Clears this provider so that it no longer contains the properties
  used to look up facilities implemented by the provider.
 <p>First, if there is a security manager, its 
 <code>checkSecurityAccess</code> method is called with the string 
 <code>"clearProviderProperties."+name</code> (where <code>name</code>
  is the provider name) to see if it's ok to clear this provider.
  If the default implementation of <code>checkSecurityAccess</code>
  is used (that is, that method is not overriden), then this results in
  a call to the security manager's <code>checkPermission</code> method
  with a <code>SecurityPermission("clearProviderProperties."+name)</code>
  permission.
 @throw SecurityException
 if a security manager exists and its <code><code>java.lang.SecurityManager.checkSecurityAccess</code>
 </code> method
           denies access to clear this provider
 @since 1.2
 */
- (void)clear;

- (id<JavaUtilEnumeration>)elements;

/*!
 @brief Returns an unmodifiable Set view of the property entries contained
  in this Provider.
 - seealso: java.util.Map.Entry
 @since 1.2
 */
- (id<JavaUtilSet>)entrySet;

/*!
 @since 1.8
 */
- (void)forEachWithJavaUtilFunctionBiConsumer:(id<JavaUtilFunctionBiConsumer>)action;

- (id)getWithId:(id)key;

/*!
 @brief Returns a human-readable description of the provider and its
  services.This may return an HTML page, with relevant links.
 @return a description of the provider and its services.
 */
- (NSString *)getInfo;

/*!
 @brief Returns the name of this provider.
 @return the name of this provider.
 */
- (NSString *)getName;

- (NSString *)getPropertyWithNSString:(NSString *)key;

/*!
 @brief Get the service describing this Provider's implementation of the
  specified type of this algorithm or alias.If no such
  implementation exists, this method returns null.
 If there are two
  matching services, one added to this provider using 
 <code>putService()</code> and one added via <code>put()</code>,
  the service added via <code>putService()</code> is returned.
 @param type the type of <code>service</code>  requested
   (for example,  <code> MessageDigest </code> )
 @param algorithm the case insensitive algorithm name (or alternate  alias) of the service requested (for example, 
  <code> SHA-1 </code> )
 @return the service describing this Provider's matching service
  or null if no such service exists
 @throw NullPointerExceptionif type or algorithm is null
 @since 1.5
 */
- (JavaSecurityProvider_Service *)getServiceWithNSString:(NSString *)type
                                            withNSString:(NSString *)algorithm;

/*!
 @brief Get an unmodifiable Set of all services supported by
  this Provider.
 @return an unmodifiable Set of all services supported by
  this Provider
 @since 1.5
 */
- (id<JavaUtilSet>)getServices;

/*!
 @brief Returns the version number for this provider.
 @return the version number for this provider.
 */
- (jdouble)getVersion;

/*!
 */
- (jboolean)isRegistered;

- (id<JavaUtilEnumeration>)keys;

/*!
 @brief Returns an unmodifiable Set view of the property keys contained in
  this provider.
 @since 1.2
 */
- (id<JavaUtilSet>)keySet;

/*!
 @brief Reads a property list (key and element pairs) from the input stream.
 @param inStream the input stream.
 @throw IOExceptionif an error occurred when reading from the
                input stream.
 - seealso: java.util.Properties#load
 */
- (void)load__WithJavaIoInputStream:(JavaIoInputStream *)inStream;

/*!
 @brief Sets the <code>key</code> property to have the specified 
 <code>value</code>.
 <p>First, if there is a security manager, its 
 <code>checkSecurityAccess</code> method is called with the string 
 <code>"putProviderProperty."+name</code>, where <code>name</code> is the
  provider name, to see if it's ok to set this provider's property values.
  If the default implementation of <code>checkSecurityAccess</code>
  is used (that is, that method is not overriden), then this results in
  a call to the security manager's <code>checkPermission</code> method
  with a <code>SecurityPermission("putProviderProperty."+name)</code>
  permission.
 @param key the property key.
 @param value the property value.
 @return the previous value of the specified property
  (<code>key</code>), or null if it did not have one.
 @throw SecurityException
 if a security manager exists and its <code><code>java.lang.SecurityManager.checkSecurityAccess</code>
 </code> method
           denies access to set property values.
 @since 1.2
 */
- (id)putWithId:(id)key
         withId:(id)value;

/*!
 @brief Copies all of the mappings from the specified Map to this provider.
 These mappings will replace any properties that this provider had
  for any of the keys currently in the specified Map.
 @since 1.2
 */
- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)t;

/*!
 @brief Removes the <code>key</code> property (and its corresponding 
 <code>value</code>).
 <p>First, if there is a security manager, its 
 <code>checkSecurityAccess</code> method is called with the string 
 <code>"removeProviderProperty."+name</code>, where <code>name</code> is
  the provider name, to see if it's ok to remove this provider's
  properties. If the default implementation of 
 <code>checkSecurityAccess</code> is used (that is, that method is not
  overriden), then this results in a call to the security manager's 
 <code>checkPermission</code> method with a 
 <code>SecurityPermission("removeProviderProperty."+name)</code>
  permission.
 @param key the key for the property to be removed.
 @return the value to which the key had been mapped,
  or null if the key did not have a mapping.
 @throw SecurityException
 if a security manager exists and its <code><code>java.lang.SecurityManager.checkSecurityAccess</code>
 </code> method
           denies access to remove this provider's properties.
 @since 1.2
 */
- (id)removeWithId:(id)key;

/*!
 */
- (void)setRegistered;

/*!
 */
- (void)setUnregistered;

/*!
 @brief Returns a string with the name and the version number
  of this provider.
 @return the string with the name and the version number
  for this provider.
 */
- (NSString *)description;

/*!
 @brief Returns an unmodifiable Collection view of the property values
  contained in this provider.
 @since 1.2
 */
- (id<JavaUtilCollection>)values;

/*!
 @brief Ensure the values cached by <code>getServices</code> and <code>getService</code> are already computed
  Used by the zygote so that initialization is performed during preload for the providers
  available at that point.
 */
- (void)warmUpServiceProvision;

#pragma mark Protected

/*!
 @brief Constructs a provider with the specified name, version number,
  and information.
 @param name the provider name.
 @param version_ the provider version number.
 @param info a description of the provider and its services.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)name
                                withDouble:(jdouble)version_
                              withNSString:(NSString *)info;

/*!
 @brief Add a service.If a service of the same type with the same algorithm
  name exists and it was added using <code>putService()</code>,
  it is replaced by the new service.
 This method also places information about this service
  in the provider's Hashtable values in the format described in the 
 <a href="{@@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/security/crypto/CryptoSpec.html">
  Java Cryptography Architecture API Specification &amp; Reference </a>.
  
 <p>Also, if there is a security manager, its 
 <code>checkSecurityAccess</code> method is called with the string 
 <code>"putProviderProperty."+name</code>, where <code>name</code> is
  the provider name, to see if it's ok to set this provider's property
  values. If the default implementation of <code>checkSecurityAccess</code>
  is used (that is, that method is not overriden), then this results in
  a call to the security manager's <code>checkPermission</code> method with
  a <code>SecurityPermission("putProviderProperty."+name)</code>
  permission.
 @param s the Service to add
 @throw SecurityException
 if a security manager exists and its <code><code>java.lang.SecurityManager.checkSecurityAccess</code>
 </code> method denies
       access to set property values.
 @throw NullPointerExceptionif s is null
 @since 1.5
 */
- (void)putServiceWithJavaSecurityProvider_Service:(JavaSecurityProvider_Service *)s;

/*!
 @brief Remove a service previously added using 
 <code>putService()</code>.The specified service is removed from
  this provider.
 It will no longer be returned by 
 <code>getService()</code> and its information will be removed
  from this provider's Hashtable. 
 <p>Also, if there is a security manager, its 
 <code>checkSecurityAccess</code> method is called with the string 
 <code>"removeProviderProperty."+name</code>, where <code>name</code> is
  the provider name, to see if it's ok to remove this provider's
  properties. If the default implementation of 
 <code>checkSecurityAccess</code> is used (that is, that method is not
  overriden), then this results in a call to the security manager's 
 <code>checkPermission</code> method with a 
 <code>SecurityPermission("removeProviderProperty."+name)</code>
  permission.
 @param s the Service to be removed
 @throw SecurityException
 if a security manager exists and its <code><code>java.lang.SecurityManager.checkSecurityAccess</code>
 </code> method denies
           access to remove this provider's properties.
 @throw NullPointerExceptionif s is null
 @since 1.5
 */
- (void)removeServiceWithJavaSecurityProvider_Service:(JavaSecurityProvider_Service *)s;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithJavaUtilProperties:(JavaUtilProperties *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(JavaSecurityProvider)

inline jlong JavaSecurityProvider_get_serialVersionUID(void);
#define JavaSecurityProvider_serialVersionUID -4298000515446427739LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaSecurityProvider, serialVersionUID, jlong)

FOUNDATION_EXPORT void JavaSecurityProvider_initWithNSString_withDouble_withNSString_(JavaSecurityProvider *self, NSString *name, jdouble version_, NSString *info);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityProvider)

#endif

#if !defined (JavaSecurityProvider_Service_) && (INCLUDE_ALL_JavaSecurityProvider || defined(INCLUDE_JavaSecurityProvider_Service))
#define JavaSecurityProvider_Service_

@class JavaSecurityProvider;
@protocol JavaUtilList;
@protocol JavaUtilMap;

/*!
 @brief The description of a security service.It encapsulates the properties
  of a service and contains a factory method to obtain new implementation
  instances of this service.
 <p>Each service has a provider that offers the service, a type,
  an algorithm name, and the name of the class that implements the
  service. Optionally, it also includes a list of alternate algorithm
  names for this service (aliases) and attributes, which are a map of
  (name, value) String pairs. 
 <p>This class defines the methods <code>supportsParameter()</code>
  and <code>newInstance()</code>
  which are used by the Java security framework when it searches for
  suitable services and instantes them. The valid arguments to those
  methods depend on the type of service. For the service types defined
  within Java SE, see the 
 <a href="{@@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/security/crypto/CryptoSpec.html">
  Java Cryptography Architecture API Specification &amp; Reference </a>
  for the valid values.
  Note that components outside of Java SE can define additional types of
  services and their behavior. 
 <p>Instances of this class are immutable.
 @since 1.5
 */
@interface JavaSecurityProvider_Service : NSObject

#pragma mark Public

/*!
 @brief Construct a new service.
 @param provider the provider that offers this service
 @param type the type of this service
 @param algorithm the algorithm name
 @param className_ the name of the class implementing this service
 @param aliases List of aliases or null if algorithm has no aliases
 @param attributes Map of attributes or null if this implementation                    has no attributes
 @throw NullPointerExceptionif provider, type, algorithm, or
  className is null
 */
- (instancetype __nonnull)initWithJavaSecurityProvider:(JavaSecurityProvider *)provider
                                          withNSString:(NSString *)type
                                          withNSString:(NSString *)algorithm
                                          withNSString:(NSString *)className_
                                      withJavaUtilList:(id<JavaUtilList>)aliases
                                       withJavaUtilMap:(id<JavaUtilMap>)attributes;

/*!
 @brief Return the name of the algorithm of this service.For example, 
 <code>SHA-1</code>.
 @return the algorithm of this service
 */
- (NSString *)getAlgorithm;

/*!
 @brief Return the value of the specified attribute or null if this
  attribute is not set for this Service.
 @param name the name of the requested attribute
 @return the value of the specified attribute or null if the
          attribute is not present
 @throw NullPointerExceptionif name is null
 */
- (NSString *)getAttributeWithNSString:(NSString *)name;

/*!
 @brief Return the name of the class implementing this service.
 @return the name of the class implementing this service
 */
- (NSString *)getClassName;

/*!
 @brief Return the Provider of this service.
 @return the Provider of this service
 */
- (JavaSecurityProvider *)getProvider;

/*!
 @brief Get the type of this service.For example, <code>MessageDigest</code>.
 @return the type of this service
 */
- (NSString *)getType;

/*!
 @brief Return a new instance of the implementation described by this
  service.The security provider framework uses this method to
  construct implementations.
 Applications will typically not need
  to call it. 
 <p>The default implementation uses reflection to invoke the
  standard constructor for this type of service.
  Security providers can override this method to implement
  instantiation in a different way.
  For details and the values of constructorParameter that are
  valid for the various types of services see the 
 <a href="{@@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/security/crypto/CryptoSpec.html">
  Java Cryptography Architecture API Specification &amp;
  Reference</a>.
 @param constructorParameter the value to pass to the constructor,  or null if this type of service does not use a constructorParameter.
 @return a new implementation of this service
 @throw InvalidParameterExceptionif the value of
  constructorParameter is invalid for this type of service.
 @throw NoSuchAlgorithmExceptionif instantation failed for
  any other reason.
 */
- (id)newInstanceWithId:(id)constructorParameter OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Test whether this Service can use the specified parameter.
 Returns false if this service cannot use the parameter. Returns
  true if this service can use the parameter, if a fast test is
  infeasible, or if the status is unknown. 
 <p>The security provider framework uses this method with
  some types of services to quickly exclude non-matching
  implementations for consideration.
  Applications will typically not need to call it. 
 <p>For details and the values of parameter that are valid for the
  various types of services see the top of this class and the 
 <a href="{@@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/security/crypto/CryptoSpec.html">
  Java Cryptography Architecture API Specification &amp;
  Reference</a>.
  Security providers can override it to implement their own test.
 @param parameter the parameter to test
 @return false if this this service cannot use the specified
  parameter; true if it can possibly use the parameter
 @throw InvalidParameterExceptionif the value of parameter is
  invalid for this type of service or if this method cannot be
  used with this type of service
 */
- (jboolean)supportsParameterWithId:(id)parameter;

/*!
 @brief Return a String representation of this service.
 @return a String representation of this service.
 */
- (NSString *)description;

#pragma mark Package-Private

- (void)addAttributeWithNSString:(NSString *)type
                    withNSString:(NSString *)value;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(JavaSecurityProvider_Service)

FOUNDATION_EXPORT void JavaSecurityProvider_Service_initWithJavaSecurityProvider_withNSString_withNSString_withNSString_withJavaUtilList_withJavaUtilMap_(JavaSecurityProvider_Service *self, JavaSecurityProvider *provider, NSString *type, NSString *algorithm, NSString *className_, id<JavaUtilList> aliases, id<JavaUtilMap> attributes);

FOUNDATION_EXPORT JavaSecurityProvider_Service *new_JavaSecurityProvider_Service_initWithJavaSecurityProvider_withNSString_withNSString_withNSString_withJavaUtilList_withJavaUtilMap_(JavaSecurityProvider *provider, NSString *type, NSString *algorithm, NSString *className_, id<JavaUtilList> aliases, id<JavaUtilMap> attributes) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityProvider_Service *create_JavaSecurityProvider_Service_initWithJavaSecurityProvider_withNSString_withNSString_withNSString_withJavaUtilList_withJavaUtilMap_(JavaSecurityProvider *provider, NSString *type, NSString *algorithm, NSString *className_, id<JavaUtilList> aliases, id<JavaUtilMap> attributes);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityProvider_Service)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSecurityProvider")
