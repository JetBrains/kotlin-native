//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/security/SignatureSpi.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecuritySignatureSpi")
#ifdef RESTRICT_JavaSecuritySignatureSpi
#define INCLUDE_ALL_JavaSecuritySignatureSpi 0
#else
#define INCLUDE_ALL_JavaSecuritySignatureSpi 1
#endif
#undef RESTRICT_JavaSecuritySignatureSpi

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSecuritySignatureSpi_) && (INCLUDE_ALL_JavaSecuritySignatureSpi || defined(INCLUDE_JavaSecuritySignatureSpi))
#define JavaSecuritySignatureSpi_

@class IOSByteArray;
@class JavaNioByteBuffer;
@class JavaSecurityAlgorithmParameters;
@class JavaSecuritySecureRandom;
@protocol JavaSecurityPrivateKey;
@protocol JavaSecurityPublicKey;
@protocol JavaSecuritySpecAlgorithmParameterSpec;

/*!
 @brief This class defines the <i>Service Provider Interface</i> (<b>SPI</b>)
  for the <code>Signature</code> class, which is used to provide the
  functionality of a digital signature algorithm.Digital signatures are used
  for authentication and integrity assurance of digital data..
 <p> All the abstract methods in this class must be implemented by each
  cryptographic service provider who wishes to supply the implementation
  of a particular signature algorithm.
 @author Benjamin Renaud
 - seealso: Signature
 */
@interface JavaSecuritySignatureSpi : NSObject {
 @public
  /*!
   @brief Application-specified source of randomness.
   */
  JavaSecuritySecureRandom *appRandom_;
}

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Returns a clone if the implementation is cloneable.
 @return a clone if the implementation is cloneable.
 @throw CloneNotSupportedExceptionif this is called
  on an implementation that does not support <code>Cloneable</code>.
 */
- (id)java_clone;

#pragma mark Protected

/*!
 @brief Gets the value of the specified algorithm parameter.
 This method supplies a general-purpose mechanism through which it
  is possible to get the various parameters of this object. A parameter
  may be any settable parameter for the algorithm, such as a parameter
  size, or  a source of random bits for signature generation (if
  appropriate), or an indication of whether or not to perform a
  specific but optional computation. A uniform algorithm-specific
  naming scheme for each parameter is desirable but left unspecified
  at this time.
 @param param the string name of the parameter.
 @return the object that represents the parameter value, or null if
  there is none.
 @throw InvalidParameterExceptionif <code>param</code> is an
  invalid parameter for this engine, or another exception occurs while
  trying to get this parameter.
 */
- (id)engineGetParameterWithNSString:(NSString *)param __attribute__((deprecated));

/*!
 @brief <p>This method is overridden by providers to return the
  parameters used with this signature engine, or null
  if this signature engine does not use any parameters.
 <p>The returned parameters may be the same that were used to initialize
  this signature engine, or may contain a combination of default and
  randomly generated parameter values used by the underlying signature
  implementation if this signature engine requires algorithm parameters
  but was not initialized with any.
 @return the parameters used with this signature engine, or null if this
  signature engine does not use any parameters
 @throw UnsupportedOperationExceptionif this method is
  not overridden by a provider
 @since 1.4
 */
- (JavaSecurityAlgorithmParameters *)engineGetParameters;

/*!
 @brief Initializes this signature object with the specified
  private key for signing operations.
 @param privateKey the private key of the identity whose signature  will be generated.
 @throw InvalidKeyExceptionif the key is improperly
  encoded, parameters are missing, and so on.
 */
- (void)engineInitSignWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)privateKey;

/*!
 @brief Initializes this signature object with the specified
  private key and source of randomness for signing operations.
 <p>This concrete method has been added to this previously-defined
  abstract class. (For backwards compatibility, it cannot be abstract.)
 @param privateKey the private key of the identity whose signature  will be generated.
 @param random the source of randomness
 @throw InvalidKeyExceptionif the key is improperly
  encoded, parameters are missing, and so on.
 */
- (void)engineInitSignWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)privateKey
                    withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

/*!
 @brief Initializes this signature object with the specified
  public key for verification operations.
 @param publicKey the public key of the identity whose signature is  going to be verified.
 @throw InvalidKeyExceptionif the key is improperly
  encoded, parameters are missing, and so on.
 */
- (void)engineInitVerifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)publicKey;

/*!
 @brief <p>This method is overridden by providers to initialize
  this signature engine with the specified parameter set.
 @param params the parameters
 @throw UnsupportedOperationExceptionif this method is not
  overridden by a provider
 @throw InvalidAlgorithmParameterExceptionif this method is
  overridden by a provider and the given parameters
  are inappropriate for this signature engine
 */
- (void)engineSetParameterWithJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params;

/*!
 @brief Sets the specified algorithm parameter to the specified
  value.This method supplies a general-purpose mechanism through
  which it is possible to set the various parameters of this object.
 A parameter may be any settable parameter for the algorithm, such as
  a parameter size, or a source of random bits for signature generation
  (if appropriate), or an indication of whether or not to perform
  a specific but optional computation. A uniform algorithm-specific
  naming scheme for each parameter is desirable but left unspecified
  at this time.
 @param param the string identifier of the parameter.
 @param value the parameter value.
 @throw InvalidParameterExceptionif <code>param</code> is an
  invalid parameter for this signature algorithm engine,
  the parameter is already set
  and cannot be set again, a security exception occurs, and so on.
 */
- (void)engineSetParameterWithNSString:(NSString *)param
                                withId:(id)value __attribute__((deprecated));

/*!
 @brief Returns the signature bytes of all the data
  updated so far.
 The format of the signature depends on the underlying
  signature scheme.
 @return the signature bytes of the signing operation's result.
 @throw SignatureExceptionif the engine is not
  initialized properly or if this signature algorithm is unable to
  process the input data provided.
 */
- (IOSByteArray *)engineSign;

/*!
 @brief Finishes this signature operation and stores the resulting signature
  bytes in the provided buffer <code>outbuf</code>, starting at 
 <code>offset</code>.
 The format of the signature depends on the underlying
  signature scheme. 
 <p>The signature implementation is reset to its initial state
  (the state it was in after a call to one of the 
 <code>engineInitSign</code> methods)
  and can be reused to generate further signatures with the same private
  key.
  This method should be abstract, but we leave it concrete for
  binary compatibility.  Knowledgeable providers should override this
  method.
 @param outbuf buffer for the signature result.
 @param offset offset into <code>outbuf</code>  where the signature is
   stored.
 @param len number of bytes within <code>outbuf</code>  allotted for the
   signature.  Both this default implementation and the SUN provider do not
   return partial digests. If the value of this parameter is less
   than the actual signature length, this method will throw a
   SignatureException.  This parameter is ignored if its value is greater than or equal to
   the actual signature length.
 @return the number of bytes placed into <code>outbuf</code>
 @throw SignatureExceptionif the engine is not
  initialized properly, if this signature algorithm is unable to
  process the input data provided, or if <code>len</code> is less
  than the actual signature length.
 @since 1.2
 */
- (jint)engineSignWithByteArray:(IOSByteArray *)outbuf
                        withInt:(jint)offset
                        withInt:(jint)len;

/*!
 @brief Updates the data to be signed or verified
  using the specified byte.
 @param b the byte to use for the update.
 @throw SignatureExceptionif the engine is not initialized
  properly.
 */
- (void)engineUpdateWithByte:(jbyte)b;

/*!
 @brief Updates the data to be signed or verified, using the
  specified array of bytes, starting at the specified offset.
 @param b the array of bytes
 @param off the offset to start from in the array of bytes
 @param len the number of bytes to use, starting at offset
 @throw SignatureExceptionif the engine is not initialized
  properly
 */
- (void)engineUpdateWithByteArray:(IOSByteArray *)b
                          withInt:(jint)off
                          withInt:(jint)len;

/*!
 @brief Updates the data to be signed or verified using the specified
  ByteBuffer.Processes the <code>data.remaining()</code> bytes
  starting at at <code>data.position()</code>.
 Upon return, the buffer's position will be equal to its limit;
  its limit will not have changed.
 @param input the ByteBuffer
 @since 1.5
 */
- (void)engineUpdateWithJavaNioByteBuffer:(JavaNioByteBuffer *)input;

/*!
 @brief Verifies the passed-in signature.
 @param sigBytes the signature bytes to be verified.
 @return true if the signature was verified, false if not.
 @throw SignatureExceptionif the engine is not
  initialized properly, the passed-in signature is improperly
  encoded or of the wrong type, if this signature algorithm is unable to
  process the input data provided, etc.
 */
- (jboolean)engineVerifyWithByteArray:(IOSByteArray *)sigBytes;

/*!
 @brief Verifies the passed-in signature in the specified array
  of bytes, starting at the specified offset.
 <p> Note: Subclasses should overwrite the default implementation.
 @param sigBytes the signature bytes to be verified.
 @param offset the offset to start from in the array of bytes.
 @param length the number of bytes to use, starting at offset.
 @return true if the signature was verified, false if not.
 @throw SignatureExceptionif the engine is not
  initialized properly, the passed-in signature is improperly
  encoded or of the wrong type, if this signature algorithm is unable to
  process the input data provided, etc.
 @since 1.4
 */
- (jboolean)engineVerifyWithByteArray:(IOSByteArray *)sigBytes
                              withInt:(jint)offset
                              withInt:(jint)length;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecuritySignatureSpi)

J2OBJC_FIELD_SETTER(JavaSecuritySignatureSpi, appRandom_, JavaSecuritySecureRandom *)

FOUNDATION_EXPORT void JavaSecuritySignatureSpi_init(JavaSecuritySignatureSpi *self);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecuritySignatureSpi)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSecuritySignatureSpi")
