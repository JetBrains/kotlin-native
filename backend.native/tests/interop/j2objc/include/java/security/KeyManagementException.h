//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/security/KeyManagementException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecurityKeyManagementException")
#ifdef RESTRICT_JavaSecurityKeyManagementException
#define INCLUDE_ALL_JavaSecurityKeyManagementException 0
#else
#define INCLUDE_ALL_JavaSecurityKeyManagementException 1
#endif
#undef RESTRICT_JavaSecurityKeyManagementException

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSecurityKeyManagementException_) && (INCLUDE_ALL_JavaSecurityKeyManagementException || defined(INCLUDE_JavaSecurityKeyManagementException))
#define JavaSecurityKeyManagementException_

#define RESTRICT_JavaSecurityKeyException 1
#define INCLUDE_JavaSecurityKeyException 1
#include "java/security/KeyException.h"

@class JavaLangThrowable;

/*!
 @brief This is the general key management exception for all operations
  dealing with key management.Examples of subclasses of
  KeyManagementException that developers might create for
  giving more detailed information could include: 
 <ul>
  <li>KeyIDConflictException
  <li>KeyAuthorizationFailureException
  <li>ExpiredKeyException
  </ul>
 @author Benjamin Renaud
 - seealso: Key
 - seealso: KeyException
 */
@interface JavaSecurityKeyManagementException : JavaSecurityKeyException

#pragma mark Public

/*!
 @brief Constructs a KeyManagementException with no detail message.A
  detail message is a String that describes this particular
  exception.
 */
- (instancetype __nonnull)init;

/*!
 @brief Constructs a KeyManagementException with the specified detail
  message.A detail message is a String that describes this
  particular exception.
 @param msg the detail message.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)msg;

/*!
 @brief Creates a <code>KeyManagementException</code> with the specified
  detail message and cause.
 @param message the detail message (which is saved for later retrieval         by the 
 <code>getMessage()</code>  method).
 @param cause the cause (which is saved for later retrieval by the         
 <code>getCause()</code>  method).  (A <code>null</code>  value is permitted,         and indicates that the cause is nonexistent or unknown.)
 @since 1.5
 */
- (instancetype __nonnull)initWithNSString:(NSString *)message
                     withJavaLangThrowable:(JavaLangThrowable *)cause;

/*!
 @brief Creates a <code>KeyManagementException</code> with the specified cause
  and a detail message of <code>(cause==null ?
 null : cause.toString())</code>
  (which typically contains the class and detail message of 
 <code>cause</code>).
 @param cause the cause (which is saved for later retrieval by the         
 <code>getCause()</code>  method).  (A <code>null</code>  value is permitted,         and indicates that the cause is nonexistent or unknown.)
 @since 1.5
 */
- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)cause;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityKeyManagementException)

FOUNDATION_EXPORT void JavaSecurityKeyManagementException_init(JavaSecurityKeyManagementException *self);

FOUNDATION_EXPORT JavaSecurityKeyManagementException *new_JavaSecurityKeyManagementException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityKeyManagementException *create_JavaSecurityKeyManagementException_init(void);

FOUNDATION_EXPORT void JavaSecurityKeyManagementException_initWithNSString_(JavaSecurityKeyManagementException *self, NSString *msg);

FOUNDATION_EXPORT JavaSecurityKeyManagementException *new_JavaSecurityKeyManagementException_initWithNSString_(NSString *msg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityKeyManagementException *create_JavaSecurityKeyManagementException_initWithNSString_(NSString *msg);

FOUNDATION_EXPORT void JavaSecurityKeyManagementException_initWithNSString_withJavaLangThrowable_(JavaSecurityKeyManagementException *self, NSString *message, JavaLangThrowable *cause);

FOUNDATION_EXPORT JavaSecurityKeyManagementException *new_JavaSecurityKeyManagementException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityKeyManagementException *create_JavaSecurityKeyManagementException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause);

FOUNDATION_EXPORT void JavaSecurityKeyManagementException_initWithJavaLangThrowable_(JavaSecurityKeyManagementException *self, JavaLangThrowable *cause);

FOUNDATION_EXPORT JavaSecurityKeyManagementException *new_JavaSecurityKeyManagementException_initWithJavaLangThrowable_(JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityKeyManagementException *create_JavaSecurityKeyManagementException_initWithJavaLangThrowable_(JavaLangThrowable *cause);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityKeyManagementException)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSecurityKeyManagementException")
