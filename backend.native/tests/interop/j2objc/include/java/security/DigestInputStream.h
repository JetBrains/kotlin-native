//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/security/DigestInputStream.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSecurityDigestInputStream")
#ifdef RESTRICT_JavaSecurityDigestInputStream
#define INCLUDE_ALL_JavaSecurityDigestInputStream 0
#else
#define INCLUDE_ALL_JavaSecurityDigestInputStream 1
#endif
#undef RESTRICT_JavaSecurityDigestInputStream

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSecurityDigestInputStream_) && (INCLUDE_ALL_JavaSecurityDigestInputStream || defined(INCLUDE_JavaSecurityDigestInputStream))
#define JavaSecurityDigestInputStream_

#define RESTRICT_JavaIoFilterInputStream 1
#define INCLUDE_JavaIoFilterInputStream 1
#include "java/io/FilterInputStream.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaSecurityMessageDigest;

/*!
 @brief A transparent stream that updates the associated message digest using
  the bits going through the stream.
 <p>To complete the message digest computation, call one of the 
 <code>digest</code> methods on the associated message
  digest after your calls to one of this digest input stream's 
 <code>read</code> methods. 
 <p>It is possible to turn this stream on or off (see 
 <code>on</code>). When it is on, a call to one of the 
 <code>read</code> methods
  results in an update on the message digest.  But when it is off,
  the message digest is not updated. The default is for the stream
  to be on. 
 <p>Note that digest objects can compute only one digest (see 
 <code>MessageDigest</code>),
  so that in order to compute intermediate digests, a caller should
  retain a handle onto the digest object, and clone it for each
  digest to be computed, leaving the orginal digest untouched.
 - seealso: MessageDigest
 - seealso: DigestOutputStream
 @author Benjamin Renaud
 */
@interface JavaSecurityDigestInputStream : JavaIoFilterInputStream {
 @public
  /*!
   @brief The message digest associated with this stream.
   */
  JavaSecurityMessageDigest *digest_;
}

#pragma mark Public

/*!
 @brief Creates a digest input stream, using the specified input stream
  and message digest.
 @param stream the input stream.
 @param digest the message digest to associate with this stream.
 */
- (instancetype __nonnull)initWithJavaIoInputStream:(JavaIoInputStream *)stream
                      withJavaSecurityMessageDigest:(JavaSecurityMessageDigest *)digest;

/*!
 @brief Returns the message digest associated with this stream.
 @return the message digest associated with this stream.
 - seealso: #setMessageDigest(java.security.MessageDigest)
 */
- (JavaSecurityMessageDigest *)getMessageDigest;

/*!
 @brief Turns the digest function on or off.The default is on.
 When
  it is on, a call to one of the <code>read</code> methods results in an
  update on the message digest.  But when it is off, the message
  digest is not updated.
 @param on true to turn the digest function on, false to turn  it off.
 */
- (void)onWithBoolean:(jboolean)on;

/*!
 @brief Reads a byte, and updates the message digest (if the digest
  function is on).That is, this method reads a byte from the
  input stream, blocking until the byte is actually read.
 If the
  digest function is on (see <code>on</code>), this method
  will then call <code>update</code> on the message digest associated
  with this stream, passing it the byte read.
 @return the byte read.
 @throw IOExceptionif an I/O error occurs.
 - seealso: MessageDigest#update(byte)
 */
- (jint)read;

/*!
 @brief Reads into a byte array, and updates the message digest (if the
  digest function is on).That is, this method reads up to 
 <code>len</code> bytes from the input stream into the array 
 <code>b</code>, starting at offset <code>off</code>.
 This method
  blocks until the data is actually
  read. If the digest function is on (see 
 <code>on</code>), this method will then call <code>update</code>
  on the message digest associated with this stream, passing it
  the data.
 @param b the array into which the data is read.
 @param off the starting offset into <code>b</code>  of where the
   data should be placed.
 @param len the maximum number of bytes to be read from the input  stream into b, starting at offset 
 <code>off</code> .
 @return the actual number of bytes read. This is less than 
 <code>len</code> if the end of the stream is reached prior to
  reading <code>len</code> bytes. -1 is returned if no bytes were
  read because the end of the stream had already been reached when
  the call was made.
 @throw IOExceptionif an I/O error occurs.
 - seealso: MessageDigest#update(byte[], int, int)
 */
- (jint)readWithByteArray:(IOSByteArray *)b
                  withInt:(jint)off
                  withInt:(jint)len;

/*!
 @brief Associates the specified message digest with this stream.
 @param digest the message digest to be associated with this stream.
 - seealso: #getMessageDigest()
 */
- (void)setMessageDigestWithJavaSecurityMessageDigest:(JavaSecurityMessageDigest *)digest;

/*!
 @brief Prints a string representation of this digest input stream and
  its associated message digest object.
 */
- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaIoInputStream:(JavaIoInputStream *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSecurityDigestInputStream)

J2OBJC_FIELD_SETTER(JavaSecurityDigestInputStream, digest_, JavaSecurityMessageDigest *)

FOUNDATION_EXPORT void JavaSecurityDigestInputStream_initWithJavaIoInputStream_withJavaSecurityMessageDigest_(JavaSecurityDigestInputStream *self, JavaIoInputStream *stream, JavaSecurityMessageDigest *digest);

FOUNDATION_EXPORT JavaSecurityDigestInputStream *new_JavaSecurityDigestInputStream_initWithJavaIoInputStream_withJavaSecurityMessageDigest_(JavaIoInputStream *stream, JavaSecurityMessageDigest *digest) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSecurityDigestInputStream *create_JavaSecurityDigestInputStream_initWithJavaIoInputStream_withJavaSecurityMessageDigest_(JavaIoInputStream *stream, JavaSecurityMessageDigest *digest);

J2OBJC_TYPE_LITERAL_HEADER(JavaSecurityDigestInputStream)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSecurityDigestInputStream")
