//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/sql/SQLInput.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSqlSQLInput")
#ifdef RESTRICT_JavaSqlSQLInput
#define INCLUDE_ALL_JavaSqlSQLInput 0
#else
#define INCLUDE_ALL_JavaSqlSQLInput 1
#endif
#undef RESTRICT_JavaSqlSQLInput

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSqlSQLInput_) && (INCLUDE_ALL_JavaSqlSQLInput || defined(INCLUDE_JavaSqlSQLInput))
#define JavaSqlSQLInput_

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoReader;
@class JavaMathBigDecimal;
@class JavaNetURL;
@class JavaSqlDate;
@class JavaSqlTime;
@class JavaSqlTimestamp;
@protocol JavaSqlArray;
@protocol JavaSqlBlob;
@protocol JavaSqlClob;
@protocol JavaSqlNClob;
@protocol JavaSqlRef;
@protocol JavaSqlRowId;
@protocol JavaSqlSQLXML;

/*!
 @brief An input stream that contains a stream of values representing an
  instance of an SQL structured type or an SQL distinct type.
 This interface, used only for custom mapping, is used by the driver
  behind the scenes, and a programmer never directly invokes 
 <code>SQLInput</code> methods. The <i>reader</i> methods
  (<code>readLong</code>, <code>readBytes</code>, and so on)
  provide a way  for an implementation of the <code>SQLData</code>
   interface to read the values in an <code>SQLInput</code> object.
   And as described in <code>SQLData</code>, calls to reader methods must
  be made in the order that their corresponding attributes appear in the
  SQL definition of the type.
  The method <code>wasNull</code> is used to determine whether
  the last value read was SQL <code>NULL</code>.
  <P>When the method <code>getObject</code> is called with an
  object of a class implementing the interface <code>SQLData</code>,
  the JDBC driver calls the method <code>SQLData.getSQLType</code>
  to determine the SQL type of the user-defined type (UDT)
  being custom mapped. The driver
  creates an instance of <code>SQLInput</code>, populating it with the
  attributes of the UDT.  The driver then passes the input
  stream to the method <code>SQLData.readSQL</code>, which in turn
  calls the <code>SQLInput</code> reader methods
  in its implementation for reading the
  attributes from the input stream.
 @since 1.2
 */
@protocol JavaSqlSQLInput < JavaObject >

/*!
 @brief Reads the next attribute in the stream and returns it as a <code>String</code>
  in the Java programming language.
 @return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>
 @throw SQLExceptionif a database access error occurs
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.2
 */
- (NSString *)readString;

/*!
 @brief Reads the next attribute in the stream and returns it as a <code>boolean</code>
  in the Java programming language.
 @return the attribute; if the value is SQL <code>NULL</code>, returns <code>false</code>
 @throw SQLExceptionif a database access error occurs
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.2
 */
- (jboolean)readBoolean;

/*!
 @brief Reads the next attribute in the stream and returns it as a <code>byte</code>
  in the Java programming language.
 @return the attribute; if the value is SQL <code>NULL</code>, returns <code>0</code>
 @throw SQLExceptionif a database access error occurs
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.2
 */
- (jbyte)readByte;

/*!
 @brief Reads the next attribute in the stream and returns it as a <code>short</code>
  in the Java programming language.
 @return the attribute; if the value is SQL <code>NULL</code>, returns <code>0</code>
 @throw SQLExceptionif a database access error occurs
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.2
 */
- (jshort)readShort;

/*!
 @brief Reads the next attribute in the stream and returns it as an <code>int</code>
  in the Java programming language.
 @return the attribute; if the value is SQL <code>NULL</code>, returns <code>0</code>
 @throw SQLExceptionif a database access error occurs
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.2
 */
- (jint)readInt;

/*!
 @brief Reads the next attribute in the stream and returns it as a <code>long</code>
  in the Java programming language.
 @return the attribute; if the value is SQL <code>NULL</code>, returns <code>0</code>
 @throw SQLExceptionif a database access error occurs
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.2
 */
- (jlong)readLong;

/*!
 @brief Reads the next attribute in the stream and returns it as a <code>float</code>
  in the Java programming language.
 @return the attribute; if the value is SQL <code>NULL</code>, returns <code>0</code>
 @throw SQLExceptionif a database access error occurs
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.2
 */
- (jfloat)readFloat;

/*!
 @brief Reads the next attribute in the stream and returns it as a <code>double</code>
  in the Java programming language.
 @return the attribute; if the value is SQL <code>NULL</code>, returns <code>0</code>
 @throw SQLExceptionif a database access error occurs
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.2
 */
- (jdouble)readDouble;

/*!
 @brief Reads the next attribute in the stream and returns it as a <code>java.math.BigDecimal</code>
  object in the Java programming language.
 @return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>
 @throw SQLExceptionif a database access error occurs
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.2
 */
- (JavaMathBigDecimal *)readBigDecimal;

/*!
 @brief Reads the next attribute in the stream and returns it as an array of bytes
  in the Java programming language.
 @return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>
 @throw SQLExceptionif a database access error occurs
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.2
 */
- (IOSByteArray *)readBytes;

/*!
 @brief Reads the next attribute in the stream and returns it as a <code>java.sql.Date</code> object.
 @return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>
 @throw SQLExceptionif a database access error occurs
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.2
 */
- (JavaSqlDate *)readDate;

/*!
 @brief Reads the next attribute in the stream and returns it as a <code>java.sql.Time</code> object.
 @return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>
 @throw SQLExceptionif a database access error occurs
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.2
 */
- (JavaSqlTime *)readTime;

/*!
 @brief Reads the next attribute in the stream and returns it as a <code>java.sql.Timestamp</code> object.
 @return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>
 @throw SQLExceptionif a database access error occurs
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.2
 */
- (JavaSqlTimestamp *)readTimestamp;

/*!
 @brief Reads the next attribute in the stream and returns it as a stream of Unicode characters.
 @return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>
 @throw SQLExceptionif a database access error occurs
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.2
 */
- (JavaIoReader *)readCharacterStream;

/*!
 @brief Reads the next attribute in the stream and returns it as a stream of ASCII characters.
 @return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>
 @throw SQLExceptionif a database access error occurs
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.2
 */
- (JavaIoInputStream *)readAsciiStream;

/*!
 @brief Reads the next attribute in the stream and returns it as a stream of uninterpreted
  bytes.
 @return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>
 @throw SQLExceptionif a database access error occurs
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.2
 */
- (JavaIoInputStream *)readBinaryStream;

/*!
 @brief Reads the datum at the head of the stream and returns it as an 
 <code>Object</code> in the Java programming language.The
  actual type of the object returned is determined by the default type
  mapping, and any customizations present in this stream's type map.
 <P>A type map is registered with the stream by the JDBC driver before the
  stream is passed to the application. 
 <P>When the datum at the head of the stream is an SQL <code>NULL</code>,
  the method returns <code>null</code>.  If the datum is an SQL structured or distinct
  type, it determines the SQL type of the datum at the head of the stream.
  If the stream's type map has an entry for that SQL type, the driver
  constructs an object of the appropriate class and calls the method 
 <code>SQLData.readSQL</code> on that object, which reads additional data from the
  stream, using the protocol described for that method.
 @return the datum at the head of the stream as an <code>Object</code> in the
  Java programming language;<code>null</code> if the datum is SQL <code>NULL</code>
 @throw SQLExceptionif a database access error occurs
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.2
 */
- (id)readObject;

/*!
 @brief Reads an SQL <code>REF</code> value from the stream and returns it as a 
 <code>Ref</code> object in the Java programming language.
 @return a <code>Ref</code> object representing the SQL <code>REF</code> value
  at the head of the stream; <code>null</code> if the value read is
  SQL <code>NULL</code>
 @throw SQLExceptionif a database access error occurs
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.2
 */
- (id<JavaSqlRef>)readRef;

/*!
 @brief Reads an SQL <code>BLOB</code> value from the stream and returns it as a 
 <code>Blob</code> object in the Java programming language.
 @return a <code>Blob</code> object representing data of the SQL <code>BLOB</code> value
  at the head of the stream; <code>null</code> if the value read is
  SQL <code>NULL</code>
 @throw SQLExceptionif a database access error occurs
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.2
 */
- (id<JavaSqlBlob>)readBlob;

/*!
 @brief Reads an SQL <code>CLOB</code> value from the stream and returns it as a 
 <code>Clob</code> object in the Java programming language.
 @return a <code>Clob</code> object representing data of the SQL <code>CLOB</code> value
  at the head of the stream; <code>null</code> if the value read is
  SQL <code>NULL</code>
 @throw SQLExceptionif a database access error occurs
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.2
 */
- (id<JavaSqlClob>)readClob;

/*!
 @brief Reads an SQL <code>ARRAY</code> value from the stream and returns it as an 
 <code>Array</code> object in the Java programming language.
 @return an <code>Array</code> object representing data of the SQL 
 <code>ARRAY</code> value at the head of the stream; <code>null</code>
  if the value read is SQL <code>NULL</code>
 @throw SQLExceptionif a database access error occurs
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.2
 */
- (id<JavaSqlArray>)readArray;

/*!
 @brief Retrieves whether the last value read was SQL <code>NULL</code>.
 @return <code>true</code> if the most recently read SQL value was SQL 
 <code>NULL</code>; <code>false</code> otherwise
 @throw SQLExceptionif a database access error occurs
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.2
 */
- (jboolean)wasNull;

/*!
 @brief Reads an SQL <code>DATALINK</code> value from the stream and returns it as a 
 <code>java.net.URL</code> object in the Java programming language.
 @return a <code>java.net.URL</code> object.
 @throw SQLExceptionif a database access error occurs,
             or if a URL is malformed
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.4
 */
- (JavaNetURL *)readURL;

/*!
 @brief Reads an SQL <code>NCLOB</code> value from the stream and returns it as a 
 <code>NClob</code> object in the Java programming language.
 @return a <code>NClob</code> object representing data of the SQL <code>NCLOB</code> value
  at the head of the stream; <code>null</code> if the value read is
  SQL <code>NULL</code>
 @throw SQLExceptionif a database access error occurs
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (id<JavaSqlNClob>)readNClob;

/*!
 @brief Reads the next attribute in the stream and returns it as a <code>String</code>
  in the Java programming language.It is intended for use when
  accessing  <code>NCHAR</code>,<code>NVARCHAR</code>
  and <code>LONGNVARCHAR</code> columns.
 @return the attribute; if the value is SQL <code>NULL</code>, returns <code>null</code>
 @throw SQLExceptionif a database access error occurs
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (NSString *)readNString;

/*!
 @brief Reads an SQL <code>XML</code> value from the stream and returns it as a 
 <code>SQLXML</code> object in the Java programming language.
 @return a <code>SQLXML</code> object representing data of the SQL <code>XML</code> value
  at the head of the stream; <code>null</code> if the value read is
  SQL <code>NULL</code>
 @throw SQLExceptionif a database access error occurs
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (id<JavaSqlSQLXML>)readSQLXML;

/*!
 @brief Reads an SQL <code>ROWID</code> value from the stream and returns it as a 
 <code>RowId</code> object in the Java programming language.
 @return a <code>RowId</code> object representing data of the SQL <code>ROWID</code> value
  at the head of the stream; <code>null</code> if the value read is
  SQL <code>NULL</code>
 @throw SQLExceptionif a database access error occurs
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (id<JavaSqlRowId>)readRowId;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSqlSQLInput)

J2OBJC_TYPE_LITERAL_HEADER(JavaSqlSQLInput)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSqlSQLInput")
