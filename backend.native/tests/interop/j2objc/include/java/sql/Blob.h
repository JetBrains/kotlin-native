//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/sql/Blob.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSqlBlob")
#ifdef RESTRICT_JavaSqlBlob
#define INCLUDE_ALL_JavaSqlBlob 0
#else
#define INCLUDE_ALL_JavaSqlBlob 1
#endif
#undef RESTRICT_JavaSqlBlob

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSqlBlob_) && (INCLUDE_ALL_JavaSqlBlob || defined(INCLUDE_JavaSqlBlob))
#define JavaSqlBlob_

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;

/*!
 @brief The representation (mapping) in
  the Java<sup><font size=-2>TM</font></sup> programming
  language of an SQL 
 <code>BLOB</code> value.An SQL <code>BLOB</code> is a built-in type
  that stores a Binary Large Object as a column value in a row of
  a database table.
 By default drivers implement <code>Blob</code> using
  an SQL <code>locator(BLOB)</code>, which means that a 
 <code>Blob</code> object contains a logical pointer to the
  SQL <code>BLOB</code> data rather than the data itself.
  A <code>Blob</code> object is valid for the duration of the
  transaction in which is was created. 
 <P>Methods in the interfaces <code>ResultSet</code>,
  <code>CallableStatement</code>, and <code>PreparedStatement</code>, such as 
 <code>getBlob</code> and <code>setBlob</code> allow a programmer to
  access an SQL <code>BLOB</code> value.
  The <code>Blob</code> interface provides methods for getting the
  length of an SQL <code>BLOB</code> (Binary Large Object) value,
  for materializing a <code>BLOB</code> value on the client, and for
  determining the position of a pattern of bytes within a 
 <code>BLOB</code> value. In addition, this interface has methods for updating
  a <code>BLOB</code> value. 
 <p>
  All methods on the <code>Blob</code> interface must be fully implemented if the
  JDBC driver supports the data type.
 @since 1.2
 */
@protocol JavaSqlBlob < JavaObject >

/*!
 @brief Returns the number of bytes in the <code>BLOB</code> value
  designated by this <code>Blob</code> object.
 @return length of the <code>BLOB</code> in bytes
 @throw SQLExceptionif there is an error accessing the
  length of the <code>BLOB</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.2
 */
- (jlong)length;

/*!
 @brief Retrieves all or part of the <code>BLOB</code>
  value that this <code>Blob</code> object represents, as an array of
  bytes.This <code>byte</code> array contains up to <code>length</code>
  consecutive bytes starting at position <code>pos</code>.
 @param pos the ordinal position of the first byte in the         
  <code> BLOB </code>  value to be extracted; the first byte is at         position 1
 @param length the number of consecutive bytes to be copied; the value  for length must be 0 or greater
 @return a byte array containing up to <code>length</code>
          consecutive bytes from the <code>BLOB</code> value designated
          by this <code>Blob</code> object, starting with the
          byte at position <code>pos</code>
 @throw SQLExceptionif there is an error accessing the
             <code>BLOB</code> value; if pos is less than 1 or length is
  less than 0
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #setBytes
 @since 1.2
 */
- (IOSByteArray *)getBytesWithLong:(jlong)pos
                           withInt:(jint)length;

/*!
 @brief Retrieves the <code>BLOB</code> value designated by this 
 <code>Blob</code> instance as a stream.
 @return a stream containing the <code>BLOB</code> data
 @throw SQLExceptionif there is an error accessing the
             <code>BLOB</code> value
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #setBinaryStream
 @since 1.2
 */
- (JavaIoInputStream *)getBinaryStream;

/*!
 @brief Retrieves the byte position at which the specified byte array 
 <code>pattern</code> begins within the <code>BLOB</code>
  value that this <code>Blob</code> object represents.The
  search for <code>pattern</code> begins at position 
 <code>start</code>.
 @param pattern the byte array for which to search
 @param start the position at which to begin searching; the         first position is 1
 @return the position at which the pattern appears, else -1
 @throw SQLExceptionif there is an error accessing the 
 <code>BLOB</code> or if start is less than 1
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.2
 */
- (jlong)positionWithByteArray:(IOSByteArray *)pattern
                      withLong:(jlong)start;

/*!
 @brief Retrieves the byte position in the <code>BLOB</code> value
  designated by this <code>Blob</code> object at which 
 <code>pattern</code> begins.The search begins at position 
 <code>start</code>.
 @param pattern the  <code> Blob </code>  object designating
   the  <code> BLOB </code>  value for which to search
 @param start the position in the  <code> BLOB </code>  value
          at which to begin searching; the first position is 1
 @return the position at which the pattern begins, else -1
 @throw SQLExceptionif there is an error accessing the
             <code>BLOB</code> value or if start is less than 1
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.2
 */
- (jlong)positionWithJavaSqlBlob:(id<JavaSqlBlob>)pattern
                        withLong:(jlong)start;

/*!
 @brief Writes the given array of bytes to the <code>BLOB</code> value that
  this <code>Blob</code> object represents, starting at position 
 <code>pos</code>, and returns the number of bytes written.
 The array of bytes will overwrite the existing bytes
  in the <code>Blob</code> object starting at the position 
 <code>pos</code>.  If the end of the <code>Blob</code> value is reached
  while writing the array of bytes, then the length of the <code>Blob</code>
  value will be increased to accomodate the extra bytes. 
 <p>
  <b>Note:</b> If the value specified for <code>pos</code>
  is greater then the length+1 of the <code>BLOB</code> value then the
  behavior is undefined. Some JDBC drivers may throw a 
 <code>SQLException</code> while other drivers may support this
  operation.
 @param pos the position in the  <code> BLOB </code>  object at which
          to start writing; the first position is 1
 @param bytes the array of bytes to be written to the  <code> BLOB </code>
          value that this  <code> Blob </code>  object represents
 @return the number of bytes written
 @throw SQLExceptionif there is an error accessing the
             <code>BLOB</code> value or if pos is less than 1
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #getBytes
 @since 1.4
 */
- (jint)setBytesWithLong:(jlong)pos
           withByteArray:(IOSByteArray *)bytes;

/*!
 @brief Writes all or part of the given <code>byte</code> array to the 
 <code>BLOB</code> value that this <code>Blob</code> object represents
  and returns the number of bytes written.
 Writing starts at position <code>pos</code> in the <code>BLOB</code>
  value; <code>len</code> bytes from the given byte array are written.
  The array of bytes will overwrite the existing bytes
  in the <code>Blob</code> object starting at the position 
 <code>pos</code>.  If the end of the <code>Blob</code> value is reached
  while writing the array of bytes, then the length of the <code>Blob</code>
  value will be increased to accomodate the extra bytes. 
 <p>
  <b>Note:</b> If the value specified for <code>pos</code>
  is greater then the length+1 of the <code>BLOB</code> value then the
  behavior is undefined. Some JDBC drivers may throw a 
 <code>SQLException</code> while other drivers may support this
  operation.
 @param pos the position in the  <code> BLOB </code>  object at which
          to start writing; the first position is 1
 @param bytes the array of bytes to be written to this  <code> BLOB </code>
          object
 @param offset the offset into the array  <code> bytes </code>  at which
          to start reading the bytes to be set
 @param len the number of bytes to be written to the  <code> BLOB </code>
          value from the array of bytes  <code> bytes </code>
 @return the number of bytes written
 @throw SQLExceptionif there is an error accessing the
             <code>BLOB</code> value or if pos is less than 1
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #getBytes
 @since 1.4
 */
- (jint)setBytesWithLong:(jlong)pos
           withByteArray:(IOSByteArray *)bytes
                 withInt:(jint)offset
                 withInt:(jint)len;

/*!
 @brief Retrieves a stream that can be used to write to the <code>BLOB</code>
  value that this <code>Blob</code> object represents.The stream begins
  at position <code>pos</code>.
 The  bytes written to the stream will overwrite the existing bytes
  in the <code>Blob</code> object starting at the position 
 <code>pos</code>.  If the end of the <code>Blob</code> value is reached
  while writing to the stream, then the length of the <code>Blob</code>
  value will be increased to accomodate the extra bytes. 
 <p>
  <b>Note:</b> If the value specified for <code>pos</code>
  is greater then the length+1 of the <code>BLOB</code> value then the
  behavior is undefined. Some JDBC drivers may throw a 
 <code>SQLException</code> while other drivers may support this
  operation.
 @param pos the position in the  <code> BLOB </code>  value at which
          to start writing; the first position is 1
 @return a <code>java.io.OutputStream</code> object to which data can
          be written
 @throw SQLExceptionif there is an error accessing the
             <code>BLOB</code> value or if pos is less than 1
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #getBinaryStream
 @since 1.4
 */
- (JavaIoOutputStream *)setBinaryStreamWithLong:(jlong)pos;

/*!
 @brief Truncates the <code>BLOB</code> value that this <code>Blob</code>
  object represents to be <code>len</code> bytes in length.
 <p>
  <b>Note:</b> If the value specified for <code>pos</code>
  is greater then the length+1 of the <code>BLOB</code> value then the
  behavior is undefined. Some JDBC drivers may throw a 
 <code>SQLException</code> while other drivers may support this
  operation.
 @param len the length, in bytes, to which the  <code> BLOB </code>  value
          that this  <code> Blob </code>  object represents should be truncated
 @throw SQLExceptionif there is an error accessing the
             <code>BLOB</code> value or if len is less than 0
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.4
 */
- (void)truncateWithLong:(jlong)len;

/*!
 @brief This method frees the <code>Blob</code> object and releases the resources that
  it holds.The object is invalid once the <code>free</code>
  method is called.
 <p>
  After <code>free</code> has been called, any attempt to invoke a
  method other than <code>free</code> will result in a <code>SQLException</code>
  being thrown.  If <code>free</code> is called multiple times, the subsequent
  calls to <code>free</code> are treated as a no-op.
 <p>
 @throw SQLExceptionif an error occurs releasing
  the Blob's resources
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (void)free;

/*!
 @brief Returns an <code>InputStream</code> object that contains a partial <code>Blob</code> value,
  starting  with the byte specified by pos, which is length bytes in length.
 @param pos the offset to the first byte of the partial value to be retrieved.   The first byte in the 
  <code> Blob </code>  is at position 1
 @param length the length in bytes of the partial value to be retrieved
 @return <code>InputStream</code> through which the partial <code>Blob</code> value can be read.
 @throw SQLExceptionif pos is less than 1 or if pos is greater than the number of bytes
  in the <code>Blob</code> or if pos + length is greater than the number of bytes
  in the <code>Blob</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (JavaIoInputStream *)getBinaryStreamWithLong:(jlong)pos
                                      withLong:(jlong)length;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSqlBlob)

J2OBJC_TYPE_LITERAL_HEADER(JavaSqlBlob)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSqlBlob")
