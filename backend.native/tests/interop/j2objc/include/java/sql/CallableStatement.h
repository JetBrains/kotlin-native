//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/sql/CallableStatement.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSqlCallableStatement")
#ifdef RESTRICT_JavaSqlCallableStatement
#define INCLUDE_ALL_JavaSqlCallableStatement 0
#else
#define INCLUDE_ALL_JavaSqlCallableStatement 1
#endif
#undef RESTRICT_JavaSqlCallableStatement

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSqlCallableStatement_) && (INCLUDE_ALL_JavaSqlCallableStatement || defined(INCLUDE_JavaSqlCallableStatement))
#define JavaSqlCallableStatement_

#define RESTRICT_JavaSqlPreparedStatement 1
#define INCLUDE_JavaSqlPreparedStatement 1
#include "java/sql/PreparedStatement.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoReader;
@class JavaMathBigDecimal;
@class JavaNetURL;
@class JavaSqlDate;
@class JavaSqlTime;
@class JavaSqlTimestamp;
@class JavaUtilCalendar;
@protocol JavaSqlArray;
@protocol JavaSqlBlob;
@protocol JavaSqlClob;
@protocol JavaSqlNClob;
@protocol JavaSqlRef;
@protocol JavaSqlRowId;
@protocol JavaSqlSQLXML;
@protocol JavaUtilMap;

/*!
 @brief The interface used to execute SQL stored procedures.The JDBC API
  provides a stored procedure SQL escape syntax that allows stored procedures
  to be called in a standard way for all RDBMSs.
 This escape syntax has one
  form that includes a result parameter and one that does not. If used, the result
  parameter must be registered as an OUT parameter. The other parameters
  can be used for input, output or both. Parameters are referred to
  sequentially, by number, with the first parameter being 1. 
 @code

    {?= call &lt;procedure-name&gt;[(&lt;arg1&gt;,&lt;arg2&gt;, ...)]}
    {call &lt;procedure-name&gt;[(&lt;arg1&gt;,&lt;arg2&gt;, ...)]} 
  
@endcode
  <P>
  IN parameter values are set using the <code>set</code> methods inherited from 
 <code>PreparedStatement</code>.  The type of all OUT parameters must be
  registered prior to executing the stored procedure; their values
  are retrieved after execution via the <code>get</code> methods provided here. 
 <P>
  A <code>CallableStatement</code> can return one <code>ResultSet</code> object or
  multiple <code>ResultSet</code> objects.  Multiple 
 <code>ResultSet</code> objects are handled using operations
  inherited from <code>Statement</code>.
  <P>
  For maximum portability, a call's <code>ResultSet</code> objects and
  update counts should be processed prior to getting the values of output
  parameters. 
 <P>
 - seealso: Connection#prepareCall
 - seealso: ResultSet
 */
@protocol JavaSqlCallableStatement < JavaSqlPreparedStatement, JavaObject >

/*!
 @brief Registers the OUT parameter in ordinal position 
 <code>parameterIndex</code> to the JDBC type 
 <code>sqlType</code>.All OUT parameters must be registered
  before a stored procedure is executed.
 <p>
  The JDBC type specified by <code>sqlType</code> for an OUT
  parameter determines the Java type that must be used
  in the <code>get</code> method to read the value of that parameter. 
 <p>
  If the JDBC type expected to be returned to this output parameter
  is specific to this particular database, <code>sqlType</code>
  should be <code>java.sql.Types.OTHER</code>.  The method 
 <code>getObject</code> retrieves the value.
 @param parameterIndex the first parameter is 1, the second is 2,         and so on
 @param sqlType the JDBC type code defined by  <code> java.sql.Types </code>
  .         If the parameter is of JDBC type  <code> NUMERIC </code>
          or  <code> DECIMAL </code> , the version of         
  <code> registerOutParameter </code>  that accepts a scale value         should be used.
 @throw SQLExceptionif the parameterIndex is not valid;
  if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif <code>sqlType</code> is
  a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
  <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
  <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
   <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
  or  <code>STRUCT</code> data type and the JDBC driver does not support
  this data type
 - seealso: Types
 */
- (void)registerOutParameterWithInt:(jint)parameterIndex
                            withInt:(jint)sqlType;

/*!
 @brief Registers the parameter in ordinal position 
 <code>parameterIndex</code> to be of JDBC type 
 <code>sqlType</code>.All OUT parameters must be registered
  before a stored procedure is executed.
 <p>
  The JDBC type specified by <code>sqlType</code> for an OUT
  parameter determines the Java type that must be used
  in the <code>get</code> method to read the value of that parameter. 
 <p>
  This version of <code>registerOutParameter</code> should be
  used when the parameter is of JDBC type <code>NUMERIC</code>
  or <code>DECIMAL</code>.
 @param parameterIndex the first parameter is 1, the second is 2,  and so on
 @param sqlType the SQL type code defined by  <code> java.sql.Types </code>
  .
 @param scale_ the desired number of digits to the right of the  decimal point.  It must be greater than or equal to zero.
 @throw SQLExceptionif the parameterIndex is not valid;
  if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif <code>sqlType</code> is
  a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
  <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
  <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
   <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
  or  <code>STRUCT</code> data type and the JDBC driver does not support
  this data type
 - seealso: Types
 */
- (void)registerOutParameterWithInt:(jint)parameterIndex
                            withInt:(jint)sqlType
                            withInt:(jint)scale_;

/*!
 @brief Retrieves whether the last OUT parameter read had the value of
  SQL <code>NULL</code>.Note that this method should be called only after
  calling a getter method; otherwise, there is no value to use in
  determining whether it is <code>null</code> or not.
 @return <code>true</code> if the last parameter read was SQL 
 <code>NULL</code>; <code>false</code> otherwise
 @throw SQLExceptionif a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 */
- (jboolean)wasNull;

/*!
 @brief Retrieves the value of the designated JDBC <code>CHAR</code>,
  <code>VARCHAR</code>, or <code>LONGVARCHAR</code> parameter as a 
 <code>String</code> in the Java programming language.
 <p>
  For the fixed-length type JDBC <code>CHAR</code>,
  the <code>String</code> object
  returned has exactly the same value the SQL 
 <code>CHAR</code> value had in the
  database, including any padding added by the database.
 @param parameterIndex the first parameter is 1, the second is 2,  and so on
 @return the parameter value. If the value is SQL <code>NULL</code>,
          the result
          is <code>null</code>.
 @throw SQLExceptionif the parameterIndex is not valid;
  if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 - seealso: #setString
 */
- (NSString *)getStringWithInt:(jint)parameterIndex;

/*!
 @brief Retrieves the value of the designated JDBC <code>BIT</code>
  or <code>BOOLEAN</code> parameter as a 
 <code>boolean</code> in the Java programming language.
 @param parameterIndex the first parameter is 1, the second is 2,         and so on
 @return the parameter value.  If the value is SQL <code>NULL</code>,
          the result is <code>false</code>.
 @throw SQLExceptionif the parameterIndex is not valid;
  if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 - seealso: #setBoolean
 */
- (jboolean)getBooleanWithInt:(jint)parameterIndex;

/*!
 @brief Retrieves the value of the designated JDBC <code>TINYINT</code> parameter
  as a <code>byte</code> in the Java programming language.
 @param parameterIndex the first parameter is 1, the second is 2,  and so on
 @return the parameter value.  If the value is SQL <code>NULL</code>, the result
  is <code>0</code>.
 @throw SQLExceptionif the parameterIndex is not valid;
  if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 - seealso: #setByte
 */
- (jbyte)getByteWithInt:(jint)parameterIndex;

/*!
 @brief Retrieves the value of the designated JDBC <code>SMALLINT</code> parameter
  as a <code>short</code> in the Java programming language.
 @param parameterIndex the first parameter is 1, the second is 2,  and so on
 @return the parameter value.  If the value is SQL <code>NULL</code>, the result
  is <code>0</code>.
 @throw SQLExceptionif the parameterIndex is not valid;
  if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 - seealso: #setShort
 */
- (jshort)getShortWithInt:(jint)parameterIndex;

/*!
 @brief Retrieves the value of the designated JDBC <code>INTEGER</code> parameter
  as an <code>int</code> in the Java programming language.
 @param parameterIndex the first parameter is 1, the second is 2,  and so on
 @return the parameter value.  If the value is SQL <code>NULL</code>, the result
  is <code>0</code>.
 @throw SQLExceptionif the parameterIndex is not valid;
  if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 - seealso: #setInt
 */
- (jint)getIntWithInt:(jint)parameterIndex;

/*!
 @brief Retrieves the value of the designated JDBC <code>BIGINT</code> parameter
  as a <code>long</code> in the Java programming language.
 @param parameterIndex the first parameter is 1, the second is 2,  and so on
 @return the parameter value.  If the value is SQL <code>NULL</code>, the result
  is <code>0</code>.
 @throw SQLExceptionif the parameterIndex is not valid;
  if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 - seealso: #setLong
 */
- (jlong)getLongWithInt:(jint)parameterIndex;

/*!
 @brief Retrieves the value of the designated JDBC <code>FLOAT</code> parameter
  as a <code>float</code> in the Java programming language.
 @param parameterIndex the first parameter is 1, the second is 2,         and so on
 @return the parameter value.  If the value is SQL <code>NULL</code>, the result
          is <code>0</code>.
 @throw SQLExceptionif the parameterIndex is not valid;
  if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 - seealso: #setFloat
 */
- (jfloat)getFloatWithInt:(jint)parameterIndex;

/*!
 @brief Retrieves the value of the designated JDBC <code>DOUBLE</code> parameter as a <code>double</code>
  in the Java programming language.
 @param parameterIndex the first parameter is 1, the second is 2,         and so on
 @return the parameter value.  If the value is SQL <code>NULL</code>, the result
          is <code>0</code>.
 @throw SQLExceptionif the parameterIndex is not valid;
  if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 - seealso: #setDouble
 */
- (jdouble)getDoubleWithInt:(jint)parameterIndex;

/*!
 @brief Retrieves the value of the designated JDBC <code>NUMERIC</code> parameter as a 
 <code>java.math.BigDecimal</code> object with <i>scale</i> digits to
  the right of the decimal point.
 @param parameterIndex the first parameter is 1, the second is 2,         and so on
 @param scale_ the number of digits to the right of the decimal point
 @return the parameter value.  If the value is SQL <code>NULL</code>, the result
          is <code>null</code>.
 @throw SQLExceptionif the parameterIndex is not valid;
  if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #setBigDecimal
 */
- (JavaMathBigDecimal *)getBigDecimalWithInt:(jint)parameterIndex
                                     withInt:(jint)scale_ __attribute__((deprecated));

/*!
 @brief Retrieves the value of the designated JDBC <code>BINARY</code> or 
 <code>VARBINARY</code> parameter as an array of <code>byte</code>
  values in the Java programming language.
 @param parameterIndex the first parameter is 1, the second is 2,         and so on
 @return the parameter value.  If the value is SQL <code>NULL</code>, the result
          is <code>null</code>.
 @throw SQLExceptionif the parameterIndex is not valid;
  if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 - seealso: #setBytes
 */
- (IOSByteArray *)getBytesWithInt:(jint)parameterIndex;

/*!
 @brief Retrieves the value of the designated JDBC <code>DATE</code> parameter as a 
 <code>java.sql.Date</code> object.
 @param parameterIndex the first parameter is 1, the second is 2,         and so on
 @return the parameter value.  If the value is SQL <code>NULL</code>, the result
          is <code>null</code>.
 @throw SQLExceptionif the parameterIndex is not valid;
  if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 - seealso: #setDate
 */
- (JavaSqlDate *)getDateWithInt:(jint)parameterIndex;

/*!
 @brief Retrieves the value of the designated JDBC <code>TIME</code> parameter as a 
 <code>java.sql.Time</code> object.
 @param parameterIndex the first parameter is 1, the second is 2,         and so on
 @return the parameter value.  If the value is SQL <code>NULL</code>, the result
          is <code>null</code>.
 @throw SQLExceptionif the parameterIndex is not valid;
  if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 - seealso: #setTime
 */
- (JavaSqlTime *)getTimeWithInt:(jint)parameterIndex;

/*!
 @brief Retrieves the value of the designated JDBC <code>TIMESTAMP</code> parameter as a 
 <code>java.sql.Timestamp</code> object.
 @param parameterIndex the first parameter is 1, the second is 2,         and so on
 @return the parameter value.  If the value is SQL <code>NULL</code>, the result
          is <code>null</code>.
 @throw SQLExceptionif the parameterIndex is not valid;
  if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 - seealso: #setTimestamp
 */
- (JavaSqlTimestamp *)getTimestampWithInt:(jint)parameterIndex;

/*!
 @brief Retrieves the value of the designated parameter as an <code>Object</code>
  in the Java programming language.If the value is an SQL <code>NULL</code>,
  the driver returns a Java <code>null</code>.
 <p>
  This method returns a Java object whose type corresponds to the JDBC
  type that was registered for this parameter using the method 
 <code>registerOutParameter</code>.  By registering the target JDBC
  type as <code>java.sql.Types.OTHER</code>, this method can be used
  to read database-specific abstract data types.
 @param parameterIndex the first parameter is 1, the second is 2,         and so on
 @return A <code>java.lang.Object</code> holding the OUT parameter value
 @throw SQLExceptionif the parameterIndex is not valid;
  if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 - seealso: Types
 - seealso: #setObject
 */
- (id)getObjectWithInt:(jint)parameterIndex;

/*!
 @brief Retrieves the value of the designated JDBC <code>NUMERIC</code> parameter as a 
 <code>java.math.BigDecimal</code> object with as many digits to the
  right of the decimal point as the value contains.
 @param parameterIndex the first parameter is 1, the second is 2,  and so on
 @return the parameter value in full precision.  If the value is
  SQL <code>NULL</code>, the result is <code>null</code>.
 @throw SQLExceptionif the parameterIndex is not valid;
  if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 - seealso: #setBigDecimal
 @since 1.2
 */
- (JavaMathBigDecimal *)getBigDecimalWithInt:(jint)parameterIndex;

/*!
 @brief Returns an object representing the value of OUT parameter 
 <code>parameterIndex</code> and uses <code>map</code> for the custom
  mapping of the parameter value.
 <p>
  This method returns a Java object whose type corresponds to the
  JDBC type that was registered for this parameter using the method 
 <code>registerOutParameter</code>.  By registering the target
  JDBC type as <code>java.sql.Types.OTHER</code>, this method can
  be used to read database-specific abstract data types.
 @param parameterIndex the first parameter is 1, the second is 2, and so on
 @param map the mapping from SQL type names to Java classes
 @return a <code>java.lang.Object</code> holding the OUT parameter value
 @throw SQLExceptionif the parameterIndex is not valid;
  if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #setObject
 @since 1.2
 */
- (id)getObjectWithInt:(jint)parameterIndex
       withJavaUtilMap:(id<JavaUtilMap>)map;

/*!
 @brief Retrieves the value of the designated JDBC <code>REF(&lt;structured-type&gt;)</code>
  parameter as a <code>java.sql.Ref</code> object in the Java programming language.
 @param parameterIndex the first parameter is 1, the second is 2,  and so on
 @return the parameter value as a <code>Ref</code> object in the
  Java programming language.  If the value was SQL <code>NULL</code>, the value 
 <code>null</code> is returned.
 @throw SQLExceptionif the parameterIndex is not valid;
  if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.2
 */
- (id<JavaSqlRef>)getRefWithInt:(jint)parameterIndex;

/*!
 @brief Retrieves the value of the designated JDBC <code>BLOB</code> parameter as a 
 <code>java.sql.Blob</code> object in the Java programming language.
 @param parameterIndex the first parameter is 1, the second is 2, and so on
 @return the parameter value as a <code>Blob</code> object in the
  Java programming language.  If the value was SQL <code>NULL</code>, the value 
 <code>null</code> is returned.
 @throw SQLExceptionif the parameterIndex is not valid;
  if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.2
 */
- (id<JavaSqlBlob>)getBlobWithInt:(jint)parameterIndex;

/*!
 @brief Retrieves the value of the designated JDBC <code>CLOB</code> parameter as a 
 <code>java.sql.Clob</code> object in the Java programming language.
 @param parameterIndex the first parameter is 1, the second is 2, and  so on
 @return the parameter value as a <code>Clob</code> object in the
  Java programming language.  If the value was SQL <code>NULL</code>, the
  value <code>null</code> is returned.
 @throw SQLExceptionif the parameterIndex is not valid;
  if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.2
 */
- (id<JavaSqlClob>)getClobWithInt:(jint)parameterIndex;

/*!
 @brief Retrieves the value of the designated JDBC <code>ARRAY</code> parameter as an 
 <code>java.sql.Array</code> object in the Java programming language.
 @param parameterIndex the first parameter is 1, the second is 2, and  so on
 @return the parameter value as an <code>Array</code> object in
  the Java programming language.  If the value was SQL <code>NULL</code>, the
  value <code>null</code> is returned.
 @throw SQLExceptionif the parameterIndex is not valid;
  if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.2
 */
- (id<JavaSqlArray>)getArrayWithInt:(jint)parameterIndex;

/*!
 @brief Retrieves the value of the designated JDBC <code>DATE</code> parameter as a 
 <code>java.sql.Date</code> object, using
  the given <code>Calendar</code> object
  to construct the date.
 With a <code>Calendar</code> object, the driver
  can calculate the date taking into account a custom timezone and locale.
  If no <code>Calendar</code> object is specified, the driver uses the
  default timezone and locale.
 @param parameterIndex the first parameter is 1, the second is 2,  and so on
 @param cal the  <code> Calendar </code>  object the driver will use
              to construct the date
 @return the parameter value.  If the value is SQL <code>NULL</code>, the result
          is <code>null</code>.
 @throw SQLExceptionif the parameterIndex is not valid;
  if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 - seealso: #setDate
 @since 1.2
 */
- (JavaSqlDate *)getDateWithInt:(jint)parameterIndex
           withJavaUtilCalendar:(JavaUtilCalendar *)cal;

/*!
 @brief Retrieves the value of the designated JDBC <code>TIME</code> parameter as a 
 <code>java.sql.Time</code> object, using
  the given <code>Calendar</code> object
  to construct the time.
 With a <code>Calendar</code> object, the driver
  can calculate the time taking into account a custom timezone and locale.
  If no <code>Calendar</code> object is specified, the driver uses the
  default timezone and locale.
 @param parameterIndex the first parameter is 1, the second is 2,  and so on
 @param cal the  <code> Calendar </code>  object the driver will use
              to construct the time
 @return the parameter value; if the value is SQL <code>NULL</code>, the result
          is <code>null</code>.
 @throw SQLExceptionif the parameterIndex is not valid;
  if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 - seealso: #setTime
 @since 1.2
 */
- (JavaSqlTime *)getTimeWithInt:(jint)parameterIndex
           withJavaUtilCalendar:(JavaUtilCalendar *)cal;

/*!
 @brief Retrieves the value of the designated JDBC <code>TIMESTAMP</code> parameter as a 
 <code>java.sql.Timestamp</code> object, using
  the given <code>Calendar</code> object to construct
  the <code>Timestamp</code> object.
 With a <code>Calendar</code> object, the driver
  can calculate the timestamp taking into account a custom timezone and locale.
  If no <code>Calendar</code> object is specified, the driver uses the
  default timezone and locale.
 @param parameterIndex the first parameter is 1, the second is 2,  and so on
 @param cal the  <code> Calendar </code>  object the driver will use
              to construct the timestamp
 @return the parameter value.  If the value is SQL <code>NULL</code>, the result
          is <code>null</code>.
 @throw SQLExceptionif the parameterIndex is not valid;
  if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 - seealso: #setTimestamp
 @since 1.2
 */
- (JavaSqlTimestamp *)getTimestampWithInt:(jint)parameterIndex
                     withJavaUtilCalendar:(JavaUtilCalendar *)cal;

/*!
 @brief Registers the designated output parameter.
 This version of
  the method <code>registerOutParameter</code>
  should be used for a user-defined or <code>REF</code> output parameter.  Examples
  of user-defined types include: <code>STRUCT</code>, <code>DISTINCT</code>,
  <code>JAVA_OBJECT</code>, and named array types.
 <p>
  All OUT parameters must be registered
  before a stored procedure is executed. 
 <p>  For a user-defined parameter, the fully-qualified SQL
  type name of the parameter should also be given, while a <code>REF</code>
  parameter requires that the fully-qualified type name of the
  referenced type be given.  A JDBC driver that does not need the
  type code and type name information may ignore it.   To be portable,
  however, applications should always provide these values for
  user-defined and <code>REF</code> parameters.
  Although it is intended for user-defined and <code>REF</code> parameters,
  this method may be used to register a parameter of any JDBC type.
  If the parameter does not have a user-defined or <code>REF</code> type, the 
 <i>typeName</i> parameter is ignored. 
 <P><B>Note:</B> When reading the value of an out parameter, you
  must use the getter method whose Java type corresponds to the
  parameter's registered SQL type.
 @param parameterIndex the first parameter is 1, the second is 2,...
 @param sqlType a value from <code>java.sql.Types</code>
 @param typeName the fully-qualified name of an SQL structured type
 @throw SQLExceptionif the parameterIndex is not valid;
  if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif <code>sqlType</code> is
  a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
  <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
  <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
   <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
  or  <code>STRUCT</code> data type and the JDBC driver does not support
  this data type
 - seealso: Types
 @since 1.2
 */
- (void)registerOutParameterWithInt:(jint)parameterIndex
                            withInt:(jint)sqlType
                       withNSString:(NSString *)typeName;

/*!
 @brief Registers the OUT parameter named 
 <code>parameterName</code> to the JDBC type 
 <code>sqlType</code>.All OUT parameters must be registered
  before a stored procedure is executed.
 <p>
  The JDBC type specified by <code>sqlType</code> for an OUT
  parameter determines the Java type that must be used
  in the <code>get</code> method to read the value of that parameter. 
 <p>
  If the JDBC type expected to be returned to this output parameter
  is specific to this particular database, <code>sqlType</code>
  should be <code>java.sql.Types.OTHER</code>.  The method 
 <code>getObject</code> retrieves the value.
 @param parameterName the name of the parameter
 @param sqlType the JDBC type code defined by  <code> java.sql.Types </code>
  .  If the parameter is of JDBC type  <code> NUMERIC </code>
   or  <code> DECIMAL </code> , the version of  
  <code> registerOutParameter </code>  that accepts a scale value  should be used.
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif <code>sqlType</code> is
  a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
  <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
  <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
   <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
  or  <code>STRUCT</code> data type and the JDBC driver does not support
  this data type or if the JDBC driver does not support
  this method
 @since 1.4
 - seealso: Types
 */
- (void)registerOutParameterWithNSString:(NSString *)parameterName
                                 withInt:(jint)sqlType;

/*!
 @brief Registers the parameter named 
 <code>parameterName</code> to be of JDBC type 
 <code>sqlType</code>.All OUT parameters must be registered
  before a stored procedure is executed.
 <p>
  The JDBC type specified by <code>sqlType</code> for an OUT
  parameter determines the Java type that must be used
  in the <code>get</code> method to read the value of that parameter. 
 <p>
  This version of <code>registerOutParameter</code> should be
  used when the parameter is of JDBC type <code>NUMERIC</code>
  or <code>DECIMAL</code>.
 @param parameterName the name of the parameter
 @param sqlType SQL type code defined by  <code> java.sql.Types </code>
  .
 @param scale_ the desired number of digits to the right of the  decimal point.  It must be greater than or equal to zero.
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif <code>sqlType</code> is
  a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
  <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
  <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
   <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
  or  <code>STRUCT</code> data type and the JDBC driver does not support
  this data type or if the JDBC driver does not support
  this method
 @since 1.4
 - seealso: Types
 */
- (void)registerOutParameterWithNSString:(NSString *)parameterName
                                 withInt:(jint)sqlType
                                 withInt:(jint)scale_;

/*!
 @brief Registers the designated output parameter.This version of
  the method <code>registerOutParameter</code>
  should be used for a user-named or REF output parameter.
 Examples
  of user-named types include: STRUCT, DISTINCT, JAVA_OBJECT, and
  named array types.
 <p>
  All OUT parameters must be registered
  before a stored procedure is executed. 
 <p>
  For a user-named parameter the fully-qualified SQL
  type name of the parameter should also be given, while a REF
  parameter requires that the fully-qualified type name of the
  referenced type be given.  A JDBC driver that does not need the
  type code and type name information may ignore it.   To be portable,
  however, applications should always provide these values for
  user-named and REF parameters.
  Although it is intended for user-named and REF parameters,
  this method may be used to register a parameter of any JDBC type.
  If the parameter does not have a user-named or REF type, the
  typeName parameter is ignored. 
 <P><B>Note:</B> When reading the value of an out parameter, you
  must use the <code>getXXX</code> method whose Java type XXX corresponds to the
  parameter's registered SQL type.
 @param parameterName the name of the parameter
 @param sqlType a value from <code>java.sql.Types</code>
 @param typeName the fully-qualified name of an SQL structured type
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif <code>sqlType</code> is
  a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
  <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
  <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
   <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
  or  <code>STRUCT</code> data type and the JDBC driver does not support
  this data type or if the JDBC driver does not support
  this method
 - seealso: Types
 @since 1.4
 */
- (void)registerOutParameterWithNSString:(NSString *)parameterName
                                 withInt:(jint)sqlType
                            withNSString:(NSString *)typeName;

/*!
 @brief Retrieves the value of the designated JDBC <code>DATALINK</code> parameter as a 
 <code>java.net.URL</code> object.
 @param parameterIndex the first parameter is 1, the second is 2,...
 @return a <code>java.net.URL</code> object that represents the
          JDBC <code>DATALINK</code> value used as the designated
          parameter
 @throw SQLExceptionif the parameterIndex is not valid;
  if a database access error occurs,
  this method is called on a closed <code>CallableStatement</code>,
             or if the URL being returned is
             not a valid URL on the Java platform
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #setURL
 @since 1.4
 */
- (JavaNetURL *)getURLWithInt:(jint)parameterIndex;

/*!
 @brief Sets the designated parameter to the given <code>java.net.URL</code> object.
 The driver converts this to an SQL <code>DATALINK</code> value when
  it sends it to the database.
 @param parameterName the name of the parameter
 @param val the parameter value
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs;
  this method is called on a closed <code>CallableStatement</code>
             or if a URL is malformed
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #getURL
 @since 1.4
 */
- (void)setURLWithNSString:(NSString *)parameterName
            withJavaNetURL:(JavaNetURL *)val;

/*!
 @brief Sets the designated parameter to SQL <code>NULL</code>.
 <P><B>Note:</B> You must specify the parameter's SQL type.
 @param parameterName the name of the parameter
 @param sqlType the SQL type code defined in  <code> java.sql.Types </code>
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.4
 */
- (void)setNullWithNSString:(NSString *)parameterName
                    withInt:(jint)sqlType;

/*!
 @brief Sets the designated parameter to the given Java <code>boolean</code> value.
 The driver converts this
  to an SQL <code>BIT</code> or <code>BOOLEAN</code> value when it sends it to the database.
 @param parameterName the name of the parameter
 @param x the parameter value
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 - seealso: #getBoolean
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.4
 */
- (void)setBooleanWithNSString:(NSString *)parameterName
                   withBoolean:(jboolean)x;

/*!
 @brief Sets the designated parameter to the given Java <code>byte</code> value.
 The driver converts this
  to an SQL <code>TINYINT</code> value when it sends it to the database.
 @param parameterName the name of the parameter
 @param x the parameter value
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #getByte
 @since 1.4
 */
- (void)setByteWithNSString:(NSString *)parameterName
                   withByte:(jbyte)x;

/*!
 @brief Sets the designated parameter to the given Java <code>short</code> value.
 The driver converts this
  to an SQL <code>SMALLINT</code> value when it sends it to the database.
 @param parameterName the name of the parameter
 @param x the parameter value
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #getShort
 @since 1.4
 */
- (void)setShortWithNSString:(NSString *)parameterName
                   withShort:(jshort)x;

/*!
 @brief Sets the designated parameter to the given Java <code>int</code> value.
 The driver converts this
  to an SQL <code>INTEGER</code> value when it sends it to the database.
 @param parameterName the name of the parameter
 @param x the parameter value
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #getInt
 @since 1.4
 */
- (void)setIntWithNSString:(NSString *)parameterName
                   withInt:(jint)x;

/*!
 @brief Sets the designated parameter to the given Java <code>long</code> value.
 The driver converts this
  to an SQL <code>BIGINT</code> value when it sends it to the database.
 @param parameterName the name of the parameter
 @param x the parameter value
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #getLong
 @since 1.4
 */
- (void)setLongWithNSString:(NSString *)parameterName
                   withLong:(jlong)x;

/*!
 @brief Sets the designated parameter to the given Java <code>float</code> value.
 The driver converts this
  to an SQL <code>FLOAT</code> value when it sends it to the database.
 @param parameterName the name of the parameter
 @param x the parameter value
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #getFloat
 @since 1.4
 */
- (void)setFloatWithNSString:(NSString *)parameterName
                   withFloat:(jfloat)x;

/*!
 @brief Sets the designated parameter to the given Java <code>double</code> value.
 The driver converts this
  to an SQL <code>DOUBLE</code> value when it sends it to the database.
 @param parameterName the name of the parameter
 @param x the parameter value
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #getDouble
 @since 1.4
 */
- (void)setDoubleWithNSString:(NSString *)parameterName
                   withDouble:(jdouble)x;

/*!
 @brief Sets the designated parameter to the given 
 <code>java.math.BigDecimal</code> value.
 The driver converts this to an SQL <code>NUMERIC</code> value when
  it sends it to the database.
 @param parameterName the name of the parameter
 @param x the parameter value
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #getBigDecimal
 @since 1.4
 */
- (void)setBigDecimalWithNSString:(NSString *)parameterName
           withJavaMathBigDecimal:(JavaMathBigDecimal *)x;

/*!
 @brief Sets the designated parameter to the given Java <code>String</code> value.
 The driver converts this
  to an SQL <code>VARCHAR</code> or <code>LONGVARCHAR</code> value
  (depending on the argument's
  size relative to the driver's limits on <code>VARCHAR</code> values)
  when it sends it to the database.
 @param parameterName the name of the parameter
 @param x the parameter value
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #getString
 @since 1.4
 */
- (void)setStringWithNSString:(NSString *)parameterName
                 withNSString:(NSString *)x;

/*!
 @brief Sets the designated parameter to the given Java array of bytes.
 The driver converts this to an SQL <code>VARBINARY</code> or 
 <code>LONGVARBINARY</code> (depending on the argument's size relative
  to the driver's limits on <code>VARBINARY</code> values) when it sends
  it to the database.
 @param parameterName the name of the parameter
 @param x the parameter value
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #getBytes
 @since 1.4
 */
- (void)setBytesWithNSString:(NSString *)parameterName
               withByteArray:(IOSByteArray *)x;

/*!
 @brief Sets the designated parameter to the given <code>java.sql.Date</code> value
  using the default time zone of the virtual machine that is running
  the application.
 The driver converts this
  to an SQL <code>DATE</code> value when it sends it to the database.
 @param parameterName the name of the parameter
 @param x the parameter value
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #getDate
 @since 1.4
 */
- (void)setDateWithNSString:(NSString *)parameterName
            withJavaSqlDate:(JavaSqlDate *)x;

/*!
 @brief Sets the designated parameter to the given <code>java.sql.Time</code> value.
 The driver converts this
  to an SQL <code>TIME</code> value when it sends it to the database.
 @param parameterName the name of the parameter
 @param x the parameter value
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #getTime
 @since 1.4
 */
- (void)setTimeWithNSString:(NSString *)parameterName
            withJavaSqlTime:(JavaSqlTime *)x;

/*!
 @brief Sets the designated parameter to the given <code>java.sql.Timestamp</code> value.
 The driver
  converts this to an SQL <code>TIMESTAMP</code> value when it sends it to the
  database.
 @param parameterName the name of the parameter
 @param x the parameter value
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #getTimestamp
 @since 1.4
 */
- (void)setTimestampWithNSString:(NSString *)parameterName
            withJavaSqlTimestamp:(JavaSqlTimestamp *)x;

/*!
 @brief Sets the designated parameter to the given input stream, which will have
  the specified number of bytes.
 When a very large ASCII value is input to a <code>LONGVARCHAR</code>
  parameter, it may be more practical to send it via a 
 <code>java.io.InputStream</code>. Data will be read from the stream
  as needed until end-of-file is reached.  The JDBC driver will
  do any necessary conversion from ASCII to the database char format. 
 <P><B>Note:</B> This stream object can either be a standard
  Java stream object or your own subclass that implements the
  standard interface.
 @param parameterName the name of the parameter
 @param x the Java input stream that contains the ASCII parameter value
 @param length the number of bytes in the stream
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.4
 */
- (void)setAsciiStreamWithNSString:(NSString *)parameterName
             withJavaIoInputStream:(JavaIoInputStream *)x
                           withInt:(jint)length;

/*!
 @brief Sets the designated parameter to the given input stream, which will have
  the specified number of bytes.
 When a very large binary value is input to a <code>LONGVARBINARY</code>
  parameter, it may be more practical to send it via a 
 <code>java.io.InputStream</code> object. The data will be read from the stream
  as needed until end-of-file is reached. 
 <P><B>Note:</B> This stream object can either be a standard
  Java stream object or your own subclass that implements the
  standard interface.
 @param parameterName the name of the parameter
 @param x the java input stream which contains the binary parameter value
 @param length the number of bytes in the stream
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.4
 */
- (void)setBinaryStreamWithNSString:(NSString *)parameterName
              withJavaIoInputStream:(JavaIoInputStream *)x
                            withInt:(jint)length;

/*!
 @brief Sets the value of the designated parameter with the given object.The second
  argument must be an object type; for integral values, the 
 <code>java.lang</code> equivalent objects should be used.
 <p>The given Java object will be converted to the given targetSqlType
  before being sent to the database.
  If the object has a custom mapping (is of a class implementing the
  interface <code>SQLData</code>),
  the JDBC driver should call the method <code>SQLData.writeSQL</code> to write it
  to the SQL data stream.
  If, on the other hand, the object is of a class implementing 
 <code>Ref</code>, <code>Blob</code>, <code>Clob</code>,  <code>NClob</code>,
   <code>Struct</code>, <code>java.net.URL</code>,
  or <code>Array</code>, the driver should pass it to the database as a
  value of the corresponding SQL type. 
 <P>
  Note that this method may be used to pass datatabase-
  specific abstract data types.
 @param parameterName the name of the parameter
 @param x the object containing the input parameter value
 @param targetSqlType the SQL type (as defined in java.sql.Types) to be  sent to the database. The scale argument may further qualify this type.
 @param scale_ for java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types,           this is the number of digits after the decimal point.  For all other
            types, this value will be ignored.
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif <code>targetSqlType</code> is
  a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
  <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
  <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
   <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
  or  <code>STRUCT</code> data type and the JDBC driver does not support
  this data type
 - seealso: Types
 - seealso: #getObject
 @since 1.4
 */
- (void)setObjectWithNSString:(NSString *)parameterName
                       withId:(id)x
                      withInt:(jint)targetSqlType
                      withInt:(jint)scale_;

/*!
 @brief Sets the value of the designated parameter with the given object.
 This method is like the method <code>setObject</code>
  above, except that it assumes a scale of zero.
 @param parameterName the name of the parameter
 @param x the object containing the input parameter value
 @param targetSqlType the SQL type (as defined in java.sql.Types) to be                       sent to the database
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif <code>targetSqlType</code> is
  a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
  <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
  <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
   <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
  or  <code>STRUCT</code> data type and the JDBC driver does not support
  this data type
 - seealso: #getObject
 @since 1.4
 */
- (void)setObjectWithNSString:(NSString *)parameterName
                       withId:(id)x
                      withInt:(jint)targetSqlType;

/*!
 @brief Sets the value of the designated parameter with the given object.
 The second parameter must be of type <code>Object</code>; therefore, the 
 <code>java.lang</code> equivalent objects should be used for built-in types. 
 <p>The JDBC specification specifies a standard mapping from
  Java <code>Object</code> types to SQL types.  The given argument
  will be converted to the corresponding SQL type before being
  sent to the database. 
 <p>Note that this method may be used to pass datatabase-
  specific abstract data types, by using a driver-specific Java
  type.
  If the object is of a class implementing the interface <code>SQLData</code>,
  the JDBC driver should call the method <code>SQLData.writeSQL</code>
  to write it to the SQL data stream.
  If, on the other hand, the object is of a class implementing 
 <code>Ref</code>, <code>Blob</code>, <code>Clob</code>,  <code>NClob</code>,
   <code>Struct</code>, <code>java.net.URL</code>,
  or <code>Array</code>, the driver should pass it to the database as a
  value of the corresponding SQL type. 
 <P>
  This method throws an exception if there is an ambiguity, for example, if the
  object is of a class implementing more than one of the interfaces named above.
 <p>
 <b>Note:</b> Not all databases allow for a non-typed Null to be sent to
  the backend. For maximum portability, the <code>setNull</code> or the 
 <code>setObject(String parameterName, Object x, int sqlType)</code>
  method should be used
  instead of <code>setObject(String parameterName, Object x)</code>.
 <p>
 @param parameterName the name of the parameter
 @param x the object containing the input parameter value
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs,
  this method is called on a closed <code>CallableStatement</code> or if the given
             <code>Object</code> parameter is ambiguous
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #getObject
 @since 1.4
 */
- (void)setObjectWithNSString:(NSString *)parameterName
                       withId:(id)x;

/*!
 @brief Sets the designated parameter to the given <code>Reader</code>
  object, which is the given number of characters long.
 When a very large UNICODE value is input to a <code>LONGVARCHAR</code>
  parameter, it may be more practical to send it via a 
 <code>java.io.Reader</code> object. The data will be read from the stream
  as needed until end-of-file is reached.  The JDBC driver will
  do any necessary conversion from UNICODE to the database char format. 
 <P><B>Note:</B> This stream object can either be a standard
  Java stream object or your own subclass that implements the
  standard interface.
 @param parameterName the name of the parameter
 @param reader the  <code> java.io.Reader </code>  object that
          contains the UNICODE data used as the designated parameter
 @param length the number of characters in the stream
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.4
 */
- (void)setCharacterStreamWithNSString:(NSString *)parameterName
                      withJavaIoReader:(JavaIoReader *)reader
                               withInt:(jint)length;

/*!
 @brief Sets the designated parameter to the given <code>java.sql.Date</code> value,
  using the given <code>Calendar</code> object.The driver uses
  the <code>Calendar</code> object to construct an SQL <code>DATE</code> value,
  which the driver then sends to the database.
 With a
  a <code>Calendar</code> object, the driver can calculate the date
  taking into account a custom timezone.  If no 
 <code>Calendar</code> object is specified, the driver uses the default
  timezone, which is that of the virtual machine running the application.
 @param parameterName the name of the parameter
 @param x the parameter value
 @param cal the  <code> Calendar </code>  object the driver will use
              to construct the date
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #getDate
 @since 1.4
 */
- (void)setDateWithNSString:(NSString *)parameterName
            withJavaSqlDate:(JavaSqlDate *)x
       withJavaUtilCalendar:(JavaUtilCalendar *)cal;

/*!
 @brief Sets the designated parameter to the given <code>java.sql.Time</code> value,
  using the given <code>Calendar</code> object.The driver uses
  the <code>Calendar</code> object to construct an SQL <code>TIME</code> value,
  which the driver then sends to the database.
 With a
  a <code>Calendar</code> object, the driver can calculate the time
  taking into account a custom timezone.  If no 
 <code>Calendar</code> object is specified, the driver uses the default
  timezone, which is that of the virtual machine running the application.
 @param parameterName the name of the parameter
 @param x the parameter value
 @param cal the  <code> Calendar </code>  object the driver will use
              to construct the time
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #getTime
 @since 1.4
 */
- (void)setTimeWithNSString:(NSString *)parameterName
            withJavaSqlTime:(JavaSqlTime *)x
       withJavaUtilCalendar:(JavaUtilCalendar *)cal;

/*!
 @brief Sets the designated parameter to the given <code>java.sql.Timestamp</code> value,
  using the given <code>Calendar</code> object.The driver uses
  the <code>Calendar</code> object to construct an SQL <code>TIMESTAMP</code> value,
  which the driver then sends to the database.
 With a
  a <code>Calendar</code> object, the driver can calculate the timestamp
  taking into account a custom timezone.  If no 
 <code>Calendar</code> object is specified, the driver uses the default
  timezone, which is that of the virtual machine running the application.
 @param parameterName the name of the parameter
 @param x the parameter value
 @param cal the  <code> Calendar </code>  object the driver will use
              to construct the timestamp
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #getTimestamp
 @since 1.4
 */
- (void)setTimestampWithNSString:(NSString *)parameterName
            withJavaSqlTimestamp:(JavaSqlTimestamp *)x
            withJavaUtilCalendar:(JavaUtilCalendar *)cal;

/*!
 @brief Sets the designated parameter to SQL <code>NULL</code>.
 This version of the method <code>setNull</code> should
  be used for user-defined types and REF type parameters.  Examples
  of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and
  named array types. 
 <P><B>Note:</B> To be portable, applications must give the
  SQL type code and the fully-qualified SQL type name when specifying
  a NULL user-defined or REF parameter.  In the case of a user-defined type
  the name is the type name of the parameter itself.  For a REF
  parameter, the name is the type name of the referenced type. 
 <p>
  Although it is intended for user-defined and Ref parameters,
  this method may be used to set a null parameter of any JDBC type.
  If the parameter does not have a user-defined or REF type, the given
  typeName is ignored.
 @param parameterName the name of the parameter
 @param sqlType a value from  <code> java.sql.Types </code>
 @param typeName the fully-qualified name of an SQL user-defined type;         ignored if the parameter is not a user-defined type or
          SQL 
  <code> REF </code>  value
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.4
 */
- (void)setNullWithNSString:(NSString *)parameterName
                    withInt:(jint)sqlType
               withNSString:(NSString *)typeName;

/*!
 @brief Retrieves the value of a JDBC <code>CHAR</code>, <code>VARCHAR</code>,
  or <code>LONGVARCHAR</code> parameter as a <code>String</code> in
  the Java programming language.
 <p>
  For the fixed-length type JDBC <code>CHAR</code>,
  the <code>String</code> object
  returned has exactly the same value the SQL 
 <code>CHAR</code> value had in the
  database, including any padding added by the database.
 @param parameterName the name of the parameter
 @return the parameter value. If the value is SQL <code>NULL</code>, the result
  is <code>null</code>.
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #setString
 @since 1.4
 */
- (NSString *)getStringWithNSString:(NSString *)parameterName;

/*!
 @brief Retrieves the value of a JDBC <code>BIT</code> or <code>BOOLEAN</code>
  parameter as a 
 <code>boolean</code> in the Java programming language.
 @param parameterName the name of the parameter
 @return the parameter value.  If the value is SQL <code>NULL</code>, the result
  is <code>false</code>.
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #setBoolean
 @since 1.4
 */
- (jboolean)getBooleanWithNSString:(NSString *)parameterName;

/*!
 @brief Retrieves the value of a JDBC <code>TINYINT</code> parameter as a <code>byte</code>
  in the Java programming language.
 @param parameterName the name of the parameter
 @return the parameter value.  If the value is SQL <code>NULL</code>, the result
  is <code>0</code>.
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #setByte
 @since 1.4
 */
- (jbyte)getByteWithNSString:(NSString *)parameterName;

/*!
 @brief Retrieves the value of a JDBC <code>SMALLINT</code> parameter as a <code>short</code>
  in the Java programming language.
 @param parameterName the name of the parameter
 @return the parameter value.  If the value is SQL <code>NULL</code>, the result
  is <code>0</code>.
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #setShort
 @since 1.4
 */
- (jshort)getShortWithNSString:(NSString *)parameterName;

/*!
 @brief Retrieves the value of a JDBC <code>INTEGER</code> parameter as an <code>int</code>
  in the Java programming language.
 @param parameterName the name of the parameter
 @return the parameter value.  If the value is SQL <code>NULL</code>,
          the result is <code>0</code>.
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #setInt
 @since 1.4
 */
- (jint)getIntWithNSString:(NSString *)parameterName;

/*!
 @brief Retrieves the value of a JDBC <code>BIGINT</code> parameter as a <code>long</code>
  in the Java programming language.
 @param parameterName the name of the parameter
 @return the parameter value.  If the value is SQL <code>NULL</code>,
          the result is <code>0</code>.
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #setLong
 @since 1.4
 */
- (jlong)getLongWithNSString:(NSString *)parameterName;

/*!
 @brief Retrieves the value of a JDBC <code>FLOAT</code> parameter as a <code>float</code>
  in the Java programming language.
 @param parameterName the name of the parameter
 @return the parameter value.  If the value is SQL <code>NULL</code>,
          the result is <code>0</code>.
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #setFloat
 @since 1.4
 */
- (jfloat)getFloatWithNSString:(NSString *)parameterName;

/*!
 @brief Retrieves the value of a JDBC <code>DOUBLE</code> parameter as a <code>double</code>
  in the Java programming language.
 @param parameterName the name of the parameter
 @return the parameter value.  If the value is SQL <code>NULL</code>,
          the result is <code>0</code>.
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #setDouble
 @since 1.4
 */
- (jdouble)getDoubleWithNSString:(NSString *)parameterName;

/*!
 @brief Retrieves the value of a JDBC <code>BINARY</code> or <code>VARBINARY</code>
  parameter as an array of <code>byte</code> values in the Java
  programming language.
 @param parameterName the name of the parameter
 @return the parameter value.  If the value is SQL <code>NULL</code>, the result is
   <code>null</code>.
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #setBytes
 @since 1.4
 */
- (IOSByteArray *)getBytesWithNSString:(NSString *)parameterName;

/*!
 @brief Retrieves the value of a JDBC <code>DATE</code> parameter as a 
 <code>java.sql.Date</code> object.
 @param parameterName the name of the parameter
 @return the parameter value.  If the value is SQL <code>NULL</code>, the result
  is <code>null</code>.
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #setDate
 @since 1.4
 */
- (JavaSqlDate *)getDateWithNSString:(NSString *)parameterName;

/*!
 @brief Retrieves the value of a JDBC <code>TIME</code> parameter as a 
 <code>java.sql.Time</code> object.
 @param parameterName the name of the parameter
 @return the parameter value.  If the value is SQL <code>NULL</code>, the result
  is <code>null</code>.
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #setTime
 @since 1.4
 */
- (JavaSqlTime *)getTimeWithNSString:(NSString *)parameterName;

/*!
 @brief Retrieves the value of a JDBC <code>TIMESTAMP</code> parameter as a 
 <code>java.sql.Timestamp</code> object.
 @param parameterName the name of the parameter
 @return the parameter value.  If the value is SQL <code>NULL</code>, the result
  is <code>null</code>.
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #setTimestamp
 @since 1.4
 */
- (JavaSqlTimestamp *)getTimestampWithNSString:(NSString *)parameterName;

/*!
 @brief Retrieves the value of a parameter as an <code>Object</code> in the Java
  programming language.If the value is an SQL <code>NULL</code>, the
  driver returns a Java <code>null</code>.
 <p>
  This method returns a Java object whose type corresponds to the JDBC
  type that was registered for this parameter using the method 
 <code>registerOutParameter</code>.  By registering the target JDBC
  type as <code>java.sql.Types.OTHER</code>, this method can be used
  to read database-specific abstract data types.
 @param parameterName the name of the parameter
 @return A <code>java.lang.Object</code> holding the OUT parameter value.
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: Types
 - seealso: #setObject
 @since 1.4
 */
- (id)getObjectWithNSString:(NSString *)parameterName;

/*!
 @brief Retrieves the value of a JDBC <code>NUMERIC</code> parameter as a 
 <code>java.math.BigDecimal</code> object with as many digits to the
  right of the decimal point as the value contains.
 @param parameterName the name of the parameter
 @return the parameter value in full precision.  If the value is
  SQL <code>NULL</code>, the result is <code>null</code>.
 @throw SQLExceptionifparameterName does not correspond to a named
  parameter;  if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #setBigDecimal
 @since 1.4
 */
- (JavaMathBigDecimal *)getBigDecimalWithNSString:(NSString *)parameterName;

/*!
 @brief Returns an object representing the value of OUT parameter 
 <code>parameterName</code> and uses <code>map</code> for the custom
  mapping of the parameter value.
 <p>
  This method returns a Java object whose type corresponds to the
  JDBC type that was registered for this parameter using the method 
 <code>registerOutParameter</code>.  By registering the target
  JDBC type as <code>java.sql.Types.OTHER</code>, this method can
  be used to read database-specific abstract data types.
 @param parameterName the name of the parameter
 @param map the mapping from SQL type names to Java classes
 @return a <code>java.lang.Object</code> holding the OUT parameter value
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #setObject
 @since 1.4
 */
- (id)getObjectWithNSString:(NSString *)parameterName
            withJavaUtilMap:(id<JavaUtilMap>)map;

/*!
 @brief Retrieves the value of a JDBC <code>REF(&lt;structured-type&gt;)</code>
  parameter as a <code>java.sql.Ref</code> object in the Java programming language.
 @param parameterName the name of the parameter
 @return the parameter value as a <code>Ref</code> object in the
          Java programming language.  If the value was SQL <code>NULL</code>,
          the value <code>null</code> is returned.
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.4
 */
- (id<JavaSqlRef>)getRefWithNSString:(NSString *)parameterName;

/*!
 @brief Retrieves the value of a JDBC <code>BLOB</code> parameter as a 
 <code>java.sql.Blob</code> object in the Java programming language.
 @param parameterName the name of the parameter
 @return the parameter value as a <code>Blob</code> object in the
          Java programming language.  If the value was SQL <code>NULL</code>,
          the value <code>null</code> is returned.
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.4
 */
- (id<JavaSqlBlob>)getBlobWithNSString:(NSString *)parameterName;

/*!
 @brief Retrieves the value of a JDBC <code>CLOB</code> parameter as a 
 <code>java.sql.Clob</code> object in the Java programming language.
 @param parameterName the name of the parameter
 @return the parameter value as a <code>Clob</code> object in the
          Java programming language.  If the value was SQL <code>NULL</code>,
          the value <code>null</code> is returned.
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.4
 */
- (id<JavaSqlClob>)getClobWithNSString:(NSString *)parameterName;

/*!
 @brief Retrieves the value of a JDBC <code>ARRAY</code> parameter as an 
 <code>java.sql.Array</code> object in the Java programming language.
 @param parameterName the name of the parameter
 @return the parameter value as an <code>Array</code> object in
          Java programming language.  If the value was SQL <code>NULL</code>,
          the value <code>null</code> is returned.
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.4
 */
- (id<JavaSqlArray>)getArrayWithNSString:(NSString *)parameterName;

/*!
 @brief Retrieves the value of a JDBC <code>DATE</code> parameter as a 
 <code>java.sql.Date</code> object, using
  the given <code>Calendar</code> object
  to construct the date.
 With a <code>Calendar</code> object, the driver
  can calculate the date taking into account a custom timezone and locale.
  If no <code>Calendar</code> object is specified, the driver uses the
  default timezone and locale.
 @param parameterName the name of the parameter
 @param cal the  <code> Calendar </code>  object the driver will use
              to construct the date
 @return the parameter value.  If the value is SQL <code>NULL</code>,
  the result is <code>null</code>.
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #setDate
 @since 1.4
 */
- (JavaSqlDate *)getDateWithNSString:(NSString *)parameterName
                withJavaUtilCalendar:(JavaUtilCalendar *)cal;

/*!
 @brief Retrieves the value of a JDBC <code>TIME</code> parameter as a 
 <code>java.sql.Time</code> object, using
  the given <code>Calendar</code> object
  to construct the time.
 With a <code>Calendar</code> object, the driver
  can calculate the time taking into account a custom timezone and locale.
  If no <code>Calendar</code> object is specified, the driver uses the
  default timezone and locale.
 @param parameterName the name of the parameter
 @param cal the  <code> Calendar </code>  object the driver will use
              to construct the time
 @return the parameter value; if the value is SQL <code>NULL</code>, the result is 
 <code>null</code>.
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #setTime
 @since 1.4
 */
- (JavaSqlTime *)getTimeWithNSString:(NSString *)parameterName
                withJavaUtilCalendar:(JavaUtilCalendar *)cal;

/*!
 @brief Retrieves the value of a JDBC <code>TIMESTAMP</code> parameter as a 
 <code>java.sql.Timestamp</code> object, using
  the given <code>Calendar</code> object to construct
  the <code>Timestamp</code> object.
 With a <code>Calendar</code> object, the driver
  can calculate the timestamp taking into account a custom timezone and locale.
  If no <code>Calendar</code> object is specified, the driver uses the
  default timezone and locale.
 @param parameterName the name of the parameter
 @param cal the  <code> Calendar </code>  object the driver will use
              to construct the timestamp
 @return the parameter value.  If the value is SQL <code>NULL</code>, the result is 
 <code>null</code>.
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #setTimestamp
 @since 1.4
 */
- (JavaSqlTimestamp *)getTimestampWithNSString:(NSString *)parameterName
                          withJavaUtilCalendar:(JavaUtilCalendar *)cal;

/*!
 @brief Retrieves the value of a JDBC <code>DATALINK</code> parameter as a 
 <code>java.net.URL</code> object.
 @param parameterName the name of the parameter
 @return the parameter value as a <code>java.net.URL</code> object in the
  Java programming language.  If the value was SQL <code>NULL</code>, the
  value <code>null</code> is returned.
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs,
  this method is called on a closed <code>CallableStatement</code>,
             or if there is a problem with the URL
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #setURL
 @since 1.4
 */
- (JavaNetURL *)getURLWithNSString:(NSString *)parameterName;

/*!
 @brief Retrieves the value of the designated JDBC <code>ROWID</code> parameter as a 
 <code>java.sql.RowId</code> object.
 @param parameterIndex the first parameter is 1, the second is 2,...
 @return a <code>RowId</code> object that represents the JDBC <code>ROWID</code>
      value is used as the designated parameter. If the parameter contains
  a SQL <code>NULL</code>, then a <code>null</code> value is returned.
 @throw SQLExceptionif the parameterIndex is not valid;
  if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (id<JavaSqlRowId>)getRowIdWithInt:(jint)parameterIndex;

/*!
 @brief Retrieves the value of the designated JDBC <code>ROWID</code> parameter as a 
 <code>java.sql.RowId</code> object.
 @param parameterName the name of the parameter
 @return a <code>RowId</code> object that represents the JDBC <code>ROWID</code>
      value is used as the designated parameter. If the parameter contains
  a SQL <code>NULL</code>, then a <code>null</code> value is returned.
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (id<JavaSqlRowId>)getRowIdWithNSString:(NSString *)parameterName;

/*!
 @brief Sets the designated parameter to the given <code>java.sql.RowId</code> object.The
  driver converts this to a SQL <code>ROWID</code> when it sends it to the
  database.
 @param parameterName the name of the parameter
 @param x the parameter value
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (void)setRowIdWithNSString:(NSString *)parameterName
            withJavaSqlRowId:(id<JavaSqlRowId>)x;

/*!
 @brief Sets the designated parameter to the given <code>String</code> object.
 The driver converts this to a SQL <code>NCHAR</code> or 
 <code>NVARCHAR</code> or <code>LONGNVARCHAR</code>
 @param parameterName the name of the parameter to be set
 @param value the parameter value
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if the driver does not support national
          character sets;  if the driver can detect that a data conversion
   error could occur; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (void)setNStringWithNSString:(NSString *)parameterName
                  withNSString:(NSString *)value;

/*!
 @brief Sets the designated parameter to a <code>Reader</code> object.The
  <code>Reader</code> reads the data till end-of-file is reached.
 The
  driver does the necessary conversion from Java character format to
  the national character set in the database.
 @param parameterName the name of the parameter to be set
 @param value the parameter value
 @param length the number of characters in the parameter data.
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if the driver does not support national
          character sets;  if the driver can detect that a data conversion
   error could occur; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (void)setNCharacterStreamWithNSString:(NSString *)parameterName
                       withJavaIoReader:(JavaIoReader *)value
                               withLong:(jlong)length;

/*!
 @brief Sets the designated parameter to a <code>java.sql.NClob</code> object.The object
  implements the <code>java.sql.NClob</code> interface.
 This <code>NClob</code>
  object maps to a SQL <code>NCLOB</code>.
 @param parameterName the name of the parameter to be set
 @param value the parameter value
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if the driver does not support national
          character sets;  if the driver can detect that a data conversion
   error could occur; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (void)setNClobWithNSString:(NSString *)parameterName
            withJavaSqlNClob:(id<JavaSqlNClob>)value;

/*!
 @brief Sets the designated parameter to a <code>Reader</code> object.The <code>reader</code> must contain  the number
  of characters specified by length otherwise a <code>SQLException</code> will be
  generated when the <code>CallableStatement</code> is executed.
 This method differs from the <code>setCharacterStream (int, Reader, int)</code> method
  because it informs the driver that the parameter value should be sent to
  the server as a <code>CLOB</code>.  When the <code>setCharacterStream</code> method is used, the
  driver may have to do extra work to determine whether the parameter
  data should be send to the server as a <code>LONGVARCHAR</code> or a <code>CLOB</code>
 @param parameterName the name of the parameter to be set
 @param reader An object that contains the data to set the parameter value to.
 @param length the number of characters in the parameter data.
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if the length specified is less than zero;
  a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (void)setClobWithNSString:(NSString *)parameterName
           withJavaIoReader:(JavaIoReader *)reader
                   withLong:(jlong)length;

/*!
 @brief Sets the designated parameter to a <code>InputStream</code> object.The <code>inputstream</code> must contain  the number
  of characters specified by length, otherwise a <code>SQLException</code> will be
  generated when the <code>CallableStatement</code> is executed.
 This method differs from the <code>setBinaryStream (int, InputStream, int)</code>
  method because it informs the driver that the parameter value should be
  sent to the server as a <code>BLOB</code>.  When the <code>setBinaryStream</code> method is used,
  the driver may have to do extra work to determine whether the parameter
  data should be sent to the server as a <code>LONGVARBINARY</code> or a <code>BLOB</code>
 @param parameterName the name of the parameter to be set  the second is 2, ...
 @param inputStream An object that contains the data to set the parameter  value to.
 @param length the number of bytes in the parameter data.
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if the length specified
  is less than zero; if the number of bytes in the inputstream does not match
  the specfied length; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (void)setBlobWithNSString:(NSString *)parameterName
      withJavaIoInputStream:(JavaIoInputStream *)inputStream
                   withLong:(jlong)length;

/*!
 @brief Sets the designated parameter to a <code>Reader</code> object.The <code>reader</code> must contain  the number
  of characters specified by length otherwise a <code>SQLException</code> will be
  generated when the <code>CallableStatement</code> is executed.
 This method differs from the <code>setCharacterStream (int, Reader, int)</code> method
  because it informs the driver that the parameter value should be sent to
  the server as a <code>NCLOB</code>.  When the <code>setCharacterStream</code> method is used, the
  driver may have to do extra work to determine whether the parameter
  data should be send to the server as a <code>LONGNVARCHAR</code> or a <code>NCLOB</code>
 @param parameterName the name of the parameter to be set
 @param reader An object that contains the data to set the parameter value to.
 @param length the number of characters in the parameter data.
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if the length specified is less than zero;
  if the driver does not support national
          character sets;  if the driver can detect that a data conversion
   error could occur; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (void)setNClobWithNSString:(NSString *)parameterName
            withJavaIoReader:(JavaIoReader *)reader
                    withLong:(jlong)length;

/*!
 @brief Retrieves the value of the designated JDBC <code>NCLOB</code> parameter as a 
 <code>java.sql.NClob</code> object in the Java programming language.
 @param parameterIndex the first parameter is 1, the second is 2, and  so on
 @return the parameter value as a <code>NClob</code> object in the
  Java programming language.  If the value was SQL <code>NULL</code>, the
  value <code>null</code> is returned.
 @throw SQLExceptionif the parameterIndex is not valid;
  if the driver does not support national
          character sets;  if the driver can detect that a data conversion
   error could occur; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (id<JavaSqlNClob>)getNClobWithInt:(jint)parameterIndex;

/*!
 @brief Retrieves the value of a JDBC <code>NCLOB</code> parameter as a 
 <code>java.sql.NClob</code> object in the Java programming language.
 @param parameterName the name of the parameter
 @return the parameter value as a <code>NClob</code> object in the
          Java programming language.  If the value was SQL <code>NULL</code>,
          the value <code>null</code> is returned.
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if the driver does not support national
          character sets;  if the driver can detect that a data conversion
   error could occur; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (id<JavaSqlNClob>)getNClobWithNSString:(NSString *)parameterName;

/*!
 @brief Sets the designated parameter to the given <code>java.sql.SQLXML</code> object.The driver converts this to an 
 <code>SQL XML</code> value when it sends it to the database.
 @param parameterName the name of the parameter
 @param xmlObject a  <code> SQLXML </code>  object that maps an  <code> SQL XML </code>
   value
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs;
  this method is called on a closed <code>CallableStatement</code> or
  the <code>java.xml.transform.Result</code>,
   <code>Writer</code> or <code>OutputStream</code> has not been closed for the <code>SQLXML</code> object
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (void)setSQLXMLWithNSString:(NSString *)parameterName
            withJavaSqlSQLXML:(id<JavaSqlSQLXML>)xmlObject;

/*!
 @brief Retrieves the value of the designated <code>SQL XML</code> parameter as a 
 <code>java.sql.SQLXML</code> object in the Java programming language.
 @param parameterIndex index of the first parameter is 1, the second is 2, ...
 @return a <code>SQLXML</code> object that maps an <code>SQL XML</code> value
 @throw SQLExceptionif the parameterIndex is not valid;
  if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (id<JavaSqlSQLXML>)getSQLXMLWithInt:(jint)parameterIndex;

/*!
 @brief Retrieves the value of the designated <code>SQL XML</code> parameter as a 
 <code>java.sql.SQLXML</code> object in the Java programming language.
 @param parameterName the name of the parameter
 @return a <code>SQLXML</code> object that maps an <code>SQL XML</code> value
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (id<JavaSqlSQLXML>)getSQLXMLWithNSString:(NSString *)parameterName;

/*!
 @brief Retrieves the value of the designated <code>NCHAR</code>,
  <code>NVARCHAR</code>
  or <code>LONGNVARCHAR</code> parameter as
  a <code>String</code> in the Java programming language.
 <p>
  For the fixed-length type JDBC <code>NCHAR</code>,
  the <code>String</code> object
  returned has exactly the same value the SQL 
 <code>NCHAR</code> value had in the
  database, including any padding added by the database.
 @param parameterIndex index of the first parameter is 1, the second is 2, ...
 @return a <code>String</code> object that maps an 
 <code>NCHAR</code>, <code>NVARCHAR</code> or <code>LONGNVARCHAR</code> value
 @throw SQLExceptionif the parameterIndex is not valid;
  if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 - seealso: #setNString
 */
- (NSString *)getNStringWithInt:(jint)parameterIndex;

/*!
 @brief Retrieves the value of the designated <code>NCHAR</code>,
  <code>NVARCHAR</code>
  or <code>LONGNVARCHAR</code> parameter as
  a <code>String</code> in the Java programming language.
 <p>
  For the fixed-length type JDBC <code>NCHAR</code>,
  the <code>String</code> object
  returned has exactly the same value the SQL 
 <code>NCHAR</code> value had in the
  database, including any padding added by the database.
 @param parameterName the name of the parameter
 @return a <code>String</code> object that maps an 
 <code>NCHAR</code>, <code>NVARCHAR</code> or <code>LONGNVARCHAR</code> value
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter;
  if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 - seealso: #setNString
 */
- (NSString *)getNStringWithNSString:(NSString *)parameterName;

/*!
 @brief Retrieves the value of the designated parameter as a 
 <code>java.io.Reader</code> object in the Java programming language.
 It is intended for use when
  accessing  <code>NCHAR</code>,<code>NVARCHAR</code>
  and <code>LONGNVARCHAR</code> parameters.
 @return a <code>java.io.Reader</code> object that contains the parameter
  value; if the value is SQL <code>NULL</code>, the value returned is 
 <code>null</code> in the Java programming language.
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @throw SQLExceptionif the parameterIndex is not valid;
  if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (JavaIoReader *)getNCharacterStreamWithInt:(jint)parameterIndex;

/*!
 @brief Retrieves the value of the designated parameter as a 
 <code>java.io.Reader</code> object in the Java programming language.
 It is intended for use when
  accessing  <code>NCHAR</code>,<code>NVARCHAR</code>
  and <code>LONGNVARCHAR</code> parameters.
 @param parameterName the name of the parameter
 @return a <code>java.io.Reader</code> object that contains the parameter
  value; if the value is SQL <code>NULL</code>, the value returned is 
 <code>null</code> in the Java programming language
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (JavaIoReader *)getNCharacterStreamWithNSString:(NSString *)parameterName;

/*!
 @brief Retrieves the value of the designated parameter as a 
 <code>java.io.Reader</code> object in the Java programming language.
 @return a <code>java.io.Reader</code> object that contains the parameter
  value; if the value is SQL <code>NULL</code>, the value returned is 
 <code>null</code> in the Java programming language.
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @throw SQLExceptionif the parameterIndex is not valid; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @since 1.6
 */
- (JavaIoReader *)getCharacterStreamWithInt:(jint)parameterIndex;

/*!
 @brief Retrieves the value of the designated parameter as a 
 <code>java.io.Reader</code> object in the Java programming language.
 @param parameterName the name of the parameter
 @return a <code>java.io.Reader</code> object that contains the parameter
  value; if the value is SQL <code>NULL</code>, the value returned is 
 <code>null</code> in the Java programming language
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (JavaIoReader *)getCharacterStreamWithNSString:(NSString *)parameterName;

/*!
 @brief Sets the designated parameter to the given <code>java.sql.Blob</code> object.
 The driver converts this to an SQL <code>BLOB</code> value when it
  sends it to the database.
 @param parameterName the name of the parameter
 @param x a  <code> Blob </code>  object that maps an SQL  <code> BLOB </code>
   value
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (void)setBlobWithNSString:(NSString *)parameterName
            withJavaSqlBlob:(id<JavaSqlBlob>)x;

/*!
 @brief Sets the designated parameter to the given <code>java.sql.Clob</code> object.
 The driver converts this to an SQL <code>CLOB</code> value when it
  sends it to the database.
 @param parameterName the name of the parameter
 @param x a  <code> Clob </code>  object that maps an SQL  <code> CLOB </code>
   value
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (void)setClobWithNSString:(NSString *)parameterName
            withJavaSqlClob:(id<JavaSqlClob>)x;

/*!
 @brief Sets the designated parameter to the given input stream, which will have
  the specified number of bytes.
 When a very large ASCII value is input to a <code>LONGVARCHAR</code>
  parameter, it may be more practical to send it via a 
 <code>java.io.InputStream</code>. Data will be read from the stream
  as needed until end-of-file is reached.  The JDBC driver will
  do any necessary conversion from ASCII to the database char format. 
 <P><B>Note:</B> This stream object can either be a standard
  Java stream object or your own subclass that implements the
  standard interface.
 @param parameterName the name of the parameter
 @param x the Java input stream that contains the ASCII parameter value
 @param length the number of bytes in the stream
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (void)setAsciiStreamWithNSString:(NSString *)parameterName
             withJavaIoInputStream:(JavaIoInputStream *)x
                          withLong:(jlong)length;

/*!
 @brief Sets the designated parameter to the given input stream, which will have
  the specified number of bytes.
 When a very large binary value is input to a <code>LONGVARBINARY</code>
  parameter, it may be more practical to send it via a 
 <code>java.io.InputStream</code> object. The data will be read from the stream
  as needed until end-of-file is reached. 
 <P><B>Note:</B> This stream object can either be a standard
  Java stream object or your own subclass that implements the
  standard interface.
 @param parameterName the name of the parameter
 @param x the java input stream which contains the binary parameter value
 @param length the number of bytes in the stream
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (void)setBinaryStreamWithNSString:(NSString *)parameterName
              withJavaIoInputStream:(JavaIoInputStream *)x
                           withLong:(jlong)length;

/*!
 @brief Sets the designated parameter to the given <code>Reader</code>
  object, which is the given number of characters long.
 When a very large UNICODE value is input to a <code>LONGVARCHAR</code>
  parameter, it may be more practical to send it via a 
 <code>java.io.Reader</code> object. The data will be read from the stream
  as needed until end-of-file is reached.  The JDBC driver will
  do any necessary conversion from UNICODE to the database char format. 
 <P><B>Note:</B> This stream object can either be a standard
  Java stream object or your own subclass that implements the
  standard interface.
 @param parameterName the name of the parameter
 @param reader the  <code> java.io.Reader </code>  object that
          contains the UNICODE data used as the designated parameter
 @param length the number of characters in the stream
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (void)setCharacterStreamWithNSString:(NSString *)parameterName
                      withJavaIoReader:(JavaIoReader *)reader
                              withLong:(jlong)length;

/*!
 @brief Sets the designated parameter to the given input stream.
 When a very large ASCII value is input to a <code>LONGVARCHAR</code>
  parameter, it may be more practical to send it via a 
 <code>java.io.InputStream</code>. Data will be read from the stream
  as needed until end-of-file is reached.  The JDBC driver will
  do any necessary conversion from ASCII to the database char format. 
 <P><B>Note:</B> This stream object can either be a standard
  Java stream object or your own subclass that implements the
  standard interface. 
 <P><B>Note:</B> Consult your JDBC driver documentation to determine if
  it might be more efficient to use a version of 
 <code>setAsciiStream</code> which takes a length parameter.
 @param parameterName the name of the parameter
 @param x the Java input stream that contains the ASCII parameter value
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support this method
 @since 1.6
 */
- (void)setAsciiStreamWithNSString:(NSString *)parameterName
             withJavaIoInputStream:(JavaIoInputStream *)x;

/*!
 @brief Sets the designated parameter to the given input stream.
 When a very large binary value is input to a <code>LONGVARBINARY</code>
  parameter, it may be more practical to send it via a 
 <code>java.io.InputStream</code> object. The data will be read from the
  stream as needed until end-of-file is reached. 
 <P><B>Note:</B> This stream object can either be a standard
  Java stream object or your own subclass that implements the
  standard interface. 
 <P><B>Note:</B> Consult your JDBC driver documentation to determine if
  it might be more efficient to use a version of 
 <code>setBinaryStream</code> which takes a length parameter.
 @param parameterName the name of the parameter
 @param x the java input stream which contains the binary parameter value
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support this method
 @since 1.6
 */
- (void)setBinaryStreamWithNSString:(NSString *)parameterName
              withJavaIoInputStream:(JavaIoInputStream *)x;

/*!
 @brief Sets the designated parameter to the given <code>Reader</code>
  object.
 When a very large UNICODE value is input to a <code>LONGVARCHAR</code>
  parameter, it may be more practical to send it via a 
 <code>java.io.Reader</code> object. The data will be read from the stream
  as needed until end-of-file is reached.  The JDBC driver will
  do any necessary conversion from UNICODE to the database char format. 
 <P><B>Note:</B> This stream object can either be a standard
  Java stream object or your own subclass that implements the
  standard interface. 
 <P><B>Note:</B> Consult your JDBC driver documentation to determine if
  it might be more efficient to use a version of 
 <code>setCharacterStream</code> which takes a length parameter.
 @param parameterName the name of the parameter
 @param reader the  <code> java.io.Reader </code>  object that contains the
          Unicode data
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support this method
 @since 1.6
 */
- (void)setCharacterStreamWithNSString:(NSString *)parameterName
                      withJavaIoReader:(JavaIoReader *)reader;

/*!
 @brief Sets the designated parameter to a <code>Reader</code> object.The
  <code>Reader</code> reads the data till end-of-file is reached.
 The
  driver does the necessary conversion from Java character format to
  the national character set in the database. 
 <P><B>Note:</B> This stream object can either be a standard
  Java stream object or your own subclass that implements the
  standard interface. 
 <P><B>Note:</B> Consult your JDBC driver documentation to determine if
  it might be more efficient to use a version of 
 <code>setNCharacterStream</code> which takes a length parameter.
 @param parameterName the name of the parameter
 @param value the parameter value
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if the driver does not support national
          character sets;  if the driver can detect that a data conversion
   error could occur; if a database access error occurs; or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support this method
 @since 1.6
 */
- (void)setNCharacterStreamWithNSString:(NSString *)parameterName
                       withJavaIoReader:(JavaIoReader *)value;

/*!
 @brief Sets the designated parameter to a <code>Reader</code> object.
 This method differs from the <code>setCharacterStream (int, Reader)</code> method
  because it informs the driver that the parameter value should be sent to
  the server as a <code>CLOB</code>.  When the <code>setCharacterStream</code> method is used, the
  driver may have to do extra work to determine whether the parameter
  data should be send to the server as a <code>LONGVARCHAR</code> or a <code>CLOB</code>
  
 <P><B>Note:</B> Consult your JDBC driver documentation to determine if
  it might be more efficient to use a version of 
 <code>setClob</code> which takes a length parameter.
 @param parameterName the name of the parameter
 @param reader An object that contains the data to set the parameter value to.
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or this method is called on
  a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support this method
 @since 1.6
 */
- (void)setClobWithNSString:(NSString *)parameterName
           withJavaIoReader:(JavaIoReader *)reader;

/*!
 @brief Sets the designated parameter to a <code>InputStream</code> object.
 This method differs from the <code>setBinaryStream (int, InputStream)</code>
  method because it informs the driver that the parameter value should be
  sent to the server as a <code>BLOB</code>.  When the <code>setBinaryStream</code> method is used,
  the driver may have to do extra work to determine whether the parameter
  data should be send to the server as a <code>LONGVARBINARY</code> or a <code>BLOB</code>
  
 <P><B>Note:</B> Consult your JDBC driver documentation to determine if
  it might be more efficient to use a version of 
 <code>setBlob</code> which takes a length parameter.
 @param parameterName the name of the parameter
 @param inputStream An object that contains the data to set the parameter  value to.
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support this method
 @since 1.6
 */
- (void)setBlobWithNSString:(NSString *)parameterName
      withJavaIoInputStream:(JavaIoInputStream *)inputStream;

/*!
 @brief Sets the designated parameter to a <code>Reader</code> object.
 This method differs from the <code>setCharacterStream (int, Reader)</code> method
  because it informs the driver that the parameter value should be sent to
  the server as a <code>NCLOB</code>.  When the <code>setCharacterStream</code> method is used, the
  driver may have to do extra work to determine whether the parameter
  data should be send to the server as a <code>LONGNVARCHAR</code> or a <code>NCLOB</code>
  <P><B>Note:</B> Consult your JDBC driver documentation to determine if
  it might be more efficient to use a version of 
 <code>setNClob</code> which takes a length parameter.
 @param parameterName the name of the parameter
 @param reader An object that contains the data to set the parameter value to.
 @throw SQLExceptionif parameterName does not correspond to a named
  parameter; if the driver does not support national character sets;
  if the driver can detect that a data conversion
   error could occur;  if a database access error occurs or
  this method is called on a closed <code>CallableStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support this method
 @since 1.6
 */
- (void)setNClobWithNSString:(NSString *)parameterName
            withJavaIoReader:(JavaIoReader *)reader;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSqlCallableStatement)

J2OBJC_TYPE_LITERAL_HEADER(JavaSqlCallableStatement)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSqlCallableStatement")
