//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/sql/DriverPropertyInfo.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSqlDriverPropertyInfo")
#ifdef RESTRICT_JavaSqlDriverPropertyInfo
#define INCLUDE_ALL_JavaSqlDriverPropertyInfo 0
#else
#define INCLUDE_ALL_JavaSqlDriverPropertyInfo 1
#endif
#undef RESTRICT_JavaSqlDriverPropertyInfo

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSqlDriverPropertyInfo_) && (INCLUDE_ALL_JavaSqlDriverPropertyInfo || defined(INCLUDE_JavaSqlDriverPropertyInfo))
#define JavaSqlDriverPropertyInfo_

@class IOSObjectArray;

/*!
 @brief <p>Driver properties for making a connection.
 The 
 <code>DriverPropertyInfo</code> class is of interest only to advanced programmers
  who need to interact with a Driver via the method 
 <code>getDriverProperties</code> to discover
  and supply properties for connections.
 */
@interface JavaSqlDriverPropertyInfo : NSObject {
 @public
  /*!
   @brief The name of the property.
   */
  NSString *name_;
  /*!
   @brief A brief description of the property, which may be null.
   */
  NSString *description__;
  /*!
   @brief The <code>required</code> field is <code>true</code> if a value must be
  supplied for this property
  during <code>Driver.connect</code> and <code>false</code> otherwise.
   */
  jboolean required_;
  /*!
   @brief The <code>value</code> field specifies the current value of
  the property, based on a combination of the information
  supplied to the method <code>getPropertyInfo</code>, the
  Java environment, and the driver-supplied default values.This field
  may be null if no value is known.
   */
  NSString *value_;
  /*!
   @brief An array of possible values if the value for the field 
 <code>DriverPropertyInfo.value</code> may be selected
  from a particular set of values; otherwise null.
   */
  IOSObjectArray *choices_;
}

#pragma mark Public

/*!
 @brief Constructs a <code>DriverPropertyInfo</code> object with a  given
  name and value.The <code>description</code> and <code>choices</code>
  are intialized to <code>null</code> and <code>required</code> is initialized
  to <code>false</code>.
 @param name the name of the property
 @param value the current value, which may be null
 */
- (instancetype __nonnull)initWithNSString:(NSString *)name
                              withNSString:(NSString *)value;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSqlDriverPropertyInfo)

J2OBJC_FIELD_SETTER(JavaSqlDriverPropertyInfo, name_, NSString *)
J2OBJC_FIELD_SETTER(JavaSqlDriverPropertyInfo, description__, NSString *)
J2OBJC_FIELD_SETTER(JavaSqlDriverPropertyInfo, value_, NSString *)
J2OBJC_FIELD_SETTER(JavaSqlDriverPropertyInfo, choices_, IOSObjectArray *)

FOUNDATION_EXPORT void JavaSqlDriverPropertyInfo_initWithNSString_withNSString_(JavaSqlDriverPropertyInfo *self, NSString *name, NSString *value);

FOUNDATION_EXPORT JavaSqlDriverPropertyInfo *new_JavaSqlDriverPropertyInfo_initWithNSString_withNSString_(NSString *name, NSString *value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSqlDriverPropertyInfo *create_JavaSqlDriverPropertyInfo_initWithNSString_withNSString_(NSString *name, NSString *value);

J2OBJC_TYPE_LITERAL_HEADER(JavaSqlDriverPropertyInfo)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSqlDriverPropertyInfo")
