//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/sql/PreparedStatement.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSqlPreparedStatement")
#ifdef RESTRICT_JavaSqlPreparedStatement
#define INCLUDE_ALL_JavaSqlPreparedStatement 0
#else
#define INCLUDE_ALL_JavaSqlPreparedStatement 1
#endif
#undef RESTRICT_JavaSqlPreparedStatement

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSqlPreparedStatement_) && (INCLUDE_ALL_JavaSqlPreparedStatement || defined(INCLUDE_JavaSqlPreparedStatement))
#define JavaSqlPreparedStatement_

#define RESTRICT_JavaSqlStatement 1
#define INCLUDE_JavaSqlStatement 1
#include "java/sql/Statement.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoReader;
@class JavaMathBigDecimal;
@class JavaNetURL;
@class JavaSqlDate;
@class JavaSqlTime;
@class JavaSqlTimestamp;
@class JavaUtilCalendar;
@protocol JavaSqlArray;
@protocol JavaSqlBlob;
@protocol JavaSqlClob;
@protocol JavaSqlNClob;
@protocol JavaSqlParameterMetaData;
@protocol JavaSqlRef;
@protocol JavaSqlResultSet;
@protocol JavaSqlResultSetMetaData;
@protocol JavaSqlRowId;
@protocol JavaSqlSQLXML;

/*!
 @brief An object that represents a precompiled SQL statement.
 <P>A SQL statement is precompiled and stored in a 
 <code>PreparedStatement</code> object. This object can then be used to
  efficiently execute this statement multiple times. 
 <P><B>Note:</B> The setter methods (<code>setShort</code>, <code>setString</code>,
  and so on) for setting IN parameter values
  must specify types that are compatible with the defined SQL type of
  the input parameter. For instance, if the IN parameter has SQL type 
 <code>INTEGER</code>, then the method <code>setInt</code> should be used. 
 <p>If arbitrary parameter type conversions are required, the method 
 <code>setObject</code> should be used with a target SQL type. 
 <P>
  In the following example of setting a parameter, <code>con</code> represents
  an active connection: 
 @code

    PreparedStatement pstmt = con.prepareStatement("UPDATE EMPLOYEES
                                      SET SALARY = ? WHERE ID = ?");
    pstmt.setBigDecimal(1, 153833.00)
    pstmt.setInt(2, 110592) 
  
@endcode
 - seealso: Connection#prepareStatement
 - seealso: ResultSet
 */
@protocol JavaSqlPreparedStatement < JavaSqlStatement, JavaObject >

/*!
 @brief Executes the SQL query in this <code>PreparedStatement</code> object
  and returns the <code>ResultSet</code> object generated by the query.
 @return a <code>ResultSet</code> object that contains the data produced by the
          query; never <code>null</code>
 @throw SQLExceptionif a database access error occurs;
  this method is called on a closed  <code>PreparedStatement</code> or the SQL
             statement does not return a <code>ResultSet</code> object
 @throw SQLTimeoutExceptionwhen the driver has determined that the
  timeout value that was specified by the <code>setQueryTimeout</code>
  method has been exceeded and has at least attempted to cancel
  the currently running <code>Statement</code>
 */
- (id<JavaSqlResultSet>)executeQuery;

/*!
 @brief Executes the SQL statement in this <code>PreparedStatement</code> object,
  which must be an SQL Data Manipulation Language (DML) statement, such as <code>INSERT</code>, <code>UPDATE</code> or 
 <code>DELETE</code>; or an SQL statement that returns nothing,
  such as a DDL statement.
 @return either (1) the row count for SQL Data Manipulation Language (DML) statements
          or (2) 0 for SQL statements that return nothing
 @throw SQLExceptionif a database access error occurs;
  this method is called on a closed  <code>PreparedStatement</code>
  or the SQL statement returns a <code>ResultSet</code> object
 @throw SQLTimeoutExceptionwhen the driver has determined that the
  timeout value that was specified by the <code>setQueryTimeout</code>
  method has been exceeded and has at least attempted to cancel
  the currently running <code>Statement</code>
 */
- (jint)executeUpdate;

/*!
 @brief Sets the designated parameter to SQL <code>NULL</code>.
 <P><B>Note:</B> You must specify the parameter's SQL type.
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @param sqlType the SQL type code defined in  <code> java.sql.Types </code>
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 @throw SQLFeatureNotSupportedExceptionif <code>sqlType</code> is
  a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
  <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
  <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
   <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
  or  <code>STRUCT</code> data type and the JDBC driver does not support
  this data type
 */
- (void)setNullWithInt:(jint)parameterIndex
               withInt:(jint)sqlType;

/*!
 @brief Sets the designated parameter to the given Java <code>boolean</code> value.
 The driver converts this
  to an SQL <code>BIT</code> or <code>BOOLEAN</code> value when it sends it to the database.
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @param x the parameter value
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement;
  if a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 */
- (void)setBooleanWithInt:(jint)parameterIndex
              withBoolean:(jboolean)x;

/*!
 @brief Sets the designated parameter to the given Java <code>byte</code> value.
 The driver converts this
  to an SQL <code>TINYINT</code> value when it sends it to the database.
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @param x the parameter value
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 */
- (void)setByteWithInt:(jint)parameterIndex
              withByte:(jbyte)x;

/*!
 @brief Sets the designated parameter to the given Java <code>short</code> value.
 The driver converts this
  to an SQL <code>SMALLINT</code> value when it sends it to the database.
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @param x the parameter value
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 */
- (void)setShortWithInt:(jint)parameterIndex
              withShort:(jshort)x;

/*!
 @brief Sets the designated parameter to the given Java <code>int</code> value.
 The driver converts this
  to an SQL <code>INTEGER</code> value when it sends it to the database.
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @param x the parameter value
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 */
- (void)setIntWithInt:(jint)parameterIndex
              withInt:(jint)x;

/*!
 @brief Sets the designated parameter to the given Java <code>long</code> value.
 The driver converts this
  to an SQL <code>BIGINT</code> value when it sends it to the database.
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @param x the parameter value
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 */
- (void)setLongWithInt:(jint)parameterIndex
              withLong:(jlong)x;

/*!
 @brief Sets the designated parameter to the given Java <code>float</code> value.
 The driver converts this
  to an SQL <code>REAL</code> value when it sends it to the database.
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @param x the parameter value
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 */
- (void)setFloatWithInt:(jint)parameterIndex
              withFloat:(jfloat)x;

/*!
 @brief Sets the designated parameter to the given Java <code>double</code> value.
 The driver converts this
  to an SQL <code>DOUBLE</code> value when it sends it to the database.
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @param x the parameter value
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 */
- (void)setDoubleWithInt:(jint)parameterIndex
              withDouble:(jdouble)x;

/*!
 @brief Sets the designated parameter to the given <code>java.math.BigDecimal</code> value.
 The driver converts this to an SQL <code>NUMERIC</code> value when
  it sends it to the database.
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @param x the parameter value
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 */
- (void)setBigDecimalWithInt:(jint)parameterIndex
      withJavaMathBigDecimal:(JavaMathBigDecimal *)x;

/*!
 @brief Sets the designated parameter to the given Java <code>String</code> value.
 The driver converts this
  to an SQL <code>VARCHAR</code> or <code>LONGVARCHAR</code> value
  (depending on the argument's
  size relative to the driver's limits on <code>VARCHAR</code> values)
  when it sends it to the database.
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @param x the parameter value
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 */
- (void)setStringWithInt:(jint)parameterIndex
            withNSString:(NSString *)x;

/*!
 @brief Sets the designated parameter to the given Java array of bytes.The driver converts
  this to an SQL <code>VARBINARY</code> or <code>LONGVARBINARY</code>
  (depending on the argument's size relative to the driver's limits on 
 <code>VARBINARY</code> values) when it sends it to the database.
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @param x the parameter value
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 */
- (void)setBytesWithInt:(jint)parameterIndex
          withByteArray:(IOSByteArray *)x;

/*!
 @brief Sets the designated parameter to the given <code>java.sql.Date</code> value
  using the default time zone of the virtual machine that is running
  the application.
 The driver converts this
  to an SQL <code>DATE</code> value when it sends it to the database.
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @param x the parameter value
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 */
- (void)setDateWithInt:(jint)parameterIndex
       withJavaSqlDate:(JavaSqlDate *)x;

/*!
 @brief Sets the designated parameter to the given <code>java.sql.Time</code> value.
 The driver converts this
  to an SQL <code>TIME</code> value when it sends it to the database.
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @param x the parameter value
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 */
- (void)setTimeWithInt:(jint)parameterIndex
       withJavaSqlTime:(JavaSqlTime *)x;

/*!
 @brief Sets the designated parameter to the given <code>java.sql.Timestamp</code> value.
 The driver
  converts this to an SQL <code>TIMESTAMP</code> value when it sends it to the
  database.
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @param x the parameter value
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 */
- (void)setTimestampWithInt:(jint)parameterIndex
       withJavaSqlTimestamp:(JavaSqlTimestamp *)x;

/*!
 @brief Sets the designated parameter to the given input stream, which will have
  the specified number of bytes.
 When a very large ASCII value is input to a <code>LONGVARCHAR</code>
  parameter, it may be more practical to send it via a 
 <code>java.io.InputStream</code>. Data will be read from the stream
  as needed until end-of-file is reached.  The JDBC driver will
  do any necessary conversion from ASCII to the database char format. 
 <P><B>Note:</B> This stream object can either be a standard
  Java stream object or your own subclass that implements the
  standard interface.
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @param x the Java input stream that contains the ASCII parameter value
 @param length the number of bytes in the stream
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 */
- (void)setAsciiStreamWithInt:(jint)parameterIndex
        withJavaIoInputStream:(JavaIoInputStream *)x
                      withInt:(jint)length;

/*!
 @brief Sets the designated parameter to the given input stream, which
  will have the specified number of bytes.
 When a very large Unicode value is input to a <code>LONGVARCHAR</code>
  parameter, it may be more practical to send it via a 
 <code>java.io.InputStream</code> object. The data will be read from the
  stream as needed until end-of-file is reached.  The JDBC driver will
  do any necessary conversion from Unicode to the database char format.
 The byte format of the Unicode stream must be a Java UTF-8, as defined in the
 Java Virtual Machine Specification. 
 <P><B>Note:</B> This stream object can either be a standard
  Java stream object or your own subclass that implements the
  standard interface.
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @param x a  <code> java.io.InputStream </code>  object that contains the
          Unicode parameter value
 @param length the number of bytes in the stream
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 */
- (void)setUnicodeStreamWithInt:(jint)parameterIndex
          withJavaIoInputStream:(JavaIoInputStream *)x
                        withInt:(jint)length __attribute__((deprecated));

/*!
 @brief Sets the designated parameter to the given input stream, which will have
  the specified number of bytes.
 When a very large binary value is input to a <code>LONGVARBINARY</code>
  parameter, it may be more practical to send it via a 
 <code>java.io.InputStream</code> object. The data will be read from the
  stream as needed until end-of-file is reached. 
 <P><B>Note:</B> This stream object can either be a standard
  Java stream object or your own subclass that implements the
  standard interface.
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @param x the java input stream which contains the binary parameter value
 @param length the number of bytes in the stream
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 */
- (void)setBinaryStreamWithInt:(jint)parameterIndex
         withJavaIoInputStream:(JavaIoInputStream *)x
                       withInt:(jint)length;

/*!
 @brief Clears the current parameter values immediately.
 <P>In general, parameter values remain in force for repeated use of a
  statement. Setting a parameter value automatically clears its
  previous value.  However, in some cases it is useful to immediately
  release the resources used by the current parameter values; this can
  be done by calling the method <code>clearParameters</code>.
 @throw SQLExceptionif a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 */
- (void)clearParameters;

/*!
 @brief Sets the value of the designated parameter with the given object.
 This method is like the method <code>setObject</code>
  above, except that it assumes a scale of zero.
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @param x the object containing the input parameter value
 @param targetSqlType the SQL type (as defined in java.sql.Types) to be                       sent to the database
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 @throw SQLFeatureNotSupportedExceptionif <code>targetSqlType</code> is
  a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
  <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
  <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
   <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
  or  <code>STRUCT</code> data type and the JDBC driver does not support
  this data type
 - seealso: Types
 */
- (void)setObjectWithInt:(jint)parameterIndex
                  withId:(id)x
                 withInt:(jint)targetSqlType;

/*!
 @brief <p>Sets the value of the designated parameter using the given object.
 The second parameter must be of type <code>Object</code>; therefore, the 
 <code>java.lang</code> equivalent objects should be used for built-in types. 
 <p>The JDBC specification specifies a standard mapping from
  Java <code>Object</code> types to SQL types.  The given argument
  will be converted to the corresponding SQL type before being
  sent to the database. 
 <p>Note that this method may be used to pass datatabase-
  specific abstract data types, by using a driver-specific Java
  type.
  If the object is of a class implementing the interface <code>SQLData</code>,
  the JDBC driver should call the method <code>SQLData.writeSQL</code>
  to write it to the SQL data stream.
  If, on the other hand, the object is of a class implementing 
 <code>Ref</code>, <code>Blob</code>, <code>Clob</code>,  <code>NClob</code>,
   <code>Struct</code>, <code>java.net.URL</code>, <code>RowId</code>, <code>SQLXML</code>
  or <code>Array</code>, the driver should pass it to the database as a
  value of the corresponding SQL type. 
 <P>
 <b>Note:</b> Not all databases allow for a non-typed Null to be sent to
  the backend. For maximum portability, the <code>setNull</code> or the 
 <code>setObject(int parameterIndex, Object x, int sqlType)</code>
  method should be used
  instead of <code>setObject(int parameterIndex, Object x)</code>.
 <p>
  <b>Note:</b> This method throws an exception if there is an ambiguity, for example, if the
  object is of a class implementing more than one of the interfaces named above.
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @param x the object containing the input parameter value
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs;
   this method is called on a closed <code>PreparedStatement</code>
  or the type of the given object is ambiguous
 */
- (void)setObjectWithInt:(jint)parameterIndex
                  withId:(id)x;

/*!
 @brief Executes the SQL statement in this <code>PreparedStatement</code> object,
  which may be any kind of SQL statement.
 Some prepared statements return multiple results; the <code>execute</code>
  method handles these complex statements as well as the simpler
  form of statements handled by the methods <code>executeQuery</code>
  and <code>executeUpdate</code>.
  <P>
  The <code>execute</code> method returns a <code>boolean</code> to
  indicate the form of the first result.  You must call either the method 
 <code>getResultSet</code> or <code>getUpdateCount</code>
  to retrieve the result; you must call <code>getMoreResults</code> to
  move to any subsequent result(s).
 @return <code>true</code> if the first result is a <code>ResultSet</code>
          object; <code>false</code> if the first result is an update
          count or there is no result
 @throw SQLExceptionif a database access error occurs;
  this method is called on a closed <code>PreparedStatement</code>
  or an argument is supplied to this method
 @throw SQLTimeoutExceptionwhen the driver has determined that the
  timeout value that was specified by the <code>setQueryTimeout</code>
  method has been exceeded and has at least attempted to cancel
  the currently running <code>Statement</code>
 - seealso: Statement#execute
 - seealso: Statement#getResultSet
 - seealso: Statement#getUpdateCount
 - seealso: Statement#getMoreResults
 */
- (jboolean)execute;

/*!
 @brief Adds a set of parameters to this <code>PreparedStatement</code>
  object's batch of commands.
 @throw SQLExceptionif a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 - seealso: Statement#addBatch
 @since 1.2
 */
- (void)addBatch;

/*!
 @brief Sets the designated parameter to the given <code>Reader</code>
  object, which is the given number of characters long.
 When a very large UNICODE value is input to a <code>LONGVARCHAR</code>
  parameter, it may be more practical to send it via a 
 <code>java.io.Reader</code> object. The data will be read from the stream
  as needed until end-of-file is reached.  The JDBC driver will
  do any necessary conversion from UNICODE to the database char format. 
 <P><B>Note:</B> This stream object can either be a standard
  Java stream object or your own subclass that implements the
  standard interface.
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @param reader the  <code> java.io.Reader </code>  object that contains the
          Unicode data
 @param length the number of characters in the stream
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 @since 1.2
 */
- (void)setCharacterStreamWithInt:(jint)parameterIndex
                 withJavaIoReader:(JavaIoReader *)reader
                          withInt:(jint)length;

/*!
 @brief Sets the designated parameter to the given
   <code>REF(&lt;structured-type&gt;)</code> value.
 The driver converts this to an SQL <code>REF</code> value when it
  sends it to the database.
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @param x an SQL  <code> REF </code>  value
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support this method
 @since 1.2
 */
- (void)setRefWithInt:(jint)parameterIndex
       withJavaSqlRef:(id<JavaSqlRef>)x;

/*!
 @brief Sets the designated parameter to the given <code>java.sql.Blob</code> object.
 The driver converts this to an SQL <code>BLOB</code> value when it
  sends it to the database.
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @param x a  <code> Blob </code>  object that maps an SQL  <code> BLOB </code>
   value
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support this method
 @since 1.2
 */
- (void)setBlobWithInt:(jint)parameterIndex
       withJavaSqlBlob:(id<JavaSqlBlob>)x;

/*!
 @brief Sets the designated parameter to the given <code>java.sql.Clob</code> object.
 The driver converts this to an SQL <code>CLOB</code> value when it
  sends it to the database.
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @param x a  <code> Clob </code>  object that maps an SQL  <code> CLOB </code>
   value
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support this method
 @since 1.2
 */
- (void)setClobWithInt:(jint)parameterIndex
       withJavaSqlClob:(id<JavaSqlClob>)x;

/*!
 @brief Sets the designated parameter to the given <code>java.sql.Array</code> object.
 The driver converts this to an SQL <code>ARRAY</code> value when it
  sends it to the database.
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @param x an  <code> Array </code>  object that maps an SQL  <code> ARRAY </code>
   value
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support this method
 @since 1.2
 */
- (void)setArrayWithInt:(jint)parameterIndex
       withJavaSqlArray:(id<JavaSqlArray>)x;

/*!
 @brief Retrieves a <code>ResultSetMetaData</code> object that contains
  information about the columns of the <code>ResultSet</code> object
  that will be returned when this <code>PreparedStatement</code> object
  is executed.
 <P>
  Because a <code>PreparedStatement</code> object is precompiled, it is
  possible to know about the <code>ResultSet</code> object that it will
  return without having to execute it.  Consequently, it is possible
  to invoke the method <code>getMetaData</code> on a 
 <code>PreparedStatement</code> object rather than waiting to execute
  it and then invoking the <code>ResultSet.getMetaData</code> method
  on the <code>ResultSet</code> object that is returned. 
 <P>
  <B>NOTE:</B> Using this method may be expensive for some drivers due
  to the lack of underlying DBMS support.
 @return the description of a <code>ResultSet</code> object's columns or
          <code>null</code> if the driver cannot return a
          <code>ResultSetMetaData</code> object
 @throw SQLExceptionif a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.2
 */
- (id<JavaSqlResultSetMetaData>)getMetaData;

/*!
 @brief Sets the designated parameter to the given <code>java.sql.Date</code> value,
  using the given <code>Calendar</code> object.The driver uses
  the <code>Calendar</code> object to construct an SQL <code>DATE</code> value,
  which the driver then sends to the database.
 With
  a <code>Calendar</code> object, the driver can calculate the date
  taking into account a custom timezone.  If no 
 <code>Calendar</code> object is specified, the driver uses the default
  timezone, which is that of the virtual machine running the application.
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @param x the parameter value
 @param cal the  <code> Calendar </code>  object the driver will use
              to construct the date
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 @since 1.2
 */
- (void)setDateWithInt:(jint)parameterIndex
       withJavaSqlDate:(JavaSqlDate *)x
  withJavaUtilCalendar:(JavaUtilCalendar *)cal;

/*!
 @brief Sets the designated parameter to the given <code>java.sql.Time</code> value,
  using the given <code>Calendar</code> object.The driver uses
  the <code>Calendar</code> object to construct an SQL <code>TIME</code> value,
  which the driver then sends to the database.
 With
  a <code>Calendar</code> object, the driver can calculate the time
  taking into account a custom timezone.  If no 
 <code>Calendar</code> object is specified, the driver uses the default
  timezone, which is that of the virtual machine running the application.
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @param x the parameter value
 @param cal the  <code> Calendar </code>  object the driver will use
              to construct the time
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 @since 1.2
 */
- (void)setTimeWithInt:(jint)parameterIndex
       withJavaSqlTime:(JavaSqlTime *)x
  withJavaUtilCalendar:(JavaUtilCalendar *)cal;

/*!
 @brief Sets the designated parameter to the given <code>java.sql.Timestamp</code> value,
  using the given <code>Calendar</code> object.The driver uses
  the <code>Calendar</code> object to construct an SQL <code>TIMESTAMP</code> value,
  which the driver then sends to the database.
 With a  
 <code>Calendar</code> object, the driver can calculate the timestamp
  taking into account a custom timezone.  If no 
 <code>Calendar</code> object is specified, the driver uses the default
  timezone, which is that of the virtual machine running the application.
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @param x the parameter value
 @param cal the  <code> Calendar </code>  object the driver will use
              to construct the timestamp
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 @since 1.2
 */
- (void)setTimestampWithInt:(jint)parameterIndex
       withJavaSqlTimestamp:(JavaSqlTimestamp *)x
       withJavaUtilCalendar:(JavaUtilCalendar *)cal;

/*!
 @brief Sets the designated parameter to SQL <code>NULL</code>.
 This version of the method <code>setNull</code> should
  be used for user-defined types and REF type parameters.  Examples
  of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and
  named array types. 
 <P><B>Note:</B> To be portable, applications must give the
  SQL type code and the fully-qualified SQL type name when specifying
  a NULL user-defined or REF parameter.  In the case of a user-defined type
  the name is the type name of the parameter itself.  For a REF
  parameter, the name is the type name of the referenced type.  If
  a JDBC driver does not need the type code or type name information,
  it may ignore it.
  Although it is intended for user-defined and Ref parameters,
  this method may be used to set a null parameter of any JDBC type.
  If the parameter does not have a user-defined or REF type, the given
  typeName is ignored.
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @param sqlType a value from  <code> java.sql.Types </code>
 @param typeName the fully-qualified name of an SQL user-defined type;   ignored if the parameter is not a user-defined type or REF
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 @throw SQLFeatureNotSupportedExceptionif <code>sqlType</code> is
  a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
  <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
  <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
   <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
  or  <code>STRUCT</code> data type and the JDBC driver does not support
  this data type or if the JDBC driver does not support this method
 @since 1.2
 */
- (void)setNullWithInt:(jint)parameterIndex
               withInt:(jint)sqlType
          withNSString:(NSString *)typeName;

/*!
 @brief Sets the designated parameter to the given <code>java.net.URL</code> value.
 The driver converts this to an SQL <code>DATALINK</code> value
  when it sends it to the database.
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @param x the  <code> java.net.URL </code>  object to be set
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support this method
 @since 1.4
 */
- (void)setURLWithInt:(jint)parameterIndex
       withJavaNetURL:(JavaNetURL *)x;

/*!
 @brief Retrieves the number, types and properties of this 
 <code>PreparedStatement</code> object's parameters.
 @return a <code>ParameterMetaData</code> object that contains information
          about the number, types and properties for each
   parameter marker of this <code>PreparedStatement</code> object
 @throw SQLExceptionif a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 - seealso: ParameterMetaData
 @since 1.4
 */
- (id<JavaSqlParameterMetaData>)getParameterMetaData;

/*!
 @brief Sets the designated parameter to the given <code>java.sql.RowId</code> object.The
  driver converts this to a SQL <code>ROWID</code> value when it sends it
  to the database
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @param x the parameter value
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support this method
 @since 1.6
 */
- (void)setRowIdWithInt:(jint)parameterIndex
       withJavaSqlRowId:(id<JavaSqlRowId>)x;

/*!
 @brief Sets the designated paramter to the given <code>String</code> object.
 The driver converts this to a SQL <code>NCHAR</code> or 
 <code>NVARCHAR</code> or <code>LONGNVARCHAR</code> value
  (depending on the argument's
  size relative to the driver's limits on <code>NVARCHAR</code> values)
  when it sends it to the database.
 @param parameterIndex of the first parameter is 1, the second is 2, ...
 @param value the parameter value
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if the driver does not support national
          character sets;  if the driver can detect that a data conversion
   error could occur; if a database access error occurs; or
  this method is called on a closed <code>PreparedStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support this method
 @since 1.6
 */
- (void)setNStringWithInt:(jint)parameterIndex
             withNSString:(NSString *)value;

/*!
 @brief Sets the designated parameter to a <code>Reader</code> object.The
  <code>Reader</code> reads the data till end-of-file is reached.
 The
  driver does the necessary conversion from Java character format to
  the national character set in the database.
 @param parameterIndex of the first parameter is 1, the second is 2, ...
 @param value the parameter value
 @param length the number of characters in the parameter data.
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if the driver does not support national
          character sets;  if the driver can detect that a data conversion
   error could occur; if a database access error occurs; or
  this method is called on a closed <code>PreparedStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support this method
 @since 1.6
 */
- (void)setNCharacterStreamWithInt:(jint)parameterIndex
                  withJavaIoReader:(JavaIoReader *)value
                          withLong:(jlong)length;

/*!
 @brief Sets the designated parameter to a <code>java.sql.NClob</code> object.The driver converts this to a
  SQL <code>NCLOB</code> value when it sends it to the database.
 @param parameterIndex of the first parameter is 1, the second is 2, ...
 @param value the parameter value
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if the driver does not support national
          character sets;  if the driver can detect that a data conversion
   error could occur; if a database access error occurs; or
  this method is called on a closed <code>PreparedStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support this method
 @since 1.6
 */
- (void)setNClobWithInt:(jint)parameterIndex
       withJavaSqlNClob:(id<JavaSqlNClob>)value;

/*!
 @brief Sets the designated parameter to a <code>Reader</code> object.The reader must contain  the number
  of characters specified by length otherwise a <code>SQLException</code> will be
  generated when the <code>PreparedStatement</code> is executed.
 This method differs from the <code>setCharacterStream (int, Reader, int)</code> method
  because it informs the driver that the parameter value should be sent to
  the server as a <code>CLOB</code>.  When the <code>setCharacterStream</code> method is used, the
  driver may have to do extra work to determine whether the parameter
  data should be sent to the server as a <code>LONGVARCHAR</code> or a <code>CLOB</code>
 @param parameterIndex index of the first parameter is 1, the second is 2, ...
 @param reader An object that contains the data to set the parameter value to.
 @param length the number of characters in the parameter data.
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs; this method is called on
  a closed <code>PreparedStatement</code> or if the length specified is less than zero.
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support this method
 @since 1.6
 */
- (void)setClobWithInt:(jint)parameterIndex
      withJavaIoReader:(JavaIoReader *)reader
              withLong:(jlong)length;

/*!
 @brief Sets the designated parameter to a <code>InputStream</code> object.The inputstream must contain  the number
  of characters specified by length otherwise a <code>SQLException</code> will be
  generated when the <code>PreparedStatement</code> is executed.
 This method differs from the <code>setBinaryStream (int, InputStream, int)</code>
  method because it informs the driver that the parameter value should be
  sent to the server as a <code>BLOB</code>.  When the <code>setBinaryStream</code> method is used,
  the driver may have to do extra work to determine whether the parameter
  data should be sent to the server as a <code>LONGVARBINARY</code> or a <code>BLOB</code>
 @param parameterIndex index of the first parameter is 1,  the second is 2, ...
 @param inputStream An object that contains the data to set the parameter  value to.
 @param length the number of bytes in the parameter data.
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs;
  this method is called on a closed <code>PreparedStatement</code>;
   if the length specified
  is less than zero or if the number of bytes in the inputstream does not match
  the specfied length.
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support this method
 @since 1.6
 */
- (void)setBlobWithInt:(jint)parameterIndex
 withJavaIoInputStream:(JavaIoInputStream *)inputStream
              withLong:(jlong)length;

/*!
 @brief Sets the designated parameter to a <code>Reader</code> object.The reader must contain  the number
  of characters specified by length otherwise a <code>SQLException</code> will be
  generated when the <code>PreparedStatement</code> is executed.
 This method differs from the <code>setCharacterStream (int, Reader, int)</code> method
  because it informs the driver that the parameter value should be sent to
  the server as a <code>NCLOB</code>.  When the <code>setCharacterStream</code> method is used, the
  driver may have to do extra work to determine whether the parameter
  data should be sent to the server as a <code>LONGNVARCHAR</code> or a <code>NCLOB</code>
 @param parameterIndex index of the first parameter is 1, the second is 2, ...
 @param reader An object that contains the data to set the parameter value to.
 @param length the number of characters in the parameter data.
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if the length specified is less than zero;
  if the driver does not support national character sets;
  if the driver can detect that a data conversion
   error could occur;  if a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support this method
 @since 1.6
 */
- (void)setNClobWithInt:(jint)parameterIndex
       withJavaIoReader:(JavaIoReader *)reader
               withLong:(jlong)length;

/*!
 @brief Sets the designated parameter to the given <code>java.sql.SQLXML</code> object.
 The driver converts this to an
  SQL <code>XML</code> value when it sends it to the database. 
 <p>
 @param parameterIndex index of the first parameter is 1, the second is 2, ...
 @param xmlObject a  <code> SQLXML </code>  object that maps an SQL  <code> XML </code>
   value
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs;
   this method is called on a closed <code>PreparedStatement</code>
  or the <code>java.xml.transform.Result</code>,
   <code>Writer</code> or <code>OutputStream</code> has not been closed for
  the <code>SQLXML</code> object
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support this method
 @since 1.6
 */
- (void)setSQLXMLWithInt:(jint)parameterIndex
       withJavaSqlSQLXML:(id<JavaSqlSQLXML>)xmlObject;

/*!
 @brief <p>Sets the value of the designated parameter with the given object.
 The second
  argument must be an object type; for integral values, the 
 <code>java.lang</code> equivalent objects should be used.
  If the second argument is an <code>InputStream</code> then the stream must contain
  the number of bytes specified by scaleOrLength.  If the second argument is a 
 <code>Reader</code> then the reader must contain the number of characters specified
  by scaleOrLength. If these conditions are not true the driver will generate a 
 <code>SQLException</code> when the prepared statement is executed. 
 <p>The given Java object will be converted to the given targetSqlType
  before being sent to the database.
  If the object has a custom mapping (is of a class implementing the
  interface <code>SQLData</code>),
  the JDBC driver should call the method <code>SQLData.writeSQL</code> to
  write it to the SQL data stream.
  If, on the other hand, the object is of a class implementing 
 <code>Ref</code>, <code>Blob</code>, <code>Clob</code>,  <code>NClob</code>,
   <code>Struct</code>, <code>java.net.URL</code>,
  or <code>Array</code>, the driver should pass it to the database as a
  value of the corresponding SQL type. 
 <p>Note that this method may be used to pass database-specific
  abstract data types.
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @param x the object containing the input parameter value
 @param targetSqlType the SQL type (as defined in java.sql.Types) to be  sent to the database. The scale argument may further qualify this type.
 @param scaleOrLength for  <code> java.sql.Types.DECIMAL </code>
            or  <code> java.sql.Types.NUMERIC types </code> ,
            this is the number of digits after the decimal point. For           Java Object types 
  <code> InputStream </code>  and  <code> Reader </code> ,           this is the length
            of the data in the stream or reader.  For all other types,
            this value will be ignored.
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs;
  this method is called on a closed <code>PreparedStatement</code> or
             if the Java Object specified by x is an InputStream
             or Reader object and the value of the scale parameter is less
             than zero
 @throw SQLFeatureNotSupportedExceptionif <code>targetSqlType</code> is
  a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
  <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
  <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
   <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
  or  <code>STRUCT</code> data type and the JDBC driver does not support
  this data type
 - seealso: Types
 @since 1.6
 */
- (void)setObjectWithInt:(jint)parameterIndex
                  withId:(id)x
                 withInt:(jint)targetSqlType
                 withInt:(jint)scaleOrLength;

/*!
 @brief Sets the designated parameter to the given input stream, which will have
  the specified number of bytes.
 When a very large ASCII value is input to a <code>LONGVARCHAR</code>
  parameter, it may be more practical to send it via a 
 <code>java.io.InputStream</code>. Data will be read from the stream
  as needed until end-of-file is reached.  The JDBC driver will
  do any necessary conversion from ASCII to the database char format. 
 <P><B>Note:</B> This stream object can either be a standard
  Java stream object or your own subclass that implements the
  standard interface.
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @param x the Java input stream that contains the ASCII parameter value
 @param length the number of bytes in the stream
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 @since 1.6
 */
- (void)setAsciiStreamWithInt:(jint)parameterIndex
        withJavaIoInputStream:(JavaIoInputStream *)x
                     withLong:(jlong)length;

/*!
 @brief Sets the designated parameter to the given input stream, which will have
  the specified number of bytes.
 When a very large binary value is input to a <code>LONGVARBINARY</code>
  parameter, it may be more practical to send it via a 
 <code>java.io.InputStream</code> object. The data will be read from the
  stream as needed until end-of-file is reached. 
 <P><B>Note:</B> This stream object can either be a standard
  Java stream object or your own subclass that implements the
  standard interface.
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @param x the java input stream which contains the binary parameter value
 @param length the number of bytes in the stream
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 @since 1.6
 */
- (void)setBinaryStreamWithInt:(jint)parameterIndex
         withJavaIoInputStream:(JavaIoInputStream *)x
                      withLong:(jlong)length;

/*!
 @brief Sets the designated parameter to the given <code>Reader</code>
  object, which is the given number of characters long.
 When a very large UNICODE value is input to a <code>LONGVARCHAR</code>
  parameter, it may be more practical to send it via a 
 <code>java.io.Reader</code> object. The data will be read from the stream
  as needed until end-of-file is reached.  The JDBC driver will
  do any necessary conversion from UNICODE to the database char format. 
 <P><B>Note:</B> This stream object can either be a standard
  Java stream object or your own subclass that implements the
  standard interface.
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @param reader the  <code> java.io.Reader </code>  object that contains the
          Unicode data
 @param length the number of characters in the stream
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 @since 1.6
 */
- (void)setCharacterStreamWithInt:(jint)parameterIndex
                 withJavaIoReader:(JavaIoReader *)reader
                         withLong:(jlong)length;

/*!
 @brief Sets the designated parameter to the given input stream.
 When a very large ASCII value is input to a <code>LONGVARCHAR</code>
  parameter, it may be more practical to send it via a 
 <code>java.io.InputStream</code>. Data will be read from the stream
  as needed until end-of-file is reached.  The JDBC driver will
  do any necessary conversion from ASCII to the database char format. 
 <P><B>Note:</B> This stream object can either be a standard
  Java stream object or your own subclass that implements the
  standard interface. 
 <P><B>Note:</B> Consult your JDBC driver documentation to determine if
  it might be more efficient to use a version of 
 <code>setAsciiStream</code> which takes a length parameter.
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @param x the Java input stream that contains the ASCII parameter value
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support this method
 @since 1.6
 */
- (void)setAsciiStreamWithInt:(jint)parameterIndex
        withJavaIoInputStream:(JavaIoInputStream *)x;

/*!
 @brief Sets the designated parameter to the given input stream.
 When a very large binary value is input to a <code>LONGVARBINARY</code>
  parameter, it may be more practical to send it via a 
 <code>java.io.InputStream</code> object. The data will be read from the
  stream as needed until end-of-file is reached. 
 <P><B>Note:</B> This stream object can either be a standard
  Java stream object or your own subclass that implements the
  standard interface. 
 <P><B>Note:</B> Consult your JDBC driver documentation to determine if
  it might be more efficient to use a version of 
 <code>setBinaryStream</code> which takes a length parameter.
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @param x the java input stream which contains the binary parameter value
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support this method
 @since 1.6
 */
- (void)setBinaryStreamWithInt:(jint)parameterIndex
         withJavaIoInputStream:(JavaIoInputStream *)x;

/*!
 @brief Sets the designated parameter to the given <code>Reader</code>
  object.
 When a very large UNICODE value is input to a <code>LONGVARCHAR</code>
  parameter, it may be more practical to send it via a 
 <code>java.io.Reader</code> object. The data will be read from the stream
  as needed until end-of-file is reached.  The JDBC driver will
  do any necessary conversion from UNICODE to the database char format. 
 <P><B>Note:</B> This stream object can either be a standard
  Java stream object or your own subclass that implements the
  standard interface. 
 <P><B>Note:</B> Consult your JDBC driver documentation to determine if
  it might be more efficient to use a version of 
 <code>setCharacterStream</code> which takes a length parameter.
 @param parameterIndex the first parameter is 1, the second is 2, ...
 @param reader the  <code> java.io.Reader </code>  object that contains the
          Unicode data
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support this method
 @since 1.6
 */
- (void)setCharacterStreamWithInt:(jint)parameterIndex
                 withJavaIoReader:(JavaIoReader *)reader;

/*!
 @brief Sets the designated parameter to a <code>Reader</code> object.The
  <code>Reader</code> reads the data till end-of-file is reached.
 The
  driver does the necessary conversion from Java character format to
  the national character set in the database. 
 <P><B>Note:</B> This stream object can either be a standard
  Java stream object or your own subclass that implements the
  standard interface. 
 <P><B>Note:</B> Consult your JDBC driver documentation to determine if
  it might be more efficient to use a version of 
 <code>setNCharacterStream</code> which takes a length parameter.
 @param parameterIndex of the first parameter is 1, the second is 2, ...
 @param value the parameter value
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if the driver does not support national
          character sets;  if the driver can detect that a data conversion
   error could occur; if a database access error occurs; or
  this method is called on a closed <code>PreparedStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support this method
 @since 1.6
 */
- (void)setNCharacterStreamWithInt:(jint)parameterIndex
                  withJavaIoReader:(JavaIoReader *)value;

/*!
 @brief Sets the designated parameter to a <code>Reader</code> object.
 This method differs from the <code>setCharacterStream (int, Reader)</code> method
  because it informs the driver that the parameter value should be sent to
  the server as a <code>CLOB</code>.  When the <code>setCharacterStream</code> method is used, the
  driver may have to do extra work to determine whether the parameter
  data should be sent to the server as a <code>LONGVARCHAR</code> or a <code>CLOB</code>
  
 <P><B>Note:</B> Consult your JDBC driver documentation to determine if
  it might be more efficient to use a version of 
 <code>setClob</code> which takes a length parameter.
 @param parameterIndex index of the first parameter is 1, the second is 2, ...
 @param reader An object that contains the data to set the parameter value to.
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs; this method is called on
  a closed <code>PreparedStatement</code>or if parameterIndex does not correspond to a parameter
  marker in the SQL statement
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support this method
 @since 1.6
 */
- (void)setClobWithInt:(jint)parameterIndex
      withJavaIoReader:(JavaIoReader *)reader;

/*!
 @brief Sets the designated parameter to a <code>InputStream</code> object.
 This method differs from the <code>setBinaryStream (int, InputStream)</code>
  method because it informs the driver that the parameter value should be
  sent to the server as a <code>BLOB</code>.  When the <code>setBinaryStream</code> method is used,
  the driver may have to do extra work to determine whether the parameter
  data should be sent to the server as a <code>LONGVARBINARY</code> or a <code>BLOB</code>
  
 <P><B>Note:</B> Consult your JDBC driver documentation to determine if
  it might be more efficient to use a version of 
 <code>setBlob</code> which takes a length parameter.
 @param parameterIndex index of the first parameter is 1,  the second is 2, ...
 @param inputStream An object that contains the data to set the parameter  value to.
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement; if a database access error occurs;
  this method is called on a closed <code>PreparedStatement</code> or
  if parameterIndex does not correspond
  to a parameter marker in the SQL statement,
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support this method
 @since 1.6
 */
- (void)setBlobWithInt:(jint)parameterIndex
 withJavaIoInputStream:(JavaIoInputStream *)inputStream;

/*!
 @brief Sets the designated parameter to a <code>Reader</code> object.
 This method differs from the <code>setCharacterStream (int, Reader)</code> method
  because it informs the driver that the parameter value should be sent to
  the server as a <code>NCLOB</code>.  When the <code>setCharacterStream</code> method is used, the
  driver may have to do extra work to determine whether the parameter
  data should be sent to the server as a <code>LONGNVARCHAR</code> or a <code>NCLOB</code>
  <P><B>Note:</B> Consult your JDBC driver documentation to determine if
  it might be more efficient to use a version of 
 <code>setNClob</code> which takes a length parameter.
 @param parameterIndex index of the first parameter is 1, the second is 2, ...
 @param reader An object that contains the data to set the parameter value to.
 @throw SQLExceptionif parameterIndex does not correspond to a parameter
  marker in the SQL statement;
  if the driver does not support national character sets;
  if the driver can detect that a data conversion
   error could occur;  if a database access error occurs or
  this method is called on a closed <code>PreparedStatement</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support this method
 @since 1.6
 */
- (void)setNClobWithInt:(jint)parameterIndex
       withJavaIoReader:(JavaIoReader *)reader;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSqlPreparedStatement)

J2OBJC_TYPE_LITERAL_HEADER(JavaSqlPreparedStatement)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSqlPreparedStatement")
