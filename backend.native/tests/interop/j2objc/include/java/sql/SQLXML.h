//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/sql/SQLXML.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSqlSQLXML")
#ifdef RESTRICT_JavaSqlSQLXML
#define INCLUDE_ALL_JavaSqlSQLXML 0
#else
#define INCLUDE_ALL_JavaSqlSQLXML 1
#endif
#undef RESTRICT_JavaSqlSQLXML

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSqlSQLXML_) && (INCLUDE_ALL_JavaSqlSQLXML || defined(INCLUDE_JavaSqlSQLXML))
#define JavaSqlSQLXML_

@class IOSClass;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaIoReader;
@class JavaIoWriter;
@protocol JavaxXmlTransformResult;
@protocol JavaxXmlTransformSource;

/*!
 @brief The mapping in the JavaTM programming language for the SQL XML type.
 XML is a built-in type that stores an XML value
  as a column value in a row of a database table.
  By default drivers implement an SQLXML object as
  a logical pointer to the XML data
  rather than the data itself.
  An SQLXML object is valid for the duration of the transaction in which it was created. 
 <p>
  The SQLXML interface provides methods for accessing the XML value
  as a String, a Reader or Writer, or as a Stream.  The XML value
  may also be accessed through a Source or set as a Result, which
  are used with XML Parser APIs such as DOM, SAX, and StAX, as
  well as with XSLT transforms and XPath evaluations. 
 <p>
  Methods in the interfaces ResultSet, CallableStatement, and PreparedStatement,
  such as getSQLXML allow a programmer to access an XML value.
  In addition, this interface has methods for updating an XML value. 
 <p>
  The XML value of the SQLXML instance may be obtained as a BinaryStream using 
 @code

    SQLXML sqlxml = resultSet.getSQLXML(column);
    InputStream binaryStream = sqlxml.getBinaryStream(); 
  
@endcode
  For example, to parse an XML value with a DOM parser: 
 @code

    DocumentBuilder parser = DocumentBuilderFactory.newInstance().newDocumentBuilder();
    Document result = parser.parse(binaryStream); 
  
@endcode
  or to parse an XML value with a SAX parser to your handler: 
 @code

    SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
    parser.parse(binaryStream, myHandler); 
  
@endcode
  or to parse an XML value with a StAX parser: 
 @code

    XMLInputFactory factory = XMLInputFactory.newInstance();
    XMLStreamReader streamReader = factory.createXMLStreamReader(binaryStream); 
  
@endcode
  <p>
  Because databases may use an optimized representation for the XML,
  accessing the value through getSource() and
  setResult() can lead to improved processing performance
  without serializing to a stream representation and parsing the XML. 
 <p>
  For example, to obtain a DOM Document Node: 
 @code

    DOMSource domSource = sqlxml.getSource(DOMSource.class);
    Document document = (Document) domSource.getNode(); 
  
@endcode
  or to set the value to a DOM Document Node to myNode: 
 @code

    DOMResult domResult = sqlxml.setResult(DOMResult.class);
    domResult.setNode(myNode); 
  
@endcode
  or, to send SAX events to your handler: 
 @code

    SAXSource saxSource = sqlxml.getSource(SAXSource.class);
    XMLReader xmlReader = saxSource.getXMLReader();
    xmlReader.setContentHandler(myHandler);
    xmlReader.parse(saxSource.getInputSource()); 
  
@endcode
  or, to set the result value from SAX events: 
 @code

    SAXResult saxResult = sqlxml.setResult(SAXResult.class);
    ContentHandler contentHandler = saxResult.getXMLReader().getContentHandler();
    contentHandler.startDocument();
    // set the XML elements and attributes into the result
    contentHandler.endDocument(); 
  
@endcode
  or, to obtain StAX events: 
 @code

    StAXSource staxSource = sqlxml.getSource(StAXSource.class);
    XMLStreamReader streamReader = staxSource.getXMLStreamReader(); 
  
@endcode
  or, to set the result value from StAX events: 
 @code

    StAXResult staxResult = sqlxml.setResult(StAXResult.class);
    XMLStreamWriter streamWriter = staxResult.getXMLStreamWriter(); 
  
@endcode
  or, to perform XSLT transformations on the XML value using the XSLT in xsltFile
  output to file resultFile: 
 @code

    File xsltFile = new File("a.xslt");
    File myFile = new File("result.xml");
    Transformer xslt = TransformerFactory.newInstance().newTransformer(new StreamSource(xsltFile));
    Source source = sqlxml.getSource(null);
    Result result = new StreamResult(myFile);
    xslt.transform(source, result); 
  
@endcode
  or, to evaluate an XPath expression on the XML value: 
 @code

    XPath xpath = XPathFactory.newInstance().newXPath();
    DOMSource domSource = sqlxml.getSource(DOMSource.class);
    Document document = (Document) domSource.getNode();
    String expression = "/foo/@@bar";
    String barValue = xpath.evaluate(expression, document); 
  
@endcode
  To set the XML value to be the result of an XSLT transform: 
 @code

    File sourceFile = new File("source.xml");
    Transformer xslt = TransformerFactory.newInstance().newTransformer(new StreamSource(xsltFile));
    Source streamSource = new StreamSource(sourceFile);
    Result result = sqlxml.setResult(null);
    xslt.transform(streamSource, result); 
  
@endcode
  Any Source can be transformed to a Result using the identity transform
  specified by calling newTransformer(): 
 @code

    Transformer identity = TransformerFactory.newInstance().newTransformer();
    Source source = sqlxml.getSource(null);
    File myFile = new File("result.xml");
    Result result = new StreamResult(myFile);
    identity.transform(source, result); 
  
@endcode
  To write the contents of a Source to standard output: 
 @code

    Transformer identity = TransformerFactory.newInstance().newTransformer();
    Source source = sqlxml.getSource(null);
    Result result = new StreamResult(System.out);
    identity.transform(source, result); 
  
@endcode
  To create a DOMSource from a DOMResult: 
 @code

     DOMSource domSource = new DOMSource(domResult.getNode()); 
  
@endcode
  <p>
  Incomplete or invalid XML values may cause an SQLException when
  set or the exception may occur when execute() occurs.  All streams
  must be closed before execute() occurs or an SQLException will be thrown. 
 <p>
  Reading and writing XML values to or from an SQLXML object can happen at most once.
  The conceptual states of readable and not readable determine if one
  of the reading APIs will return a value or throw an exception.
  The conceptual states of writable and not writable determine if one
  of the writing APIs will set a value or throw an exception. 
 <p>
  The state moves from readable to not readable once free() or any of the
  reading APIs are called: getBinaryStream(), getCharacterStream(), getSource(), and getString().
  Implementations may also change the state to not writable when this occurs. 
 <p>
  The state moves from writable to not writeable once free() or any of the
  writing APIs are called: setBinaryStream(), setCharacterStream(), setResult(), and setString().
  Implementations may also change the state to not readable when this occurs. 
 <p>
  <p>
  All methods on the <code>SQLXML</code> interface must be fully implemented if the
  JDBC driver supports the data type.
 - seealso: javax.xml.parsers
 - seealso: javax.xml.stream
 - seealso: javax.xml.transform
 - seealso: javax.xml.xpath
 @since 1.6
 */
@protocol JavaSqlSQLXML < JavaObject >

/*!
 @brief This method closes this object and releases the resources that it held.
 The SQL XML object becomes invalid and neither readable or writeable
  when this method is called.
  After <code>free</code> has been called, any attempt to invoke a
  method other than <code>free</code> will result in a <code>SQLException</code>
  being thrown.  If <code>free</code> is called multiple times, the subsequent
  calls to <code>free</code> are treated as a no-op.
 @throw SQLExceptionif there is an error freeing the XML value.
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (void)free;

/*!
 @brief Retrieves the XML value designated by this SQLXML instance as a stream.
 The bytes of the input stream are interpreted according to appendix F of the XML 1.0 specification.
  The behavior of this method is the same as ResultSet.getBinaryStream()
  when the designated column of the ResultSet has a type java.sql.Types of SQLXML. 
 <p>
  The SQL XML object becomes not readable when this method is called and
  may also become not writable depending on implementation.
 @return a stream containing the XML data.
 @throw SQLExceptionif there is an error processing the XML value.
    An exception is thrown if the state is not readable.
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (JavaIoInputStream *)getBinaryStream;

/*!
 @brief Retrieves a stream that can be used to write the XML value that this SQLXML instance represents.
 The stream begins at position 0.
  The bytes of the stream are interpreted according to appendix F of the XML 1.0 specification
  The behavior of this method is the same as ResultSet.updateBinaryStream()
  when the designated column of the ResultSet has a type java.sql.Types of SQLXML. 
 <p>
  The SQL XML object becomes not writeable when this method is called and
  may also become not readable depending on implementation.
 @return a stream to which data can be written.
 @throw SQLExceptionif there is an error processing the XML value.
    An exception is thrown if the state is not writable.
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (JavaIoOutputStream *)setBinaryStream;

/*!
 @brief Retrieves the XML value designated by this SQLXML instance as a java.io.Reader object.
 The format of this stream is defined by org.xml.sax.InputSource,
  where the characters in the stream represent the unicode code points for
  XML according to section 2 and appendix B of the XML 1.0 specification.
  Although an encoding declaration other than unicode may be present,
  the encoding of the stream is unicode.
  The behavior of this method is the same as ResultSet.getCharacterStream()
  when the designated column of the ResultSet has a type java.sql.Types of SQLXML. 
 <p>
  The SQL XML object becomes not readable when this method is called and
  may also become not writable depending on implementation.
 @return a stream containing the XML data.
 @throw SQLExceptionif there is an error processing the XML value.
    The getCause() method of the exception may provide a more detailed exception, for example,
    if the stream does not contain valid characters.
    An exception is thrown if the state is not readable.
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (JavaIoReader *)getCharacterStream;

/*!
 @brief Retrieves a stream to be used to write the XML value that this SQLXML instance represents.
 The format of this stream is defined by org.xml.sax.InputSource,
  where the characters in the stream represent the unicode code points for
  XML according to section 2 and appendix B of the XML 1.0 specification.
  Although an encoding declaration other than unicode may be present,
  the encoding of the stream is unicode.
  The behavior of this method is the same as ResultSet.updateCharacterStream()
  when the designated column of the ResultSet has a type java.sql.Types of SQLXML. 
 <p>
  The SQL XML object becomes not writeable when this method is called and
  may also become not readable depending on implementation.
 @return a stream to which data can be written.
 @throw SQLExceptionif there is an error processing the XML value.
    The getCause() method of the exception may provide a more detailed exception, for example,
    if the stream does not contain valid characters.
    An exception is thrown if the state is not writable.
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (JavaIoWriter *)setCharacterStream;

/*!
 @brief Returns a string representation of the XML value designated by this SQLXML instance.
 The format of this String is defined by org.xml.sax.InputSource,
  where the characters in the stream represent the unicode code points for
  XML according to section 2 and appendix B of the XML 1.0 specification.
  Although an encoding declaration other than unicode may be present,
  the encoding of the String is unicode.
  The behavior of this method is the same as ResultSet.getString()
  when the designated column of the ResultSet has a type java.sql.Types of SQLXML. 
 <p>
  The SQL XML object becomes not readable when this method is called and
  may also become not writable depending on implementation.
 @return a string representation of the XML value designated by this SQLXML instance.
 @throw SQLExceptionif there is an error processing the XML value.
    The getCause() method of the exception may provide a more detailed exception, for example,
    if the stream does not contain valid characters.
    An exception is thrown if the state is not readable.
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (NSString *)getString;

/*!
 @brief Sets the XML value designated by this SQLXML instance to the given String representation.
 The format of this String is defined by org.xml.sax.InputSource,
  where the characters in the stream represent the unicode code points for
  XML according to section 2 and appendix B of the XML 1.0 specification.
  Although an encoding declaration other than unicode may be present,
  the encoding of the String is unicode.
  The behavior of this method is the same as ResultSet.updateString()
  when the designated column of the ResultSet has a type java.sql.Types of SQLXML. 
 <p>
  The SQL XML object becomes not writeable when this method is called and
  may also become not readable depending on implementation.
 @param value the XML value
 @throw SQLExceptionif there is an error processing the XML value.
    The getCause() method of the exception may provide a more detailed exception, for example,
    if the stream does not contain valid characters.
    An exception is thrown if the state is not writable.
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (void)setStringWithNSString:(NSString *)value;

/*!
 @brief Returns a Source for reading the XML value designated by this SQLXML instance.
 Sources are used as inputs to XML parsers and XSLT transformers. 
 <p>
  Sources for XML parsers will have namespace processing on by default.
  The systemID of the Source is implementation dependent. 
 <p>
  The SQL XML object becomes not readable when this method is called and
  may also become not writable depending on implementation. 
 <p>
  Note that SAX is a callback architecture, so a returned
  SAXSource should then be set with a content handler that will
  receive the SAX events from parsing.  The content handler
  will receive callbacks based on the contents of the XML. 
 @code

    SAXSource saxSource = sqlxml.getSource(SAXSource.class);
    XMLReader xmlReader = saxSource.getXMLReader();
    xmlReader.setContentHandler(myHandler);
    xmlReader.parse(saxSource.getInputSource()); 
  
@endcode
 @param sourceClass The class of the source, or null.  If the class is null, a vendor specifc Source implementation will be returned.
   The following classes are supported at a minimum:
    
@code
    javax.xml.transform.dom.DOMSource - returns a DOMSource
     javax.xml.transform.sax.SAXSource - returns a SAXSource
     javax.xml.transform.stax.StAXSource - returns a StAXSource
     javax.xml.transform.stream.StreamSource - returns a StreamSource
   
@endcode
 @return a Source for reading the XML value.
 @throw SQLExceptionif there is an error processing the XML value
    or if this feature is not supported.
    The getCause() method of the exception may provide a more detailed exception, for example,
    if an XML parser exception occurs.
    An exception is thrown if the state is not readable.
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (id<JavaxXmlTransformSource>)getSourceWithIOSClass:(IOSClass *)sourceClass;

/*!
 @brief Returns a Result for setting the XML value designated by this SQLXML instance.
 <p>
  The systemID of the Result is implementation dependent. 
 <p>
  The SQL XML object becomes not writeable when this method is called and
  may also become not readable depending on implementation. 
 <p>
  Note that SAX is a callback architecture and the returned
  SAXResult has a content handler assigned that will receive the
  SAX events based on the contents of the XML.  Call the content
  handler with the contents of the XML document to assign the values. 
 @code

    SAXResult saxResult = sqlxml.setResult(SAXResult.class);
    ContentHandler contentHandler = saxResult.getXMLReader().getContentHandler();
    contentHandler.startDocument();
    // set the XML elements and attributes into the result
    contentHandler.endDocument(); 
  
@endcode
 @param resultClass The class of the result, or null.  If resultClass is null, a vendor specific Result implementation will be returned.
   The following classes are supported at a minimum:
    
@code
    javax.xml.transform.dom.DOMResult - returns a DOMResult
     javax.xml.transform.sax.SAXResult - returns a SAXResult
     javax.xml.transform.stax.StAXResult - returns a StAXResult
     javax.xml.transform.stream.StreamResult - returns a StreamResult
   
@endcode
 @return Returns a Result for setting the XML value.
 @throw SQLExceptionif there is an error processing the XML value
    or if this feature is not supported.
    The getCause() method of the exception may provide a more detailed exception, for example,
    if an XML parser exception occurs.
    An exception is thrown if the state is not writable.
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (id<JavaxXmlTransformResult>)setResultWithIOSClass:(IOSClass *)resultClass;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSqlSQLXML)

J2OBJC_TYPE_LITERAL_HEADER(JavaSqlSQLXML)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSqlSQLXML")
