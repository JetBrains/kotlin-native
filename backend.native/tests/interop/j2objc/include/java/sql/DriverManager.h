//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/sql/DriverManager.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSqlDriverManager")
#ifdef RESTRICT_JavaSqlDriverManager
#define INCLUDE_ALL_JavaSqlDriverManager 0
#else
#define INCLUDE_ALL_JavaSqlDriverManager 1
#endif
#undef RESTRICT_JavaSqlDriverManager

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSqlDriverManager_) && (INCLUDE_ALL_JavaSqlDriverManager || defined(INCLUDE_JavaSqlDriverManager))
#define JavaSqlDriverManager_

@class JavaIoPrintStream;
@class JavaIoPrintWriter;
@class JavaSqlSQLPermission;
@class JavaUtilProperties;
@protocol JavaSqlConnection;
@protocol JavaSqlDriver;
@protocol JavaUtilEnumeration;

/*!
 @brief <P>The basic service for managing a set of JDBC drivers.
 <br>
  <B>NOTE:</B> The <code>DataSource</code> interface, new in the
  JDBC 2.0 API, provides another way to connect to a data source.
  The use of a <code>DataSource</code> object is the preferred means of
  connecting to a data source. 
 <P>As part of its initialization, the <code>DriverManager</code> class will
  attempt to load the driver classes referenced in the "jdbc.drivers"
  system property. This allows a user to customize the JDBC Drivers
  used by their applications. For example in your
  ~/.hotjava/properties file you might specify: 
 @code

   <CODE>jdbc.drivers=foo.bah.Driver:wombat.sql.Driver:bad.taste.ourDriver</CODE>
   
@endcode
 <P> The <code>DriverManager</code> methods <code>getConnection</code> and 
 <code>getDrivers</code> have been enhanced to support the Java Standard Edition 
 <a href="{@@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/jar/jar.html#Service%20Provider">Service Provider</a> mechanism. JDBC 4.0 Drivers must
  include the file <code>META-INF/services/java.sql.Driver</code>. This file contains the name of the JDBC drivers
  implementation of <code>java.sql.Driver</code>.  For example, to load the <code>my.sql.Driver</code> class,
  the <code>META-INF/services/java.sql.Driver</code> file would contain the entry: 
 @code

   <code>my.sql.Driver</code>
   
@endcode
  
 <P>Applications no longer need to explictly load JDBC drivers using <code>Class.forName()</code>. Existing programs
  which currently load JDBC drivers using <code>Class.forName()</code> will continue to work without
  modification. 
 <P>When the method <code>getConnection</code> is called,
  the <code>DriverManager</code> will attempt to
  locate a suitable driver from amongst those loaded at
  initialization and those loaded explicitly using the same classloader
  as the current applet or application. 
 <P>
  Starting with the Java 2 SDK, Standard Edition, version 1.3, a
  logging stream can be set only if the proper
  permission has been granted.  Normally this will be done with
  the tool PolicyTool, which can be used to grant <code>permission
  java.sql.SQLPermission "setLog"</code>.
 - seealso: Driver
 - seealso: Connection
 */
@interface JavaSqlDriverManager : NSObject
@property (readonly, class, strong) JavaSqlSQLPermission *SET_LOG_PERMISSION NS_SWIFT_NAME(SET_LOG_PERMISSION);

+ (JavaSqlSQLPermission *)SET_LOG_PERMISSION;

#pragma mark Public

/*!
 @brief Drops a driver from the <code>DriverManager</code>'s list.
 Applets can only deregister drivers from their own classloaders.
 @param driver the JDBC Driver to drop
 @throw SQLExceptionif a database access error occurs
 */
+ (void)deregisterDriverWithJavaSqlDriver:(id<JavaSqlDriver>)driver;

/*!
 @brief Attempts to establish a connection to the given database URL.
 The <code>DriverManager</code> attempts to select an appropriate driver from
  the set of registered JDBC drivers.
 @param url a database url of the form   
  <code>  jdbc: <em> subprotocol </em> : <em> subname </em> </code>
 @return a connection to the URL
 @throw SQLExceptionif a database access error occurs
 */
+ (id<JavaSqlConnection>)getConnectionWithNSString:(NSString *)url;

/*!
 @brief Attempts to establish a connection to the given database URL.
 The <code>DriverManager</code> attempts to select an appropriate driver from
  the set of registered JDBC drivers.
 @param url a database url of the form  
  <code>  jdbc: <em> subprotocol </em> : <em> subname </em> </code>
 @param info a list of arbitrary string tag/value pairs as  connection arguments; normally at least a "user" and
   "password" property should be included
 @return a Connection to the URL
 @throw SQLExceptionif a database access error occurs
 */
+ (id<JavaSqlConnection>)getConnectionWithNSString:(NSString *)url
                            withJavaUtilProperties:(JavaUtilProperties *)info;

/*!
 @brief Attempts to establish a connection to the given database URL.
 The <code>DriverManager</code> attempts to select an appropriate driver from
  the set of registered JDBC drivers.
 @param url a database url of the form  
  <code> jdbc: <em> subprotocol </em> : <em> subname </em> </code>
 @param user the database user on whose behalf the connection is being    made
 @param password the user's password
 @return a connection to the URL
 @throw SQLExceptionif a database access error occurs
 */
+ (id<JavaSqlConnection>)getConnectionWithNSString:(NSString *)url
                                      withNSString:(NSString *)user
                                      withNSString:(NSString *)password;

/*!
 @brief Attempts to locate a driver that understands the given URL.
 The <code>DriverManager</code> attempts to select an appropriate driver from
  the set of registered JDBC drivers.
 @param url a database URL of the form      
  <code> jdbc: <em> subprotocol </em> : <em> subname </em> </code>
 @return a <code>Driver</code> object representing a driver
  that can connect to the given URL
 @throw SQLExceptionif a database access error occurs
 */
+ (id<JavaSqlDriver>)getDriverWithNSString:(NSString *)url;

/*!
 @brief Retrieves an Enumeration with all of the currently loaded JDBC drivers
  to which the current caller has access.
 <P><B>Note:</B> The classname of a driver can be found using 
 <CODE>d.getClass().getName()</CODE>
 @return the list of JDBC Drivers loaded by the caller's class loader
 */
+ (id<JavaUtilEnumeration>)getDrivers;

/*!
 @brief Gets the maximum time in seconds that a driver can wait
  when attempting to log in to a database.
 @return the driver login time limit in seconds
 - seealso: #setLoginTimeout
 */
+ (jint)getLoginTimeout;

/*!
 @brief Retrieves the logging/tracing PrintStream that is used by the <code>DriverManager</code>
  and all drivers.
 @return the logging/tracing PrintStream; if disabled, is <code>null</code>
 - seealso: #setLogStream
 */
+ (JavaIoPrintStream *)getLogStream __attribute__((deprecated));

/*!
 @brief Retrieves the log writer.
 The <code>getLogWriter</code> and <code>setLogWriter</code>
  methods should be used instead
  of the <code>get/setlogStream</code> methods, which are deprecated.
 @return a <code>java.io.PrintWriter</code> object
 - seealso: #setLogWriter
 @since 1.2
 */
+ (JavaIoPrintWriter *)getLogWriter;

/*!
 @brief Prints a message to the current JDBC log stream.
 @param message a log or tracing message
 */
+ (void)printlnWithNSString:(NSString *)message;

/*!
 @brief Registers the given driver with the <code>DriverManager</code>.
 A newly-loaded driver class should call
  the method <code>registerDriver</code> to make itself
  known to the <code>DriverManager</code>.
 @param driver the new JDBC Driver that is to be registered with the                
  <code> DriverManager </code>
 @throw SQLExceptionif a database access error occurs
 */
+ (void)registerDriverWithJavaSqlDriver:(id<JavaSqlDriver>)driver;

/*!
 @brief Sets the maximum time in seconds that a driver will wait
  while attempting to connect to a database.
 @param seconds the login time limit in seconds; zero means there is no limit
 - seealso: #getLoginTimeout
 */
+ (void)setLoginTimeoutWithInt:(jint)seconds;

/*!
 @brief Sets the logging/tracing PrintStream that is used
  by the <code>DriverManager</code>
  and all drivers.
 <P>
  In the Java 2 SDK, Standard Edition, version 1.3 release, this method checks
  to see that there is an <code>SQLPermission</code> object before setting
  the logging stream.  If a <code>SecurityManager</code> exists and its 
 <code>checkPermission</code> method denies setting the log writer, this
  method throws a <code>java.lang.SecurityException</code>.
 @param outArg the new logging/tracing PrintStream; to disable, set to  <code> null </code>
 @throw SecurityExceptionif a security manager exists and its
     <code>checkPermission</code> method denies setting the log stream
 - seealso: SecurityManager#checkPermission
 - seealso: #getLogStream
 */
+ (void)setLogStreamWithJavaIoPrintStream:(JavaIoPrintStream *)outArg __attribute__((deprecated));

/*!
 @brief Sets the logging/tracing <code>PrintWriter</code> object
  that is used by the <code>DriverManager</code> and all drivers.
 <P>
  There is a minor versioning problem created by the introduction
  of the method <code>setLogWriter</code>.  The
  method <code>setLogWriter</code> cannot create a <code>PrintStream</code> object
  that will be returned by <code>getLogStream</code>---the Java platform does
  not provide a backward conversion.  As a result, a new application
  that uses <code>setLogWriter</code> and also uses a JDBC 1.0 driver that uses 
 <code>getLogStream</code> will likely not see debugging information written
  by that driver.
 <P>
  Starting with the Java 2 SDK, Standard Edition, version 1.3 release, this method checks
  to see that there is an <code>SQLPermission</code> object before setting
  the logging stream.  If a <code>SecurityManager</code> exists and its 
 <code>checkPermission</code> method denies setting the log writer, this
  method throws a <code>java.lang.SecurityException</code>.
 @param outArg the new logging/tracing  <code> PrintStream </code>  object;
         <code> null </code>  to disable logging and tracing
 @throw SecurityException
 if a security manager exists and its
     <code>checkPermission</code> method denies
     setting the log writer
 - seealso: SecurityManager#checkPermission
 - seealso: #getLogWriter
 @since 1.2
 */
+ (void)setLogWriterWithJavaIoPrintWriter:(JavaIoPrintWriter *)outArg;

@end

J2OBJC_STATIC_INIT(JavaSqlDriverManager)

/*!
 @brief The <code>SQLPermission</code> constant that allows the
  setting of the logging stream.
 @since 1.3
 */
inline JavaSqlSQLPermission *JavaSqlDriverManager_get_SET_LOG_PERMISSION(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaSqlSQLPermission *JavaSqlDriverManager_SET_LOG_PERMISSION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaSqlDriverManager, SET_LOG_PERMISSION, JavaSqlSQLPermission *)

FOUNDATION_EXPORT JavaIoPrintWriter *JavaSqlDriverManager_getLogWriter(void);

FOUNDATION_EXPORT void JavaSqlDriverManager_setLogWriterWithJavaIoPrintWriter_(JavaIoPrintWriter *outArg);

FOUNDATION_EXPORT id<JavaSqlConnection> JavaSqlDriverManager_getConnectionWithNSString_withJavaUtilProperties_(NSString *url, JavaUtilProperties *info);

FOUNDATION_EXPORT id<JavaSqlConnection> JavaSqlDriverManager_getConnectionWithNSString_withNSString_withNSString_(NSString *url, NSString *user, NSString *password);

FOUNDATION_EXPORT id<JavaSqlConnection> JavaSqlDriverManager_getConnectionWithNSString_(NSString *url);

FOUNDATION_EXPORT id<JavaSqlDriver> JavaSqlDriverManager_getDriverWithNSString_(NSString *url);

FOUNDATION_EXPORT void JavaSqlDriverManager_registerDriverWithJavaSqlDriver_(id<JavaSqlDriver> driver);

FOUNDATION_EXPORT void JavaSqlDriverManager_deregisterDriverWithJavaSqlDriver_(id<JavaSqlDriver> driver);

FOUNDATION_EXPORT id<JavaUtilEnumeration> JavaSqlDriverManager_getDrivers(void);

FOUNDATION_EXPORT void JavaSqlDriverManager_setLoginTimeoutWithInt_(jint seconds);

FOUNDATION_EXPORT jint JavaSqlDriverManager_getLoginTimeout(void);

FOUNDATION_EXPORT void JavaSqlDriverManager_setLogStreamWithJavaIoPrintStream_(JavaIoPrintStream *outArg);

FOUNDATION_EXPORT JavaIoPrintStream *JavaSqlDriverManager_getLogStream(void);

FOUNDATION_EXPORT void JavaSqlDriverManager_printlnWithNSString_(NSString *message);

J2OBJC_TYPE_LITERAL_HEADER(JavaSqlDriverManager)

#endif

#if !defined (JavaSqlDriverInfo_) && (INCLUDE_ALL_JavaSqlDriverManager || defined(INCLUDE_JavaSqlDriverInfo))
#define JavaSqlDriverInfo_

@protocol JavaSqlDriver;

@interface JavaSqlDriverInfo : NSObject {
 @public
  id<JavaSqlDriver> driver_;
}

#pragma mark Public

- (jboolean)isEqual:(id)other;

- (NSUInteger)hash;

- (NSString *)description;

#pragma mark Package-Private

- (instancetype __nonnull)initPackagePrivateWithJavaSqlDriver:(id<JavaSqlDriver>)driver;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSqlDriverInfo)

J2OBJC_FIELD_SETTER(JavaSqlDriverInfo, driver_, id<JavaSqlDriver>)

FOUNDATION_EXPORT void JavaSqlDriverInfo_initPackagePrivateWithJavaSqlDriver_(JavaSqlDriverInfo *self, id<JavaSqlDriver> driver);

FOUNDATION_EXPORT JavaSqlDriverInfo *new_JavaSqlDriverInfo_initPackagePrivateWithJavaSqlDriver_(id<JavaSqlDriver> driver) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaSqlDriverInfo *create_JavaSqlDriverInfo_initPackagePrivateWithJavaSqlDriver_(id<JavaSqlDriver> driver);

J2OBJC_TYPE_LITERAL_HEADER(JavaSqlDriverInfo)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSqlDriverManager")
