//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/sql/Wrapper.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSqlWrapper")
#ifdef RESTRICT_JavaSqlWrapper
#define INCLUDE_ALL_JavaSqlWrapper 0
#else
#define INCLUDE_ALL_JavaSqlWrapper 1
#endif
#undef RESTRICT_JavaSqlWrapper

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSqlWrapper_) && (INCLUDE_ALL_JavaSqlWrapper || defined(INCLUDE_JavaSqlWrapper))
#define JavaSqlWrapper_

@class IOSClass;

/*!
 @brief Interface for JDBC classes which provide the ability to retrieve the delegate instance when the instance
  in question is in fact a proxy class.
 <p>
  The wrapper pattern is employed by many JDBC driver implementations to provide extensions beyond
  the traditional JDBC API that are specific to a data source. Developers may wish to gain access to
  these resources that are wrapped (the delegates) as  proxy class instances representing the
  the actual resources. This interface describes a standard mechanism to access
  these wrapped resources
  represented by their proxy, to permit direct access to the resource delegates.
 @since 1.6
 */
@protocol JavaSqlWrapper < JavaObject >

/*!
 @brief Returns an object that implements the given interface to allow access to
  non-standard methods, or standard methods not exposed by the proxy.
 If the receiver implements the interface then the result is the receiver
  or a proxy for the receiver. If the receiver is a wrapper
  and the wrapped object implements the interface then the result is the
  wrapped object or a proxy for the wrapped object. Otherwise return the
  the result of calling <code>unwrap</code> recursively on the wrapped object
  or a proxy for that result. If the receiver is not a
  wrapper and does not implement the interface, then an <code>SQLException</code> is thrown.
 @param iface A Class defining an interface that the result must implement.
 @return an object that implements the interface. May be a proxy for the actual implementing object.
 @throw java.sql.SQLExceptionIf no object found that implements the interface
 @since 1.6
 */
- (id)unwrapWithIOSClass:(IOSClass *)iface;

/*!
 @brief Returns true if this either implements the interface argument or is directly or indirectly a wrapper
  for an object that does.Returns false otherwise.
 If this implements the interface then return true,
  else if this is a wrapper then return the result of recursively calling <code>isWrapperFor</code> on the wrapped
  object. If this does not implement the interface and is not a wrapper, return false.
  This method should be implemented as a low-cost operation compared to <code>unwrap</code> so that
  callers can use this method to avoid expensive <code>unwrap</code> calls that may fail. If this method
  returns true then calling <code>unwrap</code> with the same argument should succeed.
 @param iface a Class defining an interface.
 @return true if this implements the interface or directly or indirectly wraps an object that does.
 @throw java.sql.SQLExceptionif an error occurs while determining whether this is a wrapper
  for an object with the given interface.
 @since 1.6
 */
- (jboolean)isWrapperForWithIOSClass:(IOSClass *)iface;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSqlWrapper)

J2OBJC_TYPE_LITERAL_HEADER(JavaSqlWrapper)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSqlWrapper")
