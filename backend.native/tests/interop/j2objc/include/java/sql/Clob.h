//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/sql/Clob.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSqlClob")
#ifdef RESTRICT_JavaSqlClob
#define INCLUDE_ALL_JavaSqlClob 0
#else
#define INCLUDE_ALL_JavaSqlClob 1
#endif
#undef RESTRICT_JavaSqlClob

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSqlClob_) && (INCLUDE_ALL_JavaSqlClob || defined(INCLUDE_JavaSqlClob))
#define JavaSqlClob_

@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaIoReader;
@class JavaIoWriter;

/*!
 @brief The mapping in the Java<sup><font size=-2>TM</font></sup> programming language
  for the SQL <code>CLOB</code> type.
 An SQL <code>CLOB</code> is a built-in type
  that stores a Character Large Object as a column value in a row of
  a database table.
  By default drivers implement a <code>Clob</code> object using an SQL 
 <code>locator(CLOB)</code>, which means that a <code>Clob</code> object
  contains a logical pointer to the SQL <code>CLOB</code> data rather than
  the data itself. A <code>Clob</code> object is valid for the duration
  of the transaction in which it was created. 
 <P>The <code>Clob</code> interface provides methods for getting the
  length of an SQL <code>CLOB</code> (Character Large Object) value,
  for materializing a <code>CLOB</code> value on the client, and for
  searching for a substring or <code>CLOB</code> object within a 
 <code>CLOB</code> value.
  Methods in the interfaces <code>ResultSet</code>,
  <code>CallableStatement</code>, and <code>PreparedStatement</code>, such as 
 <code>getClob</code> and <code>setClob</code> allow a programmer to
  access an SQL <code>CLOB</code> value.  In addition, this interface
  has methods for updating a <code>CLOB</code> value. 
 <p>
  All methods on the <code>Clob</code> interface must be fully implemented if the
  JDBC driver supports the data type.
 @since 1.2
 */
@protocol JavaSqlClob < JavaObject >

/*!
 @brief Retrieves the number of characters
  in the <code>CLOB</code> value
  designated by this <code>Clob</code> object.
 @return length of the <code>CLOB</code> in characters
 @throw SQLExceptionif there is an error accessing the
             length of the <code>CLOB</code> value
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.2
 */
- (jlong)length;

/*!
 @brief Retrieves a copy of the specified substring
  in the <code>CLOB</code> value
  designated by this <code>Clob</code> object.
 The substring begins at position 
 <code>pos</code> and has up to <code>length</code> consecutive
  characters.
 @param pos the first character of the substring to be extracted.             The first character is at position 1.
 @param length the number of consecutive characters to be copied;  the value for length must be 0 or greater
 @return a <code>String</code> that is the specified substring in
          the <code>CLOB</code> value designated by this <code>Clob</code> object
 @throw SQLExceptionif there is an error accessing the
             <code>CLOB</code> value; if pos is less than 1 or length is
  less than 0
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.2
 */
- (NSString *)getSubStringWithLong:(jlong)pos
                           withInt:(jint)length;

/*!
 @brief Retrieves the <code>CLOB</code> value designated by this <code>Clob</code>
  object as a <code>java.io.Reader</code> object (or as a stream of
  characters).
 @return a <code>java.io.Reader</code> object containing the
          <code>CLOB</code> data
 @throw SQLExceptionif there is an error accessing the
             <code>CLOB</code> value
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #setCharacterStream
 @since 1.2
 */
- (JavaIoReader *)getCharacterStream;

/*!
 @brief Retrieves the <code>CLOB</code> value designated by this <code>Clob</code>
  object as an ascii stream.
 @return a <code>java.io.InputStream</code> object containing the
          <code>CLOB</code> data
 @throw SQLExceptionif there is an error accessing the
             <code>CLOB</code> value
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #setAsciiStream
 @since 1.2
 */
- (JavaIoInputStream *)getAsciiStream;

/*!
 @brief Retrieves the character position at which the specified substring 
 <code>searchstr</code> appears in the SQL <code>CLOB</code> value
  represented by this <code>Clob</code> object.The search
  begins at position <code>start</code>.
 @param searchstr the substring for which to search
 @param start the position at which to begin searching; the first position               is 1
 @return the position at which the substring appears or -1 if it is not
          present; the first position is 1
 @throw SQLExceptionif there is an error accessing the
             <code>CLOB</code> value or if pos is less than 1
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.2
 */
- (jlong)positionWithNSString:(NSString *)searchstr
                     withLong:(jlong)start;

/*!
 @brief Retrieves the character position at which the specified 
 <code>Clob</code> object <code>searchstr</code> appears in this 
 <code>Clob</code> object.The search begins at position 
 <code>start</code>.
 @param searchstr the  <code> Clob </code>  object for which to search
 @param start the position at which to begin searching; the first               position is 1
 @return the position at which the <code>Clob</code> object appears
               or -1 if it is not present; the first position is 1
 @throw SQLExceptionif there is an error accessing the
             <code>CLOB</code> value or if start is less than 1
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.2
 */
- (jlong)positionWithJavaSqlClob:(id<JavaSqlClob>)searchstr
                        withLong:(jlong)start;

/*!
 @brief Writes the given Java <code>String</code> to the <code>CLOB</code>
  value that this <code>Clob</code> object designates at the position 
 <code>pos</code>.The string will overwrite the existing characters
  in the <code>Clob</code> object starting at the position 
 <code>pos</code>.
 If the end of the <code>Clob</code> value is reached
  while writing the given string, then the length of the <code>Clob</code>
  value will be increased to accomodate the extra characters. 
 <p>
  <b>Note:</b> If the value specified for <code>pos</code>
  is greater then the length+1 of the <code>CLOB</code> value then the
  behavior is undefined. Some JDBC drivers may throw a 
 <code>SQLException</code> while other drivers may support this
  operation.
 @param pos the position at which to start writing to the  <code> CLOB </code>
           value that this  <code> Clob </code>  object represents;
   The first position is 1
 @param str the string to be written to the  <code> CLOB </code>
          value that this  <code> Clob </code>  designates
 @return the number of characters written
 @throw SQLExceptionif there is an error accessing the
             <code>CLOB</code> value or if pos is less than 1
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.4
 */
- (jint)setStringWithLong:(jlong)pos
             withNSString:(NSString *)str;

/*!
 @brief Writes <code>len</code> characters of <code>str</code>, starting
  at character <code>offset</code>, to the <code>CLOB</code> value
  that this <code>Clob</code> represents.The string will overwrite the existing characters
  in the <code>Clob</code> object starting at the position 
 <code>pos</code>.
 If the end of the <code>Clob</code> value is reached
  while writing the given string, then the length of the <code>Clob</code>
  value will be increased to accomodate the extra characters. 
 <p>
  <b>Note:</b> If the value specified for <code>pos</code>
  is greater then the length+1 of the <code>CLOB</code> value then the
  behavior is undefined. Some JDBC drivers may throw a 
 <code>SQLException</code> while other drivers may support this
  operation.
 @param pos the position at which to start writing to this         
  <code> CLOB </code>  object; The first position  is 1
 @param str the string to be written to the  <code> CLOB </code>
          value that this  <code> Clob </code>  object represents
 @param offset the offset into  <code> str </code>  to start reading
          the characters to be written
 @param len the number of characters to be written
 @return the number of characters written
 @throw SQLExceptionif there is an error accessing the
             <code>CLOB</code> value or if pos is less than 1
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.4
 */
- (jint)setStringWithLong:(jlong)pos
             withNSString:(NSString *)str
                  withInt:(jint)offset
                  withInt:(jint)len;

/*!
 @brief Retrieves a stream to be used to write Ascii characters to the 
 <code>CLOB</code> value that this <code>Clob</code> object represents,
  starting at position <code>pos</code>.Characters written to the stream
  will overwrite the existing characters
  in the <code>Clob</code> object starting at the position 
 <code>pos</code>.
 If the end of the <code>Clob</code> value is reached
  while writing characters to the stream, then the length of the <code>Clob</code>
  value will be increased to accomodate the extra characters. 
 <p>
  <b>Note:</b> If the value specified for <code>pos</code>
  is greater then the length+1 of the <code>CLOB</code> value then the
  behavior is undefined. Some JDBC drivers may throw a 
 <code>SQLException</code> while other drivers may support this
  operation.
 @param pos the position at which to start writing to this         
  <code> CLOB </code>  object; The first position is 1
 @return the stream to which ASCII encoded characters can be written
 @throw SQLExceptionif there is an error accessing the
             <code>CLOB</code> value or if pos is less than 1
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #getAsciiStream
 @since 1.4
 */
- (JavaIoOutputStream *)setAsciiStreamWithLong:(jlong)pos;

/*!
 @brief Retrieves a stream to be used to write a stream of Unicode characters
  to the <code>CLOB</code> value that this <code>Clob</code> object
  represents, at position <code>pos</code>.Characters written to the stream
  will overwrite the existing characters
  in the <code>Clob</code> object starting at the position 
 <code>pos</code>.
 If the end of the <code>Clob</code> value is reached
  while writing characters to the stream, then the length of the <code>Clob</code>
  value will be increased to accomodate the extra characters. 
 <p>
  <b>Note:</b> If the value specified for <code>pos</code>
  is greater then the length+1 of the <code>CLOB</code> value then the
  behavior is undefined. Some JDBC drivers may throw a 
 <code>SQLException</code> while other drivers may support this
  operation.
 @param pos the position at which to start writing to the         
  <code> CLOB </code>  value; The first position is 1
 @return a stream to which Unicode encoded characters can be written
 @throw SQLExceptionif there is an error accessing the
             <code>CLOB</code> value or if pos is less than 1
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 - seealso: #getCharacterStream
 @since 1.4
 */
- (JavaIoWriter *)setCharacterStreamWithLong:(jlong)pos;

/*!
 @brief Truncates the <code>CLOB</code> value that this <code>Clob</code>
  designates to have a length of <code>len</code>
  characters.
 <p>
  <b>Note:</b> If the value specified for <code>pos</code>
  is greater then the length+1 of the <code>CLOB</code> value then the
  behavior is undefined. Some JDBC drivers may throw a 
 <code>SQLException</code> while other drivers may support this
  operation.
 @param len the length, in characters, to which the  <code> CLOB </code>  value
          should be truncated
 @throw SQLExceptionif there is an error accessing the
             <code>CLOB</code> value or if len is less than 0
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.4
 */
- (void)truncateWithLong:(jlong)len;

/*!
 @brief This method frees the <code>Clob</code> object and releases the resources the resources
  that it holds.The object is invalid once the <code>free</code> method
  is called.
 <p>
  After <code>free</code> has been called, any attempt to invoke a
  method other than <code>free</code> will result in a <code>SQLException</code>
  being thrown.  If <code>free</code> is called multiple times, the subsequent
  calls to <code>free</code> are treated as a no-op. 
 <p>
 @throw SQLExceptionif an error occurs releasing
  the Clob's resources
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (void)free;

/*!
 @brief Returns a <code>Reader</code> object that contains a partial <code>Clob</code> value, starting
  with the character specified by pos, which is length characters in length.
 @param pos the offset to the first character of the partial value to  be retrieved.  The first character in the Clob is at position 1.
 @param length the length in characters of the partial value to be retrieved.
 @return <code>Reader</code> through which the partial <code>Clob</code> value can be read.
 @throw SQLExceptionif pos is less than 1 or if pos is greater than the number of
  characters in the <code>Clob</code> or if pos + length is greater than the number of
  characters in the <code>Clob</code>
 @throw SQLFeatureNotSupportedExceptionif the JDBC driver does not support
  this method
 @since 1.6
 */
- (JavaIoReader *)getCharacterStreamWithLong:(jlong)pos
                                    withLong:(jlong)length;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSqlClob)

J2OBJC_TYPE_LITERAL_HEADER(JavaSqlClob)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSqlClob")
