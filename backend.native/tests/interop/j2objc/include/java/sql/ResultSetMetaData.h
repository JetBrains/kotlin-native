//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/sql/ResultSetMetaData.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaSqlResultSetMetaData")
#ifdef RESTRICT_JavaSqlResultSetMetaData
#define INCLUDE_ALL_JavaSqlResultSetMetaData 0
#else
#define INCLUDE_ALL_JavaSqlResultSetMetaData 1
#endif
#undef RESTRICT_JavaSqlResultSetMetaData

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaSqlResultSetMetaData_) && (INCLUDE_ALL_JavaSqlResultSetMetaData || defined(INCLUDE_JavaSqlResultSetMetaData))
#define JavaSqlResultSetMetaData_

#define RESTRICT_JavaSqlWrapper 1
#define INCLUDE_JavaSqlWrapper 1
#include "java/sql/Wrapper.h"

/*!
 @brief An object that can be used to get information about the types
  and properties of the columns in a <code>ResultSet</code> object.
 The following code fragment creates the <code>ResultSet</code> object rs,
  creates the <code>ResultSetMetaData</code> object rsmd, and uses rsmd
  to find out how many columns rs has and whether the first column in rs
  can be used in a <code>WHERE</code> clause. 
 @code

      ResultSet rs = stmt.executeQuery("SELECT a, b, c FROM TABLE2");
      ResultSetMetaData rsmd = rs.getMetaData();
      int numberOfColumns = rsmd.getColumnCount();
      boolean b = rsmd.isSearchable(1); 
  
@endcode
 */
@protocol JavaSqlResultSetMetaData < JavaSqlWrapper, JavaObject >

/*!
 @brief Returns the number of columns in this <code>ResultSet</code> object.
 @return the number of columns
 @throw SQLExceptionif a database access error occurs
 */
- (jint)getColumnCount;

/*!
 @brief Indicates whether the designated column is automatically numbered.
 @param column the first column is 1, the second is 2, ...
 @return <code>true</code> if so; <code>false</code> otherwise
 @throw SQLExceptionif a database access error occurs
 */
- (jboolean)isAutoIncrementWithInt:(jint)column;

/*!
 @brief Indicates whether a column's case matters.
 @param column the first column is 1, the second is 2, ...
 @return <code>true</code> if so; <code>false</code> otherwise
 @throw SQLExceptionif a database access error occurs
 */
- (jboolean)isCaseSensitiveWithInt:(jint)column;

/*!
 @brief Indicates whether the designated column can be used in a where clause.
 @param column the first column is 1, the second is 2, ...
 @return <code>true</code> if so; <code>false</code> otherwise
 @throw SQLExceptionif a database access error occurs
 */
- (jboolean)isSearchableWithInt:(jint)column;

/*!
 @brief Indicates whether the designated column is a cash value.
 @param column the first column is 1, the second is 2, ...
 @return <code>true</code> if so; <code>false</code> otherwise
 @throw SQLExceptionif a database access error occurs
 */
- (jboolean)isCurrencyWithInt:(jint)column;

/*!
 @brief Indicates the nullability of values in the designated column.
 @param column the first column is 1, the second is 2, ...
 @return the nullability status of the given column; one of <code>columnNoNulls</code>,
           <code>columnNullable</code> or <code>columnNullableUnknown</code>
 @throw SQLExceptionif a database access error occurs
 */
- (jint)isNullableWithInt:(jint)column;

/*!
 @brief Indicates whether values in the designated column are signed numbers.
 @param column the first column is 1, the second is 2, ...
 @return <code>true</code> if so; <code>false</code> otherwise
 @throw SQLExceptionif a database access error occurs
 */
- (jboolean)isSignedWithInt:(jint)column;

/*!
 @brief Indicates the designated column's normal maximum width in characters.
 @param column the first column is 1, the second is 2, ...
 @return the normal maximum number of characters allowed as the width
           of the designated column
 @throw SQLExceptionif a database access error occurs
 */
- (jint)getColumnDisplaySizeWithInt:(jint)column;

/*!
 @brief Gets the designated column's suggested title for use in printouts and
  displays.The suggested title is usually specified by the SQL <code>AS</code>
  clause.
 If a SQL <code>AS</code> is not specified, the value returned from 
 <code>getColumnLabel</code> will be the same as the value returned by the 
 <code>getColumnName</code> method.
 @param column the first column is 1, the second is 2, ...
 @return the suggested column title
 @throw SQLExceptionif a database access error occurs
 */
- (NSString *)getColumnLabelWithInt:(jint)column;

/*!
 @brief Get the designated column's name.
 @param column the first column is 1, the second is 2, ...
 @return column name
 @throw SQLExceptionif a database access error occurs
 */
- (NSString *)getColumnNameWithInt:(jint)column;

/*!
 @brief Get the designated column's table's schema.
 @param column the first column is 1, the second is 2, ...
 @return schema name or "" if not applicable
 @throw SQLExceptionif a database access error occurs
 */
- (NSString *)getSchemaNameWithInt:(jint)column;

/*!
 @brief Get the designated column's specified column size.
 For numeric data, this is the maximum precision.  For character data, this is the length in characters.
  For datetime datatypes, this is the length in characters of the String representation (assuming the
  maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype,
  this is the length in bytes. 0 is returned for data types where the
  column size is not applicable.
 @param column the first column is 1, the second is 2, ...
 @return precision
 @throw SQLExceptionif a database access error occurs
 */
- (jint)getPrecisionWithInt:(jint)column;

/*!
 @brief Gets the designated column's number of digits to right of the decimal point.
 0 is returned for data types where the scale is not applicable.
 @param column the first column is 1, the second is 2, ...
 @return scale
 @throw SQLExceptionif a database access error occurs
 */
- (jint)getScaleWithInt:(jint)column;

/*!
 @brief Gets the designated column's table name.
 @param column the first column is 1, the second is 2, ...
 @return table name or "" if not applicable
 @throw SQLExceptionif a database access error occurs
 */
- (NSString *)getTableNameWithInt:(jint)column;

/*!
 @brief Gets the designated column's table's catalog name.
 @param column the first column is 1, the second is 2, ...
 @return the name of the catalog for the table in which the given column
           appears or "" if not applicable
 @throw SQLExceptionif a database access error occurs
 */
- (NSString *)getCatalogNameWithInt:(jint)column;

/*!
 @brief Retrieves the designated column's SQL type.
 @param column the first column is 1, the second is 2, ...
 @return SQL type from java.sql.Types
 @throw SQLExceptionif a database access error occurs
 - seealso: Types
 */
- (jint)getColumnTypeWithInt:(jint)column;

/*!
 @brief Retrieves the designated column's database-specific type name.
 @param column the first column is 1, the second is 2, ...
 @return type name used by the database. If the column type is
  a user-defined type, then a fully-qualified type name is returned.
 @throw SQLExceptionif a database access error occurs
 */
- (NSString *)getColumnTypeNameWithInt:(jint)column;

/*!
 @brief Indicates whether the designated column is definitely not writable.
 @param column the first column is 1, the second is 2, ...
 @return <code>true</code> if so; <code>false</code> otherwise
 @throw SQLExceptionif a database access error occurs
 */
- (jboolean)isReadOnlyWithInt:(jint)column;

/*!
 @brief Indicates whether it is possible for a write on the designated column to succeed.
 @param column the first column is 1, the second is 2, ...
 @return <code>true</code> if so; <code>false</code> otherwise
 @throw SQLExceptionif a database access error occurs
 */
- (jboolean)isWritableWithInt:(jint)column;

/*!
 @brief Indicates whether a write on the designated column will definitely succeed.
 @param column the first column is 1, the second is 2, ...
 @return <code>true</code> if so; <code>false</code> otherwise
 @throw SQLExceptionif a database access error occurs
 */
- (jboolean)isDefinitelyWritableWithInt:(jint)column;

/*!
 @brief <p>Returns the fully-qualified name of the Java class whose instances
  are manufactured if the method <code>ResultSet.getObject</code>
  is called to retrieve a value
  from the column.
 <code>ResultSet.getObject</code> may return a subclass of the
  class returned by this method.
 @param column the first column is 1, the second is 2, ...
 @return the fully-qualified name of the class in the Java programming
          language that would be used by the method 
 <code>ResultSet.getObject</code> to retrieve the value in the specified
  column. This is the class name used for custom mapping.
 @throw SQLExceptionif a database access error occurs
 @since 1.2
 */
- (NSString *)getColumnClassNameWithInt:(jint)column;

@end

@interface JavaSqlResultSetMetaData : NSObject
@property (readonly, class) jint columnNoNulls NS_SWIFT_NAME(columnNoNulls);
@property (readonly, class) jint columnNullable NS_SWIFT_NAME(columnNullable);
@property (readonly, class) jint columnNullableUnknown NS_SWIFT_NAME(columnNullableUnknown);

+ (jint)columnNoNulls;

+ (jint)columnNullable;

+ (jint)columnNullableUnknown;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaSqlResultSetMetaData)

/*!
 @brief The constant indicating that a
  column does not allow <code>NULL</code> values.
 */
inline jint JavaSqlResultSetMetaData_get_columnNoNulls(void);
#define JavaSqlResultSetMetaData_columnNoNulls 0
J2OBJC_STATIC_FIELD_CONSTANT(JavaSqlResultSetMetaData, columnNoNulls, jint)

/*!
 @brief The constant indicating that a
  column allows <code>NULL</code> values.
 */
inline jint JavaSqlResultSetMetaData_get_columnNullable(void);
#define JavaSqlResultSetMetaData_columnNullable 1
J2OBJC_STATIC_FIELD_CONSTANT(JavaSqlResultSetMetaData, columnNullable, jint)

/*!
 @brief The constant indicating that the
  nullability of a column's values is unknown.
 */
inline jint JavaSqlResultSetMetaData_get_columnNullableUnknown(void);
#define JavaSqlResultSetMetaData_columnNullableUnknown 2
J2OBJC_STATIC_FIELD_CONSTANT(JavaSqlResultSetMetaData, columnNullableUnknown, jint)

J2OBJC_TYPE_LITERAL_HEADER(JavaSqlResultSetMetaData)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaSqlResultSetMetaData")
