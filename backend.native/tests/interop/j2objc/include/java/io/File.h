//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/io/File.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaIoFile")
#ifdef RESTRICT_JavaIoFile
#define INCLUDE_ALL_JavaIoFile 0
#else
#define INCLUDE_ALL_JavaIoFile 1
#endif
#undef RESTRICT_JavaIoFile

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaIoFile_) && (INCLUDE_ALL_JavaIoFile || defined(INCLUDE_JavaIoFile))
#define JavaIoFile_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "java/lang/Comparable.h"

@class IOSObjectArray;
@class JavaNetURI;
@class JavaNetURL;
@protocol JavaIoFileFilter;
@protocol JavaIoFilenameFilter;

/*!
 @brief An "abstract" representation of a file system entity identified by a
  pathname.The pathname may be absolute (relative to the root directory
  of the file system) or relative to the current directory in which the program
  is running.
 <p>The actual file referenced by a <code>File</code> may or may not exist. It may
  also, despite the name <code>File</code>, be a directory or other non-regular
  file. 
 <p>This class provides limited functionality for getting/setting file
  permissions, file type, and last modified time. 
 <p>On Android strings are converted to UTF-8 byte sequences when sending filenames to
  the operating system, and byte sequences returned by the operating system (from the
  various <code>list</code> methods) are converted to strings by decoding them as UTF-8
  byte sequences.
 - seealso: java.io.Serializable
 - seealso: java.lang.Comparable
 */
@interface JavaIoFile : NSObject < JavaIoSerializable, JavaLangComparable >
@property (readonly, class) jchar separatorChar NS_SWIFT_NAME(separatorChar);
@property (readonly, copy, class) NSString *separator NS_SWIFT_NAME(separator);
@property (readonly, class) jchar pathSeparatorChar NS_SWIFT_NAME(pathSeparatorChar);
@property (readonly, copy, class) NSString *pathSeparator NS_SWIFT_NAME(pathSeparator);

+ (jchar)separatorChar;

+ (NSString *)separator;

+ (jchar)pathSeparatorChar;

+ (NSString *)pathSeparator;

#pragma mark Public

/*!
 @brief Constructs a new file using the specified directory and name.
 @param dir the directory where the file is stored.
 @param name the file's name.
 @throw NullPointerException
 if <code>name</code> is <code>null</code>.
 */
- (instancetype __nonnull)initWithJavaIoFile:(JavaIoFile *)dir
                                withNSString:(NSString *)name;

/*!
 @brief Constructs a new file using the specified path.
 @param path the path to be used for the file.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)path;

/*!
 @brief Constructs a new File using the specified directory path and file name,
  placing a path separator between the two.
 @param dirPath the path to the directory where the file is stored.
 @param name the file's name.
 @throw NullPointerException
 if <code>name == null</code>.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)dirPath
                              withNSString:(NSString *)name;

/*!
 @brief Constructs a new File using the path of the specified URI.
 <code>uri</code>
  needs to be an absolute and hierarchical Unified Resource Identifier with
  file scheme and non-empty path component, but with undefined authority,
  query or fragment components.
 @param uri the Unified Resource Identifier that is used to construct this
              file.
 @throw IllegalArgumentException
 if <code>uri</code> does not comply with the conditions above.
 - seealso: #toURI
 - seealso: java.net.URI
 */
- (instancetype __nonnull)initWithJavaNetURI:(JavaNetURI *)uri;

/*!
 @brief Tests whether or not this process is allowed to execute this file.
 Note that this is a best-effort result; the only way to be certain is
  to actually attempt the operation.
 @return <code>true</code> if this file can be executed, <code>false</code> otherwise.
 @since 1.6
 */
- (jboolean)canExecute;

/*!
 @brief Indicates whether the current context is allowed to read from this file.
 @return <code>true</code> if this file can be read, <code>false</code> otherwise.
 */
- (jboolean)canRead;

/*!
 @brief Indicates whether the current context is allowed to write to this file.
 @return <code>true</code> if this file can be written, <code>false</code>
          otherwise.
 */
- (jboolean)canWrite;

/*!
 @brief Returns the relative sort ordering of the paths for this file and the file 
 <code>another</code>.The ordering is platform dependent.
 @param another a file to compare this file to
 @return an int determined by comparing the two paths. Possible values are
          described in the Comparable interface.
 - seealso: Comparable
 */
- (jint)compareToWithId:(JavaIoFile *)another;

/*!
 @brief Creates a new, empty file on the file system according to the path
  information stored in this file.This method returns true if it creates
  a file, false if the file already existed.
 Note that it returns false
  even if the file is not a file (because it's a directory, say). 
 <p>This method is not generally useful. For creating temporary files,
  use <code>createTempFile</code> instead. For reading/writing files, use <code>FileInputStream</code>,
  <code>FileOutputStream</code>, or <code>RandomAccessFile</code>, all of which can create files. 
 <p>Note that this method does <i>not</i> throw <code>IOException</code> if the file
  already exists, even if it's not a regular file. Callers should always check the
  return value, and may additionally want to call <code>isFile</code>.
 @return true if the file has been created, false if it
          already exists.
 @throw IOExceptionif it's not possible to create the file.
 */
- (jboolean)createNewFile;

/*!
 @brief Creates an empty temporary file using the given prefix and suffix as part
  of the file name.If <code>suffix</code> is null, <code>.tmp</code> is used.
 This
  method is a convenience method that calls 
 <code>createTempFile(String, String, File)</code> with the third argument
  being <code>null</code>.
 @param prefix the prefix to the temp file name.
 @param suffix the suffix to the temp file name.
 @return the temporary file.
 @throw IOException
 if an error occurs when writing the file.
 */
+ (JavaIoFile * __nonnull)createTempFileWithNSString:(NSString *)prefix
                                        withNSString:(NSString *)suffix;

/*!
 @brief Creates an empty temporary file in the given directory using the given
  prefix and suffix as part of the file name.If <code>suffix</code> is null, <code>.tmp</code> is used.
 <p>Note that this method does <i>not</i> call <code>deleteOnExit</code>, but see the
  documentation for that method before you call it manually.
 @param prefix the prefix to the temp file name.
 @param suffix the suffix to the temp file name.
 @param directory the location to which the temp file is to be written, or
              <code>null</code>
   for the default location for temporary files,             which is taken from the "java.io.tmpdir" system property. It
              may be necessary to set this property to an existing, writable
              directory for this method to work properly.
 @return the temporary file.
 @throw IllegalArgumentException
 if the length of <code>prefix</code> is less than 3.
 @throw IOException
 if an error occurs when writing the file.
 */
+ (JavaIoFile * __nonnull)createTempFileWithNSString:(NSString *)prefix
                                        withNSString:(NSString *)suffix
                                      withJavaIoFile:(JavaIoFile *)directory;

/*!
 @brief Deletes this file.Directories must be empty before they will be deleted.
 <p>Note that this method does <i>not</i> throw <code>IOException</code> on failure.
  Callers must check the return value.
 @return <code>true</code> if this file was deleted, <code>false</code> otherwise.
 */
- (jboolean)delete__;

/*!
 @brief Schedules this file to be automatically deleted when the VM terminates normally.
 <p><i>Note that on Android, the application lifecycle does not include VM termination,
  so calling this method will not ensure that files are deleted</i>. Instead, you should
  use the most appropriate out of: 
 <ul>
  <li>Use a <code>finally</code> clause to manually invoke <code>delete</code>.
  <li>Maintain your own set of files to delete, and process it at an appropriate point
  in your application's lifecycle. 
 <li>Use the Unix trick of deleting the file as soon as all readers and writers have
  opened it. No new readers/writers will be able to access the file, but all existing
  ones will still have access until the last one closes the file. 
 </ul>
 */
- (void)deleteOnExit;

/*!
 @brief Compares <code>obj</code> to this file and returns <code>true</code> if they
  represent the <em>same</em> object using a path specific comparison.
 @param obj the object to compare this file with.
 @return <code>true</code> if <code>obj</code> is the same as this object,
          <code>false</code> otherwise.
 */
- (jboolean)isEqual:(id)obj;

/*!
 @brief Returns a boolean indicating whether this file can be found on the
  underlying file system.
 @return <code>true</code> if this file exists, <code>false</code> otherwise.
 */
- (jboolean)exists;

/*!
 @brief Returns a new file constructed using the absolute path of this file.
 Equivalent to <code>new File(this.getAbsolutePath())</code>.
 */
- (JavaIoFile * __nonnull)getAbsoluteFile;

/*!
 @brief Returns the absolute path of this file.An absolute path is a path that starts at a root
  of the file system.
 On Android, there is only one root: <code>/</code>.
  
 <p>A common use for absolute paths is when passing paths to a <code>Process</code> as
  command-line arguments, to remove the requirement implied by relative paths, that the
  child must have the same working directory as its parent.
 */
- (NSString * __nonnull)getAbsolutePath;

/*!
 @brief Returns a new file created using the canonical path of this file.
 Equivalent to <code>new File(this.getCanonicalPath())</code>.
 @return the new file constructed from this file's canonical path.
 @throw IOException
 if an I/O error occurs.
 */
- (JavaIoFile * __nonnull)getCanonicalFile;

/*!
 @brief Returns the canonical path of this file.
 An <i>absolute</i> path is one that begins at the root of the file system.
  A <i>canonical</i> path is an absolute path with symbolic links
  and references to "." or ".." resolved. If a path element does not exist (or
  is not searchable), there is a conflict between interpreting canonicalization
  as a textual operation (where "a/../b" is "b" even if "a" does not exist) . 
 <p>Most callers should use <code>getAbsolutePath</code> instead. A canonical path is
  significantly more expensive to compute, and not generally useful. The primary
  use for canonical paths is determining whether two paths point to the same file by
  comparing the canonicalized paths. 
 <p>It can be actively harmful to use a canonical path, specifically because
  canonicalization removes symbolic links. It's wise to assume that a symbolic link
  is present for a reason, and that that reason is because the link may need to change.
  Canonicalization removes this layer of indirection. Good code should generally avoid
  caching canonical paths.
 @return the canonical path of this file.
 @throw IOException
 if an I/O error occurs.
 */
- (NSString * __nonnull)getCanonicalPath;

/*!
 @brief Returns the number of free bytes on the partition containing this path.
 Returns 0 if this path does not exist. 
 <p>Note that this is likely to be an optimistic over-estimate and should not
  be taken as a guarantee your application can actually write this many bytes.
 @since 1.6
 */
- (jlong)getFreeSpace;

/*!
 @brief Returns the name of the file or directory represented by this file.
 @return this file's name or an empty string if there is no name part in
          the file's path.
 */
- (NSString * __nonnull)getName;

/*!
 @brief Returns the pathname of the parent of this file.This is the path up to
  but not including the last name.
 <code>null</code> is returned if there is no
  parent.
 @return this file's parent pathname or <code>null</code>.
 */
- (NSString * __nullable)getParent;

/*!
 @brief Returns a new file made from the pathname of the parent of this file.
 This is the path up to but not including the last name. <code>null</code> is
  returned when there is no parent.
 @return a new file representing this file's parent or <code>null</code>.
 */
- (JavaIoFile * __nullable)getParentFile;

/*!
 @brief Returns the path of this file.
 */
- (NSString * __nonnull)getPath;

/*!
 @brief Returns the total size in bytes of the partition containing this path.
 Returns 0 if this path does not exist.
 @since 1.6
 */
- (jlong)getTotalSpace;

/*!
 @brief Returns the number of usable free bytes on the partition containing this path.
 Returns 0 if this path does not exist. 
 <p>Note that this is likely to be an optimistic over-estimate and should not
  be taken as a guarantee your application can actually write this many bytes.
  On Android (and other Unix-based systems), this method returns the number of free bytes
  available to non-root users, regardless of whether you're actually running as root,
  and regardless of any quota or other restrictions that might apply to the user.
  (The <code>getFreeSpace</code> method returns the number of bytes potentially available to root.)
 @since 1.6
 */
- (jlong)getUsableSpace;

/*!
 @brief Returns an integer hash code for the receiver.Any two objects for which 
 <code>equals</code> returns <code>true</code> must return the same hash code.
 @return this files's hash value.
 - seealso: #equals
 */
- (NSUInteger)hash;

/*!
 @brief Indicates if this file's pathname is absolute.Whether a pathname is
  absolute is platform specific.
 On Android, absolute paths start with
  the character '/'.
 @return <code>true</code> if this file's pathname is absolute, <code>false</code>
          otherwise.
 - seealso: #getPath
 */
- (jboolean)isAbsolute;

/*!
 @brief Indicates if this file represents a <em>directory</em> on the
  underlying file system.
 @return <code>true</code> if this file is a directory, <code>false</code>
          otherwise.
 */
- (jboolean)isDirectory;

/*!
 @brief Indicates if this file represents a <em>file</em> on the underlying
  file system.
 @return <code>true</code> if this file is a file, <code>false</code> otherwise.
 */
- (jboolean)isFile;

/*!
 @brief Returns whether or not this file is a hidden file as defined by the
  operating system.The notion of "hidden" is system-dependent.
 For Unix
  systems a file is considered hidden if its name starts with a ".". For
  Windows systems there is an explicit flag in the file system for this
  purpose.
 @return <code>true</code> if the file is hidden, <code>false</code> otherwise.
 */
- (jboolean)isHidden;

/*!
 @brief Returns the time when this file was last modified, measured in
  milliseconds since January 1st, 1970, midnight.
 Returns 0 if the file does not exist.
 @return the time when this file was last modified.
 */
- (jlong)lastModified;

/*!
 @brief Returns the length of this file in bytes.
 Returns 0 if the file does not exist.
  The result for a directory is not defined.
 @return the number of bytes in this file.
 */
- (jlong)length;

/*!
 @brief Returns an array of strings with the file names in the directory
  represented by this file.The result is <code>null</code> if this file is not
  a directory.
 <p>
  The entries <code>.</code> and <code>..</code> representing the current and parent
  directory are not returned as part of the list.
 @return an array of strings with file names or <code>null</code>.
 */
- (IOSObjectArray * __nullable)list;

/*!
 @brief Gets a list of the files in the directory represented by this file.This
  list is then filtered through a FilenameFilter and the names of files
  with matching names are returned as an array of strings.
 Returns 
 <code>null</code> if this file is not a directory. If <code>filter</code> is 
 <code>null</code> then all filenames match. 
 <p>
  The entries <code>.</code> and <code>..</code> representing the current and parent
  directories are not returned as part of the list.
 @param filter the filter to match names against, may be 
 <code>null</code> .
 @return an array of files or <code>null</code>.
 */
- (IOSObjectArray * __nullable)listWithJavaIoFilenameFilter:(id<JavaIoFilenameFilter>)filter;

/*!
 @brief Returns an array of files contained in the directory represented by this
  file.The result is <code>null</code> if this file is not a directory.
 The
  paths of the files in the array are absolute if the path of this file is
  absolute, they are relative otherwise.
 @return an array of files or <code>null</code>.
 */
- (IOSObjectArray * __nullable)listFiles;

/*!
 @brief Gets a list of the files in the directory represented by this file.This
  list is then filtered through a FileFilter and matching files are
  returned as an array of files.
 Returns <code>null</code> if this file is not a
  directory. If <code>filter</code> is <code>null</code> then all files match. 
 <p>
  The entries <code>.</code> and <code>..</code> representing the current and parent
  directories are not returned as part of the list.
 @param filter the filter to match names against, may be 
 <code>null</code> .
 @return an array of files or <code>null</code>.
 */
- (IOSObjectArray * __nullable)listFilesWithJavaIoFileFilter:(id<JavaIoFileFilter>)filter;

/*!
 @brief Gets a list of the files in the directory represented by this file.This
  list is then filtered through a FilenameFilter and files with matching
  names are returned as an array of files.
 Returns <code>null</code> if this
  file is not a directory. If <code>filter</code> is <code>null</code> then all
  filenames match. 
 <p>
  The entries <code>.</code> and <code>..</code> representing the current and parent
  directories are not returned as part of the list.
 @param filter the filter to match names against, may be 
 <code>null</code> .
 @return an array of files or <code>null</code>.
 */
- (IOSObjectArray * __nullable)listFilesWithJavaIoFilenameFilter:(id<JavaIoFilenameFilter>)filter;

/*!
 @brief Returns the file system roots.On Android and other Unix systems, there is
  a single root, <code>/</code>.
 */
+ (IOSObjectArray * __nonnull)listRoots;

/*!
 @brief Creates the directory named by this file, assuming its parents exist.
 Use <code>mkdirs</code> if you also want to create missing parents. 
 <p>Note that this method does <i>not</i> throw <code>IOException</code> on failure.
  Callers must check the return value. Note also that this method returns
  false if the directory already existed. If you want to know whether the
  directory exists on return, either use <code>(f.mkdir() || f.isDirectory())</code>
  or simply ignore the return value from this method and simply call <code>isDirectory</code>.
 @return <code>true</code> if the directory was created,
          <code>false</code> on failure or if the directory already existed.
 */
- (jboolean)mkdir;

/*!
 @brief Creates the directory named by this file, creating missing parent
  directories if necessary.
 Use <code>mkdir</code> if you don't want to create missing parents. 
 <p>Note that this method does <i>not</i> throw <code>IOException</code> on failure.
  Callers must check the return value. Note also that this method returns
  false if the directory already existed. If you want to know whether the
  directory exists on return, either use <code>(f.mkdirs() || f.isDirectory())</code>
  or simply ignore the return value from this method and simply call <code>isDirectory</code>.
 @return <code>true</code> if the directory was created,
          <code>false</code> on failure or if the directory already existed.
 */
- (jboolean)mkdirs;

/*!
 @brief Renames this file to <code>newPath</code>.This operation is supported for both
  files and directories.
 <p>Many failures are possible. Some of the more likely failures include: 
 <ul>
  <li>Write permission is required on the directories containing both the source and
  destination paths. 
 <li>Search permission is required for all parents of both paths. 
 <li>Both paths be on the same mount point. On Android, applications are most likely to hit
  this restriction when attempting to copy between internal storage and an SD card. 
 </ul>
  
 <p>Note that this method does <i>not</i> throw <code>IOException</code> on failure.
  Callers must check the return value.
 @param newPath the new path.
 @return true on success.
 */
- (jboolean)renameToWithJavaIoFile:(JavaIoFile *)newPath;

/*!
 @brief Equivalent to setExecutable(executable, true).
 - seealso: #setExecutable(boolean, boolean)
 @since 1.6
 */
- (jboolean)setExecutableWithBoolean:(jboolean)executable;

/*!
 @brief Manipulates the execute permissions for the abstract path designated by
  this file.
 <p>Note that this method does <i>not</i> throw <code>IOException</code> on failure.
  Callers must check the return value.
 @param executable To allow execute permission if true, otherwise disallow
 @param ownerOnly To manipulate execute permission only for owner if true,
              otherwise for everyone. The manipulation will apply to
              everyone regardless of this value if the underlying system
              does not distinguish owner and other users.
 @return true if and only if the operation succeeded. If the user does not
          have permission to change the access permissions of this abstract
          pathname the operation will fail. If the underlying file system
          does not support execute permission and the value of executable
          is false, this operation will fail.
 @since 1.6
 */
- (jboolean)setExecutableWithBoolean:(jboolean)executable
                         withBoolean:(jboolean)ownerOnly;

/*!
 @brief Sets the time this file was last modified, measured in milliseconds since
  January 1st, 1970, midnight.
 <p>Note that this method does <i>not</i> throw <code>IOException</code> on failure.
  Callers must check the return value.
 @param time the last modification time for this file.
 @return <code>true</code> if the operation is successful, <code>false</code>
          otherwise.
 @throw IllegalArgumentException
 if <code>time < 0</code>.
 */
- (jboolean)setLastModifiedWithLong:(jlong)time;

/*!
 @brief Equivalent to setReadable(readable, true).
 - seealso: #setReadable(boolean, boolean)
 @since 1.6
 */
- (jboolean)setReadableWithBoolean:(jboolean)readable;

/*!
 @brief Manipulates the read permissions for the abstract path designated by this
  file.
 @param readable To allow read permission if true, otherwise disallow
 @param ownerOnly To manipulate read permission only for owner if true,
              otherwise for everyone. The manipulation will apply to
              everyone regardless of this value if the underlying system
              does not distinguish owner and other users.
 @return true if and only if the operation succeeded. If the user does not
          have permission to change the access permissions of this abstract
          pathname the operation will fail. If the underlying file system
          does not support read permission and the value of readable is
          false, this operation will fail.
 @since 1.6
 */
- (jboolean)setReadableWithBoolean:(jboolean)readable
                       withBoolean:(jboolean)ownerOnly;

/*!
 @brief Equivalent to setWritable(false, false).
 - seealso: #setWritable(boolean, boolean)
 */
- (jboolean)setReadOnly;

/*!
 @brief Equivalent to setWritable(writable, true).
 - seealso: #setWritable(boolean, boolean)
 @since 1.6
 */
- (jboolean)setWritableWithBoolean:(jboolean)writable;

/*!
 @brief Manipulates the write permissions for the abstract path designated by this
  file.
 @param writable To allow write permission if true, otherwise disallow
 @param ownerOnly To manipulate write permission only for owner if true,
              otherwise for everyone. The manipulation will apply to
              everyone regardless of this value if the underlying system
              does not distinguish owner and other users.
 @return true if and only if the operation succeeded. If the user does not
          have permission to change the access permissions of this abstract
          pathname the operation will fail.
 @since 1.6
 */
- (jboolean)setWritableWithBoolean:(jboolean)writable
                       withBoolean:(jboolean)ownerOnly;

/*!
 @brief Returns a string containing a concise, human-readable description of this
  file.
 @return a printable representation of this file.
 */
- (NSString * __nonnull)description;

/*!
 @brief Returns a Uniform Resource Identifier for this file.The URI is system
  dependent and may not be transferable between different operating / file
  systems.
 @return an URI for this file.
 */
- (JavaNetURI * __nonnull)toURI;

/*!
 @brief Returns a Uniform Resource Locator for this file.The URL is system
  dependent and may not be transferable between different operating / file
  systems.
 @return a URL for this file.
 @throw java.net.MalformedURLException
 if the path cannot be transformed into a URL.
 */
- (JavaNetURL * __nonnull)toURL __attribute__((deprecated));

#pragma mark Package-Private

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(JavaIoFile)

/*!
 @brief The system-dependent character used to separate components in filenames ('/').
 Use of this (rather than hard-coding '/') helps portability to other operating systems. 
 <p>This field is initialized from the system property "file.separator".
  Later changes to that property will have no effect on this field or this class.
 */
inline jchar JavaIoFile_get_separatorChar(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jchar JavaIoFile_separatorChar;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(JavaIoFile, separatorChar, jchar)

/*!
 @brief The system-dependent string used to separate components in filenames ('/').
 See <code>separatorChar</code>.
 */
inline NSString *JavaIoFile_get_separator(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *JavaIoFile_separator;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaIoFile, separator, NSString *)

/*!
 @brief The system-dependent character used to separate components in search paths (':').
 This is used to split such things as the PATH environment variable and classpath
  system properties into lists of directories to be searched. 
 <p>This field is initialized from the system property "path.separator".
  Later changes to that property will have no effect on this field or this class.
 */
inline jchar JavaIoFile_get_pathSeparatorChar(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jchar JavaIoFile_pathSeparatorChar;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(JavaIoFile, pathSeparatorChar, jchar)

/*!
 @brief The system-dependent string used to separate components in search paths (":").
 See <code>pathSeparatorChar</code>.
 */
inline NSString *JavaIoFile_get_pathSeparator(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *JavaIoFile_pathSeparator;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaIoFile, pathSeparator, NSString *)

FOUNDATION_EXPORT void JavaIoFile_initWithJavaIoFile_withNSString_(JavaIoFile *self, JavaIoFile *dir, NSString *name);

FOUNDATION_EXPORT JavaIoFile *new_JavaIoFile_initWithJavaIoFile_withNSString_(JavaIoFile *dir, NSString *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaIoFile *create_JavaIoFile_initWithJavaIoFile_withNSString_(JavaIoFile *dir, NSString *name);

FOUNDATION_EXPORT void JavaIoFile_initWithNSString_(JavaIoFile *self, NSString *path);

FOUNDATION_EXPORT JavaIoFile *new_JavaIoFile_initWithNSString_(NSString *path) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaIoFile *create_JavaIoFile_initWithNSString_(NSString *path);

FOUNDATION_EXPORT void JavaIoFile_initWithNSString_withNSString_(JavaIoFile *self, NSString *dirPath, NSString *name);

FOUNDATION_EXPORT JavaIoFile *new_JavaIoFile_initWithNSString_withNSString_(NSString *dirPath, NSString *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaIoFile *create_JavaIoFile_initWithNSString_withNSString_(NSString *dirPath, NSString *name);

FOUNDATION_EXPORT void JavaIoFile_initWithJavaNetURI_(JavaIoFile *self, JavaNetURI *uri);

FOUNDATION_EXPORT JavaIoFile *new_JavaIoFile_initWithJavaNetURI_(JavaNetURI *uri) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaIoFile *create_JavaIoFile_initWithJavaNetURI_(JavaNetURI *uri);

FOUNDATION_EXPORT IOSObjectArray *JavaIoFile_listRoots(void);

FOUNDATION_EXPORT JavaIoFile *JavaIoFile_createTempFileWithNSString_withNSString_(NSString *prefix, NSString *suffix);

FOUNDATION_EXPORT JavaIoFile *JavaIoFile_createTempFileWithNSString_withNSString_withJavaIoFile_(NSString *prefix, NSString *suffix, JavaIoFile *directory);

J2OBJC_TYPE_LITERAL_HEADER(JavaIoFile)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaIoFile")
