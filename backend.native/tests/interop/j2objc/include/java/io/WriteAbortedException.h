//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/io/WriteAbortedException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaIoWriteAbortedException")
#ifdef RESTRICT_JavaIoWriteAbortedException
#define INCLUDE_ALL_JavaIoWriteAbortedException 0
#else
#define INCLUDE_ALL_JavaIoWriteAbortedException 1
#endif
#undef RESTRICT_JavaIoWriteAbortedException

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaIoWriteAbortedException_) && (INCLUDE_ALL_JavaIoWriteAbortedException || defined(INCLUDE_JavaIoWriteAbortedException))
#define JavaIoWriteAbortedException_

#define RESTRICT_JavaIoObjectStreamException 1
#define INCLUDE_JavaIoObjectStreamException 1
#include "java/io/ObjectStreamException.h"

@class JavaLangException;
@class JavaLangThrowable;

/*!
 @brief Signals that one of the ObjectStreamExceptions was thrown during a
  write operation.Thrown during a read operation when one of the
  ObjectStreamExceptions was thrown during a write operation.
 The
  exception that terminated the write can be found in the detail
  field. The stream is reset to it's initial state and all references
  to objects already deserialized are discarded. 
 <p>As of release 1.4, this exception has been retrofitted to conform to
  the general purpose exception-chaining mechanism.  The "exception causing
  the abort" that is provided at construction time and
  accessed via the public <code>detail</code> field is now known as the 
 <i>cause</i>, and may be accessed via the <code>Throwable.getCause()</code>
  method, as well as the aforementioned "legacy field."
 @author unascribed
 @since JDK1.1
 */
@interface JavaIoWriteAbortedException : JavaIoObjectStreamException {
 @public
  /*!
   @brief Exception that was caught while writing the ObjectStream.
   <p>This field predates the general-purpose exception chaining facility.
  The <code>Throwable.getCause()</code> method is now the preferred means of
  obtaining this information.
   */
  JavaLangException *detail_;
}

#pragma mark Public

/*!
 @brief Constructs a WriteAbortedException with a string describing
  the exception and the exception causing the abort.
 @param s String describing the exception.
 @param ex Exception causing the abort.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)s
                     withJavaLangException:(JavaLangException *)ex;

/*!
 @brief Returns the exception that terminated the operation (the <i>cause</i>).
 @return the exception that terminated the operation (the <i>cause</i>),
           which may be null.
 @since 1.4
 */
- (JavaLangThrowable *)getCause;

/*!
 @brief Produce the message and include the message from the nested
  exception, if there is one.
 */
- (NSString *)getMessage;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaIoWriteAbortedException)

J2OBJC_FIELD_SETTER(JavaIoWriteAbortedException, detail_, JavaLangException *)

FOUNDATION_EXPORT void JavaIoWriteAbortedException_initWithNSString_withJavaLangException_(JavaIoWriteAbortedException *self, NSString *s, JavaLangException *ex);

FOUNDATION_EXPORT JavaIoWriteAbortedException *new_JavaIoWriteAbortedException_initWithNSString_withJavaLangException_(NSString *s, JavaLangException *ex) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaIoWriteAbortedException *create_JavaIoWriteAbortedException_initWithNSString_withJavaLangException_(NSString *s, JavaLangException *ex);

J2OBJC_TYPE_LITERAL_HEADER(JavaIoWriteAbortedException)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaIoWriteAbortedException")
