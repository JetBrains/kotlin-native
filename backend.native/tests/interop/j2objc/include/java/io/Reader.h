//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/io/Reader.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaIoReader")
#ifdef RESTRICT_JavaIoReader
#define INCLUDE_ALL_JavaIoReader 0
#else
#define INCLUDE_ALL_JavaIoReader 1
#endif
#undef RESTRICT_JavaIoReader

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaIoReader_) && (INCLUDE_ALL_JavaIoReader || defined(INCLUDE_JavaIoReader))
#define JavaIoReader_

#define RESTRICT_JavaLangReadable 1
#define INCLUDE_JavaLangReadable 1
#include "java/lang/Readable.h"

#define RESTRICT_JavaIoCloseable 1
#define INCLUDE_JavaIoCloseable 1
#include "java/io/Closeable.h"

@class IOSCharArray;
@class JavaNioCharBuffer;

/*!
 @brief Abstract class for reading character streams.The only methods that a
  subclass must implement are read(char[], int, int) and close().
 Most
  subclasses, however, will override some of the methods defined here in order
  to provide higher efficiency, additional functionality, or both.
 - seealso: BufferedReader
 - seealso: LineNumberReader
 - seealso: CharArrayReader
 - seealso: InputStreamReader
 - seealso: FileReader
 - seealso: FilterReader
 - seealso: PushbackReader
 - seealso: PipedReader
 - seealso: StringReader
 - seealso: Writer
 @author Mark Reinhold
 @since JDK1.1
 */
@interface JavaIoReader : NSObject < JavaLangReadable, JavaIoCloseable > {
 @public
  /*!
   @brief The object used to synchronize operations on this stream.For
  efficiency, a character-stream object may use an object other than
  itself to protect critical sections.
   A subclass should therefore use
  the object in this field rather than <tt>this</tt> or a synchronized
  method.
   */
  id lock_;
}

#pragma mark Public

/*!
 @brief Closes the stream and releases any system resources associated with
  it.Once the stream has been closed, further read(), ready(),
  mark(), reset(), or skip() invocations will throw an IOException.
 Closing a previously closed stream has no effect.
 @throw IOExceptionIf an I/O error occurs
 */
- (void)close;

/*!
 @brief Marks the present position in the stream.Subsequent calls to reset()
  will attempt to reposition the stream to this point.
 Not all
  character-input streams support the mark() operation.
 @param readAheadLimit Limit on the number of characters that may be                          read while still preserving the mark.  After
                           reading this many characters, attempting to
                           reset the stream may fail.
 @throw IOExceptionIf the stream does not support mark(),
                           or if some other I/O error occurs
 */
- (void)markWithInt:(jint)readAheadLimit;

/*!
 @brief Tells whether this stream supports the mark() operation.The default
  implementation always returns false.
 Subclasses should override this
  method.
 @return true if and only if this stream supports the mark operation.
 */
- (jboolean)markSupported;

/*!
 @brief Reads a single character.This method will block until a character is
  available, an I/O error occurs, or the end of the stream is reached.
 <p> Subclasses that intend to support efficient single-character input
  should override this method.
 @return The character read, as an integer in the range 0 to 65535
              (<tt>0x00-0xffff</tt>), or -1 if the end of the stream has
              been reached
 @throw IOExceptionIf an I/O error occurs
 */
- (jint)read;

/*!
 @brief Reads characters into an array.This method will block until some input
  is available, an I/O error occurs, or the end of the stream is reached.
 @param cbuf Destination buffer
 @return The number of characters read, or -1
               if the end of the stream
               has been reached
 @throw IOExceptionIf an I/O error occurs
 */
- (jint)readWithCharArray:(IOSCharArray *)cbuf;

/*!
 @brief Reads characters into a portion of an array.This method will block
  until some input is available, an I/O error occurs, or the end of the
  stream is reached.
 @param cbuf Destination buffer
 @param off Offset at which to start storing characters
 @param len Maximum number of characters to read
 @return The number of characters read, or -1 if the end of the
              stream has been reached
 @throw IOExceptionIf an I/O error occurs
 */
- (jint)readWithCharArray:(IOSCharArray *)cbuf
                  withInt:(jint)off
                  withInt:(jint)len;

/*!
 @brief Attempts to read characters into the specified character buffer.
 The buffer is used as a repository of characters as-is: the only
  changes made are the results of a put operation. No flipping or
  rewinding of the buffer is performed.
 @param target the buffer to read characters into
 @return The number of characters added to the buffer, or
          -1 if this source of characters is at its end
 @throw IOExceptionif an I/O error occurs
 @throw NullPointerExceptionif target is null
 @throw java.nio.ReadOnlyBufferExceptionif target is a read only buffer
 @since 1.5
 */
- (jint)readWithJavaNioCharBuffer:(JavaNioCharBuffer *)target;

/*!
 @brief Tells whether this stream is ready to be read.
 @return True if the next read() is guaranteed not to block for input,
  false otherwise.  Note that returning false does not guarantee that the
  next read will block.
 @throw IOExceptionIf an I/O error occurs
 */
- (jboolean)ready;

/*!
 @brief Resets the stream.If the stream has been marked, then attempt to
  reposition it at the mark.
 If the stream has not been marked, then
  attempt to reset it in some way appropriate to the particular stream,
  for example by repositioning it to its starting point.  Not all
  character-input streams support the reset() operation, and some support
  reset() without supporting mark().
 @throw IOExceptionIf the stream has not been marked,
                           or if the mark has been invalidated,
                           or if the stream does not support reset(),
                           or if some other I/O error occurs
 */
- (void)reset;

/*!
 @brief Skips characters.This method will block until some characters are
  available, an I/O error occurs, or the end of the stream is reached.
 @param n The number of characters to skip
 @return The number of characters actually skipped
 @throw IllegalArgumentExceptionIf <code>n</code> is negative.
 @throw IOExceptionIf an I/O error occurs
 */
- (jlong)skipWithLong:(jlong)n;

#pragma mark Protected

/*!
 @brief Creates a new character-stream reader whose critical sections will
  synchronize on the reader itself.
 */
- (instancetype __nonnull)init;

/*!
 @brief Creates a new character-stream reader whose critical sections will
  synchronize on the given object.
 @param lock The Object to synchronize on.
 */
- (instancetype __nonnull)initWithId:(id)lock;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaIoReader)

J2OBJC_FIELD_SETTER(JavaIoReader, lock_, id)

FOUNDATION_EXPORT void JavaIoReader_init(JavaIoReader *self);

FOUNDATION_EXPORT void JavaIoReader_initWithId_(JavaIoReader *self, id lock);

J2OBJC_TYPE_LITERAL_HEADER(JavaIoReader)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaIoReader")
