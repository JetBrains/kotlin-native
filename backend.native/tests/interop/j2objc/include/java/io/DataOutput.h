//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/io/DataOutput.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaIoDataOutput")
#ifdef RESTRICT_JavaIoDataOutput
#define INCLUDE_ALL_JavaIoDataOutput 0
#else
#define INCLUDE_ALL_JavaIoDataOutput 1
#endif
#undef RESTRICT_JavaIoDataOutput

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaIoDataOutput_) && (INCLUDE_ALL_JavaIoDataOutput || defined(INCLUDE_JavaIoDataOutput))
#define JavaIoDataOutput_

@class IOSByteArray;

/*!
 @brief Defines an interface for classes that are able to write big-endian typed data to some
  target.Typically, this data can be read in by a class which implements
  DataInput.
 Types that can be written include byte, 16-bit short, 32-bit int,
  32-bit float, 64-bit long, 64-bit double, byte strings, and <code>MUTF-8</code>
  encoded strings.
 - seealso: DataOutputStream
 - seealso: RandomAccessFile
 */
@protocol JavaIoDataOutput < JavaObject >

/*!
 @brief Writes the entire contents of the byte array <code>buffer</code> to this
  stream.
 @param buffer the buffer to write.
 @throw IOException
 if an I/O error occurs while writing.
 */
- (void)writeWithByteArray:(IOSByteArray *)buffer;

/*!
 @brief Writes <code>count</code> bytes from the byte array <code>buffer</code> starting at
  offset <code>index</code>.
 @param buffer the buffer to write.
 @param offset the index of the first byte in 
 <code>buffer</code>  to write.
 @param count the number of bytes from the 
 <code>buffer</code>  to write.
 @throw IOException
 if an I/O error occurs while writing.
 */
- (void)writeWithByteArray:(IOSByteArray *)buffer
                   withInt:(jint)offset
                   withInt:(jint)count;

/*!
 @brief Writes the specified 8-bit byte.
 @param oneByte the byte to write.
 @throw IOException
 if an I/O error occurs while writing.
 - seealso: DataInput#readByte()
 */
- (void)writeWithInt:(jint)oneByte;

/*!
 @brief Writes the specified boolean.
 @param val the boolean value to write.
 @throw IOException
 if an I/O error occurs while writing.
 - seealso: DataInput#readBoolean()
 */
- (void)writeBooleanWithBoolean:(jboolean)val;

/*!
 @brief Writes the specified 8-bit byte.
 @param val the byte value to write.
 @throw IOException
 if an I/O error occurs while writing.
 - seealso: DataInput#readByte()
 - seealso: DataInput#readUnsignedByte()
 */
- (void)writeByteWithInt:(jint)val;

/*!
 @brief Writes the low order 8-bit bytes from the specified string.
 @param str the string containing the bytes to write.
 @throw IOException
 if an I/O error occurs while writing.
 */
- (void)writeBytesWithNSString:(NSString *)str;

/*!
 @brief Writes the specified 16-bit character in big-endian order.Only the two least significant
  bytes of the integer <code>oneByte</code> are written.
 @param val the character to write.
 @throw IOException
 if an I/O error occurs while writing.
 - seealso: DataInput#readChar()
 */
- (void)writeCharWithInt:(jint)val;

/*!
 @brief Writes the 16-bit characters contained in <code>str</code> in big-endian order.
 @param str the string that contains the characters to write.
 @throw IOException
 if an I/O error occurs while writing.
 - seealso: DataInput#readChar()
 */
- (void)writeCharsWithNSString:(NSString *)str;

/*!
 @brief Writes the specified 64-bit double in big-endian order.The resulting output is the eight
  bytes returned by <code>Double.doubleToLongBits(double)</code>.
 @param val the double to write.
 @throw IOException
 if an I/O error occurs while writing.
 - seealso: DataInput#readDouble()
 */
- (void)writeDoubleWithDouble:(jdouble)val;

/*!
 @brief Writes the specified 32-bit float in big-endian order.The resulting output is the four bytes
  returned by <code>Float.floatToIntBits(float)</code>.
 @param val the float to write.
 @throw IOException
 if an I/O error occurs while writing.
 - seealso: DataInput#readFloat()
 */
- (void)writeFloatWithFloat:(jfloat)val;

/*!
 @brief Writes the specified 32-bit int in big-endian order.
 @param val the int to write.
 @throw IOException
 if an I/O error occurs while writing.
 - seealso: DataInput#readInt()
 */
- (void)writeIntWithInt:(jint)val;

/*!
 @brief Writes the specified 64-bit long in big-endian order.
 @param val the long to write.
 @throw IOException
 if an I/O error occurs while writing.
 - seealso: DataInput#readLong()
 */
- (void)writeLongWithLong:(jlong)val;

/*!
 @brief Writes the specified 16-bit short in big-endian order.Only the lower two bytes of <code>val</code>
  are written.
 @param val the short to write.
 @throw IOException
 if an I/O error occurs while writing.
 - seealso: DataInput#readShort()
 - seealso: DataInput#readUnsignedShort()
 */
- (void)writeShortWithInt:(jint)val;

/*!
 @brief Writes the specified string encoded in <code>modified UTF-8</code>.
 @param str the string to write encoded in 
 <code>modified UTF-8</code> .
 @throw IOException
 if an I/O error occurs while writing.
 - seealso: DataInput#readUTF()
 */
- (void)writeUTFWithNSString:(NSString *)str;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaIoDataOutput)

J2OBJC_TYPE_LITERAL_HEADER(JavaIoDataOutput)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaIoDataOutput")
