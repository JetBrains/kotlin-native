//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/io/BufferedWriter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaIoBufferedWriter")
#ifdef RESTRICT_JavaIoBufferedWriter
#define INCLUDE_ALL_JavaIoBufferedWriter 0
#else
#define INCLUDE_ALL_JavaIoBufferedWriter 1
#endif
#undef RESTRICT_JavaIoBufferedWriter

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaIoBufferedWriter_) && (INCLUDE_ALL_JavaIoBufferedWriter || defined(INCLUDE_JavaIoBufferedWriter))
#define JavaIoBufferedWriter_

#define RESTRICT_JavaIoWriter 1
#define INCLUDE_JavaIoWriter 1
#include "java/io/Writer.h"

@class IOSCharArray;

/*!
 @brief Writes text to a character-output stream, buffering characters so as to
  provide for the efficient writing of single characters, arrays, and strings.
 <p> The buffer size may be specified, or the default size may be accepted.
  The default is large enough for most purposes. 
 <p> A newLine() method is provided, which uses the platform's own notion of
  line separator as defined by the system property <tt>line.separator</tt>.
  Not all platforms use the newline character ('\n') to terminate lines.
  Calling this method to terminate each output line is therefore preferred to
  writing a newline character directly. 
 <p> In general, a Writer sends its output immediately to the underlying
  character or byte stream.  Unless prompt output is required, it is advisable
  to wrap a BufferedWriter around any Writer whose write() operations may be
  costly, such as FileWriters and OutputStreamWriters.  For example, 
 @code

  PrintWriter out
    = new PrintWriter(new BufferedWriter(new FileWriter("foo.out"))); 
  
@endcode
  will buffer the PrintWriter's output to the file.  Without buffering, each
  invocation of a print() method would cause characters to be converted into
  bytes that would then be written immediately to the file, which can be very
  inefficient.
 - seealso: PrintWriter
 - seealso: FileWriter
 - seealso: OutputStreamWriter
 - seealso: java.nio.file.Files#newBufferedWriter
 @author Mark Reinhold
 @since JDK1.1
 */
@interface JavaIoBufferedWriter : JavaIoWriter

#pragma mark Public

/*!
 @brief Creates a buffered character-output stream that uses a default-sized
  output buffer.
 @param outArg A Writer
 */
- (instancetype __nonnull)initWithJavaIoWriter:(JavaIoWriter *)outArg;

/*!
 @brief Creates a new buffered character-output stream that uses an output
  buffer of the given size.
 @param outArg A Writer
 @param sz Output-buffer size, a positive integer
 @throw IllegalArgumentExceptionIf <code>sz <= 0</code>
 */
- (instancetype __nonnull)initWithJavaIoWriter:(JavaIoWriter *)outArg
                                       withInt:(jint)sz;

- (void)close;

/*!
 @brief Flushes the stream.
 @throw IOExceptionIf an I/O error occurs
 */
- (void)flush;

/*!
 @brief Writes a line separator.The line separator string is defined by the
  system property <tt>line.separator</tt>, and is not necessarily a single
  newline ('\n') character.
 @throw IOExceptionIf an I/O error occurs
 */
- (void)newLine OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Writes a portion of an array of characters.
 <p> Ordinarily this method stores characters from the given array into
  this stream's buffer, flushing the buffer to the underlying stream as
  needed.  If the requested length is at least as large as the buffer,
  however, then this method will flush the buffer and write the characters
  directly to the underlying stream.  Thus redundant 
 <code>BufferedWriter</code>s will not copy data unnecessarily.
 @param cbuf A character array
 @param off Offset from which to start reading characters
 @param len Number of characters to write
 @throw IOExceptionIf an I/O error occurs
 */
- (void)writeWithCharArray:(IOSCharArray *)cbuf
                   withInt:(jint)off
                   withInt:(jint)len;

/*!
 @brief Writes a single character.
 @throw IOExceptionIf an I/O error occurs
 */
- (void)writeWithInt:(jint)c;

/*!
 @brief Writes a portion of a String.
 <p> If the value of the <tt>len</tt> parameter is negative then no
  characters are written.  This is contrary to the specification of this
  method in the superclass
 , which requires that an <code>IndexOutOfBoundsException</code> be
  thrown.
 @param s String to be written
 @param off Offset from which to start reading characters
 @param len Number of characters to be written
 @throw IOExceptionIf an I/O error occurs
 */
- (void)writeWithNSString:(NSString *)s
                  withInt:(jint)off
                  withInt:(jint)len;

#pragma mark Package-Private

/*!
 @brief Flushes the output buffer to the underlying character stream, without
  flushing the stream itself.This method is non-private only so that it
  may be invoked by PrintStream.
 */
- (void)flushBuffer;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithId:(id)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaIoBufferedWriter)

FOUNDATION_EXPORT void JavaIoBufferedWriter_initWithJavaIoWriter_(JavaIoBufferedWriter *self, JavaIoWriter *outArg);

FOUNDATION_EXPORT JavaIoBufferedWriter *new_JavaIoBufferedWriter_initWithJavaIoWriter_(JavaIoWriter *outArg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaIoBufferedWriter *create_JavaIoBufferedWriter_initWithJavaIoWriter_(JavaIoWriter *outArg);

FOUNDATION_EXPORT void JavaIoBufferedWriter_initWithJavaIoWriter_withInt_(JavaIoBufferedWriter *self, JavaIoWriter *outArg, jint sz);

FOUNDATION_EXPORT JavaIoBufferedWriter *new_JavaIoBufferedWriter_initWithJavaIoWriter_withInt_(JavaIoWriter *outArg, jint sz) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaIoBufferedWriter *create_JavaIoBufferedWriter_initWithJavaIoWriter_withInt_(JavaIoWriter *outArg, jint sz);

J2OBJC_TYPE_LITERAL_HEADER(JavaIoBufferedWriter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaIoBufferedWriter")
