//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/io/UncheckedIOException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaIoUncheckedIOException")
#ifdef RESTRICT_JavaIoUncheckedIOException
#define INCLUDE_ALL_JavaIoUncheckedIOException 0
#else
#define INCLUDE_ALL_JavaIoUncheckedIOException 1
#endif
#undef RESTRICT_JavaIoUncheckedIOException

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaIoUncheckedIOException_) && (INCLUDE_ALL_JavaIoUncheckedIOException || defined(INCLUDE_JavaIoUncheckedIOException))
#define JavaIoUncheckedIOException_

#define RESTRICT_JavaLangRuntimeException 1
#define INCLUDE_JavaLangRuntimeException 1
#include "java/lang/RuntimeException.h"

@class JavaIoIOException;
@class JavaLangThrowable;

/*!
 @brief Wraps an <code>IOException</code> with an unchecked exception.
 @since 1.8
 */
@interface JavaIoUncheckedIOException : JavaLangRuntimeException

#pragma mark Public

/*!
 @brief Constructs an instance of this class.
 @param cause the 
 <code>IOException</code>
 @throw NullPointerException
 if the cause is <code>null</code>
 */
- (instancetype __nonnull)initWithJavaIoIOException:(JavaIoIOException *)cause;

/*!
 @brief Constructs an instance of this class.
 @param message the detail message, can be null
 @param cause the 
 <code>IOException</code>
 @throw NullPointerException
 if the cause is <code>null</code>
 */
- (instancetype __nonnull)initWithNSString:(NSString *)message
                     withJavaIoIOException:(JavaIoIOException *)cause;

/*!
 @brief Returns the cause of this exception.
 @return the <code>IOException</code> which is the cause of this exception.
 */
- (JavaIoIOException *)getCause;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1
                               withBoolean:(jboolean)arg2
                               withBoolean:(jboolean)arg3 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(JavaIoUncheckedIOException)

FOUNDATION_EXPORT void JavaIoUncheckedIOException_initWithNSString_withJavaIoIOException_(JavaIoUncheckedIOException *self, NSString *message, JavaIoIOException *cause);

FOUNDATION_EXPORT JavaIoUncheckedIOException *new_JavaIoUncheckedIOException_initWithNSString_withJavaIoIOException_(NSString *message, JavaIoIOException *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaIoUncheckedIOException *create_JavaIoUncheckedIOException_initWithNSString_withJavaIoIOException_(NSString *message, JavaIoIOException *cause);

FOUNDATION_EXPORT void JavaIoUncheckedIOException_initWithJavaIoIOException_(JavaIoUncheckedIOException *self, JavaIoIOException *cause);

FOUNDATION_EXPORT JavaIoUncheckedIOException *new_JavaIoUncheckedIOException_initWithJavaIoIOException_(JavaIoIOException *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaIoUncheckedIOException *create_JavaIoUncheckedIOException_initWithJavaIoIOException_(JavaIoIOException *cause);

J2OBJC_TYPE_LITERAL_HEADER(JavaIoUncheckedIOException)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaIoUncheckedIOException")
