//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/io/ObjectStreamClass.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaIoObjectStreamClass")
#ifdef RESTRICT_JavaIoObjectStreamClass
#define INCLUDE_ALL_JavaIoObjectStreamClass 0
#else
#define INCLUDE_ALL_JavaIoObjectStreamClass 1
#endif
#undef RESTRICT_JavaIoObjectStreamClass

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaIoObjectStreamClass_) && (INCLUDE_ALL_JavaIoObjectStreamClass || defined(INCLUDE_JavaIoObjectStreamClass))
#define JavaIoObjectStreamClass_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class IOSClass;
@class IOSObjectArray;
@class JavaIoObjectStreamField;
@class JavaLangReflectConstructor;
@class JavaLangReflectField;
@class JavaLangReflectMethod;
@protocol JavaUtilList;

/*!
 @brief Represents a descriptor for identifying a class during serialization and
  deserialization.Information contained in the descriptor includes the name
  and SUID of the class as well as field names and types.
 Information inherited
  from the superclasses is also taken into account.
 - seealso: ObjectOutputStream
 - seealso: ObjectInputStream
 - seealso: java.lang.Class
 */
@interface JavaIoObjectStreamClass : NSObject < JavaIoSerializable >
@property (readonly, class) jlong CONSTRUCTOR_IS_NOT_RESOLVED NS_SWIFT_NAME(CONSTRUCTOR_IS_NOT_RESOLVED);
@property (readonly, class, strong) IOSObjectArray *NO_FIELDS NS_SWIFT_NAME(NO_FIELDS);
@property (readonly, class, strong) IOSClass *ARRAY_OF_FIELDS NS_SWIFT_NAME(ARRAY_OF_FIELDS);
@property (readonly, class, strong) IOSClass *STRINGCLASS NS_SWIFT_NAME(STRINGCLASS);
@property (readonly, class, strong) IOSClass *CLASSCLASS NS_SWIFT_NAME(CLASSCLASS);
@property (readonly, class, strong) IOSClass *OBJECTSTREAMCLASSCLASS NS_SWIFT_NAME(OBJECTSTREAMCLASSCLASS);

+ (jlong)CONSTRUCTOR_IS_NOT_RESOLVED;

+ (IOSObjectArray *)NO_FIELDS;

+ (IOSClass *)ARRAY_OF_FIELDS;

+ (IOSClass *)STRINGCLASS;

+ (IOSClass *)CLASSCLASS;

+ (IOSClass *)OBJECTSTREAMCLASSCLASS;

#pragma mark Public

/*!
 @brief Returns the class (java.lang.Class) for this descriptor.
 @return the class in the local VM that this descriptor represents;
          <code>null</code> if there is no corresponding class.
 */
- (IOSClass *)forClass;

/*!
 @brief Gets a field descriptor of the class represented by this class
  descriptor.
 @param name the name of the desired field.
 @return the field identified by <code>name</code> or <code>null</code> if there is
          no such field.
 */
- (JavaIoObjectStreamField *)getFieldWithNSString:(NSString *)name;

/*!
 @brief Returns a collection of field descriptors for the serialized fields of
  the class represented by this class descriptor.
 @return an array of field descriptors or an array of length zero if there
          are no fields in this descriptor's class.
 */
- (IOSObjectArray *)getFields;

/*!
 @brief Returns the name of the class represented by this descriptor.
 @return the fully qualified name of the class this descriptor represents.
 */
- (NSString *)getName;

/*!
 @brief Returns the Serial Version User ID of the class represented by this
  descriptor.
 @return the SUID for the class represented by this descriptor.
 */
- (jlong)getSerialVersionUID;

/*!
 @brief Returns the descriptor for a serializable class.
 Returns null if the class doesn't implement <code>Serializable</code> or <code>Externalizable</code>.
 @param cl a java.lang.Class for which to obtain the corresponding
              descriptor
 @return the corresponding descriptor if the class is serializable or
          externalizable; null otherwise.
 */
+ (JavaIoObjectStreamClass *)lookupWithIOSClass:(IOSClass *)cl;

/*!
 @brief Returns the descriptor for any class, whether or not the class
  implements Serializable or Externalizable.
 @param cl a java.lang.Class for which to obtain the corresponding
              descriptor
 @return the descriptor
 @since 1.6
 */
+ (JavaIoObjectStreamClass *)lookupAnyWithIOSClass:(IOSClass *)cl;

/*!
 @brief Returns a string containing a concise, human-readable description of this
  descriptor.
 @return a printable representation of this descriptor.
 */
- (NSString *)description;

#pragma mark Package-Private

/*!
 @brief Constructs a new instance of this class.
 */
- (instancetype __nonnull)init;

/*!
 @brief Builds the collection of field descriptors for the receiver
 @param declaredFields collection of java.lang.reflect.Field for which to compute
              field descriptors
 */
- (void)buildFieldDescriptorsWithJavaLangReflectFieldArray:(IOSObjectArray *)declaredFields;

/*!
 @brief Returns the collection of field descriptors for the fields of the
  corresponding class
 @return the receiver's collection of declared fields for the class it
          represents
 */
- (IOSObjectArray *)fields;

/*!
 @brief Return the java.lang.reflect.Field <code>serialPersistentFields</code>
  if class <code>cl</code> implements it.Return null otherwise.
 @param cl a java.lang.Class which to test
 @return <code>java.lang.reflect.Field</code> if the class has
          serialPersistentFields <code>null</code> if the class does not
          have serialPersistentFields
 */
+ (JavaLangReflectField *)fieldSerialPersistentFieldsWithIOSClass:(IOSClass *)cl;

/*!
 @brief Return the java.lang.reflect.Method if class <code>cl</code> implements 
 <code>methodName</code> .Return null otherwise.
 @param cl a java.lang.Class which to test
 @return <code>java.lang.reflect.Method</code> if the class implements
          writeReplace <code>null</code> if the class does not implement
          writeReplace
 */
+ (JavaLangReflectMethod *)findMethodWithIOSClass:(IOSClass *)cl
                                     withNSString:(NSString *)methodName;

/*!
 @brief Return the java.lang.reflect.Method if class <code>cl</code> implements
  private <code>methodName</code> .Return null otherwise.
 @param cl a java.lang.Class which to test
 @return <code>java.lang.reflect.Method</code> if the class implements
          writeReplace <code>null</code> if the class does not implement
          writeReplace
 */
+ (JavaLangReflectMethod *)findPrivateMethodWithIOSClass:(IOSClass *)cl
                                            withNSString:(NSString *)methodName
                                       withIOSClassArray:(IOSObjectArray *)param;

- (jlong)getConstructor;

/*!
 @brief Return a String representing the signature for a Constructor <code>c</code>.
 @param c a java.lang.reflect.Constructor for which to compute the
              signature
 @return the constructor's signature
 */
+ (NSString *)getConstructorSignatureWithJavaLangReflectConstructor:(JavaLangReflectConstructor *)c;

/*!
 @brief Returns the flags for this descriptor, where possible combined values are
  ObjectStreamConstants.SC_WRITE_METHOD
  ObjectStreamConstants.SC_SERIALIZABLE
  ObjectStreamConstants.SC_EXTERNALIZABLE
 @return byte the receiver's flags for the class it represents
 */
- (jbyte)getFlags;

- (id<JavaUtilList>)getHierarchy;

/*!
 @brief Returns the collection of field descriptors for the input fields of the
  corresponding class
 @return the receiver's collection of input fields for the class it
          represents
 */
- (IOSObjectArray *)getLoadFields;

- (JavaLangReflectMethod *)getMethodReadObject;

- (JavaLangReflectMethod *)getMethodReadObjectNoData;

- (JavaLangReflectMethod *)getMethodReadResolve;

/*!
 @brief Return a String representing the signature for a method <code>m</code>.
 @param m a java.lang.reflect.Method for which to compute the signature
 @return the method's signature
 */
+ (NSString *)getMethodSignatureWithJavaLangReflectMethod:(JavaLangReflectMethod *)m;

- (JavaLangReflectMethod *)getMethodWriteObject;

- (JavaLangReflectMethod *)getMethodWriteReplace;

- (JavaLangReflectField *)getReflectionFieldWithJavaIoObjectStreamField:(JavaIoObjectStreamField *)osf;

/*!
 @brief Returns the descriptor (ObjectStreamClass) of the superclass of the class
  represented by the receiver.
 @return an ObjectStreamClass representing the superclass of the class
          represented by the receiver.
 */
- (JavaIoObjectStreamClass *)getSuperclass;

- (jboolean)hasMethodReadObject;

- (jboolean)hasMethodReadObjectNoData;

- (jboolean)hasMethodReadResolve;

- (jboolean)hasMethodWriteObject;

- (jboolean)hasMethodWriteReplace;

- (void)initPrivateFieldsWithJavaIoObjectStreamClass:(JavaIoObjectStreamClass *)desc OBJC_METHOD_FAMILY_NONE;

- (jboolean)isEnum;

- (jboolean)isExternalizable;

/*!
 @brief Return true if instances of class <code>cl</code> are Externalizable,
  false otherwise.
 @param cl a java.lang.Class which to test
 @return <code>true</code> if instances of the class are Externalizable
          <code>false</code> if instances of the class are not
          Externalizable
 - seealso: Object#hashCode
 */
+ (jboolean)isExternalizableWithIOSClass:(IOSClass *)cl;

/*!
 @brief Return true if the type code 
 <code>typecode<code> describes a primitive type
 @param typecode a char describing the typecode
 @return <code>true</code> if the typecode represents a primitive type 
 <code>false</code> if the typecode represents an Object type (including arrays)
 - seealso: Object#hashCode
 */
+ (jboolean)isPrimitiveTypeWithChar:(jchar)typecode;

- (jboolean)isProxy__;

- (jboolean)isSerializable;

/*!
 @brief Return true if instances of class <code>cl</code> are Serializable,
  false otherwise.
 @param cl a java.lang.Class which to test
 @return <code>true</code> if instances of the class are Serializable
          <code>false</code> if instances of the class are not
          Serializable
 - seealso: Object#hashCode
 */
+ (jboolean)isSerializableWithIOSClass:(IOSClass *)cl;

/*!
 @brief Return the descriptor (ObjectStreamClass) corresponding to the class 
 <code>cl</code>.Returns an ObjectStreamClass even if instances of the
  class cannot be serialized
 @param cl a java.langClass for which to obtain the corresponding
              descriptor
 @return the corresponding descriptor
 */
+ (JavaIoObjectStreamClass *)lookupStreamClassWithIOSClass:(IOSClass *)cl;

/*!
 @brief Create and return a new instance of class 'instantiationClass'
  using JNI to call the constructor chosen by resolveConstructorClass.
 The returned instance may have uninitialized fields, including final fields.
 */
- (id)newInstanceWithIOSClass:(IOSClass *)instantiationClass OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Set the class (java.lang.Class) that the receiver represents
 @param c aClass, the new class that the receiver describes
 */
- (void)setClassWithIOSClass:(IOSClass *)c;

- (void)setConstructorWithLong:(jlong)newConstructor;

/*!
 @brief Set the collection of field descriptors for the fields of the
  corresponding class
 @param f ObjectStreamField[], the receiver's new collection of declared
              fields for the class it represents
 */
- (void)setFieldsWithJavaIoObjectStreamFieldArray:(IOSObjectArray *)f;

/*!
 @brief Set the flags for this descriptor, where possible combined values are
  ObjectStreamConstants.SC_WRITE_METHOD
  ObjectStreamConstants.SC_SERIALIZABLE
  ObjectStreamConstants.SC_EXTERNALIZABLE
 @param b byte, the receiver's new flags for the class it represents
 */
- (void)setFlagsWithByte:(jbyte)b;

/*!
 @brief Set the collection of field descriptors for the input fields of the
  corresponding class
 @param f ObjectStreamField[], the receiver's new collection of input
              fields for the class it represents
 */
- (void)setLoadFieldsWithJavaIoObjectStreamFieldArray:(IOSObjectArray *)f;

/*!
 @brief Set the name of the class represented by the receiver
 @param newName a String, the new fully qualified name of the class the
              receiver represents
 */
- (void)setNameWithNSString:(NSString *)newName;

/*!
 @brief Set the Serial Version User ID of the class represented by the receiver
 @param l a long, the new SUID for the class represented by the receiver
 */
- (void)setSerialVersionUIDWithLong:(jlong)l;

/*!
 @brief Set the descriptor for the superclass of the class described by the
  receiver
 @param c an ObjectStreamClass, the new ObjectStreamClass for the
              superclass of the class represented by the receiver
 */
- (void)setSuperclassWithJavaIoObjectStreamClass:(JavaIoObjectStreamClass *)c;

@end

J2OBJC_STATIC_INIT(JavaIoObjectStreamClass)

inline jlong JavaIoObjectStreamClass_get_CONSTRUCTOR_IS_NOT_RESOLVED(void);
#define JavaIoObjectStreamClass_CONSTRUCTOR_IS_NOT_RESOLVED -1LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaIoObjectStreamClass, CONSTRUCTOR_IS_NOT_RESOLVED, jlong)

/*!
 @brief Constant indicating that the class has no Serializable fields.
 */
inline IOSObjectArray *JavaIoObjectStreamClass_get_NO_FIELDS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *JavaIoObjectStreamClass_NO_FIELDS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaIoObjectStreamClass, NO_FIELDS, IOSObjectArray *)

inline IOSClass *JavaIoObjectStreamClass_get_ARRAY_OF_FIELDS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSClass *JavaIoObjectStreamClass_ARRAY_OF_FIELDS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaIoObjectStreamClass, ARRAY_OF_FIELDS, IOSClass *)

inline IOSClass *JavaIoObjectStreamClass_get_STRINGCLASS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSClass *JavaIoObjectStreamClass_STRINGCLASS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaIoObjectStreamClass, STRINGCLASS, IOSClass *)

inline IOSClass *JavaIoObjectStreamClass_get_CLASSCLASS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSClass *JavaIoObjectStreamClass_CLASSCLASS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaIoObjectStreamClass, CLASSCLASS, IOSClass *)

inline IOSClass *JavaIoObjectStreamClass_get_OBJECTSTREAMCLASSCLASS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSClass *JavaIoObjectStreamClass_OBJECTSTREAMCLASSCLASS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaIoObjectStreamClass, OBJECTSTREAMCLASSCLASS, IOSClass *)

FOUNDATION_EXPORT void JavaIoObjectStreamClass_init(JavaIoObjectStreamClass *self);

FOUNDATION_EXPORT JavaIoObjectStreamClass *new_JavaIoObjectStreamClass_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaIoObjectStreamClass *create_JavaIoObjectStreamClass_init(void);

FOUNDATION_EXPORT JavaLangReflectField *JavaIoObjectStreamClass_fieldSerialPersistentFieldsWithIOSClass_(IOSClass *cl);

FOUNDATION_EXPORT NSString *JavaIoObjectStreamClass_getConstructorSignatureWithJavaLangReflectConstructor_(JavaLangReflectConstructor *c);

FOUNDATION_EXPORT NSString *JavaIoObjectStreamClass_getMethodSignatureWithJavaLangReflectMethod_(JavaLangReflectMethod *m);

FOUNDATION_EXPORT jboolean JavaIoObjectStreamClass_isExternalizableWithIOSClass_(IOSClass *cl);

FOUNDATION_EXPORT jboolean JavaIoObjectStreamClass_isPrimitiveTypeWithChar_(jchar typecode);

FOUNDATION_EXPORT jboolean JavaIoObjectStreamClass_isSerializableWithIOSClass_(IOSClass *cl);

FOUNDATION_EXPORT JavaIoObjectStreamClass *JavaIoObjectStreamClass_lookupWithIOSClass_(IOSClass *cl);

FOUNDATION_EXPORT JavaIoObjectStreamClass *JavaIoObjectStreamClass_lookupAnyWithIOSClass_(IOSClass *cl);

FOUNDATION_EXPORT JavaIoObjectStreamClass *JavaIoObjectStreamClass_lookupStreamClassWithIOSClass_(IOSClass *cl);

FOUNDATION_EXPORT JavaLangReflectMethod *JavaIoObjectStreamClass_findMethodWithIOSClass_withNSString_(IOSClass *cl, NSString *methodName);

FOUNDATION_EXPORT JavaLangReflectMethod *JavaIoObjectStreamClass_findPrivateMethodWithIOSClass_withNSString_withIOSClassArray_(IOSClass *cl, NSString *methodName, IOSObjectArray *param);

J2OBJC_TYPE_LITERAL_HEADER(JavaIoObjectStreamClass)

#endif

#if !defined (JavaIoObjectStreamClass_Digest_) && (INCLUDE_ALL_JavaIoObjectStreamClass || defined(INCLUDE_JavaIoObjectStreamClass_Digest))
#define JavaIoObjectStreamClass_Digest_

@class IOSByteArray;

@protocol JavaIoObjectStreamClass_Digest < JavaObject >

- (IOSByteArray *)digestWithByteArray:(IOSByteArray *)input;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaIoObjectStreamClass_Digest)

J2OBJC_TYPE_LITERAL_HEADER(JavaIoObjectStreamClass_Digest)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaIoObjectStreamClass")
