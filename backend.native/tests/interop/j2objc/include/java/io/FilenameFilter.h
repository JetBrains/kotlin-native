//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/io/FilenameFilter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaIoFilenameFilter")
#ifdef RESTRICT_JavaIoFilenameFilter
#define INCLUDE_ALL_JavaIoFilenameFilter 0
#else
#define INCLUDE_ALL_JavaIoFilenameFilter 1
#endif
#undef RESTRICT_JavaIoFilenameFilter

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaIoFilenameFilter_) && (INCLUDE_ALL_JavaIoFilenameFilter || defined(INCLUDE_JavaIoFilenameFilter))
#define JavaIoFilenameFilter_

@class JavaIoFile;

/*!
 @brief An interface for filtering <code>File</code> objects based on their names
  or the directory they reside in.
 - seealso: File
 - seealso: File#list(FilenameFilter)
 */
@protocol JavaIoFilenameFilter < JavaObject >

/*!
 @brief Indicates if a specific filename matches this filter.
 @param dir the directory in which the 
 <code>filename</code>  was found.
 @param filename the name of the file in 
 <code>dir</code>  to test.
 @return <code>true</code> if the filename matches the filter
             and can be included in the list, <code>false</code>
             otherwise.
 */
- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)dir
                    withNSString:(NSString *)filename;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaIoFilenameFilter)

J2OBJC_TYPE_LITERAL_HEADER(JavaIoFilenameFilter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaIoFilenameFilter")
