//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/io/ObjectStreamField.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaIoObjectStreamField")
#ifdef RESTRICT_JavaIoObjectStreamField
#define INCLUDE_ALL_JavaIoObjectStreamField 0
#else
#define INCLUDE_ALL_JavaIoObjectStreamField 1
#endif
#undef RESTRICT_JavaIoObjectStreamField

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaIoObjectStreamField_) && (INCLUDE_ALL_JavaIoObjectStreamField || defined(INCLUDE_JavaIoObjectStreamField))
#define JavaIoObjectStreamField_

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "java/lang/Comparable.h"

@class IOSClass;
@class JavaIoDataOutputStream;
@class JavaLangClassLoader;

/*!
 @brief Describes a field for the purpose of serialization.Classes can define the
  collection of fields that are serialized, which may be different from the set
  of all declared fields.
 - seealso: ObjectOutputStream#writeFields()
 - seealso: ObjectInputStream#readFields()
 */
@interface JavaIoObjectStreamField : NSObject < JavaLangComparable > {
 @public
  jint offset_;
}

#pragma mark Public

/*!
 @brief Constructs an ObjectStreamField with the specified name and type.
 @param name the name of the field.
 @param cl the type of the field.
 @throw NullPointerException
 if <code>name</code> or <code>cl</code> is <code>null</code>.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)name
                              withIOSClass:(IOSClass *)cl;

/*!
 @brief Constructs an ObjectStreamField with the specified name, type and the
  indication if it is unshared.
 @param name the name of the field.
 @param cl the type of the field.
 @param unshared<code>true</code>
   if the field is written and read unshared;             <code>false</code>
   otherwise.
 @throw NullPointerException
 if <code>name</code> or <code>cl</code> is <code>null</code>.
 - seealso: ObjectOutputStream#writeUnshared(Object)
 */
- (instancetype __nonnull)initWithNSString:(NSString *)name
                              withIOSClass:(IOSClass *)cl
                               withBoolean:(jboolean)unshared;

/*!
 @brief Compares this field descriptor to the specified one.Checks first if one
  of the compared fields has a primitive type and the other one not.
 If so,
  the field with the primitive type is considered to be "smaller". If both
  fields are equal, their names are compared.
 @param o the object to compare with.
 @return -1 if this field is "smaller" than field <code>o</code>, 0 if both
          fields are equal; 1 if this field is "greater" than field <code>o</code>
 .
 */
- (jint)compareToWithId:(id)o;

/*!
 @brief Gets the name of this field.
 @return the field's name.
 */
- (NSString *)getName;

/*!
 @brief Gets the offset of this field in the object.
 @return this field's offset.
 */
- (jint)getOffset;

/*!
 @brief Gets the type of this field.
 @return a <code>Class</code> object representing the type of the field.
 */
- (IOSClass *)getType;

/*!
 @brief Gets a character code for the type of this field.The following codes are
  used: 
 @code

  B     byte
  C     char
  D     double
  F     float
  I     int
  J     long
  L     class or interface
  S     short
  Z     boolean
  [     array 
  
@endcode
 @return the field's type code.
 */
- (jchar)getTypeCode;

/*!
 @brief Gets the type signature used by the VM to represent the type of this
  field.
 @return the signature of this field's class or <code>null</code> if this
          field's type is primitive.
 */
- (NSString *)getTypeString;

/*!
 @brief Indicates whether this field's type is a primitive type.
 @return <code>true</code> if this field's type is primitive; <code>false</code> if
          the type of this field is a regular class.
 */
- (jboolean)isPrimitive;

/*!
 @brief Indicates whether this field is unshared.
 @return <code>true</code> if this field is unshared, <code>false</code> otherwise.
 */
- (jboolean)isUnshared;

/*!
 @brief Returns a string containing a concise, human-readable description of this
  field descriptor.
 @return a printable representation of this descriptor.
 */
- (NSString *)description;

#pragma mark Protected

/*!
 @brief Sets this field's offset in the object.
 @param newValue the field's new offset.
 */
- (void)setOffsetWithInt:(jint)newValue;

#pragma mark Package-Private

/*!
 @brief Constructs an ObjectStreamField with the given name and the given type.
 The type may be null.
 @param signature A String representing the type of the field
 @param name a String, the name of the field, or null
 */
- (instancetype __nonnull)initWithNSString:(NSString *)signature
                              withNSString:(NSString *)name;

/*!
 @brief Return the type of the field the receiver represents, this is an internal
  method
 @return A Class object representing the type of the field
 */
- (IOSClass *)getTypeInternal;

- (void)resolveWithJavaLangClassLoader:(JavaLangClassLoader *)loader;

- (void)setUnsharedWithBoolean:(jboolean)unshared;

- (jboolean)writeFieldWithJavaIoDataOutputStream:(JavaIoDataOutputStream *)outArg;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaIoObjectStreamField)

FOUNDATION_EXPORT void JavaIoObjectStreamField_initWithNSString_withIOSClass_(JavaIoObjectStreamField *self, NSString *name, IOSClass *cl);

FOUNDATION_EXPORT JavaIoObjectStreamField *new_JavaIoObjectStreamField_initWithNSString_withIOSClass_(NSString *name, IOSClass *cl) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaIoObjectStreamField *create_JavaIoObjectStreamField_initWithNSString_withIOSClass_(NSString *name, IOSClass *cl);

FOUNDATION_EXPORT void JavaIoObjectStreamField_initWithNSString_withIOSClass_withBoolean_(JavaIoObjectStreamField *self, NSString *name, IOSClass *cl, jboolean unshared);

FOUNDATION_EXPORT JavaIoObjectStreamField *new_JavaIoObjectStreamField_initWithNSString_withIOSClass_withBoolean_(NSString *name, IOSClass *cl, jboolean unshared) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaIoObjectStreamField *create_JavaIoObjectStreamField_initWithNSString_withIOSClass_withBoolean_(NSString *name, IOSClass *cl, jboolean unshared);

FOUNDATION_EXPORT void JavaIoObjectStreamField_initWithNSString_withNSString_(JavaIoObjectStreamField *self, NSString *signature, NSString *name);

FOUNDATION_EXPORT JavaIoObjectStreamField *new_JavaIoObjectStreamField_initWithNSString_withNSString_(NSString *signature, NSString *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaIoObjectStreamField *create_JavaIoObjectStreamField_initWithNSString_withNSString_(NSString *signature, NSString *name);

J2OBJC_TYPE_LITERAL_HEADER(JavaIoObjectStreamField)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaIoObjectStreamField")
