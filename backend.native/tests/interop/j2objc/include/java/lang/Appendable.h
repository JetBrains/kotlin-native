//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/lang/Appendable.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaLangAppendable")
#ifdef RESTRICT_JavaLangAppendable
#define INCLUDE_ALL_JavaLangAppendable 0
#else
#define INCLUDE_ALL_JavaLangAppendable 1
#endif
#undef RESTRICT_JavaLangAppendable

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaLangAppendable_) && (INCLUDE_ALL_JavaLangAppendable || defined(INCLUDE_JavaLangAppendable))
#define JavaLangAppendable_

@protocol JavaLangCharSequence;

/*!
 @brief An object to which <tt>char</tt> sequences and values can be appended.The
  <tt>Appendable</tt> interface must be implemented by any class whose
  instances are intended to receive formatted output from a <code>java.util.Formatter</code>
 .
 <p> The characters to be appended should be valid Unicode characters as
  described in <a href="Character.html#unicode">Unicode Character
  Representation</a>.  Note that supplementary characters may be composed of
  multiple 16-bit <tt>char</tt> values. 
 <p> Appendables are not necessarily safe for multithreaded access.  Thread
  safety is the responsibility of classes that extend and implement this
  interface. 
 <p> Since this interface may be implemented by existing classes
  with different styles of error handling there is no guarantee that
  errors will be propagated to the invoker.
 @since 1.5
 */
@protocol JavaLangAppendable < JavaObject >

/*!
 @brief Appends the specified character sequence to this <tt>Appendable</tt>.
 <p> Depending on which class implements the character sequence 
 <tt>csq</tt>, the entire sequence may not be appended.  For
  instance, if <tt>csq</tt> is a <code>java.nio.CharBuffer</code> then
  the subsequence to append is defined by the buffer's position and limit.
 @param csq The character sequence to append.  If 
  <tt> csq </tt>  is           <tt>
  null </tt> , then the four characters  <tt> "null" </tt>  are          appended to this Appendable.
 @return A reference to this <tt>Appendable</tt>
 @throw IOException
 If an I/O error occurs
 */
- (id<JavaLangAppendable> __nonnull)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)csq;

/*!
 @brief Appends a subsequence of the specified character sequence to this 
 <tt>Appendable</tt>.
 <p> An invocation of this method of the form <tt>out.append(csq, start,
  end)</tt> when <tt>csq</tt> is not <tt>null</tt>, behaves in
  exactly the same way as the invocation 
 @code

      out.append(csq.subSequence(start, end)) 
@endcode
 @param csq The character sequence from which a subsequence will be
           appended.  If 
  <tt> csq </tt>  is  <tt> null </tt> , then characters          will be appended as if 
  <tt> csq </tt>  contained the four          characters 
  <tt> "null" </tt> .
 @param start The index of the first character in the subsequence
 @param end The index of the character following the last character in the
           subsequence
 @return A reference to this <tt>Appendable</tt>
 @throw IndexOutOfBoundsException
 If <tt>start</tt> or <tt>end</tt> are negative, <tt>start</tt>
           is greater than <tt>end</tt>, or <tt>end</tt> is greater than
           <tt>csq.length()</tt>
 @throw IOException
 If an I/O error occurs
 */
- (id<JavaLangAppendable> __nonnull)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)csq
                                                           withInt:(jint)start
                                                           withInt:(jint)end;

/*!
 @brief Appends the specified character to this <tt>Appendable</tt>.
 @param c The character to append
 @return A reference to this <tt>Appendable</tt>
 @throw IOException
 If an I/O error occurs
 */
- (id<JavaLangAppendable> __nonnull)appendWithChar:(jchar)c;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaLangAppendable)

J2OBJC_TYPE_LITERAL_HEADER(JavaLangAppendable)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaLangAppendable")
