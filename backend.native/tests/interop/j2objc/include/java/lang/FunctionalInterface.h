//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/lang/FunctionalInterface.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaLangFunctionalInterface")
#ifdef RESTRICT_JavaLangFunctionalInterface
#define INCLUDE_ALL_JavaLangFunctionalInterface 0
#else
#define INCLUDE_ALL_JavaLangFunctionalInterface 1
#endif
#undef RESTRICT_JavaLangFunctionalInterface

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaLangFunctionalInterface_) && (INCLUDE_ALL_JavaLangFunctionalInterface || defined(INCLUDE_JavaLangFunctionalInterface))
#define JavaLangFunctionalInterface_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

/*!
 @brief An informative annotation type used to indicate that an interface
  type declaration is intended to be a <i>functional interface</i> as
  defined by the Java Language Specification.
 Conceptually, a functional interface has exactly one abstract
  method.  Since default methods
  have an implementation, they are not abstract.  If
  an interface declares an abstract method overriding one of the
  public methods of <code>java.lang.Object</code>, that also does 
 <em>not</em> count toward the interface's abstract method count
  since any implementation of the interface will have an
  implementation from <code>java.lang.Object</code> or elsewhere. 
 <p>Note that instances of functional interfaces can be created with
  lambda expressions, method references, or constructor references. 
 <p>If a type is annotated with this annotation type, compilers are
  required to generate an error message unless: 
 <ul>
  <li> The type is an interface type and not an annotation type, enum, or class. 
 <li> The annotated type satisfies the requirements of a functional interface. 
 </ul>
  
 <p>However, the compiler will treat any interface meeting the
  definition of a functional interface as a functional interface
  regardless of whether or not a <code>FunctionalInterface</code>
  annotation is present on the interface declaration.
 @since 1.8
 */
@protocol JavaLangFunctionalInterface < JavaLangAnnotationAnnotation >

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface JavaLangFunctionalInterface : NSObject < JavaLangFunctionalInterface >

@end

J2OBJC_EMPTY_STATIC_INIT(JavaLangFunctionalInterface)

FOUNDATION_EXPORT id<JavaLangFunctionalInterface> create_JavaLangFunctionalInterface(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaLangFunctionalInterface)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaLangFunctionalInterface")
