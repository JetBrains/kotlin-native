//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/lang/ref/Reference.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaLangRefReference")
#ifdef RESTRICT_JavaLangRefReference
#define INCLUDE_ALL_JavaLangRefReference 0
#else
#define INCLUDE_ALL_JavaLangRefReference 1
#endif
#undef RESTRICT_JavaLangRefReference

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaLangRefReference_) && (INCLUDE_ALL_JavaLangRefReference || defined(INCLUDE_JavaLangRefReference))
#define JavaLangRefReference_

@class JavaLangRefReferenceQueue;

/*!
 @brief Abstract base class for reference objects.This class defines the
  operations common to all reference objects.
 Because reference objects are
  implemented in close cooperation with the garbage collector, this class may
  not be subclassed directly.
 @author Mark Reinhold
 @since 1.2
 */
@interface JavaLangRefReference : NSObject {
 @public
  volatile_id referent_;
  __unsafe_unretained JavaLangRefReferenceQueue *queue_;
  JavaLangRefReference *queueNext_;
  /*!
   @brief The pendingNext field is initially set by the GC.After the GC forms a
  complete circularly linked list, the list is handed off to the
  ReferenceQueueDaemon using the ReferenceQueue.class lock.
   The
  ReferenceQueueDaemon can then read the pendingNext fields without
  additional synchronization.
   */
  JavaLangRefReference *pendingNext_;
}

#pragma mark Public

/*!
 @brief Clears this reference object.Invoking this method will not cause this
  object to be enqueued.
 <p> This method is invoked only by Java code; when the garbage collector
  clears references it does so directly, without invoking this method.
 */
- (void)clear;

/*!
 @brief Adds this reference object to the queue with which it is registered,
  if any.
 <p> This method is invoked only by Java code; when the garbage collector
  enqueues references it does so directly, without invoking this method.
 @return <code>true</code> if this reference object was successfully
            enqueued; <code>false</code> if it was already enqueued or if
            it was not registered with a queue when it was created
 */
- (jboolean)enqueue;

/*!
 @brief Returns this reference object's referent.If this reference object has
  been cleared, either by the program or by the garbage collector, then
  this method returns <code>null</code>.
 @return The object to which this reference refers, or
            <code>null</code> if this reference object has been cleared
 */
- (id)get;

/*!
 @brief Tells whether or not this reference object has been enqueued, either by
  the program or by the garbage collector.If this reference object was
  not registered with a queue when it was created, then this method will
  always return <code>false</code>.
 @return <code>true</code> if and only if this reference object has
            been enqueued
 */
- (jboolean)isEnqueued;

#pragma mark Protected

- (void)java_finalize;

#pragma mark Package-Private

- (instancetype __nonnull)initWithId:(id)referent;

- (instancetype __nonnull)initWithId:(id)referent
       withJavaLangRefReferenceQueue:(JavaLangRefReferenceQueue *)queue;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaLangRefReference)

J2OBJC_FIELD_SETTER(JavaLangRefReference, queueNext_, JavaLangRefReference *)
J2OBJC_FIELD_SETTER(JavaLangRefReference, pendingNext_, JavaLangRefReference *)

FOUNDATION_EXPORT void JavaLangRefReference_initWithId_(JavaLangRefReference *self, id referent);

FOUNDATION_EXPORT void JavaLangRefReference_initWithId_withJavaLangRefReferenceQueue_(JavaLangRefReference *self, id referent, JavaLangRefReferenceQueue *queue);

J2OBJC_TYPE_LITERAL_HEADER(JavaLangRefReference)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaLangRefReference")
