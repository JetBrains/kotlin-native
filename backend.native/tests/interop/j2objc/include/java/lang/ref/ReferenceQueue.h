//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/lang/ref/ReferenceQueue.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaLangRefReferenceQueue")
#ifdef RESTRICT_JavaLangRefReferenceQueue
#define INCLUDE_ALL_JavaLangRefReferenceQueue 0
#else
#define INCLUDE_ALL_JavaLangRefReferenceQueue 1
#endif
#undef RESTRICT_JavaLangRefReferenceQueue

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaLangRefReferenceQueue_) && (INCLUDE_ALL_JavaLangRefReferenceQueue || defined(INCLUDE_JavaLangRefReferenceQueue))
#define JavaLangRefReferenceQueue_

@class JavaLangRefReference;

/*!
 @brief Reference queues, to which registered reference objects are appended by the
  garbage collector after the appropriate reachability changes are detected.
 @author Mark Reinhold
 @since 1.2
 */
@interface JavaLangRefReferenceQueue : NSObject

#pragma mark Public

/*!
 @brief Constructs a new reference-object queue.
 */
- (instancetype __nonnull)init;

/*!
 @brief Polls this queue to see if a reference object is available.If one is
  available without further delay then it is removed from the queue and
  returned.
 Otherwise this method immediately returns <tt>null</tt>.
 @return A reference object, if one was immediately available,
           otherwise <code>null</code>
 */
- (JavaLangRefReference *)poll;

/*!
 @brief Removes the next reference object in this queue, blocking until one
  becomes available.
 @return A reference object, blocking until one becomes available
 @throw InterruptedExceptionIf the wait is interrupted
 */
- (JavaLangRefReference *)remove;

/*!
 @brief Removes the next reference object in this queue, blocking until either
  one becomes available or the given timeout period expires.
 <p> This method does not offer real-time guarantees: It schedules the
  timeout as if by invoking the <code>Object.wait(long)</code> method.
 @param timeout If positive, block for up to  <code> timeout </code>
                    milliseconds while waiting for a reference to be                   added to this queue.  If zero, block indefinitely.
 @return A reference object, if one was available within the specified
           timeout period, otherwise <code>null</code>
 @throw IllegalArgumentException
 If the value of the timeout argument is negative
 @throw InterruptedException
 If the timeout wait is interrupted
 */
- (JavaLangRefReference *)removeWithLong:(jlong)timeout;

#pragma mark Package-Private

/*!
 @brief Enqueue the reference object on the receiver.
 @param reference reference object to be enqueued.
 @return true if the reference was enqueued.
 */
- (jboolean)enqueueWithJavaLangRefReference:(JavaLangRefReference *)reference;

/*!
 @brief Test if the given reference object has been enqueued but not yet
  removed from the queue, assuming this is the reference object's queue.
 */
- (jboolean)isEnqueuedWithJavaLangRefReference:(JavaLangRefReference *)reference;

@end

J2OBJC_STATIC_INIT(JavaLangRefReferenceQueue)

FOUNDATION_EXPORT void JavaLangRefReferenceQueue_init(JavaLangRefReferenceQueue *self);

FOUNDATION_EXPORT JavaLangRefReferenceQueue *new_JavaLangRefReferenceQueue_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangRefReferenceQueue *create_JavaLangRefReferenceQueue_init(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaLangRefReferenceQueue)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaLangRefReferenceQueue")
