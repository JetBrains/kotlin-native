//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/lang/AutoCloseable.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaLangAutoCloseable")
#ifdef RESTRICT_JavaLangAutoCloseable
#define INCLUDE_ALL_JavaLangAutoCloseable 0
#else
#define INCLUDE_ALL_JavaLangAutoCloseable 1
#endif
#undef RESTRICT_JavaLangAutoCloseable

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaLangAutoCloseable_) && (INCLUDE_ALL_JavaLangAutoCloseable || defined(INCLUDE_JavaLangAutoCloseable))
#define JavaLangAutoCloseable_

/*!
 @brief An object that may hold resources (such as file or socket handles)
  until it is closed.The <code>close()</code> method of an <code>AutoCloseable</code>
  object is called automatically when exiting a <code>try</code>
 -with-resources block for which the object has been declared in
  the resource specification header.
 This construction ensures prompt
  release, avoiding resource exhaustion exceptions and errors that
  may otherwise occur.
 @author Josh Bloch
 @since 1.7
 */
@protocol JavaLangAutoCloseable < JavaObject >

/*!
 @brief Closes this resource, relinquishing any underlying resources.
 This method is invoked automatically on objects managed by the 
 <code>try</code>-with-resources statement. 
 <p>While this interface method is declared to throw <code>Exception</code>
 , implementers are <em>strongly</em> encouraged to
  declare concrete implementations of the <code>close</code> method to
  throw more specific exceptions, or to throw no exception at all
  if the close operation cannot fail. 
 <p> Cases where the close operation may fail require careful
  attention by implementers. It is strongly advised to relinquish
  the underlying resources and to internally <em>mark</em> the
  resource as closed, prior to throwing the exception. The <code>close</code>
  method is unlikely to be invoked more than once and so
  this ensures that the resources are released in a timely manner.
  Furthermore it reduces problems that could arise when the resource
  wraps, or is wrapped, by another resource. 
 <p><em>Implementers of this interface are also strongly advised
  to not have the <code>close</code> method throw <code>InterruptedException</code>
 .</em>
  This exception interacts with a thread's interrupted status,
  and runtime misbehavior is likely to occur if an <code>InterruptedException</code>
  is suppressed
 .
  More generally, if it would cause problems for an
  exception to be suppressed, the <code>AutoCloseable.close</code>
  method should not throw it. 
 <p>Note that unlike the <code>close</code>
  method of <code>java.io.Closeable</code>, this <code>close</code> method
  is <em>not</em> required to be idempotent.  In other words,
  calling this <code>close</code> method more than once may have some
  visible side effect, unlike <code>Closeable.close</code> which is
  required to have no effect if called more than once.
  However, implementers of this interface are strongly encouraged
  to make their <code>close</code> methods idempotent.
 @throw Exceptionif this resource cannot be closed
 */
- (void)close;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaLangAutoCloseable)

J2OBJC_TYPE_LITERAL_HEADER(JavaLangAutoCloseable)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaLangAutoCloseable")
