//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/lang/Exception.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaLangException")
#ifdef RESTRICT_JavaLangException
#define INCLUDE_ALL_JavaLangException 0
#else
#define INCLUDE_ALL_JavaLangException 1
#endif
#undef RESTRICT_JavaLangException

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaLangException_) && (INCLUDE_ALL_JavaLangException || defined(INCLUDE_JavaLangException))
#define JavaLangException_

#define RESTRICT_JavaLangThrowable 1
#define INCLUDE_JavaLangThrowable 1
#include "java/lang/Throwable.h"

/*!
 @brief The class <code>Exception</code> and its subclasses are a form of 
 <code>Throwable</code> that indicates conditions that a reasonable
  application might want to catch.
 <p>The class <code>Exception</code> and any subclasses that are not also
  subclasses of <code>RuntimeException</code> are <em>checked
  exceptions</em>.  Checked exceptions need to be declared in a
  method or constructor's <code>throws</code> clause if they can be thrown
  by the execution of the method or constructor and propagate outside
  the method or constructor boundary.
 @author Frank Yellin
 - seealso: java.lang.Error
 @since JDK1.0
 */
@interface JavaLangException : JavaLangThrowable
@property (readonly, class) jlong serialVersionUID NS_SWIFT_NAME(serialVersionUID);

+ (jlong)serialVersionUID;

#pragma mark Public

/*!
 @brief Constructs a new exception with <code>null</code> as its detail message.
 The cause is not initialized, and may subsequently be initialized by a
  call to <code>initCause</code>.
 */
- (instancetype __nonnull)init;

/*!
 @brief Constructs a new exception with the specified detail message.The
  cause is not initialized, and may subsequently be initialized by
  a call to <code>initCause</code>.
 @param message the detail message. The detail message is saved for           later retrieval by the 
 <code>getMessage()</code>  method.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)message;

/*!
 @brief Constructs a new exception with the specified detail message and
  cause.
 <p>Note that the detail message associated with 
 <code>cause</code> is <i>not</i> automatically incorporated in
  this exception's detail message.
 @param message the detail message (which is saved for later retrieval          by the 
 <code>getMessage()</code>  method).
 @param cause the cause (which is saved for later retrieval by the          
 <code>getCause()</code>  method).  (A  <tt> null </tt>  value is          permitted, and indicates that the cause is nonexistent or
           unknown.)
 @since 1.4
 */
- (instancetype __nonnull)initWithNSString:(NSString *)message
                     withJavaLangThrowable:(JavaLangThrowable *)cause;

/*!
 @brief Constructs a new exception with the specified cause and a detail
  message of <tt>(cause==null ?
 null : cause.toString())</tt> (which
  typically contains the class and detail message of <tt>cause</tt>).
 This constructor is useful for exceptions that are little more than
  wrappers for other throwables (for example, <code>java.security.PrivilegedActionException</code>
 ).
 @param cause the cause (which is saved for later retrieval by the          
 <code>getCause()</code>  method).  (A  <tt> null </tt>  value is          permitted, and indicates that the cause is nonexistent or
           unknown.)
 @since 1.4
 */
- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)cause;

#pragma mark Protected

/*!
 @brief Constructs a new exception with the specified detail message,
  cause, suppression enabled or disabled, and writable stack
  trace enabled or disabled.
 @param message the detail message.
 @param cause the cause.  (A <code>null</code>  value is permitted,
   and indicates that the cause is nonexistent or unknown.)
 @param enableSuppression whether or not suppression is enabled                           or disabled
 @param writableStackTrace whether or not the stack trace should                            be writable
 @since 1.7
 */
- (instancetype __nonnull)initWithNSString:(NSString *)message
                     withJavaLangThrowable:(JavaLangThrowable *)cause
                               withBoolean:(jboolean)enableSuppression
                               withBoolean:(jboolean)writableStackTrace;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaLangException)

inline jlong JavaLangException_get_serialVersionUID(void);
#define JavaLangException_serialVersionUID -3387516993124229948LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangException, serialVersionUID, jlong)

FOUNDATION_EXPORT void JavaLangException_init(JavaLangException *self);

FOUNDATION_EXPORT JavaLangException *new_JavaLangException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangException *create_JavaLangException_init(void);

FOUNDATION_EXPORT void JavaLangException_initWithNSString_(JavaLangException *self, NSString *message);

FOUNDATION_EXPORT JavaLangException *new_JavaLangException_initWithNSString_(NSString *message) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangException *create_JavaLangException_initWithNSString_(NSString *message);

FOUNDATION_EXPORT void JavaLangException_initWithNSString_withJavaLangThrowable_(JavaLangException *self, NSString *message, JavaLangThrowable *cause);

FOUNDATION_EXPORT JavaLangException *new_JavaLangException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangException *create_JavaLangException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause);

FOUNDATION_EXPORT void JavaLangException_initWithJavaLangThrowable_(JavaLangException *self, JavaLangThrowable *cause);

FOUNDATION_EXPORT JavaLangException *new_JavaLangException_initWithJavaLangThrowable_(JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangException *create_JavaLangException_initWithJavaLangThrowable_(JavaLangThrowable *cause);

FOUNDATION_EXPORT void JavaLangException_initWithNSString_withJavaLangThrowable_withBoolean_withBoolean_(JavaLangException *self, NSString *message, JavaLangThrowable *cause, jboolean enableSuppression, jboolean writableStackTrace);

FOUNDATION_EXPORT JavaLangException *new_JavaLangException_initWithNSString_withJavaLangThrowable_withBoolean_withBoolean_(NSString *message, JavaLangThrowable *cause, jboolean enableSuppression, jboolean writableStackTrace) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangException *create_JavaLangException_initWithNSString_withJavaLangThrowable_withBoolean_withBoolean_(NSString *message, JavaLangThrowable *cause, jboolean enableSuppression, jboolean writableStackTrace);

J2OBJC_TYPE_LITERAL_HEADER(JavaLangException)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaLangException")
