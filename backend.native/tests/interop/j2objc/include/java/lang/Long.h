//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/lang/Long.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaLangLong")
#ifdef RESTRICT_JavaLangLong
#define INCLUDE_ALL_JavaLangLong 0
#else
#define INCLUDE_ALL_JavaLangLong 1
#endif
#undef RESTRICT_JavaLangLong

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaLangLong_) && (INCLUDE_ALL_JavaLangLong || defined(INCLUDE_JavaLangLong))
#define JavaLangLong_

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "java/lang/Comparable.h"

@class IOSCharArray;
@class IOSClass;

/*!
 @brief The <code>Long</code> class wraps a value of the primitive type <code>long</code>
  in an object.An object of type <code>Long</code> contains a
  single field whose type is <code>long</code>.
 <p> In addition, this class provides several methods for converting
  a <code>long</code> to a <code>String</code> and a <code>String</code> to a <code>long</code>
 , as well as other constants and methods useful when dealing
  with a <code>long</code>.
  
 <p>Implementation note: The implementations of the "bit twiddling"
  methods (such as <code>highestOneBit</code> and 
 <code>numberOfTrailingZeros</code>) are
  based on material from Henry S. Warren, Jr.'s <i>Hacker's
  Delight</i>, (Addison Wesley, 2002).
 @author Lee Boynton
 @author Arthur van Hoff
 @author Josh Bloch
 @author Joseph D. Darcy
 @since JDK1.0
 */
@interface JavaLangLong : NSNumber < JavaLangComparable >
@property (readonly, class) jlong MIN_VALUE NS_SWIFT_NAME(MIN_VALUE);
@property (readonly, class) jlong MAX_VALUE NS_SWIFT_NAME(MAX_VALUE);
@property (readonly, class, strong) IOSClass *TYPE NS_SWIFT_NAME(TYPE);
@property (readonly, class) jint SIZE NS_SWIFT_NAME(SIZE);
@property (readonly, class) jint BYTES NS_SWIFT_NAME(BYTES);

+ (jlong)MIN_VALUE;

+ (jlong)MAX_VALUE;

+ (IOSClass *)TYPE;

+ (jint)SIZE;

+ (jint)BYTES;

#pragma mark Public

/*!
 @brief Constructs a newly allocated <code>Long</code> object that
  represents the specified <code>long</code> argument.
 @param value the value to be represented by the           
 <code>Long</code>  object.
 */
- (instancetype __nonnull)initWithLong:(jlong)value;

/*!
 @brief Constructs a newly allocated <code>Long</code> object that
  represents the <code>long</code> value indicated by the 
 <code>String</code> parameter.The string is converted to a 
 <code>long</code> value in exactly the manner used by the 
 <code>parseLong</code> method for radix 10.
 @param s the <code>String</code>  to be converted to a              
 <code>Long</code> .
 @throw NumberFormatExceptionif the <code>String</code> does not
              contain a parsable <code>long</code>.
 - seealso: java.lang.Long#parseLong(java.lang.String, int)
 */
- (instancetype __nonnull)initWithNSString:(NSString *)s;

/*!
 @brief Returns the number of one-bits in the two's complement binary
  representation of the specified <code>long</code> value.This function is
  sometimes referred to as the <i>population count</i>.
 @param i the value whose bits are to be counted
 @return the number of one-bits in the two's complement binary
      representation of the specified <code>long</code> value.
 @since 1.5
 */
+ (jint)bitCountWithLong:(jlong)i;

/*!
 @brief Returns the value of this <code>Long</code> as a <code>byte</code> after
  a narrowing primitive conversion.
 */
- (jbyte)charValue;

/*!
 @brief Compares two <code>long</code> values numerically.
 The value returned is identical to what would be returned by: 
 @code

     Long.valueOf(x).compareTo(Long.valueOf(y)) 
  
@endcode
 @param x the first <code>long</code>  to compare
 @param y the second <code>long</code>  to compare
 @return the value <code>0</code> if <code>x == y</code>;
          a value less than <code>0</code> if <code>x < y</code>; and
          a value greater than <code>0</code> if <code>x > y</code>
 @since 1.7
 */
+ (jint)compareWithLong:(jlong)x
               withLong:(jlong)y;

/*!
 @brief Compares two <code>Long</code> objects numerically.
 @param anotherLong the <code>Long</code>  to be compared.
 @return the value <code>0</code> if this <code>Long</code> is
           equal to the argument <code>Long</code>; a value less than
           <code>0</code> if this <code>Long</code> is numerically less
           than the argument <code>Long</code>; and a value greater
           than <code>0</code> if this <code>Long</code> is numerically
            greater than the argument <code>Long</code> (signed
            comparison).
 @since 1.2
 */
- (jint)compareToWithId:(JavaLangLong *)anotherLong;

/*!
 @brief Compares two <code>long</code> values numerically treating the values
  as unsigned.
 @param x the first <code>long</code>  to compare
 @param y the second <code>long</code>  to compare
 @return the value <code>0</code> if <code>x == y</code>; a value less
          than <code>0</code> if <code>x < y</code> as unsigned values; and
          a value greater than <code>0</code> if <code>x > y</code> as
          unsigned values
 @since 1.8
 */
+ (jint)compareUnsignedWithLong:(jlong)x
                       withLong:(jlong)y;

/*!
 @brief Decodes a <code>String</code> into a <code>Long</code>.
 Accepts decimal, hexadecimal, and octal numbers given by the
  following grammar: 
 <blockquote>
  <dl>
  <dt><i>DecodableString:</i>
  <dd><i>Sign<sub>opt</sub> DecimalNumeral</i>
  <dd><i>Sign<sub>opt</sub></i> <code>0x</code> <i>HexDigits</i>
  <dd><i>Sign<sub>opt</sub></i> <code>0X</code> <i>HexDigits</i>
  <dd><i>Sign<sub>opt</sub></i> <code>#</code> <i>HexDigits</i>
  <dd><i>Sign<sub>opt</sub></i> <code>0</code> <i>OctalDigits</i>
  
 <dt><i>Sign:</i>
  <dd><code>-</code>
  <dd><code>+</code>
  </dl>
  </blockquote>
  
 <i>DecimalNumeral</i>, <i>HexDigits</i>, and <i>OctalDigits</i>
  are as defined in section 3.10.1 of 
 <cite>The Java&trade; Language Specification</cite>,
  except that underscores are not accepted between digits. 
 <p>The sequence of characters following an optional
  sign and/or radix specifier ("<code>0x</code>", "<code>0X</code>",
  "<code>#</code>", or leading zero) is parsed as by the <code>Long.parseLong</code>
  method with the indicated radix (10, 16, or 8).
  This sequence of characters must represent a positive value or a 
 <code>NumberFormatException</code> will be thrown.  The result is
  negated if first character of the specified <code>String</code> is
  the minus sign.  No whitespace characters are permitted in the 
 <code>String</code>.
 @param nm the <code>String</code>  to decode.
 @return a <code>Long</code> object holding the <code>long</code>
             value represented by <code>nm</code>
 @throw NumberFormatExceptionif the <code>String</code> does not
             contain a parsable <code>long</code>.
 - seealso: java.lang.Long#parseLong(String, int)
 @since 1.2
 */
+ (JavaLangLong * __nonnull)decodeWithNSString:(NSString *)nm;

/*!
 @brief Returns the unsigned quotient of dividing the first argument by
  the second where each argument and the result is interpreted as
  an unsigned value.
 <p>Note that in two's complement arithmetic, the three other
  basic arithmetic operations of add, subtract, and multiply are
  bit-wise identical if the two operands are regarded as both
  being signed or both being unsigned.  Therefore separate <code>addUnsigned</code>
 , etc. methods are not provided.
 @param dividend the value to be divided
 @param divisor the value doing the dividing
 @return the unsigned quotient of the first argument divided by
  the second argument
 - seealso: #remainderUnsigned
 @since 1.8
 */
+ (jlong)divideUnsignedWithLong:(jlong)dividend
                       withLong:(jlong)divisor;

/*!
 @brief Returns the value of this <code>Long</code> as a <code>double</code>
  after a widening primitive conversion.
 */
- (jdouble)doubleValue;

/*!
 @brief Compares this object to the specified object.The result is 
 <code>true</code> if and only if the argument is not 
 <code>null</code> and is a <code>Long</code> object that
  contains the same <code>long</code> value as this object.
 @param obj the object to compare with.
 @return <code>true</code> if the objects are the same;
           <code>false</code> otherwise.
 */
- (jboolean)isEqual:(id)obj;

/*!
 @brief Returns the value of this <code>Long</code> as a <code>float</code> after
  a widening primitive conversion.
 */
- (jfloat)floatValue;

/*!
 @brief Determines the <code>long</code> value of the system property
  with the specified name.
 <p>The first argument is treated as the name of a system
  property.  System properties are accessible through the <code>java.lang.System.getProperty(java.lang.String)</code>
  method. The
  string value of this property is then interpreted as a <code>long</code>
  value using the grammar supported by <code>decode</code>
  and a <code>Long</code> object representing this value is returned. 
 <p>If there is no property with the specified name, if the
  specified name is empty or <code>null</code>, or if the property
  does not have the correct numeric format, then <code>null</code> is
  returned. 
 <p>In other words, this method returns a <code>Long</code> object
  equal to the value of: 
 <blockquote>
   <code>getLong(nm, null)</code>
  </blockquote>
 @param nm property name.
 @return the <code>Long</code> value of the property.
 @throw SecurityExceptionfor the same reasons as
           <code>System.getProperty</code>
 - seealso: java.lang.System#getProperty(java.lang.String)
 - seealso: java.lang.System#getProperty(java.lang.String, java.lang.String)
 */
+ (JavaLangLong * __nullable)getLongWithNSString:(NSString *)nm;

/*!
 @brief Determines the <code>long</code> value of the system property
  with the specified name.
 <p>The first argument is treated as the name of a system
  property.  System properties are accessible through the <code>java.lang.System.getProperty(java.lang.String)</code>
  method. The
  string value of this property is then interpreted as a <code>long</code>
  value using the grammar supported by <code>decode</code>
  and a <code>Long</code> object representing this value is returned. 
 <p>The second argument is the default value. A <code>Long</code> object
  that represents the value of the second argument is returned if there
  is no property of the specified name, if the property does not have
  the correct numeric format, or if the specified name is empty or null. 
 <p>In other words, this method returns a <code>Long</code> object equal
  to the value of: 
 <blockquote>
   <code>getLong(nm, new Long(val))</code>
  </blockquote>
  but in practice it may be implemented in a manner such as: 
 <blockquote>@code

  Long result = getLong(nm, null);
  return (result == null) ? new Long(val) : result; 
  
@endcode</blockquote>
  to avoid the unnecessary allocation of a <code>Long</code> object when
  the default value is not needed.
 @param nm property name.
 @param val default value.
 @return the <code>Long</code> value of the property.
 @throw SecurityExceptionfor the same reasons as
           <code>System.getProperty</code>
 - seealso: java.lang.System#getProperty(java.lang.String)
 - seealso: java.lang.System#getProperty(java.lang.String, java.lang.String)
 */
+ (JavaLangLong * __nullable)getLongWithNSString:(NSString *)nm
                                        withLong:(jlong)val;

/*!
 @brief Returns the <code>long</code> value of the system property with
  the specified name.The first argument is treated as the name
  of a system property.
 System properties are accessible through
  the <code>java.lang.System.getProperty(java.lang.String)</code>
  method. The string value of this property is then interpreted
  as a <code>long</code> value, as per the 
 <code>decode</code> method, and a <code>Long</code> object
  representing this value is returned; in summary: 
 <ul>
  <li>If the property value begins with the two ASCII characters 
 <code>0x</code> or the ASCII character <code>#</code>, not followed by
  a minus sign, then the rest of it is parsed as a hexadecimal integer
  exactly as for the method <code>valueOf(java.lang.String, int)</code>
  with radix 16. 
 <li>If the property value begins with the ASCII character 
 <code>0</code> followed by another character, it is parsed as
  an octal integer exactly as by the method <code>valueOf(java.lang.String, int)</code>
  with radix 8. 
 <li>Otherwise the property value is parsed as a decimal
  integer exactly as by the method 
 <code>valueOf(java.lang.String, int)</code> with radix 10. 
 </ul>
  
 <p>Note that, in every case, neither <code>L</code>
  (<code>'\u004C'</code>) nor <code>l</code>
  (<code>'\u006C'</code>) is permitted to appear at the end
  of the property value as a type indicator, as would be
  permitted in Java programming language source code. 
 <p>The second argument is the default value. The default value is
  returned if there is no property of the specified name, if the
  property does not have the correct numeric format, or if the
  specified name is empty or <code>null</code>.
 @param nm property name.
 @param val default value.
 @return the <code>Long</code> value of the property.
 @throw SecurityExceptionfor the same reasons as
           <code>System.getProperty</code>
 - seealso: System#getProperty(java.lang.String)
 - seealso: System#getProperty(java.lang.String, java.lang.String)
 */
+ (JavaLangLong * __nullable)getLongWithNSString:(NSString *)nm
                                withJavaLangLong:(JavaLangLong *)val;

/*!
 @brief Returns a hash code for this <code>Long</code>.The result is
  the exclusive OR of the two halves of the primitive 
 <code>long</code> value held by this <code>Long</code>
  object.
 That is, the hashcode is the value of the expression: 
 <blockquote>
   <code>(int)(this.longValue()^(this.longValue()>>>32))</code>
  </blockquote>
 @return a hash code value for this object.
 */
- (NSUInteger)hash;

/*!
 @brief Returns a hash code for a <code>long</code> value; compatible with 
 <code>Long.hashCode()</code>.
 @param value the value to hash
 @return a hash code value for a <code>long</code> value.
 @since 1.8
 */
+ (jint)hashCodeWithLong:(jlong)value;

/*!
 @brief Returns a <code>long</code> value with at most a single one-bit, in the
  position of the highest-order ("leftmost") one-bit in the specified 
 <code>long</code> value.Returns zero if the specified value has no
  one-bits in its two's complement binary representation, that is, if it
  is equal to zero.
 @param i the value whose highest one bit is to be computed
 @return a <code>long</code> value with a single one-bit, in the position
      of the highest-order one-bit in the specified value, or zero if
      the specified value is itself equal to zero.
 @since 1.5
 */
+ (jlong)highestOneBitWithLong:(jlong)i;

/*!
 @brief Returns the value of this <code>Long</code> as an <code>int</code> after
  a narrowing primitive conversion.
 */
- (jint)intValue;

/*!
 @brief Returns the value of this <code>Long</code> as a 
 <code>long</code> value.
 */
- (jlong)longLongValue;

/*!
 @brief Returns a <code>long</code> value with at most a single one-bit, in the
  position of the lowest-order ("rightmost") one-bit in the specified 
 <code>long</code> value.Returns zero if the specified value has no
  one-bits in its two's complement binary representation, that is, if it
  is equal to zero.
 @param i the value whose lowest one bit is to be computed
 @return a <code>long</code> value with a single one-bit, in the position
      of the lowest-order one-bit in the specified value, or zero if
      the specified value is itself equal to zero.
 @since 1.5
 */
+ (jlong)lowestOneBitWithLong:(jlong)i;

/*!
 @brief Returns the greater of two <code>long</code> values
  as if by calling <code>Math.max</code>.
 @param a the first operand
 @param b the second operand
 @return the greater of <code>a</code> and <code>b</code>
 - seealso: java.util.function.BinaryOperator
 @since 1.8
 */
+ (jlong)maxWithLong:(jlong)a
            withLong:(jlong)b;

/*!
 @brief Returns the smaller of two <code>long</code> values
  as if by calling <code>Math.min</code>.
 @param a the first operand
 @param b the second operand
 @return the smaller of <code>a</code> and <code>b</code>
 - seealso: java.util.function.BinaryOperator
 @since 1.8
 */
+ (jlong)minWithLong:(jlong)a
            withLong:(jlong)b;

/*!
 @brief Returns the number of zero bits preceding the highest-order
  ("leftmost") one-bit in the two's complement binary representation
  of the specified <code>long</code> value.Returns 64 if the
  specified value has no one-bits in its two's complement representation,
  in other words if it is equal to zero.
 <p>Note that this method is closely related to the logarithm base 2.
  For all positive <code>long</code> values x: 
 <ul>
  <li>floor(log<sub>2</sub>(x)) = <code>63 - numberOfLeadingZeros(x)</code>
  <li>ceil(log<sub>2</sub>(x)) = <code>64 - numberOfLeadingZeros(x - 1)</code>
  </ul>
 @param i the value whose number of leading zeros is to be computed
 @return the number of zero bits preceding the highest-order
      ("leftmost") one-bit in the two's complement binary representation
      of the specified <code>long</code> value, or 64 if the value
      is equal to zero.
 @since 1.5
 */
+ (jint)numberOfLeadingZerosWithLong:(jlong)i;

/*!
 @brief Returns the number of zero bits following the lowest-order ("rightmost")
  one-bit in the two's complement binary representation of the specified 
 <code>long</code> value.Returns 64 if the specified value has no
  one-bits in its two's complement representation, in other words if it is
  equal to zero.
 @param i the value whose number of trailing zeros is to be computed
 @return the number of zero bits following the lowest-order ("rightmost")
      one-bit in the two's complement binary representation of the
      specified <code>long</code> value, or 64 if the value is equal
      to zero.
 @since 1.5
 */
+ (jint)numberOfTrailingZerosWithLong:(jlong)i;

/*!
 @brief Parses the string argument as a signed decimal <code>long</code>.
 The characters in the string must all be decimal digits, except
  that the first character may be an ASCII minus sign <code>'-'</code>
  (<code>\u002D'</code>) to indicate a negative value or an
  ASCII plus sign <code>'+'</code> (<code>'\u002B'</code>) to
  indicate a positive value. The resulting <code>long</code> value is
  returned, exactly as if the argument and the radix <code>10</code>
  were given as arguments to the <code>parseLong(java.lang.String, int)</code>
  method. 
 <p>Note that neither the character <code>L</code>
  (<code>'\u004C'</code>) nor <code>l</code>
  (<code>'\u006C'</code>) is permitted to appear at the end
  of the string as a type indicator, as would be permitted in
  Java programming language source code.
 @param s a <code>String</code>  containing the <code>long</code>              representation to be parsed
 @return the <code>long</code> represented by the argument in
              decimal.
 @throw NumberFormatExceptionif the string does not contain a
              parsable <code>long</code>.
 */
+ (jlong)parseLongWithNSString:(NSString *)s;

/*!
 @brief Parses the string argument as a signed <code>long</code> in the
  radix specified by the second argument.The characters in the
  string must all be digits of the specified radix (as determined
  by whether <code>java.lang.Character.digit(char, int)</code> returns
  a nonnegative value), except that the first character may be an
  ASCII minus sign <code>'-'</code> (<code>'\u002D'</code>) to
  indicate a negative value or an ASCII plus sign <code>'+'</code>
  (<code>'\u002B'</code>) to indicate a positive value.
 The
  resulting <code>long</code> value is returned. 
 <p>Note that neither the character <code>L</code>
  (<code>'\u004C'</code>) nor <code>l</code>
  (<code>'\u006C'</code>) is permitted to appear at the end
  of the string as a type indicator, as would be permitted in
  Java programming language source code - except that either 
 <code>L</code> or <code>l</code> may appear as a digit for a
  radix greater than or equal to 22. 
 <p>An exception of type <code>NumberFormatException</code> is
  thrown if any of the following situations occurs: 
 <ul>
  
 <li>The first argument is <code>null</code> or is a string of
  length zero. 
 <li>The <code>radix</code> is either smaller than <code>java.lang.Character.MIN_RADIX</code>
  or larger than <code>java.lang.Character.MAX_RADIX</code>
 .
  
 <li>Any character of the string is not a digit of the specified
  radix, except that the first character may be a minus sign 
 <code>'-'</code> (<code>'\u002d'</code>) or plus sign <code>'+'</code>
  (<code>'\u002B'</code>) provided that the string is
  longer than length 1. 
 <li>The value represented by the string is not a value of type
       <code>long</code>.
  </ul>
  
 <p>Examples:
  <blockquote>@code

  parseLong("0", 10) returns 0L
  parseLong("473", 10) returns 473L
  parseLong("+42", 10) returns 42L
  parseLong("-0", 10) returns 0L
  parseLong("-FF", 16) returns -255L
  parseLong("1100110", 2) returns 102L
  parseLong("99", 8) throws a NumberFormatException
  parseLong("Hazelnut", 10) throws a NumberFormatException
  parseLong("Hazelnut", 36) returns 1356099454469L 
  
@endcode</blockquote>
 @param s the <code>String</code>  containing the                      
 <code>long</code>  representation to be parsed.
 @param radix the radix to be used while parsing <code>s</code> .
 @return the <code>long</code> represented by the string argument in
              the specified radix.
 @throw NumberFormatExceptionif the string does not contain a
              parsable <code>long</code>.
 */
+ (jlong)parseLongWithNSString:(NSString *)s
                       withInt:(jint)radix;

/*!
 @brief Parses the string argument as an unsigned decimal <code>long</code>.The
  characters in the string must all be decimal digits, except
  that the first character may be an an ASCII plus sign <code>'+'</code>
  (<code>'\u002B'</code>).
 The resulting integer value
  is returned, exactly as if the argument and the radix 10 were
  given as arguments to the <code>parseUnsignedLong(java.lang.String, int)</code>
  method.
 @param s a <code>String</code>  containing the unsigned <code>long</code>             representation to be parsed
 @return the unsigned <code>long</code> value represented by the decimal string argument
 @throw NumberFormatExceptionif the string does not contain a
             parsable unsigned integer.
 @since 1.8
 */
+ (jlong)parseUnsignedLongWithNSString:(NSString *)s;

/*!
 @brief Parses the string argument as an unsigned <code>long</code> in the
  radix specified by the second argument.An unsigned integer
  maps the values usually associated with negative numbers to
  positive numbers larger than <code>MAX_VALUE</code>.
 The characters in the string must all be digits of the
  specified radix (as determined by whether <code>java.lang.Character.digit(char, int)</code>
  returns a nonnegative
  value), except that the first character may be an ASCII plus
  sign <code>'+'</code> (<code>'\u002B'</code>). The resulting
  integer value is returned. 
 <p>An exception of type <code>NumberFormatException</code> is
  thrown if any of the following situations occurs: 
 <ul>
  <li>The first argument is <code>null</code> or is a string of
  length zero. 
 <li>The radix is either smaller than 
 <code>java.lang.Character.MIN_RADIX</code> or
  larger than <code>java.lang.Character.MAX_RADIX</code>.
  
 <li>Any character of the string is not a digit of the specified
  radix, except that the first character may be a plus sign 
 <code>'+'</code> (<code>'\u002B'</code>) provided that the
  string is longer than length 1. 
 <li>The value represented by the string is larger than the
  largest unsigned <code>long</code>, 2<sup>64</sup>-1.
  
 </ul>
 @param s the <code>String</code>  containing the unsigned integer                   representation to be parsed
 @param radix the radix to be used while parsing <code>s</code> .
 @return the unsigned <code>long</code> represented by the string
              argument in the specified radix.
 @throw NumberFormatExceptionif the <code>String</code>
              does not contain a parsable <code>long</code>.
 @since 1.8
 */
+ (jlong)parseUnsignedLongWithNSString:(NSString *)s
                               withInt:(jint)radix;

/*!
 @brief Returns the unsigned remainder from dividing the first argument
  by the second where each argument and the result is interpreted
  as an unsigned value.
 @param dividend the value to be divided
 @param divisor the value doing the dividing
 @return the unsigned remainder of the first argument divided by
  the second argument
 - seealso: #divideUnsigned
 @since 1.8
 */
+ (jlong)remainderUnsignedWithLong:(jlong)dividend
                          withLong:(jlong)divisor;

/*!
 @brief Returns the value obtained by reversing the order of the bits in the
  two's complement binary representation of the specified <code>long</code>
  value.
 @param i the value to be reversed
 @return the value obtained by reversing order of the bits in the
      specified <code>long</code> value.
 @since 1.5
 */
+ (jlong)reverseWithLong:(jlong)i;

/*!
 @brief Returns the value obtained by reversing the order of the bytes in the
  two's complement representation of the specified <code>long</code> value.
 @param i the value whose bytes are to be reversed
 @return the value obtained by reversing the bytes in the specified
      <code>long</code> value.
 @since 1.5
 */
+ (jlong)reverseBytesWithLong:(jlong)i;

/*!
 @brief Returns the value obtained by rotating the two's complement binary
  representation of the specified <code>long</code> value left by the
  specified number of bits.
 (Bits shifted out of the left hand, or
  high-order, side reenter on the right, or low-order.) 
 <p>Note that left rotation with a negative distance is equivalent to
  right rotation: <code>rotateLeft(val, -distance) == rotateRight(val,
  distance)</code>
 .  Note also that rotation by any multiple of 64 is a
  no-op, so all but the last six bits of the rotation distance can be
  ignored, even if the distance is negative: <code>rotateLeft(val,
  distance) == rotateLeft(val, distance & 0x3F)</code>
 .
 @param i the value whose bits are to be rotated left
 @param distance the number of bit positions to rotate left
 @return the value obtained by rotating the two's complement binary
      representation of the specified <code>long</code> value left by the
      specified number of bits.
 @since 1.5
 */
+ (jlong)rotateLeftWithLong:(jlong)i
                    withInt:(jint)distance;

/*!
 @brief Returns the value obtained by rotating the two's complement binary
  representation of the specified <code>long</code> value right by the
  specified number of bits.
 (Bits shifted out of the right hand, or
  low-order, side reenter on the left, or high-order.) 
 <p>Note that right rotation with a negative distance is equivalent to
  left rotation: <code>rotateRight(val, -distance) == rotateLeft(val,
  distance)</code>
 .  Note also that rotation by any multiple of 64 is a
  no-op, so all but the last six bits of the rotation distance can be
  ignored, even if the distance is negative: <code>rotateRight(val,
  distance) == rotateRight(val, distance & 0x3F)</code>
 .
 @param i the value whose bits are to be rotated right
 @param distance the number of bit positions to rotate right
 @return the value obtained by rotating the two's complement binary
      representation of the specified <code>long</code> value right by the
      specified number of bits.
 @since 1.5
 */
+ (jlong)rotateRightWithLong:(jlong)i
                     withInt:(jint)distance;

/*!
 @brief Returns the value of this <code>Long</code> as a <code>short</code> after
  a narrowing primitive conversion.
 */
- (jshort)shortValue;

/*!
 @brief Returns the signum function of the specified <code>long</code> value.
 (The
  return value is -1 if the specified value is negative; 0 if the
  specified value is zero; and 1 if the specified value is positive.)
 @param i the value whose signum is to be computed
 @return the signum function of the specified <code>long</code> value.
 @since 1.5
 */
+ (jint)signumWithLong:(jlong)i;

/*!
 @brief Adds two <code>long</code> values together as per the + operator.
 @param a the first operand
 @param b the second operand
 @return the sum of <code>a</code> and <code>b</code>
 - seealso: java.util.function.BinaryOperator
 @since 1.8
 */
+ (jlong)sumWithLong:(jlong)a
            withLong:(jlong)b;

/*!
 @brief Returns a string representation of the <code>long</code>
  argument as an unsigned integer in base&nbsp;2.
 <p>The unsigned <code>long</code> value is the argument plus
  2<sup>64</sup> if the argument is negative; otherwise, it is
  equal to the argument.  This value is converted to a string of
  ASCII digits in binary (base&nbsp;2) with no extra leading 
 <code>0</code>s.
  
 <p>The value of the argument can be recovered from the returned
  string <code>s</code> by calling <code>Long.parseUnsignedLong(s,
  2)</code>
 .
  
 <p>If the unsigned magnitude is zero, it is represented by a
  single zero character <code>'0'</code> (<code>'\u0030'</code>);
  otherwise, the first character of the representation of the
  unsigned magnitude will not be the zero character. The
  characters <code>'0'</code> (<code>'\u0030'</code>) and <code>'1'</code>
  (<code>'\u0031'</code>) are used as binary digits.
 @param i a <code>long</code>  to be converted to a string.
 @return the string representation of the unsigned <code>long</code>
           value represented by the argument in binary (base&nbsp;2).
 - seealso: #parseUnsignedLong(String, int)
 - seealso: #toUnsignedString(long, int)
 @since JDK 1.0.2
 */
+ (NSString * __nonnull)toBinaryStringWithLong:(jlong)i;

/*!
 @brief Returns a string representation of the <code>long</code>
  argument as an unsigned integer in base&nbsp;16.
 <p>The unsigned <code>long</code> value is the argument plus
  2<sup>64</sup> if the argument is negative; otherwise, it is
  equal to the argument.  This value is converted to a string of
  ASCII digits in hexadecimal (base&nbsp;16) with no extra
  leading <code>0</code>s.
  
 <p>The value of the argument can be recovered from the returned
  string <code>s</code> by calling <code>Long.parseUnsignedLong(s,
  16)</code>
 .
  
 <p>If the unsigned magnitude is zero, it is represented by a
  single zero character <code>'0'</code> (<code>'\u0030'</code>);
  otherwise, the first character of the representation of the
  unsigned magnitude will not be the zero character. The
  following characters are used as hexadecimal digits: 
 <blockquote>
   <code>0123456789abcdef</code>
  </blockquote>
  These are the characters <code>'\u0030'</code> through 
 <code>'\u0039'</code> and  <code>'\u0061'</code> through 
 <code>'\u0066'</code>.  If uppercase letters are desired,
  the <code>java.lang.String.toUpperCase()</code> method may be called
  on the result: 
 <blockquote>
   <code>Long.toHexString(n).toUpperCase()</code>
  </blockquote>
 @param i a <code>long</code>  to be converted to a string.
 @return the string representation of the unsigned <code>long</code>
           value represented by the argument in hexadecimal
           (base&nbsp;16).
 - seealso: #parseUnsignedLong(String, int)
 - seealso: #toUnsignedString(long, int)
 @since JDK 1.0.2
 */
+ (NSString * __nonnull)toHexStringWithLong:(jlong)i;

/*!
 @brief Returns a string representation of the <code>long</code>
  argument as an unsigned integer in base&nbsp;8.
 <p>The unsigned <code>long</code> value is the argument plus
  2<sup>64</sup> if the argument is negative; otherwise, it is
  equal to the argument.  This value is converted to a string of
  ASCII digits in octal (base&nbsp;8) with no extra leading 
 <code>0</code>s.
  
 <p>The value of the argument can be recovered from the returned
  string <code>s</code> by calling <code>Long.parseUnsignedLong(s,
  8)</code>
 .
  
 <p>If the unsigned magnitude is zero, it is represented by a
  single zero character <code>'0'</code> (<code>'\u0030'</code>);
  otherwise, the first character of the representation of the
  unsigned magnitude will not be the zero character. The
  following characters are used as octal digits: 
 <blockquote>
   <code>01234567</code>
  </blockquote>
  These are the characters <code>'\u0030'</code> through 
 <code>'\u0037'</code>.
 @param i a <code>long</code>  to be converted to a string.
 @return the string representation of the unsigned <code>long</code>
           value represented by the argument in octal (base&nbsp;8).
 - seealso: #parseUnsignedLong(String, int)
 - seealso: #toUnsignedString(long, int)
 @since JDK 1.0.2
 */
+ (NSString * __nonnull)toOctalStringWithLong:(jlong)i;

/*!
 @brief Returns a <code>String</code> object representing this 
 <code>Long</code>'s value.The value is converted to signed
  decimal representation and returned as a string, exactly as if
  the <code>long</code> value were given as an argument to the 
 <code>java.lang.Long.toString(long)</code> method.
 @return a string representation of the value of this object in
           base&nbsp;10.
 */
- (NSString * __nonnull)description;

/*!
 @brief Returns a <code>String</code> object representing the specified 
 <code>long</code>.The argument is converted to signed decimal
  representation and returned as a string, exactly as if the
  argument and the radix 10 were given as arguments to the <code>toString(long, int)</code>
  method.
 @param i a <code>long</code>  to be converted.
 @return a string representation of the argument in base&nbsp;10.
 */
+ (NSString * __nonnull)toStringWithLong:(jlong)i;

/*!
 @brief Returns a string representation of the first argument in the
  radix specified by the second argument.
 <p>If the radix is smaller than <code>Character.MIN_RADIX</code>
  or larger than <code>Character.MAX_RADIX</code>, then the radix 
 <code>10</code> is used instead. 
 <p>If the first argument is negative, the first element of the
  result is the ASCII minus sign <code>'-'</code>
  (<code>'\u002d'</code>). If the first argument is not
  negative, no sign character appears in the result. 
 <p>The remaining characters of the result represent the magnitude
  of the first argument. If the magnitude is zero, it is
  represented by a single zero character <code>'0'</code>
  (<code>'\u0030'</code>); otherwise, the first character of
  the representation of the magnitude will not be the zero
  character.  The following ASCII characters are used as digits: 
 <blockquote>
    <code>0123456789abcdefghijklmnopqrstuvwxyz</code>
  </blockquote>
  These are <code>'\u0030'</code> through 
 <code>'\u0039'</code> and <code>'\u0061'</code> through 
 <code>'\u007a'</code>. If <code>radix</code> is 
 <var>N</var>, then the first <var>N</var> of these characters
  are used as radix-<var>N</var> digits in the order shown. Thus,
  the digits for hexadecimal (radix 16) are 
 <code>0123456789abcdef</code>. If uppercase letters are
  desired, the <code>java.lang.String.toUpperCase()</code> method may
  be called on the result: 
 <blockquote>
   <code>Long.toString(n, 16).toUpperCase()</code>
  </blockquote>
 @param i a <code>long</code>  to be converted to a string.
 @param radix the radix to use in the string representation.
 @return a string representation of the argument in the specified radix.
 - seealso: java.lang.Character#MAX_RADIX
 - seealso: java.lang.Character#MIN_RADIX
 */
+ (NSString * __nonnull)toStringWithLong:(jlong)i
                                 withInt:(jint)radix;

/*!
 @brief Returns a string representation of the argument as an unsigned
  decimal value.
 The argument is converted to unsigned decimal representation
  and returned as a string exactly as if the argument and radix
  10 were given as arguments to the <code>toUnsignedString(long,
 int)</code>
  method.
 @param i an integer to be converted to an unsigned string.
 @return an unsigned string representation of the argument.
 - seealso: #toUnsignedString(long, int)
 @since 1.8
 */
+ (NSString * __nonnull)toUnsignedStringWithLong:(jlong)i;

/*!
 @brief Returns a string representation of the first argument as an
  unsigned integer value in the radix specified by the second
  argument.
 <p>If the radix is smaller than <code>Character.MIN_RADIX</code>
  or larger than <code>Character.MAX_RADIX</code>, then the radix 
 <code>10</code> is used instead. 
 <p>Note that since the first argument is treated as an unsigned
  value, no leading sign character is printed. 
 <p>If the magnitude is zero, it is represented by a single zero
  character <code>'0'</code> (<code>'\u0030'</code>); otherwise,
  the first character of the representation of the magnitude will
  not be the zero character. 
 <p>The behavior of radixes and the characters used as digits
  are the same as <code>toString</code>.
 @param i an integer to be converted to an unsigned string.
 @param radix the radix to use in the string representation.
 @return an unsigned string representation of the argument in the specified radix.
 - seealso: #toString(long, int)
 @since 1.8
 */
+ (NSString * __nonnull)toUnsignedStringWithLong:(jlong)i
                                         withInt:(jint)radix;

/*!
 @brief Returns a <code>Long</code> instance representing the specified 
 <code>long</code> value.
 If a new <code>Long</code> instance is not required, this method
  should generally be used in preference to the constructor 
 <code>Long(long)</code>, as this method is likely to yield
  significantly better space and time performance by caching
  frequently requested values.
  Note that unlike the corresponding method
  in the <code>Integer</code> class, this method
  is <em>not</em> required to cache values within a particular
  range.
 @param l a long value.
 @return a <code>Long</code> instance representing <code>l</code>.
 @since 1.5
 */
+ (JavaLangLong * __nonnull)valueOfWithLong:(jlong)l;

/*!
 @brief Returns a <code>Long</code> object holding the value
  of the specified <code>String</code>.The argument is
  interpreted as representing a signed decimal <code>long</code>,
  exactly as if the argument were given to the <code>parseLong(java.lang.String)</code>
  method.
 The result is a 
 <code>Long</code> object that represents the integer value
  specified by the string. 
 <p>In other words, this method returns a <code>Long</code> object
  equal to the value of: 
 <blockquote>
   <code>new Long(Long.parseLong(s))</code>
  </blockquote>
 @param s the string to be parsed.
 @return a <code>Long</code> object holding the value
              represented by the string argument.
 @throw NumberFormatExceptionIf the string cannot be parsed
              as a <code>long</code>.
 */
+ (JavaLangLong * __nonnull)valueOfWithNSString:(NSString *)s;

/*!
 @brief Returns a <code>Long</code> object holding the value
  extracted from the specified <code>String</code> when parsed
  with the radix given by the second argument.The first
  argument is interpreted as representing a signed 
 <code>long</code> in the radix specified by the second
  argument, exactly as if the arguments were given to the <code>parseLong(java.lang.String, int)</code>
  method.
 The result is a 
 <code>Long</code> object that represents the <code>long</code>
  value specified by the string. 
 <p>In other words, this method returns a <code>Long</code> object equal
  to the value of: 
 <blockquote>
   <code>new Long(Long.parseLong(s, radix))</code>
  </blockquote>
 @param s the string to be parsed
 @param radix the radix to be used in interpreting <code>s</code>
 @return a <code>Long</code> object holding the value
              represented by the string argument in the specified
              radix.
 @throw NumberFormatExceptionIf the <code>String</code> does not
              contain a parsable <code>long</code>.
 */
+ (JavaLangLong * __nonnull)valueOfWithNSString:(NSString *)s
                                        withInt:(jint)radix;

#pragma mark Package-Private

/*!
 @brief Places characters representing the integer i into the
  character array buf.The characters are placed into
  the buffer backwards starting with the least significant
  digit at the specified index (exclusive), and working
  backwards from there.
 Will fail if i == Long.MIN_VALUE
 */
+ (void)getCharsWithLong:(jlong)i
                 withInt:(jint)index
           withCharArray:(IOSCharArray *)buf;

+ (jint)stringSizeWithLong:(jlong)x;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(JavaLangLong)

/*!
 @brief A constant holding the minimum value a <code>long</code> can
  have, -2<sup>63</sup>.
 */
inline jlong JavaLangLong_get_MIN_VALUE(void);
#define JavaLangLong_MIN_VALUE ((jlong) 0x8000000000000000LL)
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangLong, MIN_VALUE, jlong)

/*!
 @brief A constant holding the maximum value a <code>long</code> can
  have, 2<sup>63</sup>-1.
 */
inline jlong JavaLangLong_get_MAX_VALUE(void);
#define JavaLangLong_MAX_VALUE 9223372036854775807LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangLong, MAX_VALUE, jlong)

/*!
 @brief The <code>Class</code> instance representing the primitive type 
 <code>long</code>.
 @since JDK1.1
 */
inline IOSClass *JavaLangLong_get_TYPE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSClass *JavaLangLong_TYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangLong, TYPE, IOSClass *)

/*!
 @brief The number of bits used to represent a <code>long</code> value in two's
  complement binary form.
 @since 1.5
 */
inline jint JavaLangLong_get_SIZE(void);
#define JavaLangLong_SIZE 64
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangLong, SIZE, jint)

/*!
 @brief The number of bytes used to represent a <code>long</code> value in two's
  complement binary form.
 @since 1.8
 */
inline jint JavaLangLong_get_BYTES(void);
#define JavaLangLong_BYTES 8
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangLong, BYTES, jint)

FOUNDATION_EXPORT NSString *JavaLangLong_toStringWithLong_withInt_(jlong i, jint radix);

FOUNDATION_EXPORT NSString *JavaLangLong_toUnsignedStringWithLong_withInt_(jlong i, jint radix);

FOUNDATION_EXPORT NSString *JavaLangLong_toHexStringWithLong_(jlong i);

FOUNDATION_EXPORT NSString *JavaLangLong_toOctalStringWithLong_(jlong i);

FOUNDATION_EXPORT NSString *JavaLangLong_toBinaryStringWithLong_(jlong i);

FOUNDATION_EXPORT NSString *JavaLangLong_toStringWithLong_(jlong i);

FOUNDATION_EXPORT NSString *JavaLangLong_toUnsignedStringWithLong_(jlong i);

FOUNDATION_EXPORT void JavaLangLong_getCharsWithLong_withInt_withCharArray_(jlong i, jint index, IOSCharArray *buf);

FOUNDATION_EXPORT jint JavaLangLong_stringSizeWithLong_(jlong x);

FOUNDATION_EXPORT jlong JavaLangLong_parseLongWithNSString_withInt_(NSString *s, jint radix);

FOUNDATION_EXPORT jlong JavaLangLong_parseLongWithNSString_(NSString *s);

FOUNDATION_EXPORT jlong JavaLangLong_parseUnsignedLongWithNSString_withInt_(NSString *s, jint radix);

FOUNDATION_EXPORT jlong JavaLangLong_parseUnsignedLongWithNSString_(NSString *s);

FOUNDATION_EXPORT JavaLangLong *JavaLangLong_valueOfWithNSString_withInt_(NSString *s, jint radix);

FOUNDATION_EXPORT JavaLangLong *JavaLangLong_valueOfWithNSString_(NSString *s);

FOUNDATION_EXPORT JavaLangLong *JavaLangLong_valueOfWithLong_(jlong l);

FOUNDATION_EXPORT JavaLangLong *JavaLangLong_decodeWithNSString_(NSString *nm);

FOUNDATION_EXPORT void JavaLangLong_initWithLong_(JavaLangLong *self, jlong value);

FOUNDATION_EXPORT JavaLangLong *new_JavaLangLong_initWithLong_(jlong value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangLong *create_JavaLangLong_initWithLong_(jlong value);

FOUNDATION_EXPORT void JavaLangLong_initWithNSString_(JavaLangLong *self, NSString *s);

FOUNDATION_EXPORT JavaLangLong *new_JavaLangLong_initWithNSString_(NSString *s) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangLong *create_JavaLangLong_initWithNSString_(NSString *s);

FOUNDATION_EXPORT jint JavaLangLong_hashCodeWithLong_(jlong value);

FOUNDATION_EXPORT JavaLangLong *JavaLangLong_getLongWithNSString_(NSString *nm);

FOUNDATION_EXPORT JavaLangLong *JavaLangLong_getLongWithNSString_withLong_(NSString *nm, jlong val);

FOUNDATION_EXPORT JavaLangLong *JavaLangLong_getLongWithNSString_withJavaLangLong_(NSString *nm, JavaLangLong *val);

FOUNDATION_EXPORT jint JavaLangLong_compareWithLong_withLong_(jlong x, jlong y);

FOUNDATION_EXPORT jint JavaLangLong_compareUnsignedWithLong_withLong_(jlong x, jlong y);

FOUNDATION_EXPORT jlong JavaLangLong_divideUnsignedWithLong_withLong_(jlong dividend, jlong divisor);

FOUNDATION_EXPORT jlong JavaLangLong_remainderUnsignedWithLong_withLong_(jlong dividend, jlong divisor);

FOUNDATION_EXPORT jlong JavaLangLong_highestOneBitWithLong_(jlong i);

FOUNDATION_EXPORT jlong JavaLangLong_lowestOneBitWithLong_(jlong i);

FOUNDATION_EXPORT jint JavaLangLong_numberOfLeadingZerosWithLong_(jlong i);

FOUNDATION_EXPORT jint JavaLangLong_numberOfTrailingZerosWithLong_(jlong i);

FOUNDATION_EXPORT jint JavaLangLong_bitCountWithLong_(jlong i);

FOUNDATION_EXPORT jlong JavaLangLong_rotateLeftWithLong_withInt_(jlong i, jint distance);

FOUNDATION_EXPORT jlong JavaLangLong_rotateRightWithLong_withInt_(jlong i, jint distance);

FOUNDATION_EXPORT jlong JavaLangLong_reverseWithLong_(jlong i);

FOUNDATION_EXPORT jint JavaLangLong_signumWithLong_(jlong i);

FOUNDATION_EXPORT jlong JavaLangLong_reverseBytesWithLong_(jlong i);

FOUNDATION_EXPORT jlong JavaLangLong_sumWithLong_withLong_(jlong a, jlong b);

FOUNDATION_EXPORT jlong JavaLangLong_maxWithLong_withLong_(jlong a, jlong b);

FOUNDATION_EXPORT jlong JavaLangLong_minWithLong_withLong_(jlong a, jlong b);

J2OBJC_TYPE_LITERAL_HEADER(JavaLangLong)

BOXED_INC_AND_DEC(Long, longLongValue, JavaLangLong)
BOXED_COMPOUND_ASSIGN_ARITHMETIC(Long, longLongValue, jlong, JavaLangLong)
BOXED_COMPOUND_ASSIGN_MOD(Long, longLongValue, jlong, JavaLangLong)
BOXED_COMPOUND_ASSIGN_BITWISE(Long, longLongValue, jlong, JavaLangLong)
BOXED_SHIFT_ASSIGN_64(Long, longLongValue, jlong, JavaLangLong)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaLangLong")
