//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/lang/reflect/Parameter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaLangReflectParameter")
#ifdef RESTRICT_JavaLangReflectParameter
#define INCLUDE_ALL_JavaLangReflectParameter 0
#else
#define INCLUDE_ALL_JavaLangReflectParameter 1
#endif
#undef RESTRICT_JavaLangReflectParameter

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaLangReflectParameter_) && (INCLUDE_ALL_JavaLangReflectParameter || defined(INCLUDE_JavaLangReflectParameter))
#define JavaLangReflectParameter_

#define RESTRICT_JavaLangReflectAnnotatedElement 1
#define INCLUDE_JavaLangReflectAnnotatedElement 1
#include "java/lang/reflect/AnnotatedElement.h"

@class IOSClass;
@class IOSObjectArray;
@class JavaLangReflectExecutable;
@protocol JavaLangAnnotationAnnotation;
@protocol JavaLangReflectType;

/*!
 @brief Information about method parameters.
 A <code>Parameter</code> provides information about method parameters,
  including its name and modifiers.  It also provides an alternate
  means of obtaining attributes for the parameter.
 @since 1.8
 */
@interface JavaLangReflectParameter : NSObject < JavaLangReflectAnnotatedElement >

#pragma mark Public

/*!
 @brief Compares based on the executable and the index.
 @param obj The object to compare.
 @return Whether or not this is equal to the argument.
 */
- (jboolean)isEqual:(id)obj;

/*!
 @throw NullPointerException
 */
- (id<JavaLangAnnotationAnnotation> __nullable)getAnnotationWithIOSClass:(IOSClass *)annotationClass;

/*!
 */
- (IOSObjectArray * __nonnull)getAnnotations;

/*!
 @throw NullPointerException
 */
- (IOSObjectArray *)getAnnotationsByTypeWithIOSClass:(IOSClass *)annotationClass;

/*!
 @throw NullPointerException
 */
- (id<JavaLangAnnotationAnnotation> __nullable)getDeclaredAnnotationWithIOSClass:(IOSClass *)annotationClass;

/*!
 */
- (IOSObjectArray * __nonnull)getDeclaredAnnotations;

/*!
 @throw NullPointerException
 */
- (IOSObjectArray *)getDeclaredAnnotationsByTypeWithIOSClass:(IOSClass *)annotationClass;

/*!
 @brief Return the <code>Executable</code> which declares this parameter.
 @return The <code>Executable</code> declaring this parameter.
 */
- (JavaLangReflectExecutable * __nonnull)getDeclaringExecutable;

/*!
 @brief Get the modifier flags for this the parameter represented by this 
 <code>Parameter</code> object.
 @return The modifier flags for this parameter.
 */
- (jint)getModifiers;

/*!
 @brief Returns the name of the parameter.If the parameter's name is 
 present, then this method returns
  the name provided by the class file.
 Otherwise, this method
  synthesizes a name of the form argN, where N is the index of
  the parameter in the descriptor of the method which declares
  the parameter.
 @return The name of the parameter, either provided by the class
          file or synthesized if the class file does not provide
          a name.
 */
- (NSString * __nonnull)getName;

/*!
 @brief Returns a <code>Type</code> object that identifies the parameterized
  type for the parameter represented by this <code>Parameter</code>
  object.
 @return a <code>Type</code> object identifying the parameterized
  type of the parameter represented by this object
 */
- (id<JavaLangReflectType> __nonnull)getParameterizedType;

/*!
 @brief Returns a <code>Class</code> object that identifies the
  declared type for the parameter represented by this 
 <code>Parameter</code> object.
 @return a <code>Class</code> object identifying the declared
  type of the parameter represented by this object
 */
- (IOSClass * __nonnull)getType;

/*!
 @brief Returns a hash code based on the executable's hash code and the
  index.
 @return A hash code based on the executable's hash code.
 */
- (NSUInteger)hash;

/*!
 @brief Returns <code>true</code> if this parameter is implicitly declared
  in source code; returns <code>false</code> otherwise.
 @return true if and only if this parameter is implicitly
  declared as defined by <cite>The Java&trade; Language
  Specification</cite>.
 */
- (jboolean)isImplicit;

/*!
 @brief Returns true if the parameter has a name; returns false otherwise.
 Whether a parameter has a name is determined by compiler options
  and whether the parameter is synthesized.
 @return true if and only if the parameter has a name
 */
- (jboolean)isNamePresent;

/*!
 @brief Returns <code>true</code> if this parameter is neither implicitly
  nor explicitly declared in source code; returns <code>false</code>
  otherwise.
 @return true if and only if this parameter is a synthetic
  construct as defined by 
 <cite>The Java&trade; Language Specification</cite>.
 */
- (jboolean)isSynthetic;

/*!
 @brief Returns <code>true</code> if this parameter represents a variable
  argument list; returns <code>false</code> otherwise.
 @return <code>true</code> if an only if this parameter represents a
  variable argument list.
 */
- (jboolean)isVarArgs;

/*!
 @brief Returns a string describing this parameter.The format is the
  modifiers for the parameter, if any, in canonical order as
  recommended by <cite>The Java&trade; Language
  Specification</cite>, followed by the fully- qualified type of
  the parameter (excluding the last [] if the parameter is
  variable arity), followed by "..." if the parameter is variable
  arity, followed by a space, followed by the name of the
  parameter.
 @return A string representation of the parameter and associated
  information.
 */
- (NSString * __nonnull)description;

#pragma mark Package-Private

/*!
 @brief Package-private constructor for <code>Parameter</code>.
 If method parameter data is present in the classfile, then the
  JVM creates <code>Parameter</code> objects directly.  If it is
  absent, however, then <code>Executable</code> uses this constructor
  to synthesize them.
 @param name The name of the parameter.
 @param modifiers The modifier flags for the parameter.
 @param executable The executable which defines this parameter.
 @param index The index of the parameter.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)name
                                   withInt:(jint)modifiers
             withJavaLangReflectExecutable:(JavaLangReflectExecutable *)executable
                                   withInt:(jint)index;

- (NSString *)getRealName;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaLangReflectParameter)

FOUNDATION_EXPORT void JavaLangReflectParameter_initWithNSString_withInt_withJavaLangReflectExecutable_withInt_(JavaLangReflectParameter *self, NSString *name, jint modifiers, JavaLangReflectExecutable *executable, jint index);

FOUNDATION_EXPORT JavaLangReflectParameter *new_JavaLangReflectParameter_initWithNSString_withInt_withJavaLangReflectExecutable_withInt_(NSString *name, jint modifiers, JavaLangReflectExecutable *executable, jint index) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangReflectParameter *create_JavaLangReflectParameter_initWithNSString_withInt_withJavaLangReflectExecutable_withInt_(NSString *name, jint modifiers, JavaLangReflectExecutable *executable, jint index);

J2OBJC_TYPE_LITERAL_HEADER(JavaLangReflectParameter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaLangReflectParameter")
