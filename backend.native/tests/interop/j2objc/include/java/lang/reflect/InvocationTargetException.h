//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/lang/reflect/InvocationTargetException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaLangReflectInvocationTargetException")
#ifdef RESTRICT_JavaLangReflectInvocationTargetException
#define INCLUDE_ALL_JavaLangReflectInvocationTargetException 0
#else
#define INCLUDE_ALL_JavaLangReflectInvocationTargetException 1
#endif
#undef RESTRICT_JavaLangReflectInvocationTargetException

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaLangReflectInvocationTargetException_) && (INCLUDE_ALL_JavaLangReflectInvocationTargetException || defined(INCLUDE_JavaLangReflectInvocationTargetException))
#define JavaLangReflectInvocationTargetException_

#define RESTRICT_JavaLangReflectiveOperationException 1
#define INCLUDE_JavaLangReflectiveOperationException 1
#include "java/lang/ReflectiveOperationException.h"

@class JavaLangThrowable;

/*!
 @brief InvocationTargetException is a checked exception that wraps
  an exception thrown by an invoked method or constructor.
 <p>As of release 1.4, this exception has been retrofitted to conform to
  the general purpose exception-chaining mechanism.  The "target exception"
  that is provided at construction time and accessed via the 
 <code>getTargetException()</code> method is now known as the <i>cause</i>,
  and may be accessed via the <code>Throwable.getCause()</code> method,
  as well as the aforementioned "legacy method."
 - seealso: Method
 - seealso: Constructor
 */
@interface JavaLangReflectInvocationTargetException : JavaLangReflectiveOperationException

#pragma mark Public

/*!
 @brief Constructs a InvocationTargetException with a target exception.
 @param target the target exception
 */
- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)target;

/*!
 @brief Constructs a InvocationTargetException with a target exception
  and a detail message.
 @param target the target exception
 @param s the detail message
 */
- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)target
                                       withNSString:(NSString *)s;

/*!
 @brief Returns the cause of this exception (the thrown target exception,
  which may be <code>null</code>).
 @return the cause of this exception.
 @since 1.4
 */
- (JavaLangThrowable *)getCause;

/*!
 @brief Get the thrown target exception.
 <p>This method predates the general-purpose exception chaining facility.
  The <code>Throwable.getCause()</code> method is now the preferred means of
  obtaining this information.
 @return the thrown target exception (cause of this exception).
 */
- (JavaLangThrowable *)getTargetException;

#pragma mark Protected

/*!
 @brief Constructs an <code>InvocationTargetException</code> with 
 <code>null</code> as the target exception.
 */
- (instancetype __nonnull)init;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaLangReflectInvocationTargetException)

FOUNDATION_EXPORT void JavaLangReflectInvocationTargetException_init(JavaLangReflectInvocationTargetException *self);

FOUNDATION_EXPORT JavaLangReflectInvocationTargetException *new_JavaLangReflectInvocationTargetException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangReflectInvocationTargetException *create_JavaLangReflectInvocationTargetException_init(void);

FOUNDATION_EXPORT void JavaLangReflectInvocationTargetException_initWithJavaLangThrowable_(JavaLangReflectInvocationTargetException *self, JavaLangThrowable *target);

FOUNDATION_EXPORT JavaLangReflectInvocationTargetException *new_JavaLangReflectInvocationTargetException_initWithJavaLangThrowable_(JavaLangThrowable *target) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangReflectInvocationTargetException *create_JavaLangReflectInvocationTargetException_initWithJavaLangThrowable_(JavaLangThrowable *target);

FOUNDATION_EXPORT void JavaLangReflectInvocationTargetException_initWithJavaLangThrowable_withNSString_(JavaLangReflectInvocationTargetException *self, JavaLangThrowable *target, NSString *s);

FOUNDATION_EXPORT JavaLangReflectInvocationTargetException *new_JavaLangReflectInvocationTargetException_initWithJavaLangThrowable_withNSString_(JavaLangThrowable *target, NSString *s) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangReflectInvocationTargetException *create_JavaLangReflectInvocationTargetException_initWithJavaLangThrowable_withNSString_(JavaLangThrowable *target, NSString *s);

J2OBJC_TYPE_LITERAL_HEADER(JavaLangReflectInvocationTargetException)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaLangReflectInvocationTargetException")
