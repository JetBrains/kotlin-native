//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/lang/reflect/Array.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaLangReflectArray")
#ifdef RESTRICT_JavaLangReflectArray
#define INCLUDE_ALL_JavaLangReflectArray 0
#else
#define INCLUDE_ALL_JavaLangReflectArray 1
#endif
#undef RESTRICT_JavaLangReflectArray

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaLangReflectArray_) && (INCLUDE_ALL_JavaLangReflectArray || defined(INCLUDE_JavaLangReflectArray))
#define JavaLangReflectArray_

@class IOSClass;
@class IOSIntArray;

/*!
 @brief The <code>Array</code> class provides static methods to dynamically create and
  access Java arrays.
 <p><code>Array</code> permits widening conversions to occur during a get or set
  operation, but throws an <code>IllegalArgumentException</code> if a narrowing
  conversion would occur.
 @author Nakul Saraiya
 */
@interface JavaLangReflectArray : NSObject

#pragma mark Public

/*!
 @brief Returns the value of the indexed component in the specified
  array object.The value is automatically wrapped in an object
  if it has a primitive type.
 @param array the array
 @param index the index
 @return the (possibly wrapped) value of the indexed component in
  the specified array
 @throw NullPointerExceptionIf the specified object is null
 @throw IllegalArgumentExceptionIf the specified object is not
  an array
 @throw ArrayIndexOutOfBoundsExceptionIf the specified <code>index</code>
  argument is negative, or if it is greater than or equal to the
  length of the specified array
 */
+ (id __nullable)getWithId:(id)array
                   withInt:(jint)index;

/*!
 @brief Returns the value of the indexed component in the specified
  array object, as a <code>boolean</code>.
 @param array the array
 @param index the index
 @return the value of the indexed component in the specified array
 @throw NullPointerExceptionIf the specified object is null
 @throw IllegalArgumentExceptionIf the specified object is not
  an array, or if the indexed element cannot be converted to the
  return type by an identity or widening conversion
 @throw ArrayIndexOutOfBoundsExceptionIf the specified <code>index</code>
  argument is negative, or if it is greater than or equal to the
  length of the specified array
 - seealso: Array#get
 */
+ (jboolean)getBooleanWithId:(id)array
                     withInt:(jint)index;

/*!
 @brief Returns the value of the indexed component in the specified
  array object, as a <code>byte</code>.
 @param array the array
 @param index the index
 @return the value of the indexed component in the specified array
 @throw NullPointerExceptionIf the specified object is null
 @throw IllegalArgumentExceptionIf the specified object is not
  an array, or if the indexed element cannot be converted to the
  return type by an identity or widening conversion
 @throw ArrayIndexOutOfBoundsExceptionIf the specified <code>index</code>
  argument is negative, or if it is greater than or equal to the
  length of the specified array
 - seealso: Array#get
 */
+ (jbyte)getByteWithId:(id)array
               withInt:(jint)index;

/*!
 @brief Returns the value of the indexed component in the specified
  array object, as a <code>char</code>.
 @param array the array
 @param index the index
 @return the value of the indexed component in the specified array
 @throw NullPointerExceptionIf the specified object is null
 @throw IllegalArgumentExceptionIf the specified object is not
  an array, or if the indexed element cannot be converted to the
  return type by an identity or widening conversion
 @throw ArrayIndexOutOfBoundsExceptionIf the specified <code>index</code>
  argument is negative, or if it is greater than or equal to the
  length of the specified array
 - seealso: Array#get
 */
+ (jchar)getCharWithId:(id)array
               withInt:(jint)index;

/*!
 @brief Returns the value of the indexed component in the specified
  array object, as a <code>double</code>.
 @param array the array
 @param index the index
 @return the value of the indexed component in the specified array
 @throw NullPointerExceptionIf the specified object is null
 @throw IllegalArgumentExceptionIf the specified object is not
  an array, or if the indexed element cannot be converted to the
  return type by an identity or widening conversion
 @throw ArrayIndexOutOfBoundsExceptionIf the specified <code>index</code>
  argument is negative, or if it is greater than or equal to the
  length of the specified array
 - seealso: Array#get
 */
+ (jdouble)getDoubleWithId:(id)array
                   withInt:(jint)index;

/*!
 @brief Returns the value of the indexed component in the specified
  array object, as a <code>float</code>.
 @param array the array
 @param index the index
 @return the value of the indexed component in the specified array
 @throw NullPointerExceptionIf the specified object is null
 @throw IllegalArgumentExceptionIf the specified object is not
  an array, or if the indexed element cannot be converted to the
  return type by an identity or widening conversion
 @throw ArrayIndexOutOfBoundsExceptionIf the specified <code>index</code>
  argument is negative, or if it is greater than or equal to the
  length of the specified array
 - seealso: Array#get
 */
+ (jfloat)getFloatWithId:(id)array
                 withInt:(jint)index;

/*!
 @brief Returns the value of the indexed component in the specified
  array object, as an <code>int</code>.
 @param array the array
 @param index the index
 @return the value of the indexed component in the specified array
 @throw NullPointerExceptionIf the specified object is null
 @throw IllegalArgumentExceptionIf the specified object is not
  an array, or if the indexed element cannot be converted to the
  return type by an identity or widening conversion
 @throw ArrayIndexOutOfBoundsExceptionIf the specified <code>index</code>
  argument is negative, or if it is greater than or equal to the
  length of the specified array
 - seealso: Array#get
 */
+ (jint)getIntWithId:(id)array
             withInt:(jint)index;

/*!
 @brief Returns the length of the specified array object, as an <code>int</code>.
 @param array the array
 @return the length of the array
 @throw IllegalArgumentExceptionif the object argument is not
  an array
 */
+ (jint)getLengthWithId:(id)array;

/*!
 @brief Returns the value of the indexed component in the specified
  array object, as a <code>long</code>.
 @param array the array
 @param index the index
 @return the value of the indexed component in the specified array
 @throw NullPointerExceptionIf the specified object is null
 @throw IllegalArgumentExceptionIf the specified object is not
  an array, or if the indexed element cannot be converted to the
  return type by an identity or widening conversion
 @throw ArrayIndexOutOfBoundsExceptionIf the specified <code>index</code>
  argument is negative, or if it is greater than or equal to the
  length of the specified array
 - seealso: Array#get
 */
+ (jlong)getLongWithId:(id)array
               withInt:(jint)index;

/*!
 @brief Returns the value of the indexed component in the specified
  array object, as a <code>short</code>.
 @param array the array
 @param index the index
 @return the value of the indexed component in the specified array
 @throw NullPointerExceptionIf the specified object is null
 @throw IllegalArgumentExceptionIf the specified object is not
  an array, or if the indexed element cannot be converted to the
  return type by an identity or widening conversion
 @throw ArrayIndexOutOfBoundsExceptionIf the specified <code>index</code>
  argument is negative, or if it is greater than or equal to the
  length of the specified array
 - seealso: Array#get
 */
+ (jshort)getShortWithId:(id)array
                 withInt:(jint)index;

/*!
 @brief Creates a new array with the specified component type and
  length.
 Invoking this method is equivalent to creating an array
  as follows: 
 <blockquote>
  @code

  int[] x = {length};
  Array.newInstance(componentType, x); 
  
@endcode
  </blockquote>
  <p>The number of dimensions of the new array must not
  exceed 255.
 @param componentType the <code>Class</code>  object representing the
   component type of the new array
 @param length the length of the new array
 @return the new array
 @throw NullPointerExceptionif the specified 
 <code>componentType</code> parameter is null
 @throw IllegalArgumentExceptionif componentType is <code>Void.TYPE</code>
  or if the number of dimensions of the requested array
  instance exceed 255.
 @throw NegativeArraySizeExceptionif the specified <code>length</code>
  is negative
 */
+ (id __nonnull)newInstanceWithIOSClass:(IOSClass *)componentType
                                withInt:(jint)length OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Creates a new array
  with the specified component type and dimensions.
 If <code>componentType</code>
  represents a non-array class or interface, the new array
  has <code>dimensions.length</code> dimensions and 
 <code>componentType</code> as its component type. If 
 <code>componentType</code> represents an array class, the
  number of dimensions of the new array is equal to the sum of 
 <code>dimensions.length</code> and the number of
  dimensions of <code>componentType</code>. In this case, the
  component type of the new array is the component type of 
 <code>componentType</code>.
  
 <p>The number of dimensions of the new array must not
  exceed 255.
 @param componentType the <code>Class</code>  object representing the component
   type of the new array
 @param dimensions an array of <code>int</code>  representing the dimensions of
   the new array
 @return the new array
 @throw NullPointerExceptionif the specified 
 <code>componentType</code> argument is null
 @throw IllegalArgumentExceptionif the specified <code>dimensions</code>
  argument is a zero-dimensional array, if componentType is <code>Void.TYPE</code>
 , or if the number of dimensions of the requested array
  instance exceed 255.
 @throw NegativeArraySizeExceptionif any of the components in
  the specified <code>dimensions</code> argument is negative.
 */
+ (id __nonnull)newInstanceWithIOSClass:(IOSClass *)componentType
                           withIntArray:(IOSIntArray *)dimensions OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Sets the value of the indexed component of the specified array
  object to the specified new value.The new value is first
  automatically unwrapped if the array has a primitive component
  type.
 @param array the array
 @param index the index into the array
 @param value the new value of the indexed component
 @throw NullPointerExceptionIf the specified object argument
  is null
 @throw IllegalArgumentExceptionIf the specified object argument
  is not an array, or if the array component type is primitive and
  an unwrapping conversion fails
 @throw ArrayIndexOutOfBoundsExceptionIf the specified <code>index</code>
  argument is negative, or if it is greater than or equal to
  the length of the specified array
 */
+ (void)setWithId:(id)array
          withInt:(jint)index
           withId:(id)value;

/*!
 @brief Sets the value of the indexed component of the specified array
  object to the specified <code>boolean</code> value.
 @param array the array
 @param index the index into the array
 @param value the new value of the indexed component
 @throw NullPointerExceptionIf the specified object argument
  is null
 @throw IllegalArgumentExceptionIf the specified object argument
  is not an array, or if the specified value cannot be converted
  to the underlying array's component type by an identity or a
  primitive widening conversion
 @throw ArrayIndexOutOfBoundsExceptionIf the specified <code>index</code>
  argument is negative, or if it is greater than or equal to
  the length of the specified array
 - seealso: Array#set
 */
+ (void)setBooleanWithId:(id)array
                 withInt:(jint)index
             withBoolean:(jboolean)value;

/*!
 @brief Sets the value of the indexed component of the specified array
  object to the specified <code>byte</code> value.
 @param array the array
 @param index the index into the array
 @param value the new value of the indexed component
 @throw NullPointerExceptionIf the specified object argument
  is null
 @throw IllegalArgumentExceptionIf the specified object argument
  is not an array, or if the specified value cannot be converted
  to the underlying array's component type by an identity or a
  primitive widening conversion
 @throw ArrayIndexOutOfBoundsExceptionIf the specified <code>index</code>
  argument is negative, or if it is greater than or equal to
  the length of the specified array
 - seealso: Array#set
 */
+ (void)setByteWithId:(id)array
              withInt:(jint)index
             withByte:(jbyte)value;

/*!
 @brief Sets the value of the indexed component of the specified array
  object to the specified <code>char</code> value.
 @param array the array
 @param index the index into the array
 @param value the new value of the indexed component
 @throw NullPointerExceptionIf the specified object argument
  is null
 @throw IllegalArgumentExceptionIf the specified object argument
  is not an array, or if the specified value cannot be converted
  to the underlying array's component type by an identity or a
  primitive widening conversion
 @throw ArrayIndexOutOfBoundsExceptionIf the specified <code>index</code>
  argument is negative, or if it is greater than or equal to
  the length of the specified array
 - seealso: Array#set
 */
+ (void)setCharWithId:(id)array
              withInt:(jint)index
             withChar:(jchar)value;

/*!
 @brief Sets the value of the indexed component of the specified array
  object to the specified <code>double</code> value.
 @param array the array
 @param index the index into the array
 @param value the new value of the indexed component
 @throw NullPointerExceptionIf the specified object argument
  is null
 @throw IllegalArgumentExceptionIf the specified object argument
  is not an array, or if the specified value cannot be converted
  to the underlying array's component type by an identity or a
  primitive widening conversion
 @throw ArrayIndexOutOfBoundsExceptionIf the specified <code>index</code>
  argument is negative, or if it is greater than or equal to
  the length of the specified array
 - seealso: Array#set
 */
+ (void)setDoubleWithId:(id)array
                withInt:(jint)index
             withDouble:(jdouble)value;

/*!
 @brief Sets the value of the indexed component of the specified array
  object to the specified <code>float</code> value.
 @param array the array
 @param index the index into the array
 @param value the new value of the indexed component
 @throw NullPointerExceptionIf the specified object argument
  is null
 @throw IllegalArgumentExceptionIf the specified object argument
  is not an array, or if the specified value cannot be converted
  to the underlying array's component type by an identity or a
  primitive widening conversion
 @throw ArrayIndexOutOfBoundsExceptionIf the specified <code>index</code>
  argument is negative, or if it is greater than or equal to
  the length of the specified array
 - seealso: Array#set
 */
+ (void)setFloatWithId:(id)array
               withInt:(jint)index
             withFloat:(jfloat)value;

/*!
 @brief Sets the value of the indexed component of the specified array
  object to the specified <code>int</code> value.
 @param array the array
 @param index the index into the array
 @param value the new value of the indexed component
 @throw NullPointerExceptionIf the specified object argument
  is null
 @throw IllegalArgumentExceptionIf the specified object argument
  is not an array, or if the specified value cannot be converted
  to the underlying array's component type by an identity or a
  primitive widening conversion
 @throw ArrayIndexOutOfBoundsExceptionIf the specified <code>index</code>
  argument is negative, or if it is greater than or equal to
  the length of the specified array
 - seealso: Array#set
 */
+ (void)setIntWithId:(id)array
             withInt:(jint)index
             withInt:(jint)value;

/*!
 @brief Sets the value of the indexed component of the specified array
  object to the specified <code>long</code> value.
 @param array the array
 @param index the index into the array
 @param value the new value of the indexed component
 @throw NullPointerExceptionIf the specified object argument
  is null
 @throw IllegalArgumentExceptionIf the specified object argument
  is not an array, or if the specified value cannot be converted
  to the underlying array's component type by an identity or a
  primitive widening conversion
 @throw ArrayIndexOutOfBoundsExceptionIf the specified <code>index</code>
  argument is negative, or if it is greater than or equal to
  the length of the specified array
 - seealso: Array#set
 */
+ (void)setLongWithId:(id)array
              withInt:(jint)index
             withLong:(jlong)value;

/*!
 @brief Sets the value of the indexed component of the specified array
  object to the specified <code>short</code> value.
 @param array the array
 @param index the index into the array
 @param value the new value of the indexed component
 @throw NullPointerExceptionIf the specified object argument
  is null
 @throw IllegalArgumentExceptionIf the specified object argument
  is not an array, or if the specified value cannot be converted
  to the underlying array's component type by an identity or a
  primitive widening conversion
 @throw ArrayIndexOutOfBoundsExceptionIf the specified <code>index</code>
  argument is negative, or if it is greater than or equal to
  the length of the specified array
 - seealso: Array#set
 */
+ (void)setShortWithId:(id)array
               withInt:(jint)index
             withShort:(jshort)value;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaLangReflectArray)

FOUNDATION_EXPORT id JavaLangReflectArray_newInstanceWithIOSClass_withInt_(IOSClass *componentType, jint length);

FOUNDATION_EXPORT id JavaLangReflectArray_newInstanceWithIOSClass_withIntArray_(IOSClass *componentType, IOSIntArray *dimensions);

FOUNDATION_EXPORT jint JavaLangReflectArray_getLengthWithId_(id array);

FOUNDATION_EXPORT id JavaLangReflectArray_getWithId_withInt_(id array, jint index);

FOUNDATION_EXPORT jboolean JavaLangReflectArray_getBooleanWithId_withInt_(id array, jint index);

FOUNDATION_EXPORT jbyte JavaLangReflectArray_getByteWithId_withInt_(id array, jint index);

FOUNDATION_EXPORT jchar JavaLangReflectArray_getCharWithId_withInt_(id array, jint index);

FOUNDATION_EXPORT jshort JavaLangReflectArray_getShortWithId_withInt_(id array, jint index);

FOUNDATION_EXPORT jint JavaLangReflectArray_getIntWithId_withInt_(id array, jint index);

FOUNDATION_EXPORT jlong JavaLangReflectArray_getLongWithId_withInt_(id array, jint index);

FOUNDATION_EXPORT jfloat JavaLangReflectArray_getFloatWithId_withInt_(id array, jint index);

FOUNDATION_EXPORT jdouble JavaLangReflectArray_getDoubleWithId_withInt_(id array, jint index);

FOUNDATION_EXPORT void JavaLangReflectArray_setWithId_withInt_withId_(id array, jint index, id value);

FOUNDATION_EXPORT void JavaLangReflectArray_setBooleanWithId_withInt_withBoolean_(id array, jint index, jboolean value);

FOUNDATION_EXPORT void JavaLangReflectArray_setByteWithId_withInt_withByte_(id array, jint index, jbyte value);

FOUNDATION_EXPORT void JavaLangReflectArray_setCharWithId_withInt_withChar_(id array, jint index, jchar value);

FOUNDATION_EXPORT void JavaLangReflectArray_setShortWithId_withInt_withShort_(id array, jint index, jshort value);

FOUNDATION_EXPORT void JavaLangReflectArray_setIntWithId_withInt_withInt_(id array, jint index, jint value);

FOUNDATION_EXPORT void JavaLangReflectArray_setLongWithId_withInt_withLong_(id array, jint index, jlong value);

FOUNDATION_EXPORT void JavaLangReflectArray_setFloatWithId_withInt_withFloat_(id array, jint index, jfloat value);

FOUNDATION_EXPORT void JavaLangReflectArray_setDoubleWithId_withInt_withDouble_(id array, jint index, jdouble value);

J2OBJC_TYPE_LITERAL_HEADER(JavaLangReflectArray)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaLangReflectArray")
