//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: openjdk/src/share/classes/java/lang/reflect/AnnotatedWildcardType.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaLangReflectAnnotatedWildcardType")
#ifdef RESTRICT_JavaLangReflectAnnotatedWildcardType
#define INCLUDE_ALL_JavaLangReflectAnnotatedWildcardType 0
#else
#define INCLUDE_ALL_JavaLangReflectAnnotatedWildcardType 1
#endif
#undef RESTRICT_JavaLangReflectAnnotatedWildcardType

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaLangReflectAnnotatedWildcardType_) && (INCLUDE_ALL_JavaLangReflectAnnotatedWildcardType || defined(INCLUDE_JavaLangReflectAnnotatedWildcardType))
#define JavaLangReflectAnnotatedWildcardType_

#define RESTRICT_JavaLangReflectAnnotatedType 1
#define INCLUDE_JavaLangReflectAnnotatedType 1
#include "java/lang/reflect/AnnotatedType.h"

@class IOSObjectArray;

/*!
 @brief <code>AnnotatedWildcardType</code> represents the potentially annotated use of a
  wildcard type argument, whose upper or lower bounds may themselves represent
  annotated uses of types.
 @since 1.8
 */
@protocol JavaLangReflectAnnotatedWildcardType < JavaLangReflectAnnotatedType, JavaObject >

/*!
 @brief Returns the potentially annotated lower bounds of this wildcard type.
 @return the potentially annotated lower bounds of this wildcard type
 */
- (IOSObjectArray *)getAnnotatedLowerBounds;

/*!
 @brief Returns the potentially annotated upper bounds of this wildcard type.
 @return the potentially annotated upper bounds of this wildcard type
 */
- (IOSObjectArray *)getAnnotatedUpperBounds;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaLangReflectAnnotatedWildcardType)

J2OBJC_TYPE_LITERAL_HEADER(JavaLangReflectAnnotatedWildcardType)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaLangReflectAnnotatedWildcardType")
