//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/lang/Comparable.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaLangComparable")
#ifdef RESTRICT_JavaLangComparable
#define INCLUDE_ALL_JavaLangComparable 0
#else
#define INCLUDE_ALL_JavaLangComparable 1
#endif
#undef RESTRICT_JavaLangComparable

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaLangComparable_) && (INCLUDE_ALL_JavaLangComparable || defined(INCLUDE_JavaLangComparable))
#define JavaLangComparable_

/*!
 @brief This interface imposes a total ordering on the objects of each class that
  implements it.This ordering is referred to as the class's <i>natural
  ordering</i>, and the class's <tt>compareTo</tt> method is referred to as
  its <i>natural comparison method</i>.
 <p>
  Lists (and arrays) of objects that implement this interface can be sorted
  automatically by <code>Collections.sort</code> (and 
 <code>Arrays.sort</code>).  Objects that implement this
  interface can be used as keys in a sorted map or as
  elements in a sorted set, without the need to
  specify a comparator.<p>
  The natural ordering for a class <tt>C</tt> is said to be <i>consistent
  with equals</i> if and only if <tt>e1.compareTo(e2) == 0</tt> has
  the same boolean value as <tt>e1.equals(e2)</tt> for every 
 <tt>e1</tt> and <tt>e2</tt> of class <tt>C</tt>.  Note that <tt>null</tt>
  is not an instance of any class, and <tt>e.compareTo(null)</tt> should
  throw a <tt>NullPointerException</tt> even though <tt>e.equals(null)</tt>
  returns <tt>false</tt>.<p>
  It is strongly recommended (though not required) that natural orderings be
  consistent with equals.  This is so because sorted sets (and sorted maps)
  without explicit comparators behave "strangely" when they are used with
  elements (or keys) whose natural ordering is inconsistent with equals.  In
  particular, such a sorted set (or sorted map) violates the general contract
  for set (or map), which is defined in terms of the <tt>equals</tt>
  method.<p>
  For example, if one adds two keys <tt>a</tt> and <tt>b</tt> such that 
 <code>(!a.equals(b) && a.compareTo(b) == 0)</code> to a sorted
  set that does not use an explicit comparator, the second <tt>add</tt>
  operation returns false (and the size of the sorted set does not increase)
  because <tt>a</tt> and <tt>b</tt> are equivalent from the sorted set's
  perspective.<p>
  Virtually all Java core classes that implement <tt>Comparable</tt> have natural
  orderings that are consistent with equals.  One exception is 
 <tt>java.math.BigDecimal</tt>, whose natural ordering equates 
 <tt>BigDecimal</tt> objects with equal values and different precisions
  (such as 4.0 and 4.00).<p>
  For the mathematically inclined, the <i>relation</i> that defines
  the natural ordering on a given class C is:@code

        {(x, y) such that x.compareTo(y) &lt;= 0}. 
  
@endcode The <i>quotient</i> for this total order is: @code

        {(x, y) such that x.compareTo(y) == 0}. 
  
@endcode
  It follows immediately from the contract for <tt>compareTo</tt> that the
  quotient is an <i>equivalence relation</i> on <tt>C</tt>, and that the
  natural ordering is a <i>total order</i> on <tt>C</tt>.  When we say that a
  class's natural ordering is <i>consistent with equals</i>, we mean that the
  quotient for the natural ordering is the equivalence relation defined by
  the class's <code>equals(Object)</code> method:@code

      {(x, y) such that x.equals(y)}. 
@endcode<p>
  This interface is a member of the 
 <a href="{@@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/collections/index.html">
  Java Collections Framework</a>.
 @author Josh Bloch
 - seealso: java.util.Comparator
 @since 1.2
 */
@protocol JavaLangComparable < JavaObject >

/*!
 @brief Compares this object with the specified object for order.Returns a
  negative integer, zero, or a positive integer as this object is less
  than, equal to, or greater than the specified object.
 <p>The implementor must ensure <tt>sgn(x.compareTo(y)) ==
  -sgn(y.compareTo(x))</tt> for all <tt>x</tt> and <tt>y</tt>.  (This
  implies that <tt>x.compareTo(y)</tt> must throw an exception iff 
 <tt>y.compareTo(x)</tt> throws an exception.) 
 <p>The implementor must also ensure that the relation is transitive: 
 <tt>(x.compareTo(y)&gt;0 &amp;&amp; y.compareTo(z)&gt;0)</tt> implies 
 <tt>x.compareTo(z)&gt;0</tt>.
  
 <p>Finally, the implementor must ensure that <tt>x.compareTo(y)==0</tt>
  implies that <tt>sgn(x.compareTo(z)) == sgn(y.compareTo(z))</tt>, for
  all <tt>z</tt>.
  
 <p>It is strongly recommended, but <i>not</i> strictly required that 
 <tt>(x.compareTo(y)==0) == (x.equals(y))</tt>.  Generally speaking, any
  class that implements the <tt>Comparable</tt> interface and violates
  this condition should clearly indicate this fact.  The recommended
  language is "Note: this class has a natural ordering that is
  inconsistent with equals." 
 <p>In the foregoing description, the notation 
 <tt>sgn(</tt><i>expression</i><tt>)</tt> designates the mathematical 
 <i>signum</i> function, which is defined to return one of <tt>-1</tt>,
  <tt>0</tt>, or <tt>1</tt> according to whether the value of 
 <i>expression</i> is negative, zero or positive.
 @param o the object to be compared.
 @return a negative integer, zero, or a positive integer as this object
           is less than, equal to, or greater than the specified object.
 @throw NullPointerExceptionif the specified object is null
 @throw ClassCastExceptionif the specified object's type prevents it
          from being compared to this object.
 */
- (jint)compareToWithId:(id)o;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaLangComparable)

J2OBJC_TYPE_LITERAL_HEADER(JavaLangComparable)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaLangComparable")
