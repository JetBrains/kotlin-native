//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: Classes/java/lang/System.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaLangSystem")
#ifdef RESTRICT_JavaLangSystem
#define INCLUDE_ALL_JavaLangSystem 0
#else
#define INCLUDE_ALL_JavaLangSystem 1
#endif
#undef RESTRICT_JavaLangSystem

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaLangSystem_) && (INCLUDE_ALL_JavaLangSystem || defined(INCLUDE_JavaLangSystem))
#define JavaLangSystem_

@class JavaIoConsole;
@class JavaIoInputStream;
@class JavaIoPrintStream;
@class JavaLangSecurityManager;
@class JavaLangThrowable;
@class JavaUtilProperties;
@protocol JavaNioChannelsChannel;
@protocol JavaUtilMap;

/*!
 @brief Simple iOS version of java.lang.System.No code was shared, just its
  public API.
 @author Tom Ball
 */
@interface JavaLangSystem : NSObject
@property (nonatomic, setter=setInWithJavaIoInputStream:, class, strong) JavaIoInputStream *in NS_SWIFT_NAME(in);
@property (nonatomic, setter=setOutWithJavaIoPrintStream:, class, strong) JavaIoPrintStream *out NS_SWIFT_NAME(out);
@property (nonatomic, setter=setErrWithJavaIoPrintStream:, class, strong) JavaIoPrintStream *err NS_SWIFT_NAME(err);

+ (JavaIoInputStream *)in;

+ (JavaIoPrintStream *)out;

+ (JavaIoPrintStream *)err;

#pragma mark Public

- (instancetype __nonnull)init;

+ (void)arraycopyWithId:(id)src
                withInt:(jint)srcPos
                 withId:(id)dest
                withInt:(jint)destPos
                withInt:(jint)length;

+ (NSString * __nullable)clearPropertyWithNSString:(NSString *)key;

/*!
 @brief Returns the <code>java.io.Console</code> associated with this VM, or null.
 Not all VMs will have an associated console. A console is typically only
  available for programs run from the command line.
 @since 1.6
 */
+ (JavaIoConsole * __nullable)console;

+ (jlong)currentTimeMillis;

+ (void)exitWithInt:(jint)status;

+ (void)gc;

+ (id<JavaUtilMap>)getenv;

+ (NSString * __nullable)getenvWithNSString:(NSString *)name;

+ (JavaUtilProperties * __nonnull)getProperties;

+ (NSString * __nullable)getPropertyWithNSString:(NSString *)key;

+ (NSString * __nullable)getPropertyWithNSString:(NSString *)key
                                    withNSString:(NSString *)defaultValue;

/*!
 @brief Returns null.Android does not use <code>SecurityManager</code>.
 This method
  is only provided for source compatibility.
 @return null
 */
+ (JavaLangSecurityManager * __nullable)getSecurityManager;

+ (jint)identityHashCodeWithId:(id)anObject;

/*!
 @brief Returns the channel inherited from the entity that created this
  Java virtual machine.
 <p> This method returns the channel obtained by invoking the 
 <code>inheritedChannel</code>
  method of the system-wide default 
 <code>java.nio.channels.spi.SelectorProvider</code> object. </p>
  
 <p> In addition to the network-oriented channels described in 
 <code>inheritedChannel</code>
 , this method may return other kinds of
  channels in the future.
 @return The inherited channel, if any, otherwise <tt>null</tt>.
 @throw IOException
 If an I/O error occurs
 @throw SecurityException
 If a security manager is present and it does not
           permit access to the channel.
 @since 1.5
 */
+ (id<JavaNioChannelsChannel> __nullable)inheritedChannel;

/*!
 @brief Returns the system's line separator.
 @since 1.7
 */
+ (NSString * __nonnull)lineSeparator;

/*!
 @brief See <code>Runtime.load</code>.
 */
+ (void)load__WithNSString:(NSString *)pathName;

/*!
 @brief See <code>Runtime.loadLibrary</code>.
 */
+ (void)loadLibraryWithNSString:(NSString *)libName;

/*!
 */
+ (void)logEWithNSString:(NSString *)message;

/*!
 */
+ (void)logEWithNSString:(NSString *)message
   withJavaLangThrowable:(JavaLangThrowable *)th;

/*!
 */
+ (void)logIWithNSString:(NSString *)message;

/*!
 */
+ (void)logIWithNSString:(NSString *)message
   withJavaLangThrowable:(JavaLangThrowable *)th;

/*!
 */
+ (void)logWWithNSString:(NSString *)message;

/*!
 */
+ (void)logWWithNSString:(NSString *)message
   withJavaLangThrowable:(JavaLangThrowable *)th;

+ (jlong)nanoTime;

/*!
 @brief No-op on iOS, since it doesn't use garbage collection.
 */
+ (void)runFinalization;

/*!
 @brief No-op on iOS, since it doesn't use garbage collection.
 */
+ (void)runFinalizersOnExitWithBoolean:(jboolean)b;

+ (void)setErrWithJavaIoPrintStream:(JavaIoPrintStream *)newErr;

+ (void)setInWithJavaIoInputStream:(JavaIoInputStream *)newIn;

+ (void)setOutWithJavaIoPrintStream:(JavaIoPrintStream *)newOut;

+ (void)setPropertiesWithJavaUtilProperties:(JavaUtilProperties *)properties;

+ (NSString * __nullable)setPropertyWithNSString:(NSString *)key
                                    withNSString:(NSString *)value;

#pragma mark Package-Private

@end

J2OBJC_STATIC_INIT(JavaLangSystem)

inline JavaIoInputStream *JavaLangSystem_get_in(void);
inline JavaIoInputStream *JavaLangSystem_set_in(JavaIoInputStream *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaIoInputStream *JavaLangSystem_in;
J2OBJC_STATIC_FIELD_OBJ(JavaLangSystem, in, JavaIoInputStream *)

inline JavaIoPrintStream *JavaLangSystem_get_out(void);
inline JavaIoPrintStream *JavaLangSystem_set_out(JavaIoPrintStream *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaIoPrintStream *JavaLangSystem_out;
J2OBJC_STATIC_FIELD_OBJ(JavaLangSystem, out, JavaIoPrintStream *)

inline JavaIoPrintStream *JavaLangSystem_get_err(void);
inline JavaIoPrintStream *JavaLangSystem_set_err(JavaIoPrintStream *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaIoPrintStream *JavaLangSystem_err;
J2OBJC_STATIC_FIELD_OBJ(JavaLangSystem, err, JavaIoPrintStream *)

FOUNDATION_EXPORT void JavaLangSystem_init(JavaLangSystem *self);

FOUNDATION_EXPORT JavaLangSystem *new_JavaLangSystem_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangSystem *create_JavaLangSystem_init(void);

FOUNDATION_EXPORT void JavaLangSystem_setInWithJavaIoInputStream_(JavaIoInputStream *newIn);

FOUNDATION_EXPORT void JavaLangSystem_setOutWithJavaIoPrintStream_(JavaIoPrintStream *newOut);

FOUNDATION_EXPORT void JavaLangSystem_setErrWithJavaIoPrintStream_(JavaIoPrintStream *newErr);

FOUNDATION_EXPORT jlong JavaLangSystem_currentTimeMillis(void);

FOUNDATION_EXPORT jint JavaLangSystem_identityHashCodeWithId_(id anObject);

FOUNDATION_EXPORT void JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(id src, jint srcPos, id dest, jint destPos, jint length);

FOUNDATION_EXPORT jlong JavaLangSystem_nanoTime(void);

FOUNDATION_EXPORT void JavaLangSystem_exitWithInt_(jint status);

FOUNDATION_EXPORT JavaUtilProperties *JavaLangSystem_getProperties(void);

FOUNDATION_EXPORT NSString *JavaLangSystem_getPropertyWithNSString_(NSString *key);

FOUNDATION_EXPORT NSString *JavaLangSystem_getPropertyWithNSString_withNSString_(NSString *key, NSString *defaultValue);

FOUNDATION_EXPORT NSString *JavaLangSystem_setPropertyWithNSString_withNSString_(NSString *key, NSString *value);

FOUNDATION_EXPORT void JavaLangSystem_setPropertiesWithJavaUtilProperties_(JavaUtilProperties *properties);

FOUNDATION_EXPORT NSString *JavaLangSystem_clearPropertyWithNSString_(NSString *key);

FOUNDATION_EXPORT NSString *JavaLangSystem_getenvWithNSString_(NSString *name);

FOUNDATION_EXPORT id<JavaUtilMap> JavaLangSystem_getenv(void);

FOUNDATION_EXPORT JavaLangSecurityManager *JavaLangSystem_getSecurityManager(void);

FOUNDATION_EXPORT NSString *JavaLangSystem_lineSeparator(void);

FOUNDATION_EXPORT void JavaLangSystem_load__WithNSString_(NSString *pathName);

FOUNDATION_EXPORT void JavaLangSystem_loadLibraryWithNSString_(NSString *libName);

FOUNDATION_EXPORT void JavaLangSystem_gc(void);

FOUNDATION_EXPORT void JavaLangSystem_runFinalization(void);

FOUNDATION_EXPORT void JavaLangSystem_runFinalizersOnExitWithBoolean_(jboolean b);

FOUNDATION_EXPORT JavaIoConsole *JavaLangSystem_console(void);

FOUNDATION_EXPORT void JavaLangSystem_logEWithNSString_(NSString *message);

FOUNDATION_EXPORT void JavaLangSystem_logEWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *th);

FOUNDATION_EXPORT void JavaLangSystem_logIWithNSString_(NSString *message);

FOUNDATION_EXPORT void JavaLangSystem_logIWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *th);

FOUNDATION_EXPORT void JavaLangSystem_logWWithNSString_(NSString *message);

FOUNDATION_EXPORT void JavaLangSystem_logWWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *th);

FOUNDATION_EXPORT id<JavaNioChannelsChannel> JavaLangSystem_inheritedChannel(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaLangSystem)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaLangSystem")
