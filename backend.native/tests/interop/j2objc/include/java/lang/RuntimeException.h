//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/lang/RuntimeException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaLangRuntimeException")
#ifdef RESTRICT_JavaLangRuntimeException
#define INCLUDE_ALL_JavaLangRuntimeException 0
#else
#define INCLUDE_ALL_JavaLangRuntimeException 1
#endif
#undef RESTRICT_JavaLangRuntimeException

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaLangRuntimeException_) && (INCLUDE_ALL_JavaLangRuntimeException || defined(INCLUDE_JavaLangRuntimeException))
#define JavaLangRuntimeException_

#define RESTRICT_JavaLangException 1
#define INCLUDE_JavaLangException 1
#include "java/lang/Exception.h"

@class JavaLangThrowable;

/*!
 @brief <code>RuntimeException</code> is the superclass of those
  exceptions that can be thrown during the normal operation of the
  Java Virtual Machine.
 <p><code>RuntimeException</code> and its subclasses are <em>unchecked
  exceptions</em>.  Unchecked exceptions do <em>not</em> need to be
  declared in a method or constructor's <code>throws</code> clause if they
  can be thrown by the execution of the method or constructor and
  propagate outside the method or constructor boundary.
 @author Frank Yellin
 @since JDK1.0
 */
@interface JavaLangRuntimeException : JavaLangException
@property (readonly, class) jlong serialVersionUID NS_SWIFT_NAME(serialVersionUID);

+ (jlong)serialVersionUID;

#pragma mark Public

/*!
 @brief Constructs a new runtime exception with <code>null</code> as its
  detail message.The cause is not initialized, and may subsequently be
  initialized by a call to <code>initCause</code>.
 */
- (instancetype __nonnull)init;

/*!
 @brief Constructs a new runtime exception with the specified detail message.
 The cause is not initialized, and may subsequently be initialized by a
  call to <code>initCause</code>.
 @param message the detail message. The detail message is saved for           later retrieval by the 
 <code>getMessage()</code>  method.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)message;

/*!
 @brief Constructs a new runtime exception with the specified detail message and
  cause.
 <p>Note that the detail message associated with 
 <code>cause</code> is <i>not</i> automatically incorporated in
  this runtime exception's detail message.
 @param message the detail message (which is saved for later retrieval          by the 
 <code>getMessage()</code>  method).
 @param cause the cause (which is saved for later retrieval by the          
 <code>getCause()</code>  method).  (A  <tt> null </tt>  value is          permitted, and indicates that the cause is nonexistent or
           unknown.)
 @since 1.4
 */
- (instancetype __nonnull)initWithNSString:(NSString *)message
                     withJavaLangThrowable:(JavaLangThrowable *)cause;

/*!
 @brief Constructs a new runtime exception with the specified cause and a
  detail message of <tt>(cause==null ?
 null : cause.toString())</tt>
  (which typically contains the class and detail message of 
 <tt>cause</tt>).This constructor is useful for runtime exceptions
  that are little more than wrappers for other throwables.
 @param cause the cause (which is saved for later retrieval by the          
 <code>getCause()</code>  method).  (A  <tt> null </tt>  value is          permitted, and indicates that the cause is nonexistent or
           unknown.)
 @since 1.4
 */
- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)cause;

#pragma mark Protected

/*!
 @brief Constructs a new runtime exception with the specified detail
  message, cause, suppression enabled or disabled, and writable
  stack trace enabled or disabled.
 @param message the detail message.
 @param cause the cause.  (A <code>null</code>  value is permitted,
   and indicates that the cause is nonexistent or unknown.)
 @param enableSuppression whether or not suppression is enabled                           or disabled
 @param writableStackTrace whether or not the stack trace should                            be writable
 @since 1.7
 */
- (instancetype __nonnull)initWithNSString:(NSString *)message
                     withJavaLangThrowable:(JavaLangThrowable *)cause
                               withBoolean:(jboolean)enableSuppression
                               withBoolean:(jboolean)writableStackTrace;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaLangRuntimeException)

inline jlong JavaLangRuntimeException_get_serialVersionUID(void);
#define JavaLangRuntimeException_serialVersionUID -7034897190745766939LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangRuntimeException, serialVersionUID, jlong)

FOUNDATION_EXPORT void JavaLangRuntimeException_init(JavaLangRuntimeException *self);

FOUNDATION_EXPORT JavaLangRuntimeException *new_JavaLangRuntimeException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangRuntimeException *create_JavaLangRuntimeException_init(void);

FOUNDATION_EXPORT void JavaLangRuntimeException_initWithNSString_(JavaLangRuntimeException *self, NSString *message);

FOUNDATION_EXPORT JavaLangRuntimeException *new_JavaLangRuntimeException_initWithNSString_(NSString *message) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangRuntimeException *create_JavaLangRuntimeException_initWithNSString_(NSString *message);

FOUNDATION_EXPORT void JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_(JavaLangRuntimeException *self, NSString *message, JavaLangThrowable *cause);

FOUNDATION_EXPORT JavaLangRuntimeException *new_JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangRuntimeException *create_JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause);

FOUNDATION_EXPORT void JavaLangRuntimeException_initWithJavaLangThrowable_(JavaLangRuntimeException *self, JavaLangThrowable *cause);

FOUNDATION_EXPORT JavaLangRuntimeException *new_JavaLangRuntimeException_initWithJavaLangThrowable_(JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangRuntimeException *create_JavaLangRuntimeException_initWithJavaLangThrowable_(JavaLangThrowable *cause);

FOUNDATION_EXPORT void JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_withBoolean_withBoolean_(JavaLangRuntimeException *self, NSString *message, JavaLangThrowable *cause, jboolean enableSuppression, jboolean writableStackTrace);

FOUNDATION_EXPORT JavaLangRuntimeException *new_JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_withBoolean_withBoolean_(NSString *message, JavaLangThrowable *cause, jboolean enableSuppression, jboolean writableStackTrace) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangRuntimeException *create_JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_withBoolean_withBoolean_(NSString *message, JavaLangThrowable *cause, jboolean enableSuppression, jboolean writableStackTrace);

J2OBJC_TYPE_LITERAL_HEADER(JavaLangRuntimeException)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaLangRuntimeException")
