//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/lang/Integer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaLangInteger")
#ifdef RESTRICT_JavaLangInteger
#define INCLUDE_ALL_JavaLangInteger 0
#else
#define INCLUDE_ALL_JavaLangInteger 1
#endif
#undef RESTRICT_JavaLangInteger

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaLangInteger_) && (INCLUDE_ALL_JavaLangInteger || defined(INCLUDE_JavaLangInteger))
#define JavaLangInteger_

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "java/lang/Comparable.h"

@class IOSCharArray;
@class IOSClass;
@class IOSIntArray;

/*!
 @brief The <code>Integer</code> class wraps a value of the primitive type 
 <code>int</code> in an object.An object of type <code>Integer</code>
  contains a single field whose type is <code>int</code>.
 <p>In addition, this class provides several methods for converting
  an <code>int</code> to a <code>String</code> and a <code>String</code> to an 
 <code>int</code>, as well as other constants and methods useful when
  dealing with an <code>int</code>.
  
 <p>Implementation note: The implementations of the "bit twiddling"
  methods (such as <code>highestOneBit</code> and 
 <code>numberOfTrailingZeros</code>) are
  based on material from Henry S. Warren, Jr.'s <i>Hacker's
  Delight</i>, (Addison Wesley, 2002).
 @author Lee Boynton
 @author Arthur van Hoff
 @author Josh Bloch
 @author Joseph D. Darcy
 @since JDK1.0
 */
@interface JavaLangInteger : NSNumber < JavaLangComparable >
@property (readonly, class) jint MIN_VALUE NS_SWIFT_NAME(MIN_VALUE);
@property (readonly, class) jint MAX_VALUE NS_SWIFT_NAME(MAX_VALUE);
@property (readonly, class, strong) IOSClass *TYPE NS_SWIFT_NAME(TYPE);
@property (readonly, class, strong) IOSIntArray *sizeTable NS_SWIFT_NAME(sizeTable);
@property (readonly, class) jint SIZE NS_SWIFT_NAME(SIZE);
@property (readonly, class) jint BYTES NS_SWIFT_NAME(BYTES);

+ (jint)MIN_VALUE;

+ (jint)MAX_VALUE;

+ (IOSClass *)TYPE;

+ (IOSIntArray *)sizeTable;

+ (jint)SIZE;

+ (jint)BYTES;

#pragma mark Public

/*!
 @brief Constructs a newly allocated <code>Integer</code> object that
  represents the specified <code>int</code> value.
 @param value the value to be represented by the                   
 <code>Integer</code>  object.
 */
- (instancetype __nonnull)initWithInt:(jint)value;

/*!
 @brief Constructs a newly allocated <code>Integer</code> object that
  represents the <code>int</code> value indicated by the 
 <code>String</code> parameter.The string is converted to an 
 <code>int</code> value in exactly the manner used by the 
 <code>parseInt</code> method for radix 10.
 @param s the <code>String</code>  to be converted to an                  
 <code>Integer</code> .
 @throw NumberFormatExceptionif the <code>String</code> does not
                contain a parsable integer.
 - seealso: java.lang.Integer#parseInt(java.lang.String, int)
 */
- (instancetype __nonnull)initWithNSString:(NSString *)s;

/*!
 @brief Returns the number of one-bits in the two's complement binary
  representation of the specified <code>int</code> value.This function is
  sometimes referred to as the <i>population count</i>.
 @param i the value whose bits are to be counted
 @return the number of one-bits in the two's complement binary
      representation of the specified <code>int</code> value.
 @since 1.5
 */
+ (jint)bitCountWithInt:(jint)i;

/*!
 @brief Returns the value of this <code>Integer</code> as a <code>byte</code>
  after a narrowing primitive conversion.
 */
- (jbyte)charValue;

/*!
 @brief Compares two <code>int</code> values numerically.
 The value returned is identical to what would be returned by: 
 @code

     Integer.valueOf(x).compareTo(Integer.valueOf(y)) 
  
@endcode
 @param x the first <code>int</code>  to compare
 @param y the second <code>int</code>  to compare
 @return the value <code>0</code> if <code>x == y</code>;
          a value less than <code>0</code> if <code>x < y</code>; and
          a value greater than <code>0</code> if <code>x > y</code>
 @since 1.7
 */
+ (jint)compareWithInt:(jint)x
               withInt:(jint)y;

/*!
 @brief Compares two <code>Integer</code> objects numerically.
 @param anotherInteger the <code>Integer</code>  to be compared.
 @return the value <code>0</code> if this <code>Integer</code> is
           equal to the argument <code>Integer</code>; a value less than
           <code>0</code> if this <code>Integer</code> is numerically less
           than the argument <code>Integer</code>; and a value greater
           than <code>0</code> if this <code>Integer</code> is numerically
            greater than the argument <code>Integer</code> (signed
            comparison).
 @since 1.2
 */
- (jint)compareToWithId:(JavaLangInteger *)anotherInteger;

/*!
 @brief Compares two <code>int</code> values numerically treating the values
  as unsigned.
 @param x the first <code>int</code>  to compare
 @param y the second <code>int</code>  to compare
 @return the value <code>0</code> if <code>x == y</code>; a value less
          than <code>0</code> if <code>x < y</code> as unsigned values; and
          a value greater than <code>0</code> if <code>x > y</code> as
          unsigned values
 @since 1.8
 */
+ (jint)compareUnsignedWithInt:(jint)x
                       withInt:(jint)y;

/*!
 @brief Decodes a <code>String</code> into an <code>Integer</code>.
 Accepts decimal, hexadecimal, and octal numbers given
  by the following grammar: 
 <blockquote>
  <dl>
  <dt><i>DecodableString:</i>
  <dd><i>Sign<sub>opt</sub> DecimalNumeral</i>
  <dd><i>Sign<sub>opt</sub></i> <code>0x</code> <i>HexDigits</i>
  <dd><i>Sign<sub>opt</sub></i> <code>0X</code> <i>HexDigits</i>
  <dd><i>Sign<sub>opt</sub></i> <code>#</code> <i>HexDigits</i>
  <dd><i>Sign<sub>opt</sub></i> <code>0</code> <i>OctalDigits</i>
  
 <dt><i>Sign:</i>
  <dd><code>-</code>
  <dd><code>+</code>
  </dl>
  </blockquote>
  
 <i>DecimalNumeral</i>, <i>HexDigits</i>, and <i>OctalDigits</i>
  are as defined in section 3.10.1 of 
 <cite>The Java&trade; Language Specification</cite>,
  except that underscores are not accepted between digits. 
 <p>The sequence of characters following an optional
  sign and/or radix specifier ("<code>0x</code>", "<code>0X</code>",
  "<code>#</code>", or leading zero) is parsed as by the <code>Integer.parseInt</code>
  method with the indicated radix (10, 16, or
  8).  This sequence of characters must represent a positive
  value or a <code>NumberFormatException</code> will be thrown.  The
  result is negated if first character of the specified <code>String</code>
  is the minus sign.  No whitespace characters are
  permitted in the <code>String</code>.
 @param nm the <code>String</code>  to decode.
 @return an <code>Integer</code> object holding the <code>int</code>
              value represented by <code>nm</code>
 @throw NumberFormatExceptionif the <code>String</code> does not
             contain a parsable integer.
 - seealso: java.lang.Integer#parseInt(java.lang.String, int)
 */
+ (JavaLangInteger * __nonnull)decodeWithNSString:(NSString *)nm;

/*!
 @brief Returns the unsigned quotient of dividing the first argument by
  the second where each argument and the result is interpreted as
  an unsigned value.
 <p>Note that in two's complement arithmetic, the three other
  basic arithmetic operations of add, subtract, and multiply are
  bit-wise identical if the two operands are regarded as both
  being signed or both being unsigned.  Therefore separate <code>addUnsigned</code>
 , etc. methods are not provided.
 @param dividend the value to be divided
 @param divisor the value doing the dividing
 @return the unsigned quotient of the first argument divided by
  the second argument
 - seealso: #remainderUnsigned
 @since 1.8
 */
+ (jint)divideUnsignedWithInt:(jint)dividend
                      withInt:(jint)divisor;

/*!
 @brief Returns the value of this <code>Integer</code> as a <code>double</code>
  after a widening primitive conversion.
 */
- (jdouble)doubleValue;

/*!
 @brief Compares this object to the specified object.The result is 
 <code>true</code> if and only if the argument is not 
 <code>null</code> and is an <code>Integer</code> object that
  contains the same <code>int</code> value as this object.
 @param obj the object to compare with.
 @return <code>true</code> if the objects are the same;
           <code>false</code> otherwise.
 */
- (jboolean)isEqual:(id)obj;

/*!
 @brief Returns the value of this <code>Integer</code> as a <code>float</code>
  after a widening primitive conversion.
 */
- (jfloat)floatValue;

/*!
 @brief Determines the integer value of the system property with the
  specified name.
 <p>The first argument is treated as the name of a system
  property.  System properties are accessible through the <code>java.lang.System.getProperty(java.lang.String)</code>
  method. The
  string value of this property is then interpreted as an integer
  value using the grammar supported by <code>decode</code> and
  an <code>Integer</code> object representing this value is returned. 
 <p>If there is no property with the specified name, if the
  specified name is empty or <code>null</code>, or if the property
  does not have the correct numeric format, then <code>null</code> is
  returned. 
 <p>In other words, this method returns an <code>Integer</code>
  object equal to the value of: 
 <blockquote>
   <code>getInteger(nm, null)</code>
  </blockquote>
 @param nm property name.
 @return the <code>Integer</code> value of the property.
 @throw SecurityExceptionfor the same reasons as
           <code>System.getProperty</code>
 - seealso: java.lang.System#getProperty(java.lang.String)
 - seealso: java.lang.System#getProperty(java.lang.String, java.lang.String)
 */
+ (JavaLangInteger * __nullable)getIntegerWithNSString:(NSString *)nm;

/*!
 @brief Determines the integer value of the system property with the
  specified name.
 <p>The first argument is treated as the name of a system
  property.  System properties are accessible through the <code>java.lang.System.getProperty(java.lang.String)</code>
  method. The
  string value of this property is then interpreted as an integer
  value using the grammar supported by <code>decode</code> and
  an <code>Integer</code> object representing this value is returned. 
 <p>The second argument is the default value. An <code>Integer</code> object
  that represents the value of the second argument is returned if there
  is no property of the specified name, if the property does not have
  the correct numeric format, or if the specified name is empty or 
 <code>null</code>.
  
 <p>In other words, this method returns an <code>Integer</code> object
  equal to the value of: 
 <blockquote>
   <code>getInteger(nm, new Integer(val))</code>
  </blockquote>
  but in practice it may be implemented in a manner such as: 
 <blockquote>@code

  Integer result = getInteger(nm, null);
  return (result == null) ? new Integer(val) : result; 
  
@endcode</blockquote>
  to avoid the unnecessary allocation of an <code>Integer</code>
  object when the default value is not needed.
 @param nm property name.
 @param val default value.
 @return the <code>Integer</code> value of the property.
 @throw SecurityExceptionfor the same reasons as
           <code>System.getProperty</code>
 - seealso: java.lang.System#getProperty(java.lang.String)
 - seealso: java.lang.System#getProperty(java.lang.String, java.lang.String)
 */
+ (JavaLangInteger * __nullable)getIntegerWithNSString:(NSString *)nm
                                               withInt:(jint)val;

/*!
 @brief Returns the integer value of the system property with the
  specified name.The first argument is treated as the name of a
  system property.
 System properties are accessible through the 
 <code>java.lang.System.getProperty(java.lang.String)</code> method.
  The string value of this property is then interpreted as an
  integer value, as per the <code>decode</code> method,
  and an <code>Integer</code> object representing this value is
  returned; in summary: 
 <ul><li>If the property value begins with the two ASCII characters
          <code>0x</code> or the ASCII character <code>#</code>, not
       followed by a minus sign, then the rest of it is parsed as a
       hexadecimal integer exactly as by the method      
 <code>valueOf(java.lang.String, int)</code> with radix 16. 
 <li>If the property value begins with the ASCII character
      <code>0</code> followed by another character, it is parsed as an
      octal integer exactly as by the method     
 <code>valueOf(java.lang.String, int)</code> with radix 8. 
 <li>Otherwise, the property value is parsed as a decimal integer
  exactly as by the method <code>valueOf(java.lang.String, int)</code>
  with radix 10. 
 </ul>
  
 <p>The second argument is the default value. The default value is
  returned if there is no property of the specified name, if the
  property does not have the correct numeric format, or if the
  specified name is empty or <code>null</code>.
 @param nm property name.
 @param val default value.
 @return the <code>Integer</code> value of the property.
 @throw SecurityExceptionfor the same reasons as
           <code>System.getProperty</code>
 - seealso: System#getProperty(java.lang.String)
 - seealso: System#getProperty(java.lang.String, java.lang.String)
 */
+ (JavaLangInteger * __nullable)getIntegerWithNSString:(NSString *)nm
                                   withJavaLangInteger:(JavaLangInteger *)val;

/*!
 @brief Returns a hash code for this <code>Integer</code>.
 @return a hash code value for this object, equal to the
           primitive <code>int</code> value represented by this
           <code>Integer</code> object.
 */
- (NSUInteger)hash;

/*!
 @brief Returns a hash code for a <code>int</code> value; compatible with 
 <code>Integer.hashCode()</code>.
 @param value the value to hash
 @since 1.8
 @return a hash code value for a <code>int</code> value.
 */
+ (jint)hashCodeWithInt:(jint)value;

/*!
 @brief Returns an <code>int</code> value with at most a single one-bit, in the
  position of the highest-order ("leftmost") one-bit in the specified 
 <code>int</code> value.Returns zero if the specified value has no
  one-bits in its two's complement binary representation, that is, if it
  is equal to zero.
 @param i the value whose highest one bit is to be computed
 @return an <code>int</code> value with a single one-bit, in the position
      of the highest-order one-bit in the specified value, or zero if
      the specified value is itself equal to zero.
 @since 1.5
 */
+ (jint)highestOneBitWithInt:(jint)i;

/*!
 @brief Returns the value of this <code>Integer</code> as an 
 <code>int</code>.
 */
- (jint)intValue;

/*!
 @brief Returns the value of this <code>Integer</code> as a <code>long</code>
  after a widening primitive conversion.
 - seealso: Integer#toUnsignedLong(int)
 */
- (jlong)longLongValue;

/*!
 @brief Returns an <code>int</code> value with at most a single one-bit, in the
  position of the lowest-order ("rightmost") one-bit in the specified 
 <code>int</code> value.Returns zero if the specified value has no
  one-bits in its two's complement binary representation, that is, if it
  is equal to zero.
 @param i the value whose lowest one bit is to be computed
 @return an <code>int</code> value with a single one-bit, in the position
      of the lowest-order one-bit in the specified value, or zero if
      the specified value is itself equal to zero.
 @since 1.5
 */
+ (jint)lowestOneBitWithInt:(jint)i;

/*!
 @brief Returns the greater of two <code>int</code> values
  as if by calling <code>Math.max</code>.
 @param a the first operand
 @param b the second operand
 @return the greater of <code>a</code> and <code>b</code>
 - seealso: java.util.function.BinaryOperator
 @since 1.8
 */
+ (jint)maxWithInt:(jint)a
           withInt:(jint)b;

/*!
 @brief Returns the smaller of two <code>int</code> values
  as if by calling <code>Math.min</code>.
 @param a the first operand
 @param b the second operand
 @return the smaller of <code>a</code> and <code>b</code>
 - seealso: java.util.function.BinaryOperator
 @since 1.8
 */
+ (jint)minWithInt:(jint)a
           withInt:(jint)b;

/*!
 @brief Returns the number of zero bits preceding the highest-order
  ("leftmost") one-bit in the two's complement binary representation
  of the specified <code>int</code> value.Returns 32 if the
  specified value has no one-bits in its two's complement representation,
  in other words if it is equal to zero.
 <p>Note that this method is closely related to the logarithm base 2.
  For all positive <code>int</code> values x: 
 <ul>
  <li>floor(log<sub>2</sub>(x)) = <code>31 - numberOfLeadingZeros(x)</code>
  <li>ceil(log<sub>2</sub>(x)) = <code>32 - numberOfLeadingZeros(x - 1)</code>
  </ul>
 @param i the value whose number of leading zeros is to be computed
 @return the number of zero bits preceding the highest-order
      ("leftmost") one-bit in the two's complement binary representation
      of the specified <code>int</code> value, or 32 if the value
      is equal to zero.
 @since 1.5
 */
+ (jint)numberOfLeadingZerosWithInt:(jint)i;

/*!
 @brief Returns the number of zero bits following the lowest-order ("rightmost")
  one-bit in the two's complement binary representation of the specified 
 <code>int</code> value.Returns 32 if the specified value has no
  one-bits in its two's complement representation, in other words if it is
  equal to zero.
 @param i the value whose number of trailing zeros is to be computed
 @return the number of zero bits following the lowest-order ("rightmost")
      one-bit in the two's complement binary representation of the
      specified <code>int</code> value, or 32 if the value is equal
      to zero.
 @since 1.5
 */
+ (jint)numberOfTrailingZerosWithInt:(jint)i;

/*!
 @brief Parses the string argument as a signed decimal integer.The
  characters in the string must all be decimal digits, except
  that the first character may be an ASCII minus sign <code>'-'</code>
  (<code>'\u002D'</code>) to indicate a negative value or an
  ASCII plus sign <code>'+'</code> (<code>'\u002B'</code>) to
  indicate a positive value.
 The resulting integer value is
  returned, exactly as if the argument and the radix 10 were
  given as arguments to the <code>parseInt(java.lang.String,
 int)</code>
  method.
 @param s a <code>String</code>  containing the <code>int</code>              representation to be parsed
 @return the integer value represented by the argument in decimal.
 @throw NumberFormatExceptionif the string does not contain a
                parsable integer.
 */
+ (jint)parseIntWithNSString:(NSString *)s;

/*!
 @brief Parses the string argument as a signed integer in the radix
  specified by the second argument.The characters in the string
  must all be digits of the specified radix (as determined by
  whether <code>java.lang.Character.digit(char, int)</code> returns a
  nonnegative value), except that the first character may be an
  ASCII minus sign <code>'-'</code> (<code>'\u002D'</code>) to
  indicate a negative value or an ASCII plus sign <code>'+'</code>
  (<code>'\u002B'</code>) to indicate a positive value.
 The
  resulting integer value is returned. 
 <p>An exception of type <code>NumberFormatException</code> is
  thrown if any of the following situations occurs: 
 <ul>
  <li>The first argument is <code>null</code> or is a string of
  length zero. 
 <li>The radix is either smaller than 
 <code>java.lang.Character.MIN_RADIX</code> or
  larger than <code>java.lang.Character.MAX_RADIX</code>.
  
 <li>Any character of the string is not a digit of the specified
  radix, except that the first character may be a minus sign 
 <code>'-'</code> (<code>'\u002D'</code>) or plus sign 
 <code>'+'</code> (<code>'\u002B'</code>) provided that the
  string is longer than length 1. 
 <li>The value represented by the string is not a value of type 
 <code>int</code>.
  </ul>
  
 <p>Examples:
  <blockquote>@code

  parseInt("0", 10) returns 0
  parseInt("473", 10) returns 473
  parseInt("+42", 10) returns 42
  parseInt("-0", 10) returns 0
  parseInt("-FF", 16) returns -255
  parseInt("1100110", 2) returns 102
  parseInt("2147483647", 10) returns 2147483647
  parseInt("-2147483648", 10) returns -2147483648
  parseInt("2147483648", 10) throws a NumberFormatException
  parseInt("99", 8) throws a NumberFormatException
  parseInt("Kona", 10) throws a NumberFormatException
  parseInt("Kona", 27) returns 411787 
  
@endcode</blockquote>
 @param s the <code>String</code>  containing the integer                   representation to be parsed
 @param radix the radix to be used while parsing <code>s</code> .
 @return the integer represented by the string argument in the
              specified radix.
 @throw NumberFormatExceptionif the <code>String</code>
              does not contain a parsable <code>int</code>.
 */
+ (jint)parseIntWithNSString:(NSString *)s
                     withInt:(jint)radix;

/*!
 @brief Parses the string argument as an unsigned decimal integer.The
  characters in the string must all be decimal digits, except
  that the first character may be an an ASCII plus sign <code>'+'</code>
  (<code>'\u002B'</code>).
 The resulting integer value
  is returned, exactly as if the argument and the radix 10 were
  given as arguments to the <code>parseUnsignedInt(java.lang.String, int)</code>
  method.
 @param s a <code>String</code>  containing the unsigned <code>int</code>             representation to be parsed
 @return the unsigned integer value represented by the argument in decimal.
 @throw NumberFormatExceptionif the string does not contain a
             parsable unsigned integer.
 @since 1.8
 */
+ (jint)parseUnsignedIntWithNSString:(NSString *)s;

/*!
 @brief Parses the string argument as an unsigned integer in the radix
  specified by the second argument.An unsigned integer maps the
  values usually associated with negative numbers to positive
  numbers larger than <code>MAX_VALUE</code>.
 The characters in the string must all be digits of the
  specified radix (as determined by whether <code>java.lang.Character.digit(char, int)</code>
  returns a nonnegative
  value), except that the first character may be an ASCII plus
  sign <code>'+'</code> (<code>'\u002B'</code>). The resulting
  integer value is returned. 
 <p>An exception of type <code>NumberFormatException</code> is
  thrown if any of the following situations occurs: 
 <ul>
  <li>The first argument is <code>null</code> or is a string of
  length zero. 
 <li>The radix is either smaller than 
 <code>java.lang.Character.MIN_RADIX</code> or
  larger than <code>java.lang.Character.MAX_RADIX</code>.
  
 <li>Any character of the string is not a digit of the specified
  radix, except that the first character may be a plus sign 
 <code>'+'</code> (<code>'\u002B'</code>) provided that the
  string is longer than length 1. 
 <li>The value represented by the string is larger than the
  largest unsigned <code>int</code>, 2<sup>32</sup>-1.
  
 </ul>
 @param s the <code>String</code>  containing the unsigned integer                   representation to be parsed
 @param radix the radix to be used while parsing <code>s</code> .
 @return the integer represented by the string argument in the
              specified radix.
 @throw NumberFormatExceptionif the <code>String</code>
              does not contain a parsable <code>int</code>.
 @since 1.8
 */
+ (jint)parseUnsignedIntWithNSString:(NSString *)s
                             withInt:(jint)radix;

/*!
 @brief Returns the unsigned remainder from dividing the first argument
  by the second where each argument and the result is interpreted
  as an unsigned value.
 @param dividend the value to be divided
 @param divisor the value doing the dividing
 @return the unsigned remainder of the first argument divided by
  the second argument
 - seealso: #divideUnsigned
 @since 1.8
 */
+ (jint)remainderUnsignedWithInt:(jint)dividend
                         withInt:(jint)divisor;

/*!
 @brief Returns the value obtained by reversing the order of the bits in the
  two's complement binary representation of the specified <code>int</code>
  value.
 @param i the value to be reversed
 @return the value obtained by reversing order of the bits in the
      specified <code>int</code> value.
 @since 1.5
 */
+ (jint)reverseWithInt:(jint)i;

/*!
 @brief Returns the value obtained by reversing the order of the bytes in the
  two's complement representation of the specified <code>int</code> value.
 @param i the value whose bytes are to be reversed
 @return the value obtained by reversing the bytes in the specified
      <code>int</code> value.
 @since 1.5
 */
+ (jint)reverseBytesWithInt:(jint)i;

/*!
 @brief Returns the value obtained by rotating the two's complement binary
  representation of the specified <code>int</code> value left by the
  specified number of bits.
 (Bits shifted out of the left hand, or
  high-order, side reenter on the right, or low-order.) 
 <p>Note that left rotation with a negative distance is equivalent to
  right rotation: <code>rotateLeft(val, -distance) == rotateRight(val,
  distance)</code>
 .  Note also that rotation by any multiple of 32 is a
  no-op, so all but the last five bits of the rotation distance can be
  ignored, even if the distance is negative: <code>rotateLeft(val,
  distance) == rotateLeft(val, distance & 0x1F)</code>
 .
 @param i the value whose bits are to be rotated left
 @param distance the number of bit positions to rotate left
 @return the value obtained by rotating the two's complement binary
      representation of the specified <code>int</code> value left by the
      specified number of bits.
 @since 1.5
 */
+ (jint)rotateLeftWithInt:(jint)i
                  withInt:(jint)distance;

/*!
 @brief Returns the value obtained by rotating the two's complement binary
  representation of the specified <code>int</code> value right by the
  specified number of bits.
 (Bits shifted out of the right hand, or
  low-order, side reenter on the left, or high-order.) 
 <p>Note that right rotation with a negative distance is equivalent to
  left rotation: <code>rotateRight(val, -distance) == rotateLeft(val,
  distance)</code>
 .  Note also that rotation by any multiple of 32 is a
  no-op, so all but the last five bits of the rotation distance can be
  ignored, even if the distance is negative: <code>rotateRight(val,
  distance) == rotateRight(val, distance & 0x1F)</code>
 .
 @param i the value whose bits are to be rotated right
 @param distance the number of bit positions to rotate right
 @return the value obtained by rotating the two's complement binary
      representation of the specified <code>int</code> value right by the
      specified number of bits.
 @since 1.5
 */
+ (jint)rotateRightWithInt:(jint)i
                   withInt:(jint)distance;

/*!
 @brief Returns the value of this <code>Integer</code> as a <code>short</code>
  after a narrowing primitive conversion.
 */
- (jshort)shortValue;

/*!
 @brief Returns the signum function of the specified <code>int</code> value.
 (The
  return value is -1 if the specified value is negative; 0 if the
  specified value is zero; and 1 if the specified value is positive.)
 @param i the value whose signum is to be computed
 @return the signum function of the specified <code>int</code> value.
 @since 1.5
 */
+ (jint)signumWithInt:(jint)i;

/*!
 @brief Adds two integers together as per the + operator.
 @param a the first operand
 @param b the second operand
 @return the sum of <code>a</code> and <code>b</code>
 - seealso: java.util.function.BinaryOperator
 @since 1.8
 */
+ (jint)sumWithInt:(jint)a
           withInt:(jint)b;

/*!
 @brief Returns a string representation of the integer argument as an
  unsigned integer in base&nbsp;2.
 <p>The unsigned integer value is the argument plus 2<sup>32</sup>
  if the argument is negative; otherwise it is equal to the
  argument.  This value is converted to a string of ASCII digits
  in binary (base&nbsp;2) with no extra leading <code>0</code>s.
  
 <p>The value of the argument can be recovered from the returned
  string <code>s</code> by calling <code>Integer.parseUnsignedInt(s, 2)</code>
 .
  
 <p>If the unsigned magnitude is zero, it is represented by a
  single zero character <code>'0'</code> (<code>'\u0030'</code>);
  otherwise, the first character of the representation of the
  unsigned magnitude will not be the zero character. The
  characters <code>'0'</code> (<code>'\u0030'</code>) and <code>'1'</code>
  (<code>'\u0031'</code>) are used as binary digits.
 @param i an integer to be converted to a string.
 @return the string representation of the unsigned integer value
           represented by the argument in binary (base&nbsp;2).
 - seealso: #parseUnsignedInt(String, int)
 - seealso: #toUnsignedString(int, int)
 @since JDK1.0.2
 */
+ (NSString * __nonnull)toBinaryStringWithInt:(jint)i;

/*!
 @brief Returns a string representation of the integer argument as an
  unsigned integer in base&nbsp;16.
 <p>The unsigned integer value is the argument plus 2<sup>32</sup>
  if the argument is negative; otherwise, it is equal to the
  argument.  This value is converted to a string of ASCII digits
  in hexadecimal (base&nbsp;16) with no extra leading 
 <code>0</code>s.
  
 <p>The value of the argument can be recovered from the returned
  string <code>s</code> by calling <code>Integer.parseUnsignedInt(s, 16)</code>
 .
  
 <p>If the unsigned magnitude is zero, it is represented by a
  single zero character <code>'0'</code> (<code>'\u0030'</code>);
  otherwise, the first character of the representation of the
  unsigned magnitude will not be the zero character. The
  following characters are used as hexadecimal digits: 
 <blockquote>
   <code>0123456789abcdef</code>
  </blockquote>
  These are the characters <code>'\u0030'</code> through 
 <code>'\u0039'</code> and <code>'\u0061'</code> through 
 <code>'\u0066'</code>. If uppercase letters are
  desired, the <code>java.lang.String.toUpperCase()</code> method may
  be called on the result: 
 <blockquote>
   <code>Integer.toHexString(n).toUpperCase()</code>
  </blockquote>
 @param i an integer to be converted to a string.
 @return the string representation of the unsigned integer value
           represented by the argument in hexadecimal (base&nbsp;16).
 - seealso: #parseUnsignedInt(String, int)
 - seealso: #toUnsignedString(int, int)
 @since JDK1.0.2
 */
+ (NSString * __nonnull)toHexStringWithInt:(jint)i;

/*!
 @brief Returns a string representation of the integer argument as an
  unsigned integer in base&nbsp;8.
 <p>The unsigned integer value is the argument plus 2<sup>32</sup>
  if the argument is negative; otherwise, it is equal to the
  argument.  This value is converted to a string of ASCII digits
  in octal (base&nbsp;8) with no extra leading <code>0</code>s.
  
 <p>The value of the argument can be recovered from the returned
  string <code>s</code> by calling <code>Integer.parseUnsignedInt(s, 8)</code>
 .
  
 <p>If the unsigned magnitude is zero, it is represented by a
  single zero character <code>'0'</code> (<code>'\u0030'</code>);
  otherwise, the first character of the representation of the
  unsigned magnitude will not be the zero character. The
  following characters are used as octal digits: 
 <blockquote>
  <code>01234567</code>
  </blockquote>
  These are the characters <code>'\u0030'</code> through 
 <code>'\u0037'</code>.
 @param i an integer to be converted to a string.
 @return the string representation of the unsigned integer value
           represented by the argument in octal (base&nbsp;8).
 - seealso: #parseUnsignedInt(String, int)
 - seealso: #toUnsignedString(int, int)
 @since JDK1.0.2
 */
+ (NSString * __nonnull)toOctalStringWithInt:(jint)i;

/*!
 @brief Returns a <code>String</code> object representing this 
 <code>Integer</code>'s value.The value is converted to signed
  decimal representation and returned as a string, exactly as if
  the integer value were given as an argument to the <code>java.lang.Integer.toString(int)</code>
  method.
 @return a string representation of the value of this object in
           base&nbsp;10.
 */
- (NSString * __nonnull)description;

/*!
 @brief Returns a <code>String</code> object representing the
  specified integer.The argument is converted to signed decimal
  representation and returned as a string, exactly as if the
  argument and radix 10 were given as arguments to the <code>toString(int, int)</code>
  method.
 @param i an integer to be converted.
 @return a string representation of the argument in base&nbsp;10.
 */
+ (NSString * __nonnull)toStringWithInt:(jint)i;

/*!
 @brief Returns a string representation of the first argument in the
  radix specified by the second argument.
 <p>If the radix is smaller than <code>Character.MIN_RADIX</code>
  or larger than <code>Character.MAX_RADIX</code>, then the radix 
 <code>10</code> is used instead. 
 <p>If the first argument is negative, the first element of the
  result is the ASCII minus character <code>'-'</code>
  (<code>'\u002D'</code>). If the first argument is not
  negative, no sign character appears in the result. 
 <p>The remaining characters of the result represent the magnitude
  of the first argument. If the magnitude is zero, it is
  represented by a single zero character <code>'0'</code>
  (<code>'\u0030'</code>); otherwise, the first character of
  the representation of the magnitude will not be the zero
  character.  The following ASCII characters are used as digits: 
 <blockquote>
    <code>0123456789abcdefghijklmnopqrstuvwxyz</code>
  </blockquote>
  These are <code>'\u0030'</code> through 
 <code>'\u0039'</code> and <code>'\u0061'</code> through 
 <code>'\u007A'</code>. If <code>radix</code> is 
 <var>N</var>, then the first <var>N</var> of these characters
  are used as radix-<var>N</var> digits in the order shown. Thus,
  the digits for hexadecimal (radix 16) are 
 <code>0123456789abcdef</code>. If uppercase letters are
  desired, the <code>java.lang.String.toUpperCase()</code> method may
  be called on the result: 
 <blockquote>
   <code>Integer.toString(n, 16).toUpperCase()</code>
  </blockquote>
 @param i an integer to be converted to a string.
 @param radix the radix to use in the string representation.
 @return a string representation of the argument in the specified radix.
 - seealso: java.lang.Character#MAX_RADIX
 - seealso: java.lang.Character#MIN_RADIX
 */
+ (NSString * __nonnull)toStringWithInt:(jint)i
                                withInt:(jint)radix;

/*!
 @brief Converts the argument to a <code>long</code> by an unsigned
  conversion.In an unsigned conversion to a <code>long</code>, the
  high-order 32 bits of the <code>long</code> are zero and the
  low-order 32 bits are equal to the bits of the integer
  argument.
 Consequently, zero and positive <code>int</code> values are mapped
  to a numerically equal <code>long</code> value and negative <code>int</code>
  values are mapped to a <code>long</code> value equal to the
  input plus 2<sup>32</sup>.
 @param x the value to convert to an unsigned <code>long</code>
 @return the argument converted to <code>long</code> by an unsigned
          conversion
 @since 1.8
 */
+ (jlong)toUnsignedLongWithInt:(jint)x;

/*!
 @brief Returns a string representation of the argument as an unsigned
  decimal value.
 The argument is converted to unsigned decimal representation
  and returned as a string exactly as if the argument and radix
  10 were given as arguments to the <code>toUnsignedString(int,
 int)</code>
  method.
 @param i an integer to be converted to an unsigned string.
 @return an unsigned string representation of the argument.
 - seealso: #toUnsignedString(int, int)
 @since 1.8
 */
+ (NSString * __nonnull)toUnsignedStringWithInt:(jint)i;

/*!
 @brief Returns a string representation of the first argument as an
  unsigned integer value in the radix specified by the second
  argument.
 <p>If the radix is smaller than <code>Character.MIN_RADIX</code>
  or larger than <code>Character.MAX_RADIX</code>, then the radix 
 <code>10</code> is used instead. 
 <p>Note that since the first argument is treated as an unsigned
  value, no leading sign character is printed. 
 <p>If the magnitude is zero, it is represented by a single zero
  character <code>'0'</code> (<code>'\u0030'</code>); otherwise,
  the first character of the representation of the magnitude will
  not be the zero character. 
 <p>The behavior of radixes and the characters used as digits
  are the same as <code>toString</code>.
 @param i an integer to be converted to an unsigned string.
 @param radix the radix to use in the string representation.
 @return an unsigned string representation of the argument in the specified radix.
 - seealso: #toString(int, int)
 @since 1.8
 */
+ (NSString * __nonnull)toUnsignedStringWithInt:(jint)i
                                        withInt:(jint)radix;

/*!
 @brief Returns an <code>Integer</code> instance representing the specified 
 <code>int</code> value.If a new <code>Integer</code> instance is not
  required, this method should generally be used in preference to
  the constructor <code>Integer(int)</code>, as this method is likely
  to yield significantly better space and time performance by
  caching frequently requested values.
 This method will always cache values in the range -128 to 127,
  inclusive, and may cache other values outside of this range.
 @param i an <code>int</code>  value.
 @return an <code>Integer</code> instance representing <code>i</code>.
 @since 1.5
 */
+ (JavaLangInteger * __nonnull)valueOfWithInt:(jint)i;

/*!
 @brief Returns an <code>Integer</code> object holding the
  value of the specified <code>String</code>.The argument is
  interpreted as representing a signed decimal integer, exactly
  as if the argument were given to the <code>parseInt(java.lang.String)</code>
  method.
 The result is an 
 <code>Integer</code> object that represents the integer value
  specified by the string. 
 <p>In other words, this method returns an <code>Integer</code>
  object equal to the value of: 
 <blockquote>
   <code>new Integer(Integer.parseInt(s))</code>
  </blockquote>
 @param s the string to be parsed.
 @return an <code>Integer</code> object holding the value
              represented by the string argument.
 @throw NumberFormatExceptionif the string cannot be parsed
              as an integer.
 */
+ (JavaLangInteger * __nonnull)valueOfWithNSString:(NSString *)s;

/*!
 @brief Returns an <code>Integer</code> object holding the value
  extracted from the specified <code>String</code> when parsed
  with the radix given by the second argument.The first argument
  is interpreted as representing a signed integer in the radix
  specified by the second argument, exactly as if the arguments
  were given to the <code>parseInt(java.lang.String, int)</code>
  method.
 The result is an <code>Integer</code> object that
  represents the integer value specified by the string. 
 <p>In other words, this method returns an <code>Integer</code>
  object equal to the value of: 
 <blockquote>
   <code>new Integer(Integer.parseInt(s, radix))</code>
  </blockquote>
 @param s the string to be parsed.
 @param radix the radix to be used in interpreting <code>s</code>
 @return an <code>Integer</code> object holding the value
              represented by the string argument in the specified
              radix.
 @throw NumberFormatExceptionif the <code>String</code>
             does not contain a parsable <code>int</code>.
 */
+ (JavaLangInteger * __nonnull)valueOfWithNSString:(NSString *)s
                                           withInt:(jint)radix;

#pragma mark Package-Private

/*!
 @brief Places characters representing the integer i into the
  character array buf.The characters are placed into
  the buffer backwards starting with the least significant
  digit at the specified index (exclusive), and working
  backwards from there.
 Will fail if i == Integer.MIN_VALUE
 */
+ (void)getCharsWithInt:(jint)i
                withInt:(jint)index
          withCharArray:(IOSCharArray *)buf;

+ (jint)stringSizeWithInt:(jint)x;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(JavaLangInteger)

/*!
 @brief A constant holding the minimum value an <code>int</code> can
  have, -2<sup>31</sup>.
 */
inline jint JavaLangInteger_get_MIN_VALUE(void);
#define JavaLangInteger_MIN_VALUE ((jint) 0x80000000)
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangInteger, MIN_VALUE, jint)

/*!
 @brief A constant holding the maximum value an <code>int</code> can
  have, 2<sup>31</sup>-1.
 */
inline jint JavaLangInteger_get_MAX_VALUE(void);
#define JavaLangInteger_MAX_VALUE 2147483647
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangInteger, MAX_VALUE, jint)

/*!
 @brief The <code>Class</code> instance representing the primitive type 
 <code>int</code>.
 @since JDK1.1
 */
inline IOSClass *JavaLangInteger_get_TYPE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSClass *JavaLangInteger_TYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangInteger, TYPE, IOSClass *)

inline IOSIntArray *JavaLangInteger_get_sizeTable(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSIntArray *JavaLangInteger_sizeTable;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaLangInteger, sizeTable, IOSIntArray *)

/*!
 @brief The number of bits used to represent an <code>int</code> value in two's
  complement binary form.
 @since 1.5
 */
inline jint JavaLangInteger_get_SIZE(void);
#define JavaLangInteger_SIZE 32
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangInteger, SIZE, jint)

/*!
 @brief The number of bytes used to represent a <code>int</code> value in two's
  complement binary form.
 @since 1.8
 */
inline jint JavaLangInteger_get_BYTES(void);
#define JavaLangInteger_BYTES 4
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangInteger, BYTES, jint)

FOUNDATION_EXPORT NSString *JavaLangInteger_toStringWithInt_withInt_(jint i, jint radix);

FOUNDATION_EXPORT NSString *JavaLangInteger_toUnsignedStringWithInt_withInt_(jint i, jint radix);

FOUNDATION_EXPORT NSString *JavaLangInteger_toHexStringWithInt_(jint i);

FOUNDATION_EXPORT NSString *JavaLangInteger_toOctalStringWithInt_(jint i);

FOUNDATION_EXPORT NSString *JavaLangInteger_toBinaryStringWithInt_(jint i);

FOUNDATION_EXPORT NSString *JavaLangInteger_toStringWithInt_(jint i);

FOUNDATION_EXPORT NSString *JavaLangInteger_toUnsignedStringWithInt_(jint i);

FOUNDATION_EXPORT void JavaLangInteger_getCharsWithInt_withInt_withCharArray_(jint i, jint index, IOSCharArray *buf);

FOUNDATION_EXPORT jint JavaLangInteger_stringSizeWithInt_(jint x);

FOUNDATION_EXPORT jint JavaLangInteger_parseIntWithNSString_withInt_(NSString *s, jint radix);

FOUNDATION_EXPORT jint JavaLangInteger_parseIntWithNSString_(NSString *s);

FOUNDATION_EXPORT jint JavaLangInteger_parseUnsignedIntWithNSString_withInt_(NSString *s, jint radix);

FOUNDATION_EXPORT jint JavaLangInteger_parseUnsignedIntWithNSString_(NSString *s);

FOUNDATION_EXPORT JavaLangInteger *JavaLangInteger_valueOfWithNSString_withInt_(NSString *s, jint radix);

FOUNDATION_EXPORT JavaLangInteger *JavaLangInteger_valueOfWithNSString_(NSString *s);

FOUNDATION_EXPORT JavaLangInteger *JavaLangInteger_valueOfWithInt_(jint i);

FOUNDATION_EXPORT void JavaLangInteger_initWithInt_(JavaLangInteger *self, jint value);

FOUNDATION_EXPORT JavaLangInteger *new_JavaLangInteger_initWithInt_(jint value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangInteger *create_JavaLangInteger_initWithInt_(jint value);

FOUNDATION_EXPORT void JavaLangInteger_initWithNSString_(JavaLangInteger *self, NSString *s);

FOUNDATION_EXPORT JavaLangInteger *new_JavaLangInteger_initWithNSString_(NSString *s) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangInteger *create_JavaLangInteger_initWithNSString_(NSString *s);

FOUNDATION_EXPORT jint JavaLangInteger_hashCodeWithInt_(jint value);

FOUNDATION_EXPORT JavaLangInteger *JavaLangInteger_getIntegerWithNSString_(NSString *nm);

FOUNDATION_EXPORT JavaLangInteger *JavaLangInteger_getIntegerWithNSString_withInt_(NSString *nm, jint val);

FOUNDATION_EXPORT JavaLangInteger *JavaLangInteger_getIntegerWithNSString_withJavaLangInteger_(NSString *nm, JavaLangInteger *val);

FOUNDATION_EXPORT JavaLangInteger *JavaLangInteger_decodeWithNSString_(NSString *nm);

FOUNDATION_EXPORT jint JavaLangInteger_compareWithInt_withInt_(jint x, jint y);

FOUNDATION_EXPORT jint JavaLangInteger_compareUnsignedWithInt_withInt_(jint x, jint y);

FOUNDATION_EXPORT jlong JavaLangInteger_toUnsignedLongWithInt_(jint x);

FOUNDATION_EXPORT jint JavaLangInteger_divideUnsignedWithInt_withInt_(jint dividend, jint divisor);

FOUNDATION_EXPORT jint JavaLangInteger_remainderUnsignedWithInt_withInt_(jint dividend, jint divisor);

FOUNDATION_EXPORT jint JavaLangInteger_highestOneBitWithInt_(jint i);

FOUNDATION_EXPORT jint JavaLangInteger_lowestOneBitWithInt_(jint i);

FOUNDATION_EXPORT jint JavaLangInteger_numberOfLeadingZerosWithInt_(jint i);

FOUNDATION_EXPORT jint JavaLangInteger_numberOfTrailingZerosWithInt_(jint i);

FOUNDATION_EXPORT jint JavaLangInteger_bitCountWithInt_(jint i);

FOUNDATION_EXPORT jint JavaLangInteger_rotateLeftWithInt_withInt_(jint i, jint distance);

FOUNDATION_EXPORT jint JavaLangInteger_rotateRightWithInt_withInt_(jint i, jint distance);

FOUNDATION_EXPORT jint JavaLangInteger_reverseWithInt_(jint i);

FOUNDATION_EXPORT jint JavaLangInteger_signumWithInt_(jint i);

FOUNDATION_EXPORT jint JavaLangInteger_reverseBytesWithInt_(jint i);

FOUNDATION_EXPORT jint JavaLangInteger_sumWithInt_withInt_(jint a, jint b);

FOUNDATION_EXPORT jint JavaLangInteger_maxWithInt_withInt_(jint a, jint b);

FOUNDATION_EXPORT jint JavaLangInteger_minWithInt_withInt_(jint a, jint b);

J2OBJC_TYPE_LITERAL_HEADER(JavaLangInteger)

BOXED_INC_AND_DEC(Int, intValue, JavaLangInteger)
BOXED_COMPOUND_ASSIGN_ARITHMETIC(Int, intValue, jint, JavaLangInteger)
BOXED_COMPOUND_ASSIGN_MOD(Int, intValue, jint, JavaLangInteger)
BOXED_COMPOUND_ASSIGN_BITWISE(Int, intValue, jint, JavaLangInteger)
BOXED_SHIFT_ASSIGN_32(Int, intValue, jint, JavaLangInteger)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaLangInteger")
