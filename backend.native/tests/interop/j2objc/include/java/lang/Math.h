//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/lang/Math.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaLangMath")
#ifdef RESTRICT_JavaLangMath
#define INCLUDE_ALL_JavaLangMath 0
#else
#define INCLUDE_ALL_JavaLangMath 1
#endif
#undef RESTRICT_JavaLangMath

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaLangMath_) && (INCLUDE_ALL_JavaLangMath || defined(INCLUDE_JavaLangMath))
#define JavaLangMath_

/*!
 @brief The class <code>Math</code> contains methods for performing basic
  numeric operations such as the elementary exponential, logarithm,
  square root, and trigonometric functions.
 <p>Unlike some of the numeric methods of class 
 <code>StrictMath</code>, all implementations of the equivalent
  functions of class <code>Math</code> are not defined to return the
  bit-for-bit same results.  This relaxation permits
  better-performing implementations where strict reproducibility is
  not required. 
 <p>By default many of the <code>Math</code> methods simply call
  the equivalent method in <code>StrictMath</code> for their
  implementation.  Code generators are encouraged to use
  platform-specific native libraries or microprocessor instructions,
  where available, to provide higher-performance implementations of 
 <code>Math</code> methods.  Such higher-performance
  implementations still must conform to the specification for 
 <code>Math</code>.
  
 <p>The quality of implementation specifications concern two
  properties, accuracy of the returned result and monotonicity of the
  method.  Accuracy of the floating-point <code>Math</code> methods is
  measured in terms of <i>ulps</i>, units in the last place.  For a
  given floating-point format, an ulp of a
  specific real number value is the distance between the two
  floating-point values bracketing that numerical value.  When
  discussing the accuracy of a method as a whole rather than at a
  specific argument, the number of ulps cited is for the worst-case
  error at any argument.  If a method always has an error less than
  0.5 ulps, the method always returns the floating-point number
  nearest the exact result; such a method is <i>correctly
  rounded</i>.  A correctly rounded method is generally the best a
  floating-point approximation can be; however, it is impractical for
  many floating-point methods to be correctly rounded.  Instead, for
  the <code>Math</code> class, a larger error bound of 1 or 2 ulps is
  allowed for certain methods.  Informally, with a 1 ulp error bound,
  when the exact result is a representable number, the exact result
  should be returned as the computed result; otherwise, either of the
  two floating-point values which bracket the exact result may be
  returned.  For exact results large in magnitude, one of the
  endpoints of the bracket may be infinite.  Besides accuracy at
  individual arguments, maintaining proper relations between the
  method at different arguments is also important.  Therefore, most
  methods with more than 0.5 ulp errors are required to be 
 <i>semi-monotonic</i>: whenever the mathematical function is
  non-decreasing, so is the floating-point approximation, likewise,
  whenever the mathematical function is non-increasing, so is the
  floating-point approximation.  Not all approximations that have 1
  ulp accuracy will automatically meet the monotonicity requirements. 
 <p>
  The platform uses signed two's complement integer arithmetic with
  int and long primitive types.  The developer should choose
  the primitive type to ensure that arithmetic operations consistently
  produce correct results, which in some cases means the operations
  will not overflow the range of values of the computation.
  The best practice is to choose the primitive type and algorithm to avoid
  overflow. In cases where the size is <code>int</code> or <code>long</code> and
  overflow errors need to be detected, the methods <code>addExact</code>,
  <code>subtractExact</code>, <code>multiplyExact</code>, and <code>toIntExact</code>
  throw an <code>ArithmeticException</code> when the results overflow.
  For other arithmetic operations such as divide, absolute value,
  increment, decrement, and negation overflow occurs only with
  a specific minimum or maximum value and should be checked against
  the minimum or maximum as appropriate.
 @author unascribed
 @author Joseph D. Darcy
 @since JDK1.0
 */
@interface JavaLangMath : NSObject
@property (readonly, class) jdouble E NS_SWIFT_NAME(E);
@property (readonly, class) jdouble PI NS_SWIFT_NAME(PI);
@property (class) jdouble twoToTheDoubleScaleUp NS_SWIFT_NAME(twoToTheDoubleScaleUp);
@property (class) jdouble twoToTheDoubleScaleDown NS_SWIFT_NAME(twoToTheDoubleScaleDown);

+ (jdouble)E;

+ (jdouble)PI;

+ (jdouble)twoToTheDoubleScaleUp;

+ (void)setTwoToTheDoubleScaleUp:(jdouble)value;

+ (jdouble)twoToTheDoubleScaleDown;

+ (void)setTwoToTheDoubleScaleDown:(jdouble)value;

#pragma mark Public

/*!
 @brief Returns the absolute value of a <code>double</code> value.
 If the argument is not negative, the argument is returned.
  If the argument is negative, the negation of the argument is returned.
  Special cases: 
 <ul><li>If the argument is positive zero or negative zero, the result
  is positive zero. 
 <li>If the argument is infinite, the result is positive infinity. 
 <li>If the argument is NaN, the result is NaN.</ul>
  In other words, the result is the same as the value of the expression: 
 <p><code>Double.longBitsToDouble((Double.doubleToLongBits(a)<<1)>>>1)</code>
 @param a the argument whose absolute value is to be determined
 @return the absolute value of the argument.
 */
+ (jdouble)absWithDouble:(jdouble)a;

/*!
 @brief Returns the absolute value of a <code>float</code> value.
 If the argument is not negative, the argument is returned.
  If the argument is negative, the negation of the argument is returned.
  Special cases: 
 <ul><li>If the argument is positive zero or negative zero, the
  result is positive zero. 
 <li>If the argument is infinite, the result is positive infinity. 
 <li>If the argument is NaN, the result is NaN.</ul>
  In other words, the result is the same as the value of the expression: 
 <p><code>Float.intBitsToFloat(0x7fffffff & Float.floatToIntBits(a))</code>
 @param a the argument whose absolute value is to be determined
 @return the absolute value of the argument.
 */
+ (jfloat)absWithFloat:(jfloat)a;

/*!
 @brief Returns the absolute value of an <code>int</code> value.
 If the argument is not negative, the argument is returned.
  If the argument is negative, the negation of the argument is returned. 
 <p>Note that if the argument is equal to the value of 
 <code>Integer.MIN_VALUE</code>, the most negative representable 
 <code>int</code> value, the result is that same value, which is
  negative.
 @param a the argument whose absolute value is to be determined
 @return the absolute value of the argument.
 */
+ (jint)absWithInt:(jint)a;

/*!
 @brief Returns the absolute value of a <code>long</code> value.
 If the argument is not negative, the argument is returned.
  If the argument is negative, the negation of the argument is returned. 
 <p>Note that if the argument is equal to the value of 
 <code>Long.MIN_VALUE</code>, the most negative representable 
 <code>long</code> value, the result is that same value, which
  is negative.
 @param a the argument whose absolute value is to be determined
 @return the absolute value of the argument.
 */
+ (jlong)absWithLong:(jlong)a;

/*!
 @brief Returns the arc cosine of a value; the returned angle is in the
  range 0.0 through <i>pi</i>.Special case: 
 <ul><li>If the argument is NaN or its absolute value is greater
  than 1, then the result is NaN.
 </ul>
  
 <p>The computed result must be within 1 ulp of the exact result.
  Results must be semi-monotonic.
 @param a the value whose arc cosine is to be returned.
 @return the arc cosine of the argument.
 */
+ (jdouble)acosWithDouble:(jdouble)a;

/*!
 @brief Returns the sum of its arguments,
  throwing an exception if the result overflows an <code>int</code>.
 @param x the first value
 @param y the second value
 @return the result
 @throw ArithmeticExceptionif the result overflows an int
 @since 1.8
 */
+ (jint)addExactWithInt:(jint)x
                withInt:(jint)y;

/*!
 @brief Returns the sum of its arguments,
  throwing an exception if the result overflows a <code>long</code>.
 @param x the first value
 @param y the second value
 @return the result
 @throw ArithmeticExceptionif the result overflows a long
 @since 1.8
 */
+ (jlong)addExactWithLong:(jlong)x
                 withLong:(jlong)y;

/*!
 @brief Returns the arc sine of a value; the returned angle is in the
  range -<i>pi</i>/2 through <i>pi</i>/2.Special cases: 
 <ul><li>If the argument is NaN or its absolute value is greater
  than 1, then the result is NaN.
 <li>If the argument is zero, then the result is a zero with the
  same sign as the argument.</ul>
  
 <p>The computed result must be within 1 ulp of the exact result.
  Results must be semi-monotonic.
 @param a the value whose arc sine is to be returned.
 @return the arc sine of the argument.
 */
+ (jdouble)asinWithDouble:(jdouble)a;

/*!
 @brief Returns the arc tangent of a value; the returned angle is in the
  range -<i>pi</i>/2 through <i>pi</i>/2.Special cases: 
 <ul><li>If the argument is NaN, then the result is NaN.
 <li>If the argument is zero, then the result is a zero with the
  same sign as the argument.</ul>
  
 <p>The computed result must be within 1 ulp of the exact result.
  Results must be semi-monotonic.
 @param a the value whose arc tangent is to be returned.
 @return the arc tangent of the argument.
 */
+ (jdouble)atanWithDouble:(jdouble)a;

/*!
 @brief Returns the angle <i>theta</i> from the conversion of rectangular
  coordinates (<code>x</code>,&nbsp;<code>y</code>) to polar
  coordinates (r,&nbsp;<i>theta</i>).
 This method computes the phase <i>theta</i> by computing an arc tangent
  of <code>y/x</code> in the range of -<i>pi</i> to <i>pi</i>. Special
  cases: 
 <ul><li>If either argument is NaN, then the result is NaN. 
 <li>If the first argument is positive zero and the second argument
  is positive, or the first argument is positive and finite and the
  second argument is positive infinity, then the result is positive
  zero. 
 <li>If the first argument is negative zero and the second argument
  is positive, or the first argument is negative and finite and the
  second argument is positive infinity, then the result is negative zero. 
 <li>If the first argument is positive zero and the second argument
  is negative, or the first argument is positive and finite and the
  second argument is negative infinity, then the result is the 
 <code>double</code> value closest to <i>pi</i>.
  <li>If the first argument is negative zero and the second argument
  is negative, or the first argument is negative and finite and the
  second argument is negative infinity, then the result is the 
 <code>double</code> value closest to -<i>pi</i>.
  <li>If the first argument is positive and the second argument is
  positive zero or negative zero, or the first argument is positive
  infinity and the second argument is finite, then the result is the 
 <code>double</code> value closest to <i>pi</i>/2.
  <li>If the first argument is negative and the second argument is
  positive zero or negative zero, or the first argument is negative
  infinity and the second argument is finite, then the result is the 
 <code>double</code> value closest to -<i>pi</i>/2.
  <li>If both arguments are positive infinity, then the result is the 
 <code>double</code> value closest to <i>pi</i>/4.
  <li>If the first argument is positive infinity and the second argument
  is negative infinity, then the result is the <code>double</code>
  value closest to 3*<i>pi</i>/4.
  <li>If the first argument is negative infinity and the second argument
  is positive infinity, then the result is the <code>double</code> value
  closest to -<i>pi</i>/4.
  <li>If both arguments are negative infinity, then the result is the 
 <code>double</code> value closest to -3*<i>pi</i>/4.</ul>
  
 <p>The computed result must be within 2 ulps of the exact result.
  Results must be semi-monotonic.
 @param y the ordinate coordinate
 @param x the abscissa coordinate
 @return the <i>theta</i> component of the point
           (<i>r</i>,&nbsp;<i>theta</i>)
           in polar coordinates that corresponds to the point
           (<i>x</i>,&nbsp;<i>y</i>) in Cartesian coordinates.
 */
+ (jdouble)atan2WithDouble:(jdouble)y
                withDouble:(jdouble)x;

/*!
 @brief Returns the cube root of a <code>double</code> value.For
  positive finite <code>x</code>, <code>cbrt(-x) ==
  -cbrt(x)</code>
 ; that is, the cube root of a negative value is
  the negative of the cube root of that value's magnitude.
 Special cases: 
 <ul>
  
 <li>If the argument is NaN, then the result is NaN. 
 <li>If the argument is infinite, then the result is an infinity
  with the same sign as the argument. 
 <li>If the argument is zero, then the result is a zero with the
  same sign as the argument. 
 </ul>
  
 <p>The computed result must be within 1 ulp of the exact result.
 @param a a value.
 @return the cube root of <code>a</code>.
 @since 1.5
 */
+ (jdouble)cbrtWithDouble:(jdouble)a;

/*!
 @brief Returns the smallest (closest to negative infinity) 
 <code>double</code> value that is greater than or equal to the
  argument and is equal to a mathematical integer.Special cases: 
 <ul><li>If the argument value is already equal to a
  mathematical integer, then the result is the same as the
  argument.
 <li>If the argument is NaN or an infinity or
  positive zero or negative zero, then the result is the same as
  the argument.  <li>If the argument value is less than zero but
  greater than -1.0, then the result is negative zero.</ul> Note
  that the value of <code>Math.ceil(x)</code> is exactly the
  value of <code>-Math.floor(-x)</code>.
 @param a a value.
 @return the smallest (closest to negative infinity)
           floating-point value that is greater than or equal to
           the argument and is equal to a mathematical integer.
 */
+ (jdouble)ceilWithDouble:(jdouble)a;

/*!
 @brief Returns the first floating-point argument with the sign of the
  second floating-point argument.Note that unlike the <code>StrictMath.copySign</code>
  method, this method does not require NaN <code>sign</code>
  arguments to be treated as positive values; implementations are
  permitted to treat some NaN arguments as positive and other NaN
  arguments as negative to allow greater performance.
 @param magnitude the parameter providing the magnitude of the result
 @param sign the parameter providing the sign of the result
 @return a value with the magnitude of <code>magnitude</code>
  and the sign of <code>sign</code>.
 @since 1.6
 */
+ (jdouble)copySignWithDouble:(jdouble)magnitude
                   withDouble:(jdouble)sign OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns the first floating-point argument with the sign of the
  second floating-point argument.Note that unlike the <code>StrictMath.copySign</code>
  method, this method does not require NaN <code>sign</code>
  arguments to be treated as positive values; implementations are
  permitted to treat some NaN arguments as positive and other NaN
  arguments as negative to allow greater performance.
 @param magnitude the parameter providing the magnitude of the result
 @param sign the parameter providing the sign of the result
 @return a value with the magnitude of <code>magnitude</code>
  and the sign of <code>sign</code>.
 @since 1.6
 */
+ (jfloat)copySignWithFloat:(jfloat)magnitude
                  withFloat:(jfloat)sign OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns the trigonometric cosine of an angle.Special cases: 
 <ul><li>If the argument is NaN or an infinity, then the
  result is NaN.
 </ul>
  
 <p>The computed result must be within 1 ulp of the exact result.
  Results must be semi-monotonic.
 @param a an angle, in radians.
 @return the cosine of the argument.
 */
+ (jdouble)cosWithDouble:(jdouble)a;

/*!
 @brief Returns the hyperbolic cosine of a <code>double</code> value.
 The hyperbolic cosine of <i>x</i> is defined to be
  (<i>e<sup>x</sup>&nbsp;+&nbsp;e<sup>-x</sup></i>)/2
  where <i>e</i> is Euler's number.
  
 <p>Special cases: 
 <ul>
  
 <li>If the argument is NaN, then the result is NaN. 
 <li>If the argument is infinite, then the result is positive
  infinity. 
 <li>If the argument is zero, then the result is <code>1.0</code>.
  
 </ul>
  
 <p>The computed result must be within 2.5 ulps of the exact result.
 @param x The number whose hyperbolic cosine is to be returned.
 @return The hyperbolic cosine of <code>x</code>.
 @since 1.5
 */
+ (jdouble)coshWithDouble:(jdouble)x;

/*!
 @brief Returns the argument decremented by one, throwing an exception if the
  result overflows an <code>int</code>.
 @param a the value to decrement
 @return the result
 @throw ArithmeticExceptionif the result overflows an int
 @since 1.8
 */
+ (jint)decrementExactWithInt:(jint)a;

/*!
 @brief Returns the argument decremented by one, throwing an exception if the
  result overflows a <code>long</code>.
 @param a the value to decrement
 @return the result
 @throw ArithmeticExceptionif the result overflows a long
 @since 1.8
 */
+ (jlong)decrementExactWithLong:(jlong)a;

/*!
 @brief Returns Euler's number <i>e</i> raised to the power of a 
 <code>double</code> value.Special cases: 
 <ul><li>If the argument is NaN, the result is NaN.
 <li>If the argument is positive infinity, then the result is
  positive infinity. 
 <li>If the argument is negative infinity, then the result is
  positive zero.</ul>
  
 <p>The computed result must be within 1 ulp of the exact result.
  Results must be semi-monotonic.
 @param a the exponent to raise  <i> e </i>  to.
 @return the value <i>e</i><sup><code>a</code></sup>,
           where <i>e</i> is the base of the natural logarithms.
 */
+ (jdouble)expWithDouble:(jdouble)a;

/*!
 @brief Returns <i>e</i><sup>x</sup>&nbsp;-1.Note that for values of 
 <i>x</i> near 0, the exact sum of 
 <code>expm1(x)</code>&nbsp;+&nbsp;1 is much closer to the true
  result of <i>e</i><sup>x</sup> than <code>exp(x)</code>.
 <p>Special cases: 
 <ul>
  <li>If the argument is NaN, the result is NaN. 
 <li>If the argument is positive infinity, then the result is
  positive infinity. 
 <li>If the argument is negative infinity, then the result is
  -1.0. 
 <li>If the argument is zero, then the result is a zero with the
  same sign as the argument. 
 </ul>
  
 <p>The computed result must be within 1 ulp of the exact result.
  Results must be semi-monotonic.  The result of 
 <code>expm1</code> for any finite input must be greater than or
  equal to <code>-1.0</code>.  Note that once the exact result of 
 <i>e</i><sup><code>x</code></sup>&nbsp;-&nbsp;1 is within 1/2
  ulp of the limit value -1, <code>-1.0</code> should be
  returned.
 @param x the exponent to raise  <i> e </i>  to in the computation of
                 <i> e </i> <sup><code>x</code> </sup> &nbsp; -1.
 @return the value <i>e</i><sup><code>x</code></sup>&nbsp;-&nbsp;1.
 @since 1.5
 */
+ (jdouble)expm1WithDouble:(jdouble)x;

/*!
 @brief Returns the largest (closest to positive infinity) 
 <code>double</code> value that is less than or equal to the
  argument and is equal to a mathematical integer.Special cases: 
 <ul><li>If the argument value is already equal to a
  mathematical integer, then the result is the same as the
  argument.
 <li>If the argument is NaN or an infinity or
  positive zero or negative zero, then the result is the same as
  the argument.</ul>
 @param a a value.
 @return the largest (closest to positive infinity)
           floating-point value that less than or equal to the argument
           and is equal to a mathematical integer.
 */
+ (jdouble)floorWithDouble:(jdouble)a;

/*!
 @brief Returns the largest (closest to positive infinity) 
 <code>int</code> value that is less than or equal to the algebraic quotient.
 There is one special case, if the dividend is the 
 Integer.MIN_VALUE and the divisor is <code>-1</code>,
  then integer overflow occurs and
  the result is equal to the <code>Integer.MIN_VALUE</code>.
  <p>
  Normal integer division operates under the round to zero rounding mode
  (truncation).  This operation instead acts under the round toward
  negative infinity (floor) rounding mode.
  The floor rounding mode gives different results than truncation
  when the exact result is negative. 
 <ul>
    <li>If the signs of the arguments are the same, the results of
        <code>floorDiv</code> and the <code>/</code> operator are the same.  <br>
        For example, <code>floorDiv(4, 3) == 1</code> and <code>(4 / 3) == 1</code>.</li>
    <li>If the signs of the arguments are different,  the quotient is negative and
        <code>floorDiv</code> returns the integer less than or equal to the quotient
        and the <code>/</code> operator returns the integer closest to zero.<br>
        For example, <code>floorDiv(-4, 3) == -2</code>,
        whereas <code>(-4 / 3) == -1</code>.
    </li>
  </ul>
  <p>
 @param x the dividend
 @param y the divisor
 @return the largest (closest to positive infinity) 
 <code>int</code> value that is less than or equal to the algebraic quotient.
 @throw ArithmeticExceptionif the divisor <code>y</code> is zero
 - seealso: #floorMod(int, int)
 - seealso: #floor(double)
 @since 1.8
 */
+ (jint)floorDivWithInt:(jint)x
                withInt:(jint)y;

/*!
 @brief Returns the largest (closest to positive infinity) 
 <code>long</code> value that is less than or equal to the algebraic quotient.
 There is one special case, if the dividend is the 
 Long.MIN_VALUE and the divisor is <code>-1</code>,
  then integer overflow occurs and
  the result is equal to the <code>Long.MIN_VALUE</code>.
  <p>
  Normal integer division operates under the round to zero rounding mode
  (truncation).  This operation instead acts under the round toward
  negative infinity (floor) rounding mode.
  The floor rounding mode gives different results than truncation
  when the exact result is negative. 
 <p>
  For examples, see <code>floorDiv(int, int)</code>.
 @param x the dividend
 @param y the divisor
 @return the largest (closest to positive infinity) 
 <code>long</code> value that is less than or equal to the algebraic quotient.
 @throw ArithmeticExceptionif the divisor <code>y</code> is zero
 - seealso: #floorMod(long, long)
 - seealso: #floor(double)
 @since 1.8
 */
+ (jlong)floorDivWithLong:(jlong)x
                 withLong:(jlong)y;

/*!
 @brief Returns the floor modulus of the <code>int</code> arguments.
 <p>
  The floor modulus is <code>x - (floorDiv(x, y) * y)</code>,
  has the same sign as the divisor <code>y</code>, and
  is in the range of <code>-abs(y) < r < +abs(y)</code>.
  
 <p>
  The relationship between <code>floorDiv</code> and <code>floorMod</code> is such that: 
 <ul>
    <li><code>floorDiv(x, y) * y + floorMod(x, y) == x</code>
  </ul>
  <p>
  The difference in values between <code>floorMod</code> and
  the <code>%</code> operator is due to the difference between 
 <code>floorDiv</code> that returns the integer less than or equal to the quotient
  and the <code>/</code> operator that returns the integer closest to zero. 
 <p>
  Examples: 
 <ul>
    <li>If the signs of the arguments are the same, the results
        of <code>floorMod</code> and the <code>%</code> operator are the same.  <br>
        <ul>
        <li><code>floorMod(4, 3) == 1</code>; &nbsp; and <code>(4 % 3) == 1</code></li>
        </ul>
    <li>If the signs of the arguments are different, the results differ from the <code>%</code> operator.<br>
       <ul>
       <li><code>floorMod(+4, -3) == -2</code>; &nbsp; and <code>(+4 % -3) == +1</code> </li>
       <li><code>floorMod(-4, +3) == +2</code>; &nbsp; and <code>(-4 % +3) == -1</code> </li>
       <li><code>floorMod(-4, -3) == -1</code>; &nbsp; and <code>(-4 % -3) == -1</code> </li>
       </ul>
    </li>
  </ul>
  <p>
  If the signs of arguments are unknown and a positive modulus
  is needed it can be computed as <code>(floorMod(x, y) + abs(y)) % abs(y)</code>.
 @param x the dividend
 @param y the divisor
 @return the floor modulus <code>x - (floorDiv(x, y) * y)</code>
 @throw ArithmeticExceptionif the divisor <code>y</code> is zero
 - seealso: #floorDiv(int, int)
 @since 1.8
 */
+ (jint)floorModWithInt:(jint)x
                withInt:(jint)y;

/*!
 @brief Returns the floor modulus of the <code>long</code> arguments.
 <p>
  The floor modulus is <code>x - (floorDiv(x, y) * y)</code>,
  has the same sign as the divisor <code>y</code>, and
  is in the range of <code>-abs(y) < r < +abs(y)</code>.
  
 <p>
  The relationship between <code>floorDiv</code> and <code>floorMod</code> is such that: 
 <ul>
    <li><code>floorDiv(x, y) * y + floorMod(x, y) == x</code>
  </ul>
  <p>
  For examples, see <code>floorMod(int, int)</code>.
 @param x the dividend
 @param y the divisor
 @return the floor modulus <code>x - (floorDiv(x, y) * y)</code>
 @throw ArithmeticExceptionif the divisor <code>y</code> is zero
 - seealso: #floorDiv(long, long)
 @since 1.8
 */
+ (jlong)floorModWithLong:(jlong)x
                 withLong:(jlong)y;

/*!
 @brief Returns the unbiased exponent used in the representation of a 
 <code>double</code>.Special cases: 
 <ul>
  <li>If the argument is NaN or infinite, then the result is 
 <code>Double.MAX_EXPONENT</code> + 1.
 <li>If the argument is zero or subnormal, then the result is 
 <code>Double.MIN_EXPONENT</code> -1. 
 </ul>
 @param d a <code>double</code>  value
 @return the unbiased exponent of the argument
 @since 1.6
 */
+ (jint)getExponentWithDouble:(jdouble)d;

/*!
 @brief Returns the unbiased exponent used in the representation of a 
 <code>float</code>.Special cases: 
 <ul>
  <li>If the argument is NaN or infinite, then the result is 
 <code>Float.MAX_EXPONENT</code> + 1.
 <li>If the argument is zero or subnormal, then the result is 
 <code>Float.MIN_EXPONENT</code> -1. 
 </ul>
 @param f a <code>float</code>  value
 @return the unbiased exponent of the argument
 @since 1.6
 */
+ (jint)getExponentWithFloat:(jfloat)f;

/*!
 @brief Returns sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)
  without intermediate overflow or underflow.
 <p>Special cases: 
 <ul>
  
 <li> If either argument is infinite, then the result
  is positive infinity. 
 <li> If either argument is NaN and neither argument is infinite,
  then the result is NaN. 
 </ul>
  
 <p>The computed result must be within 1 ulp of the exact
  result.  If one parameter is held constant, the results must be
  semi-monotonic in the other parameter.
 @param x a value
 @param y a value
 @return sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)
  without intermediate overflow or underflow
 @since 1.5
 */
+ (jdouble)hypotWithDouble:(jdouble)x
                withDouble:(jdouble)y;

/*!
 @brief Computes the remainder operation on two arguments as prescribed
  by the IEEE 754 standard.
 The remainder value is mathematically equal to 
 <code>f1&nbsp;-&nbsp;f2</code>&nbsp;&times;&nbsp;<i>n</i>,
  where <i>n</i> is the mathematical integer closest to the exact
  mathematical value of the quotient <code>f1/f2</code>, and if two
  mathematical integers are equally close to <code>f1/f2</code>,
  then <i>n</i> is the integer that is even. If the remainder is
  zero, its sign is the same as the sign of the first argument.
  Special cases: 
 <ul><li>If either argument is NaN, or the first argument is infinite,
  or the second argument is positive zero or negative zero, then the
  result is NaN. 
 <li>If the first argument is finite and the second argument is
  infinite, then the result is the same as the first argument.</ul>
 @param f1 the dividend.
 @param f2 the divisor.
 @return the remainder when <code>f1</code> is divided by
           <code>f2</code>.
 */
+ (jdouble)IEEEremainderWithDouble:(jdouble)f1
                        withDouble:(jdouble)f2;

/*!
 @brief Returns the argument incremented by one, throwing an exception if the
  result overflows an <code>int</code>.
 @param a the value to increment
 @return the result
 @throw ArithmeticExceptionif the result overflows an int
 @since 1.8
 */
+ (jint)incrementExactWithInt:(jint)a;

/*!
 @brief Returns the argument incremented by one, throwing an exception if the
  result overflows a <code>long</code>.
 @param a the value to increment
 @return the result
 @throw ArithmeticExceptionif the result overflows a long
 @since 1.8
 */
+ (jlong)incrementExactWithLong:(jlong)a;

/*!
 @brief Returns the natural logarithm (base <i>e</i>) of a <code>double</code>
  value.Special cases: 
 <ul><li>If the argument is NaN or less than zero, then the result
  is NaN.
 <li>If the argument is positive infinity, then the result is
  positive infinity. 
 <li>If the argument is positive zero or negative zero, then the
  result is negative infinity.</ul>
  
 <p>The computed result must be within 1 ulp of the exact result.
  Results must be semi-monotonic.
 @param a a value
 @return the value ln&nbsp;<code>a</code>, the natural logarithm of
           <code>a</code>.
 */
+ (jdouble)logWithDouble:(jdouble)a;

/*!
 @brief Returns the base 10 logarithm of a <code>double</code> value.
 Special cases: 
 <ul><li>If the argument is NaN or less than zero, then the result
  is NaN. 
 <li>If the argument is positive infinity, then the result is
  positive infinity. 
 <li>If the argument is positive zero or negative zero, then the
  result is negative infinity. 
 <li> If the argument is equal to 10<sup><i>n</i></sup> for
  integer <i>n</i>, then the result is <i>n</i>.
  </ul>
  
 <p>The computed result must be within 1 ulp of the exact result.
  Results must be semi-monotonic.
 @param a a value
 @return the base 10 logarithm of  <code>a</code>.
 @since 1.5
 */
+ (jdouble)log10WithDouble:(jdouble)a;

/*!
 @brief Returns the natural logarithm of the sum of the argument and 1.
 Note that for small values <code>x</code>, the result of 
 <code>log1p(x)</code> is much closer to the true result of ln(1
  + <code>x</code>) than the floating-point evaluation of 
 <code>log(1.0+x)</code>.
  
 <p>Special cases: 
 <ul>
  
 <li>If the argument is NaN or less than -1, then the result is
  NaN. 
 <li>If the argument is positive infinity, then the result is
  positive infinity. 
 <li>If the argument is negative one, then the result is
  negative infinity. 
 <li>If the argument is zero, then the result is a zero with the
  same sign as the argument. 
 </ul>
  
 <p>The computed result must be within 1 ulp of the exact result.
  Results must be semi-monotonic.
 @param x a value
 @return the value ln(<code>x</code>&nbsp;+&nbsp;1), the natural
  log of <code>x</code>&nbsp;+&nbsp;1
 @since 1.5
 */
+ (jdouble)log1pWithDouble:(jdouble)x;

/*!
 @brief Returns the greater of two <code>double</code> values.That
  is, the result is the argument closer to positive infinity.
 If
  the arguments have the same value, the result is that same
  value. If either value is NaN, then the result is NaN.  Unlike
  the numerical comparison operators, this method considers
  negative zero to be strictly smaller than positive zero. If one
  argument is positive zero and the other negative zero, the
  result is positive zero.
 @param a an argument.
 @param b another argument.
 @return the larger of <code>a</code> and <code>b</code>.
 */
+ (jdouble)maxWithDouble:(jdouble)a
              withDouble:(jdouble)b;

/*!
 @brief Returns the greater of two <code>float</code> values.That is,
  the result is the argument closer to positive infinity.
 If the
  arguments have the same value, the result is that same
  value. If either value is NaN, then the result is NaN.  Unlike
  the numerical comparison operators, this method considers
  negative zero to be strictly smaller than positive zero. If one
  argument is positive zero and the other negative zero, the
  result is positive zero.
 @param a an argument.
 @param b another argument.
 @return the larger of <code>a</code> and <code>b</code>.
 */
+ (jfloat)maxWithFloat:(jfloat)a
             withFloat:(jfloat)b;

/*!
 @brief Returns the greater of two <code>int</code> values.That is, the
  result is the argument closer to the value of 
 <code>Integer.MAX_VALUE</code>.
 If the arguments have the same value,
  the result is that same value.
 @param a an argument.
 @param b another argument.
 @return the larger of <code>a</code> and <code>b</code>.
 */
+ (jint)maxWithInt:(jint)a
           withInt:(jint)b;

/*!
 @brief Returns the greater of two <code>long</code> values.That is, the
  result is the argument closer to the value of 
 <code>Long.MAX_VALUE</code>.
 If the arguments have the same value,
  the result is that same value.
 @param a an argument.
 @param b another argument.
 @return the larger of <code>a</code> and <code>b</code>.
 */
+ (jlong)maxWithLong:(jlong)a
            withLong:(jlong)b;

/*!
 @brief Returns the smaller of two <code>double</code> values.That
  is, the result is the value closer to negative infinity.
 If the
  arguments have the same value, the result is that same
  value. If either value is NaN, then the result is NaN.  Unlike
  the numerical comparison operators, this method considers
  negative zero to be strictly smaller than positive zero. If one
  argument is positive zero and the other is negative zero, the
  result is negative zero.
 @param a an argument.
 @param b another argument.
 @return the smaller of <code>a</code> and <code>b</code>.
 */
+ (jdouble)minWithDouble:(jdouble)a
              withDouble:(jdouble)b;

/*!
 @brief Returns the smaller of two <code>float</code> values.That is,
  the result is the value closer to negative infinity.
 If the
  arguments have the same value, the result is that same
  value. If either value is NaN, then the result is NaN.  Unlike
  the numerical comparison operators, this method considers
  negative zero to be strictly smaller than positive zero.  If
  one argument is positive zero and the other is negative zero,
  the result is negative zero.
 @param a an argument.
 @param b another argument.
 @return the smaller of <code>a</code> and <code>b</code>.
 */
+ (jfloat)minWithFloat:(jfloat)a
             withFloat:(jfloat)b;

/*!
 @brief Returns the smaller of two <code>int</code> values.That is,
  the result the argument closer to the value of 
 <code>Integer.MIN_VALUE</code>.
 If the arguments have the same
  value, the result is that same value.
 @param a an argument.
 @param b another argument.
 @return the smaller of <code>a</code> and <code>b</code>.
 */
+ (jint)minWithInt:(jint)a
           withInt:(jint)b;

/*!
 @brief Returns the smaller of two <code>long</code> values.That is,
  the result is the argument closer to the value of 
 <code>Long.MIN_VALUE</code>.
 If the arguments have the same
  value, the result is that same value.
 @param a an argument.
 @param b another argument.
 @return the smaller of <code>a</code> and <code>b</code>.
 */
+ (jlong)minWithLong:(jlong)a
            withLong:(jlong)b;

/*!
 @brief Returns the product of the arguments,
  throwing an exception if the result overflows an <code>int</code>.
 @param x the first value
 @param y the second value
 @return the result
 @throw ArithmeticExceptionif the result overflows an int
 @since 1.8
 */
+ (jint)multiplyExactWithInt:(jint)x
                     withInt:(jint)y;

/*!
 @brief Returns the product of the arguments,
  throwing an exception if the result overflows a <code>long</code>.
 @param x the first value
 @param y the second value
 @return the result
 @throw ArithmeticExceptionif the result overflows a long
 @since 1.8
 */
+ (jlong)multiplyExactWithLong:(jlong)x
                      withLong:(jlong)y;

/*!
 @brief Returns the negation of the argument, throwing an exception if the
  result overflows an <code>int</code>.
 @param a the value to negate
 @return the result
 @throw ArithmeticExceptionif the result overflows an int
 @since 1.8
 */
+ (jint)negateExactWithInt:(jint)a;

/*!
 @brief Returns the negation of the argument, throwing an exception if the
  result overflows a <code>long</code>.
 @param a the value to negate
 @return the result
 @throw ArithmeticExceptionif the result overflows a long
 @since 1.8
 */
+ (jlong)negateExactWithLong:(jlong)a;

/*!
 @brief Returns the floating-point number adjacent to the first
  argument in the direction of the second argument.If both
  arguments compare as equal the second argument is returned.
 <p>
  Special cases: 
 <ul>
  <li> If either argument is a NaN, then NaN is returned. 
 <li> If both arguments are signed zeros, <code>direction</code>
  is returned unchanged (as implied by the requirement of
  returning the second argument if the arguments compare as
  equal). 
 <li> If <code>start</code> is 
 &plusmn;<code>Double.MIN_VALUE</code> and <code>direction</code>
  has a value such that the result should have a smaller
  magnitude, then a zero with the same sign as <code>start</code>
  is returned. 
 <li> If <code>start</code> is infinite and 
 <code>direction</code> has a value such that the result should
  have a smaller magnitude, <code>Double.MAX_VALUE</code> with the
  same sign as <code>start</code> is returned. 
 <li> If <code>start</code> is equal to &plusmn;
  <code>Double.MAX_VALUE</code> and <code>direction</code> has a
  value such that the result should have a larger magnitude, an
  infinity with same sign as <code>start</code> is returned. 
 </ul>
 @param start starting floating-point value
 @param direction value indicating which of  
 <code>start</code> 's neighbors or <code>start</code>  should  be returned
 @return The floating-point number adjacent to <code>start</code> in the
  direction of <code>direction</code>.
 @since 1.6
 */
+ (jdouble)nextAfterWithDouble:(jdouble)start
                    withDouble:(jdouble)direction;

/*!
 @brief Returns the floating-point number adjacent to the first
  argument in the direction of the second argument.If both
  arguments compare as equal a value equivalent to the second argument
  is returned.
 <p>
  Special cases: 
 <ul>
  <li> If either argument is a NaN, then NaN is returned. 
 <li> If both arguments are signed zeros, a value equivalent
  to <code>direction</code> is returned. 
 <li> If <code>start</code> is 
 &plusmn;<code>Float.MIN_VALUE</code> and <code>direction</code>
  has a value such that the result should have a smaller
  magnitude, then a zero with the same sign as <code>start</code>
  is returned. 
 <li> If <code>start</code> is infinite and 
 <code>direction</code> has a value such that the result should
  have a smaller magnitude, <code>Float.MAX_VALUE</code> with the
  same sign as <code>start</code> is returned. 
 <li> If <code>start</code> is equal to &plusmn;
  <code>Float.MAX_VALUE</code> and <code>direction</code> has a
  value such that the result should have a larger magnitude, an
  infinity with same sign as <code>start</code> is returned. 
 </ul>
 @param start starting floating-point value
 @param direction value indicating which of  
 <code>start</code> 's neighbors or <code>start</code>  should  be returned
 @return The floating-point number adjacent to <code>start</code> in the
  direction of <code>direction</code>.
 @since 1.6
 */
+ (jfloat)nextAfterWithFloat:(jfloat)start
                  withDouble:(jdouble)direction;

/*!
 @brief Returns the floating-point value adjacent to <code>d</code> in
  the direction of negative infinity.This method is
  semantically equivalent to <code>nextAfter(d,
  Double.NEGATIVE_INFINITY)</code>
 ; however, a 
 <code>nextDown</code> implementation may run faster than its
  equivalent <code>nextAfter</code> call.
 <p>Special Cases: 
 <ul>
  <li> If the argument is NaN, the result is NaN. 
 <li> If the argument is negative infinity, the result is
  negative infinity. 
 <li> If the argument is zero, the result is 
 <code>-Double.MIN_VALUE</code>
  
 </ul>
 @param d starting floating-point value
 @return The adjacent floating-point value closer to negative
  infinity.
 @since 1.8
 */
+ (jdouble)nextDownWithDouble:(jdouble)d;

/*!
 @brief Returns the floating-point value adjacent to <code>f</code> in
  the direction of negative infinity.This method is
  semantically equivalent to <code>nextAfter(f,
  Float.NEGATIVE_INFINITY)</code>
 ; however, a 
 <code>nextDown</code> implementation may run faster than its
  equivalent <code>nextAfter</code> call.
 <p>Special Cases: 
 <ul>
  <li> If the argument is NaN, the result is NaN. 
 <li> If the argument is negative infinity, the result is
  negative infinity. 
 <li> If the argument is zero, the result is 
 <code>-Float.MIN_VALUE</code>
  
 </ul>
 @param f starting floating-point value
 @return The adjacent floating-point value closer to negative
  infinity.
 @since 1.8
 */
+ (jfloat)nextDownWithFloat:(jfloat)f;

/*!
 @brief Returns the floating-point value adjacent to <code>d</code> in
  the direction of positive infinity.This method is
  semantically equivalent to <code>nextAfter(d,
  Double.POSITIVE_INFINITY)</code>
 ; however, a <code>nextUp</code>
  implementation may run faster than its equivalent 
 <code>nextAfter</code> call.
 <p>Special Cases: 
 <ul>
  <li> If the argument is NaN, the result is NaN. 
 <li> If the argument is positive infinity, the result is
  positive infinity. 
 <li> If the argument is zero, the result is 
 <code>Double.MIN_VALUE</code>
  
 </ul>
 @param d starting floating-point value
 @return The adjacent floating-point value closer to positive
  infinity.
 @since 1.6
 */
+ (jdouble)nextUpWithDouble:(jdouble)d;

/*!
 @brief Returns the floating-point value adjacent to <code>f</code> in
  the direction of positive infinity.This method is
  semantically equivalent to <code>nextAfter(f,
  Float.POSITIVE_INFINITY)</code>
 ; however, a <code>nextUp</code>
  implementation may run faster than its equivalent 
 <code>nextAfter</code> call.
 <p>Special Cases: 
 <ul>
  <li> If the argument is NaN, the result is NaN. 
 <li> If the argument is positive infinity, the result is
  positive infinity. 
 <li> If the argument is zero, the result is 
 <code>Float.MIN_VALUE</code>
  
 </ul>
 @param f starting floating-point value
 @return The adjacent floating-point value closer to positive
  infinity.
 @since 1.6
 */
+ (jfloat)nextUpWithFloat:(jfloat)f;

/*!
 @brief Returns the value of the first argument raised to the power of the
  second argument.Special cases: 
 <ul><li>If the second argument is positive or negative zero, then the
  result is 1.0.
 <li>If the second argument is 1.0, then the result is the same as the
  first argument. 
 <li>If the second argument is NaN, then the result is NaN. 
 <li>If the first argument is NaN and the second argument is nonzero,
  then the result is NaN. 
 <li>If
  <ul>
  <li>the absolute value of the first argument is greater than 1
  and the second argument is positive infinity, or 
 <li>the absolute value of the first argument is less than 1 and
  the second argument is negative infinity, 
 </ul>
  then the result is positive infinity. 
 <li>If
  <ul>
  <li>the absolute value of the first argument is greater than 1 and
  the second argument is negative infinity, or 
 <li>the absolute value of the
  first argument is less than 1 and the second argument is positive
  infinity, 
 </ul>
  then the result is positive zero. 
 <li>If the absolute value of the first argument equals 1 and the
  second argument is infinite, then the result is NaN. 
 <li>If
  <ul>
  <li>the first argument is positive zero and the second argument
  is greater than zero, or 
 <li>the first argument is positive infinity and the second
  argument is less than zero, 
 </ul>
  then the result is positive zero. 
 <li>If
  <ul>
  <li>the first argument is positive zero and the second argument
  is less than zero, or 
 <li>the first argument is positive infinity and the second
  argument is greater than zero, 
 </ul>
  then the result is positive infinity. 
 <li>If
  <ul>
  <li>the first argument is negative zero and the second argument
  is greater than zero but not a finite odd integer, or 
 <li>the first argument is negative infinity and the second
  argument is less than zero but not a finite odd integer, 
 </ul>
  then the result is positive zero. 
 <li>If
  <ul>
  <li>the first argument is negative zero and the second argument
  is a positive finite odd integer, or 
 <li>the first argument is negative infinity and the second
  argument is a negative finite odd integer, 
 </ul>
  then the result is negative zero. 
 <li>If
  <ul>
  <li>the first argument is negative zero and the second argument
  is less than zero but not a finite odd integer, or 
 <li>the first argument is negative infinity and the second
  argument is greater than zero but not a finite odd integer, 
 </ul>
  then the result is positive infinity. 
 <li>If
  <ul>
  <li>the first argument is negative zero and the second argument
  is a negative finite odd integer, or 
 <li>the first argument is negative infinity and the second
  argument is a positive finite odd integer, 
 </ul>
  then the result is negative infinity. 
 <li>If the first argument is finite and less than zero 
 <ul>
  <li> if the second argument is a finite even integer, the
  result is equal to the result of raising the absolute value of
  the first argument to the power of the second argument 
 <li>if the second argument is a finite odd integer, the result
  is equal to the negative of the result of raising the absolute
  value of the first argument to the power of the second argument 
 <li>if the second argument is finite and not an integer, then
  the result is NaN. 
 </ul>
  
 <li>If both arguments are integers, then the result is exactly equal
  to the mathematical result of raising the first argument to the power
  of the second argument if that result can in fact be represented
  exactly as a <code>double</code> value.</ul>
  
 <p>(In the foregoing descriptions, a floating-point value is
  considered to be an integer if and only if it is finite and a
  fixed point of the method <code>ceil</code> or,
  equivalently, a fixed point of the method <code>floor</code>
 . A value is a fixed point of a one-argument
  method if and only if the result of applying the method to the
  value is equal to the value.) 
 <p>The computed result must be within 1 ulp of the exact result.
  Results must be semi-monotonic.
 @param a the base.
 @param b the exponent.
 @return the value <code>a</code><sup><code>b</code></sup>.
 */
+ (jdouble)powWithDouble:(jdouble)a
              withDouble:(jdouble)b;

/*!
 @brief Returns a <code>double</code> value with a positive sign, greater
  than or equal to <code>0.0</code> and less than <code>1.0</code>.
 Returned values are chosen pseudorandomly with (approximately)
  uniform distribution from that range. 
 <p>When this method is first called, it creates a single new
  pseudorandom-number generator, exactly as if by the expression 
 <blockquote><code>new java.util.Random()</code></blockquote>
  This new pseudorandom-number generator is used thereafter for
  all calls to this method and is used nowhere else. 
 <p>This method is properly synchronized to allow correct use by
  more than one thread. However, if many threads need to generate
  pseudorandom numbers at a great rate, it may reduce contention
  for each thread to have its own pseudorandom-number generator.
 @return a pseudorandom <code>double</code> greater than or equal
  to <code>0.0</code> and less than <code>1.0</code>.
 - seealso: Random#nextDouble()
 */
+ (jdouble)random;

/*!
 */
+ (jint)randomIntInternal;

/*!
 */
+ (jlong)randomLongInternal;

/*!
 @brief Returns the <code>double</code> value that is closest in value
  to the argument and is equal to a mathematical integer.If two 
 <code>double</code> values that are mathematical integers are
  equally close, the result is the integer value that is
  even.
 Special cases: 
 <ul><li>If the argument value is already equal to a mathematical
  integer, then the result is the same as the argument. 
 <li>If the argument is NaN or an infinity or positive zero or negative
  zero, then the result is the same as the argument.</ul>
 @param a a <code>double</code>  value.
 @return the closest floating-point value to <code>a</code> that is
           equal to a mathematical integer.
 */
+ (jdouble)rintWithDouble:(jdouble)a;

/*!
 @brief Returns the closest <code>long</code> to the argument, with ties
  rounding to positive infinity.
 <p>Special cases: 
 <ul><li>If the argument is NaN, the result is 0. 
 <li>If the argument is negative infinity or any value less than or
  equal to the value of <code>Long.MIN_VALUE</code>, the result is
  equal to the value of <code>Long.MIN_VALUE</code>.
  <li>If the argument is positive infinity or any value greater than or
  equal to the value of <code>Long.MAX_VALUE</code>, the result is
  equal to the value of <code>Long.MAX_VALUE</code>.</ul>
 @param a a floating-point value to be rounded to a           
 <code>long</code> .
 @return the value of the argument rounded to the nearest
           <code>long</code> value.
 - seealso: java.lang.Long#MAX_VALUE
 - seealso: java.lang.Long#MIN_VALUE
 */
+ (jlong)roundWithDouble:(jdouble)a;

/*!
 @brief Returns the closest <code>int</code> to the argument, with ties
  rounding to positive infinity.
 <p>
  Special cases: 
 <ul><li>If the argument is NaN, the result is 0. 
 <li>If the argument is negative infinity or any value less than or
  equal to the value of <code>Integer.MIN_VALUE</code>, the result is
  equal to the value of <code>Integer.MIN_VALUE</code>.
  <li>If the argument is positive infinity or any value greater than or
  equal to the value of <code>Integer.MAX_VALUE</code>, the result is
  equal to the value of <code>Integer.MAX_VALUE</code>.</ul>
 @param a a floating-point value to be rounded to an integer.
 @return the value of the argument rounded to the nearest
           <code>int</code> value.
 - seealso: java.lang.Integer#MAX_VALUE
 - seealso: java.lang.Integer#MIN_VALUE
 */
+ (jint)roundWithFloat:(jfloat)a;

/*!
 @brief Returns <code>d</code> &times;
  2<sup><code>scaleFactor</code></sup> rounded as if performed
  by a single correctly rounded floating-point multiply to a
  member of the double value set.See the Java
  Language Specification for a discussion of floating-point
  value sets.
 If the exponent of the result is between <code>Double.MIN_EXPONENT</code>
  and <code>Double.MAX_EXPONENT</code>, the
  answer is calculated exactly.  If the exponent of the result
  would be larger than <code>Double.MAX_EXPONENT</code>, an
  infinity is returned.  Note that if the result is subnormal,
  precision may be lost; that is, when <code>scalb(x, n)</code>
  is subnormal, <code>scalb(scalb(x, n), -n)</code> may not equal 
 <i>x</i>.  When the result is non-NaN, the result has the same
  sign as <code>d</code>.
  
 <p>Special cases: 
 <ul>
  <li> If the first argument is NaN, NaN is returned. 
 <li> If the first argument is infinite, then an infinity of the
  same sign is returned. 
 <li> If the first argument is zero, then a zero of the same
  sign is returned. 
 </ul>
 @param d number to be scaled by a power of two.
 @param scaleFactor power of 2 used to scale <code>d</code>
 @return <code>d</code> &times; 2<sup><code>scaleFactor</code></sup>
 @since 1.6
 */
+ (jdouble)scalbWithDouble:(jdouble)d
                   withInt:(jint)scaleFactor;

/*!
 @brief Returns <code>f</code> &times;
  2<sup><code>scaleFactor</code></sup> rounded as if performed
  by a single correctly rounded floating-point multiply to a
  member of the float value set.See the Java
  Language Specification for a discussion of floating-point
  value sets.
 If the exponent of the result is between <code>Float.MIN_EXPONENT</code>
  and <code>Float.MAX_EXPONENT</code>, the
  answer is calculated exactly.  If the exponent of the result
  would be larger than <code>Float.MAX_EXPONENT</code>, an
  infinity is returned.  Note that if the result is subnormal,
  precision may be lost; that is, when <code>scalb(x, n)</code>
  is subnormal, <code>scalb(scalb(x, n), -n)</code> may not equal 
 <i>x</i>.  When the result is non-NaN, the result has the same
  sign as <code>f</code>.
  
 <p>Special cases: 
 <ul>
  <li> If the first argument is NaN, NaN is returned. 
 <li> If the first argument is infinite, then an infinity of the
  same sign is returned. 
 <li> If the first argument is zero, then a zero of the same
  sign is returned. 
 </ul>
 @param f number to be scaled by a power of two.
 @param scaleFactor power of 2 used to scale <code>f</code>
 @return <code>f</code> &times; 2<sup><code>scaleFactor</code></sup>
 @since 1.6
 */
+ (jfloat)scalbWithFloat:(jfloat)f
                 withInt:(jint)scaleFactor;

/*!
 @brief Set the seed for the pseudo random generator used by <code>random()</code>
  and <code>randomIntInternal()</code>.
 */
+ (void)setRandomSeedInternalWithLong:(jlong)seed;

/*!
 @brief Returns the signum function of the argument; zero if the argument
  is zero, 1.0 if the argument is greater than zero, -1.0 if the
  argument is less than zero.
 <p>Special Cases: 
 <ul>
  <li> If the argument is NaN, then the result is NaN. 
 <li> If the argument is positive zero or negative zero, then the
       result is the same as the argument. 
 </ul>
 @param d the floating-point value whose signum is to be returned
 @return the signum function of the argument
 @author Joseph D. Darcy
 @since 1.5
 */
+ (jdouble)signumWithDouble:(jdouble)d;

/*!
 @brief Returns the signum function of the argument; zero if the argument
  is zero, 1.0f if the argument is greater than zero, -1.0f if the
  argument is less than zero.
 <p>Special Cases: 
 <ul>
  <li> If the argument is NaN, then the result is NaN. 
 <li> If the argument is positive zero or negative zero, then the
       result is the same as the argument. 
 </ul>
 @param f the floating-point value whose signum is to be returned
 @return the signum function of the argument
 @author Joseph D. Darcy
 @since 1.5
 */
+ (jfloat)signumWithFloat:(jfloat)f;

/*!
 @brief Returns the trigonometric sine of an angle.Special cases: 
 <ul><li>If the argument is NaN or an infinity, then the
  result is NaN.
 <li>If the argument is zero, then the result is a zero with the
  same sign as the argument.</ul>
  
 <p>The computed result must be within 1 ulp of the exact result.
  Results must be semi-monotonic.
 @param a an angle, in radians.
 @return the sine of the argument.
 */
+ (jdouble)sinWithDouble:(jdouble)a;

/*!
 @brief Returns the hyperbolic sine of a <code>double</code> value.
 The hyperbolic sine of <i>x</i> is defined to be
  (<i>e<sup>x</sup>&nbsp;-&nbsp;e<sup>-x</sup></i>)/2
  where <i>e</i> is Euler's number.
  
 <p>Special cases: 
 <ul>
  
 <li>If the argument is NaN, then the result is NaN. 
 <li>If the argument is infinite, then the result is an infinity
  with the same sign as the argument. 
 <li>If the argument is zero, then the result is a zero with the
  same sign as the argument. 
 </ul>
  
 <p>The computed result must be within 2.5 ulps of the exact result.
 @param x The number whose hyperbolic sine is to be returned.
 @return The hyperbolic sine of <code>x</code>.
 @since 1.5
 */
+ (jdouble)sinhWithDouble:(jdouble)x;

/*!
 @brief Returns the correctly rounded positive square root of a 
 <code>double</code> value.
 Special cases: 
 <ul><li>If the argument is NaN or less than zero, then the result
  is NaN. 
 <li>If the argument is positive infinity, then the result is positive
  infinity. 
 <li>If the argument is positive zero or negative zero, then the
  result is the same as the argument.</ul>
  Otherwise, the result is the <code>double</code> value closest to
  the true mathematical square root of the argument value.
 @param a a value.
 @return the positive square root of <code>a</code>.
           If the argument is NaN or less than zero, the result is NaN.
 */
+ (jdouble)sqrtWithDouble:(jdouble)a;

/*!
 @brief Returns the difference of the arguments,
  throwing an exception if the result overflows an <code>int</code>.
 @param x the first value
 @param y the second value to subtract from the first
 @return the result
 @throw ArithmeticExceptionif the result overflows an int
 @since 1.8
 */
+ (jint)subtractExactWithInt:(jint)x
                     withInt:(jint)y;

/*!
 @brief Returns the difference of the arguments,
  throwing an exception if the result overflows a <code>long</code>.
 @param x the first value
 @param y the second value to subtract from the first
 @return the result
 @throw ArithmeticExceptionif the result overflows a long
 @since 1.8
 */
+ (jlong)subtractExactWithLong:(jlong)x
                      withLong:(jlong)y;

/*!
 @brief Returns the trigonometric tangent of an angle.Special cases: 
 <ul><li>If the argument is NaN or an infinity, then the result
  is NaN.
 <li>If the argument is zero, then the result is a zero with the
  same sign as the argument.</ul>
  
 <p>The computed result must be within 1 ulp of the exact result.
  Results must be semi-monotonic.
 @param a an angle, in radians.
 @return the tangent of the argument.
 */
+ (jdouble)tanWithDouble:(jdouble)a;

/*!
 @brief Returns the hyperbolic tangent of a <code>double</code> value.
 The hyperbolic tangent of <i>x</i> is defined to be
  (<i>e<sup>x</sup>&nbsp;-&nbsp;e<sup>-x</sup></i>)/(<i>e<sup>x</sup>&nbsp;+&nbsp;e<sup>-x</sup></i>),
  in other words, sinh(<i>x</i>)
 /cosh(<i>x</i>).  Note
  that the absolute value of the exact tanh is always less than
  1. 
 <p>Special cases: 
 <ul>
  
 <li>If the argument is NaN, then the result is NaN. 
 <li>If the argument is zero, then the result is a zero with the
  same sign as the argument. 
 <li>If the argument is positive infinity, then the result is 
 <code>+1.0</code>.
  
 <li>If the argument is negative infinity, then the result is 
 <code>-1.0</code>.
  
 </ul>
  
 <p>The computed result must be within 2.5 ulps of the exact result.
  The result of <code>tanh</code> for any finite input must have
  an absolute value less than or equal to 1.  Note that once the
  exact result of tanh is within 1/2 of an ulp of the limit value of 
 &plusmn;1, correctly signed &plusmn;<code>1.0</code> should
  be returned.
 @param x The number whose hyperbolic tangent is to be returned.
 @return The hyperbolic tangent of <code>x</code>.
 @since 1.5
 */
+ (jdouble)tanhWithDouble:(jdouble)x;

/*!
 @brief Converts an angle measured in radians to an approximately
  equivalent angle measured in degrees.The conversion from
  radians to degrees is generally inexact; users should 
 <i>not</i> expect <code>cos(toRadians(90.0))</code> to exactly
  equal <code>0.0</code>.
 @param angrad an angle, in radians
 @return the measurement of the angle <code>angrad</code>
           in degrees.
 @since 1.2
 */
+ (jdouble)toDegreesWithDouble:(jdouble)angrad;

/*!
 @brief Returns the value of the <code>long</code> argument;
  throwing an exception if the value overflows an <code>int</code>.
 @param value the long value
 @return the argument as an int
 @throw ArithmeticExceptionif the <code>argument</code> overflows an int
 @since 1.8
 */
+ (jint)toIntExactWithLong:(jlong)value;

/*!
 @brief Converts an angle measured in degrees to an approximately
  equivalent angle measured in radians.The conversion from
  degrees to radians is generally inexact.
 @param angdeg an angle, in degrees
 @return the measurement of the angle <code>angdeg</code>
           in radians.
 @since 1.2
 */
+ (jdouble)toRadiansWithDouble:(jdouble)angdeg;

/*!
 @brief Returns the size of an ulp of the argument.An ulp, unit in
  the last place, of a <code>double</code> value is the positive
  distance between this floating-point value and the <code>double</code>
  value next larger in magnitude.
 Note that for non-NaN 
 <i>x</i>, <code>ulp(-<i>x</i>) == ulp(<i>x</i>)</code>.
  
 <p>Special Cases: 
 <ul>
  <li> If the argument is NaN, then the result is NaN. 
 <li> If the argument is positive or negative infinity, then the
  result is positive infinity. 
 <li> If the argument is positive or negative zero, then the result is 
 <code>Double.MIN_VALUE</code>.
  <li> If the argument is &plusmn;<code>Double.MAX_VALUE</code>, then
  the result is equal to 2<sup>971</sup>.
  </ul>
 @param d the floating-point value whose ulp is to be returned
 @return the size of an ulp of the argument
 @author Joseph D. Darcy
 @since 1.5
 */
+ (jdouble)ulpWithDouble:(jdouble)d;

/*!
 @brief Returns the size of an ulp of the argument.An ulp, unit in
  the last place, of a <code>float</code> value is the positive
  distance between this floating-point value and the <code>float</code>
  value next larger in magnitude.
 Note that for non-NaN 
 <i>x</i>, <code>ulp(-<i>x</i>) == ulp(<i>x</i>)</code>.
  
 <p>Special Cases: 
 <ul>
  <li> If the argument is NaN, then the result is NaN. 
 <li> If the argument is positive or negative infinity, then the
  result is positive infinity. 
 <li> If the argument is positive or negative zero, then the result is 
 <code>Float.MIN_VALUE</code>.
  <li> If the argument is &plusmn;<code>Float.MAX_VALUE</code>, then
  the result is equal to 2<sup>104</sup>.
  </ul>
 @param f the floating-point value whose ulp is to be returned
 @return the size of an ulp of the argument
 @author Joseph D. Darcy
 @since 1.5
 */
+ (jfloat)ulpWithFloat:(jfloat)f;

#pragma mark Package-Private

/*!
 @brief Returns a floating-point power of two in the normal range.
 */
+ (jdouble)powerOfTwoDWithInt:(jint)n;

/*!
 @brief Returns a floating-point power of two in the normal range.
 */
+ (jfloat)powerOfTwoFWithInt:(jint)n;

@end

J2OBJC_STATIC_INIT(JavaLangMath)

/*!
 @brief The <code>double</code> value that is closer than any other to 
 <i>e</i>, the base of the natural logarithms.
 */
inline jdouble JavaLangMath_get_E(void);
#define JavaLangMath_E 2.718281828459045
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangMath, E, jdouble)

/*!
 @brief The <code>double</code> value that is closer than any other to 
 <i>pi</i>, the ratio of the circumference of a circle to its
  diameter.
 */
inline jdouble JavaLangMath_get_PI(void);
#define JavaLangMath_PI 3.141592653589793
J2OBJC_STATIC_FIELD_CONSTANT(JavaLangMath, PI, jdouble)

inline jdouble JavaLangMath_get_twoToTheDoubleScaleUp(void);
inline jdouble JavaLangMath_set_twoToTheDoubleScaleUp(jdouble value);
inline jdouble *JavaLangMath_getRef_twoToTheDoubleScaleUp(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jdouble JavaLangMath_twoToTheDoubleScaleUp;
J2OBJC_STATIC_FIELD_PRIMITIVE(JavaLangMath, twoToTheDoubleScaleUp, jdouble)

inline jdouble JavaLangMath_get_twoToTheDoubleScaleDown(void);
inline jdouble JavaLangMath_set_twoToTheDoubleScaleDown(jdouble value);
inline jdouble *JavaLangMath_getRef_twoToTheDoubleScaleDown(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jdouble JavaLangMath_twoToTheDoubleScaleDown;
J2OBJC_STATIC_FIELD_PRIMITIVE(JavaLangMath, twoToTheDoubleScaleDown, jdouble)

FOUNDATION_EXPORT jdouble JavaLangMath_sinWithDouble_(jdouble a);

FOUNDATION_EXPORT jdouble JavaLangMath_cosWithDouble_(jdouble a);

FOUNDATION_EXPORT jdouble JavaLangMath_tanWithDouble_(jdouble a);

FOUNDATION_EXPORT jdouble JavaLangMath_asinWithDouble_(jdouble a);

FOUNDATION_EXPORT jdouble JavaLangMath_acosWithDouble_(jdouble a);

FOUNDATION_EXPORT jdouble JavaLangMath_atanWithDouble_(jdouble a);

FOUNDATION_EXPORT jdouble JavaLangMath_toRadiansWithDouble_(jdouble angdeg);

FOUNDATION_EXPORT jdouble JavaLangMath_toDegreesWithDouble_(jdouble angrad);

FOUNDATION_EXPORT jdouble JavaLangMath_expWithDouble_(jdouble a);

FOUNDATION_EXPORT jdouble JavaLangMath_logWithDouble_(jdouble a);

FOUNDATION_EXPORT jdouble JavaLangMath_log10WithDouble_(jdouble a);

FOUNDATION_EXPORT jdouble JavaLangMath_sqrtWithDouble_(jdouble a);

FOUNDATION_EXPORT jdouble JavaLangMath_cbrtWithDouble_(jdouble a);

FOUNDATION_EXPORT jdouble JavaLangMath_IEEEremainderWithDouble_withDouble_(jdouble f1, jdouble f2);

FOUNDATION_EXPORT jdouble JavaLangMath_ceilWithDouble_(jdouble a);

FOUNDATION_EXPORT jdouble JavaLangMath_floorWithDouble_(jdouble a);

FOUNDATION_EXPORT jdouble JavaLangMath_rintWithDouble_(jdouble a);

FOUNDATION_EXPORT jdouble JavaLangMath_atan2WithDouble_withDouble_(jdouble y, jdouble x);

FOUNDATION_EXPORT jdouble JavaLangMath_powWithDouble_withDouble_(jdouble a, jdouble b);

FOUNDATION_EXPORT jint JavaLangMath_roundWithFloat_(jfloat a);

FOUNDATION_EXPORT jlong JavaLangMath_roundWithDouble_(jdouble a);

FOUNDATION_EXPORT jdouble JavaLangMath_random(void);

FOUNDATION_EXPORT void JavaLangMath_setRandomSeedInternalWithLong_(jlong seed);

FOUNDATION_EXPORT jint JavaLangMath_randomIntInternal(void);

FOUNDATION_EXPORT jlong JavaLangMath_randomLongInternal(void);

FOUNDATION_EXPORT jint JavaLangMath_addExactWithInt_withInt_(jint x, jint y);

FOUNDATION_EXPORT jlong JavaLangMath_addExactWithLong_withLong_(jlong x, jlong y);

FOUNDATION_EXPORT jint JavaLangMath_subtractExactWithInt_withInt_(jint x, jint y);

FOUNDATION_EXPORT jlong JavaLangMath_subtractExactWithLong_withLong_(jlong x, jlong y);

FOUNDATION_EXPORT jint JavaLangMath_multiplyExactWithInt_withInt_(jint x, jint y);

FOUNDATION_EXPORT jlong JavaLangMath_multiplyExactWithLong_withLong_(jlong x, jlong y);

FOUNDATION_EXPORT jint JavaLangMath_incrementExactWithInt_(jint a);

FOUNDATION_EXPORT jlong JavaLangMath_incrementExactWithLong_(jlong a);

FOUNDATION_EXPORT jint JavaLangMath_decrementExactWithInt_(jint a);

FOUNDATION_EXPORT jlong JavaLangMath_decrementExactWithLong_(jlong a);

FOUNDATION_EXPORT jint JavaLangMath_negateExactWithInt_(jint a);

FOUNDATION_EXPORT jlong JavaLangMath_negateExactWithLong_(jlong a);

FOUNDATION_EXPORT jint JavaLangMath_toIntExactWithLong_(jlong value);

FOUNDATION_EXPORT jint JavaLangMath_floorDivWithInt_withInt_(jint x, jint y);

FOUNDATION_EXPORT jlong JavaLangMath_floorDivWithLong_withLong_(jlong x, jlong y);

FOUNDATION_EXPORT jint JavaLangMath_floorModWithInt_withInt_(jint x, jint y);

FOUNDATION_EXPORT jlong JavaLangMath_floorModWithLong_withLong_(jlong x, jlong y);

FOUNDATION_EXPORT jint JavaLangMath_absWithInt_(jint a);

FOUNDATION_EXPORT jlong JavaLangMath_absWithLong_(jlong a);

FOUNDATION_EXPORT jfloat JavaLangMath_absWithFloat_(jfloat a);

FOUNDATION_EXPORT jdouble JavaLangMath_absWithDouble_(jdouble a);

FOUNDATION_EXPORT jint JavaLangMath_maxWithInt_withInt_(jint a, jint b);

FOUNDATION_EXPORT jlong JavaLangMath_maxWithLong_withLong_(jlong a, jlong b);

FOUNDATION_EXPORT jfloat JavaLangMath_maxWithFloat_withFloat_(jfloat a, jfloat b);

FOUNDATION_EXPORT jdouble JavaLangMath_maxWithDouble_withDouble_(jdouble a, jdouble b);

FOUNDATION_EXPORT jint JavaLangMath_minWithInt_withInt_(jint a, jint b);

FOUNDATION_EXPORT jlong JavaLangMath_minWithLong_withLong_(jlong a, jlong b);

FOUNDATION_EXPORT jfloat JavaLangMath_minWithFloat_withFloat_(jfloat a, jfloat b);

FOUNDATION_EXPORT jdouble JavaLangMath_minWithDouble_withDouble_(jdouble a, jdouble b);

FOUNDATION_EXPORT jdouble JavaLangMath_ulpWithDouble_(jdouble d);

FOUNDATION_EXPORT jfloat JavaLangMath_ulpWithFloat_(jfloat f);

FOUNDATION_EXPORT jdouble JavaLangMath_signumWithDouble_(jdouble d);

FOUNDATION_EXPORT jfloat JavaLangMath_signumWithFloat_(jfloat f);

FOUNDATION_EXPORT jdouble JavaLangMath_sinhWithDouble_(jdouble x);

FOUNDATION_EXPORT jdouble JavaLangMath_coshWithDouble_(jdouble x);

FOUNDATION_EXPORT jdouble JavaLangMath_tanhWithDouble_(jdouble x);

FOUNDATION_EXPORT jdouble JavaLangMath_hypotWithDouble_withDouble_(jdouble x, jdouble y);

FOUNDATION_EXPORT jdouble JavaLangMath_expm1WithDouble_(jdouble x);

FOUNDATION_EXPORT jdouble JavaLangMath_log1pWithDouble_(jdouble x);

FOUNDATION_EXPORT jdouble JavaLangMath_copySignWithDouble_withDouble_(jdouble magnitude, jdouble sign);

FOUNDATION_EXPORT jfloat JavaLangMath_copySignWithFloat_withFloat_(jfloat magnitude, jfloat sign);

FOUNDATION_EXPORT jint JavaLangMath_getExponentWithFloat_(jfloat f);

FOUNDATION_EXPORT jint JavaLangMath_getExponentWithDouble_(jdouble d);

FOUNDATION_EXPORT jdouble JavaLangMath_nextAfterWithDouble_withDouble_(jdouble start, jdouble direction);

FOUNDATION_EXPORT jfloat JavaLangMath_nextAfterWithFloat_withDouble_(jfloat start, jdouble direction);

FOUNDATION_EXPORT jdouble JavaLangMath_nextUpWithDouble_(jdouble d);

FOUNDATION_EXPORT jfloat JavaLangMath_nextUpWithFloat_(jfloat f);

FOUNDATION_EXPORT jdouble JavaLangMath_nextDownWithDouble_(jdouble d);

FOUNDATION_EXPORT jfloat JavaLangMath_nextDownWithFloat_(jfloat f);

FOUNDATION_EXPORT jdouble JavaLangMath_scalbWithDouble_withInt_(jdouble d, jint scaleFactor);

FOUNDATION_EXPORT jfloat JavaLangMath_scalbWithFloat_withInt_(jfloat f, jint scaleFactor);

FOUNDATION_EXPORT jdouble JavaLangMath_powerOfTwoDWithInt_(jint n);

FOUNDATION_EXPORT jfloat JavaLangMath_powerOfTwoFWithInt_(jint n);

J2OBJC_TYPE_LITERAL_HEADER(JavaLangMath)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaLangMath")
