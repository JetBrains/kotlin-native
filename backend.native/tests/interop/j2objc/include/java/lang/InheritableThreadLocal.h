//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/lang/InheritableThreadLocal.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaLangInheritableThreadLocal")
#ifdef RESTRICT_JavaLangInheritableThreadLocal
#define INCLUDE_ALL_JavaLangInheritableThreadLocal 0
#else
#define INCLUDE_ALL_JavaLangInheritableThreadLocal 1
#endif
#undef RESTRICT_JavaLangInheritableThreadLocal

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaLangInheritableThreadLocal_) && (INCLUDE_ALL_JavaLangInheritableThreadLocal || defined(INCLUDE_JavaLangInheritableThreadLocal))
#define JavaLangInheritableThreadLocal_

#define RESTRICT_JavaLangThreadLocal 1
#define INCLUDE_JavaLangThreadLocal 1
#include "java/lang/ThreadLocal.h"

@class JavaLangThread;
@class JavaLangThreadLocal_ThreadLocalMap;

/*!
 @brief This class extends <tt>ThreadLocal</tt> to provide inheritance of values
  from parent thread to child thread: when a child thread is created, the
  child receives initial values for all inheritable thread-local variables
  for which the parent has values.Normally the child's values will be
  identical to the parent's; however, the child's value can be made an
  arbitrary function of the parent's by overriding the <tt>childValue</tt>
  method in this class.
 <p>Inheritable thread-local variables are used in preference to
  ordinary thread-local variables when the per-thread-attribute being
  maintained in the variable (e.g., User ID, Transaction ID) must be
  automatically transmitted to any child threads that are created.
 @author Josh Bloch and Doug Lea
 - seealso: ThreadLocal
 @since 1.2
 */
@interface JavaLangInheritableThreadLocal : JavaLangThreadLocal

#pragma mark Public

- (instancetype __nonnull)init;

#pragma mark Protected

/*!
 @brief Computes the child's initial value for this inheritable thread-local
  variable as a function of the parent's value at the time the child
  thread is created.This method is called from within the parent
  thread before the child is started.
 <p>
  This method merely returns its input argument, and should be overridden
  if a different behavior is desired.
 @param parentValue the parent thread's value
 @return the child thread's initial value
 */
- (id)childValueWithId:(id)parentValue;

#pragma mark Package-Private

/*!
 @brief Create the map associated with a ThreadLocal.
 @param t the current thread
 @param firstValue value for the initial entry of the table.
 */
- (void)createMapWithJavaLangThread:(JavaLangThread *)t
                             withId:(id)firstValue;

/*!
 @brief Get the map associated with a ThreadLocal.
 @param t the current thread
 */
- (JavaLangThreadLocal_ThreadLocalMap *)getMapWithJavaLangThread:(JavaLangThread *)t;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaLangInheritableThreadLocal)

FOUNDATION_EXPORT void JavaLangInheritableThreadLocal_init(JavaLangInheritableThreadLocal *self);

FOUNDATION_EXPORT JavaLangInheritableThreadLocal *new_JavaLangInheritableThreadLocal_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangInheritableThreadLocal *create_JavaLangInheritableThreadLocal_init(void);

J2OBJC_TYPE_LITERAL_HEADER(JavaLangInheritableThreadLocal)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaLangInheritableThreadLocal")
