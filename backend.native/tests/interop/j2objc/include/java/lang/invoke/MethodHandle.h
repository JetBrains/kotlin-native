//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/lambda/java/java/lang/invoke/MethodHandle.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaLangInvokeMethodHandle")
#ifdef RESTRICT_JavaLangInvokeMethodHandle
#define INCLUDE_ALL_JavaLangInvokeMethodHandle 0
#else
#define INCLUDE_ALL_JavaLangInvokeMethodHandle 1
#endif
#undef RESTRICT_JavaLangInvokeMethodHandle

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaLangInvokeMethodHandle_) && (INCLUDE_ALL_JavaLangInvokeMethodHandle || defined(INCLUDE_JavaLangInvokeMethodHandle))
#define JavaLangInvokeMethodHandle_

@class IOSClass;
@class IOSObjectArray;
@class JavaLangInvokeMethodType;
@protocol JavaUtilList;

@interface JavaLangInvokeMethodHandle : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

- (JavaLangInvokeMethodHandle *)asCollectorWithIOSClass:(IOSClass *)arrayType
                                                withInt:(jint)arrayLength;

- (JavaLangInvokeMethodHandle *)asFixedArity;

- (JavaLangInvokeMethodHandle *)asTypeWithJavaLangInvokeMethodType:(JavaLangInvokeMethodType *)newType;

- (JavaLangInvokeMethodHandle *)asVarargsCollectorWithIOSClass:(IOSClass *)arrayType;

- (JavaLangInvokeMethodHandle *)bindToWithId:(id)x;

- (id)invokeWithNSObjectArray:(IOSObjectArray *)args;

- (id)invokeExactWithNSObjectArray:(IOSObjectArray *)args;

- (id)invokeWithArgumentsWithJavaUtilList:(id<JavaUtilList>)arguments;

- (id)invokeWithArgumentsWithNSObjectArray:(IOSObjectArray *)arguments;

- (jboolean)isVarargsCollector;

- (JavaLangInvokeMethodType *)type;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaLangInvokeMethodHandle)

FOUNDATION_EXPORT void JavaLangInvokeMethodHandle_init(JavaLangInvokeMethodHandle *self);

J2OBJC_TYPE_LITERAL_HEADER(JavaLangInvokeMethodHandle)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaLangInvokeMethodHandle")
