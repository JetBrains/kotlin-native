//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/libcore/ojluni/src/main/java/java/lang/IllegalMonitorStateException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaLangIllegalMonitorStateException")
#ifdef RESTRICT_JavaLangIllegalMonitorStateException
#define INCLUDE_ALL_JavaLangIllegalMonitorStateException 0
#else
#define INCLUDE_ALL_JavaLangIllegalMonitorStateException 1
#endif
#undef RESTRICT_JavaLangIllegalMonitorStateException

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaLangIllegalMonitorStateException_) && (INCLUDE_ALL_JavaLangIllegalMonitorStateException || defined(INCLUDE_JavaLangIllegalMonitorStateException))
#define JavaLangIllegalMonitorStateException_

#define RESTRICT_JavaLangRuntimeException 1
#define INCLUDE_JavaLangRuntimeException 1
#include "java/lang/RuntimeException.h"

@class JavaLangThrowable;

/*!
 @brief Thrown to indicate that a thread has attempted to wait on an
  object's monitor or to notify other threads waiting on an object's
  monitor without owning the specified monitor.
 @author unascribed
 - seealso: java.lang.Object#notify()
 - seealso: java.lang.Object#notifyAll()
 - seealso: java.lang.Object#wait()
 - seealso: java.lang.Object#wait(long)
 - seealso: java.lang.Object#wait(long, int)
 @since JDK1.0
 */
@interface JavaLangIllegalMonitorStateException : JavaLangRuntimeException

#pragma mark Public

/*!
 @brief Constructs an <code>IllegalMonitorStateException</code> with no
  detail message.
 */
- (instancetype __nonnull)init;

/*!
 @brief Constructs an <code>IllegalMonitorStateException</code> with the
  specified detail message.
 @param s the detail message.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)s;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1
                               withBoolean:(jboolean)arg2
                               withBoolean:(jboolean)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaLangIllegalMonitorStateException)

FOUNDATION_EXPORT void JavaLangIllegalMonitorStateException_init(JavaLangIllegalMonitorStateException *self);

FOUNDATION_EXPORT JavaLangIllegalMonitorStateException *new_JavaLangIllegalMonitorStateException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangIllegalMonitorStateException *create_JavaLangIllegalMonitorStateException_init(void);

FOUNDATION_EXPORT void JavaLangIllegalMonitorStateException_initWithNSString_(JavaLangIllegalMonitorStateException *self, NSString *s);

FOUNDATION_EXPORT JavaLangIllegalMonitorStateException *new_JavaLangIllegalMonitorStateException_initWithNSString_(NSString *s) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaLangIllegalMonitorStateException *create_JavaLangIllegalMonitorStateException_initWithNSString_(NSString *s);

J2OBJC_TYPE_LITERAL_HEADER(JavaLangIllegalMonitorStateException)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_JavaLangIllegalMonitorStateException")
