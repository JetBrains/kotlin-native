//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: Classes/com/google/j2objc/io/AsyncPipedNSInputStreamAdapter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter")
#ifdef RESTRICT_ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter
#define INCLUDE_ALL_ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter 0
#else
#define INCLUDE_ALL_ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter 1
#endif
#undef RESTRICT_ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_) && (INCLUDE_ALL_ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter || defined(INCLUDE_ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter))
#define ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_

@protocol ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_Delegate;

/*!
 @brief An NSInputStream adapter piped to an NSOutputStream that in turn requests data via a <code>java.io.OutputStream</code>
  asynchronously.
 <p>The main use case is to enable J2ObjC apps to obtain an NSInputStream that they can offer data
  to and then pass the stream to another object that takes one. NSMutableURLRequest's
  HTTPBodyStream is one such example. 
 <p>The fundamental problem here is that streams in Java and streams in Objective-C (Foundation to
  be more precise) have different designs. If you pipe an NSOutputStream to an NSInputStream, that
  output stream requests data from you in an asynchronous manner using a callback, whereas Java's
  OutputStream is synchronous. In addition, OutputStream.write(byte[], int, int) assumes that all
  the bytes will be written to in one go, whereas -[NSOutputStream read:maxLength:] returns the
  actual bytes written. 
 <p>To use this adapter, call the <code>create(Delegate, int)</code> method. It returns a native
  NSInputStream that you can pass to the target data consumer. To write data to this piped stream,
  implement the sole delegate method, and use the suppiled Java OutputStream to offer data. 
 <p>If you need to offer your data synchronously, you will need to consider using a pair of <code>java.io.PipedInputStream</code>
  and <code>java.io.PipedOutputStream</code>, and offer the data using the
  PipedOutputStream, and in your <code>Delegate.offerData(OutputStream)</code>, read data from the
  PipedInputStream. 
 <p>It is safe to close the provided OutputStream multiple times. It is also safe to send -close
  to the underlying NSInputStream and NSOutputStream more than once. If the NSInputStream is closed
  by the consuming end, the OutputStream will close soon after, and any unread data is discarded.
 @author Lukhnos Liu
 */
@interface ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter : NSObject

#pragma mark Public

/*!
 @brief Creates a native NSInputStream that is piped to a NSOutpuStream, which in turn requests data
  from the supplied delegate asynchronously.
 <p>Please note that the returned NSInputStream is not yet open. This is to allow the stream to
  be used by other Foundation API (such as NSMutableURLRequest) and is consistent with other
  NSInputStream initializers.
 @param delegate the delegate.
 @param bufferSize the size of the internal buffer used to pipe the NSOutputStream to the      NSInputStream.
 @return a native NSInputStream.
 */
+ (id)createWithComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_Delegate:(id<ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_Delegate>)delegate
                                                                 withInt:(jint)bufferSize;

#pragma mark Package-Private

+ (id)nativeCreateWithComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_Delegate:(id<ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_Delegate>)delegate
                                                                       withInt:(jint)bufferSize;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter)

FOUNDATION_EXPORT id ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_createWithComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_Delegate_withInt_(id<ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_Delegate> delegate, jint bufferSize);

FOUNDATION_EXPORT id ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_nativeCreateWithComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_Delegate_withInt_(id<ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_Delegate> delegate, jint bufferSize);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter)

#endif

#if !defined (ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_Delegate_) && (INCLUDE_ALL_ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter || defined(INCLUDE_ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_Delegate))
#define ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_Delegate_

@class JavaIoOutputStream;

/*!
 @brief Delegate for providing data to the piped NSInputStream.
 */
@protocol ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_Delegate < JavaObject >

/*!
 @brief Offers data to the provided output stream or closes the stream if no more data is available.
 <p>This method is always invoked in a separate thread owned by the adapter. It is safe to
  call <code>OutputStream.close()</code> at any time, but you should do all your work within this
  method and you must not retain a reference to this stream for later consumption elsewhere.
 @param stream A Java OutputStream.
 */
- (void)offerDataWithJavaIoOutputStream:(JavaIoOutputStream *)stream;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_Delegate)

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_Delegate)

#endif

#if !defined (ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_OutputStreamAdapter_) && (INCLUDE_ALL_ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter || defined(INCLUDE_ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_OutputStreamAdapter))
#define ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_OutputStreamAdapter_

#define RESTRICT_JavaIoOutputStream 1
#define INCLUDE_JavaIoOutputStream 1
#include "java/io/OutputStream.h"

@class IOSByteArray;
@protocol ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_Delegate;

/*!
 @brief Wraps an NSOutputStream and handles the writing of leftover data.
 */
@interface ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_OutputStreamAdapter : JavaIoOutputStream

#pragma mark Public

- (void)close;

- (void)writeWithByteArray:(IOSByteArray *)b
                   withInt:(jint)off
                   withInt:(jint)len;

- (void)writeWithInt:(jint)b;

#pragma mark Package-Private

- (instancetype __nonnull)initWithComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_Delegate:(id<ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_Delegate>)delegate
                                                                                    withId:(id)nativeInputStream
                                                                                    withId:(id)nativeOutputStream;

/*!
 @brief Schedule the actual native close on the dedicated thread.
 */
- (void)scheduleClose;

/*!
 @brief Spawns a new thread to use a runloop to handle the asynchronous data requests.
 */
- (void)start;

/*!
 @brief Writes the leftover data to the native output stream.
 */
- (jboolean)writeLeftoverData;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_OutputStreamAdapter)

FOUNDATION_EXPORT void ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_OutputStreamAdapter_initWithComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_Delegate_withId_withId_(ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_OutputStreamAdapter *self, id<ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_Delegate> delegate, id nativeInputStream, id nativeOutputStream);

FOUNDATION_EXPORT ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_OutputStreamAdapter *new_ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_OutputStreamAdapter_initWithComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_Delegate_withId_withId_(id<ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_Delegate> delegate, id nativeInputStream, id nativeOutputStream) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_OutputStreamAdapter *create_ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_OutputStreamAdapter_initWithComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_Delegate_withId_withId_(id<ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_Delegate> delegate, id nativeInputStream, id nativeOutputStream);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter_OutputStreamAdapter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleJ2objcIoAsyncPipedNSInputStreamAdapter")
