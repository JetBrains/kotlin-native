//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: src/main/java/com/google/j2objc/mockito/InvocationHandlerAdapter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleJ2objcMockitoInvocationHandlerAdapter")
#ifdef RESTRICT_ComGoogleJ2objcMockitoInvocationHandlerAdapter
#define INCLUDE_ALL_ComGoogleJ2objcMockitoInvocationHandlerAdapter 0
#else
#define INCLUDE_ALL_ComGoogleJ2objcMockitoInvocationHandlerAdapter 1
#endif
#undef RESTRICT_ComGoogleJ2objcMockitoInvocationHandlerAdapter

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleJ2objcMockitoInvocationHandlerAdapter_) && (INCLUDE_ALL_ComGoogleJ2objcMockitoInvocationHandlerAdapter || defined(INCLUDE_ComGoogleJ2objcMockitoInvocationHandlerAdapter))
#define ComGoogleJ2objcMockitoInvocationHandlerAdapter_

#define RESTRICT_JavaLangReflectInvocationHandler 1
#define INCLUDE_JavaLangReflectInvocationHandler 1
#include "java/lang/reflect/InvocationHandler.h"

@class IOSObjectArray;
@class JavaLangReflectMethod;
@protocol OrgMockitoInvocationMockHandler;

/*!
 @brief InvocationHandler adapter, inspired by the dexmaker project's version.
 https://code.google.com/p/dexmaker/
 */
@interface ComGoogleJ2objcMockitoInvocationHandlerAdapter : NSObject < JavaLangReflectInvocationHandler >

#pragma mark Public

- (instancetype __nonnull)initWithOrgMockitoInvocationMockHandler:(id<OrgMockitoInvocationMockHandler>)handler;

- (id<OrgMockitoInvocationMockHandler>)getHandler;

- (id)invokeWithId:(id)proxy
withJavaLangReflectMethod:(JavaLangReflectMethod *)method
 withNSObjectArray:(IOSObjectArray *)rawArgs;

- (void)setHandlerWithOrgMockitoInvocationMockHandler:(id<OrgMockitoInvocationMockHandler>)handler;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleJ2objcMockitoInvocationHandlerAdapter)

FOUNDATION_EXPORT void ComGoogleJ2objcMockitoInvocationHandlerAdapter_initWithOrgMockitoInvocationMockHandler_(ComGoogleJ2objcMockitoInvocationHandlerAdapter *self, id<OrgMockitoInvocationMockHandler> handler);

FOUNDATION_EXPORT ComGoogleJ2objcMockitoInvocationHandlerAdapter *new_ComGoogleJ2objcMockitoInvocationHandlerAdapter_initWithOrgMockitoInvocationMockHandler_(id<OrgMockitoInvocationMockHandler> handler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGoogleJ2objcMockitoInvocationHandlerAdapter *create_ComGoogleJ2objcMockitoInvocationHandlerAdapter_initWithOrgMockitoInvocationMockHandler_(id<OrgMockitoInvocationMockHandler> handler);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleJ2objcMockitoInvocationHandlerAdapter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComGoogleJ2objcMockitoInvocationHandlerAdapter")
