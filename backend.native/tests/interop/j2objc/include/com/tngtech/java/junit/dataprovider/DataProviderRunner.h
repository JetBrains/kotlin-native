//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/junit/build_result/java/com/tngtech/java/junit/dataprovider/DataProviderRunner.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComTngtechJavaJunitDataproviderDataProviderRunner")
#ifdef RESTRICT_ComTngtechJavaJunitDataproviderDataProviderRunner
#define INCLUDE_ALL_ComTngtechJavaJunitDataproviderDataProviderRunner 0
#else
#define INCLUDE_ALL_ComTngtechJavaJunitDataproviderDataProviderRunner 1
#endif
#undef RESTRICT_ComTngtechJavaJunitDataproviderDataProviderRunner

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComTngtechJavaJunitDataproviderDataProviderRunner_) && (INCLUDE_ALL_ComTngtechJavaJunitDataproviderDataProviderRunner || defined(INCLUDE_ComTngtechJavaJunitDataproviderDataProviderRunner))
#define ComTngtechJavaJunitDataproviderDataProviderRunner_

#define RESTRICT_OrgJunitRunnersBlockJUnit4ClassRunner 1
#define INCLUDE_OrgJunitRunnersBlockJUnit4ClassRunner 1
#include "org/junit/runners/BlockJUnit4ClassRunner.h"

@class ComTngtechJavaJunitDataproviderInternalDataConverter;
@class ComTngtechJavaJunitDataproviderInternalTestGenerator;
@class ComTngtechJavaJunitDataproviderInternalTestValidator;
@class IOSClass;
@class OrgJunitRunnerManipulationFilter;
@class OrgJunitRunnersModelFrameworkMethod;
@class OrgJunitRunnersModelTestClass;
@protocol ComTngtechJavaJunitDataproviderUseDataProvider;
@protocol JavaUtilList;

/*!
 @brief A custom runner for JUnit that allows the usage of <a href="http://testng.org/">TestNG</a>-like dataproviders.Data
  providers are public, static methods that return an <code>Object</code><code>[][]</code> (see <code>DataProvider</code>).
 <p>
  Your test method must be annotated with <code>@@</code><code>UseDataProvider</code> or <code>@@</code><code>DataProvider</code>,
  additionally.
 */
@interface ComTngtechJavaJunitDataproviderDataProviderRunner : OrgJunitRunnersBlockJUnit4ClassRunner {
 @public
  /*!
   @brief The <code>DataConverter</code> to be used to convert from supported return types of any dataprovider to <code>List</code>
  <code><</code><code>Object</code><code>[]></code> such that data can be further handled.
   <p>
  This field is package private (= visible) for testing. 
 </p>
   */
  ComTngtechJavaJunitDataproviderInternalDataConverter *dataConverter_;
  /*!
   @brief The <code>TestValidator</code> to be used to validate all test methods to be executed as test and all dataprovider to
  be used to explode tests.
   <p>
  This field is package private (= visible) for testing. 
 </p>
   */
  ComTngtechJavaJunitDataproviderInternalTestValidator *testValidator_;
  /*!
   @brief The <code>TestGenerator</code> to be used to generate all framework methods to be executed as test (enhanced by data
  providers data if desired).
   <p>
  This field is package private (= visible) for testing. 
 </p>
   */
  ComTngtechJavaJunitDataproviderInternalTestGenerator *testGenerator_;
  /*!
   @brief Cached result of <code>computeTestMethods()</code>.
   <p>
  This field is package private (= visible) for testing. 
 </p>
   */
  id<JavaUtilList> computedTestMethods_;
}

#pragma mark Public

/*!
 @brief Creates a DataProviderRunner to run supplied <code>clazz</code>.
 @param clazz the test <code>Class</code>  to run
 @throw InitializationErrorif the test <code>Class</code> is malformed.
 */
- (instancetype __nonnull)initWithIOSClass:(IOSClass *)clazz;

/*!
 @brief <p>
  If possible the given <code>filter</code> is wrapped by <code>DataProviderFilter</code> to enable filtering of tests using
  a dataprovider.
 @param filter the <code>Filter</code>  to be wrapped or apply, respectively
 */
- (void)filterWithOrgJunitRunnerManipulationFilter:(OrgJunitRunnerManipulationFilter *)filter;

#pragma mark Protected

- (void)collectInitializationErrorsWithJavaUtilList:(id<JavaUtilList>)errors;

/*!
 @brief Generates the exploded list of methods that run tests.All methods annotated with <code>@@Test</code> on this class and
  super classes that are not overridden are checked if they use a <code>@@</code><code>DataProvider</code> or not.
 If yes, for
  each row of the <code>DataProvider</code>s result a specific, parameterized test method will be added. If not, the
  original test method is added. 
 <p>
  Additionally, caches the result as <code>computeTestMethods()</code> is call multiple times while test execution by
  the JUnit framework (to validate, to filter, to execute, ...).
 @return the exploded list of test methods (never <code>null</code>)
 */
- (id<JavaUtilList>)computeTestMethods;

/*!
 @brief <p>
  Is copied from <code>BlockJUnit4ClassRunner.validateInstanceMethods</code> because <code>computeTestMethods()</code> must
  not be called if validation already found errors!
 */
- (void)validateInstanceMethodsWithJavaUtilList:(id<JavaUtilList>)errors __attribute__((deprecated));

/*!
 @brief <p>
  Additionally validates dataproviders.
 @param errors that are added to this list
 @throw NullPointerExceptionif given <code>errors</code> is <code>null</code>
 */
- (void)validateTestMethodsWithJavaUtilList:(id<JavaUtilList>)errors;

#pragma mark Package-Private

/*!
 @brief <p>
  This method is package private (= visible) for testing.
 </p>
 */
- (OrgJunitRunnersModelTestClass *)findDataProviderLocationWithComTngtechJavaJunitDataproviderUseDataProvider:(id<ComTngtechJavaJunitDataproviderUseDataProvider>)useDataProvider;

/*!
 @brief Generates the exploded list of test methods for the given <code>testMethods</code>.Each of the given 
 <code>FrameworkMethod</code>s is checked if it uses a <code>@@</code><code>DataProvider</code> or not.
 If yes, for each line of
  the <code>DataProvider</code>s result a specific, parameterized test method will be added. If no, the original test
  method is added. 
 <p>
  This method is package private (= visible) for testing. 
 </p>
 @param testMethods the original test methods
 @return the exploded list of test methods (never <code>null</code>)
 */
- (id<JavaUtilList>)generateExplodedTestMethodsForWithJavaUtilList:(id<JavaUtilList>)testMethods;

/*!
 @brief Returns the dataprovider method that belongs to the given test method or <code>null</code> if no such dataprovider
  exists or the test method is not marked for usage of a dataprovider
 <p>
  This method is package private (= visible) for testing.
 </p>
 @param testMethod test method that uses a dataprovider
 @return the dataprovider or <code>null</code> (if dataprovider does not exist or test method does not use any)
 @throw IllegalArgumentExceptionif given <code>testMethod</code> is <code>null</code>
 */
- (OrgJunitRunnersModelFrameworkMethod *)getDataProviderMethodWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)testMethod;

/*!
 @brief Returns a <code>TestClass</code> object wrapping the class to be executed.This method is required for testing because 
 <code>getTestClass()</code> is final and therefore cannot be stubbed :(
 */
- (OrgJunitRunnersModelTestClass *)getTestClassInt;

@end

J2OBJC_EMPTY_STATIC_INIT(ComTngtechJavaJunitDataproviderDataProviderRunner)

J2OBJC_FIELD_SETTER(ComTngtechJavaJunitDataproviderDataProviderRunner, dataConverter_, ComTngtechJavaJunitDataproviderInternalDataConverter *)
J2OBJC_FIELD_SETTER(ComTngtechJavaJunitDataproviderDataProviderRunner, testValidator_, ComTngtechJavaJunitDataproviderInternalTestValidator *)
J2OBJC_FIELD_SETTER(ComTngtechJavaJunitDataproviderDataProviderRunner, testGenerator_, ComTngtechJavaJunitDataproviderInternalTestGenerator *)
J2OBJC_FIELD_SETTER(ComTngtechJavaJunitDataproviderDataProviderRunner, computedTestMethods_, id<JavaUtilList>)

FOUNDATION_EXPORT void ComTngtechJavaJunitDataproviderDataProviderRunner_initWithIOSClass_(ComTngtechJavaJunitDataproviderDataProviderRunner *self, IOSClass *clazz);

FOUNDATION_EXPORT ComTngtechJavaJunitDataproviderDataProviderRunner *new_ComTngtechJavaJunitDataproviderDataProviderRunner_initWithIOSClass_(IOSClass *clazz) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComTngtechJavaJunitDataproviderDataProviderRunner *create_ComTngtechJavaJunitDataproviderDataProviderRunner_initWithIOSClass_(IOSClass *clazz);

J2OBJC_TYPE_LITERAL_HEADER(ComTngtechJavaJunitDataproviderDataProviderRunner)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComTngtechJavaJunitDataproviderDataProviderRunner")
