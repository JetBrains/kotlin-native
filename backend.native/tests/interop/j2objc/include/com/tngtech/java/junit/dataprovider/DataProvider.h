//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/junit/build_result/java/com/tngtech/java/junit/dataprovider/DataProvider.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComTngtechJavaJunitDataproviderDataProvider")
#ifdef RESTRICT_ComTngtechJavaJunitDataproviderDataProvider
#define INCLUDE_ALL_ComTngtechJavaJunitDataproviderDataProvider 0
#else
#define INCLUDE_ALL_ComTngtechJavaJunitDataproviderDataProvider 1
#endif
#undef RESTRICT_ComTngtechJavaJunitDataproviderDataProvider

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComTngtechJavaJunitDataproviderDataProvider_) && (INCLUDE_ALL_ComTngtechJavaJunitDataproviderDataProvider || defined(INCLUDE_ComTngtechJavaJunitDataproviderDataProvider))
#define ComTngtechJavaJunitDataproviderDataProvider_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;
@class IOSObjectArray;

/*!
 @brief Mark a method as a dataprovider used by a test method or use it directly at the test method and provide data via 
 <code>value()</code> attribute.
 <ul>
  <li><i>Use it on a separate method:</i> The name of the dataprovider is the the name of the method. The method must
  be static and return an <code>Object</code><code>[][]</code>, a <code>List</code><code><List<Object>></code>, or a <code>String</code>
  <code>[]</code>. The test method will be called with each "row" of this two-dimensional array. The test method must be
  annotated with <code>@@</code><code>UseDataProvider</code>. This annotation behaves pretty much the same as the 
 <code>@@DataProvider</code> annotation from <a href="http://testng.org/">TestNG</a>.
  <p>
  <b>Note:</b> The name of the test method in the JUnit result will by default be the name of the test method
  (annotated by <code>@@</code><code>UseDataProvider</code>) suffixed by the parameters, can be changed by customizing 
 <code>format()</code>.</li>
  <li>
  <p>
  <i>Use it directly on test method:</i> Provide all the data for the test method parameters as regex-separated 
 <code>String</code>s using <code>String[] value()</code>.
  <p>
  <b>Note:</b> All parameters of the test method must be primitive types (e.g. <code>char</code>, <code>int</code>,
  <code>double</code>), primitive wrapper types (e.g. <code>Boolean</code>, <code>Long</code>), case-sensitive <code>Enum</code> names, 
 <code>String</code>s, or types having single-argument <code>String</code> constructor. The former two are converted using the 
 <code>valueOf(String)</code> methods of their corresponding wrapper classes or 
 <code>valueOf(Class<? extends Enum<?>>, String)</code>, respectively. This can cause <code>Exception</code>s at runtime. A 
 <code>String</code> must not contain commas! The <code>String</code> "null" will be passed as <code>null</code> or <code>String</code>,
  according to <code>convertNulls()</code>.</li>
  </ul>
  <p>
  If the test method arguments are retrieved from a regex-separated <code>String</code><code>[]</code>, the additional annotation
  parameters can be used to customized the generation/conversion behavior.
 */
@protocol ComTngtechJavaJunitDataproviderDataProvider < JavaLangAnnotationAnnotation >

@property (readonly) IOSObjectArray *value;
@property (readonly) NSString *splitBy;
@property (readonly) jboolean convertNulls;
@property (readonly) jboolean trimValues;
@property (readonly) NSString *format;
@property (readonly) jboolean ignoreEnumCase;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface ComTngtechJavaJunitDataproviderDataProvider : NSObject < ComTngtechJavaJunitDataproviderDataProvider > {
 @public
  IOSObjectArray *value_;
  NSString *splitBy_;
  jboolean convertNulls_;
  jboolean trimValues_;
  NSString *format_;
  jboolean ignoreEnumCase_;
}
@property (readonly, copy, class) NSString *COMMA NS_SWIFT_NAME(COMMA);
@property (readonly, copy, class) NSString *NULL_ NS_SWIFT_NAME(NULL_);
@property (readonly, copy, class) NSString *DEFAULT_FORMAT NS_SWIFT_NAME(DEFAULT_FORMAT);

+ (NSString *)COMMA;

+ (NSString *)NULL_;

+ (NSString *)DEFAULT_FORMAT;

@end

J2OBJC_EMPTY_STATIC_INIT(ComTngtechJavaJunitDataproviderDataProvider)

/*!
 @brief Comma delimiter to split up parameters for dataproviders using the <code>value()</code>s <code>String</code>
  representation.
 - seealso: #splitBy()
 */
inline NSString *ComTngtechJavaJunitDataproviderDataProvider_get_COMMA(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComTngtechJavaJunitDataproviderDataProvider_COMMA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComTngtechJavaJunitDataproviderDataProvider, COMMA, NSString *)

/*!
 @brief <code>null</code>-<code>String</code> value to be converted to <code>null</code> if <code>convertNulls()</code> is <code>true</code>.
 - seealso: #convertNulls()
 */
inline NSString *ComTngtechJavaJunitDataproviderDataProvider_get_NULL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComTngtechJavaJunitDataproviderDataProvider_NULL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComTngtechJavaJunitDataproviderDataProvider, NULL, NSString *)

/*!
 @brief Default format string containing test method name followed by an index and all parameters within square brackets.
 - seealso: #format()
 */
inline NSString *ComTngtechJavaJunitDataproviderDataProvider_get_DEFAULT_FORMAT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComTngtechJavaJunitDataproviderDataProvider_DEFAULT_FORMAT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComTngtechJavaJunitDataproviderDataProvider, DEFAULT_FORMAT, NSString *)

FOUNDATION_EXPORT id<ComTngtechJavaJunitDataproviderDataProvider> create_ComTngtechJavaJunitDataproviderDataProvider(jboolean convertNulls, NSString *format, jboolean ignoreEnumCase, NSString *splitBy, jboolean trimValues, IOSObjectArray *value);

J2OBJC_TYPE_LITERAL_HEADER(ComTngtechJavaJunitDataproviderDataProvider)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComTngtechJavaJunitDataproviderDataProvider")
