//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/junit/build_result/java/com/tngtech/java/junit/dataprovider/internal/placeholder/BasePlaceholder.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComTngtechJavaJunitDataproviderInternalPlaceholderBasePlaceholder")
#ifdef RESTRICT_ComTngtechJavaJunitDataproviderInternalPlaceholderBasePlaceholder
#define INCLUDE_ALL_ComTngtechJavaJunitDataproviderInternalPlaceholderBasePlaceholder 0
#else
#define INCLUDE_ALL_ComTngtechJavaJunitDataproviderInternalPlaceholderBasePlaceholder 1
#endif
#undef RESTRICT_ComTngtechJavaJunitDataproviderInternalPlaceholderBasePlaceholder

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComTngtechJavaJunitDataproviderInternalPlaceholderBasePlaceholder_) && (INCLUDE_ALL_ComTngtechJavaJunitDataproviderInternalPlaceholderBasePlaceholder || defined(INCLUDE_ComTngtechJavaJunitDataproviderInternalPlaceholderBasePlaceholder))
#define ComTngtechJavaJunitDataproviderInternalPlaceholderBasePlaceholder_

@class IOSObjectArray;
@class JavaLangReflectMethod;

/*!
 @brief Base class for all placeholder which are used to format the test method name.One can create his/her own placeholder
  extending this and overriding <code>getReplacementFor(String)</code>.
 Afterwards add the new placeholder to the other
  placeholders by using <code>Placeholders.all()</code> (for details see <code>Placeholders</code>).
 - seealso: DataProvider#format()
 - seealso: Placeholders
 */
@interface ComTngtechJavaJunitDataproviderInternalPlaceholderBasePlaceholder : NSObject {
 @public
  JavaLangReflectMethod *method_;
  jint idx_;
  IOSObjectArray *parameters_;
}

#pragma mark Public

/*!
 @param placeholderRegex - regular expression to match the placeholder in the <code>DataProvider.format()</code> .
 */
- (instancetype __nonnull)initWithNSString:(NSString *)placeholderRegex;

/*!
 @brief Executes this placeholder for the given <code>String</code> by searching all occurrences of the regular expression
  supplied in the constructor and replaces them with the retrieved replacement from 
 <code>getReplacementFor(String)</code>.If the regular expression does not match, an exact copy of the given 
 <code>String</code> is returned.
 @param formatPattern to be processed
 @return the given <code>formatPattern</code> containing the generated replacements instead of matching patterns
 */
- (NSString *)processWithNSString:(NSString *)formatPattern;

/*!
 @brief Sets the given arguments as context for processing or replacement generation, respectively.
 @param method - test method
 @param idx - index of the dataprovider row
 @param parameters of the current dataprovider test to be executed
 */
- (void)setContextWithJavaLangReflectMethod:(JavaLangReflectMethod *)method
                                    withInt:(jint)idx
                          withNSObjectArray:(IOSObjectArray *)parameters;

#pragma mark Protected

/*!
 @brief Generate and returns the replacement for the found and given placeholder.
 @param placeholder for which the replacement <code>String</code>  should be returned
 @return the replacement for the given <code>placeholder</code> (not <code>null</code>)
 */
- (NSString *)getReplacementForWithNSString:(NSString *)placeholder;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComTngtechJavaJunitDataproviderInternalPlaceholderBasePlaceholder)

J2OBJC_FIELD_SETTER(ComTngtechJavaJunitDataproviderInternalPlaceholderBasePlaceholder, method_, JavaLangReflectMethod *)
J2OBJC_FIELD_SETTER(ComTngtechJavaJunitDataproviderInternalPlaceholderBasePlaceholder, parameters_, IOSObjectArray *)

FOUNDATION_EXPORT void ComTngtechJavaJunitDataproviderInternalPlaceholderBasePlaceholder_initWithNSString_(ComTngtechJavaJunitDataproviderInternalPlaceholderBasePlaceholder *self, NSString *placeholderRegex);

J2OBJC_TYPE_LITERAL_HEADER(ComTngtechJavaJunitDataproviderInternalPlaceholderBasePlaceholder)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComTngtechJavaJunitDataproviderInternalPlaceholderBasePlaceholder")
