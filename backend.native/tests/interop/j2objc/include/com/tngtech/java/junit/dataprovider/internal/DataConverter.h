//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/tball/src/j2objc/junit/build_result/java/com/tngtech/java/junit/dataprovider/internal/DataConverter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComTngtechJavaJunitDataproviderInternalDataConverter")
#ifdef RESTRICT_ComTngtechJavaJunitDataproviderInternalDataConverter
#define INCLUDE_ALL_ComTngtechJavaJunitDataproviderInternalDataConverter 0
#else
#define INCLUDE_ALL_ComTngtechJavaJunitDataproviderInternalDataConverter 1
#endif
#undef RESTRICT_ComTngtechJavaJunitDataproviderInternalDataConverter

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComTngtechJavaJunitDataproviderInternalDataConverter_) && (INCLUDE_ALL_ComTngtechJavaJunitDataproviderInternalDataConverter || defined(INCLUDE_ComTngtechJavaJunitDataproviderInternalDataConverter))
#define ComTngtechJavaJunitDataproviderInternalDataConverter_

@class ComTngtechJavaJunitDataproviderInternalConvertObjectArrayConverter;
@class ComTngtechJavaJunitDataproviderInternalConvertSingleArgConverter;
@class ComTngtechJavaJunitDataproviderInternalConvertStringConverter;
@class IOSObjectArray;
@protocol ComTngtechJavaJunitDataproviderDataProvider;
@protocol JavaLangReflectType;
@protocol JavaUtilList;

/*!
 @brief Internal class to convert some data to its corresponding parameters.
 */
@interface ComTngtechJavaJunitDataproviderInternalDataConverter : NSObject {
 @public
  /*!
   @brief <p>
  This field is package private (= visible) for testing.
   </p>
   */
  ComTngtechJavaJunitDataproviderInternalConvertObjectArrayConverter *objectArrayConverter_;
  /*!
   @brief <p>
  This field is package private (= visible) for testing.
   </p>
   */
  ComTngtechJavaJunitDataproviderInternalConvertSingleArgConverter *singleArgConverter_;
  /*!
   @brief <p>
  This field is package private (= visible) for testing.
   </p>
   */
  ComTngtechJavaJunitDataproviderInternalConvertStringConverter *stringConverter_;
}

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Returns <code>true</code> iif this <code>DataConverter</code> can convert the given <code>type</code>.Currently supported 
 <code>type</code>s:
  <ul>
  <li>Object[][]</li>
  <li>List&lt;List&lt;Object&gt;&gt;</li>
  <li>List&lt;Object&gt;</li>
  <li>Object[]</li>
  <li>String[]</li>
  </ul>
 @param type to be checked for convertibility (use either <code>Method.getGenericReturnType()</code> ,
              <code>Method.getReturnType()</code> , or simple <code>Class</code>  if possible)
 @return <code>true</code> iif given <code>type</code> can be converted.
 */
- (jboolean)canConvertWithJavaLangReflectType:(id<JavaLangReflectType>)type;

/*!
 @brief Converts the given <code>Object</code> to a <code>List</code> of <code>Object</code><code>[]</code> with <code>Class</code>es correspond
  to given <code>parameterTypes</code>.
 <p>
  For compatible types, see <code>canConvert(Type)</code>.
 @param data to be converted
 @param isVarArgs determines whether test method has a varargs parameter
 @param parameterTypes required types for <code>data</code>
 @param dataProvider containing settings which should be used to convert given <code>data</code>
 @return converted data as <code>List</code><code><</code><code>Object</code><code>[]></code> with the required <code>parameterTypes</code>
 @throw NullPointerExceptioniif given <code>parameterTypes</code> or <code>settings</code> are <code>null</code>
 @throw IllegalArgumentExceptioniif given <code>parameterTypes</code> is empty
 @throw ClassCastExceptioniif <code>data</code> is not a compatible type
 */
- (id<JavaUtilList>)convertWithId:(id)data
                      withBoolean:(jboolean)isVarArgs
                withIOSClassArray:(IOSObjectArray *)parameterTypes
withComTngtechJavaJunitDataproviderDataProvider:(id<ComTngtechJavaJunitDataproviderDataProvider>)dataProvider;

@end

J2OBJC_EMPTY_STATIC_INIT(ComTngtechJavaJunitDataproviderInternalDataConverter)

J2OBJC_FIELD_SETTER(ComTngtechJavaJunitDataproviderInternalDataConverter, objectArrayConverter_, ComTngtechJavaJunitDataproviderInternalConvertObjectArrayConverter *)
J2OBJC_FIELD_SETTER(ComTngtechJavaJunitDataproviderInternalDataConverter, singleArgConverter_, ComTngtechJavaJunitDataproviderInternalConvertSingleArgConverter *)
J2OBJC_FIELD_SETTER(ComTngtechJavaJunitDataproviderInternalDataConverter, stringConverter_, ComTngtechJavaJunitDataproviderInternalConvertStringConverter *)

FOUNDATION_EXPORT void ComTngtechJavaJunitDataproviderInternalDataConverter_init(ComTngtechJavaJunitDataproviderInternalDataConverter *self);

FOUNDATION_EXPORT ComTngtechJavaJunitDataproviderInternalDataConverter *new_ComTngtechJavaJunitDataproviderInternalDataConverter_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComTngtechJavaJunitDataproviderInternalDataConverter *create_ComTngtechJavaJunitDataproviderInternalDataConverter_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComTngtechJavaJunitDataproviderInternalDataConverter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_ComTngtechJavaJunitDataproviderInternalDataConverter")
