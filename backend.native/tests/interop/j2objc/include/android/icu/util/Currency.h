//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/external/icu/android_icu4j/src/main/java/android/icu/util/Currency.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidIcuUtilCurrency")
#ifdef RESTRICT_AndroidIcuUtilCurrency
#define INCLUDE_ALL_AndroidIcuUtilCurrency 0
#else
#define INCLUDE_ALL_AndroidIcuUtilCurrency 1
#endif
#undef RESTRICT_AndroidIcuUtilCurrency

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (AndroidIcuUtilCurrency_) && (INCLUDE_ALL_AndroidIcuUtilCurrency || defined(INCLUDE_AndroidIcuUtilCurrency))
#define AndroidIcuUtilCurrency_

#define RESTRICT_AndroidIcuUtilMeasureUnit 1
#define INCLUDE_AndroidIcuUtilMeasureUnit 1
#include "android/icu/util/MeasureUnit.h"

@class AndroidIcuUtilCurrency_CurrencyUsage;
@class AndroidIcuUtilULocale;
@class IOSBooleanArray;
@class IOSObjectArray;
@class JavaTextParsePosition;
@class JavaUtilDate;
@class JavaUtilLocale;
@protocol JavaUtilSet;

/*!
 @brief A class encapsulating a currency, as defined by ISO 4217.A
  <tt>Currency</tt> object can be created given a <tt>Locale</tt> or
  given an ISO 4217 code.
 Once created, the <tt>Currency</tt> object
  can return various data necessary to its proper display: 
 <ul><li>A display symbol, for a specific locale 
 <li>The number of fraction digits to display 
 <li>A rounding increment 
 </ul>
  The <tt>DecimalFormat</tt> class uses these data to display
  currencies. 
 <p>Note: This class deliberately resembles 
 <tt>java.util.Currency</tt> but it has a completely independent
  implementation, and adds features not present in the JDK.
 @author Alan Liu
 */
@interface AndroidIcuUtilCurrency : AndroidIcuUtilMeasureUnit
@property (readonly, class) jint SYMBOL_NAME NS_SWIFT_NAME(SYMBOL_NAME);
@property (readonly, class) jint LONG_NAME NS_SWIFT_NAME(LONG_NAME);
@property (readonly, class) jint PLURAL_LONG_NAME NS_SWIFT_NAME(PLURAL_LONG_NAME);

+ (jint)SYMBOL_NAME;

+ (jint)LONG_NAME;

+ (jint)PLURAL_LONG_NAME;

#pragma mark Public

/*!
 @brief Returns the set of available currencies.The returned set of currencies contains all of the
  available currencies, including obsolete ones.
 The result set can be modified without
  affecting the available currencies in the runtime.
 @return The set of available currencies. The returned set could be empty if there is no
  currency data available.
 */
+ (id<JavaUtilSet>)getAvailableCurrencies;

/*!
 @brief Returns an array of Strings which contain the currency
  identifiers that are valid for the given <code>java.util.Locale</code> on the
  given date.If there are no such identifiers, returns null.
 Returned identifiers are in preference order.
 @param loc the <code>java.util.Locale</code>  for which to retrieve currency codes.
 @param d the date for which to retrieve currency codes for the given locale.
 @return The array of ISO currency codes.
 */
+ (IOSObjectArray *)getAvailableCurrencyCodesWithJavaUtilLocale:(JavaUtilLocale *)loc
                                               withJavaUtilDate:(JavaUtilDate *)d;

/*!
 @brief Returns an array of Strings which contain the currency
  identifiers that are valid for the given locale on the
  given date.If there are no such identifiers, returns null.
 Returned identifiers are in preference order.
 @param loc the locale for which to retrieve currency codes.
 @param d the date for which to retrieve currency codes for the given locale.
 @return The array of ISO currency codes.
 */
+ (IOSObjectArray *)getAvailableCurrencyCodesWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)loc
                                                      withJavaUtilDate:(JavaUtilDate *)d;

/*!
 @brief Return an array of the locales for which a currency
  is defined.
 @return an array of the available locales
 */
+ (IOSObjectArray *)getAvailableLocales;

/*!
 @brief Return an array of the ulocales for which a currency
  is defined.
 @return an array of the available ulocales
 */
+ (IOSObjectArray *)getAvailableULocales;

/*!
 @brief Returns the ISO 4217 3-letter code for this currency object.
 */
- (NSString *)getCurrencyCode;

/*!
 @brief Returns the number of the number of fraction digits that should
  be displayed for this currency.
 This is equivalent to getDefaultFractionDigits(CurrencyUsage.STANDARD);
 @return a non-negative number of fraction digits to be
  displayed
 */
- (jint)getDefaultFractionDigits;

/*!
 @brief Returns the number of the number of fraction digits that should
  be displayed for this currency with Usage.
 @param Usage the usage of currency(Standard or Cash)
 @return a non-negative number of fraction digits to be
  displayed
 */
- (jint)getDefaultFractionDigitsWithAndroidIcuUtilCurrency_CurrencyUsage:(AndroidIcuUtilCurrency_CurrencyUsage *)Usage;

/*!
 @brief Returns the display name for this currency in the default locale.
 If the resource data for the default locale contains no entry for this currency,
  then the ISO 4217 code is returned. 
 <p>
  Note: This method is a convenience equivalent for 
 <code>java.util.Currency.getDisplayName()</code> and is equivalent to 
 <code>getName(Locale.getDefault(), LONG_NAME, null)</code>.
 @return The display name of this currency
 - seealso: #getDisplayName(Locale)
 - seealso: #getName(Locale, int, boolean[])
 */
- (NSString *)getDisplayName;

/*!
 @brief Returns the display name for this currency in the given locale.
 If the resource data for the given locale contains no entry for this currency,
  then the ISO 4217 code is returned. 
 <p>
  Note: This method is a convenience equivalent for 
 <code>java.util.Currency.getDisplayName(java.util.Locale)</code> and is equivalent
  to <code>getName(locale, LONG_NAME, null)</code>.
 @param locale locale in which to display currency
 @return The display name of this currency for the specified locale
 - seealso: #getDisplayName(Locale)
 - seealso: #getName(Locale, int, boolean[])
 */
- (NSString *)getDisplayNameWithJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Returns a currency object for the default currency in the given
  locale.
 @param locale the locale
 @return the currency object for this locale
 */
+ (AndroidIcuUtilCurrency *)getInstanceWithJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Returns a currency object given an ISO 4217 3-letter code.
 @param theISOCode the iso code
 @return the currency for this iso code
 @throw NullPointerExceptionif <code>theISOCode</code> is null.
 @throw IllegalArgumentExceptionif <code>theISOCode</code> is not a
          3-letter alpha code.
 */
+ (AndroidIcuUtilCurrency *)getInstanceWithNSString:(NSString *)theISOCode;

/*!
 @brief Returns a currency object for the default currency in the given
  locale.
 */
+ (AndroidIcuUtilCurrency *)getInstanceWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale;

/*!
 @brief Given a key and a locale, returns an array of values for the key for which data
  exists.If commonlyUsed is true, these are the values that typically are used
  with this locale, otherwise these are all values for which data exists.
 This is a common service API. 
 <p>
  The only supported key is "currency", other values return an empty array. 
 <p>
  Currency information is based on the region of the locale.  If the locale does not
  indicate a region, <code>ULocale.addLikelySubtags(ULocale)</code> is used to infer a region,
  except for the 'und' locale. 
 <p>
  If commonlyUsed is true, only the currencies known to be in use as of the current date
  are returned.  When there are more than one, these are returned in preference order
  (typically, this occurs when a country is transitioning to a new currency, and the
  newer currency is preferred), see 
 <a href="http://unicode.org/reports/tr35/#Supplemental_Currency_Data">Unicode TR#35 Sec. C1</a>.
  If commonlyUsed is false, all currencies ever used in any locale are returned, in no
  particular order.
 @param key key whose values to look up.  the only recognized key is "currency"
 @param locale the locale
 @param commonlyUsed if true, return only values that are currently used in the locale.                       Otherwise returns all values.
 @return an array of values for the given key and the locale.  If there is no data, the
    array will be empty.
 */
+ (IOSObjectArray *)getKeywordValuesForLocaleWithNSString:(NSString *)key
                                withAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale
                                              withBoolean:(jboolean)commonlyUsed;

/*!
 @brief Returns the display name for the given currency in the
  given locale.
 This is a convenient method for
  getName(ULocale, int, boolean[]);
 */
- (NSString *)getNameWithJavaUtilLocale:(JavaUtilLocale *)locale
                                withInt:(jint)nameStyle
                       withBooleanArray:(IOSBooleanArray *)isChoiceFormat;

/*!
 @brief Returns the display name for the given currency in the given locale.
 This is a convenience overload of getName(ULocale, int, String, boolean[]);
 */
- (NSString *)getNameWithJavaUtilLocale:(JavaUtilLocale *)locale
                                withInt:(jint)nameStyle
                           withNSString:(NSString *)pluralCount
                       withBooleanArray:(IOSBooleanArray *)isChoiceFormat;

/*!
 @brief Returns the display name for the given currency in the
  given locale.For example, the display name for the USD
  currency object in the en_US locale is "$".
 @param locale locale in which to display currency
 @param nameStyle selector for which kind of name to return.                   The nameStyle should be either SYMBOL_NAME or
                    LONG_NAME. Otherwise, throw IllegalArgumentException.
 @param isChoiceFormat fill-in; isChoiceFormat[0] is set to true  if the returned value is a ChoiceFormat pattern; otherwise it
   is set to false
 @return display string for this currency.  If the resource data
  contains no entry for this currency, then the ISO 4217 code is
  returned.  If isChoiceFormat[0] is true, then the result is a
  ChoiceFormat pattern.  Otherwise it is a static string. <b>Note:</b>
  as of ICU 4.4, choice formats are not used, and the value returned
  in isChoiceFormat is always false. 
 <p>
 @throw IllegalArgumentExceptionif the nameStyle is not SYMBOL_NAME
                                     or LONG_NAME.
 - seealso: #getName(ULocale, int, String, boolean[])
 */
- (NSString *)getNameWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale
                                       withInt:(jint)nameStyle
                              withBooleanArray:(IOSBooleanArray *)isChoiceFormat;

/*!
 @brief Returns the display name for the given currency in the
  given locale.For example, the SYMBOL_NAME for the USD
  currency object in the en_US locale is "$".
 The PLURAL_LONG_NAME for the USD currency object when the currency
  amount is plural is "US dollars", such as in "3.00 US dollars";
  while the PLURAL_LONG_NAME for the USD currency object when the currency
  amount is singular is "US dollar", such as in "1.00 US dollar".
 @param locale locale in which to display currency
 @param nameStyle selector for which kind of name to return
 @param pluralCount plural count string for this locale
 @param isChoiceFormat fill-in; isChoiceFormat[0] is set to true  if the returned value is a ChoiceFormat pattern; otherwise it
   is set to false
 @return display string for this currency.  If the resource data
  contains no entry for this currency, then the ISO 4217 code is
  returned.  If isChoiceFormat[0] is true, then the result is a
  ChoiceFormat pattern.  Otherwise it is a static string. <b>Note:</b>
  as of ICU 4.4, choice formats are not used, and the value returned
  in isChoiceFormat is always false.
 @throw IllegalArgumentExceptionif the nameStyle is not SYMBOL_NAME,
                                     LONG_NAME, or PLURAL_LONG_NAME.
 */
- (NSString *)getNameWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale
                                       withInt:(jint)nameStyle
                                  withNSString:(NSString *)pluralCount
                              withBooleanArray:(IOSBooleanArray *)isChoiceFormat;

/*!
 @brief Returns the ISO 4217 numeric code for this currency object.
 <p>Note: If the ISO 4217 numeric code is not assigned for the currency or
  the currency is unknown, this method returns 0.</p>
 @return The ISO 4217 numeric code of this currency.
 */
- (jint)getNumericCode;

/*!
 @brief Returns the rounding increment for this currency, or 0.0 if no
  rounding is done by this currency.
 This is equivalent to getRoundingIncrement(CurrencyUsage.STANDARD);
 @return the non-negative rounding increment, or 0.0 if none
 */
- (jdouble)getRoundingIncrement;

/*!
 @brief Returns the rounding increment for this currency, or 0.0 if no
  rounding is done by this currency with the Usage.
 @param Usage the usage of currency(Standard or Cash)
 @return the non-negative rounding increment, or 0.0 if none
 */
- (jdouble)getRoundingIncrementWithAndroidIcuUtilCurrency_CurrencyUsage:(AndroidIcuUtilCurrency_CurrencyUsage *)Usage;

/*!
 @brief Convenience and compatibility override of getName that
  requests the symbol name for the default <code>DISPLAY</code> locale.
 - seealso: #getName
 - seealso: Category#DISPLAY
 */
- (NSString *)getSymbol;

/*!
 @brief Convenience and compatibility override of getName that
  requests the symbol name.
 @param loc the Locale for the symbol
 - seealso: #getName
 */
- (NSString *)getSymbolWithJavaUtilLocale:(JavaUtilLocale *)loc;

/*!
 @brief Convenience and compatibility override of getName that
  requests the symbol name.
 @param uloc the ULocale for the symbol
 - seealso: #getName
 */
- (NSString *)getSymbolWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)uloc;

/*!
 @brief Queries if the given ISO 4217 3-letter code is available on the specified date range.
 <p>
  Note: For checking availability of a currency on a specific date, specify the date on both <code>from</code> and 
 <code>to</code>. When both <code>from</code> and <code>to</code> are null, this method checks if the specified
  currency is available all time.
 @param code The ISO 4217 3-letter code.
 @param from The lower bound of the date range, inclusive. When 
  <code> from </code>  is null, check the availability             of the currency any date before 
  <code> to </code>
 @param to The upper bound of the date range, inclusive. When 
  <code> to </code>  is null, check the availability of             the currency any date after 
  <code> from </code>
 @return true if the given ISO 4217 3-letter code is supported on the specified date range.
 @throw IllegalArgumentExceptionwhen <code>to</code> is before <code>from</code>.
 */
+ (jboolean)isAvailableWithNSString:(NSString *)code
                   withJavaUtilDate:(JavaUtilDate *)from
                   withJavaUtilDate:(JavaUtilDate *)to;

/*!
 @brief Attempt to parse the given string as a currency, either as a
  display name in the given locale, or as a 3-letter ISO 4217
  code.If multiple display names match, then the longest one is
  selected.
 If both a display name and a 3-letter ISO code
  match, then the display name is preferred, unless it's length
  is less than 3.
 @param locale the locale of the display names to match
 @param text the text to parse
 @param type parse against currency type: LONG_NAME only or not
 @param pos input-output position; on input, the position within  text to match; must have 0 
  &lt; = pos.getIndex()  &lt;  text.length();  on output, the position after the last matched character. If  the parse fails, the position in unchanged upon output.
 @return the ISO 4217 code, as a string, of the best match, or
  null if there is no match
 */
+ (NSString *)parseWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale
                                withNSString:(NSString *)text
                                     withInt:(jint)type
                   withJavaTextParsePosition:(JavaTextParsePosition *)pos __attribute__((deprecated));

/*!
 @brief Registers a new currency for the provided locale.The returned object
  is a key that can be used to unregister this currency object.
 <p>Because ICU may choose to cache Currency objects internally, this must
  be called at application startup, prior to any calls to
  Currency.getInstance to avoid undefined behavior.
 @param currency the currency to register
 @param locale the ulocale under which to register the currency
 @return a registry key that can be used to unregister this currency
 - seealso: #unregister
 */
+ (id)registerInstanceWithAndroidIcuUtilCurrency:(AndroidIcuUtilCurrency *)currency
                       withAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale;

/*!
 @brief Returns the ISO 4217 code for this currency.
 */
- (NSString *)description;

/*!
 @brief Unregister the currency associated with this key (obtained from
  registerInstance).
 @param registryKey the registry key returned from registerInstance
 - seealso: #registerInstance
 */
+ (jboolean)unregisterWithId:(id)registryKey;

#pragma mark Protected

/*!
 @brief Constructs a currency object for the given ISO 4217 3-letter
  code.This constructor assumes that the code is valid.
 @param theISOCode The iso code used to construct the currency.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)theISOCode;

#pragma mark Package-Private

/*!
 @brief Instantiate a currency from resource data.
 */
+ (AndroidIcuUtilCurrency *)createCurrencyWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)loc;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                              withNSString:(NSString *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(AndroidIcuUtilCurrency)

/*!
 @brief Selector for getName() indicating a symbolic name for a
  currency, such as "$" for USD.
 */
inline jint AndroidIcuUtilCurrency_get_SYMBOL_NAME(void);
#define AndroidIcuUtilCurrency_SYMBOL_NAME 0
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuUtilCurrency, SYMBOL_NAME, jint)

/*!
 @brief Selector for getName() indicating the long name for a
  currency, such as "US Dollar" for USD.
 */
inline jint AndroidIcuUtilCurrency_get_LONG_NAME(void);
#define AndroidIcuUtilCurrency_LONG_NAME 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuUtilCurrency, LONG_NAME, jint)

/*!
 @brief Selector for getName() indicating the plural long name for a
  currency, such as "US dollar" for USD in "1 US dollar",
  and "US dollars" for USD in "2 US dollars".
 */
inline jint AndroidIcuUtilCurrency_get_PLURAL_LONG_NAME(void);
#define AndroidIcuUtilCurrency_PLURAL_LONG_NAME 2
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuUtilCurrency, PLURAL_LONG_NAME, jint)

FOUNDATION_EXPORT AndroidIcuUtilCurrency *AndroidIcuUtilCurrency_getInstanceWithJavaUtilLocale_(JavaUtilLocale *locale);

FOUNDATION_EXPORT AndroidIcuUtilCurrency *AndroidIcuUtilCurrency_getInstanceWithAndroidIcuUtilULocale_(AndroidIcuUtilULocale *locale);

FOUNDATION_EXPORT IOSObjectArray *AndroidIcuUtilCurrency_getAvailableCurrencyCodesWithAndroidIcuUtilULocale_withJavaUtilDate_(AndroidIcuUtilULocale *loc, JavaUtilDate *d);

FOUNDATION_EXPORT IOSObjectArray *AndroidIcuUtilCurrency_getAvailableCurrencyCodesWithJavaUtilLocale_withJavaUtilDate_(JavaUtilLocale *loc, JavaUtilDate *d);

FOUNDATION_EXPORT id<JavaUtilSet> AndroidIcuUtilCurrency_getAvailableCurrencies(void);

FOUNDATION_EXPORT AndroidIcuUtilCurrency *AndroidIcuUtilCurrency_createCurrencyWithAndroidIcuUtilULocale_(AndroidIcuUtilULocale *loc);

FOUNDATION_EXPORT AndroidIcuUtilCurrency *AndroidIcuUtilCurrency_getInstanceWithNSString_(NSString *theISOCode);

FOUNDATION_EXPORT id AndroidIcuUtilCurrency_registerInstanceWithAndroidIcuUtilCurrency_withAndroidIcuUtilULocale_(AndroidIcuUtilCurrency *currency, AndroidIcuUtilULocale *locale);

FOUNDATION_EXPORT jboolean AndroidIcuUtilCurrency_unregisterWithId_(id registryKey);

FOUNDATION_EXPORT IOSObjectArray *AndroidIcuUtilCurrency_getAvailableLocales(void);

FOUNDATION_EXPORT IOSObjectArray *AndroidIcuUtilCurrency_getAvailableULocales(void);

FOUNDATION_EXPORT IOSObjectArray *AndroidIcuUtilCurrency_getKeywordValuesForLocaleWithNSString_withAndroidIcuUtilULocale_withBoolean_(NSString *key, AndroidIcuUtilULocale *locale, jboolean commonlyUsed);

FOUNDATION_EXPORT NSString *AndroidIcuUtilCurrency_parseWithAndroidIcuUtilULocale_withNSString_withInt_withJavaTextParsePosition_(AndroidIcuUtilULocale *locale, NSString *text, jint type, JavaTextParsePosition *pos);

FOUNDATION_EXPORT void AndroidIcuUtilCurrency_initWithNSString_(AndroidIcuUtilCurrency *self, NSString *theISOCode);

FOUNDATION_EXPORT AndroidIcuUtilCurrency *new_AndroidIcuUtilCurrency_initWithNSString_(NSString *theISOCode) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidIcuUtilCurrency *create_AndroidIcuUtilCurrency_initWithNSString_(NSString *theISOCode);

FOUNDATION_EXPORT jboolean AndroidIcuUtilCurrency_isAvailableWithNSString_withJavaUtilDate_withJavaUtilDate_(NSString *code, JavaUtilDate *from, JavaUtilDate *to);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuUtilCurrency)

#endif

#if !defined (AndroidIcuUtilCurrency_CurrencyUsage_) && (INCLUDE_ALL_AndroidIcuUtilCurrency || defined(INCLUDE_AndroidIcuUtilCurrency_CurrencyUsage))
#define AndroidIcuUtilCurrency_CurrencyUsage_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, AndroidIcuUtilCurrency_CurrencyUsage_Enum) {
  AndroidIcuUtilCurrency_CurrencyUsage_Enum_STANDARD = 0,
  AndroidIcuUtilCurrency_CurrencyUsage_Enum_CASH = 1,
};

/*!
 @brief Currency Usage used for Decimal Format
 */
@interface AndroidIcuUtilCurrency_CurrencyUsage : JavaLangEnum

@property (readonly, class, nonnull) AndroidIcuUtilCurrency_CurrencyUsage *STANDARD NS_SWIFT_NAME(STANDARD);
@property (readonly, class, nonnull) AndroidIcuUtilCurrency_CurrencyUsage *CASH NS_SWIFT_NAME(CASH);
+ (AndroidIcuUtilCurrency_CurrencyUsage * __nonnull)STANDARD;

+ (AndroidIcuUtilCurrency_CurrencyUsage * __nonnull)CASH;

#pragma mark Public

+ (AndroidIcuUtilCurrency_CurrencyUsage *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (AndroidIcuUtilCurrency_CurrencyUsage_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(AndroidIcuUtilCurrency_CurrencyUsage)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT AndroidIcuUtilCurrency_CurrencyUsage *AndroidIcuUtilCurrency_CurrencyUsage_values_[];

/*!
 @brief a setting to specify currency usage which determines currency digit and rounding
  for standard usage, for example: "50.00 NT$"
 */
inline AndroidIcuUtilCurrency_CurrencyUsage *AndroidIcuUtilCurrency_CurrencyUsage_get_STANDARD(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuUtilCurrency_CurrencyUsage, STANDARD)

/*!
 @brief a setting to specify currency usage which determines currency digit and rounding
  for cash usage, for example: "50 NT$"
 */
inline AndroidIcuUtilCurrency_CurrencyUsage *AndroidIcuUtilCurrency_CurrencyUsage_get_CASH(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuUtilCurrency_CurrencyUsage, CASH)

FOUNDATION_EXPORT IOSObjectArray *AndroidIcuUtilCurrency_CurrencyUsage_values(void);

FOUNDATION_EXPORT AndroidIcuUtilCurrency_CurrencyUsage *AndroidIcuUtilCurrency_CurrencyUsage_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT AndroidIcuUtilCurrency_CurrencyUsage *AndroidIcuUtilCurrency_CurrencyUsage_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuUtilCurrency_CurrencyUsage)

#endif

#if !defined (AndroidIcuUtilCurrency_ServiceShim_) && (INCLUDE_ALL_AndroidIcuUtilCurrency || defined(INCLUDE_AndroidIcuUtilCurrency_ServiceShim))
#define AndroidIcuUtilCurrency_ServiceShim_

@class AndroidIcuUtilCurrency;
@class AndroidIcuUtilULocale;
@class IOSObjectArray;

@interface AndroidIcuUtilCurrency_ServiceShim : NSObject

#pragma mark Package-Private

- (instancetype __nonnull)init;

- (AndroidIcuUtilCurrency *)createInstanceWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)l;

- (IOSObjectArray *)getAvailableLocales;

- (IOSObjectArray *)getAvailableULocales;

- (id)registerInstanceWithAndroidIcuUtilCurrency:(AndroidIcuUtilCurrency *)c
                       withAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)l;

- (jboolean)unregisterWithId:(id)f;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidIcuUtilCurrency_ServiceShim)

FOUNDATION_EXPORT void AndroidIcuUtilCurrency_ServiceShim_init(AndroidIcuUtilCurrency_ServiceShim *self);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuUtilCurrency_ServiceShim)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_AndroidIcuUtilCurrency")
