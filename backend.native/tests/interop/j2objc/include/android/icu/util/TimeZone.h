//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/external/icu/android_icu4j/src/main/java/android/icu/util/TimeZone.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidIcuUtilTimeZone")
#ifdef RESTRICT_AndroidIcuUtilTimeZone
#define INCLUDE_ALL_AndroidIcuUtilTimeZone 0
#else
#define INCLUDE_ALL_AndroidIcuUtilTimeZone 1
#endif
#undef RESTRICT_AndroidIcuUtilTimeZone

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (AndroidIcuUtilTimeZone_) && (INCLUDE_ALL_AndroidIcuUtilTimeZone || defined(INCLUDE_AndroidIcuUtilTimeZone))
#define AndroidIcuUtilTimeZone_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

#define RESTRICT_AndroidIcuUtilFreezable 1
#define INCLUDE_AndroidIcuUtilFreezable 1
#include "android/icu/util/Freezable.h"

@class AndroidIcuUtilBasicTimeZone;
@class AndroidIcuUtilTimeZone_SystemTimeZoneType;
@class AndroidIcuUtilULocale;
@class IOSBooleanArray;
@class IOSIntArray;
@class IOSObjectArray;
@class JavaLangInteger;
@class JavaUtilDate;
@class JavaUtilLocale;
@protocol JavaUtilSet;

/*!
 @brief <strong>[icu enhancement]</strong> ICU's replacement for <code>java.util.TimeZone</code>.
 &nbsp;Methods, fields, and other functionality specific to ICU are labeled '<strong>[icu]</strong>'.
 <p><code>TimeZone</code> represents a time zone offset, and also computes daylight
  savings. 
 <p>Typically, you get a <code>TimeZone</code> using <code>getDefault()</code>
  which creates a <code>TimeZone</code> based on the time zone where the program
  is running. For example, for a program running in Japan, <code>getDefault</code>
  creates a <code>TimeZone</code> object based on Japanese Standard Time. 
 <p>You can also get a <code>TimeZone</code> using <code>getTimeZone(String)</code>
  along with a time zone ID. For instance, the time zone ID for the
  U.S. Pacific Time zone is "America/Los_Angeles". So, you can get a U.S. Pacific Time 
 <code>TimeZone</code> object with: 
 <blockquote>
  @code

  TimeZone tz = TimeZone.getTimeZone("America/Los_Angeles"); 
  
@endcode
  </blockquote>
  You can use the <code>getAvailableIDs()</code> method to iterate through
  all the supported time zone IDs, or getCanonicalID method to check
  if a time zone ID is supported or not. You can then choose a
  supported ID to get a <code>TimeZone</code>.
  If the time zone you want is not represented by one of the
  supported IDs, then you can create a custom time zone ID with
  the following syntax: 
 <blockquote>
  @code

  GMT[+|-]hh[[:]mm] 
  
@endcode
  </blockquote>
  For example, you might specify GMT+14:00 as a custom
  time zone ID.  The <code>TimeZone</code> that is returned
  when you specify a custom time zone ID uses the specified
  offset from GMT(=UTC) and does not observe daylight saving
  time. For example, you might specify GMT+14:00 as a custom
  time zone ID to create a TimeZone representing 14 hours ahead
  of GMT (with no daylight saving time). In addition, 
 <code>getCanonicalID</code> can also be used to
  normalize a custom time zone ID. 
 <p>For compatibility with JDK 1.1.x, some other three-letter time zone IDs
  (such as "PST", "CTT", "AST") are also supported. However, <strong>their
  use is deprecated</strong> because the same abbreviation is often used
  for multiple time zones (for example, "CST" could be U.S. "Central Standard
  Time" and "China Standard Time"), and the Java platform can then only
  recognize one of them.
 - seealso: Calendar
 - seealso: GregorianCalendar
 - seealso: SimpleTimeZone
 @author Mark Davis, Deborah Goldsmith, Chen-Lieh Huang, Alan Liu
 */
@interface AndroidIcuUtilTimeZone : NSObject < JavaIoSerializable, NSCopying, AndroidIcuUtilFreezable >
@property (readonly, class) jint TIMEZONE_ICU NS_SWIFT_NAME(TIMEZONE_ICU);
@property (readonly, class) jint TIMEZONE_JDK NS_SWIFT_NAME(TIMEZONE_JDK);
@property (readonly, class) jint SHORT NS_SWIFT_NAME(SHORT);
@property (readonly, class) jint LONG NS_SWIFT_NAME(LONG);
@property (readonly, class) jint SHORT_GENERIC NS_SWIFT_NAME(SHORT_GENERIC);
@property (readonly, class) jint LONG_GENERIC NS_SWIFT_NAME(LONG_GENERIC);
@property (readonly, class) jint SHORT_GMT NS_SWIFT_NAME(SHORT_GMT);
@property (readonly, class) jint LONG_GMT NS_SWIFT_NAME(LONG_GMT);
@property (readonly, class) jint SHORT_COMMONLY_USED NS_SWIFT_NAME(SHORT_COMMONLY_USED);
@property (readonly, class) jint GENERIC_LOCATION NS_SWIFT_NAME(GENERIC_LOCATION);
@property (readonly, copy, class) NSString *UNKNOWN_ZONE_ID NS_SWIFT_NAME(UNKNOWN_ZONE_ID);
@property (readonly, copy, class) NSString *GMT_ZONE_ID NS_SWIFT_NAME(GMT_ZONE_ID);
@property (readonly, class, strong) AndroidIcuUtilTimeZone *UNKNOWN_ZONE NS_SWIFT_NAME(UNKNOWN_ZONE);
@property (readonly, class, strong) AndroidIcuUtilTimeZone *GMT_ZONE NS_SWIFT_NAME(GMT_ZONE);

+ (jint)TIMEZONE_ICU;

+ (jint)TIMEZONE_JDK;

+ (jint)SHORT;

+ (jint)LONG;

+ (jint)SHORT_GENERIC;

+ (jint)LONG_GENERIC;

+ (jint)SHORT_GMT;

+ (jint)LONG_GMT;

+ (jint)SHORT_COMMONLY_USED;

+ (jint)GENERIC_LOCATION;

+ (NSString *)UNKNOWN_ZONE_ID;

+ (NSString *)GMT_ZONE_ID;

+ (AndroidIcuUtilTimeZone *)UNKNOWN_ZONE;

+ (AndroidIcuUtilTimeZone *)GMT_ZONE;

#pragma mark Public

/*!
 @brief Default constructor.
 (For invocation by subclass constructors,
  typically implicit.)
 */
- (instancetype __nonnull)init;

/*!
 @brief Clears the cached default time zone.
 This causes <code>getDefault()</code> to re-request the default time zone
  from <code>java.util.TimeZone</code>.
 */
+ (void)clearCachedDefault;

/*!
 @brief Overrides clone.
 */
- (id)java_clone;

/*!
 */
- (AndroidIcuUtilTimeZone *)cloneAsThawed;

/*!
 @brief <strong>[icu]</strong> Returns the number of IDs in the equivalency group that
  includes the given ID.An equivalency group contains zones
  that have the same GMT offset and rules.
 <p>The returned count includes the given ID; it is always &gt;= 1
  for valid IDs.  The given ID must be a system time zone.  If it
  is not, returns zero.
 @param id_ a system time zone ID
 @return the number of zones in the equivalency group containing
  'id', or zero if 'id' is not a valid system ID
 - seealso: #getEquivalentID
 */
+ (jint)countEquivalentIDsWithNSString:(NSString *)id_;

/*!
 @brief Overrides equals.
 */
- (jboolean)isEqual:(id)obj;

/*!
 */
- (AndroidIcuUtilTimeZone *)freeze;

/*!
 @brief Return a new String array containing all system TimeZone IDs.
 These IDs (and only these IDs) may be passed to 
 <code>get()</code> to construct the corresponding TimeZone
  object.
 @return an array of all system TimeZone IDs
 - seealso: #getAvailableIDs(SystemTimeZoneType, String, Integer)
 */
+ (IOSObjectArray *)getAvailableIDs;

/*!
 @brief Return a new String array containing all system TimeZone IDs
  with the given raw offset from GMT.These IDs may be passed to 
 <code>get()</code> to construct the corresponding TimeZone
  object.
 @param rawOffset the offset in milliseconds from GMT
 @return an array of IDs for system TimeZones with the given
  raw offset.  If there are none, return a zero-length array.
 - seealso: #getAvailableIDs(SystemTimeZoneType, String, Integer)
 */
+ (IOSObjectArray *)getAvailableIDsWithInt:(jint)rawOffset;

/*!
 @brief Return a new String array containing all system TimeZone IDs
  associated with the given country.These IDs may be passed to 
 <code>get()</code> to construct the corresponding TimeZone
  object.
 @param country a two-letter ISO 3166 country code, or  <code> null </code>
   to return zones not associated with any country
 @return an array of IDs for system TimeZones in the given
  country.  If there are none, return a zero-length array.
 - seealso: #getAvailableIDs(SystemTimeZoneType, String, Integer)
 */
+ (IOSObjectArray *)getAvailableIDsWithNSString:(NSString *)country;

/*!
 @brief <strong>[icu]</strong> Returns a set of time zone ID strings with the given filter conditions.
 <p><b>Note:</b>A <code>Set</code> returned by this method is
  immutable.
 @param zoneType The system time zone type.
 @param region The ISO 3166 two-letter country code or UN M.49 three-digit area code.                       When null, no filtering done by region.
 @param rawOffset An offset from GMT in milliseconds, ignoring the effect of daylight savings                       time, if any. When null, no filtering done by zone offset.
 @return an immutable set of system time zone IDs.
 - seealso: SystemTimeZoneType
 */
+ (id<JavaUtilSet>)getAvailableIDsWithAndroidIcuUtilTimeZone_SystemTimeZoneType:(AndroidIcuUtilTimeZone_SystemTimeZoneType *)zoneType
                                                                   withNSString:(NSString *)region
                                                            withJavaLangInteger:(JavaLangInteger *)rawOffset;

/*!
 @brief <strong>[icu]</strong> Returns the canonical system time zone ID or the normalized
  custom time zone ID for the given time zone ID.
 @param id_ The input time zone ID to be canonicalized.
 @return The canonical system time zone ID or the custom time zone ID
  in normalized format for the given time zone ID.  When the given time zone ID
  is neither a known system time zone ID nor a valid custom time zone ID,
  null is returned.
 */
+ (NSString *)getCanonicalIDWithNSString:(NSString *)id_;

/*!
 @brief <strong>[icu]</strong> Returns the canonical system time zone ID or the normalized
  custom time zone ID for the given time zone ID.
 @param id_ The input time zone ID to be canonicalized.
 @param isSystemID When non-null boolean array is specified and  the given ID is a known system time zone ID, true is set to 
  <code> isSystemID[0] </code>
 @return The canonical system time zone ID or the custom time zone ID
  in normalized format for the given time zone ID.  When the given time zone ID
  is neither a known system time zone ID nor a valid custom time zone ID,
  null is returned.
 */
+ (NSString *)getCanonicalIDWithNSString:(NSString *)id_
                        withBooleanArray:(IOSBooleanArray *)isSystemID;

/*!
 @brief Gets the default <code>TimeZone</code> for this host.
 The source of the default <code>TimeZone</code>
  may vary with implementation.
 @return a default <code>TimeZone</code>.
 */
+ (AndroidIcuUtilTimeZone *)getDefault;

/*!
 @brief <strong>[icu]</strong> Returns the default time zone type currently used.
 @return The default time zone type, either <code>TIMEZONE_ICU</code> or 
 <code>TIMEZONE_JDK</code>.
 */
+ (jint)getDefaultTimeZoneType;

/*!
 @brief Returns a name of this time zone suitable for presentation to the user
  in the default <code>DISPLAY</code> locale.
 This method returns the long generic name.
  If the display name is not available for the locale,
  a fallback based on the country, city, or time zone id will be used.
 @return the human-readable name of this time zone in the default locale.
 - seealso: Category#DISPLAY
 */
- (NSString *)getDisplayName;

/*!
 @brief Returns a name of this time zone suitable for presentation to the user
  in the default <code>DISPLAY</code> locale.
 If the display name is not available for the locale,
  then this method returns a string in the localized GMT offset format
  such as <code>GMT[+-]HH:mm</code>.
 @param daylight_ if true, return the daylight savings name.
 @param style the output style of the display name.  Valid styles are  
  <code> SHORT </code> ,  <code> LONG </code> ,  <code> SHORT_GENERIC </code>
  ,   <code> LONG_GENERIC </code> ,  <code> SHORT_GMT </code> ,  <code> LONG_GMT
  </code> ,   <code> SHORT_COMMONLY_USED </code>  or  <code> GENERIC_LOCATION
  </code> .
 @return the human-readable name of this time zone in the default locale.
 - seealso: Category#DISPLAY
 */
- (NSString *)getDisplayNameWithBoolean:(jboolean)daylight_
                                withInt:(jint)style;

/*!
 @brief Returns a name of this time zone suitable for presentation to the user
  in the specified locale.
 If the display name is not available for the locale,
  then this method returns a string in the localized GMT offset format
  such as <code>GMT[+-]HH:mm</code>.
 @param daylight_ if true, return the daylight savings name.
 @param style the output style of the display name.  Valid styles are  
  <code> SHORT </code> ,  <code> LONG </code> ,  <code> SHORT_GENERIC </code>
  ,   <code> LONG_GENERIC </code> ,  <code> SHORT_GMT </code> ,  <code> LONG_GMT
  </code> ,   <code> SHORT_COMMONLY_USED </code>  or  <code> GENERIC_LOCATION
  </code> .
 @param locale the locale in which to supply the display name.
 @return the human-readable name of this time zone in the given locale
  or in the default locale if the given locale is not recognized.
 @throw IllegalArgumentExceptionstyle is invalid.
 */
- (NSString *)getDisplayNameWithBoolean:(jboolean)daylight_
                                withInt:(jint)style
                     withJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Returns a name of this time zone suitable for presentation to the user
  in the specified locale.
 If the display name is not available for the locale,
  then this method returns a string in the localized GMT offset format
  such as <code>GMT[+-]HH:mm</code>.
 @param daylight_ if true, return the daylight savings name.
 @param style the output style of the display name.  Valid styles are  
  <code> SHORT </code> ,  <code> LONG </code> ,  <code> SHORT_GENERIC </code>
  ,   <code> LONG_GENERIC </code> ,  <code> SHORT_GMT </code> ,  <code> LONG_GMT
  </code> ,   <code> SHORT_COMMONLY_USED </code>  or  <code> GENERIC_LOCATION
  </code> .
 @param locale the locale in which to supply the display name.
 @return the human-readable name of this time zone in the given locale
  or in the default locale if the given locale is not recognized.
 @throw IllegalArgumentExceptionstyle is invalid.
 */
- (NSString *)getDisplayNameWithBoolean:(jboolean)daylight_
                                withInt:(jint)style
              withAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale;

/*!
 @brief Returns a name of this time zone suitable for presentation to the user
  in the specified locale.
 This method returns the long generic name.
  If the display name is not available for the locale,
  a fallback based on the country, city, or time zone id will be used.
 @param locale the locale in which to supply the display name.
 @return the human-readable name of this time zone in the given locale
  or in the default locale if the given locale is not recognized.
 */
- (NSString *)getDisplayNameWithJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Returns a name of this time zone suitable for presentation to the user
  in the specified locale.
 This method returns the long name, not including daylight savings.
  If the display name is not available for the locale,
  a fallback based on the country, city, or time zone id will be used.
 @param locale the ulocale in which to supply the display name.
 @return the human-readable name of this time zone in the given locale
  or in the default ulocale if the given ulocale is not recognized.
 */
- (NSString *)getDisplayNameWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale;

/*!
 @brief Returns the amount of time to be added to local standard time
  to get local wall clock time.
 <p>
  The default implementation always returns 3600000 milliseconds
  (i.e., one hour) if this time zone observes Daylight Saving
  Time. Otherwise, 0 (zero) is returned. 
 <p>
  If an underlying TimeZone implementation subclass supports
  historical Daylight Saving Time changes, this method returns
  the known latest daylight saving value.
 @return the amount of saving time in milliseconds
 */
- (jint)getDSTSavings;

/*!
 @brief Returns an ID in the equivalency group that
  includes the given ID.An equivalency group contains zones
  that have the same GMT offset and rules.
 <p>The given index must be in the range 0..n-1, where n is the
  value returned by <code>countEquivalentIDs(id)</code>.  For
  some value of 'index', the returned value will be equal to the
  given id.  If the given id is not a valid system time zone, or
  if 'index' is out of range, then returns an empty string.
 @param id_ a system time zone ID
 @param index a value from 0 to n-1, where n is the value  returned by 
  <code> countEquivalentIDs(id) </code>
 @return the ID of the index-th zone in the equivalency group
  containing 'id', or an empty string if 'id' is not a valid
  system ID or 'index' is out of range
 - seealso: #countEquivalentIDs
 */
+ (NSString *)getEquivalentIDWithNSString:(NSString *)id_
                                  withInt:(jint)index;

/*!
 @brief Gets the <code>TimeZone</code> for the given ID.The instance of <code>TimeZone</code>
  returned by this method is immutable.
 Any methods mutate the instance(<code>setID(String)</code>,
  <code>setRawOffset(int)</code>) will throw <code>UnsupportedOperationException</code> upon its
  invocation.
 @param ID the ID for a  <code> TimeZone </code> , such as "America/Los_Angeles",
   or a custom ID such as "GMT-8:00". Note that the support of abbreviations,  such as "PST", is for JDK 1.1.x compatibility only and full names should be used.
 @return the specified <code>TimeZone</code>, or the UNKNOWN_ZONE
  if the given ID cannot be understood.
 - seealso: #UNKNOWN_ZONE
 */
+ (AndroidIcuUtilTimeZone *)getFrozenTimeZoneWithNSString:(NSString *)ID;

/*!
 @brief Gets the ID of this time zone.
 @return the ID of this time zone.
 */
- (NSString *)getID;

/*!
 @brief <strong>[icu]</strong> Converts a Windows time zone ID to an equivalent system time zone ID
  for a region.For example, system time zone ID "America/Los_Angeles" is returned
  for input Windows ID "Pacific Standard Time" and region "US" (or <code>null</code>),
  "America/Vancouver" is returned for the same Windows ID "Pacific Standard Time" and
  region "CA".
 <p>Not all Windows time zones can be mapped to system time zones. When the input
  Windows time zone ID is unknown or unmappable to a system time zone, then this
  method returns <code>null</code>.
  
 <p>This implementation utilizes <a href="http://unicode.org/cldr/charts/supplemental/zone_tzid.html">
  Zone-Tzid mapping data</a>. The mapping data is updated time to time. To get the latest changes,
  please read the ICU user guide section <a href="http://userguide.icu-project.org/datetime/timezone#TOC-Updating-the-Time-Zone-Data">
  Updating the Time Zone Data</a>.
 @param winid A Windows time zone ID
 @param region A region code, or  <code> null </code>  if no regional preference.
 @return A system time zone ID mapped from the input Windows time zone ID,
  or <code>null</code> when the input ID is unknown or unmappable.
 - seealso: #getWindowsID(String)
 */
+ (NSString *)getIDForWindowsIDWithNSString:(NSString *)winid
                               withNSString:(NSString *)region;

/*!
 @brief Gets the time zone offset, for current date, modified in case of
  daylight savings.This is the offset to add *to* UTC to get local time.
 @param era the era of the given date.
 @param year the year in the given date.
 @param month the month in the given date.  Month is 0-based. e.g., 0 for January.
 @param day the day-in-month of the given date.
 @param dayOfWeek the day-of-week of the given date.
 @param milliseconds the millis in day in  <em> standard </em>  local time.
 @return the offset to add *to* GMT to get local time.
 */
- (jint)getOffsetWithInt:(jint)era
                 withInt:(jint)year
                 withInt:(jint)month
                 withInt:(jint)day
                 withInt:(jint)dayOfWeek
                 withInt:(jint)milliseconds;

/*!
 @brief Returns the offset of this time zone from UTC at the specified
  date.If Daylight Saving Time is in effect at the specified
  date, the offset value is adjusted with the amount of daylight
  saving.
 @param date the date represented in milliseconds since January 1, 1970 00:00:00 GMT
 @return the amount of time in milliseconds to add to UTC to get local time.
 - seealso: Calendar#ZONE_OFFSET
 - seealso: Calendar#DST_OFFSET
 - seealso: #getOffset(long, boolean, int[])
 */
- (jint)getOffsetWithLong:(jlong)date;

/*!
 @brief Returns the time zone raw and GMT offset for the given moment
  in time.Upon return, local-millis = GMT-millis + rawOffset +
  dstOffset.
 All computations are performed in the proleptic
  Gregorian calendar.  The default implementation in the TimeZone
  class delegates to the 8-argument getOffset().
 @param date moment in time for which to return offsets, in  units of milliseconds from January 1, 1970 0:00 GMT, either GMT
   time or local wall time, depending on `local'.
 @param local if true, `date' is local wall time; otherwise it  is in GMT time.
 @param offsets output parameter to receive the raw offset, that  is, the offset not including DST adjustments, in offsets[0],
   and the DST offset, that is, the offset to be added to
   `rawOffset' to obtain the total offset between local and GMT
   time, in offsets[1]. If DST is not in effect, the DST offset is
   zero; otherwise it is a positive value, typically one hour.
 */
- (void)getOffsetWithLong:(jlong)date
              withBoolean:(jboolean)local
             withIntArray:(IOSIntArray *)offsets;

/*!
 @brief Gets unmodified offset, NOT modified in case of daylight savings.
 This is the offset to add *to* UTC to get local time.
 @return the unmodified offset to add *to* UTC to get local time.
 */
- (jint)getRawOffset;

/*!
 @brief <strong>[icu]</strong> Returns the region code associated with the given
  system time zone ID.The region code is either ISO 3166
  2-letter country code or UN M.49 3-digit area code.
 When the time zone is not associated with a specific location,
  for example - "Etc/UTC", "EST5EDT", then this method returns
  "001" (UN M.49 area code for World).
 @param id_ the system time zone ID.
 @return the region code associated with the given
  system time zone ID.
 @throw IllegalArgumentExceptionif <code>id</code> is not a known system ID.
 - seealso: #getAvailableIDs(String)
 */
+ (NSString *)getRegionWithNSString:(NSString *)id_;

/*!
 @brief Gets the <code>TimeZone</code> for the given ID.
 @param ID the ID for a  <code> TimeZone </code> , such as "America/Los_Angeles",
   or a custom ID such as "GMT-8:00". Note that the support of abbreviations,  such as "PST", is for JDK 1.1.x compatibility only and full names should be used.
 @return the specified <code>TimeZone</code>, or a mutable clone of the UNKNOWN_ZONE
  if the given ID cannot be understood or if the given ID is "Etc/Unknown".
 - seealso: #UNKNOWN_ZONE
 */
+ (AndroidIcuUtilTimeZone *)getTimeZoneWithNSString:(NSString *)ID;

/*!
 @brief Gets the <code>TimeZone</code> for the given ID and the timezone type.
 @param ID the ID for a  <code> TimeZone </code> , such as "America/Los_Angeles", or a
   custom ID such as "GMT-8:00". Note that the support of abbreviations, such as  "PST", is for JDK 1.1.x compatibility only and full names should be used.
 @param type Time zone type, either  <code> TIMEZONE_ICU </code>  or
    <code> TIMEZONE_JDK </code> .
 @return the specified <code>TimeZone</code>, or a mutable clone of the UNKNOWN_ZONE if the given ID
  cannot be understood or if the given ID is "Etc/Unknown".
 - seealso: #UNKNOWN_ZONE
 */
+ (AndroidIcuUtilTimeZone *)getTimeZoneWithNSString:(NSString *)ID
                                            withInt:(jint)type;

/*!
 @brief <strong>[icu]</strong> Returns the time zone data version currently used by ICU.
 @return the version string, such as "2007f"
 @throw MissingResourceExceptionif ICU time zone resource bundle
  is missing or the version information is not available.
 */
+ (NSString *)getTZDataVersion;

/*!
 @brief <strong>[icu]</strong> Converts a system time zone ID to an equivalent Windows time zone ID.For example,
  Windows time zone ID "Pacific Standard Time" is returned for input "America/Los_Angeles".
 <p>There are system time zones that cannot be mapped to Windows zones. When the input
  system time zone ID is unknown or unmappable to a Windows time zone, then this
  method returns <code>null</code>.
  
 <p>This implementation utilizes <a href="http://unicode.org/cldr/charts/supplemental/zone_tzid.html">
  Zone-Tzid mapping data</a>. The mapping data is updated time to time. To get the latest changes,
  please read the ICU user guide section <a href="http://userguide.icu-project.org/datetime/timezone#TOC-Updating-the-Time-Zone-Data">
  Updating the Time Zone Data</a>.
 @param id_ A system time zone ID
 @return A Windows time zone ID mapped from the input system time zone ID,
  or <code>null</code> when the input ID is unknown or unmappable.
 - seealso: #getIDForWindowsID(String, String)
 */
+ (NSString *)getWindowsIDWithNSString:(NSString *)id_;

/*!
 @brief Overrides hashCode.
 */
- (NSUInteger)hash;

/*!
 @brief Returns true if this zone has the same rule and offset as another zone.
 That is, if this zone differs only in ID, if at all.  Returns false
  if the other zone is null.
 @param other the  <code> TimeZone </code>  object to be compared with
 @return true if the other zone is not null and is the same as this one,
  with the possible exception of the ID
 */
- (jboolean)hasSameRulesWithAndroidIcuUtilTimeZone:(AndroidIcuUtilTimeZone *)other;

/*!
 @brief Queries if the given date is in daylight savings time in
  this time zone.
 @param date the given Date.
 @return true if the given date is in daylight savings time,
  false, otherwise.
 */
- (jboolean)inDaylightTimeWithJavaUtilDate:(JavaUtilDate *)date;

/*!
 */
- (jboolean)isFrozen;

/*!
 @brief Queries if this time zone is in daylight saving time or will observe
  daylight saving time at any future time.
 <p>The default implementation in this class returns <code>true</code> if <code>useDaylightTime()</code>
  or <code>inDaylightTime(new Date())</code> returns <code>true</code>.
  <p>
  <strong>Note:</strong> This method was added for <code>java.util.TimeZone</code> compatibility
  support. The <code>java.util.TimeZone.useDaylightTime()</code> method only checks the last known
  rule(s), therefore it may return false even the zone observes daylight saving time currently. 
 <code>java.util.TimeZone</code> added <code>observesDaylightTime()</code> to resolve the issue.
  In ICU, <code>useDaylightTime()</code> works differently. The ICU implementation checks if the
  zone uses daylight saving time in the current calendar year. Therefore, it will never return 
 <code>false</code> if daylight saving time is currently used. 
 <p>
  ICU's TimeZone subclass implementations override this method to support the same behavior
  with <code>java.util.TimeZone.observesDaylightTime()</code>. Unlike <code>useDaylightTime()</code>,
  the implementation does not take past daylight saving time into account, so
  that this method may return <code>false</code> even when <code>useDaylightTime()</code> returns 
 <code>true</code>.
 @return <code>true</code> if this time zone is in daylight saving time or will observe
  daylight saving time at any future time.
 - seealso: #useDaylightTime
 */
- (jboolean)observesDaylightTime;

/*!
 @brief Sets the <code>TimeZone</code> that is
  returned by the <code>getDefault</code> method.If <code>zone</code>
  is null, reset the default to the value it had originally when the
  VM first started.
 @param tz the new default time zone
 */
+ (void)setDefaultWithAndroidIcuUtilTimeZone:(AndroidIcuUtilTimeZone *)tz;

/*!
 @brief Sets the default time zone type used by <code>getTimeZone</code>.
 @param type time zone type, either  <code> TIMEZONE_ICU </code>  or
    <code> TIMEZONE_JDK </code> .
 */
+ (void)setDefaultTimeZoneTypeWithInt:(jint)type;

/*!
 @brief Sets the time zone ID.This does not change any other data in
  the time zone object.
 @param ID the new time zone ID.
 */
- (void)setIDWithNSString:(NSString *)ID;

/*!
 @brief Sets the base time zone offset to GMT.
 This is the offset to add *to* UTC to get local time.
 @param offsetMillis the given base time zone offset to GMT.
 */
- (void)setRawOffsetWithInt:(jint)offsetMillis;

/*!
 @brief Queries if this time zone uses daylight savings time.
 @return true if this time zone uses daylight savings time,
  false, otherwise. 
 <p><strong>Note:</strong>The default implementation of
  ICU TimeZone uses the tz database, which supports historic
  rule changes, for system time zones. With the implementation,
  there are time zones that used daylight savings time in the
  past, but no longer used currently. For example, Asia/Tokyo has
  never used daylight savings time since 1951. Most clients would
  expect that this method to return <code>false</code> for such case.
  The default implementation of this method returns <code>true</code>
  when the time zone uses daylight savings time in the current
  (Gregorian) calendar year.
 */
- (jboolean)useDaylightTime;

#pragma mark Protected

/*!
 @brief Constructing a TimeZone with the given time zone ID.
 @param ID the time zone ID.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)ID __attribute__((deprecated));

#pragma mark Package-Private

/*!
 @brief Returns a frozen ICU type TimeZone object given a time zone ID.
 @param id_ the time zone ID
 @param trySystem if true tries the system time zones first otherwise skip to the    custom time zones.
 @return the frozen ICU TimeZone or null if one could not be created.
 */
+ (AndroidIcuUtilBasicTimeZone *)getFrozenICUTimeZoneWithNSString:(NSString *)id_
                                                      withBoolean:(jboolean)trySystem;

@end

J2OBJC_STATIC_INIT(AndroidIcuUtilTimeZone)

/*!
 @brief <strong>[icu]</strong> A time zone implementation type indicating ICU's own TimeZone used by 
 <code>getTimeZone</code>.
 */
inline jint AndroidIcuUtilTimeZone_get_TIMEZONE_ICU(void);
#define AndroidIcuUtilTimeZone_TIMEZONE_ICU 0
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuUtilTimeZone, TIMEZONE_ICU, jint)

/*!
 @brief <strong>[icu]</strong> A time zone implementation type indicating the <code>java.util.TimeZone</code>
  used by <code>getTimeZone</code>.
 */
inline jint AndroidIcuUtilTimeZone_get_TIMEZONE_JDK(void);
#define AndroidIcuUtilTimeZone_TIMEZONE_JDK 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuUtilTimeZone, TIMEZONE_JDK, jint)

/*!
 @brief A style specifier for <code>getDisplayName()</code> indicating
  a short name, such as "PST."
 - seealso: #LONG
 */
inline jint AndroidIcuUtilTimeZone_get_SHORT(void);
#define AndroidIcuUtilTimeZone_SHORT 0
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuUtilTimeZone, SHORT, jint)

/*!
 @brief A style specifier for <code>getDisplayName()</code> indicating
  a long name, such as "Pacific Standard Time."
 - seealso: #SHORT
 */
inline jint AndroidIcuUtilTimeZone_get_LONG(void);
#define AndroidIcuUtilTimeZone_LONG 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuUtilTimeZone, LONG, jint)

/*!
 @brief <strong>[icu]</strong> A style specifier for <code>getDisplayName()</code> indicating
  a short generic name, such as "PT."
 - seealso: #LONG_GENERIC
 */
inline jint AndroidIcuUtilTimeZone_get_SHORT_GENERIC(void);
#define AndroidIcuUtilTimeZone_SHORT_GENERIC 2
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuUtilTimeZone, SHORT_GENERIC, jint)

/*!
 @brief <strong>[icu]</strong> A style specifier for <code>getDisplayName()</code> indicating
  a long generic name, such as "Pacific Time."
 - seealso: #SHORT_GENERIC
 */
inline jint AndroidIcuUtilTimeZone_get_LONG_GENERIC(void);
#define AndroidIcuUtilTimeZone_LONG_GENERIC 3
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuUtilTimeZone, LONG_GENERIC, jint)

/*!
 @brief <strong>[icu]</strong> A style specifier for <code>getDisplayName()</code> indicating
  a short name derived from the timezone's offset, such as "-0800."
 - seealso: #LONG_GMT
 */
inline jint AndroidIcuUtilTimeZone_get_SHORT_GMT(void);
#define AndroidIcuUtilTimeZone_SHORT_GMT 4
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuUtilTimeZone, SHORT_GMT, jint)

/*!
 @brief <strong>[icu]</strong> A style specifier for <code>getDisplayName()</code> indicating
  a long name derived from the timezone's offset, such as "GMT-08:00."
 - seealso: #SHORT_GMT
 */
inline jint AndroidIcuUtilTimeZone_get_LONG_GMT(void);
#define AndroidIcuUtilTimeZone_LONG_GMT 5
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuUtilTimeZone, LONG_GMT, jint)

/*!
 @brief <strong>[icu]</strong> A style specifier for <code>getDisplayName()</code> indicating
  a short name derived from the timezone's short standard or daylight
  timezone name ignoring commonlyUsed, such as "PDT."
 */
inline jint AndroidIcuUtilTimeZone_get_SHORT_COMMONLY_USED(void);
#define AndroidIcuUtilTimeZone_SHORT_COMMONLY_USED 6
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuUtilTimeZone, SHORT_COMMONLY_USED, jint)

/*!
 @brief <strong>[icu]</strong> A style specifier for <code>getDisplayName()</code> indicating
  a long name derived from the timezone's fallback name, such as
  "United States (Los Angeles)."
 */
inline jint AndroidIcuUtilTimeZone_get_GENERIC_LOCATION(void);
#define AndroidIcuUtilTimeZone_GENERIC_LOCATION 7
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuUtilTimeZone, GENERIC_LOCATION, jint)

/*!
 @brief <strong>[icu]</strong> The time zone ID reserved for unknown time zone.
 - seealso: #getTimeZone(String)
 */
inline NSString *AndroidIcuUtilTimeZone_get_UNKNOWN_ZONE_ID(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuUtilTimeZone_UNKNOWN_ZONE_ID;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuUtilTimeZone, UNKNOWN_ZONE_ID, NSString *)

/*!
 @brief The canonical ID for GMT(UTC) time zone.
 */
inline NSString *AndroidIcuUtilTimeZone_get_GMT_ZONE_ID(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuUtilTimeZone_GMT_ZONE_ID;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuUtilTimeZone, GMT_ZONE_ID, NSString *)

/*!
 @brief <strong>[icu]</strong> The immutable (frozen) "unknown" time zone.
 It behaves like the GMT/UTC time zone but has the UNKNOWN_ZONE_ID = "Etc/Unknown". 
 <code>TimeZone.getTimeZone(String)</code> returns a mutable clone of this
  time zone if the input ID is not recognized.
 - seealso: #UNKNOWN_ZONE_ID
 - seealso: #getTimeZone(String)
 */
inline AndroidIcuUtilTimeZone *AndroidIcuUtilTimeZone_get_UNKNOWN_ZONE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuUtilTimeZone *AndroidIcuUtilTimeZone_UNKNOWN_ZONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuUtilTimeZone, UNKNOWN_ZONE, AndroidIcuUtilTimeZone *)

/*!
 @brief <strong>[icu]</strong> The immutable GMT (=UTC) time zone.Its ID is "Etc/GMT".
 */
inline AndroidIcuUtilTimeZone *AndroidIcuUtilTimeZone_get_GMT_ZONE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuUtilTimeZone *AndroidIcuUtilTimeZone_GMT_ZONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuUtilTimeZone, GMT_ZONE, AndroidIcuUtilTimeZone *)

FOUNDATION_EXPORT void AndroidIcuUtilTimeZone_init(AndroidIcuUtilTimeZone *self);

FOUNDATION_EXPORT void AndroidIcuUtilTimeZone_initWithNSString_(AndroidIcuUtilTimeZone *self, NSString *ID);

FOUNDATION_EXPORT AndroidIcuUtilTimeZone *AndroidIcuUtilTimeZone_getTimeZoneWithNSString_(NSString *ID);

FOUNDATION_EXPORT AndroidIcuUtilTimeZone *AndroidIcuUtilTimeZone_getFrozenTimeZoneWithNSString_(NSString *ID);

FOUNDATION_EXPORT AndroidIcuUtilTimeZone *AndroidIcuUtilTimeZone_getTimeZoneWithNSString_withInt_(NSString *ID, jint type);

FOUNDATION_EXPORT AndroidIcuUtilBasicTimeZone *AndroidIcuUtilTimeZone_getFrozenICUTimeZoneWithNSString_withBoolean_(NSString *id_, jboolean trySystem);

FOUNDATION_EXPORT void AndroidIcuUtilTimeZone_setDefaultTimeZoneTypeWithInt_(jint type);

FOUNDATION_EXPORT jint AndroidIcuUtilTimeZone_getDefaultTimeZoneType(void);

FOUNDATION_EXPORT id<JavaUtilSet> AndroidIcuUtilTimeZone_getAvailableIDsWithAndroidIcuUtilTimeZone_SystemTimeZoneType_withNSString_withJavaLangInteger_(AndroidIcuUtilTimeZone_SystemTimeZoneType *zoneType, NSString *region, JavaLangInteger *rawOffset);

FOUNDATION_EXPORT IOSObjectArray *AndroidIcuUtilTimeZone_getAvailableIDsWithInt_(jint rawOffset);

FOUNDATION_EXPORT IOSObjectArray *AndroidIcuUtilTimeZone_getAvailableIDsWithNSString_(NSString *country);

FOUNDATION_EXPORT IOSObjectArray *AndroidIcuUtilTimeZone_getAvailableIDs(void);

FOUNDATION_EXPORT jint AndroidIcuUtilTimeZone_countEquivalentIDsWithNSString_(NSString *id_);

FOUNDATION_EXPORT NSString *AndroidIcuUtilTimeZone_getEquivalentIDWithNSString_withInt_(NSString *id_, jint index);

FOUNDATION_EXPORT AndroidIcuUtilTimeZone *AndroidIcuUtilTimeZone_getDefault(void);

FOUNDATION_EXPORT void AndroidIcuUtilTimeZone_clearCachedDefault(void);

FOUNDATION_EXPORT void AndroidIcuUtilTimeZone_setDefaultWithAndroidIcuUtilTimeZone_(AndroidIcuUtilTimeZone *tz);

FOUNDATION_EXPORT NSString *AndroidIcuUtilTimeZone_getTZDataVersion(void);

FOUNDATION_EXPORT NSString *AndroidIcuUtilTimeZone_getCanonicalIDWithNSString_(NSString *id_);

FOUNDATION_EXPORT NSString *AndroidIcuUtilTimeZone_getCanonicalIDWithNSString_withBooleanArray_(NSString *id_, IOSBooleanArray *isSystemID);

FOUNDATION_EXPORT NSString *AndroidIcuUtilTimeZone_getRegionWithNSString_(NSString *id_);

FOUNDATION_EXPORT NSString *AndroidIcuUtilTimeZone_getWindowsIDWithNSString_(NSString *id_);

FOUNDATION_EXPORT NSString *AndroidIcuUtilTimeZone_getIDForWindowsIDWithNSString_withNSString_(NSString *winid, NSString *region);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuUtilTimeZone)

#endif

#if !defined (AndroidIcuUtilTimeZone_SystemTimeZoneType_) && (INCLUDE_ALL_AndroidIcuUtilTimeZone || defined(INCLUDE_AndroidIcuUtilTimeZone_SystemTimeZoneType))
#define AndroidIcuUtilTimeZone_SystemTimeZoneType_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, AndroidIcuUtilTimeZone_SystemTimeZoneType_Enum) {
  AndroidIcuUtilTimeZone_SystemTimeZoneType_Enum_ANY = 0,
  AndroidIcuUtilTimeZone_SystemTimeZoneType_Enum_CANONICAL = 1,
  AndroidIcuUtilTimeZone_SystemTimeZoneType_Enum_CANONICAL_LOCATION = 2,
};

/*!
 @brief <strong>[icu]</strong> System time zone type constants used by filtering zones in 
 <code>TimeZone.getAvailableIDs(SystemTimeZoneType, String, Integer)</code>
 */
@interface AndroidIcuUtilTimeZone_SystemTimeZoneType : JavaLangEnum

@property (readonly, class, nonnull) AndroidIcuUtilTimeZone_SystemTimeZoneType *ANY NS_SWIFT_NAME(ANY);
@property (readonly, class, nonnull) AndroidIcuUtilTimeZone_SystemTimeZoneType *CANONICAL NS_SWIFT_NAME(CANONICAL);
@property (readonly, class, nonnull) AndroidIcuUtilTimeZone_SystemTimeZoneType *CANONICAL_LOCATION NS_SWIFT_NAME(CANONICAL_LOCATION);
+ (AndroidIcuUtilTimeZone_SystemTimeZoneType * __nonnull)ANY;

+ (AndroidIcuUtilTimeZone_SystemTimeZoneType * __nonnull)CANONICAL;

+ (AndroidIcuUtilTimeZone_SystemTimeZoneType * __nonnull)CANONICAL_LOCATION;

#pragma mark Public

+ (AndroidIcuUtilTimeZone_SystemTimeZoneType *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (AndroidIcuUtilTimeZone_SystemTimeZoneType_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(AndroidIcuUtilTimeZone_SystemTimeZoneType)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT AndroidIcuUtilTimeZone_SystemTimeZoneType *AndroidIcuUtilTimeZone_SystemTimeZoneType_values_[];

/*!
 @brief Any system zones.
 */
inline AndroidIcuUtilTimeZone_SystemTimeZoneType *AndroidIcuUtilTimeZone_SystemTimeZoneType_get_ANY(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuUtilTimeZone_SystemTimeZoneType, ANY)

/*!
 @brief Canonical system zones.
 */
inline AndroidIcuUtilTimeZone_SystemTimeZoneType *AndroidIcuUtilTimeZone_SystemTimeZoneType_get_CANONICAL(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuUtilTimeZone_SystemTimeZoneType, CANONICAL)

/*!
 @brief Canonical system zones associated with actual locations.
 */
inline AndroidIcuUtilTimeZone_SystemTimeZoneType *AndroidIcuUtilTimeZone_SystemTimeZoneType_get_CANONICAL_LOCATION(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuUtilTimeZone_SystemTimeZoneType, CANONICAL_LOCATION)

FOUNDATION_EXPORT IOSObjectArray *AndroidIcuUtilTimeZone_SystemTimeZoneType_values(void);

FOUNDATION_EXPORT AndroidIcuUtilTimeZone_SystemTimeZoneType *AndroidIcuUtilTimeZone_SystemTimeZoneType_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT AndroidIcuUtilTimeZone_SystemTimeZoneType *AndroidIcuUtilTimeZone_SystemTimeZoneType_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuUtilTimeZone_SystemTimeZoneType)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_AndroidIcuUtilTimeZone")
