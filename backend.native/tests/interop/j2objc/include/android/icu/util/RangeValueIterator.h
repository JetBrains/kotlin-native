//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/external/icu/android_icu4j/src/main/java/android/icu/util/RangeValueIterator.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidIcuUtilRangeValueIterator")
#ifdef RESTRICT_AndroidIcuUtilRangeValueIterator
#define INCLUDE_ALL_AndroidIcuUtilRangeValueIterator 0
#else
#define INCLUDE_ALL_AndroidIcuUtilRangeValueIterator 1
#endif
#undef RESTRICT_AndroidIcuUtilRangeValueIterator

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (AndroidIcuUtilRangeValueIterator_) && (INCLUDE_ALL_AndroidIcuUtilRangeValueIterator || defined(INCLUDE_AndroidIcuUtilRangeValueIterator))
#define AndroidIcuUtilRangeValueIterator_

@class AndroidIcuUtilRangeValueIterator_Element;

/*!
 @brief <p>Interface for enabling iteration over sets of &lt;int index, int value&gt;,
  where index is the sorted integer index in ascending order and value, its
  associated integer value.
 <p>The result for each iteration is the consecutive range of 
 &lt;int index, int value&gt; with the same value. Result is represented by 
 &lt;start, limit, value&gt; where 
 <ul>
  <li> start is the starting integer of the result range 
 <li> limit is 1 after the maximum integer that follows start, such that
       all integers between start and (limit - 1), inclusive, have the same
       associated integer value. 
 <li> value is the integer value that all integers from start to (limit - 1)
       share in common. 
 </ul>
  <p>
  Hence value(start) = value(start + 1) = .... = value(start + n) = .... =
  value(limit - 1). However value(start -1) != value(start) and
  value(limit) != value(start).  
 <p>Most implementations will be created by factory methods, such as the
  character type iterator in UCharacter.getTypeIterator. See example below.  
 <p>Example of use:<br>
  @code

  RangeValueIterator iterator = UCharacter.getTypeIterator();
  RangeValueIterator.Element result = new RangeValueIterator.Element();
  while (iterator.next(result)) {
      System.out.println("Codepoint \\u" +
                         Integer.toHexString(result.start) +
                         " to codepoint \\u" +
                         Integer.toHexString(result.limit - 1) +
                         " has the character type " + result.value);
  } 
  
@endcode
 @author synwee
 */
@protocol AndroidIcuUtilRangeValueIterator < JavaObject >

/*!
 @brief <p>Returns the next maximal result range with a common value and returns
  true if we are not at the end of the iteration, false otherwise.
 <p>If this returns a false, the contents of elements will not
  be updated.
 @param element for storing the result range and value
 @return true if we are not at the end of the iteration, false otherwise.
 - seealso: Element
 */
- (jboolean)nextWithAndroidIcuUtilRangeValueIterator_Element:(AndroidIcuUtilRangeValueIterator_Element *)element;

/*!
 @brief Resets the iterator to the beginning of the iteration.
 */
- (void)reset;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidIcuUtilRangeValueIterator)

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuUtilRangeValueIterator)

#endif

#if !defined (AndroidIcuUtilRangeValueIterator_Element_) && (INCLUDE_ALL_AndroidIcuUtilRangeValueIterator || defined(INCLUDE_AndroidIcuUtilRangeValueIterator_Element))
#define AndroidIcuUtilRangeValueIterator_Element_

/*!
 @brief Return result wrapper for android.icu.util.RangeValueIterator.
 Stores the start and limit of the continous result range and the
  common value all integers between [start, limit - 1] has.
 */
@interface AndroidIcuUtilRangeValueIterator_Element : NSObject {
 @public
  /*!
   @brief Starting integer of the continuous result range that has the same
  value
   */
  jint start_;
  /*!
   @brief (End + 1) integer of continuous result range that has the same
  value
   */
  jint limit_;
  /*!
   @brief Gets the common value of the continous result range
   */
  jint value_;
}

#pragma mark Public

/*!
 @brief Empty default constructor to make javadoc happy
 */
- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidIcuUtilRangeValueIterator_Element)

FOUNDATION_EXPORT void AndroidIcuUtilRangeValueIterator_Element_init(AndroidIcuUtilRangeValueIterator_Element *self);

FOUNDATION_EXPORT AndroidIcuUtilRangeValueIterator_Element *new_AndroidIcuUtilRangeValueIterator_Element_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidIcuUtilRangeValueIterator_Element *create_AndroidIcuUtilRangeValueIterator_Element_init(void);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuUtilRangeValueIterator_Element)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_AndroidIcuUtilRangeValueIterator")
