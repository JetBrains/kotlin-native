//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/external/icu/android_icu4j/src/main/java/android/icu/util/ULocale.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidIcuUtilULocale")
#ifdef RESTRICT_AndroidIcuUtilULocale
#define INCLUDE_ALL_AndroidIcuUtilULocale 0
#else
#define INCLUDE_ALL_AndroidIcuUtilULocale 1
#endif
#undef RESTRICT_AndroidIcuUtilULocale

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (AndroidIcuUtilULocale_) && (INCLUDE_ALL_AndroidIcuUtilULocale || defined(INCLUDE_AndroidIcuUtilULocale))
#define AndroidIcuUtilULocale_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "java/lang/Comparable.h"

@class AndroidIcuUtilULocale_Category;
@class AndroidIcuUtilULocale_Minimize;
@class AndroidIcuUtilULocale_Type;
@class IOSBooleanArray;
@class IOSObjectArray;
@class JavaUtilLocale;
@protocol JavaUtilIterator;
@protocol JavaUtilSet;

/*!
 @brief <strong>[icu enhancement]</strong> ICU's replacement for <code>java.util.Locale</code>.
 &nbsp;Methods, fields, and other functionality specific to ICU are labeled '<strong>[icu]</strong>'.
 A class analogous to <code>java.util.Locale</code> that provides additional
  support for ICU protocol.  In ICU 3.0 this class is enhanced to support
  RFC 3066 language identifiers. 
 <p>Many classes and services in ICU follow a factory idiom, in
  which a factory method or object responds to a client request with
  an object.  The request includes a locale (the <i>requested</i>
  locale), and the returned object is constructed using data for that
  locale.  The system may lack data for the requested locale, in
  which case the locale fallback mechanism will be invoked until a
  populated locale is found (the <i>valid</i> locale).  Furthermore,
  even when a populated locale is found (the <i>valid</i> locale),
  further fallback may be required to reach a locale containing the
  specific data required by the service (the <i>actual</i> locale). 
 <p>ULocale performs <b>'normalization'</b> and <b>'canonicalization'</b> of locale ids.
  Normalization 'cleans up' ICU locale ids as follows: 
 <ul>
  <li>language, script, country, variant, and keywords are properly cased<br>
  (lower, title, upper, upper, and lower case respectively)</li>
  <li>hyphens used as separators are converted to underscores</li>
  <li>three-letter language and country ids are converted to two-letter
  equivalents where available</li>
  <li>surrounding spaces are removed from keywords and values</li>
  <li>if there are multiple keywords, they are put in sorted order</li>
  </ul>
  Canonicalization additionally performs the following: 
 <ul>
  <li>POSIX ids are converted to ICU format IDs</li>
  <li>'grandfathered' 3066 ids are converted to ICU standard form</li>
  <li>'PREEURO' and 'EURO' variants are converted to currency keyword form,
  with the currency
  id appropriate to the country of the locale (for PREEURO) or EUR (for EURO). 
 </ul>
  All ULocale constructors automatically normalize the locale id.  To handle
  POSIX ids, <code>canonicalize</code> can be called to convert the id
  to canonical form, or the <code>canonicalInstance</code> factory method
  can be called. 
 <p>Note: The <i>actual</i> locale is returned correctly, but the <i>valid</i>
  locale is not, in most cases.
 - seealso: java.util.Locale
 @author weiv
 @author Alan Liu
 @author Ram Viswanadha
 */
@interface AndroidIcuUtilULocale : NSObject < JavaIoSerializable, JavaLangComparable >
@property (readonly, class, strong) AndroidIcuUtilULocale *ENGLISH NS_SWIFT_NAME(ENGLISH);
@property (readonly, class, strong) AndroidIcuUtilULocale *FRENCH NS_SWIFT_NAME(FRENCH);
@property (readonly, class, strong) AndroidIcuUtilULocale *GERMAN NS_SWIFT_NAME(GERMAN);
@property (readonly, class, strong) AndroidIcuUtilULocale *ITALIAN NS_SWIFT_NAME(ITALIAN);
@property (readonly, class, strong) AndroidIcuUtilULocale *JAPANESE NS_SWIFT_NAME(JAPANESE);
@property (readonly, class, strong) AndroidIcuUtilULocale *KOREAN NS_SWIFT_NAME(KOREAN);
@property (readonly, class, strong) AndroidIcuUtilULocale *CHINESE NS_SWIFT_NAME(CHINESE);
@property (readonly, class, strong) AndroidIcuUtilULocale *SIMPLIFIED_CHINESE NS_SWIFT_NAME(SIMPLIFIED_CHINESE);
@property (readonly, class, strong) AndroidIcuUtilULocale *TRADITIONAL_CHINESE NS_SWIFT_NAME(TRADITIONAL_CHINESE);
@property (readonly, class, strong) AndroidIcuUtilULocale *FRANCE NS_SWIFT_NAME(FRANCE);
@property (readonly, class, strong) AndroidIcuUtilULocale *GERMANY NS_SWIFT_NAME(GERMANY);
@property (readonly, class, strong) AndroidIcuUtilULocale *ITALY NS_SWIFT_NAME(ITALY);
@property (readonly, class, strong) AndroidIcuUtilULocale *JAPAN NS_SWIFT_NAME(JAPAN);
@property (readonly, class, strong) AndroidIcuUtilULocale *KOREA NS_SWIFT_NAME(KOREA);
@property (readonly, class, strong) AndroidIcuUtilULocale *CHINA NS_SWIFT_NAME(CHINA);
@property (readonly, class, strong) AndroidIcuUtilULocale *PRC NS_SWIFT_NAME(PRC);
@property (readonly, class, strong) AndroidIcuUtilULocale *TAIWAN NS_SWIFT_NAME(TAIWAN);
@property (readonly, class, strong) AndroidIcuUtilULocale *UK NS_SWIFT_NAME(UK);
@property (readonly, class, strong) AndroidIcuUtilULocale *US NS_SWIFT_NAME(US);
@property (readonly, class, strong) AndroidIcuUtilULocale *CANADA NS_SWIFT_NAME(CANADA);
@property (readonly, class, strong) AndroidIcuUtilULocale *CANADA_FRENCH NS_SWIFT_NAME(CANADA_FRENCH);
@property (readonly, class, strong) AndroidIcuUtilULocale *ROOT NS_SWIFT_NAME(ROOT);
@property (class, strong) AndroidIcuUtilULocale_Type *ACTUAL_LOCALE NS_SWIFT_NAME(ACTUAL_LOCALE);
@property (class, strong) AndroidIcuUtilULocale_Type *VALID_LOCALE NS_SWIFT_NAME(VALID_LOCALE);
@property (readonly, class) jchar PRIVATE_USE_EXTENSION NS_SWIFT_NAME(PRIVATE_USE_EXTENSION);
@property (readonly, class) jchar UNICODE_LOCALE_EXTENSION NS_SWIFT_NAME(UNICODE_LOCALE_EXTENSION);

+ (AndroidIcuUtilULocale *)ENGLISH;

+ (AndroidIcuUtilULocale *)FRENCH;

+ (AndroidIcuUtilULocale *)GERMAN;

+ (AndroidIcuUtilULocale *)ITALIAN;

+ (AndroidIcuUtilULocale *)JAPANESE;

+ (AndroidIcuUtilULocale *)KOREAN;

+ (AndroidIcuUtilULocale *)CHINESE;

+ (AndroidIcuUtilULocale *)SIMPLIFIED_CHINESE;

+ (AndroidIcuUtilULocale *)TRADITIONAL_CHINESE;

+ (AndroidIcuUtilULocale *)FRANCE;

+ (AndroidIcuUtilULocale *)GERMANY;

+ (AndroidIcuUtilULocale *)ITALY;

+ (AndroidIcuUtilULocale *)JAPAN;

+ (AndroidIcuUtilULocale *)KOREA;

+ (AndroidIcuUtilULocale *)CHINA;

+ (AndroidIcuUtilULocale *)PRC;

+ (AndroidIcuUtilULocale *)TAIWAN;

+ (AndroidIcuUtilULocale *)UK;

+ (AndroidIcuUtilULocale *)US;

+ (AndroidIcuUtilULocale *)CANADA;

+ (AndroidIcuUtilULocale *)CANADA_FRENCH;

+ (AndroidIcuUtilULocale *)ROOT;

+ (AndroidIcuUtilULocale_Type *)ACTUAL_LOCALE;

+ (void)setACTUAL_LOCALE:(AndroidIcuUtilULocale_Type *)value;

+ (AndroidIcuUtilULocale_Type *)VALID_LOCALE;

+ (void)setVALID_LOCALE:(AndroidIcuUtilULocale_Type *)value;

+ (jchar)PRIVATE_USE_EXTENSION;

+ (jchar)UNICODE_LOCALE_EXTENSION;

#pragma mark Public

/*!
 @brief <strong>[icu]</strong> Constructs a ULocale from a RFC 3066 locale ID.The locale ID consists
  of optional language, script, country, and variant fields in that order,
  separated by underscores, followed by an optional keyword list.
 The
  script, if present, is four characters long-- this distinguishes it
  from a country code, which is two characters long.  Other fields
  are distinguished by position as indicated by the underscores.  The
  start of the keyword list is indicated by '@@', and consists of two
  or more keyword/value pairs separated by semicolons(';'). 
 <p>This constructor does not canonicalize the localeID.  So, for
  example, "zh__pinyin" remains unchanged instead of converting
  to "zh@@collation=pinyin".  By default ICU only recognizes the
  latter as specifying pinyin collation.  Use <code>createCanonical</code>
  or <code>canonicalize</code> if you need to canonicalize the localeID.
 @param localeID string representation of the locale, e.g:  "en_US", "sy_Cyrl_YU", "zh__pinyin", "es_ES@@currency=EUR;collation=traditional"
 */
- (instancetype __nonnull)initWithNSString:(NSString *)localeID;

/*!
 @brief Convenience overload of ULocale(String, String, String) for
  compatibility with java.util.Locale.
 - seealso: #ULocale(String, String, String)
 */
- (instancetype __nonnull)initWithNSString:(NSString *)a
                              withNSString:(NSString *)b;

/*!
 @brief Constructs a ULocale from a localeID constructed from the three 'fields' a, b, and
  c.These fields are concatenated using underscores to form a localeID of the form
  a_b_c, which is then handled like the localeID passed to <code>ULocale(String
  localeID)</code>.
 <p>Java locale strings consisting of language, country, and
  variant will be handled by this form, since the country code
  (being shorter than four letters long) will not be interpreted
  as a script code.  If a script code is present, the final
  argument ('c') will be interpreted as the country code.  It is
  recommended that this constructor only be used to ease porting,
  and that clients instead use the single-argument constructor
  when constructing a ULocale from a localeID.
 @param a first component of the locale id
 @param b second component of the locale id
 @param c third component of the locale id
 - seealso: #ULocale(String)
 */
- (instancetype __nonnull)initWithNSString:(NSString *)a
                              withNSString:(NSString *)b
                              withNSString:(NSString *)c;

/*!
 @brief <strong>[icu]</strong> Based on a HTTP formatted list of acceptable locales, determine an available
  locale for the user.NullPointerException is thrown if acceptLanguageList or
  availableLocales is null.
 If fallback is non-null, it will contain true if a
  fallback locale (one not in the acceptLanguageList) was returned.  The value on
  entry is ignored.  ULocale will be one of the locales in availableLocales, or the
  ROOT ULocale if if a ROOT locale was used as a fallback (because nothing else in
  availableLocales matched).  No ULocale array element should be null; behavior is
  undefined if this is the case.  This function will choose a locale from the
  ULocale.getAvailableLocales() list as available.
 @param acceptLanguageList list in HTTP "Accept-Language:" format of acceptable locales
 @param fallback if non-null, a 1-element array containing a boolean to be set with  the fallback status
 @return one of the locales from the ULocale.getAvailableLocales() list, or null if
  none match
 */
+ (AndroidIcuUtilULocale *)acceptLanguageWithNSString:(NSString *)acceptLanguageList
                                     withBooleanArray:(IOSBooleanArray *)fallback;

/*!
 @brief <strong>[icu]</strong> Based on a HTTP formatted list of acceptable locales, determine an available
  locale for the user.NullPointerException is thrown if acceptLanguageList or
  availableLocales is null.
 If fallback is non-null, it will contain true if a
  fallback locale (one not in the acceptLanguageList) was returned.  The value on
  entry is ignored.  ULocale will be one of the locales in availableLocales, or the
  ROOT ULocale if if a ROOT locale was used as a fallback (because nothing else in
  availableLocales matched).  No ULocale array element should be null; behavior is
  undefined if this is the case.
 @param acceptLanguageList list in HTTP "Accept-Language:" format of acceptable locales
 @param availableLocales list of available locales. One of these will be returned.
 @param fallback if non-null, a 1-element array containing a boolean to be set with  the fallback status
 @return one of the locales from the availableLocales list, or null if none match
 */
+ (AndroidIcuUtilULocale *)acceptLanguageWithNSString:(NSString *)acceptLanguageList
                       withAndroidIcuUtilULocaleArray:(IOSObjectArray *)availableLocales
                                     withBooleanArray:(IOSBooleanArray *)fallback;

/*!
 @brief <strong>[icu]</strong> Based on an ordered array of acceptable locales, determine an available
  locale for the user.NullPointerException is thrown if acceptLanguageList or
  availableLocales is null.
 If fallback is non-null, it will contain true if a
  fallback locale (one not in the acceptLanguageList) was returned.  The value on
  entry is ignored.  ULocale will be one of the locales in availableLocales, or the
  ROOT ULocale if if a ROOT locale was used as a fallback (because nothing else in
  availableLocales matched).  No ULocale array element should be null; behavior is
  undefined if this is the case.  This function will choose a locale from the
  ULocale.getAvailableLocales() list as available.
 @param acceptLanguageList ordered array of acceptable locales (preferred are listed first)
 @param fallback if non-null, a 1-element array containing a boolean to be set with  the fallback status
 @return one of the locales from the ULocale.getAvailableLocales() list, or null if none match
 */
+ (AndroidIcuUtilULocale *)acceptLanguageWithAndroidIcuUtilULocaleArray:(IOSObjectArray *)acceptLanguageList
                                                       withBooleanArray:(IOSBooleanArray *)fallback;

/*!
 @brief <strong>[icu]</strong> Based on a list of acceptable locales, determine an available locale for the
  user.NullPointerException is thrown if acceptLanguageList or availableLocales is
  null.
 If fallback is non-null, it will contain true if a fallback locale (one not
  in the acceptLanguageList) was returned.  The value on entry is ignored.  ULocale
  will be one of the locales in availableLocales, or the ROOT ULocale if if a ROOT
  locale was used as a fallback (because nothing else in availableLocales matched).
  No ULocale array element should be null; behavior is undefined if this is the case.
 @param acceptLanguageList list of acceptable locales
 @param availableLocales list of available locales. One of these will be returned.
 @param fallback if non-null, a 1-element array containing a boolean to be set with  the fallback status
 @return one of the locales from the availableLocales list, or null if none match
 */
+ (AndroidIcuUtilULocale *)acceptLanguageWithAndroidIcuUtilULocaleArray:(IOSObjectArray *)acceptLanguageList
                                         withAndroidIcuUtilULocaleArray:(IOSObjectArray *)availableLocales
                                                       withBooleanArray:(IOSBooleanArray *)fallback;

/*!
 @brief <strong>[icu]</strong> Adds the likely subtags for a provided locale ID, per the algorithm
  described in the following CLDR technical report:
    http://www.unicode.org/reports/tr35/#Likely_Subtags
  If the provided ULocale instance is already in the maximal form, or there is no
  data available available for maximization, it will be returned.For example,
  "und-Zzzz" cannot be maximized, since there is no reasonable maximization.
 Otherwise, a new ULocale instance with the maximal form is returned.
  Examples:
  "en" maximizes to "en_Latn_US"
  "de" maximizes to "de_Latn_US"
  "sr" maximizes to "sr_Cyrl_RS"
  "sh" maximizes to "sr_Latn_RS" (Note this will not reverse.)
  "zh_Hani" maximizes to "zh_Hans_CN" (Note this will not reverse.)
 @param loc The ULocale to maximize
 @return The maximized ULocale instance.
 */
+ (AndroidIcuUtilULocale *)addLikelySubtagsWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)loc;

/*!
 @brief <strong>[icu]</strong> Returns the canonical name for the specified locale ID.This is used to
  convert POSIX and other grandfathered IDs to standard ICU form.
 @param localeID the locale id
 @return the canonicalized id
 */
+ (NSString *)canonicalizeWithNSString:(NSString *)localeID;

/*!
 @brief This is for compatibility with Locale-- in actuality, since ULocale is
  immutable, there is no reason to clone it, so this API returns 'this'.
 */
- (id)java_clone;

/*!
 @brief Compares two ULocale for ordering.
 <p><b>Note:</b> The order might change in future.
 @param other the ULocale to be compared.
 @return a negative integer, zero, or a positive integer as this ULocale is less than, equal to, or greater
  than the specified ULocale.
 @throw NullPointerExceptionif <code>other</code> is null.
 */
- (jint)compareToWithId:(AndroidIcuUtilULocale *)other;

/*!
 @brief <strong>[icu]</strong> Creates a ULocale from the id by first canonicalizing the id.
 @param nonCanonicalID the locale id to canonicalize
 @return the locale created from the canonical version of the ID.
 */
+ (AndroidIcuUtilULocale *)createCanonicalWithNSString:(NSString *)nonCanonicalID;

/*!
 @brief Returns true if the other object is another ULocale with the
  same full name.
 Note that since names are not canonicalized, two ULocales that
  function identically might not compare equal.
 @return true if this Locale is equal to the specified object.
 */
- (jboolean)isEqual:(id)obj;

/*!
 @brief Returns a locale for the specified IETF BCP 47 language tag string.
 <p>If the specified language tag contains any ill-formed subtags,
  the first such subtag and all following subtags are ignored.  Compare
  to <code>ULocale.Builder.setLanguageTag</code> which throws an exception
  in this case. 
 <p>The following <b>conversions</b> are performed: 
 <ul>
  
 <li>The language code "und" is mapped to language "". 
 <li>The portion of a private use subtag prefixed by "lvariant",
  if any, is removed and appended to the variant field in the
  result locale (without case normalization).  If it is then
  empty, the private use subtag is discarded: 
 @code

      ULocale loc;
      loc = ULocale.forLanguageTag("en-US-x-lvariant-icu4j);
      loc.getVariant(); // returns "ICU4J"
      loc.getExtension('x'); // returns null
      loc = Locale.forLanguageTag("de-icu4j-x-URP-lvariant-Abc-Def");
      loc.getVariant(); // returns "ICU4J_ABC_DEF"
      loc.getExtension('x'); // returns "urp" 
  
@endcode
  
 <li>When the languageTag argument contains an extlang subtag,
  the first such subtag is used as the language, and the primary
  language subtag and other extlang subtags are ignored: 
 @code

      ULocale.forLanguageTag("ar-aao").getLanguage(); // returns "aao"
      ULocale.forLanguageTag("en-abc-def-us").toString(); // returns "abc_US" 
  
@endcode
  
 <li>Case is normalized. Language is normalized to lower case,
  script to title case, country to upper case, variant to upper case,
  and extensions to lower case. 
 </ul>
  
 <p>This implements the 'Language-Tag' production of BCP47, and
  so supports grandfathered (regular and irregular) as well as
  private use language tags.  Stand alone private use tags are
  represented as empty language and extension 'x-whatever',
  and grandfathered tags are converted to their canonical replacements
  where they exist. 
 <p>Grandfathered tags with canonical replacements are as follows: 
 <table>
  <tbody align="center">
  <tr><th>grandfathered tag</th><th>&nbsp;</th><th>modern replacement</th></tr>
  <tr><td>art-lojban</td><td>&nbsp;</td><td>jbo</td></tr>
  <tr><td>i-ami</td><td>&nbsp;</td><td>ami</td></tr>
  <tr><td>i-bnn</td><td>&nbsp;</td><td>bnn</td></tr>
  <tr><td>i-hak</td><td>&nbsp;</td><td>hak</td></tr>
  <tr><td>i-klingon</td><td>&nbsp;</td><td>tlh</td></tr>
  <tr><td>i-lux</td><td>&nbsp;</td><td>lb</td></tr>
  <tr><td>i-navajo</td><td>&nbsp;</td><td>nv</td></tr>
  <tr><td>i-pwn</td><td>&nbsp;</td><td>pwn</td></tr>
  <tr><td>i-tao</td><td>&nbsp;</td><td>tao</td></tr>
  <tr><td>i-tay</td><td>&nbsp;</td><td>tay</td></tr>
  <tr><td>i-tsu</td><td>&nbsp;</td><td>tsu</td></tr>
  <tr><td>no-bok</td><td>&nbsp;</td><td>nb</td></tr>
  <tr><td>no-nyn</td><td>&nbsp;</td><td>nn</td></tr>
  <tr><td>sgn-BE-FR</td><td>&nbsp;</td><td>sfb</td></tr>
  <tr><td>sgn-BE-NL</td><td>&nbsp;</td><td>vgt</td></tr>
  <tr><td>sgn-CH-DE</td><td>&nbsp;</td><td>sgg</td></tr>
  <tr><td>zh-guoyu</td><td>&nbsp;</td><td>cmn</td></tr>
  <tr><td>zh-hakka</td><td>&nbsp;</td><td>hak</td></tr>
  <tr><td>zh-min-nan</td><td>&nbsp;</td><td>nan</td></tr>
  <tr><td>zh-xiang</td><td>&nbsp;</td><td>hsn</td></tr>
  </tbody>
  </table>
  
 <p>Grandfathered tags with no modern replacement will be
  converted as follows: 
 <table>
  <tbody align="center">
  <tr><th>grandfathered tag</th><th>&nbsp;</th><th>converts to</th></tr>
  <tr><td>cel-gaulish</td><td>&nbsp;</td><td>xtg-x-cel-gaulish</td></tr>
  <tr><td>en-GB-oed</td><td>&nbsp;</td><td>en-GB-x-oed</td></tr>
  <tr><td>i-default</td><td>&nbsp;</td><td>en-x-i-default</td></tr>
  <tr><td>i-enochian</td><td>&nbsp;</td><td>und-x-i-enochian</td></tr>
  <tr><td>i-mingo</td><td>&nbsp;</td><td>see-x-i-mingo</td></tr>
  <tr><td>zh-min</td><td>&nbsp;</td><td>nan-x-zh-min</td></tr>
  </tbody>
  </table>
  
 <p>For a list of all grandfathered tags, see the
  IANA Language Subtag Registry (search for "Type: grandfathered"). 
 <p><b>Note</b>: there is no guarantee that <code>toLanguageTag</code>
  and <code>forLanguageTag</code> will round-trip.
 @param languageTag the language tag
 @return The locale that best represents the language tag.
 @throw NullPointerExceptionif <code>languageTag</code> is <code>null</code>
 - seealso: #toLanguageTag()
 - seealso: ULocale.Builder#setLanguageTag(String)
 */
+ (AndroidIcuUtilULocale *)forLanguageTagWithNSString:(NSString *)languageTag;

/*!
 @brief <strong>[icu]</strong> Returns a ULocale object for a <code>java.util.Locale</code>.
 The ULocale is canonicalized.
 @param loc a <code>java.util.Locale</code>
 */
+ (AndroidIcuUtilULocale *)forLocaleWithJavaUtilLocale:(JavaUtilLocale *)loc;

/*!
 @brief <strong>[icu] Note:</strong> Unlike the Locale API, this returns an array of <code>ULocale</code>,
  not <code>Locale</code>.Returns a list of all installed locales.
 */
+ (IOSObjectArray *)getAvailableLocales;

/*!
 @brief <strong>[icu]</strong> Returns the (normalized) base name for this locale,
  like <code>getName()</code>, but without keywords.
 @return the base name as a String.
 */
- (NSString *)getBaseName;

/*!
 @brief <strong>[icu]</strong> Returns the (normalized) base name for the specified locale,
  like <code>getName(String)</code>, but without keywords.
 @param localeID the locale ID as a string
 @return the base name as a String.
 */
+ (NSString *)getBaseNameWithNSString:(NSString *)localeID;

/*!
 @brief <strong>[icu]</strong> Returns this locale's layout orientation for characters.The possible
  values are "left-to-right", "right-to-left", "top-to-bottom" or
  "bottom-to-top".
 @return The locale's layout orientation for characters.
 */
- (NSString *)getCharacterOrientation;

/*!
 @brief Returns the country/region code for this locale, which will either be the empty string
  or an uppercase ISO 3166 2-letter code.
 - seealso: #getDisplayCountry()
 - seealso: #getDisplayCountry(ULocale)
 */
- (NSString *)getCountry;

/*!
 @brief <strong>[icu]</strong> Returns the country/region code for this locale, which will either be the empty string
  or an uppercase ISO 3166 2-letter code.
 @param localeID The locale identification string.
 - seealso: #getDisplayCountry()
 - seealso: #getDisplayCountry(ULocale)
 */
+ (NSString *)getCountryWithNSString:(NSString *)localeID;

/*!
 @brief Returns the current default ULocale.
 <p>
  The default ULocale is synchronized to the default Java Locale. This method checks
  the current default Java Locale and returns an equivalent ULocale.
 @return the default ULocale.
 */
+ (AndroidIcuUtilULocale *)getDefault;

/*!
 @brief Returns the current default ULocale for the specified category.
 @param category the category
 @return the default ULocale for the specified category.
 */
+ (AndroidIcuUtilULocale *)getDefaultWithAndroidIcuUtilULocale_Category:(AndroidIcuUtilULocale_Category *)category;

/*!
 @brief Returns this locale's country localized for display in the default <code>DISPLAY</code> locale.
 <b>Warning: </b>this is for the region part of a valid locale ID; it cannot just be the region code (like "FR").
  To get the display name for a region alone, or for other options, use <code>LocaleDisplayNames</code> instead.
 @return the localized country name.
 - seealso: Category#DISPLAY
 */
- (NSString *)getDisplayCountry;

/*!
 @brief <strong>[icu]</strong> Returns a locale's country localized for display in the provided locale.
 <b>Warning: </b>this is for the region part of a valid locale ID; it cannot just be the region code (like "FR").
  To get the display name for a region alone, or for other options, use <code>LocaleDisplayNames</code> instead.
  This is a cover for the ICU4C API.
 @param localeID the id of the locale whose country will be displayed
 @param displayLocaleID the id of the locale in which to display the name.
 @return the localized country name.
 */
+ (NSString *)getDisplayCountryWithNSString:(NSString *)localeID
                               withNSString:(NSString *)displayLocaleID;

/*!
 @brief <strong>[icu]</strong> Returns a locale's country localized for display in the provided locale.
 <b>Warning: </b>this is for the region part of a valid locale ID; it cannot just be the region code (like "FR").
  To get the display name for a region alone, or for other options, use <code>LocaleDisplayNames</code> instead.
  This is a cover for the ICU4C API.
 @param localeID the id of the locale whose country will be displayed.
 @param displayLocale the locale in which to display the name.
 @return the localized country name.
 */
+ (NSString *)getDisplayCountryWithNSString:(NSString *)localeID
                  withAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)displayLocale;

/*!
 @brief Returns this locale's country localized for display in the provided locale.
 <b>Warning: </b>this is for the region part of a valid locale ID; it cannot just be the region code (like "FR").
  To get the display name for a region alone, or for other options, use <code>LocaleDisplayNames</code> instead.
 @param displayLocale the locale in which to display the name.
 @return the localized country name.
 */
- (NSString *)getDisplayCountryWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)displayLocale;

/*!
 @brief <strong>[icu]</strong> Returns a keyword localized for display in the default <code>DISPLAY</code> locale.
 @param keyword the keyword to be displayed.
 @return the localized keyword name.
 - seealso: #getKeywords()
 - seealso: Category#DISPLAY
 */
+ (NSString *)getDisplayKeywordWithNSString:(NSString *)keyword;

/*!
 @brief <strong>[icu]</strong> Returns a keyword localized for display in the specified locale.
 @param keyword the keyword to be displayed.
 @param displayLocaleID the id of the locale in which to display the keyword.
 @return the localized keyword name.
 - seealso: #getKeywords(String)
 */
+ (NSString *)getDisplayKeywordWithNSString:(NSString *)keyword
                               withNSString:(NSString *)displayLocaleID;

/*!
 @brief <strong>[icu]</strong> Returns a keyword localized for display in the specified locale.
 @param keyword the keyword to be displayed.
 @param displayLocale the locale in which to display the keyword.
 @return the localized keyword name.
 - seealso: #getKeywords(String)
 */
+ (NSString *)getDisplayKeywordWithNSString:(NSString *)keyword
                  withAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)displayLocale;

/*!
 @brief <strong>[icu]</strong> Returns a keyword value localized for display in the default <code>DISPLAY</code> locale.
 @param keyword the keyword whose value is to be displayed.
 @return the localized value name.
 - seealso: Category#DISPLAY
 */
- (NSString *)getDisplayKeywordValueWithNSString:(NSString *)keyword;

/*!
 @brief <strong>[icu]</strong> Returns a keyword value localized for display in the specified locale.
 This is a cover for the ICU4C API.
 @param localeID the id of the locale whose keyword value is to be displayed.
 @param keyword the keyword whose value is to be displayed.
 @param displayLocaleID the id of the locale in which to display the value.
 @return the localized value name.
 */
+ (NSString *)getDisplayKeywordValueWithNSString:(NSString *)localeID
                                    withNSString:(NSString *)keyword
                                    withNSString:(NSString *)displayLocaleID;

/*!
 @brief <strong>[icu]</strong> Returns a keyword value localized for display in the specified locale.
 This is a cover for the ICU4C API.
 @param localeID the id of the locale whose keyword value is to be displayed.
 @param keyword the keyword whose value is to be displayed.
 @param displayLocale the id of the locale in which to display the value.
 @return the localized value name.
 */
+ (NSString *)getDisplayKeywordValueWithNSString:(NSString *)localeID
                                    withNSString:(NSString *)keyword
                       withAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)displayLocale;

/*!
 @brief <strong>[icu]</strong> Returns a keyword value localized for display in the specified locale.
 @param keyword the keyword whose value is to be displayed.
 @param displayLocale the locale in which to display the value.
 @return the localized value name.
 */
- (NSString *)getDisplayKeywordValueWithNSString:(NSString *)keyword
                       withAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)displayLocale;

/*!
 @brief Returns this locale's language localized for display in the default <code>DISPLAY</code> locale.
 @return the localized language name.
 - seealso: Category#DISPLAY
 */
- (NSString *)getDisplayLanguage;

/*!
 @brief <strong>[icu]</strong> Returns a locale's language localized for display in the provided locale.
 This is a cover for the ICU4C API.
 @param localeID the id of the locale whose language will be displayed
 @param displayLocaleID the id of the locale in which to display the name.
 @return the localized language name.
 */
+ (NSString *)getDisplayLanguageWithNSString:(NSString *)localeID
                                withNSString:(NSString *)displayLocaleID;

/*!
 @brief <strong>[icu]</strong> Returns a locale's language localized for display in the provided locale.
 This is a cover for the ICU4C API.
 @param localeID the id of the locale whose language will be displayed.
 @param displayLocale the locale in which to display the name.
 @return the localized language name.
 */
+ (NSString *)getDisplayLanguageWithNSString:(NSString *)localeID
                   withAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)displayLocale;

/*!
 @brief Returns this locale's language localized for display in the provided locale.
 @param displayLocale the locale in which to display the name.
 @return the localized language name.
 */
- (NSString *)getDisplayLanguageWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)displayLocale;

/*!
 @brief <strong>[icu]</strong> Returns this locale's language localized for display in the default <code>DISPLAY</code> locale.
 If a dialect name is present in the data, then it is returned.
 @return the localized language name.
 - seealso: Category#DISPLAY
 */
- (NSString *)getDisplayLanguageWithDialect;

/*!
 @brief <strong>[icu]</strong> Returns a locale's language localized for display in the provided locale.
 If a dialect name is present in the data, then it is returned.
  This is a cover for the ICU4C API.
 @param localeID the id of the locale whose language will be displayed
 @param displayLocaleID the id of the locale in which to display the name.
 @return the localized language name.
 */
+ (NSString *)getDisplayLanguageWithDialectWithNSString:(NSString *)localeID
                                           withNSString:(NSString *)displayLocaleID;

/*!
 @brief <strong>[icu]</strong> Returns a locale's language localized for display in the provided locale.
 If a dialect name is present in the data, then it is returned.
  This is a cover for the ICU4C API.
 @param localeID the id of the locale whose language will be displayed.
 @param displayLocale the locale in which to display the name.
 @return the localized language name.
 */
+ (NSString *)getDisplayLanguageWithDialectWithNSString:(NSString *)localeID
                              withAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)displayLocale;

/*!
 @brief <strong>[icu]</strong> Returns this locale's language localized for display in the provided locale.
 If a dialect name is present in the data, then it is returned.
 @param displayLocale the locale in which to display the name.
 @return the localized language name.
 */
- (NSString *)getDisplayLanguageWithDialectWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)displayLocale;

/*!
 @brief Returns this locale name localized for display in the default <code>DISPLAY</code> locale.
 @return the localized locale name.
 - seealso: Category#DISPLAY
 */
- (NSString *)getDisplayName;

/*!
 @brief <strong>[icu]</strong> Returns the locale ID localized for display in the provided locale.
 This is a cover for the ICU4C API.
 @param localeID the locale whose name is to be displayed.
 @param displayLocaleID the id of the locale in which to display the locale name.
 @return the localized locale name.
 */
+ (NSString *)getDisplayNameWithNSString:(NSString *)localeID
                            withNSString:(NSString *)displayLocaleID;

/*!
 @brief <strong>[icu]</strong> Returns the locale ID localized for display in the provided locale.
 This is a cover for the ICU4C API.
 @param localeID the locale whose name is to be displayed.
 @param displayLocale the locale in which to display the locale name.
 @return the localized locale name.
 */
+ (NSString *)getDisplayNameWithNSString:(NSString *)localeID
               withAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)displayLocale;

/*!
 @brief Returns this locale name localized for display in the provided locale.
 @param displayLocale the locale in which to display the locale name.
 @return the localized locale name.
 */
- (NSString *)getDisplayNameWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)displayLocale;

/*!
 @brief <strong>[icu]</strong> Returns this locale name localized for display in the default <code>DISPLAY</code> locale.
 If a dialect name is present in the locale data, then it is returned.
 @return the localized locale name.
 - seealso: Category#DISPLAY
 */
- (NSString *)getDisplayNameWithDialect;

/*!
 @brief <strong>[icu]</strong> Returns the locale ID localized for display in the provided locale.
 If a dialect name is present in the locale data, then it is returned.
  This is a cover for the ICU4C API.
 @param localeID the locale whose name is to be displayed.
 @param displayLocaleID the id of the locale in which to display the locale name.
 @return the localized locale name.
 */
+ (NSString *)getDisplayNameWithDialectWithNSString:(NSString *)localeID
                                       withNSString:(NSString *)displayLocaleID;

/*!
 @brief <strong>[icu]</strong> Returns the locale ID localized for display in the provided locale.
 If a dialect name is present in the locale data, then it is returned.
  This is a cover for the ICU4C API.
 @param localeID the locale whose name is to be displayed.
 @param displayLocale the locale in which to display the locale name.
 @return the localized locale name.
 */
+ (NSString *)getDisplayNameWithDialectWithNSString:(NSString *)localeID
                          withAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)displayLocale;

/*!
 @brief <strong>[icu]</strong> Returns this locale name localized for display in the provided locale.
 If a dialect name is present in the locale data, then it is returned.
 @param displayLocale the locale in which to display the locale name.
 @return the localized locale name.
 */
- (NSString *)getDisplayNameWithDialectWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)displayLocale;

/*!
 @brief Returns this locale's script localized for display in the default <code>DISPLAY</code> locale.
 @return the localized script name.
 - seealso: Category#DISPLAY
 */
- (NSString *)getDisplayScript;

/*!
 @brief <strong>[icu]</strong> Returns a locale's script localized for display in the provided locale.
 This is a cover for the ICU4C API.
 @param localeID the id of the locale whose script will be displayed
 @param displayLocaleID the id of the locale in which to display the name.
 @return the localized script name.
 */
+ (NSString *)getDisplayScriptWithNSString:(NSString *)localeID
                              withNSString:(NSString *)displayLocaleID;

/*!
 @brief <strong>[icu]</strong> Returns a locale's script localized for display in the provided locale.
 @param localeID the id of the locale whose script will be displayed.
 @param displayLocale the locale in which to display the name.
 @return the localized script name.
 */
+ (NSString *)getDisplayScriptWithNSString:(NSString *)localeID
                 withAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)displayLocale;

/*!
 @brief Returns this locale's script localized for display in the provided locale.
 @param displayLocale the locale in which to display the name.
 @return the localized script name.
 */
- (NSString *)getDisplayScriptWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)displayLocale;

/*!
 @brief <strong>[icu]</strong> Returns this locale's script localized for display in the default <code>DISPLAY</code> locale.
 @return the localized script name.
 - seealso: Category#DISPLAY
 */
- (NSString *)getDisplayScriptInContext __attribute__((deprecated));

/*!
 @brief <strong>[icu]</strong> Returns a locale's script localized for display in the provided locale.
 This is a cover for the ICU4C API.
 @param localeID the id of the locale whose script will be displayed
 @param displayLocaleID the id of the locale in which to display the name.
 @return the localized script name.
 */
+ (NSString *)getDisplayScriptInContextWithNSString:(NSString *)localeID
                                       withNSString:(NSString *)displayLocaleID __attribute__((deprecated));

/*!
 @brief <strong>[icu]</strong> Returns a locale's script localized for display in the provided locale.
 @param localeID the id of the locale whose script will be displayed.
 @param displayLocale the locale in which to display the name.
 @return the localized script name.
 */
+ (NSString *)getDisplayScriptInContextWithNSString:(NSString *)localeID
                          withAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)displayLocale __attribute__((deprecated));

/*!
 @brief <strong>[icu]</strong> Returns this locale's script localized for display in the provided locale.
 @param displayLocale the locale in which to display the name.
 @return the localized script name.
 */
- (NSString *)getDisplayScriptInContextWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)displayLocale __attribute__((deprecated));

/*!
 @brief Returns this locale's variant localized for display in the default <code>DISPLAY</code> locale.
 @return the localized variant name.
 - seealso: Category#DISPLAY
 */
- (NSString *)getDisplayVariant;

/*!
 @brief <strong>[icu]</strong> Returns a locale's variant localized for display in the provided locale.
 This is a cover for the ICU4C API.
 @param localeID the id of the locale whose variant will be displayed
 @param displayLocaleID the id of the locale in which to display the name.
 @return the localized variant name.
 */
+ (NSString *)getDisplayVariantWithNSString:(NSString *)localeID
                               withNSString:(NSString *)displayLocaleID;

/*!
 @brief <strong>[icu]</strong> Returns a locale's variant localized for display in the provided locale.
 This is a cover for the ICU4C API.
 @param localeID the id of the locale whose variant will be displayed.
 @param displayLocale the locale in which to display the name.
 @return the localized variant name.
 */
+ (NSString *)getDisplayVariantWithNSString:(NSString *)localeID
                  withAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)displayLocale;

/*!
 @brief Returns this locale's variant localized for display in the provided locale.
 @param displayLocale the locale in which to display the name.
 @return the localized variant name.
 */
- (NSString *)getDisplayVariantWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)displayLocale;

/*!
 @brief Returns the extension (or private use) value associated with
  the specified key, or null if there is no extension
  associated with the key.To be well-formed, the key must be one
  of <code>[0-9A-Za-z]</code>.
 Keys are case-insensitive, so
  for example 'z' and 'Z' represent the same extension.
 @param key the extension key
 @return The extension, or null if this locale defines no
  extension for the specified key.
 @throw IllegalArgumentExceptionif key is not well-formed
 - seealso: #PRIVATE_USE_EXTENSION
 - seealso: #UNICODE_LOCALE_EXTENSION
 */
- (NSString *)getExtensionWithChar:(jchar)key;

/*!
 @brief Returns the set of extension keys associated with this locale, or the
  empty set if it has no extensions.The returned set is unmodifiable.
 The keys will all be lower-case.
 @return the set of extension keys, or the empty set if this locale has
  no extensions
 */
- (id<JavaUtilSet>)getExtensionKeys;

/*!
 @brief <strong>[icu]</strong> Returns the fallback locale for this locale.If this locale is root,
  returns null.
 */
- (AndroidIcuUtilULocale *)getFallback;

/*!
 @brief <strong>[icu]</strong> Returns the fallback locale for the specified locale, which might be the
  empty string.
 */
+ (NSString *)getFallbackWithNSString:(NSString *)localeID;

/*!
 @brief Returns a three-letter abbreviation for this locale's country/region.If the locale
  doesn't specify a country, returns the empty string.
 Otherwise, returns
  an uppercase ISO 3166 3-letter country code.
 @throw MissingResourceExceptionThrows MissingResourceException if the
  three-letter country abbreviation is not available for this locale.
 */
- (NSString *)getISO3Country;

/*!
 @brief <strong>[icu]</strong> Returns a three-letter abbreviation for this locale's country/region.If the locale
  doesn't specify a country, returns the empty string.
 Otherwise, returns
  an uppercase ISO 3166 3-letter country code.
 @throw MissingResourceExceptionThrows MissingResourceException if the
  three-letter country abbreviation is not available for this locale.
 */
+ (NSString *)getISO3CountryWithNSString:(NSString *)localeID;

/*!
 @brief Returns a three-letter abbreviation for this locale's language.If the locale
  doesn't specify a language, returns the empty string.
 Otherwise, returns
  a lowercase ISO 639-2/T language code.
  The ISO 639-2 language codes can be found on-line at
    <a href="ftp://dkuug.dk/i18n/iso-639-2.txt"><code>ftp://dkuug.dk/i18n/iso-639-2.txt</code></a>
 @throw MissingResourceExceptionThrows MissingResourceException if the
  three-letter language abbreviation is not available for this locale.
 */
- (NSString *)getISO3Language;

/*!
 @brief <strong>[icu]</strong> Returns a three-letter abbreviation for this locale's language.If the locale
  doesn't specify a language, returns the empty string.
 Otherwise, returns
  a lowercase ISO 639-2/T language code.
  The ISO 639-2 language codes can be found on-line at
    <a href="ftp://dkuug.dk/i18n/iso-639-2.txt"><code>ftp://dkuug.dk/i18n/iso-639-2.txt</code></a>
 @throw MissingResourceExceptionThrows MissingResourceException if the
  three-letter language abbreviation is not available for this locale.
 */
+ (NSString *)getISO3LanguageWithNSString:(NSString *)localeID;

/*!
 @brief Returns a list of all 2-letter country codes defined in ISO 3166.
 Can be used to create Locales.
 */
+ (IOSObjectArray *)getISOCountries;

/*!
 @brief Returns a list of all 2-letter language codes defined in ISO 639.
 Can be used to create Locales.
  [NOTE:  ISO 639 is not a stable standard-- some languages' codes have changed.
  The list this function returns includes both the new and the old codes for the
  languages whose codes have changed.]
 */
+ (IOSObjectArray *)getISOLanguages;

/*!
 @brief <strong>[icu]</strong> Returns an iterator over keywords for this locale.If there
  are no keywords, returns null.
 @return iterator over keywords, or null if there are no keywords.
 */
- (id<JavaUtilIterator>)getKeywords;

/*!
 @brief <strong>[icu]</strong> Returns an iterator over keywords for the specified locale.If there
  are no keywords, returns null.
 @return an iterator over the keywords in the specified locale, or null
  if there are no keywords.
 */
+ (id<JavaUtilIterator>)getKeywordsWithNSString:(NSString *)localeID;

/*!
 @brief <strong>[icu]</strong> Returns the value for a keyword in this locale.If the keyword is not
  defined, returns null.
 @param keywordName name of the keyword whose value is desired. Case insensitive.
 @return the value of the keyword, or null.
 */
- (NSString *)getKeywordValueWithNSString:(NSString *)keywordName;

/*!
 @brief <strong>[icu]</strong> Returns the value for a keyword in the specified locale.If the keyword is
  not defined, returns null.
 The locale name does not need to be normalized.
 @param keywordName name of the keyword whose value is desired. Case insensitive.
 @return String the value of the keyword as a string
 */
+ (NSString *)getKeywordValueWithNSString:(NSString *)localeID
                             withNSString:(NSString *)keywordName;

/*!
 @brief Returns the language code for this locale, which will either be the empty string
  or a lowercase ISO 639 code.
 - seealso: #getDisplayLanguage()
 - seealso: #getDisplayLanguage(ULocale)
 */
- (NSString *)getLanguage;

/*!
 @brief Returns the language code for the locale ID,
  which will either be the empty string
  or a lowercase ISO 639 code.
 - seealso: #getDisplayLanguage()
 - seealso: #getDisplayLanguage(ULocale)
 */
+ (NSString *)getLanguageWithNSString:(NSString *)localeID;

/*!
 @brief <strong>[icu]</strong> Returns this locale's layout orientation for lines.The possible
  values are "left-to-right", "right-to-left", "top-to-bottom" or
  "bottom-to-top".
 @return The locale's layout orientation for lines.
 */
- (NSString *)getLineOrientation;

/*!
 @brief <strong>[icu]</strong> Returns the (normalized) full name for this locale.
 @return String the full name of the localeID
 */
- (NSString *)getName;

/*!
 @brief <strong>[icu]</strong> Returns the (normalized) full name for the specified locale.
 @param localeID the localeID as a string
 @return String the full name of the localeID
 */
+ (NSString *)getNameWithNSString:(NSString *)localeID;

/*!
 @brief <strong>[icu]</strong> Get the region to use for supplemental data lookup.
 Uses
  (1) any region specified by locale tag "rg"; if none then
  (2) any unicode_region_tag in the locale ID; if none then
  (3) if inferRegion is TRUE, the region suggested by
      getLikelySubtags on the localeID.
  If no region is found, returns empty string ""
 @param locale The locale (includes any keywords) from which
       to get the region to use for supplemental data.
 @param inferRegion If TRUE, will try to infer region from other
       locale elements if not found any other way.
 @return String with region to use ("" if none found).
 */
+ (NSString *)getRegionForSupplementalDataWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale
                                                        withBoolean:(jboolean)inferRegion __attribute__((deprecated));

/*!
 @brief Returns the script code for this locale, which might be the empty string.
 - seealso: #getDisplayScript()
 - seealso: #getDisplayScript(ULocale)
 */
- (NSString *)getScript;

/*!
 @brief <strong>[icu]</strong> Returns the script code for the specified locale, which might be the empty
  string.
 - seealso: #getDisplayScript()
 - seealso: #getDisplayScript(ULocale)
 */
+ (NSString *)getScriptWithNSString:(NSString *)localeID;

/*!
 @brief Returns the set of unicode locale attributes associated with
  this locale, or the empty set if it has no attributes.The
  returned set is unmodifiable.
 @return The set of attributes.
 */
- (id<JavaUtilSet>)getUnicodeLocaleAttributes;

/*!
 @brief Returns the set of Unicode locale keys defined by this locale, or the empty set if
  this locale has none.The returned set is immutable.
 Keys are all lower case.
 @return The set of Unicode locale keys, or the empty set if this locale has
  no Unicode locale keywords.
 */
- (id<JavaUtilSet>)getUnicodeLocaleKeys;

/*!
 @brief Returns the Unicode locale type associated with the specified Unicode locale key
  for this locale.Returns the empty string for keys that are defined with no type.
 Returns null if the key is not defined. Keys are case-insensitive. The key must
  be two alphanumeric characters ([0-9a-zA-Z]), or an IllegalArgumentException is
  thrown.
 @param key the Unicode locale key
 @return The Unicode locale type associated with the key, or null if the
  locale does not define the key.
 @throw IllegalArgumentExceptionif the key is not well-formed
 @throw NullPointerExceptionif <code>key</code> is null
 */
- (NSString *)getUnicodeLocaleTypeWithNSString:(NSString *)key;

/*!
 @brief Returns the variant code for this locale, which might be the empty string.
 - seealso: #getDisplayVariant()
 - seealso: #getDisplayVariant(ULocale)
 */
- (NSString *)getVariant;

/*!
 @brief <strong>[icu]</strong> Returns the variant code for the specified locale, which might be the empty string.
 - seealso: #getDisplayVariant()
 - seealso: #getDisplayVariant(ULocale)
 */
+ (NSString *)getVariantWithNSString:(NSString *)localeID;

/*!
 @brief Returns the hashCode.
 */
- (NSUInteger)hash;

/*!
 @brief <strong>[icu]</strong> Returns whether this locale's script is written right-to-left.
 If there is no script subtag, then the likely script is used,
  see <code>addLikelySubtags(ULocale)</code>.
  If no likely script is known, then false is returned. 
 <p>A script is right-to-left according to the CLDR script metadata
  which corresponds to whether the script's letters have Bidi_Class=R or AL. 
 <p>Returns true for "ar" and "en-Hebr", false for "zh" and "fa-Cyrl".
 @return true if the locale's script is written right-to-left
 */
- (jboolean)isRightToLeft;

/*!
 @brief <strong>[icu]</strong> Minimizes the subtags for a provided locale ID, per the algorithm described
  in the following CLDR technical report:<blockquote>
    
 <a href="http://www.unicode.org/reports/tr35/#Likely_Subtags">
 http://www.unicode.org/reports/tr35/#Likely_Subtags</a></blockquote>
  If the provided ULocale instance is already in the minimal form, or there
  is no data available for minimization, it will be returned.Since the
  minimization algorithm relies on proper maximization, see the comments
  for addLikelySubtags for reasons why there might not be any data.
 Examples:@code

  "en_Latn_US" minimizes to "en"
  "de_Latn_US" minimizes to "de"
  "sr_Cyrl_RS" minimizes to "sr"
  "zh_Hant_TW" minimizes to "zh_TW" (The region is preferred to the
  script, and minimizing to "zh" would imply "zh_Hans_CN".) 
@endcode
 @param loc The ULocale to minimize
 @return The minimized ULocale instance.
 */
+ (AndroidIcuUtilULocale *)minimizeSubtagsWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)loc;

/*!
 @brief <strong>[icu]</strong> Minimizes the subtags for a provided locale ID, per the algorithm described
  in the following CLDR technical report:<blockquote>
    
 <a href="http://www.unicode.org/reports/tr35/#Likely_Subtags">
 http://www.unicode.org/reports/tr35/#Likely_Subtags</a></blockquote>
  If the provided ULocale instance is already in the minimal form, or there
  is no data available for minimization, it will be returned.Since the
  minimization algorithm relies on proper maximization, see the comments
  for addLikelySubtags for reasons why there might not be any data.
 Examples:@code

  "en_Latn_US" minimizes to "en"
  "de_Latn_US" minimizes to "de"
  "sr_Cyrl_RS" minimizes to "sr"
  "zh_Hant_TW" minimizes to "zh_TW" if fieldToFavor == <code>Minimize.FAVOR_REGION</code>
  "zh_Hant_TW" minimizes to "zh_Hant" if fieldToFavor == <code>Minimize.FAVOR_SCRIPT</code>
   
@endcode
  The fieldToFavor only has an effect if either the region or the script could be suppressed, but not both.
 @param loc The ULocale to minimize
 @param fieldToFavor Indicate which should be preferred, when either the region  <b> or </b>  the script could be suppressed, but not both.
 @return The minimized ULocale instance.
 */
+ (AndroidIcuUtilULocale *)minimizeSubtagsWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)loc
                                 withAndroidIcuUtilULocale_Minimize:(AndroidIcuUtilULocale_Minimize *)fieldToFavor __attribute__((deprecated));

/*!
 @brief Sets the default <code>ULocale</code> for the specified <code>Category</code>.
 This also sets the default <code>Locale</code> for the specified <code>Category</code>
  of the JVM. If the caller does not have write permission to the
  user.language property, a security exception will be thrown,
  and the default ULocale for the specified Category will remain unchanged.
 @param category the specified category to set the default locale
 @param newLocale the new default locale
 - seealso: SecurityManager#checkPermission(java.security.Permission)
 - seealso: java.util.PropertyPermission
 */
+ (void)setDefaultWithAndroidIcuUtilULocale_Category:(AndroidIcuUtilULocale_Category *)category
                           withAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)newLocale;

/*!
 @brief Sets the default ULocale.This also sets the default Locale.
 If the caller does not have write permission to the
  user.language property, a security exception will be thrown,
  and the default ULocale will remain unchanged. 
 <p>
  By setting the default ULocale with this method, all of the default categoy locales
  are also set to the specified default ULocale.
 @param newLocale the new default locale
 @throw SecurityExceptionif a security manager exists and its
         <code>checkPermission</code> method doesn't allow the operation.
 @throw NullPointerExceptionif <code>newLocale</code> is null
 - seealso: SecurityManager#checkPermission(java.security.Permission)
 - seealso: java.util.PropertyPermission
 - seealso: ULocale#setDefault(Category, ULocale)
 */
+ (void)setDefaultWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)newLocale;

/*!
 @brief <strong>[icu]</strong> Given a keyword and a value, return a new locale with an updated
  keyword and value.If the keyword is null, this removes all keywords from the locale id.
 Otherwise, if the value is null, this removes the value for this keyword from the
  locale id.  Otherwise, this adds/replaces the value for this keyword in the locale id.
  The keyword and value must not be empty. 
 <p>Related: <code>getBaseName()</code> returns the locale ID string with all keywords removed.
 @param keyword the keyword to add/remove, or null to remove all keywords.
 @param value the value to add/set, or null to remove this particular keyword.
 @return the updated locale
 */
- (AndroidIcuUtilULocale *)setKeywordValueWithNSString:(NSString *)keyword
                                          withNSString:(NSString *)value;

/*!
 @brief Given a locale id, a keyword, and a value, return a new locale id with an updated
  keyword and value.If the keyword is null, this removes all keywords from the locale id.
 Otherwise, if the value is null, this removes the value for this keyword from the
  locale id.  Otherwise, this adds/replaces the value for this keyword in the locale id.
  The keyword and value must not be empty. 
 <p>Related: <code>getBaseName(String)</code> returns the locale ID string with all keywords removed.
 @param localeID the locale id to modify
 @param keyword the keyword to add/remove, or null to remove all keywords.
 @param value the value to add/set, or null to remove this particular keyword.
 @return the updated locale id
 */
+ (NSString *)setKeywordValueWithNSString:(NSString *)localeID
                             withNSString:(NSString *)keyword
                             withNSString:(NSString *)value;

/*!
 @brief Returns a well-formed IETF BCP 47 language tag representing
  this locale.
 <p>If this <code>ULocale</code> has a language, script, country, or
  variant that does not satisfy the IETF BCP 47 language tag
  syntax requirements, this method handles these fields as
  described below: 
 <p><b>Language:</b> If language is empty, or not well-formed
  (for example "a" or "e2"), it will be emitted as "und" (Undetermined). 
 <p><b>Script:</b> If script is not well-formed (for example "12"
  or "Latin"), it will be omitted. 
 <p><b>Country:</b> If country is not well-formed (for example "12"
  or "USA"), it will be omitted. 
 <p><b>Variant:</b> If variant <b>is</b> well-formed, each sub-segment
  (delimited by '-' or '_') is emitted as a subtag.  Otherwise: 
 <ul>
  
 <li>if all sub-segments match <code>[0-9a-zA-Z]{1,8}</code>
  (for example "WIN" or "Oracle_JDK_Standard_Edition"), the first
  ill-formed sub-segment and all following will be appended to
  the private use subtag.  The first appended subtag will be
  "lvariant", followed by the sub-segments in order, separated by
  hyphen. For example, "x-lvariant-WIN",
  "Oracle-x-lvariant-JDK-Standard-Edition". 
 <li>if any sub-segment does not match 
 <code>[0-9a-zA-Z]{1,8}</code>, the variant will be truncated
  and the problematic sub-segment and all following sub-segments
  will be omitted.  If the remainder is non-empty, it will be
  emitted as a private use subtag as above (even if the remainder
  turns out to be well-formed).  For example,
  "Solaris_isjustthecoolestthing" is emitted as
  "x-lvariant-Solaris", not as "solaris".</li></ul>
  
 <p><b>Note:</b> Although the language tag created by this
  method is well-formed (satisfies the syntax requirements
  defined by the IETF BCP 47 specification), it is not
  necessarily a valid BCP 47 language tag.  For example, 
 @code

    new Locale("xx", "YY").toLanguageTag();
@endcode
  will return "xx-YY", but the language subtag "xx" and the
  region subtag "YY" are invalid because they are not registered
  in the IANA Language Subtag Registry.
 @return a BCP47 language tag representing the locale
 - seealso: #forLanguageTag(String)
 */
- (NSString *)toLanguageTag;

/*!
 @brief <strong>[icu]</strong> Converts the specified keyword (BCP 47 Unicode locale extension key, or
  legacy key) to the legacy key.For example, legacy key "collation" is
  returned for the input BCP 47 Unicode locale extension key "co".
 @param keyword the input locale keyword (either BCP 47 Unicode locale                       extension key or legacy key).
 @return the well-formed legacy key, or null if the specified
                       keyword cannot be mapped to a well-formed legacy key.
 - seealso: #toUnicodeLocaleKey(String)
 */
+ (NSString *)toLegacyKeyWithNSString:(NSString *)keyword;

/*!
 @brief <strong>[icu]</strong> Converts the specified keyword value (BCP 47 Unicode locale extension type,
  or legacy type or type alias) to the canonical legacy type.For example,
  the legacy type "phonebook" is returned for the input BCP 47 Unicode
  locale extension type "phonebk" with the keyword "collation" (or "co").
 <p>
  When the specified keyword is not recognized, but the specified value
  satisfies the syntax of legacy key, or when the specified keyword
  allows 'variable' type and the specified value satisfies the syntax,
  the lower-case version of the input value will be returned.
  For example, 
 <code>toLegacyType("Foo", "Bar")</code> returns "bar", 
 <code>toLegacyType("vt", "00A4")</code> returns "00a4".
 @param keyword the locale keyword (either legacy keyword such as                       "collation" or BCP 47 Unicode locale extension
                        key such as "co").
 @param value the locale keyword value (either BCP 47 Unicode locale                       extension type such as "phonebk" or legacy keyword value
                        such as "phonebook").
 @return the well-formed legacy type, or null if the specified
                       keyword value cannot be mapped to a well-formed legacy
                       type.
 - seealso: #toUnicodeLocaleType(String, String)
 */
+ (NSString *)toLegacyTypeWithNSString:(NSString *)keyword
                          withNSString:(NSString *)value;

/*!
 @brief <strong>[icu]</strong> Converts this ULocale object to a <code>java.util.Locale</code>.
 @return a <code>java.util.Locale</code> that either exactly represents this object
  or is the closest approximation.
 */
- (JavaUtilLocale *)toLocale;

/*!
 @brief Returns a string representation of this object.
 */
- (NSString *)description;

/*!
 @brief <strong>[icu]</strong> Converts the specified keyword (legacy key, or BCP 47 Unicode locale
  extension key) to the equivalent BCP 47 Unicode locale extension key.
 For example, BCP 47 Unicode locale extension key "co" is returned for
  the input keyword "collation". 
 <p>
  When the specified keyword is unknown, but satisfies the BCP syntax,
  then the lower-case version of the input keyword will be returned.
  For example, 
 <code>toUnicodeLocaleKey("ZZ")</code> returns "zz".
 @param keyword the input locale keyword (either legacy key                       such as "collation" or BCP 47 Unicode locale extension
                        key such as "co").
 @return the well-formed BCP 47 Unicode locale extension key,
                       or null if the specified locale keyword cannot be mapped
                       to a well-formed BCP 47 Unicode locale extension key.
 - seealso: #toLegacyKey(String)
 */
+ (NSString *)toUnicodeLocaleKeyWithNSString:(NSString *)keyword;

/*!
 @brief <strong>[icu]</strong> Converts the specified keyword value (legacy type, or BCP 47
  Unicode locale extension type) to the well-formed BCP 47 Unicode locale
  extension type for the specified keyword (category).For example, BCP 47
  Unicode locale extension type "phonebk" is returned for the input
  keyword value "phonebook", with the keyword "collation" (or "co").
 <p>
  When the specified keyword is not recognized, but the specified value
  satisfies the syntax of the BCP 47 Unicode locale extension type,
  or when the specified keyword allows 'variable' type and the specified
  value satisfies the syntax, the lower-case version of the input value
  will be returned. For example, 
 <code>toUnicodeLocaleType("Foo", "Bar")</code> returns "bar", 
 <code>toUnicodeLocaleType("variableTop", "00A4")</code> returns "00a4".
 @param keyword the locale keyword (either legacy key such as                       "collation" or BCP 47 Unicode locale extension
                        key such as "co").
 @param value the locale keyword value (either legacy type                       such as "phonebook" or BCP 47 Unicode locale extension
                        type such as "phonebk").
 @return the well-formed BCP47 Unicode locale extension type,
                       or null if the locale keyword value cannot be mapped to
                       a well-formed BCP 47 Unicode locale extension type.
 - seealso: #toLegacyType(String, String)
 */
+ (NSString *)toUnicodeLocaleTypeWithNSString:(NSString *)keyword
                                 withNSString:(NSString *)value;

#pragma mark Package-Private

/*!
 @brief Create a tag string from the supplied parameters.The lang, script and region
  parameters may be null references.If the lang parameter is an empty string, the
  default value for an unknown language is written to the output buffer.
 @param lang The language tag to use.
 @param script The script tag to use.
 @param region The region tag to use.
 @param trailing Any trailing data to append to the new tag.
 @return The new String.
 */
+ (NSString *)createTagStringWithNSString:(NSString *)lang
                             withNSString:(NSString *)script
                             withNSString:(NSString *)region
                             withNSString:(NSString *)trailing;

/*!
 @brief Package local method used for parsing Accept-Language string
 */
+ (IOSObjectArray *)parseAcceptLanguageWithNSString:(NSString *)acceptLanguage
                                        withBoolean:(jboolean)isLenient;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(AndroidIcuUtilULocale)

/*!
 @brief Useful constant for language.
 */
inline AndroidIcuUtilULocale *AndroidIcuUtilULocale_get_ENGLISH(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuUtilULocale *AndroidIcuUtilULocale_ENGLISH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuUtilULocale, ENGLISH, AndroidIcuUtilULocale *)

/*!
 @brief Useful constant for language.
 */
inline AndroidIcuUtilULocale *AndroidIcuUtilULocale_get_FRENCH(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuUtilULocale *AndroidIcuUtilULocale_FRENCH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuUtilULocale, FRENCH, AndroidIcuUtilULocale *)

/*!
 @brief Useful constant for language.
 */
inline AndroidIcuUtilULocale *AndroidIcuUtilULocale_get_GERMAN(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuUtilULocale *AndroidIcuUtilULocale_GERMAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuUtilULocale, GERMAN, AndroidIcuUtilULocale *)

/*!
 @brief Useful constant for language.
 */
inline AndroidIcuUtilULocale *AndroidIcuUtilULocale_get_ITALIAN(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuUtilULocale *AndroidIcuUtilULocale_ITALIAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuUtilULocale, ITALIAN, AndroidIcuUtilULocale *)

/*!
 @brief Useful constant for language.
 */
inline AndroidIcuUtilULocale *AndroidIcuUtilULocale_get_JAPANESE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuUtilULocale *AndroidIcuUtilULocale_JAPANESE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuUtilULocale, JAPANESE, AndroidIcuUtilULocale *)

/*!
 @brief Useful constant for language.
 */
inline AndroidIcuUtilULocale *AndroidIcuUtilULocale_get_KOREAN(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuUtilULocale *AndroidIcuUtilULocale_KOREAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuUtilULocale, KOREAN, AndroidIcuUtilULocale *)

/*!
 @brief Useful constant for language.
 */
inline AndroidIcuUtilULocale *AndroidIcuUtilULocale_get_CHINESE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuUtilULocale *AndroidIcuUtilULocale_CHINESE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuUtilULocale, CHINESE, AndroidIcuUtilULocale *)

/*!
 @brief Useful constant for language.
 */
inline AndroidIcuUtilULocale *AndroidIcuUtilULocale_get_SIMPLIFIED_CHINESE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuUtilULocale *AndroidIcuUtilULocale_SIMPLIFIED_CHINESE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuUtilULocale, SIMPLIFIED_CHINESE, AndroidIcuUtilULocale *)

/*!
 @brief Useful constant for language.
 */
inline AndroidIcuUtilULocale *AndroidIcuUtilULocale_get_TRADITIONAL_CHINESE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuUtilULocale *AndroidIcuUtilULocale_TRADITIONAL_CHINESE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuUtilULocale, TRADITIONAL_CHINESE, AndroidIcuUtilULocale *)

/*!
 @brief Useful constant for country/region.
 */
inline AndroidIcuUtilULocale *AndroidIcuUtilULocale_get_FRANCE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuUtilULocale *AndroidIcuUtilULocale_FRANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuUtilULocale, FRANCE, AndroidIcuUtilULocale *)

/*!
 @brief Useful constant for country/region.
 */
inline AndroidIcuUtilULocale *AndroidIcuUtilULocale_get_GERMANY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuUtilULocale *AndroidIcuUtilULocale_GERMANY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuUtilULocale, GERMANY, AndroidIcuUtilULocale *)

/*!
 @brief Useful constant for country/region.
 */
inline AndroidIcuUtilULocale *AndroidIcuUtilULocale_get_ITALY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuUtilULocale *AndroidIcuUtilULocale_ITALY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuUtilULocale, ITALY, AndroidIcuUtilULocale *)

/*!
 @brief Useful constant for country/region.
 */
inline AndroidIcuUtilULocale *AndroidIcuUtilULocale_get_JAPAN(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuUtilULocale *AndroidIcuUtilULocale_JAPAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuUtilULocale, JAPAN, AndroidIcuUtilULocale *)

/*!
 @brief Useful constant for country/region.
 */
inline AndroidIcuUtilULocale *AndroidIcuUtilULocale_get_KOREA(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuUtilULocale *AndroidIcuUtilULocale_KOREA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuUtilULocale, KOREA, AndroidIcuUtilULocale *)

/*!
 @brief Useful constant for country/region.
 */
inline AndroidIcuUtilULocale *AndroidIcuUtilULocale_get_CHINA(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuUtilULocale *AndroidIcuUtilULocale_CHINA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuUtilULocale, CHINA, AndroidIcuUtilULocale *)

/*!
 @brief Useful constant for country/region.
 */
inline AndroidIcuUtilULocale *AndroidIcuUtilULocale_get_PRC(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuUtilULocale *AndroidIcuUtilULocale_PRC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuUtilULocale, PRC, AndroidIcuUtilULocale *)

/*!
 @brief Useful constant for country/region.
 */
inline AndroidIcuUtilULocale *AndroidIcuUtilULocale_get_TAIWAN(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuUtilULocale *AndroidIcuUtilULocale_TAIWAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuUtilULocale, TAIWAN, AndroidIcuUtilULocale *)

/*!
 @brief Useful constant for country/region.
 */
inline AndroidIcuUtilULocale *AndroidIcuUtilULocale_get_UK(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuUtilULocale *AndroidIcuUtilULocale_UK;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuUtilULocale, UK, AndroidIcuUtilULocale *)

/*!
 @brief Useful constant for country/region.
 */
inline AndroidIcuUtilULocale *AndroidIcuUtilULocale_get_US(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuUtilULocale *AndroidIcuUtilULocale_US;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuUtilULocale, US, AndroidIcuUtilULocale *)

/*!
 @brief Useful constant for country/region.
 */
inline AndroidIcuUtilULocale *AndroidIcuUtilULocale_get_CANADA(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuUtilULocale *AndroidIcuUtilULocale_CANADA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuUtilULocale, CANADA, AndroidIcuUtilULocale *)

/*!
 @brief Useful constant for country/region.
 */
inline AndroidIcuUtilULocale *AndroidIcuUtilULocale_get_CANADA_FRENCH(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuUtilULocale *AndroidIcuUtilULocale_CANADA_FRENCH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuUtilULocale, CANADA_FRENCH, AndroidIcuUtilULocale *)

/*!
 @brief The root ULocale.
 */
inline AndroidIcuUtilULocale *AndroidIcuUtilULocale_get_ROOT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuUtilULocale *AndroidIcuUtilULocale_ROOT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuUtilULocale, ROOT, AndroidIcuUtilULocale *)

/*!
 @brief <strong>[icu]</strong> Selector for <tt>getLocale()</tt> indicating the locale of the
  resource containing the data.This is always at or above the
  valid locale.
 If the valid locale does not contain the
  specific data being requested, then the actual locale will be
  above the valid locale.  If the object was not constructed from
  locale data, then the valid locale is <i>null</i>.
 */
inline AndroidIcuUtilULocale_Type *AndroidIcuUtilULocale_get_ACTUAL_LOCALE(void);
inline AndroidIcuUtilULocale_Type *AndroidIcuUtilULocale_set_ACTUAL_LOCALE(AndroidIcuUtilULocale_Type *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuUtilULocale_Type *AndroidIcuUtilULocale_ACTUAL_LOCALE;
J2OBJC_STATIC_FIELD_OBJ(AndroidIcuUtilULocale, ACTUAL_LOCALE, AndroidIcuUtilULocale_Type *)

/*!
 @brief <strong>[icu]</strong> Selector for <tt>getLocale()</tt> indicating the most specific
  locale for which any data exists.This is always at or above
  the requested locale, and at or below the actual locale.
 If
  the requested locale does not correspond to any resource data,
  then the valid locale will be above the requested locale.  If
  the object was not constructed from locale data, then the
  actual locale is <i>null</i>.
  
 <p>Note: The valid locale will be returned correctly in ICU
  3.0 or later.  In ICU 2.8, it is not returned correctly.
 */
inline AndroidIcuUtilULocale_Type *AndroidIcuUtilULocale_get_VALID_LOCALE(void);
inline AndroidIcuUtilULocale_Type *AndroidIcuUtilULocale_set_VALID_LOCALE(AndroidIcuUtilULocale_Type *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuUtilULocale_Type *AndroidIcuUtilULocale_VALID_LOCALE;
J2OBJC_STATIC_FIELD_OBJ(AndroidIcuUtilULocale, VALID_LOCALE, AndroidIcuUtilULocale_Type *)

/*!
 @brief The key for the private use locale extension ('x').
 - seealso: #getExtension(char)
 - seealso: Builder#setExtension(char, String)
 */
inline jchar AndroidIcuUtilULocale_get_PRIVATE_USE_EXTENSION(void);
#define AndroidIcuUtilULocale_PRIVATE_USE_EXTENSION 'x'
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuUtilULocale, PRIVATE_USE_EXTENSION, jchar)

/*!
 @brief The key for Unicode locale extension ('u').
 - seealso: #getExtension(char)
 - seealso: Builder#setExtension(char, String)
 */
inline jchar AndroidIcuUtilULocale_get_UNICODE_LOCALE_EXTENSION(void);
#define AndroidIcuUtilULocale_UNICODE_LOCALE_EXTENSION 'u'
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuUtilULocale, UNICODE_LOCALE_EXTENSION, jchar)

FOUNDATION_EXPORT AndroidIcuUtilULocale *AndroidIcuUtilULocale_forLocaleWithJavaUtilLocale_(JavaUtilLocale *loc);

FOUNDATION_EXPORT void AndroidIcuUtilULocale_initWithNSString_(AndroidIcuUtilULocale *self, NSString *localeID);

FOUNDATION_EXPORT AndroidIcuUtilULocale *new_AndroidIcuUtilULocale_initWithNSString_(NSString *localeID) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidIcuUtilULocale *create_AndroidIcuUtilULocale_initWithNSString_(NSString *localeID);

FOUNDATION_EXPORT void AndroidIcuUtilULocale_initWithNSString_withNSString_(AndroidIcuUtilULocale *self, NSString *a, NSString *b);

FOUNDATION_EXPORT AndroidIcuUtilULocale *new_AndroidIcuUtilULocale_initWithNSString_withNSString_(NSString *a, NSString *b) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidIcuUtilULocale *create_AndroidIcuUtilULocale_initWithNSString_withNSString_(NSString *a, NSString *b);

FOUNDATION_EXPORT void AndroidIcuUtilULocale_initWithNSString_withNSString_withNSString_(AndroidIcuUtilULocale *self, NSString *a, NSString *b, NSString *c);

FOUNDATION_EXPORT AndroidIcuUtilULocale *new_AndroidIcuUtilULocale_initWithNSString_withNSString_withNSString_(NSString *a, NSString *b, NSString *c) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidIcuUtilULocale *create_AndroidIcuUtilULocale_initWithNSString_withNSString_withNSString_(NSString *a, NSString *b, NSString *c);

FOUNDATION_EXPORT AndroidIcuUtilULocale *AndroidIcuUtilULocale_createCanonicalWithNSString_(NSString *nonCanonicalID);

FOUNDATION_EXPORT AndroidIcuUtilULocale *AndroidIcuUtilULocale_getDefault(void);

FOUNDATION_EXPORT void AndroidIcuUtilULocale_setDefaultWithAndroidIcuUtilULocale_(AndroidIcuUtilULocale *newLocale);

FOUNDATION_EXPORT AndroidIcuUtilULocale *AndroidIcuUtilULocale_getDefaultWithAndroidIcuUtilULocale_Category_(AndroidIcuUtilULocale_Category *category);

FOUNDATION_EXPORT void AndroidIcuUtilULocale_setDefaultWithAndroidIcuUtilULocale_Category_withAndroidIcuUtilULocale_(AndroidIcuUtilULocale_Category *category, AndroidIcuUtilULocale *newLocale);

FOUNDATION_EXPORT IOSObjectArray *AndroidIcuUtilULocale_getAvailableLocales(void);

FOUNDATION_EXPORT IOSObjectArray *AndroidIcuUtilULocale_getISOCountries(void);

FOUNDATION_EXPORT IOSObjectArray *AndroidIcuUtilULocale_getISOLanguages(void);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_getLanguageWithNSString_(NSString *localeID);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_getScriptWithNSString_(NSString *localeID);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_getCountryWithNSString_(NSString *localeID);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_getRegionForSupplementalDataWithAndroidIcuUtilULocale_withBoolean_(AndroidIcuUtilULocale *locale, jboolean inferRegion);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_getVariantWithNSString_(NSString *localeID);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_getFallbackWithNSString_(NSString *localeID);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_getBaseNameWithNSString_(NSString *localeID);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_getNameWithNSString_(NSString *localeID);

FOUNDATION_EXPORT id<JavaUtilIterator> AndroidIcuUtilULocale_getKeywordsWithNSString_(NSString *localeID);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_getKeywordValueWithNSString_withNSString_(NSString *localeID, NSString *keywordName);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_canonicalizeWithNSString_(NSString *localeID);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_setKeywordValueWithNSString_withNSString_withNSString_(NSString *localeID, NSString *keyword, NSString *value);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_getISO3LanguageWithNSString_(NSString *localeID);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_getISO3CountryWithNSString_(NSString *localeID);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_getDisplayLanguageWithNSString_withNSString_(NSString *localeID, NSString *displayLocaleID);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_getDisplayLanguageWithNSString_withAndroidIcuUtilULocale_(NSString *localeID, AndroidIcuUtilULocale *displayLocale);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_getDisplayLanguageWithDialectWithNSString_withNSString_(NSString *localeID, NSString *displayLocaleID);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_getDisplayLanguageWithDialectWithNSString_withAndroidIcuUtilULocale_(NSString *localeID, AndroidIcuUtilULocale *displayLocale);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_getDisplayScriptWithNSString_withNSString_(NSString *localeID, NSString *displayLocaleID);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_getDisplayScriptInContextWithNSString_withNSString_(NSString *localeID, NSString *displayLocaleID);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_getDisplayScriptWithNSString_withAndroidIcuUtilULocale_(NSString *localeID, AndroidIcuUtilULocale *displayLocale);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_getDisplayScriptInContextWithNSString_withAndroidIcuUtilULocale_(NSString *localeID, AndroidIcuUtilULocale *displayLocale);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_getDisplayCountryWithNSString_withNSString_(NSString *localeID, NSString *displayLocaleID);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_getDisplayCountryWithNSString_withAndroidIcuUtilULocale_(NSString *localeID, AndroidIcuUtilULocale *displayLocale);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_getDisplayVariantWithNSString_withNSString_(NSString *localeID, NSString *displayLocaleID);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_getDisplayVariantWithNSString_withAndroidIcuUtilULocale_(NSString *localeID, AndroidIcuUtilULocale *displayLocale);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_getDisplayKeywordWithNSString_(NSString *keyword);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_getDisplayKeywordWithNSString_withNSString_(NSString *keyword, NSString *displayLocaleID);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_getDisplayKeywordWithNSString_withAndroidIcuUtilULocale_(NSString *keyword, AndroidIcuUtilULocale *displayLocale);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_getDisplayKeywordValueWithNSString_withNSString_withNSString_(NSString *localeID, NSString *keyword, NSString *displayLocaleID);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_getDisplayKeywordValueWithNSString_withNSString_withAndroidIcuUtilULocale_(NSString *localeID, NSString *keyword, AndroidIcuUtilULocale *displayLocale);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_getDisplayNameWithNSString_withNSString_(NSString *localeID, NSString *displayLocaleID);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_getDisplayNameWithNSString_withAndroidIcuUtilULocale_(NSString *localeID, AndroidIcuUtilULocale *displayLocale);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_getDisplayNameWithDialectWithNSString_withNSString_(NSString *localeID, NSString *displayLocaleID);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_getDisplayNameWithDialectWithNSString_withAndroidIcuUtilULocale_(NSString *localeID, AndroidIcuUtilULocale *displayLocale);

FOUNDATION_EXPORT AndroidIcuUtilULocale *AndroidIcuUtilULocale_acceptLanguageWithNSString_withAndroidIcuUtilULocaleArray_withBooleanArray_(NSString *acceptLanguageList, IOSObjectArray *availableLocales, IOSBooleanArray *fallback);

FOUNDATION_EXPORT AndroidIcuUtilULocale *AndroidIcuUtilULocale_acceptLanguageWithAndroidIcuUtilULocaleArray_withAndroidIcuUtilULocaleArray_withBooleanArray_(IOSObjectArray *acceptLanguageList, IOSObjectArray *availableLocales, IOSBooleanArray *fallback);

FOUNDATION_EXPORT AndroidIcuUtilULocale *AndroidIcuUtilULocale_acceptLanguageWithNSString_withBooleanArray_(NSString *acceptLanguageList, IOSBooleanArray *fallback);

FOUNDATION_EXPORT AndroidIcuUtilULocale *AndroidIcuUtilULocale_acceptLanguageWithAndroidIcuUtilULocaleArray_withBooleanArray_(IOSObjectArray *acceptLanguageList, IOSBooleanArray *fallback);

FOUNDATION_EXPORT IOSObjectArray *AndroidIcuUtilULocale_parseAcceptLanguageWithNSString_withBoolean_(NSString *acceptLanguage, jboolean isLenient);

FOUNDATION_EXPORT AndroidIcuUtilULocale *AndroidIcuUtilULocale_addLikelySubtagsWithAndroidIcuUtilULocale_(AndroidIcuUtilULocale *loc);

FOUNDATION_EXPORT AndroidIcuUtilULocale *AndroidIcuUtilULocale_minimizeSubtagsWithAndroidIcuUtilULocale_(AndroidIcuUtilULocale *loc);

FOUNDATION_EXPORT AndroidIcuUtilULocale *AndroidIcuUtilULocale_minimizeSubtagsWithAndroidIcuUtilULocale_withAndroidIcuUtilULocale_Minimize_(AndroidIcuUtilULocale *loc, AndroidIcuUtilULocale_Minimize *fieldToFavor);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_createTagStringWithNSString_withNSString_withNSString_withNSString_(NSString *lang, NSString *script, NSString *region, NSString *trailing);

FOUNDATION_EXPORT AndroidIcuUtilULocale *AndroidIcuUtilULocale_forLanguageTagWithNSString_(NSString *languageTag);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_toUnicodeLocaleKeyWithNSString_(NSString *keyword);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_toUnicodeLocaleTypeWithNSString_withNSString_(NSString *keyword, NSString *value);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_toLegacyKeyWithNSString_(NSString *keyword);

FOUNDATION_EXPORT NSString *AndroidIcuUtilULocale_toLegacyTypeWithNSString_withNSString_(NSString *keyword, NSString *value);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuUtilULocale)

#endif

#if !defined (AndroidIcuUtilULocale_Category_) && (INCLUDE_ALL_AndroidIcuUtilULocale || defined(INCLUDE_AndroidIcuUtilULocale_Category))
#define AndroidIcuUtilULocale_Category_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, AndroidIcuUtilULocale_Category_Enum) {
  AndroidIcuUtilULocale_Category_Enum_DISPLAY = 0,
  AndroidIcuUtilULocale_Category_Enum_FORMAT = 1,
};

/*!
 @brief Enum for locale categories.These locale categories are used to get/set the default locale for
  the specific functionality represented by the category.
 */
@interface AndroidIcuUtilULocale_Category : JavaLangEnum

@property (readonly, class, nonnull) AndroidIcuUtilULocale_Category *DISPLAY NS_SWIFT_NAME(DISPLAY);
@property (readonly, class, nonnull) AndroidIcuUtilULocale_Category *FORMAT NS_SWIFT_NAME(FORMAT);
+ (AndroidIcuUtilULocale_Category * __nonnull)DISPLAY;

+ (AndroidIcuUtilULocale_Category * __nonnull)FORMAT;

#pragma mark Public

+ (AndroidIcuUtilULocale_Category *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (AndroidIcuUtilULocale_Category_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(AndroidIcuUtilULocale_Category)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT AndroidIcuUtilULocale_Category *AndroidIcuUtilULocale_Category_values_[];

/*!
 @brief Category used to represent the default locale for displaying user interfaces.
 */
inline AndroidIcuUtilULocale_Category *AndroidIcuUtilULocale_Category_get_DISPLAY(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuUtilULocale_Category, DISPLAY)

/*!
 @brief Category used to represent the default locale for formatting date, number and/or currency.
 */
inline AndroidIcuUtilULocale_Category *AndroidIcuUtilULocale_Category_get_FORMAT(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuUtilULocale_Category, FORMAT)

FOUNDATION_EXPORT IOSObjectArray *AndroidIcuUtilULocale_Category_values(void);

FOUNDATION_EXPORT AndroidIcuUtilULocale_Category *AndroidIcuUtilULocale_Category_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT AndroidIcuUtilULocale_Category *AndroidIcuUtilULocale_Category_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuUtilULocale_Category)

#endif

#if !defined (AndroidIcuUtilULocale_Type_) && (INCLUDE_ALL_AndroidIcuUtilULocale || defined(INCLUDE_AndroidIcuUtilULocale_Type))
#define AndroidIcuUtilULocale_Type_

/*!
 @brief Opaque selector enum for <tt>getLocale()</tt>.
 - seealso: android.icu.util.ULocale
 - seealso: android.icu.util.ULocale#ACTUAL_LOCALE
 - seealso: android.icu.util.ULocale#VALID_LOCALE
 */
@interface AndroidIcuUtilULocale_Type : NSObject

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidIcuUtilULocale_Type)

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuUtilULocale_Type)

#endif

#if !defined (AndroidIcuUtilULocale_Minimize_) && (INCLUDE_ALL_AndroidIcuUtilULocale || defined(INCLUDE_AndroidIcuUtilULocale_Minimize))
#define AndroidIcuUtilULocale_Minimize_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, AndroidIcuUtilULocale_Minimize_Enum) {
  AndroidIcuUtilULocale_Minimize_Enum_FAVOR_SCRIPT = 0,
  AndroidIcuUtilULocale_Minimize_Enum_FAVOR_REGION = 1,
};

/*!
 @brief Options for minimizeSubtags.
 */
__attribute__((deprecated))
@interface AndroidIcuUtilULocale_Minimize : JavaLangEnum

@property (readonly, class, nonnull) AndroidIcuUtilULocale_Minimize *FAVOR_SCRIPT NS_SWIFT_NAME(FAVOR_SCRIPT);
@property (readonly, class, nonnull) AndroidIcuUtilULocale_Minimize *FAVOR_REGION NS_SWIFT_NAME(FAVOR_REGION);
+ (AndroidIcuUtilULocale_Minimize * __nonnull)FAVOR_SCRIPT;

+ (AndroidIcuUtilULocale_Minimize * __nonnull)FAVOR_REGION;

#pragma mark Public

+ (AndroidIcuUtilULocale_Minimize *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (AndroidIcuUtilULocale_Minimize_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(AndroidIcuUtilULocale_Minimize)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT AndroidIcuUtilULocale_Minimize *AndroidIcuUtilULocale_Minimize_values_[];

/*!
 @brief Favor including the script, when either the region <b>or</b> the script could be suppressed, but not both.
 */
inline AndroidIcuUtilULocale_Minimize *AndroidIcuUtilULocale_Minimize_get_FAVOR_SCRIPT(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuUtilULocale_Minimize, FAVOR_SCRIPT)

/*!
 @brief Favor including the region, when either the region <b>or</b> the script could be suppressed, but not both.
 */
inline AndroidIcuUtilULocale_Minimize *AndroidIcuUtilULocale_Minimize_get_FAVOR_REGION(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuUtilULocale_Minimize, FAVOR_REGION)

FOUNDATION_EXPORT IOSObjectArray *AndroidIcuUtilULocale_Minimize_values(void);

FOUNDATION_EXPORT AndroidIcuUtilULocale_Minimize *AndroidIcuUtilULocale_Minimize_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT AndroidIcuUtilULocale_Minimize *AndroidIcuUtilULocale_Minimize_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuUtilULocale_Minimize)

#endif

#if !defined (AndroidIcuUtilULocale_Builder_) && (INCLUDE_ALL_AndroidIcuUtilULocale || defined(INCLUDE_AndroidIcuUtilULocale_Builder))
#define AndroidIcuUtilULocale_Builder_

@class AndroidIcuUtilULocale;

/*!
 @brief <code>Builder</code> is used to build instances of <code>ULocale</code>
  from values configured by the setters.Unlike the <code>ULocale</code>
  constructors, the <code>Builder</code> checks if a value configured by a
  setter satisfies the syntax requirements defined by the <code>ULocale</code>
  class.
 A <code>ULocale</code> object created by a <code>Builder</code> is
  well-formed and can be transformed to a well-formed IETF BCP 47 language tag
  without losing information. 
 <p><b>Note:</b> The <code>ULocale</code> class does not provide any
  syntactic restrictions on variant, while BCP 47 requires each variant
  subtag to be 5 to 8 alphanumerics or a single numeric followed by 3
  alphanumerics.  The method <code>setVariant</code> throws 
 <code>IllformedLocaleException</code> for a variant that does not satisfy
  this restriction. If it is necessary to support such a variant, use a
  ULocale constructor.  However, keep in mind that a <code>ULocale</code>
  object created this way might lose the variant information when
  transformed to a BCP 47 language tag. 
 <p>The following example shows how to create a <code>Locale</code> object
  with the <code>Builder</code>.
  <blockquote>
  @code

      ULocale aLocale = new Builder().setLanguage("sr").setScript("Latn").setRegion("RS").build(); 
  
@endcode
  </blockquote>
  
 <p>Builders can be reused; <code>clear()</code> resets all
  fields to their default values.
 - seealso: ULocale#toLanguageTag()
 */
@interface AndroidIcuUtilULocale_Builder : NSObject

#pragma mark Public

/*!
 @brief Constructs an empty Builder.The default value of all
  fields, extensions, and private use information is the
  empty string.
 */
- (instancetype __nonnull)init;

/*!
 @brief Adds a unicode locale attribute, if not already present, otherwise
  has no effect.The attribute must not be null and must be well-formed
  or an exception is thrown.
 @param attribute the attribute
 @return This builder.
 @throw NullPointerExceptionif <code>attribute</code> is null
 @throw IllformedLocaleExceptionif <code>attribute</code> is ill-formed
 - seealso: #setExtension(char, String)
 */
- (AndroidIcuUtilULocale_Builder *)addUnicodeLocaleAttributeWithNSString:(NSString *)attribute;

/*!
 @brief Returns an instance of <code>ULocale</code> created from the fields set
  on this builder.
 @return a new Locale
 */
- (AndroidIcuUtilULocale *)build;

/*!
 @brief Resets the builder to its initial, empty state.
 @return this builder
 */
- (AndroidIcuUtilULocale_Builder *)clear;

/*!
 @brief Resets the extensions to their initial, empty state.
 Language, script, region and variant are unchanged.
 @return this builder
 - seealso: #setExtension(char, String)
 */
- (AndroidIcuUtilULocale_Builder *)clearExtensions;

/*!
 @brief Removes a unicode locale attribute, if present, otherwise has no
  effect.The attribute must not be null and must be well-formed
  or an exception is thrown.
 <p>Attribute comparision for removal is case-insensitive.
 @param attribute the attribute
 @return This builder.
 @throw NullPointerExceptionif <code>attribute</code> is null
 @throw IllformedLocaleExceptionif <code>attribute</code> is ill-formed
 - seealso: #setExtension(char, String)
 */
- (AndroidIcuUtilULocale_Builder *)removeUnicodeLocaleAttributeWithNSString:(NSString *)attribute;

/*!
 @brief Sets the extension for the given key.If the value is null or the
  empty string, the extension is removed.
 Otherwise, the extension
  must be well-formed or an exception is thrown. 
 <p><b>Note:</b> The key <code>UNICODE_LOCALE_EXTENSION</code>
  ('u') is used for the Unicode locale extension.
  Setting a value for this key replaces any existing Unicode locale key/type
  pairs with those defined in the extension. 
 <p><b>Note:</b> The key <code>PRIVATE_USE_EXTENSION</code>
  ('x') is used for the private use code. To be
  well-formed, the value for this key needs only to have subtags of one to
  eight alphanumeric characters, not two to eight as in the general case.
 @param key the extension key
 @param value the extension value
 @return This builder.
 @throw IllformedLocaleExceptionif <code>key</code> is illegal
  or <code>value</code> is ill-formed
 - seealso: #setUnicodeLocaleKeyword(String, String)
 */
- (AndroidIcuUtilULocale_Builder *)setExtensionWithChar:(jchar)key
                                           withNSString:(NSString *)value;

/*!
 @brief Sets the language.If <code>language</code> is the empty string or
  null, the language in this <code>Builder</code> is removed.
 Otherwise,
  the language must be <a href="./Locale.html#def_language">well-formed</a>
  or an exception is thrown. 
 <p>The typical language value is a two or three-letter language
  code as defined in ISO639.
 @param language the language
 @return This builder.
 @throw IllformedLocaleExceptionif <code>language</code> is ill-formed
 */
- (AndroidIcuUtilULocale_Builder *)setLanguageWithNSString:(NSString *)language;

/*!
 @brief Resets the Builder to match the provided IETF BCP 47
  language tag.Discards the existing state.
 Null and the
  empty string cause the builder to be reset, like <code>clear</code>
 .  Grandfathered tags (see <code>ULocale.forLanguageTag</code>
 ) are converted to their canonical
  form before being processed.  Otherwise, the language tag
  must be well-formed (see <code>ULocale</code>) or an exception is
  thrown (unlike <code>ULocale.forLanguageTag</code>, which
  just discards ill-formed and following portions of the
  tag).
 @param languageTag the language tag
 @return This builder.
 @throw IllformedLocaleExceptionif <code>languageTag</code> is ill-formed
 - seealso: ULocale#forLanguageTag(String)
 */
- (AndroidIcuUtilULocale_Builder *)setLanguageTagWithNSString:(NSString *)languageTag;

/*!
 @brief Resets the <code>Builder</code> to match the provided 
 <code>locale</code>.Existing state is discarded.
 <p>All fields of the locale must be well-formed, see <code>Locale</code>.
  
 <p>Locales with any ill-formed fields cause 
 <code>IllformedLocaleException</code> to be thrown.
 @param locale the locale
 @return This builder.
 @throw IllformedLocaleExceptionif <code>locale</code> has
  any ill-formed fields.
 @throw NullPointerExceptionif <code>locale</code> is null.
 */
- (AndroidIcuUtilULocale_Builder *)setLocaleWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale;

/*!
 @brief Sets the region.If region is null or the empty string, the region
  in this <code>Builder</code> is removed.
 Otherwise,
  the region must be well-formed or an exception is thrown. 
 <p>The typical region value is a two-letter ISO 3166 code or a
  three-digit UN M.49 area code. 
 <p>The country value in the <code>Locale</code> created by the 
 <code>Builder</code> is always normalized to upper case.
 @param region the region
 @return This builder.
 @throw IllformedLocaleExceptionif <code>region</code> is ill-formed
 */
- (AndroidIcuUtilULocale_Builder *)setRegionWithNSString:(NSString *)region;

/*!
 @brief Sets the script.If <code>script</code> is null or the empty string,
  the script in this <code>Builder</code> is removed.
 Otherwise, the script must be well-formed or an exception is thrown. 
 <p>The typical script value is a four-letter script code as defined by ISO 15924.
 @param script the script
 @return This builder.
 @throw IllformedLocaleExceptionif <code>script</code> is ill-formed
 */
- (AndroidIcuUtilULocale_Builder *)setScriptWithNSString:(NSString *)script;

/*!
 @brief Sets the Unicode locale keyword type for the given key.If the type
  is null, the Unicode keyword is removed.
 Otherwise, the key must be
  non-null and both key and type must be well-formed or an exception
  is thrown. 
 <p>Keys and types are converted to lower case. 
 <p><b>Note</b>:Setting the 'u' extension via <code>setExtension</code>
  replaces all Unicode locale keywords with those defined in the
  extension.
 @param key the Unicode locale key
 @param type the Unicode locale type
 @return This builder.
 @throw IllformedLocaleExceptionif <code>key</code> or <code>type</code>
  is ill-formed
 @throw NullPointerExceptionif <code>key</code> is null
 - seealso: #setExtension(char, String)
 */
- (AndroidIcuUtilULocale_Builder *)setUnicodeLocaleKeywordWithNSString:(NSString *)key
                                                          withNSString:(NSString *)type;

/*!
 @brief Sets the variant.If variant is null or the empty string, the
  variant in this <code>Builder</code> is removed.
 Otherwise, it
  must consist of one or more well-formed subtags, or an exception is thrown. 
 <p><b>Note:</b> This method checks if <code>variant</code>
  satisfies the IETF BCP 47 variant subtag's syntax requirements,
  and normalizes the value to lowercase letters.  However, the 
 <code>ULocale</code> class does not impose any syntactic
  restriction on variant.  To set such a variant,
  use a ULocale constructor.
 @param variant the variant
 @return This builder.
 @throw IllformedLocaleExceptionif <code>variant</code> is ill-formed
 */
- (AndroidIcuUtilULocale_Builder *)setVariantWithNSString:(NSString *)variant;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidIcuUtilULocale_Builder)

FOUNDATION_EXPORT void AndroidIcuUtilULocale_Builder_init(AndroidIcuUtilULocale_Builder *self);

FOUNDATION_EXPORT AndroidIcuUtilULocale_Builder *new_AndroidIcuUtilULocale_Builder_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidIcuUtilULocale_Builder *create_AndroidIcuUtilULocale_Builder_init(void);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuUtilULocale_Builder)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_AndroidIcuUtilULocale")
