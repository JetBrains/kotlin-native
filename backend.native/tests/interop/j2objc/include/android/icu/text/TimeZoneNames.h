//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/external/icu/android_icu4j/src/main/java/android/icu/text/TimeZoneNames.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidIcuTextTimeZoneNames")
#ifdef RESTRICT_AndroidIcuTextTimeZoneNames
#define INCLUDE_ALL_AndroidIcuTextTimeZoneNames 0
#else
#define INCLUDE_ALL_AndroidIcuTextTimeZoneNames 1
#endif
#undef RESTRICT_AndroidIcuTextTimeZoneNames

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (AndroidIcuTextTimeZoneNames_) && (INCLUDE_ALL_AndroidIcuTextTimeZoneNames || defined(INCLUDE_AndroidIcuTextTimeZoneNames))
#define AndroidIcuTextTimeZoneNames_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class AndroidIcuTextTimeZoneNames_NameType;
@class AndroidIcuUtilULocale;
@class IOSObjectArray;
@class JavaUtilEnumSet;
@class JavaUtilLocale;
@protocol JavaLangCharSequence;
@protocol JavaUtilCollection;
@protocol JavaUtilSet;

/*!
 @brief <code>TimeZoneNames</code> is an abstract class representing the time zone display name data model defined
  by <a href="http://www.unicode.org/reports/tr35/">UTS#35 Unicode Locale Data Markup Language (LDML)</a>.
 The model defines meta zone, which is used for storing a set of display names. A meta zone can be shared
  by multiple time zones. Also a time zone may have multiple meta zone historic mappings. 
 <p>
  For example, people in the United States refer the zone used by the east part of North America as "Eastern Time".
  The tz database contains multiple time zones "America/New_York", "America/Detroit", "America/Montreal" and some
  others that belong to "Eastern Time". However, assigning different display names to these time zones does not make
  much sense for most of people. 
 <p>
  In <a href="http://cldr.unicode.org/">CLDR</a> (which uses LDML for representing locale data), the display name
  "Eastern Time" is stored as long generic display name of a meta zone identified by the ID "America_Eastern".
  Then, there is another table maintaining the historic mapping to meta zones for each time zone. The time zones in
  the above example ("America/New_York", "America/Detroit"...) are mapped to the meta zone "America_Eastern". 
 <p>
  Sometimes, a time zone is mapped to a different time zone in the past. For example, "America/Indiana/Knox"
  had been moving "Eastern Time" and "Central Time" back and forth. Therefore, it is necessary that time zone
  to meta zones mapping data are stored by date range.  
 <p><b>Note:</b>
  <p>
  <code>TimeZoneFormat</code> assumes an instance of <code>TimeZoneNames</code> is immutable. If you want to provide
  your own <code>TimeZoneNames</code> implementation and use it with <code>TimeZoneFormat</code>, you must follow
  the contract. 
 <p>
  The methods in this class assume that time zone IDs are already canonicalized. For example, you may not get proper
  result returned by a method with time zone ID "America/Indiana/Indianapolis", because it's not a canonical time zone
  ID (the canonical time zone ID for the time zone is "America/Indianapolis". See 
 <code>TimeZone.getCanonicalID(String)</code> about ICU canonical time zone IDs.  
 <p>
  In CLDR, most of time zone display names except location names are provided through meta zones. But a time zone may
  have a specific name that is not shared with other time zones.
  For example, time zone "Europe/London" has English long name for standard time "Greenwich Mean Time", which is also
  shared with other time zones. However, the long name for daylight saving time is "British Summer Time", which is only
  used for "Europe/London".  
 <p>
  <code>getTimeZoneDisplayName(String, NameType)</code> is designed for accessing a name only used by a single time zone.
  But is not necessarily mean that a subclass implementation use the same model with CLDR. A subclass implementation
  may provide time zone names only through <code>getTimeZoneDisplayName(String, NameType)</code>, or only through 
 <code>getMetaZoneDisplayName(String, NameType)</code>, or both.  
 <p>
  The default <code>TimeZoneNames</code> implementation returned by <code>getInstance(ULocale)</code> uses the locale data
  imported from CLDR. In CLDR, set of meta zone IDs and mappings between zone IDs and meta zone IDs are shared by all
  locales. Therefore, the behavior of <code>getAvailableMetaZoneIDs()</code>, <code>getAvailableMetaZoneIDs(String)</code>,
  <code>getMetaZoneID(String, long)</code>, and <code>getReferenceZoneID(String, String)</code> won't be changed no matter
  what locale is used for getting an instance of <code>TimeZoneNames</code>.
 */
@interface AndroidIcuTextTimeZoneNames : NSObject < JavaIoSerializable >

#pragma mark Public

/*!
 @brief Finds time zone name prefix matches for the input text at the
  given offset and returns a collection of the matches.
 @param text the text.
 @param start the starting offset within the text.
 @param types the set of name types, or  <code> null </code>  for all name types.
 @return A collection of matches.
 - seealso: NameType
 - seealso: MatchInfo
 */
- (id<JavaUtilCollection>)findWithJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                               withInt:(jint)start
                                   withJavaUtilEnumSet:(JavaUtilEnumSet *)types;

/*!
 @brief Returns an immutable set of all available meta zone IDs.
 @return An immutable set of all available meta zone IDs.
 */
- (id<JavaUtilSet>)getAvailableMetaZoneIDs;

/*!
 @brief Returns an immutable set of all available meta zone IDs used by the given time zone.
 @param tzID The canonical time zone ID.
 @return An immutable set of all available meta zone IDs used by the given time zone.
 */
- (id<JavaUtilSet>)getAvailableMetaZoneIDsWithNSString:(NSString *)tzID;

/*!
 @brief Returns the display name of the time zone at the given date.
 <p>
  <b>Note:</b> This method calls the subclass's <code>getTimeZoneDisplayName(String, NameType)</code> first. When the
  result is null, this method calls <code>getMetaZoneID(String, long)</code> to get the meta zone ID mapped from the
  time zone, then calls <code>getMetaZoneDisplayName(String, NameType)</code>.
 @param tzID The canonical time zone ID.
 @param type The display name type. See 
 <code>TimeZoneNames.NameType</code> .
 @param date The date
 @return The display name for the time zone at the given date. When this object does not have a localized display
          name for the time zone with the specified type and date, null is returned.
 */
- (NSString *)getDisplayNameWithNSString:(NSString *)tzID
withAndroidIcuTextTimeZoneNames_NameType:(AndroidIcuTextTimeZoneNames_NameType *)type
                                withLong:(jlong)date;

/*!
 */
- (void)getDisplayNamesWithNSString:(NSString *)tzID
withAndroidIcuTextTimeZoneNames_NameTypeArray:(IOSObjectArray *)types
                           withLong:(jlong)date
                  withNSStringArray:(IOSObjectArray *)dest
                            withInt:(jint)destOffset __attribute__((deprecated));

/*!
 @brief Returns the exemplar location name for the given time zone.When this object does not have a localized location
  name, the default implementation may still returns a programmatically generated name with the logic described
  below.
 <ol>
  <li>Check if the ID contains "/". If not, return null. 
 <li>Check if the ID does not start with "Etc/" or "SystemV/". If it does, return null. 
 <li>Extract a substring after the last occurrence of "/". 
 <li>Replace "_" with " ". 
 </ol>
  For example, "New York" is returned for the time zone ID "America/New_York" when this object does not have the
  localized location name.
 @param tzID The canonical time zone ID
 @return The exemplar location name for the given time zone, or null when a localized location name is not
          available and the fallback logic described above cannot extract location from the ID.
 */
- (NSString *)getExemplarLocationNameWithNSString:(NSString *)tzID;

/*!
 @brief Returns an instance of <code>TimeZoneNames</code> for the specified 
 <code>java.util.Locale</code>.
 @param locale The 
 <code>java.util.Locale</code> .
 @return An instance of <code>TimeZoneDisplayNames</code>
 */
+ (AndroidIcuTextTimeZoneNames *)getInstanceWithJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Returns an instance of <code>TimeZoneNames</code> for the specified locale.
 @param locale The locale.
 @return An instance of <code>TimeZoneNames</code>
 */
+ (AndroidIcuTextTimeZoneNames *)getInstanceWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale;

/*!
 @brief Returns the display name of the meta zone.
 @param mzID The meta zone ID.
 @param type The display name type. See 
 <code>TimeZoneNames.NameType</code> .
 @return The display name of the meta zone. When this object does not have a localized display name for the given
          meta zone with the specified type or the implementation does not provide any display names associated
          with meta zones, null is returned.
 */
- (NSString *)getMetaZoneDisplayNameWithNSString:(NSString *)mzID
        withAndroidIcuTextTimeZoneNames_NameType:(AndroidIcuTextTimeZoneNames_NameType *)type;

/*!
 @brief Returns the meta zone ID for the given canonical time zone ID at the given date.
 @param tzID The canonical time zone ID.
 @param date The date.
 @return The meta zone ID for the given time zone ID at the given date. If the time zone does not have a
          corresponding meta zone at the given date or the implementation does not support meta zones, null is
          returned.
 */
- (NSString *)getMetaZoneIDWithNSString:(NSString *)tzID
                               withLong:(jlong)date;

/*!
 @brief Returns the reference zone ID for the given meta zone ID for the region.
 Note: Each meta zone must have a reference zone associated with a special region "001" (world).
  Some meta zones may have region specific reference zone IDs other than the special region
  "001". When a meta zone does not have any region specific reference zone IDs, this method
  return the reference zone ID for the special region "001" (world).
 @param mzID The meta zone ID.
 @param region The region.
 @return The reference zone ID ("golden zone" in the LDML specification) for the given time zone ID for the
          region. If the meta zone is unknown or the implementation does not support meta zones, null is returned.
 */
- (NSString *)getReferenceZoneIDWithNSString:(NSString *)mzID
                                withNSString:(NSString *)region;

/*!
 @brief Returns the display name of the time zone.Unlike <code>getDisplayName(String, NameType, long)</code>,
  this method does not get a name from a meta zone used by the time zone.
 @param tzID The canonical time zone ID.
 @param type The display name type. See 
 <code>TimeZoneNames.NameType</code> .
 @return The display name for the time zone. When this object does not have a localized display name for the given
          time zone with the specified type, null is returned.
 */
- (NSString *)getTimeZoneDisplayNameWithNSString:(NSString *)tzID
        withAndroidIcuTextTimeZoneNames_NameType:(AndroidIcuTextTimeZoneNames_NameType *)type;

/*!
 @brief Returns an instance of <code>TimeZoneNames</code> containing only short specific
  zone names (<code>NameType.SHORT_STANDARD</code> and <code>NameType.SHORT_DAYLIGHT</code>),
  compatible with the IANA tz database's zone abbreviations (not localized).
 <br>
  Note: The input locale is used for resolving ambiguous names (e.g. "IST" is parsed
  as Israel Standard Time for Israel, while it is parsed as India Standard Time for
  all other regions). The zone names returned by this instance are not localized.
 */
+ (AndroidIcuTextTimeZoneNames *)getTZDBInstanceWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale;

/*!
 */
- (void)loadAllDisplayNames __attribute__((deprecated));

#pragma mark Protected

/*!
 @brief Sole constructor for invocation by subclass constructors.
 */
- (instancetype __nonnull)init;

@end

J2OBJC_STATIC_INIT(AndroidIcuTextTimeZoneNames)

FOUNDATION_EXPORT AndroidIcuTextTimeZoneNames *AndroidIcuTextTimeZoneNames_getInstanceWithAndroidIcuUtilULocale_(AndroidIcuUtilULocale *locale);

FOUNDATION_EXPORT AndroidIcuTextTimeZoneNames *AndroidIcuTextTimeZoneNames_getInstanceWithJavaUtilLocale_(JavaUtilLocale *locale);

FOUNDATION_EXPORT AndroidIcuTextTimeZoneNames *AndroidIcuTextTimeZoneNames_getTZDBInstanceWithAndroidIcuUtilULocale_(AndroidIcuUtilULocale *locale);

FOUNDATION_EXPORT void AndroidIcuTextTimeZoneNames_init(AndroidIcuTextTimeZoneNames *self);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuTextTimeZoneNames)

#endif

#if !defined (AndroidIcuTextTimeZoneNames_NameType_) && (INCLUDE_ALL_AndroidIcuTextTimeZoneNames || defined(INCLUDE_AndroidIcuTextTimeZoneNames_NameType))
#define AndroidIcuTextTimeZoneNames_NameType_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, AndroidIcuTextTimeZoneNames_NameType_Enum) {
  AndroidIcuTextTimeZoneNames_NameType_Enum_LONG_GENERIC = 0,
  AndroidIcuTextTimeZoneNames_NameType_Enum_LONG_STANDARD = 1,
  AndroidIcuTextTimeZoneNames_NameType_Enum_LONG_DAYLIGHT = 2,
  AndroidIcuTextTimeZoneNames_NameType_Enum_SHORT_GENERIC = 3,
  AndroidIcuTextTimeZoneNames_NameType_Enum_SHORT_STANDARD = 4,
  AndroidIcuTextTimeZoneNames_NameType_Enum_SHORT_DAYLIGHT = 5,
  AndroidIcuTextTimeZoneNames_NameType_Enum_EXEMPLAR_LOCATION = 6,
};

/*!
 @brief Time zone display name types
 */
@interface AndroidIcuTextTimeZoneNames_NameType : JavaLangEnum

@property (readonly, class, nonnull) AndroidIcuTextTimeZoneNames_NameType *LONG_GENERIC NS_SWIFT_NAME(LONG_GENERIC);
@property (readonly, class, nonnull) AndroidIcuTextTimeZoneNames_NameType *LONG_STANDARD NS_SWIFT_NAME(LONG_STANDARD);
@property (readonly, class, nonnull) AndroidIcuTextTimeZoneNames_NameType *LONG_DAYLIGHT NS_SWIFT_NAME(LONG_DAYLIGHT);
@property (readonly, class, nonnull) AndroidIcuTextTimeZoneNames_NameType *SHORT_GENERIC NS_SWIFT_NAME(SHORT_GENERIC);
@property (readonly, class, nonnull) AndroidIcuTextTimeZoneNames_NameType *SHORT_STANDARD NS_SWIFT_NAME(SHORT_STANDARD);
@property (readonly, class, nonnull) AndroidIcuTextTimeZoneNames_NameType *SHORT_DAYLIGHT NS_SWIFT_NAME(SHORT_DAYLIGHT);
@property (readonly, class, nonnull) AndroidIcuTextTimeZoneNames_NameType *EXEMPLAR_LOCATION NS_SWIFT_NAME(EXEMPLAR_LOCATION);
+ (AndroidIcuTextTimeZoneNames_NameType * __nonnull)LONG_GENERIC;

+ (AndroidIcuTextTimeZoneNames_NameType * __nonnull)LONG_STANDARD;

+ (AndroidIcuTextTimeZoneNames_NameType * __nonnull)LONG_DAYLIGHT;

+ (AndroidIcuTextTimeZoneNames_NameType * __nonnull)SHORT_GENERIC;

+ (AndroidIcuTextTimeZoneNames_NameType * __nonnull)SHORT_STANDARD;

+ (AndroidIcuTextTimeZoneNames_NameType * __nonnull)SHORT_DAYLIGHT;

+ (AndroidIcuTextTimeZoneNames_NameType * __nonnull)EXEMPLAR_LOCATION;

#pragma mark Public

+ (AndroidIcuTextTimeZoneNames_NameType *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (AndroidIcuTextTimeZoneNames_NameType_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(AndroidIcuTextTimeZoneNames_NameType)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT AndroidIcuTextTimeZoneNames_NameType *AndroidIcuTextTimeZoneNames_NameType_values_[];

/*!
 @brief Long display name, such as "Eastern Time".
 */
inline AndroidIcuTextTimeZoneNames_NameType *AndroidIcuTextTimeZoneNames_NameType_get_LONG_GENERIC(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextTimeZoneNames_NameType, LONG_GENERIC)

/*!
 @brief Long display name for standard time, such as "Eastern Standard Time".
 */
inline AndroidIcuTextTimeZoneNames_NameType *AndroidIcuTextTimeZoneNames_NameType_get_LONG_STANDARD(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextTimeZoneNames_NameType, LONG_STANDARD)

/*!
 @brief Long display name for daylight saving time, such as "Eastern Daylight Time".
 */
inline AndroidIcuTextTimeZoneNames_NameType *AndroidIcuTextTimeZoneNames_NameType_get_LONG_DAYLIGHT(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextTimeZoneNames_NameType, LONG_DAYLIGHT)

/*!
 @brief Short display name, such as "ET".
 */
inline AndroidIcuTextTimeZoneNames_NameType *AndroidIcuTextTimeZoneNames_NameType_get_SHORT_GENERIC(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextTimeZoneNames_NameType, SHORT_GENERIC)

/*!
 @brief Short display name for standard time, such as "EST".
 */
inline AndroidIcuTextTimeZoneNames_NameType *AndroidIcuTextTimeZoneNames_NameType_get_SHORT_STANDARD(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextTimeZoneNames_NameType, SHORT_STANDARD)

/*!
 @brief Short display name for daylight saving time, such as "EDT".
 */
inline AndroidIcuTextTimeZoneNames_NameType *AndroidIcuTextTimeZoneNames_NameType_get_SHORT_DAYLIGHT(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextTimeZoneNames_NameType, SHORT_DAYLIGHT)

/*!
 @brief Exemplar location name, such as "Los Angeles".
 */
inline AndroidIcuTextTimeZoneNames_NameType *AndroidIcuTextTimeZoneNames_NameType_get_EXEMPLAR_LOCATION(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextTimeZoneNames_NameType, EXEMPLAR_LOCATION)

FOUNDATION_EXPORT IOSObjectArray *AndroidIcuTextTimeZoneNames_NameType_values(void);

FOUNDATION_EXPORT AndroidIcuTextTimeZoneNames_NameType *AndroidIcuTextTimeZoneNames_NameType_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT AndroidIcuTextTimeZoneNames_NameType *AndroidIcuTextTimeZoneNames_NameType_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuTextTimeZoneNames_NameType)

#endif

#if !defined (AndroidIcuTextTimeZoneNames_MatchInfo_) && (INCLUDE_ALL_AndroidIcuTextTimeZoneNames || defined(INCLUDE_AndroidIcuTextTimeZoneNames_MatchInfo))
#define AndroidIcuTextTimeZoneNames_MatchInfo_

@class AndroidIcuTextTimeZoneNames_NameType;

/*!
 @brief A <code>MatchInfo</code> represents a time zone name match used by 
 <code>TimeZoneNames.find(CharSequence, int, EnumSet)</code>.
 */
@interface AndroidIcuTextTimeZoneNames_MatchInfo : NSObject

#pragma mark Public

/*!
 @brief Constructing a <code>MatchInfo</code>.
 @param nameType the name type enum.
 @param tzID the time zone ID, or null
 @param mzID the meta zone ID, or null
 @param matchLength the match length.
 @throw IllegalArgumentExceptionwhen 1) <code>nameType</code> is <code>null</code>,
  or 2) both <code>tzID</code> and <code>mzID</code> are <code>null</code>,
  or 3) <code>matchLength</code> is 0 or smaller.
 - seealso: NameType
 */
- (instancetype __nonnull)initWithAndroidIcuTextTimeZoneNames_NameType:(AndroidIcuTextTimeZoneNames_NameType *)nameType
                                                          withNSString:(NSString *)tzID
                                                          withNSString:(NSString *)mzID
                                                               withInt:(jint)matchLength;

/*!
 @brief Returns the match length.
 @return the match length.
 */
- (jint)matchLength;

/*!
 @brief Returns the meta zone ID, or <code>null</code> if not available.
 <p><b>Note</b>: A <code>MatchInfo</code> must have either a time zone ID
  or a meta zone ID.
 @return the meta zone ID, or <code>null</code>.
 - seealso: #tzID()
 */
- (NSString *)mzID;

/*!
 @brief Returns the time zone name type.
 @return the time zone name type enum.
 - seealso: NameType
 */
- (AndroidIcuTextTimeZoneNames_NameType *)nameType;

/*!
 @brief Returns the time zone ID, or <code>null</code> if not available.
 <p><b>Note</b>: A <code>MatchInfo</code> must have either a time zone ID
  or a meta zone ID.
 @return the time zone ID, or <code>null</code>.
 - seealso: #mzID()
 */
- (NSString *)tzID;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidIcuTextTimeZoneNames_MatchInfo)

FOUNDATION_EXPORT void AndroidIcuTextTimeZoneNames_MatchInfo_initWithAndroidIcuTextTimeZoneNames_NameType_withNSString_withNSString_withInt_(AndroidIcuTextTimeZoneNames_MatchInfo *self, AndroidIcuTextTimeZoneNames_NameType *nameType, NSString *tzID, NSString *mzID, jint matchLength);

FOUNDATION_EXPORT AndroidIcuTextTimeZoneNames_MatchInfo *new_AndroidIcuTextTimeZoneNames_MatchInfo_initWithAndroidIcuTextTimeZoneNames_NameType_withNSString_withNSString_withInt_(AndroidIcuTextTimeZoneNames_NameType *nameType, NSString *tzID, NSString *mzID, jint matchLength) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidIcuTextTimeZoneNames_MatchInfo *create_AndroidIcuTextTimeZoneNames_MatchInfo_initWithAndroidIcuTextTimeZoneNames_NameType_withNSString_withNSString_withInt_(AndroidIcuTextTimeZoneNames_NameType *nameType, NSString *tzID, NSString *mzID, jint matchLength);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuTextTimeZoneNames_MatchInfo)

#endif

#if !defined (AndroidIcuTextTimeZoneNames_Factory_) && (INCLUDE_ALL_AndroidIcuTextTimeZoneNames || defined(INCLUDE_AndroidIcuTextTimeZoneNames_Factory))
#define AndroidIcuTextTimeZoneNames_Factory_

@class AndroidIcuTextTimeZoneNames;
@class AndroidIcuUtilULocale;

/*!
 @brief The super class of <code>TimeZoneNames</code> service factory classes.
 */
__attribute__((deprecated))
@interface AndroidIcuTextTimeZoneNames_Factory : NSObject

#pragma mark Public

/*!
 @brief The factory method of <code>TimeZoneNames</code>.
 @param locale The display locale
 @return An instance of <code>TimeZoneNames</code>.
 */
- (AndroidIcuTextTimeZoneNames *)getTimeZoneNamesWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale __attribute__((deprecated));

#pragma mark Protected

/*!
 @brief Sole constructor
 */
- (instancetype __nonnull)init __attribute__((deprecated));

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidIcuTextTimeZoneNames_Factory)

FOUNDATION_EXPORT void AndroidIcuTextTimeZoneNames_Factory_init(AndroidIcuTextTimeZoneNames_Factory *self);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuTextTimeZoneNames_Factory)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_AndroidIcuTextTimeZoneNames")
