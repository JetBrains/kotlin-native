//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/external/icu/android_icu4j/src/main/java/android/icu/text/DateFormat.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidIcuTextDateFormat")
#ifdef RESTRICT_AndroidIcuTextDateFormat
#define INCLUDE_ALL_AndroidIcuTextDateFormat 0
#else
#define INCLUDE_ALL_AndroidIcuTextDateFormat 1
#endif
#undef RESTRICT_AndroidIcuTextDateFormat

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (AndroidIcuTextDateFormat_) && (INCLUDE_ALL_AndroidIcuTextDateFormat || defined(INCLUDE_AndroidIcuTextDateFormat))
#define AndroidIcuTextDateFormat_

#define RESTRICT_AndroidIcuTextUFormat 1
#define INCLUDE_AndroidIcuTextUFormat 1
#include "android/icu/text/UFormat.h"

@class AndroidIcuTextDateFormat_BooleanAttribute;
@class AndroidIcuTextDisplayContext;
@class AndroidIcuTextDisplayContext_Type;
@class AndroidIcuTextNumberFormat;
@class AndroidIcuUtilCalendar;
@class AndroidIcuUtilTimeZone;
@class AndroidIcuUtilULocale;
@class IOSObjectArray;
@class JavaLangStringBuffer;
@class JavaTextFieldPosition;
@class JavaTextParsePosition;
@class JavaUtilDate;
@class JavaUtilLocale;
@protocol JavaUtilList;

/*!
 @brief <strong>[icu enhancement]</strong> ICU's replacement for <code>java.text.DateFormat</code>.
 &nbsp;Methods, fields, and other functionality specific to ICU are labeled '<strong>[icu]</strong>'.
 <p>
  DateFormat is an abstract class for date/time formatting subclasses which formats and parses dates or time in a
  language-independent manner. The date/time formatting subclass, such as SimpleDateFormat, allows for formatting
  (i.e., date -&gt; text), parsing (text -&gt; date), and normalization. The date is represented as a <code>Date</code>
  object or as the milliseconds since January 1, 1970, 00:00:00 GMT. 
 <p>
  DateFormat helps you to format and parse dates for any locale. Your code can be completely independent of the locale
  conventions for months, days of the week, or even the calendar format: lunar vs. solar. It provides many class
  methods for obtaining default date/time formatters based on the default for a given locale and a number of formatting
  styles or arbitrary "skeletons". 
 <ol>
  <li>The formatting styles include FULL, LONG, MEDIUM, and SHORT. More detail and examples of using these styles are
  provided in the method descriptions. 
 <li>The formatting styles only cover a fraction of the necessary usage. You often need to have just certain
  combinations of fields, like Month and Year, but have it to be formatted appropriate to a given locale. This is done
  using the (misnamed) getPatternInstance() method, supplying a skeleton. There are a number of constants that have
  common pre-defined skeletons, such as <code>MINUTE_SECOND</code> for something like "13:45" or <code>YEAR_ABBR_MONTH</code>
  for something like "Sept 2012". 
 </ol>
  
 <p>
  To format a date for the current Locale, use one of the static factory methods: 
 @code

  myString = DateFormat.getDateInstance().format(myDate);
  myString = DateFormat.getPatternInstance(DateFormat.YEAR_ABBR_MONTH).format(myDate); 
  
@endcode
  <p>
  If you are formatting multiple numbers, it is more efficient to get the format and use it multiple times so that the
  system doesn't have to fetch the information about the local language and country conventions multiple times. 
 @code

  DateFormat df = DateFormat.getDateInstance();
  for (int i = 0; i &lt; a.length; ++i) {
      output.println(df.format(myDate[i]) + &quot;; &quot;);
  } 
  
@endcode
  <p>
  To format a date for a different Locale, specify it in the call to getDateInstance(). 
 @code

  DateFormat df = DateFormat.getDateInstance(DateFormat.LONG, Locale.FRANCE); 
  
@endcode
  <p>
  You can use a DateFormat to parse also. 
 @code

  myDate = df.parse(myString); 
  
@endcode
  <p>
  There are many static factory methods available. Use getDateInstance to get the normal date format for that country.
  Use getTimeInstance to get the time format for that country. Use getDateTimeInstance to get a date and time format.
  You can pass in different options to these factory methods to control the length of the result; from SHORT to MEDIUM
  to LONG to FULL. The exact result depends on the locale, but generally: 
 <ul>
  <li>SHORT is completely numeric, such as 12.13.52 or 3:30pm 
 <li>MEDIUM is longer, such as Jan 12, 1952 
 <li>LONG is longer, such as January 12, 1952 or 3:30:32pm 
 <li>FULL is pretty completely specified, such as Tuesday, April 12, 1952 AD or 3:30:42pm PST. 
 </ul>
  
 <p>
  Use getPatternInstance to format with a skeleton. Typically this is with a predefined skeleton, like 
 <code>YEAR_ABBR_MONTH</code> for something like "Sept 2012". If you don't want to use one of the predefined skeletons,
  you can supply your own. The skeletons are like the patterns in SimpleDateFormat, except they: 
 <ol>
  <li>only keep the field pattern letter and ignore all other parts in a pattern, such as space, punctuation, and
  string literals. 
 <li>are independent of the order of fields. 
 <li>ignore certain differences in the field's pattern letter length: 
 <ol>
  <li>For those non-digit calendar fields, the pattern letter length is important, such as MMM, MMMM, and MMMMM; E and
  EEEE, and the field's pattern letter length is honored. 
 <li>For the digit calendar fields, such as M or MM, d or dd, yy or yyyy, the field pattern length is ignored and the
  best match, which is defined in date time patterns, will be returned without honor the field pattern letter length in
  skeleton. 
 </ol>
  </ol>
  
 <p>
  You can also set the time zone on the format if you wish. If you want even more control over the format or parsing,
  (or want to give your users more control), you can try casting the DateFormat you get from the factory methods to a
  SimpleDateFormat. This will work for the majority of countries; just remember to put it in a try block in case you
  encounter an unusual one. 
 <p>
  You can also use forms of the parse and format methods with ParsePosition and FieldPosition to allow you to 
 <ul>
  <li>progressively parse through pieces of a string. 
 <li>align any particular field, or find out where it is for selection on the screen. 
 </ul>
  
 <h3>Synchronization</h3>
  Date formats are not synchronized. It is recommended to create separate format instances for each thread. If multiple
  threads access a format concurrently, it must be synchronized externally.
 - seealso: UFormat
 - seealso: NumberFormat
 - seealso: SimpleDateFormat
 - seealso: android.icu.util.Calendar
 - seealso: android.icu.util.GregorianCalendar
 - seealso: android.icu.util.TimeZone
 @author Mark Davis, Chen-Lieh Huang, Alan Liu
 */
@interface AndroidIcuTextDateFormat : AndroidIcuTextUFormat {
 @public
  /*!
   @brief The calendar that <code>DateFormat</code> uses to produce the time field
  values needed to implement date and time formatting.Subclasses should
  initialize this to a calendar appropriate for the locale associated with this 
 <code>DateFormat</code>.
   */
  AndroidIcuUtilCalendar *calendar_;
  /*!
   @brief The number formatter that <code>DateFormat</code> uses to format numbers
  in dates and times.Subclasses should initialize this to a number format
  appropriate for the locale associated with this <code>DateFormat</code>.
   */
  AndroidIcuTextNumberFormat *numberFormat_;
}
@property (readonly, class) jint ERA_FIELD NS_SWIFT_NAME(ERA_FIELD);
@property (readonly, class) jint YEAR_FIELD NS_SWIFT_NAME(YEAR_FIELD);
@property (readonly, class) jint MONTH_FIELD NS_SWIFT_NAME(MONTH_FIELD);
@property (readonly, class) jint DATE_FIELD NS_SWIFT_NAME(DATE_FIELD);
@property (readonly, class) jint HOUR_OF_DAY1_FIELD NS_SWIFT_NAME(HOUR_OF_DAY1_FIELD);
@property (readonly, class) jint HOUR_OF_DAY0_FIELD NS_SWIFT_NAME(HOUR_OF_DAY0_FIELD);
@property (readonly, class) jint MINUTE_FIELD NS_SWIFT_NAME(MINUTE_FIELD);
@property (readonly, class) jint SECOND_FIELD NS_SWIFT_NAME(SECOND_FIELD);
@property (readonly, class) jint FRACTIONAL_SECOND_FIELD NS_SWIFT_NAME(FRACTIONAL_SECOND_FIELD);
@property (readonly, class) jint MILLISECOND_FIELD NS_SWIFT_NAME(MILLISECOND_FIELD);
@property (readonly, class) jint DAY_OF_WEEK_FIELD NS_SWIFT_NAME(DAY_OF_WEEK_FIELD);
@property (readonly, class) jint DAY_OF_YEAR_FIELD NS_SWIFT_NAME(DAY_OF_YEAR_FIELD);
@property (readonly, class) jint DAY_OF_WEEK_IN_MONTH_FIELD NS_SWIFT_NAME(DAY_OF_WEEK_IN_MONTH_FIELD);
@property (readonly, class) jint WEEK_OF_YEAR_FIELD NS_SWIFT_NAME(WEEK_OF_YEAR_FIELD);
@property (readonly, class) jint WEEK_OF_MONTH_FIELD NS_SWIFT_NAME(WEEK_OF_MONTH_FIELD);
@property (readonly, class) jint AM_PM_FIELD NS_SWIFT_NAME(AM_PM_FIELD);
@property (readonly, class) jint HOUR1_FIELD NS_SWIFT_NAME(HOUR1_FIELD);
@property (readonly, class) jint HOUR0_FIELD NS_SWIFT_NAME(HOUR0_FIELD);
@property (readonly, class) jint TIMEZONE_FIELD NS_SWIFT_NAME(TIMEZONE_FIELD);
@property (readonly, class) jint YEAR_WOY_FIELD NS_SWIFT_NAME(YEAR_WOY_FIELD);
@property (readonly, class) jint DOW_LOCAL_FIELD NS_SWIFT_NAME(DOW_LOCAL_FIELD);
@property (readonly, class) jint EXTENDED_YEAR_FIELD NS_SWIFT_NAME(EXTENDED_YEAR_FIELD);
@property (readonly, class) jint JULIAN_DAY_FIELD NS_SWIFT_NAME(JULIAN_DAY_FIELD);
@property (readonly, class) jint MILLISECONDS_IN_DAY_FIELD NS_SWIFT_NAME(MILLISECONDS_IN_DAY_FIELD);
@property (readonly, class) jint TIMEZONE_RFC_FIELD NS_SWIFT_NAME(TIMEZONE_RFC_FIELD);
@property (readonly, class) jint TIMEZONE_GENERIC_FIELD NS_SWIFT_NAME(TIMEZONE_GENERIC_FIELD);
@property (readonly, class) jint STANDALONE_DAY_FIELD NS_SWIFT_NAME(STANDALONE_DAY_FIELD);
@property (readonly, class) jint STANDALONE_MONTH_FIELD NS_SWIFT_NAME(STANDALONE_MONTH_FIELD);
@property (readonly, class) jint QUARTER_FIELD NS_SWIFT_NAME(QUARTER_FIELD);
@property (readonly, class) jint STANDALONE_QUARTER_FIELD NS_SWIFT_NAME(STANDALONE_QUARTER_FIELD);
@property (readonly, class) jint TIMEZONE_SPECIAL_FIELD NS_SWIFT_NAME(TIMEZONE_SPECIAL_FIELD);
@property (readonly, class) jint YEAR_NAME_FIELD NS_SWIFT_NAME(YEAR_NAME_FIELD);
@property (readonly, class) jint TIMEZONE_LOCALIZED_GMT_OFFSET_FIELD NS_SWIFT_NAME(TIMEZONE_LOCALIZED_GMT_OFFSET_FIELD);
@property (readonly, class) jint TIMEZONE_ISO_FIELD NS_SWIFT_NAME(TIMEZONE_ISO_FIELD);
@property (readonly, class) jint TIMEZONE_ISO_LOCAL_FIELD NS_SWIFT_NAME(TIMEZONE_ISO_LOCAL_FIELD);
@property (readonly, class) jint RELATED_YEAR NS_SWIFT_NAME(RELATED_YEAR);
@property (readonly, class) jint AM_PM_MIDNIGHT_NOON_FIELD NS_SWIFT_NAME(AM_PM_MIDNIGHT_NOON_FIELD);
@property (readonly, class) jint FLEXIBLE_DAY_PERIOD_FIELD NS_SWIFT_NAME(FLEXIBLE_DAY_PERIOD_FIELD);
@property (readonly, class) jint TIME_SEPARATOR NS_SWIFT_NAME(TIME_SEPARATOR);
@property (readonly, class) jint FIELD_COUNT NS_SWIFT_NAME(FIELD_COUNT);
@property (readonly, class) jint currentSerialVersion NS_SWIFT_NAME(currentSerialVersion);
@property (readonly, class) jint NONE NS_SWIFT_NAME(NONE);
@property (readonly, class) jint FULL NS_SWIFT_NAME(FULL);
@property (readonly, class) jint LONG NS_SWIFT_NAME(LONG);
@property (readonly, class) jint MEDIUM NS_SWIFT_NAME(MEDIUM);
@property (readonly, class) jint SHORT NS_SWIFT_NAME(SHORT);
@property (readonly, class) jint DEFAULT NS_SWIFT_NAME(DEFAULT);
@property (readonly, class) jint RELATIVE NS_SWIFT_NAME(RELATIVE);
@property (readonly, class) jint RELATIVE_FULL NS_SWIFT_NAME(RELATIVE_FULL);
@property (readonly, class) jint RELATIVE_LONG NS_SWIFT_NAME(RELATIVE_LONG);
@property (readonly, class) jint RELATIVE_MEDIUM NS_SWIFT_NAME(RELATIVE_MEDIUM);
@property (readonly, class) jint RELATIVE_SHORT NS_SWIFT_NAME(RELATIVE_SHORT);
@property (readonly, class) jint RELATIVE_DEFAULT NS_SWIFT_NAME(RELATIVE_DEFAULT);
@property (readonly, copy, class) NSString *YEAR NS_SWIFT_NAME(YEAR);
@property (readonly, copy, class) NSString *QUARTER NS_SWIFT_NAME(QUARTER);
@property (readonly, copy, class) NSString *ABBR_QUARTER NS_SWIFT_NAME(ABBR_QUARTER);
@property (readonly, copy, class) NSString *YEAR_QUARTER NS_SWIFT_NAME(YEAR_QUARTER);
@property (readonly, copy, class) NSString *YEAR_ABBR_QUARTER NS_SWIFT_NAME(YEAR_ABBR_QUARTER);
@property (readonly, copy, class) NSString *MONTH NS_SWIFT_NAME(MONTH);
@property (readonly, copy, class) NSString *ABBR_MONTH NS_SWIFT_NAME(ABBR_MONTH);
@property (readonly, copy, class) NSString *NUM_MONTH NS_SWIFT_NAME(NUM_MONTH);
@property (readonly, copy, class) NSString *YEAR_MONTH NS_SWIFT_NAME(YEAR_MONTH);
@property (readonly, copy, class) NSString *YEAR_ABBR_MONTH NS_SWIFT_NAME(YEAR_ABBR_MONTH);
@property (readonly, copy, class) NSString *YEAR_NUM_MONTH NS_SWIFT_NAME(YEAR_NUM_MONTH);
@property (readonly, copy, class) NSString *DAY NS_SWIFT_NAME(DAY);
@property (readonly, copy, class) NSString *YEAR_MONTH_DAY NS_SWIFT_NAME(YEAR_MONTH_DAY);
@property (readonly, copy, class) NSString *YEAR_ABBR_MONTH_DAY NS_SWIFT_NAME(YEAR_ABBR_MONTH_DAY);
@property (readonly, copy, class) NSString *YEAR_NUM_MONTH_DAY NS_SWIFT_NAME(YEAR_NUM_MONTH_DAY);
@property (readonly, copy, class) NSString *WEEKDAY NS_SWIFT_NAME(WEEKDAY);
@property (readonly, copy, class) NSString *ABBR_WEEKDAY NS_SWIFT_NAME(ABBR_WEEKDAY);
@property (readonly, copy, class) NSString *YEAR_MONTH_WEEKDAY_DAY NS_SWIFT_NAME(YEAR_MONTH_WEEKDAY_DAY);
@property (readonly, copy, class) NSString *YEAR_ABBR_MONTH_WEEKDAY_DAY NS_SWIFT_NAME(YEAR_ABBR_MONTH_WEEKDAY_DAY);
@property (readonly, copy, class) NSString *YEAR_NUM_MONTH_WEEKDAY_DAY NS_SWIFT_NAME(YEAR_NUM_MONTH_WEEKDAY_DAY);
@property (readonly, copy, class) NSString *MONTH_DAY NS_SWIFT_NAME(MONTH_DAY);
@property (readonly, copy, class) NSString *ABBR_MONTH_DAY NS_SWIFT_NAME(ABBR_MONTH_DAY);
@property (readonly, copy, class) NSString *NUM_MONTH_DAY NS_SWIFT_NAME(NUM_MONTH_DAY);
@property (readonly, copy, class) NSString *MONTH_WEEKDAY_DAY NS_SWIFT_NAME(MONTH_WEEKDAY_DAY);
@property (readonly, copy, class) NSString *ABBR_MONTH_WEEKDAY_DAY NS_SWIFT_NAME(ABBR_MONTH_WEEKDAY_DAY);
@property (readonly, copy, class) NSString *NUM_MONTH_WEEKDAY_DAY NS_SWIFT_NAME(NUM_MONTH_WEEKDAY_DAY);
@property (readonly, class, strong) id<JavaUtilList> DATE_SKELETONS NS_SWIFT_NAME(DATE_SKELETONS);
@property (readonly, copy, class) NSString *HOUR NS_SWIFT_NAME(HOUR);
@property (readonly, copy, class) NSString *HOUR24 NS_SWIFT_NAME(HOUR24);
@property (readonly, copy, class) NSString *MINUTE NS_SWIFT_NAME(MINUTE);
@property (readonly, copy, class) NSString *HOUR_MINUTE NS_SWIFT_NAME(HOUR_MINUTE);
@property (readonly, copy, class) NSString *HOUR24_MINUTE NS_SWIFT_NAME(HOUR24_MINUTE);
@property (readonly, copy, class) NSString *SECOND NS_SWIFT_NAME(SECOND);
@property (readonly, copy, class) NSString *HOUR_MINUTE_SECOND NS_SWIFT_NAME(HOUR_MINUTE_SECOND);
@property (readonly, copy, class) NSString *HOUR24_MINUTE_SECOND NS_SWIFT_NAME(HOUR24_MINUTE_SECOND);
@property (readonly, copy, class) NSString *MINUTE_SECOND NS_SWIFT_NAME(MINUTE_SECOND);
@property (readonly, class, strong) id<JavaUtilList> TIME_SKELETONS NS_SWIFT_NAME(TIME_SKELETONS);
@property (readonly, copy, class) NSString *LOCATION_TZ NS_SWIFT_NAME(LOCATION_TZ);
@property (readonly, copy, class) NSString *GENERIC_TZ NS_SWIFT_NAME(GENERIC_TZ);
@property (readonly, copy, class) NSString *ABBR_GENERIC_TZ NS_SWIFT_NAME(ABBR_GENERIC_TZ);
@property (readonly, copy, class) NSString *SPECIFIC_TZ NS_SWIFT_NAME(SPECIFIC_TZ);
@property (readonly, copy, class) NSString *ABBR_SPECIFIC_TZ NS_SWIFT_NAME(ABBR_SPECIFIC_TZ);
@property (readonly, copy, class) NSString *ABBR_UTC_TZ NS_SWIFT_NAME(ABBR_UTC_TZ);
@property (readonly, class, strong) id<JavaUtilList> ZONE_SKELETONS NS_SWIFT_NAME(ZONE_SKELETONS);
@property (readonly, copy, class) NSString *STANDALONE_MONTH NS_SWIFT_NAME(STANDALONE_MONTH);
@property (readonly, copy, class) NSString *ABBR_STANDALONE_MONTH NS_SWIFT_NAME(ABBR_STANDALONE_MONTH);
@property (readonly, copy, class) NSString *HOUR_MINUTE_GENERIC_TZ NS_SWIFT_NAME(HOUR_MINUTE_GENERIC_TZ);
@property (readonly, copy, class) NSString *HOUR_MINUTE_TZ NS_SWIFT_NAME(HOUR_MINUTE_TZ);
@property (readonly, copy, class) NSString *HOUR_GENERIC_TZ NS_SWIFT_NAME(HOUR_GENERIC_TZ);
@property (readonly, copy, class) NSString *HOUR_TZ NS_SWIFT_NAME(HOUR_TZ);

+ (jint)ERA_FIELD;

+ (jint)YEAR_FIELD;

+ (jint)MONTH_FIELD;

+ (jint)DATE_FIELD;

+ (jint)HOUR_OF_DAY1_FIELD;

+ (jint)HOUR_OF_DAY0_FIELD;

+ (jint)MINUTE_FIELD;

+ (jint)SECOND_FIELD;

+ (jint)FRACTIONAL_SECOND_FIELD;

+ (jint)MILLISECOND_FIELD;

+ (jint)DAY_OF_WEEK_FIELD;

+ (jint)DAY_OF_YEAR_FIELD;

+ (jint)DAY_OF_WEEK_IN_MONTH_FIELD;

+ (jint)WEEK_OF_YEAR_FIELD;

+ (jint)WEEK_OF_MONTH_FIELD;

+ (jint)AM_PM_FIELD;

+ (jint)HOUR1_FIELD;

+ (jint)HOUR0_FIELD;

+ (jint)TIMEZONE_FIELD;

+ (jint)YEAR_WOY_FIELD;

+ (jint)DOW_LOCAL_FIELD;

+ (jint)EXTENDED_YEAR_FIELD;

+ (jint)JULIAN_DAY_FIELD;

+ (jint)MILLISECONDS_IN_DAY_FIELD;

+ (jint)TIMEZONE_RFC_FIELD;

+ (jint)TIMEZONE_GENERIC_FIELD;

+ (jint)STANDALONE_DAY_FIELD;

+ (jint)STANDALONE_MONTH_FIELD;

+ (jint)QUARTER_FIELD;

+ (jint)STANDALONE_QUARTER_FIELD;

+ (jint)TIMEZONE_SPECIAL_FIELD;

+ (jint)YEAR_NAME_FIELD;

+ (jint)TIMEZONE_LOCALIZED_GMT_OFFSET_FIELD;

+ (jint)TIMEZONE_ISO_FIELD;

+ (jint)TIMEZONE_ISO_LOCAL_FIELD;

+ (jint)RELATED_YEAR;

+ (jint)AM_PM_MIDNIGHT_NOON_FIELD;

+ (jint)FLEXIBLE_DAY_PERIOD_FIELD;

+ (jint)TIME_SEPARATOR;

+ (jint)FIELD_COUNT;

+ (jint)currentSerialVersion;

+ (jint)NONE;

+ (jint)FULL;

+ (jint)LONG;

+ (jint)MEDIUM;

+ (jint)SHORT;

+ (jint)DEFAULT;

+ (jint)RELATIVE;

+ (jint)RELATIVE_FULL;

+ (jint)RELATIVE_LONG;

+ (jint)RELATIVE_MEDIUM;

+ (jint)RELATIVE_SHORT;

+ (jint)RELATIVE_DEFAULT;

+ (NSString *)YEAR;

+ (NSString *)QUARTER;

+ (NSString *)ABBR_QUARTER;

+ (NSString *)YEAR_QUARTER;

+ (NSString *)YEAR_ABBR_QUARTER;

+ (NSString *)MONTH;

+ (NSString *)ABBR_MONTH;

+ (NSString *)NUM_MONTH;

+ (NSString *)YEAR_MONTH;

+ (NSString *)YEAR_ABBR_MONTH;

+ (NSString *)YEAR_NUM_MONTH;

+ (NSString *)DAY;

+ (NSString *)YEAR_MONTH_DAY;

+ (NSString *)YEAR_ABBR_MONTH_DAY;

+ (NSString *)YEAR_NUM_MONTH_DAY;

+ (NSString *)WEEKDAY;

+ (NSString *)ABBR_WEEKDAY;

+ (NSString *)YEAR_MONTH_WEEKDAY_DAY;

+ (NSString *)YEAR_ABBR_MONTH_WEEKDAY_DAY;

+ (NSString *)YEAR_NUM_MONTH_WEEKDAY_DAY;

+ (NSString *)MONTH_DAY;

+ (NSString *)ABBR_MONTH_DAY;

+ (NSString *)NUM_MONTH_DAY;

+ (NSString *)MONTH_WEEKDAY_DAY;

+ (NSString *)ABBR_MONTH_WEEKDAY_DAY;

+ (NSString *)NUM_MONTH_WEEKDAY_DAY;

+ (id<JavaUtilList>)DATE_SKELETONS;

+ (NSString *)HOUR;

+ (NSString *)HOUR24;

+ (NSString *)MINUTE;

+ (NSString *)HOUR_MINUTE;

+ (NSString *)HOUR24_MINUTE;

+ (NSString *)SECOND;

+ (NSString *)HOUR_MINUTE_SECOND;

+ (NSString *)HOUR24_MINUTE_SECOND;

+ (NSString *)MINUTE_SECOND;

+ (id<JavaUtilList>)TIME_SKELETONS;

+ (NSString *)LOCATION_TZ;

+ (NSString *)GENERIC_TZ;

+ (NSString *)ABBR_GENERIC_TZ;

+ (NSString *)SPECIFIC_TZ;

+ (NSString *)ABBR_SPECIFIC_TZ;

+ (NSString *)ABBR_UTC_TZ;

+ (id<JavaUtilList>)ZONE_SKELETONS;

+ (NSString *)STANDALONE_MONTH;

+ (NSString *)ABBR_STANDALONE_MONTH;

+ (NSString *)HOUR_MINUTE_GENERIC_TZ;

+ (NSString *)HOUR_MINUTE_TZ;

+ (NSString *)HOUR_GENERIC_TZ;

+ (NSString *)HOUR_TZ;

#pragma mark Public

/*!
 @brief Overrides clone.
 */
- (id)java_clone;

/*!
 @brief Overrides equals.
 */
- (jboolean)isEqual:(id)obj;

/*!
 @brief Formats a date into a date/time string.
 @param cal a Calendar set to the date and time to be formatted  into a date/time string.  When the calendar type is different from
   the internal calendar held by this DateFormat instance, the date
   and the time zone will be inherited from the input calendar, but
   other calendar field values will be calculated by the internal calendar.
 @param toAppendTo the string buffer for the returning date/time string.
 @param fieldPosition keeps track of the position of the field  within the returned string.
   On input: an alignment field,
   if desired. On output: the offsets of the alignment field. For
   example, given a time text "1996.07.10 AD at 15:08:56 PDT",
   if the given fieldPosition is DateFormat.YEAR_FIELD, the
   begin index and end index of fieldPosition will be set to
   0 and 4, respectively.  Notice that if the same time field appears
   more than once in a pattern, the fieldPosition will be set for the first
   occurrence of that time field. For instance, formatting a Date to
   the time string "1 PM PDT (Pacific Daylight Time)" using the pattern
   "h a z (zzzz)" and the alignment field DateFormat.TIMEZONE_FIELD,
   the begin index and end index of fieldPosition will be set to  5 and 8, respectively, for the first occurrence of the timezone
   pattern character 'z'.
 @return the formatted date/time string.
 */
- (JavaLangStringBuffer *)formatWithAndroidIcuUtilCalendar:(AndroidIcuUtilCalendar *)cal
                                  withJavaLangStringBuffer:(JavaLangStringBuffer *)toAppendTo
                                 withJavaTextFieldPosition:(JavaTextFieldPosition *)fieldPosition;

/*!
 @brief Formats a Date into a date/time string.
 @param date the time value to be formatted into a time string.
 @return the formatted time string.
 */
- (NSString *)formatWithJavaUtilDate:(JavaUtilDate *)date;

/*!
 @brief Formats a Date into a date/time string.
 @param date a Date to be formatted into a date/time string.
 @param toAppendTo the string buffer for the returning date/time string.
 @param fieldPosition keeps track of the position of the field  within the returned string.
   On input: an alignment field,
   if desired. On output: the offsets of the alignment field. For
   example, given a time text "1996.07.10 AD at 15:08:56 PDT",
   if the given fieldPosition is DateFormat.YEAR_FIELD, the
   begin index and end index of fieldPosition will be set to
   0 and 4, respectively.  Notice that if the same time field appears
   more than once in a pattern, the fieldPosition will be set for the first
   occurrence of that time field. For instance, formatting a Date to
   the time string "1 PM PDT (Pacific Daylight Time)" using the pattern
   "h a z (zzzz)" and the alignment field DateFormat.TIMEZONE_FIELD,
   the begin index and end index of fieldPosition will be set to  5 and 8, respectively, for the first occurrence of the timezone
   pattern character 'z'.
 @return the formatted date/time string.
 */
- (JavaLangStringBuffer *)formatWithJavaUtilDate:(JavaUtilDate *)date
                        withJavaLangStringBuffer:(JavaLangStringBuffer *)toAppendTo
                       withJavaTextFieldPosition:(JavaTextFieldPosition *)fieldPosition;

/*!
 @brief Formats a time object into a time string.Examples of time objects
  are a time value expressed in milliseconds and a Date object.
 @param obj must be a Number or a Date or a Calendar.
 @param toAppendTo the string buffer for the returning time string.
 @return the formatted time string.
 @param fieldPosition keeps track of the position of the field  within the returned string.
   On input: an alignment field,
   if desired. On output: the offsets of the alignment field. For
   example, given a time text "1996.07.10 AD at 15:08:56 PDT",
   if the given fieldPosition is DateFormat.YEAR_FIELD, the
   begin index and end index of fieldPosition will be set to
   0 and 4, respectively.  Notice that if the same time field appears
   more than once in a pattern, the fieldPosition will be set for the first
   occurrence of that time field. For instance, formatting a Date to
   the time string "1 PM PDT (Pacific Daylight Time)" using the pattern
   "h a z (zzzz)" and the alignment field DateFormat.TIMEZONE_FIELD,
   the begin index and end index of fieldPosition will be set to  5 and 8, respectively, for the first occurrence of the timezone
   pattern character 'z'.
 - seealso: java.text.Format
 */
- (JavaLangStringBuffer *)formatWithId:(id)obj
              withJavaLangStringBuffer:(JavaLangStringBuffer *)toAppendTo
             withJavaTextFieldPosition:(JavaTextFieldPosition *)fieldPosition;

/*!
 @brief Returns the set of locales for which DateFormats are installed.
 @return the set of locales for which DateFormats are installed.
 */
+ (IOSObjectArray *)getAvailableLocales;

/*!
 @brief <strong>[icu]</strong> Returns the set of locales for which DateFormats are installed.
 @return the set of locales for which DateFormats are installed.
 */
+ (IOSObjectArray *)getAvailableULocales;

/*!
 @brief Returns the current value for the specified BooleanAttribute for this instance
  if attribute is missing false is returned.
 - seealso: BooleanAttribute
 */
- (jboolean)getBooleanAttributeWithAndroidIcuTextDateFormat_BooleanAttribute:(AndroidIcuTextDateFormat_BooleanAttribute *)key;

/*!
 @brief Returns the calendar associated with this date/time formatter.
 @return the calendar associated with this date/time formatter.
 */
- (AndroidIcuUtilCalendar *)getCalendar;

/*!
 @brief <strong>[icu]</strong> Get the formatter's DisplayContext value for the specified DisplayContext.Type,
  such as CAPITALIZATION.
 @param type the DisplayContext.Type whose value to return
 @return the current DisplayContext setting for the specified type
 */
- (AndroidIcuTextDisplayContext *)getContextWithAndroidIcuTextDisplayContext_Type:(AndroidIcuTextDisplayContext_Type *)type;

/*!
 @brief Returns the date formatter with the default formatting style
  for the default <code>FORMAT</code> locale.
 @return a date formatter.
 - seealso: Category#FORMAT
 */
+ (AndroidIcuTextDateFormat *)getDateInstance;

/*!
 @brief Creates a <code>DateFormat</code> object for the default locale that can be used
  to format dates in the calendar system specified by <code>cal</code>.
 <p>
 @param cal The calendar system for which a date format is desired.
 @param dateStyle The type of date format desired.  This can be               
 <code>DateFormat.SHORT</code> , <code>DateFormat.MEDIUM</code> ,               etc.
 */
+ (AndroidIcuTextDateFormat *)getDateInstanceWithAndroidIcuUtilCalendar:(AndroidIcuUtilCalendar *)cal
                                                                withInt:(jint)dateStyle;

/*!
 @brief Creates a <code>DateFormat</code> object that can be used to format dates in
  the calendar system specified by <code>cal</code>.
 <p>
 @param cal The calendar system for which a date format is desired.
 @param dateStyle The type of date format desired.  This can be               
 <code>DateFormat.SHORT</code> , <code>DateFormat.MEDIUM</code> ,               etc.
 @param locale The locale for which the date format is desired.
 */
+ (AndroidIcuTextDateFormat *)getDateInstanceWithAndroidIcuUtilCalendar:(AndroidIcuUtilCalendar *)cal
                                                                withInt:(jint)dateStyle
                                                     withJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Creates a <code>DateFormat</code> object that can be used to format dates in
  the calendar system specified by <code>cal</code>.
 <p>
 @param cal The calendar system for which a date format is desired.
 @param dateStyle The type of date format desired.  This can be               
 <code>DateFormat.SHORT</code> , <code>DateFormat.MEDIUM</code> ,               etc.
 @param locale The locale for which the date format is desired.
 */
+ (AndroidIcuTextDateFormat *)getDateInstanceWithAndroidIcuUtilCalendar:(AndroidIcuUtilCalendar *)cal
                                                                withInt:(jint)dateStyle
                                              withAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale;

/*!
 @brief Returns the date formatter with the given formatting style
  for the default <code>FORMAT</code> locale.
 @param style the given formatting style. For example,  SHORT for "M/d/yy" in the US locale. As currently implemented, relative date
   formatting only affects a limited range of calendar days before or after the
   current date, based on the CLDR 
  &lt; field type="day" &gt; / &lt; relative &gt;  data: For example,  in English, "Yesterday", "Today", and "Tomorrow". Outside of this range, relative  dates are formatted using the corresponding non-relative style.
 @return a date formatter.
 - seealso: Category#FORMAT
 */
+ (AndroidIcuTextDateFormat *)getDateInstanceWithInt:(jint)style;

/*!
 @brief Returns the date formatter with the given formatting style
  for the given locale.
 @param style the given formatting style. For example,  SHORT for "M/d/yy" in the US locale. As currently implemented, relative date
   formatting only affects a limited range of calendar days before or after the
   current date, based on the CLDR 
  &lt; field type="day" &gt; / &lt; relative &gt;  data: For example,  in English, "Yesterday", "Today", and "Tomorrow". Outside of this range, relative  dates are formatted using the corresponding non-relative style.
 @param aLocale the given locale.
 @return a date formatter.
 */
+ (AndroidIcuTextDateFormat *)getDateInstanceWithInt:(jint)style
                                  withJavaUtilLocale:(JavaUtilLocale *)aLocale;

/*!
 @brief Returns the date formatter with the given formatting style
  for the given locale.
 @param style the given formatting style. For example,  SHORT for "M/d/yy" in the US locale. As currently implemented, relative date
   formatting only affects a limited range of calendar days before or after the
   current date, based on the CLDR 
  &lt; field type="day" &gt; / &lt; relative &gt;  data: For example,  in English, "Yesterday", "Today", and "Tomorrow". Outside of this range, relative  dates are formatted using the corresponding non-relative style.
 @param locale the given ulocale.
 @return a date formatter.
 */
+ (AndroidIcuTextDateFormat *)getDateInstanceWithInt:(jint)style
                           withAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale;

/*!
 @brief Returns the date/time formatter with the default formatting style
  for the default <code>FORMAT</code> locale.
 @return a date/time formatter.
 - seealso: Category#FORMAT
 */
+ (AndroidIcuTextDateFormat *)getDateTimeInstance;

/*!
 @brief Creates a <code>DateFormat</code> object for the default locale that can be used to format
  dates and times in the calendar system specified by <code>cal</code>.
 @param cal The calendar system for which a date/time format is desired.
 @param dateStyle The type of date format desired.  This can be               
 <code>DateFormat.SHORT</code> , <code>DateFormat.MEDIUM</code> ,               etc.
 @param timeStyle The type of time format desired.  This can be               
 <code>DateFormat.SHORT</code> , <code>DateFormat.MEDIUM</code> ,               etc.
 - seealso: DateFormat#getDateTimeInstance
 */
+ (AndroidIcuTextDateFormat *)getDateTimeInstanceWithAndroidIcuUtilCalendar:(AndroidIcuUtilCalendar *)cal
                                                                    withInt:(jint)dateStyle
                                                                    withInt:(jint)timeStyle;

/*!
 @brief Creates a <code>DateFormat</code> object that can be used to format dates and times in
  the calendar system specified by <code>cal</code>.
 @param cal The calendar system for which a date/time format is desired.
 @param dateStyle The type of date format desired.  This can be               
 <code>DateFormat.SHORT</code> , <code>DateFormat.MEDIUM</code> ,               etc.
 @param timeStyle The type of time format desired.  This can be               
 <code>DateFormat.SHORT</code> , <code>DateFormat.MEDIUM</code> ,               etc.
 @param locale The locale for which the date/time format is desired.
 - seealso: DateFormat#getDateTimeInstance
 */
+ (AndroidIcuTextDateFormat *)getDateTimeInstanceWithAndroidIcuUtilCalendar:(AndroidIcuUtilCalendar *)cal
                                                                    withInt:(jint)dateStyle
                                                                    withInt:(jint)timeStyle
                                                         withJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Creates a <code>DateFormat</code> object that can be used to format dates and times in
  the calendar system specified by <code>cal</code>.
 @param cal The calendar system for which a date/time format is desired.
 @param dateStyle The type of date format desired.  This can be               
 <code>DateFormat.SHORT</code> , <code>DateFormat.MEDIUM</code> ,               etc.
 @param timeStyle The type of time format desired.  This can be               
 <code>DateFormat.SHORT</code> , <code>DateFormat.MEDIUM</code> ,               etc.
 @param locale The locale for which the date/time format is desired.
 - seealso: DateFormat#getDateTimeInstance
 */
+ (AndroidIcuTextDateFormat *)getDateTimeInstanceWithAndroidIcuUtilCalendar:(AndroidIcuUtilCalendar *)cal
                                                                    withInt:(jint)dateStyle
                                                                    withInt:(jint)timeStyle
                                                  withAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale;

/*!
 @brief Returns the date/time formatter with the given date and time
  formatting styles for the default <code>FORMAT</code> locale.
 @param dateStyle the given date formatting style. For example,  SHORT for "M/d/yy" in the US locale. As currently implemented, relative date
   formatting only affects a limited range of calendar days before or after the
   current date, based on the CLDR 
  &lt; field type="day" &gt; / &lt; relative &gt;  data: For example,  in English, "Yesterday", "Today", and "Tomorrow". Outside of this range, relative  dates are formatted using the corresponding non-relative style.
 @param timeStyle the given time formatting style. For example,  SHORT for "h:mm a" in the US locale. Relative time styles are not currently
   supported, and behave just like the corresponding non-relative style.
 @return a date/time formatter.
 - seealso: Category#FORMAT
 */
+ (AndroidIcuTextDateFormat *)getDateTimeInstanceWithInt:(jint)dateStyle
                                                 withInt:(jint)timeStyle;

/*!
 @brief Returns the date/time formatter with the given formatting styles
  for the given locale.
 @param dateStyle the given date formatting style. As currently implemented, relative date  formatting only affects a limited range of calendar days before or after the
   current date, based on the CLDR 
  &lt; field type="day" &gt; / &lt; relative &gt;  data: For example,  in English, "Yesterday", "Today", and "Tomorrow". Outside of this range, relative  dates are formatted using the corresponding non-relative style.
 @param timeStyle the given time formatting style. Relative time styles are not  currently supported, and behave just like the corresponding non-relative style.
 @param aLocale the given locale.
 @return a date/time formatter.
 */
+ (AndroidIcuTextDateFormat *)getDateTimeInstanceWithInt:(jint)dateStyle
                                                 withInt:(jint)timeStyle
                                      withJavaUtilLocale:(JavaUtilLocale *)aLocale;

/*!
 @brief Returns the date/time formatter with the given formatting styles
  for the given locale.
 @param dateStyle the given date formatting style. As currently implemented, relative date  formatting only affects a limited range of calendar days before or after the
   current date, based on the CLDR 
  &lt; field type="day" &gt; / &lt; relative &gt;  data: For example,  in English, "Yesterday", "Today", and "Tomorrow". Outside of this range, relative  dates are formatted using the corresponding non-relative style.
 @param timeStyle the given time formatting style. Relative time styles are not  currently supported, and behave just like the corresponding non-relative style.
 @param locale the given ulocale.
 @return a date/time formatter.
 */
+ (AndroidIcuTextDateFormat *)getDateTimeInstanceWithInt:(jint)dateStyle
                                                 withInt:(jint)timeStyle
                               withAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale;

/*!
 @brief Returns a default date/time formatter that uses the SHORT style for both the
  date and the time.
 */
+ (AndroidIcuTextDateFormat *)getInstance;

/*!
 @brief Returns a default date/time formatter that uses the SHORT style for both the
  date and the time.
 @param cal The calendar system for which a date/time format is desired.
 */
+ (AndroidIcuTextDateFormat *)getInstanceWithAndroidIcuUtilCalendar:(AndroidIcuUtilCalendar *)cal;

/*!
 @brief Returns a date/time formatter that uses the SHORT style
  for both the date and the time.
 @param cal The calendar system for which a date/time format is desired.
 @param locale The locale for which the date/time format is desired.
 */
+ (AndroidIcuTextDateFormat *)getInstanceWithAndroidIcuUtilCalendar:(AndroidIcuUtilCalendar *)cal
                                                 withJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Returns a date/time formatter that uses the SHORT style
  for both the date and the time.
 @param cal The calendar system for which a date/time format is desired.
 @param locale The locale for which the date/time format is desired.
 */
+ (AndroidIcuTextDateFormat *)getInstanceWithAndroidIcuUtilCalendar:(AndroidIcuUtilCalendar *)cal
                                          withAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale;

/*!
 @brief <strong>[icu]</strong> Creates a <code>DateFormat</code> object that can be used to format dates and
  times in the calendar system specified by <code>cal</code>.
 @param cal The calendar system for which a date/time format is desired.
 @param skeleton The skeleton that selects the fields to be formatted. (Uses the               
 <code>DateTimePatternGenerator</code> .)  This can be               
 <code>DateFormat.ABBR_MONTH</code> , <code>DateFormat.MONTH_WEEKDAY_DAY</code> ,               etc.
 @param locale The locale for which the date/time format is desired.
 */
+ (AndroidIcuTextDateFormat *)getInstanceForSkeletonWithAndroidIcuUtilCalendar:(AndroidIcuUtilCalendar *)cal
                                                                  withNSString:(NSString *)skeleton
                                                            withJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief <strong>[icu]</strong> Creates a <code>DateFormat</code> object that can be used to format dates and
  times in the calendar system specified by <code>cal</code>.
 @param cal The calendar system for which a date/time format is desired.
 @param skeleton The skeleton that selects the fields to be formatted. (Uses the               
 <code>DateTimePatternGenerator</code> .)  This can be               
 <code>DateFormat.ABBR_MONTH</code> , <code>DateFormat.MONTH_WEEKDAY_DAY</code> ,               etc.
 @param locale The locale for which the date/time format is desired.
 */
+ (AndroidIcuTextDateFormat *)getInstanceForSkeletonWithAndroidIcuUtilCalendar:(AndroidIcuUtilCalendar *)cal
                                                                  withNSString:(NSString *)skeleton
                                                     withAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale;

/*!
 @brief <strong>[icu]</strong> Returns a <code>DateFormat</code> object that can be used to format dates and times in
  the default locale.
 @param skeleton The skeleton that selects the fields to be formatted. (Uses the               
 <code>DateTimePatternGenerator</code> .) This can be <code>DateFormat.ABBR_MONTH</code> ,               
 <code>DateFormat.MONTH_WEEKDAY_DAY</code> , etc.
 */
+ (AndroidIcuTextDateFormat *)getInstanceForSkeletonWithNSString:(NSString *)skeleton;

/*!
 @brief <strong>[icu]</strong> Returns a <code>DateFormat</code> object that can be used to format dates and times in
  the given locale.
 @param skeleton The skeleton that selects the fields to be formatted. (Uses the               
 <code>DateTimePatternGenerator</code> .) This can be <code>DateFormat.ABBR_MONTH</code> ,               
 <code>DateFormat.MONTH_WEEKDAY_DAY</code> , etc.
 @param locale The locale for which the date/time format is desired.
 */
+ (AndroidIcuTextDateFormat *)getInstanceForSkeletonWithNSString:(NSString *)skeleton
                                              withJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief <strong>[icu]</strong> Returns a <code>DateFormat</code> object that can be used to format dates and times in
  the given locale.
 @param skeleton The skeleton that selects the fields to be formatted. (Uses the               
 <code>DateTimePatternGenerator</code> .) This can be <code>DateFormat.ABBR_MONTH</code> ,               
 <code>DateFormat.MONTH_WEEKDAY_DAY</code> , etc.
 @param locale The locale for which the date/time format is desired.
 */
+ (AndroidIcuTextDateFormat *)getInstanceForSkeletonWithNSString:(NSString *)skeleton
                                       withAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale;

/*!
 @brief Returns the number formatter which this date/time formatter uses to
  format and parse a time.
 @return the number formatter which this date/time formatter uses.
 */
- (AndroidIcuTextNumberFormat *)getNumberFormat;

/*!
 @brief <strong>[icu]</strong> Creates a <code>DateFormat</code> object that can be used to format dates and
  times in the calendar system specified by <code>cal</code>.
 The getInstanceForSkeleton methods are preferred over the getPatternInstance methods.
 @param cal The calendar system for which a date/time format is desired.
 @param skeleton The skeleton that selects the fields to be formatted. (Uses the               
 <code>DateTimePatternGenerator</code> .)  This can be               
 <code>DateFormat.ABBR_MONTH</code> , <code>DateFormat.MONTH_WEEKDAY_DAY</code> ,               etc.
 @param locale The locale for which the date/time format is desired.
 */
+ (AndroidIcuTextDateFormat *)getPatternInstanceWithAndroidIcuUtilCalendar:(AndroidIcuUtilCalendar *)cal
                                                              withNSString:(NSString *)skeleton
                                                        withJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief <strong>[icu]</strong> Creates a <code>DateFormat</code> object that can be used to format dates and
  times in the calendar system specified by <code>cal</code>.
 The getInstanceForSkeleton methods are preferred over the getPatternInstance methods.
 @param cal The calendar system for which a date/time format is desired.
 @param skeleton The skeleton that selects the fields to be formatted. (Uses the               
 <code>DateTimePatternGenerator</code> .)  This can be               
 <code>DateFormat.ABBR_MONTH</code> , <code>DateFormat.MONTH_WEEKDAY_DAY</code> ,               etc.
 @param locale The locale for which the date/time format is desired.
 */
+ (AndroidIcuTextDateFormat *)getPatternInstanceWithAndroidIcuUtilCalendar:(AndroidIcuUtilCalendar *)cal
                                                              withNSString:(NSString *)skeleton
                                                 withAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale;

/*!
 @brief <strong>[icu]</strong> Returns a <code>DateFormat</code> object that can be used to format dates and times in
  the default locale.
 The getInstanceForSkeleton methods are preferred over the getPatternInstance methods.
 @param skeleton The skeleton that selects the fields to be formatted. (Uses the               
 <code>DateTimePatternGenerator</code> .) This can be <code>DateFormat.ABBR_MONTH</code> ,               
 <code>DateFormat.MONTH_WEEKDAY_DAY</code> , etc.
 */
+ (AndroidIcuTextDateFormat *)getPatternInstanceWithNSString:(NSString *)skeleton;

/*!
 @brief <strong>[icu]</strong> Returns a <code>DateFormat</code> object that can be used to format dates and times in
  the given locale.
 The getInstanceForSkeleton methods are preferred over the getPatternInstance methods.
 @param skeleton The skeleton that selects the fields to be formatted. (Uses the               
 <code>DateTimePatternGenerator</code> .) This can be <code>DateFormat.ABBR_MONTH</code> ,               
 <code>DateFormat.MONTH_WEEKDAY_DAY</code> , etc.
 @param locale The locale for which the date/time format is desired.
 */
+ (AndroidIcuTextDateFormat *)getPatternInstanceWithNSString:(NSString *)skeleton
                                          withJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief <strong>[icu]</strong> Returns a <code>DateFormat</code> object that can be used to format dates and times in
  the given locale.
 The getInstanceForSkeleton methods are preferred over the getPatternInstance methods.
 @param skeleton The skeleton that selects the fields to be formatted. (Uses the               
 <code>DateTimePatternGenerator</code> .) This can be <code>DateFormat.ABBR_MONTH</code> ,               
 <code>DateFormat.MONTH_WEEKDAY_DAY</code> , etc.
 @param locale The locale for which the date/time format is desired.
 */
+ (AndroidIcuTextDateFormat *)getPatternInstanceWithNSString:(NSString *)skeleton
                                   withAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale;

/*!
 @brief Gets the time formatter with the default formatting style
  for the default <code>FORMAT</code> locale.
 @return a time formatter.
 - seealso: Category#FORMAT
 */
+ (AndroidIcuTextDateFormat *)getTimeInstance;

/*!
 @brief Creates a <code>DateFormat</code> object that can be used to format times in
  the calendar system specified by <code>cal</code>.
 @param cal The calendar system for which a time format is desired.
 @param timeStyle The type of time format desired.  This can be               
 <code>DateFormat.SHORT</code> , <code>DateFormat.MEDIUM</code> ,               etc.
 - seealso: DateFormat#getTimeInstance
 */
+ (AndroidIcuTextDateFormat *)getTimeInstanceWithAndroidIcuUtilCalendar:(AndroidIcuUtilCalendar *)cal
                                                                withInt:(jint)timeStyle;

/*!
 @brief Creates a <code>DateFormat</code> object that can be used to format times in
  the calendar system specified by <code>cal</code>.
 @param cal The calendar system for which a time format is desired.
 @param timeStyle The type of time format desired.  This can be               
 <code>DateFormat.SHORT</code> , <code>DateFormat.MEDIUM</code> ,               etc.
 @param locale The locale for which the time format is desired.
 - seealso: DateFormat#getTimeInstance
 */
+ (AndroidIcuTextDateFormat *)getTimeInstanceWithAndroidIcuUtilCalendar:(AndroidIcuUtilCalendar *)cal
                                                                withInt:(jint)timeStyle
                                                     withJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Creates a <code>DateFormat</code> object that can be used to format times in
  the calendar system specified by <code>cal</code>.
 @param cal The calendar system for which a time format is desired.
 @param timeStyle The type of time format desired.  This can be               
 <code>DateFormat.SHORT</code> , <code>DateFormat.MEDIUM</code> ,               etc.
 @param locale The locale for which the time format is desired.
 - seealso: DateFormat#getTimeInstance
 */
+ (AndroidIcuTextDateFormat *)getTimeInstanceWithAndroidIcuUtilCalendar:(AndroidIcuUtilCalendar *)cal
                                                                withInt:(jint)timeStyle
                                              withAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale;

/*!
 @brief Returns the time formatter with the given formatting style
  for the default <code>FORMAT</code> locale.
 @param style the given formatting style. For example,  SHORT for "h:mm a" in the US locale. Relative time styles are not currently
   supported, and behave just like the corresponding non-relative style.
 @return a time formatter.
 - seealso: Category#FORMAT
 */
+ (AndroidIcuTextDateFormat *)getTimeInstanceWithInt:(jint)style;

/*!
 @brief Returns the time formatter with the given formatting style
  for the given locale.
 @param style the given formatting style. For example,  SHORT for "h:mm a" in the US locale. Relative time styles are not currently
   supported, and behave just like the corresponding non-relative style.
 @param aLocale the given locale.
 @return a time formatter.
 */
+ (AndroidIcuTextDateFormat *)getTimeInstanceWithInt:(jint)style
                                  withJavaUtilLocale:(JavaUtilLocale *)aLocale;

/*!
 @brief Returns the time formatter with the given formatting style
  for the given locale.
 @param style the given formatting style. For example,  SHORT for "h:mm a" in the US locale. Relative time styles are not currently
   supported, and behave just like the corresponding non-relative style.
 @param locale the given ulocale.
 @return a time formatter.
 */
+ (AndroidIcuTextDateFormat *)getTimeInstanceWithInt:(jint)style
                           withAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale;

/*!
 @brief Returns the time zone.
 @return the time zone associated with the calendar of DateFormat.
 */
- (AndroidIcuUtilTimeZone *)getTimeZone;

/*!
 @brief Overrides hashCode.
 */
- (NSUInteger)hash;

/*!
 @brief Returns whether date/time parsing in the encapsulated Calendar object is lenient.
 */
- (jboolean)isCalendarLenient;

/*!
 @brief Returns whether both date/time parsing in the encapsulated Calendar object and DateFormat whitespace &amp;
  numeric processing is lenient.
 */
- (jboolean)isLenient;

/*!
 @brief Parses a date/time string.For example, a time text "07/10/96 4:5 PM, PDT"
  will be parsed into a Date that is equivalent to Date(837039928046).
 Parsing begins at the beginning of the string and proceeds as far as
  possible.  Assuming no parse errors were encountered, this function
  doesn't return any information about how much of the string was consumed
  by the parsing.  If you need that information, use a version of
  parse() that takes a ParsePosition. 
 <p> By default, parsing is lenient: If the input is not in the form used
  by this object's format method but can still be parsed as a date, then
  the parse succeeds.  Clients may insist on strict adherence to the
  format by calling setLenient(false). 
 <p> Note that the normal date formats associated with some calendars - such
  as the Chinese lunar calendar - do not specify enough fields to enable
  dates to be parsed unambiguously. In the case of the Chinese lunar
  calendar, while the year within the current 60-year cycle is specified,
  the number of such cycles since the start date of the calendar (in the
  ERA field of the Calendar object) is not normally part of the format,
  and parsing may assume the wrong era. For cases such as this it is
  recommended that clients parse using the parse method that takes a Calendar
  with the Calendar passed in set to the current date, or to a date
  within the era/cycle that should be assumed if absent in the format.
 @param text The date/time string to be parsed
 @return A Date, or null if the input could not be parsed
 @throw ParseExceptionIf the given string cannot be parsed as a date.
 - seealso: #parse(String, ParsePosition)
 */
- (JavaUtilDate *)parseWithNSString:(NSString *)text;

/*!
 @brief Parses a date/time string according to the given parse position.
 For example, a time text "07/10/96 4:5 PM, PDT" will be parsed
  into a Calendar that is equivalent to Date(837039928046). Before
  calling this method the caller should initialize the calendar
  in one of two ways (unless existing field information is to be kept):
  (1) clear the calendar, or (2) set the calendar to the current date
  (or to any date whose fields should be used to supply values that
  are missing in the parsed date). For example, Chinese calendar dates
  do not normally provide an era/cycle; in this case the calendar that
  is passed in should be set to a date within the era that should be
  assumed, normally the current era. 
 <p> By default, parsing is lenient: If the input is not in the form used
  by this object's format method but can still be parsed as a date, then
  the parse succeeds.  Clients may insist on strict adherence to the
  format by calling setLenient(false).
 - seealso: #setLenient(boolean)
 @param text The date/time string to be parsed
 @param cal The calendar set on input to the date and time to be used               for missing values in the date/time string being parsed,
                and set on output to the parsed date/time. In general, this
                should be initialized before calling this method - either
                cleared or set to the current date, depending on desired
                behavior. If this parse fails, the calendar may still
                have been modified. When the calendar type is different
                from the internal calendar held by this DateFormat
                instance, calendar field values will be parsed based
                on the internal calendar initialized with the time and
                the time zone taken from this calendar, then the
                parse result (time in milliseconds and time zone) will
                be set back to this calendar.
 @param pos On input, the position at which to start parsing; on               output, the position at which parsing terminated, or the
                start position if the parse failed.
 */
- (void)parseWithNSString:(NSString *)text
withAndroidIcuUtilCalendar:(AndroidIcuUtilCalendar *)cal
withJavaTextParsePosition:(JavaTextParsePosition *)pos;

/*!
 @brief Parses a date/time string according to the given parse position.For
  example, a time text "07/10/96 4:5 PM, PDT" will be parsed into a Date
  that is equivalent to Date(837039928046).
 <p> By default, parsing is lenient: If the input is not in the form used
  by this object's format method but can still be parsed as a date, then
  the parse succeeds.  Clients may insist on strict adherence to the
  format by calling setLenient(false). 
 <p> Note that the normal date formats associated with some calendars - such
  as the Chinese lunar calendar - do not specify enough fields to enable
  dates to be parsed unambiguously. In the case of the Chinese lunar
  calendar, while the year within the current 60-year cycle is specified,
  the number of such cycles since the start date of the calendar (in the
  ERA field of the Calendar object) is not normally part of the format,
  and parsing may assume the wrong era. For cases such as this it is
  recommended that clients parse using the parse method that takes a Calendar
  with the Calendar passed in set to the current date, or to a date
  within the era/cycle that should be assumed if absent in the format.
 - seealso: #setLenient(boolean)
 @param text The date/time string to be parsed
 @param pos On input, the position at which to start parsing; on               output, the position at which parsing terminated, or the
                start position if the parse failed.
 @return A Date, or null if the input could not be parsed
 */
- (JavaUtilDate *)parseWithNSString:(NSString *)text
          withJavaTextParsePosition:(JavaTextParsePosition *)pos;

/*!
 @brief Parses a date/time string into an Object.This convenience method simply
  calls parse(String, ParsePosition).
 - seealso: #parse(String, ParsePosition)
 */
- (id)parseObjectWithNSString:(NSString *)source
    withJavaTextParsePosition:(JavaTextParsePosition *)pos;

/*!
 @brief Sets a boolean attribute for this instance.Aspects of DateFormat leniency are controlled by
  boolean attributes.
 - seealso: BooleanAttribute
 */
- (AndroidIcuTextDateFormat *)setBooleanAttributeWithAndroidIcuTextDateFormat_BooleanAttribute:(AndroidIcuTextDateFormat_BooleanAttribute *)key
                                                                                   withBoolean:(jboolean)value;

/*!
 @brief Sets the calendar to be used by this date format.Initially, the default
  calendar for the specified or default locale is used.
 @param newCalendar the new Calendar to be used by the date format
 */
- (void)setCalendarWithAndroidIcuUtilCalendar:(AndroidIcuUtilCalendar *)newCalendar;

/*!
 @brief Specifies whether date/time parsing in the encapsulated Calendar object should be lenient.
 With lenient parsing, the parser may use heuristics to interpret inputs that
  do not precisely match this object's format.  Without lenient parsing,
  inputs must match this object's format more closely.
 @param lenient when true, Calendar parsing is lenient
 - seealso: android.icu.util.Calendar#setLenient
 */
- (void)setCalendarLenientWithBoolean:(jboolean)lenient;

/*!
 @brief <strong>[icu]</strong> Set a particular DisplayContext value in the formatter,
  such as CAPITALIZATION_FOR_STANDALONE.
 @param context The DisplayContext value to set.
 */
- (void)setContextWithAndroidIcuTextDisplayContext:(AndroidIcuTextDisplayContext *)context;

/*!
 @brief Specifies whether date/time parsing is to be lenient.With
  lenient parsing, the parser may use heuristics to interpret inputs that
  do not precisely match this object's format.
 Without lenient parsing,
  inputs must match this object's format more closely. 
 <br><br>
  <b>Note:</b> ICU 53 introduced finer grained control of leniency (and added
  new control points) making the preferred method a combination of
  setCalendarLenient() &amp; setBooleanAttribute() calls.
  This method supports prior functionality but may not support all
  future leniency control &amp; behavior of DateFormat. For control of pre 53 leniency,
  Calendar and DateFormat whitespace &amp; numeric tolerance, this method is safe to
  use. However, mixing leniency control via this method and modification of the
  newer attributes via setBooleanAttribute() may produce undesirable
  results.
 @param lenient True specifies date/time interpretation to be lenient.
 - seealso: android.icu.util.Calendar#setLenient
 - seealso: #setBooleanAttribute(BooleanAttribute, boolean)
 - seealso: #setCalendarLenient(boolean)
 */
- (void)setLenientWithBoolean:(jboolean)lenient;

/*!
 @brief Sets the number formatter.
 @param newNumberFormat the given new NumberFormat.
 */
- (void)setNumberFormatWithAndroidIcuTextNumberFormat:(AndroidIcuTextNumberFormat *)newNumberFormat;

/*!
 @brief Sets the time zone for the calendar of this DateFormat object.
 @param zone the given new time zone.
 */
- (void)setTimeZoneWithAndroidIcuUtilTimeZone:(AndroidIcuUtilTimeZone *)zone;

#pragma mark Protected

/*!
 @brief Creates a new date format.
 */
- (instancetype __nonnull)init;

@end

J2OBJC_STATIC_INIT(AndroidIcuTextDateFormat)

J2OBJC_FIELD_SETTER(AndroidIcuTextDateFormat, calendar_, AndroidIcuUtilCalendar *)
J2OBJC_FIELD_SETTER(AndroidIcuTextDateFormat, numberFormat_, AndroidIcuTextNumberFormat *)

/*!
 @brief FieldPosition selector for 'G' field alignment,
  corresponding to the <code>Calendar.ERA</code> field.
 */
inline jint AndroidIcuTextDateFormat_get_ERA_FIELD(void);
#define AndroidIcuTextDateFormat_ERA_FIELD 0
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, ERA_FIELD, jint)

/*!
 @brief FieldPosition selector for 'y' field alignment,
  corresponding to the <code>Calendar.YEAR</code> field.
 */
inline jint AndroidIcuTextDateFormat_get_YEAR_FIELD(void);
#define AndroidIcuTextDateFormat_YEAR_FIELD 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, YEAR_FIELD, jint)

/*!
 @brief FieldPosition selector for 'M' field alignment,
  corresponding to the <code>Calendar.MONTH</code> field.
 */
inline jint AndroidIcuTextDateFormat_get_MONTH_FIELD(void);
#define AndroidIcuTextDateFormat_MONTH_FIELD 2
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, MONTH_FIELD, jint)

/*!
 @brief FieldPosition selector for 'd' field alignment,
  corresponding to the <code>Calendar.DATE</code> field.
 */
inline jint AndroidIcuTextDateFormat_get_DATE_FIELD(void);
#define AndroidIcuTextDateFormat_DATE_FIELD 3
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, DATE_FIELD, jint)

/*!
 @brief FieldPosition selector for 'k' field alignment,
  corresponding to the <code>Calendar.HOUR_OF_DAY</code> field.
 HOUR_OF_DAY1_FIELD is used for the one-based 24-hour clock.
  For example, 23:59 + 01:00 results in 24:59.
 */
inline jint AndroidIcuTextDateFormat_get_HOUR_OF_DAY1_FIELD(void);
#define AndroidIcuTextDateFormat_HOUR_OF_DAY1_FIELD 4
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, HOUR_OF_DAY1_FIELD, jint)

/*!
 @brief FieldPosition selector for 'H' field alignment,
  corresponding to the <code>Calendar.HOUR_OF_DAY</code> field.
 HOUR_OF_DAY0_FIELD is used for the zero-based 24-hour clock.
  For example, 23:59 + 01:00 results in 00:59.
 */
inline jint AndroidIcuTextDateFormat_get_HOUR_OF_DAY0_FIELD(void);
#define AndroidIcuTextDateFormat_HOUR_OF_DAY0_FIELD 5
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, HOUR_OF_DAY0_FIELD, jint)

/*!
 @brief FieldPosition selector for 'm' field alignment,
  corresponding to the <code>Calendar.MINUTE</code> field.
 */
inline jint AndroidIcuTextDateFormat_get_MINUTE_FIELD(void);
#define AndroidIcuTextDateFormat_MINUTE_FIELD 6
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, MINUTE_FIELD, jint)

/*!
 @brief FieldPosition selector for 's' field alignment,
  corresponding to the <code>Calendar.SECOND</code> field.
 */
inline jint AndroidIcuTextDateFormat_get_SECOND_FIELD(void);
#define AndroidIcuTextDateFormat_SECOND_FIELD 7
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, SECOND_FIELD, jint)

/*!
 @brief <strong>[icu]</strong> FieldPosition selector for 'S' field alignment,
  corresponding to the <code>Calendar.MILLISECOND</code> field.
 Note: Time formats that use 'S' can display a maximum of three
  significant digits for fractional seconds, corresponding to millisecond
  resolution and a fractional seconds sub-pattern of SSS. If the
  sub-pattern is S or SS, the fractional seconds value will be truncated
  (not rounded) to the number of display places specified. If the
  fractional seconds sub-pattern is longer than SSS, the additional
  display places will be filled with zeros.
 */
inline jint AndroidIcuTextDateFormat_get_FRACTIONAL_SECOND_FIELD(void);
#define AndroidIcuTextDateFormat_FRACTIONAL_SECOND_FIELD 8
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, FRACTIONAL_SECOND_FIELD, jint)

/*!
 @brief Alias for FRACTIONAL_SECOND_FIELD.
 */
inline jint AndroidIcuTextDateFormat_get_MILLISECOND_FIELD(void);
#define AndroidIcuTextDateFormat_MILLISECOND_FIELD 8
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, MILLISECOND_FIELD, jint)

/*!
 @brief FieldPosition selector for 'E' field alignment,
  corresponding to the <code>Calendar.DAY_OF_WEEK</code> field.
 */
inline jint AndroidIcuTextDateFormat_get_DAY_OF_WEEK_FIELD(void);
#define AndroidIcuTextDateFormat_DAY_OF_WEEK_FIELD 9
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, DAY_OF_WEEK_FIELD, jint)

/*!
 @brief FieldPosition selector for 'D' field alignment,
  corresponding to the <code>Calendar.DAY_OF_YEAR</code> field.
 */
inline jint AndroidIcuTextDateFormat_get_DAY_OF_YEAR_FIELD(void);
#define AndroidIcuTextDateFormat_DAY_OF_YEAR_FIELD 10
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, DAY_OF_YEAR_FIELD, jint)

/*!
 @brief FieldPosition selector for 'F' field alignment,
  corresponding to the <code>Calendar.DAY_OF_WEEK_IN_MONTH</code> field.
 */
inline jint AndroidIcuTextDateFormat_get_DAY_OF_WEEK_IN_MONTH_FIELD(void);
#define AndroidIcuTextDateFormat_DAY_OF_WEEK_IN_MONTH_FIELD 11
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, DAY_OF_WEEK_IN_MONTH_FIELD, jint)

/*!
 @brief FieldPosition selector for 'w' field alignment,
  corresponding to the <code>Calendar.WEEK_OF_YEAR</code> field.
 */
inline jint AndroidIcuTextDateFormat_get_WEEK_OF_YEAR_FIELD(void);
#define AndroidIcuTextDateFormat_WEEK_OF_YEAR_FIELD 12
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, WEEK_OF_YEAR_FIELD, jint)

/*!
 @brief FieldPosition selector for 'W' field alignment,
  corresponding to the <code>Calendar.WEEK_OF_MONTH</code> field.
 */
inline jint AndroidIcuTextDateFormat_get_WEEK_OF_MONTH_FIELD(void);
#define AndroidIcuTextDateFormat_WEEK_OF_MONTH_FIELD 13
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, WEEK_OF_MONTH_FIELD, jint)

/*!
 @brief FieldPosition selector for 'a' field alignment,
  corresponding to the <code>Calendar.AM_PM</code> field.
 */
inline jint AndroidIcuTextDateFormat_get_AM_PM_FIELD(void);
#define AndroidIcuTextDateFormat_AM_PM_FIELD 14
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, AM_PM_FIELD, jint)

/*!
 @brief FieldPosition selector for 'h' field alignment,
  corresponding to the <code>Calendar.HOUR</code> field.
 HOUR1_FIELD is used for the one-based 12-hour clock.
  For example, 11:30 PM + 1 hour results in 12:30 AM.
 */
inline jint AndroidIcuTextDateFormat_get_HOUR1_FIELD(void);
#define AndroidIcuTextDateFormat_HOUR1_FIELD 15
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, HOUR1_FIELD, jint)

/*!
 @brief FieldPosition selector for 'K' field alignment,
  corresponding to the <code>Calendar.HOUR</code> field.
 HOUR0_FIELD is used for the zero-based 12-hour clock.
  For example, 11:30 PM + 1 hour results in 00:30 AM.
 */
inline jint AndroidIcuTextDateFormat_get_HOUR0_FIELD(void);
#define AndroidIcuTextDateFormat_HOUR0_FIELD 16
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, HOUR0_FIELD, jint)

/*!
 @brief FieldPosition selector for 'z' field alignment,
  corresponding to the <code>Calendar.ZONE_OFFSET</code> and 
 <code>Calendar.DST_OFFSET</code> fields.
 */
inline jint AndroidIcuTextDateFormat_get_TIMEZONE_FIELD(void);
#define AndroidIcuTextDateFormat_TIMEZONE_FIELD 17
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, TIMEZONE_FIELD, jint)

/*!
 @brief <strong>[icu]</strong> FieldPosition selector for 'Y' field alignment,
  corresponding to the <code>Calendar.YEAR_WOY</code> field.
 */
inline jint AndroidIcuTextDateFormat_get_YEAR_WOY_FIELD(void);
#define AndroidIcuTextDateFormat_YEAR_WOY_FIELD 18
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, YEAR_WOY_FIELD, jint)

/*!
 @brief <strong>[icu]</strong> FieldPosition selector for 'e' field alignment,
  corresponding to the <code>Calendar.DOW_LOCAL</code> field.
 */
inline jint AndroidIcuTextDateFormat_get_DOW_LOCAL_FIELD(void);
#define AndroidIcuTextDateFormat_DOW_LOCAL_FIELD 19
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, DOW_LOCAL_FIELD, jint)

/*!
 @brief <strong>[icu]</strong> FieldPosition selector for 'u' field alignment,
  corresponding to the <code>Calendar.EXTENDED_YEAR</code> field.
 */
inline jint AndroidIcuTextDateFormat_get_EXTENDED_YEAR_FIELD(void);
#define AndroidIcuTextDateFormat_EXTENDED_YEAR_FIELD 20
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, EXTENDED_YEAR_FIELD, jint)

/*!
 @brief <strong>[icu]</strong> FieldPosition selector for 'g' field alignment,
  corresponding to the <code>Calendar.JULIAN_DAY</code> field.
 */
inline jint AndroidIcuTextDateFormat_get_JULIAN_DAY_FIELD(void);
#define AndroidIcuTextDateFormat_JULIAN_DAY_FIELD 21
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, JULIAN_DAY_FIELD, jint)

/*!
 @brief <strong>[icu]</strong> FieldPosition selector for 'A' field alignment,
  corresponding to the <code>Calendar.MILLISECONDS_IN_DAY</code> field.
 */
inline jint AndroidIcuTextDateFormat_get_MILLISECONDS_IN_DAY_FIELD(void);
#define AndroidIcuTextDateFormat_MILLISECONDS_IN_DAY_FIELD 22
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, MILLISECONDS_IN_DAY_FIELD, jint)

/*!
 @brief <strong>[icu]</strong> FieldPosition selector for 'Z' field alignment,
  corresponding to the <code>Calendar.ZONE_OFFSET</code> and 
 <code>Calendar.DST_OFFSET</code> fields.
 */
inline jint AndroidIcuTextDateFormat_get_TIMEZONE_RFC_FIELD(void);
#define AndroidIcuTextDateFormat_TIMEZONE_RFC_FIELD 23
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, TIMEZONE_RFC_FIELD, jint)

/*!
 @brief <strong>[icu]</strong> FieldPosition selector for 'v' field alignment,
  corresponding to the <code>Calendar.ZONE_OFFSET</code> and 
 <code>Calendar.DST_OFFSET</code> fields.This displays the generic zone
  name, if available.
 */
inline jint AndroidIcuTextDateFormat_get_TIMEZONE_GENERIC_FIELD(void);
#define AndroidIcuTextDateFormat_TIMEZONE_GENERIC_FIELD 24
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, TIMEZONE_GENERIC_FIELD, jint)

/*!
 @brief <strong>[icu]</strong> FieldPosition selector for 'c' field alignment,
  corresponding to the <code>Calendar.DAY_OF_WEEK</code> field.
 This displays the stand alone day name, if available.
 */
inline jint AndroidIcuTextDateFormat_get_STANDALONE_DAY_FIELD(void);
#define AndroidIcuTextDateFormat_STANDALONE_DAY_FIELD 25
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, STANDALONE_DAY_FIELD, jint)

/*!
 @brief <strong>[icu]</strong> FieldPosition selector for 'L' field alignment,
  corresponding to the <code>Calendar.MONTH</code> field.
 This displays the stand alone month name, if available.
 */
inline jint AndroidIcuTextDateFormat_get_STANDALONE_MONTH_FIELD(void);
#define AndroidIcuTextDateFormat_STANDALONE_MONTH_FIELD 26
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, STANDALONE_MONTH_FIELD, jint)

/*!
 @brief <strong>[icu]</strong> FieldPosition selector for 'Q' field alignment,
  corresponding to the <code>Calendar.MONTH</code> field.
 This displays the quarter.
 */
inline jint AndroidIcuTextDateFormat_get_QUARTER_FIELD(void);
#define AndroidIcuTextDateFormat_QUARTER_FIELD 27
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, QUARTER_FIELD, jint)

/*!
 @brief <strong>[icu]</strong> FieldPosition selector for 'q' field alignment,
  corresponding to the <code>Calendar.MONTH</code> field.
 This displays the stand alone quarter, if available.
 */
inline jint AndroidIcuTextDateFormat_get_STANDALONE_QUARTER_FIELD(void);
#define AndroidIcuTextDateFormat_STANDALONE_QUARTER_FIELD 28
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, STANDALONE_QUARTER_FIELD, jint)

/*!
 @brief <strong>[icu]</strong> FieldPosition selector for 'V' field alignment,
  corresponding to the <code>Calendar.ZONE_OFFSET</code> and 
 <code>Calendar.DST_OFFSET</code> fields.This displays the fallback timezone
  name when VVVV is specified, and the short standard or daylight
  timezone name ignoring commonlyUsed when a single V is specified.
 */
inline jint AndroidIcuTextDateFormat_get_TIMEZONE_SPECIAL_FIELD(void);
#define AndroidIcuTextDateFormat_TIMEZONE_SPECIAL_FIELD 29
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, TIMEZONE_SPECIAL_FIELD, jint)

/*!
 @brief <strong>[icu]</strong> FieldPosition selector for 'U' field alignment,
  corresponding to the <code>Calendar.YEAR</code> field.
 This displays the cyclic year name, if available.
 */
inline jint AndroidIcuTextDateFormat_get_YEAR_NAME_FIELD(void);
#define AndroidIcuTextDateFormat_YEAR_NAME_FIELD 30
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, YEAR_NAME_FIELD, jint)

/*!
 @brief <strong>[icu]</strong> FieldPosition selector for 'O' field alignment,
  corresponding to the <code>Calendar.ZONE_OFFSET</code> and 
 <code>Calendar.DST_OFFSET</code> fields.This displays the
  localized GMT format.
 */
inline jint AndroidIcuTextDateFormat_get_TIMEZONE_LOCALIZED_GMT_OFFSET_FIELD(void);
#define AndroidIcuTextDateFormat_TIMEZONE_LOCALIZED_GMT_OFFSET_FIELD 31
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, TIMEZONE_LOCALIZED_GMT_OFFSET_FIELD, jint)

/*!
 @brief <strong>[icu]</strong> FieldPosition selector for 'X' field alignment,
  corresponding to the <code>Calendar.ZONE_OFFSET</code> and 
 <code>Calendar.DST_OFFSET</code> fields.This displays the
  ISO 8601 local time offset format or UTC indicator ("Z").
 */
inline jint AndroidIcuTextDateFormat_get_TIMEZONE_ISO_FIELD(void);
#define AndroidIcuTextDateFormat_TIMEZONE_ISO_FIELD 32
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, TIMEZONE_ISO_FIELD, jint)

/*!
 @brief <strong>[icu]</strong> FieldPosition selector for 'x' field alignment,
  corresponding to the <code>Calendar.ZONE_OFFSET</code> and 
 <code>Calendar.DST_OFFSET</code> fields.This displays the
  ISO 8601 local time offset format.
 */
inline jint AndroidIcuTextDateFormat_get_TIMEZONE_ISO_LOCAL_FIELD(void);
#define AndroidIcuTextDateFormat_TIMEZONE_ISO_LOCAL_FIELD 33
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, TIMEZONE_ISO_LOCAL_FIELD, jint)

/*!
 @brief <strong>[icu]</strong> FieldPosition selector for 'r' field alignment,
  corresponding to the <code>Calendar.EXTENDED_YEAR</code> field
  of the *related* calendar which may be different than the
  one used by the DateFormat.
 */
inline jint AndroidIcuTextDateFormat_get_RELATED_YEAR(void);
#define AndroidIcuTextDateFormat_RELATED_YEAR 34
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, RELATED_YEAR, jint)

/*!
 @brief <strong>[icu]</strong> FieldPosition selector for 'b' field alignment.
 No related Calendar field.
  This displays the fixed day period (am/pm/midnight/noon).
 */
inline jint AndroidIcuTextDateFormat_get_AM_PM_MIDNIGHT_NOON_FIELD(void);
#define AndroidIcuTextDateFormat_AM_PM_MIDNIGHT_NOON_FIELD 35
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, AM_PM_MIDNIGHT_NOON_FIELD, jint)

/*!
 @brief <strong>[icu]</strong> FieldPosition selector for 'B' field alignment.
 No related Calendar field.
  This displays the flexible day period.
 */
inline jint AndroidIcuTextDateFormat_get_FLEXIBLE_DAY_PERIOD_FIELD(void);
#define AndroidIcuTextDateFormat_FLEXIBLE_DAY_PERIOD_FIELD 36
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, FLEXIBLE_DAY_PERIOD_FIELD, jint)

/*!
 @brief <strong>[icu]</strong> FieldPosition selector time separator,
  no related Calendar field.No pattern character is currently
  defined for this.
 */
inline jint AndroidIcuTextDateFormat_get_TIME_SEPARATOR(void);
#define AndroidIcuTextDateFormat_TIME_SEPARATOR 37
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, TIME_SEPARATOR, jint)

/*!
 @brief <strong>[icu]</strong> Number of FieldPosition selectors for DateFormat.
 Valid selectors range from 0 to FIELD_COUNT-1.
 */
inline jint AndroidIcuTextDateFormat_get_FIELD_COUNT(void);
#define AndroidIcuTextDateFormat_FIELD_COUNT 38
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, FIELD_COUNT, jint)

inline jint AndroidIcuTextDateFormat_get_currentSerialVersion(void);
#define AndroidIcuTextDateFormat_currentSerialVersion 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, currentSerialVersion, jint)

/*!
 @brief <strong>[icu]</strong> Constant for empty style pattern.
 */
inline jint AndroidIcuTextDateFormat_get_NONE(void);
#define AndroidIcuTextDateFormat_NONE -1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, NONE, jint)

/*!
 @brief Constant for full style pattern.
 */
inline jint AndroidIcuTextDateFormat_get_FULL(void);
#define AndroidIcuTextDateFormat_FULL 0
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, FULL, jint)

/*!
 @brief Constant for long style pattern.
 */
inline jint AndroidIcuTextDateFormat_get_LONG(void);
#define AndroidIcuTextDateFormat_LONG 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, LONG, jint)

/*!
 @brief Constant for medium style pattern.
 */
inline jint AndroidIcuTextDateFormat_get_MEDIUM(void);
#define AndroidIcuTextDateFormat_MEDIUM 2
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, MEDIUM, jint)

/*!
 @brief Constant for short style pattern.
 */
inline jint AndroidIcuTextDateFormat_get_SHORT(void);
#define AndroidIcuTextDateFormat_SHORT 3
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, SHORT, jint)

/*!
 @brief Constant for default style pattern.Its value is MEDIUM.
 */
inline jint AndroidIcuTextDateFormat_get_DEFAULT(void);
#define AndroidIcuTextDateFormat_DEFAULT 2
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, DEFAULT, jint)

/*!
 @brief <strong>[icu]</strong> Constant for relative style mask.
 */
inline jint AndroidIcuTextDateFormat_get_RELATIVE(void);
#define AndroidIcuTextDateFormat_RELATIVE 128
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, RELATIVE, jint)

/*!
 @brief <strong>[icu]</strong> Constant for relative full style pattern.
 */
inline jint AndroidIcuTextDateFormat_get_RELATIVE_FULL(void);
#define AndroidIcuTextDateFormat_RELATIVE_FULL 128
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, RELATIVE_FULL, jint)

/*!
 @brief <strong>[icu]</strong> Constant for relative style pattern.
 */
inline jint AndroidIcuTextDateFormat_get_RELATIVE_LONG(void);
#define AndroidIcuTextDateFormat_RELATIVE_LONG 129
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, RELATIVE_LONG, jint)

/*!
 @brief <strong>[icu]</strong> Constant for relative style pattern.
 */
inline jint AndroidIcuTextDateFormat_get_RELATIVE_MEDIUM(void);
#define AndroidIcuTextDateFormat_RELATIVE_MEDIUM 130
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, RELATIVE_MEDIUM, jint)

/*!
 @brief <strong>[icu]</strong> Constant for relative style pattern.
 */
inline jint AndroidIcuTextDateFormat_get_RELATIVE_SHORT(void);
#define AndroidIcuTextDateFormat_RELATIVE_SHORT 131
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, RELATIVE_SHORT, jint)

/*!
 @brief <strong>[icu]</strong> Constant for relative default style pattern.
 */
inline jint AndroidIcuTextDateFormat_get_RELATIVE_DEFAULT(void);
#define AndroidIcuTextDateFormat_RELATIVE_DEFAULT 130
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormat, RELATIVE_DEFAULT, jint)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with year.
 */
inline NSString *AndroidIcuTextDateFormat_get_YEAR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_YEAR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, YEAR, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with quarter.
 */
inline NSString *AndroidIcuTextDateFormat_get_QUARTER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_QUARTER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, QUARTER, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with abbreviated quarter.
 */
inline NSString *AndroidIcuTextDateFormat_get_ABBR_QUARTER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_ABBR_QUARTER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, ABBR_QUARTER, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with year and quarter.
 */
inline NSString *AndroidIcuTextDateFormat_get_YEAR_QUARTER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_YEAR_QUARTER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, YEAR_QUARTER, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with year and abbreviated quarter.
 */
inline NSString *AndroidIcuTextDateFormat_get_YEAR_ABBR_QUARTER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_YEAR_ABBR_QUARTER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, YEAR_ABBR_QUARTER, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with month.
 */
inline NSString *AndroidIcuTextDateFormat_get_MONTH(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_MONTH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, MONTH, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with abbreviated month.
 */
inline NSString *AndroidIcuTextDateFormat_get_ABBR_MONTH(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_ABBR_MONTH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, ABBR_MONTH, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with numeric month.
 */
inline NSString *AndroidIcuTextDateFormat_get_NUM_MONTH(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_NUM_MONTH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, NUM_MONTH, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with year and month.
 */
inline NSString *AndroidIcuTextDateFormat_get_YEAR_MONTH(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_YEAR_MONTH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, YEAR_MONTH, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with year and abbreviated month.
 */
inline NSString *AndroidIcuTextDateFormat_get_YEAR_ABBR_MONTH(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_YEAR_ABBR_MONTH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, YEAR_ABBR_MONTH, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with year and numeric month.
 */
inline NSString *AndroidIcuTextDateFormat_get_YEAR_NUM_MONTH(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_YEAR_NUM_MONTH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, YEAR_NUM_MONTH, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with day.
 */
inline NSString *AndroidIcuTextDateFormat_get_DAY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_DAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, DAY, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with year, month, and day.
 Used in combinations date + time, date + time + zone, or time + zone.
 */
inline NSString *AndroidIcuTextDateFormat_get_YEAR_MONTH_DAY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_YEAR_MONTH_DAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, YEAR_MONTH_DAY, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with year, abbreviated month, and day.
 Used in combinations date + time, date + time + zone, or time + zone.
 */
inline NSString *AndroidIcuTextDateFormat_get_YEAR_ABBR_MONTH_DAY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_YEAR_ABBR_MONTH_DAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, YEAR_ABBR_MONTH_DAY, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with year, numeric month, and day.
 Used in combinations date + time, date + time + zone, or time + zone.
 */
inline NSString *AndroidIcuTextDateFormat_get_YEAR_NUM_MONTH_DAY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_YEAR_NUM_MONTH_DAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, YEAR_NUM_MONTH_DAY, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with weekday.
 */
inline NSString *AndroidIcuTextDateFormat_get_WEEKDAY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_WEEKDAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, WEEKDAY, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with abbreviated weekday.
 */
inline NSString *AndroidIcuTextDateFormat_get_ABBR_WEEKDAY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_ABBR_WEEKDAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, ABBR_WEEKDAY, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with year, month, weekday, and day.
 Used in combinations date + time, date + time + zone, or time + zone.
 */
inline NSString *AndroidIcuTextDateFormat_get_YEAR_MONTH_WEEKDAY_DAY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_YEAR_MONTH_WEEKDAY_DAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, YEAR_MONTH_WEEKDAY_DAY, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with year, abbreviated month, weekday, and day.
 Used in combinations date + time, date + time + zone, or time + zone.
 */
inline NSString *AndroidIcuTextDateFormat_get_YEAR_ABBR_MONTH_WEEKDAY_DAY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_YEAR_ABBR_MONTH_WEEKDAY_DAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, YEAR_ABBR_MONTH_WEEKDAY_DAY, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with year, numeric month, weekday, and day.
 Used in combinations date + time, date + time + zone, or time + zone.
 */
inline NSString *AndroidIcuTextDateFormat_get_YEAR_NUM_MONTH_WEEKDAY_DAY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_YEAR_NUM_MONTH_WEEKDAY_DAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, YEAR_NUM_MONTH_WEEKDAY_DAY, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with long month and day.
 Used in combinations date + time, date + time + zone, or time + zone.
 */
inline NSString *AndroidIcuTextDateFormat_get_MONTH_DAY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_MONTH_DAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, MONTH_DAY, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with abbreviated month and day.
 Used in combinations date + time, date + time + zone, or time + zone.
 */
inline NSString *AndroidIcuTextDateFormat_get_ABBR_MONTH_DAY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_ABBR_MONTH_DAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, ABBR_MONTH_DAY, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with numeric month and day.
 Used in combinations date + time, date + time + zone, or time + zone.
 */
inline NSString *AndroidIcuTextDateFormat_get_NUM_MONTH_DAY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_NUM_MONTH_DAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, NUM_MONTH_DAY, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with month, weekday, and day.
 Used in combinations date + time, date + time + zone, or time + zone.
 */
inline NSString *AndroidIcuTextDateFormat_get_MONTH_WEEKDAY_DAY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_MONTH_WEEKDAY_DAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, MONTH_WEEKDAY_DAY, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with abbreviated month, weekday, and day.
 Used in combinations date + time, date + time + zone, or time + zone.
 */
inline NSString *AndroidIcuTextDateFormat_get_ABBR_MONTH_WEEKDAY_DAY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_ABBR_MONTH_WEEKDAY_DAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, ABBR_MONTH_WEEKDAY_DAY, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with numeric month, weekday, and day.
 Used in combinations date + time, date + time + zone, or time + zone.
 */
inline NSString *AndroidIcuTextDateFormat_get_NUM_MONTH_WEEKDAY_DAY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_NUM_MONTH_WEEKDAY_DAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, NUM_MONTH_WEEKDAY_DAY, NSString *)

/*!
 @brief List of all of the date skeleton constants for iteration.
 Note that this is fragile; be sure to add any values that are added above.
 */
inline id<JavaUtilList> AndroidIcuTextDateFormat_get_DATE_SKELETONS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilList> AndroidIcuTextDateFormat_DATE_SKELETONS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, DATE_SKELETONS, id<JavaUtilList>)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with hour, with the locale's preferred hour format (12 or 24).
 */
inline NSString *AndroidIcuTextDateFormat_get_HOUR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_HOUR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, HOUR, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with hour in 24-hour presentation.
 */
inline NSString *AndroidIcuTextDateFormat_get_HOUR24(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_HOUR24;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, HOUR24, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with minute.
 */
inline NSString *AndroidIcuTextDateFormat_get_MINUTE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_MINUTE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, MINUTE, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with hour and minute, with the locale's preferred hour format (12 or 24).
 Used in combinations date + time, date + time + zone, or time + zone.
 */
inline NSString *AndroidIcuTextDateFormat_get_HOUR_MINUTE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_HOUR_MINUTE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, HOUR_MINUTE, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with hour and minute in 24-hour presentation.
 Used in combinations date + time, date + time + zone, or time + zone.
 */
inline NSString *AndroidIcuTextDateFormat_get_HOUR24_MINUTE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_HOUR24_MINUTE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, HOUR24_MINUTE, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with second.
 */
inline NSString *AndroidIcuTextDateFormat_get_SECOND(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_SECOND;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, SECOND, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with hour, minute, and second,
  with the locale's preferred hour format (12 or 24).
 Used in combinations date + time, date + time + zone, or time + zone.
 */
inline NSString *AndroidIcuTextDateFormat_get_HOUR_MINUTE_SECOND(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_HOUR_MINUTE_SECOND;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, HOUR_MINUTE_SECOND, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with hour, minute, and second in
  24-hour presentation.
 Used in combinations date + time, date + time + zone, or time + zone.
 */
inline NSString *AndroidIcuTextDateFormat_get_HOUR24_MINUTE_SECOND(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_HOUR24_MINUTE_SECOND;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, HOUR24_MINUTE_SECOND, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with minute and second.
 Used in combinations date + time, date + time + zone, or time + zone.
 */
inline NSString *AndroidIcuTextDateFormat_get_MINUTE_SECOND(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_MINUTE_SECOND;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, MINUTE_SECOND, NSString *)

/*!
 @brief List of all of the time skeleton constants for iteration.
 Note that this is fragile; be sure to add any values that are added above.
 */
inline id<JavaUtilList> AndroidIcuTextDateFormat_get_TIME_SKELETONS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilList> AndroidIcuTextDateFormat_TIME_SKELETONS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, TIME_SKELETONS, id<JavaUtilList>)

/*!
 @brief <strong>[icu]</strong> Constant for <i>generic location format</i>, such as Los Angeles Time;
  used in combinations date + time + zone, or time + zone.
 - seealso: <a href="http://unicode.org/reports/tr35/#Date_Format_Patterns">LDML Date Format Patterns</a>
 - seealso: <a href="http://unicode.org/reports/tr35/#Time_Zone_Fallback">LDML Time Zone Fallback</a>
 */
inline NSString *AndroidIcuTextDateFormat_get_LOCATION_TZ(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_LOCATION_TZ;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, LOCATION_TZ, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for <i>generic non-location format</i>, such as Pacific Time;
  used in combinations date + time + zone, or time + zone.
 - seealso: <a href="http://unicode.org/reports/tr35/#Date_Format_Patterns">LDML Date Format Patterns</a>
 - seealso: <a href="http://unicode.org/reports/tr35/#Time_Zone_Fallback">LDML Time Zone Fallback</a>
 */
inline NSString *AndroidIcuTextDateFormat_get_GENERIC_TZ(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_GENERIC_TZ;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, GENERIC_TZ, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for <i>generic non-location format</i>, abbreviated if possible, such as PT;
  used in combinations date + time + zone, or time + zone.
 - seealso: <a href="http://unicode.org/reports/tr35/#Date_Format_Patterns">LDML Date Format Patterns</a>
 - seealso: <a href="http://unicode.org/reports/tr35/#Time_Zone_Fallback">LDML Time Zone Fallback</a>
 */
inline NSString *AndroidIcuTextDateFormat_get_ABBR_GENERIC_TZ(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_ABBR_GENERIC_TZ;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, ABBR_GENERIC_TZ, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for <i>specific non-location format</i>, such as Pacific Daylight Time;
  used in combinations date + time + zone, or time + zone.
 - seealso: <a href="http://unicode.org/reports/tr35/#Date_Format_Patterns">LDML Date Format Patterns</a>
 - seealso: <a href="http://unicode.org/reports/tr35/#Time_Zone_Fallback">LDML Time Zone Fallback</a>
 */
inline NSString *AndroidIcuTextDateFormat_get_SPECIFIC_TZ(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_SPECIFIC_TZ;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, SPECIFIC_TZ, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for <i>specific non-location format</i>, abbreviated if possible, such as PDT;
  used in combinations date + time + zone, or time + zone.
 - seealso: <a href="http://unicode.org/reports/tr35/#Date_Format_Patterns">LDML Date Format Patterns</a>
 - seealso: <a href="http://unicode.org/reports/tr35/#Time_Zone_Fallback">LDML Time Zone Fallback</a>
 */
inline NSString *AndroidIcuTextDateFormat_get_ABBR_SPECIFIC_TZ(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_ABBR_SPECIFIC_TZ;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, ABBR_SPECIFIC_TZ, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for <i>localized GMT/UTC format</i>, such as GMT+8:00 or HPG-8:00;
  used in combinations date + time + zone, or time + zone.
 - seealso: <a href="http://unicode.org/reports/tr35/#Date_Format_Patterns">LDML Date Format Patterns</a>
 - seealso: <a href="http://unicode.org/reports/tr35/#Time_Zone_Fallback">LDML Time Zone Fallback</a>
 */
inline NSString *AndroidIcuTextDateFormat_get_ABBR_UTC_TZ(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_ABBR_UTC_TZ;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, ABBR_UTC_TZ, NSString *)

/*!
 @brief List of all of the zone skeleton constants for iteration.
 Note that this is fragile; be sure to add any values that are added above.
 */
inline id<JavaUtilList> AndroidIcuTextDateFormat_get_ZONE_SKELETONS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilList> AndroidIcuTextDateFormat_ZONE_SKELETONS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, ZONE_SKELETONS, id<JavaUtilList>)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with standalone month.
 */
inline NSString *AndroidIcuTextDateFormat_get_STANDALONE_MONTH(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_STANDALONE_MONTH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, STANDALONE_MONTH, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with standalone abbreviated month.
 */
inline NSString *AndroidIcuTextDateFormat_get_ABBR_STANDALONE_MONTH(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_ABBR_STANDALONE_MONTH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, ABBR_STANDALONE_MONTH, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with hour, minute, and generic timezone.
 */
inline NSString *AndroidIcuTextDateFormat_get_HOUR_MINUTE_GENERIC_TZ(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_HOUR_MINUTE_GENERIC_TZ;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, HOUR_MINUTE_GENERIC_TZ, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with hour, minute, and timezone.
 */
inline NSString *AndroidIcuTextDateFormat_get_HOUR_MINUTE_TZ(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_HOUR_MINUTE_TZ;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, HOUR_MINUTE_TZ, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with hour and generic timezone.
 */
inline NSString *AndroidIcuTextDateFormat_get_HOUR_GENERIC_TZ(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_HOUR_GENERIC_TZ;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, HOUR_GENERIC_TZ, NSString *)

/*!
 @brief <strong>[icu]</strong> Constant for date skeleton with hour and timezone.
 */
inline NSString *AndroidIcuTextDateFormat_get_HOUR_TZ(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormat_HOUR_TZ;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat, HOUR_TZ, NSString *)

FOUNDATION_EXPORT AndroidIcuTextDateFormat *AndroidIcuTextDateFormat_getTimeInstance(void);

FOUNDATION_EXPORT AndroidIcuTextDateFormat *AndroidIcuTextDateFormat_getTimeInstanceWithInt_(jint style);

FOUNDATION_EXPORT AndroidIcuTextDateFormat *AndroidIcuTextDateFormat_getTimeInstanceWithInt_withJavaUtilLocale_(jint style, JavaUtilLocale *aLocale);

FOUNDATION_EXPORT AndroidIcuTextDateFormat *AndroidIcuTextDateFormat_getTimeInstanceWithInt_withAndroidIcuUtilULocale_(jint style, AndroidIcuUtilULocale *locale);

FOUNDATION_EXPORT AndroidIcuTextDateFormat *AndroidIcuTextDateFormat_getDateInstance(void);

FOUNDATION_EXPORT AndroidIcuTextDateFormat *AndroidIcuTextDateFormat_getDateInstanceWithInt_(jint style);

FOUNDATION_EXPORT AndroidIcuTextDateFormat *AndroidIcuTextDateFormat_getDateInstanceWithInt_withJavaUtilLocale_(jint style, JavaUtilLocale *aLocale);

FOUNDATION_EXPORT AndroidIcuTextDateFormat *AndroidIcuTextDateFormat_getDateInstanceWithInt_withAndroidIcuUtilULocale_(jint style, AndroidIcuUtilULocale *locale);

FOUNDATION_EXPORT AndroidIcuTextDateFormat *AndroidIcuTextDateFormat_getDateTimeInstance(void);

FOUNDATION_EXPORT AndroidIcuTextDateFormat *AndroidIcuTextDateFormat_getDateTimeInstanceWithInt_withInt_(jint dateStyle, jint timeStyle);

FOUNDATION_EXPORT AndroidIcuTextDateFormat *AndroidIcuTextDateFormat_getDateTimeInstanceWithInt_withInt_withJavaUtilLocale_(jint dateStyle, jint timeStyle, JavaUtilLocale *aLocale);

FOUNDATION_EXPORT AndroidIcuTextDateFormat *AndroidIcuTextDateFormat_getDateTimeInstanceWithInt_withInt_withAndroidIcuUtilULocale_(jint dateStyle, jint timeStyle, AndroidIcuUtilULocale *locale);

FOUNDATION_EXPORT AndroidIcuTextDateFormat *AndroidIcuTextDateFormat_getInstance(void);

FOUNDATION_EXPORT IOSObjectArray *AndroidIcuTextDateFormat_getAvailableLocales(void);

FOUNDATION_EXPORT IOSObjectArray *AndroidIcuTextDateFormat_getAvailableULocales(void);

FOUNDATION_EXPORT void AndroidIcuTextDateFormat_init(AndroidIcuTextDateFormat *self);

FOUNDATION_EXPORT AndroidIcuTextDateFormat *AndroidIcuTextDateFormat_getDateInstanceWithAndroidIcuUtilCalendar_withInt_withJavaUtilLocale_(AndroidIcuUtilCalendar *cal, jint dateStyle, JavaUtilLocale *locale);

FOUNDATION_EXPORT AndroidIcuTextDateFormat *AndroidIcuTextDateFormat_getDateInstanceWithAndroidIcuUtilCalendar_withInt_withAndroidIcuUtilULocale_(AndroidIcuUtilCalendar *cal, jint dateStyle, AndroidIcuUtilULocale *locale);

FOUNDATION_EXPORT AndroidIcuTextDateFormat *AndroidIcuTextDateFormat_getTimeInstanceWithAndroidIcuUtilCalendar_withInt_withJavaUtilLocale_(AndroidIcuUtilCalendar *cal, jint timeStyle, JavaUtilLocale *locale);

FOUNDATION_EXPORT AndroidIcuTextDateFormat *AndroidIcuTextDateFormat_getTimeInstanceWithAndroidIcuUtilCalendar_withInt_withAndroidIcuUtilULocale_(AndroidIcuUtilCalendar *cal, jint timeStyle, AndroidIcuUtilULocale *locale);

FOUNDATION_EXPORT AndroidIcuTextDateFormat *AndroidIcuTextDateFormat_getDateTimeInstanceWithAndroidIcuUtilCalendar_withInt_withInt_withJavaUtilLocale_(AndroidIcuUtilCalendar *cal, jint dateStyle, jint timeStyle, JavaUtilLocale *locale);

FOUNDATION_EXPORT AndroidIcuTextDateFormat *AndroidIcuTextDateFormat_getDateTimeInstanceWithAndroidIcuUtilCalendar_withInt_withInt_withAndroidIcuUtilULocale_(AndroidIcuUtilCalendar *cal, jint dateStyle, jint timeStyle, AndroidIcuUtilULocale *locale);

FOUNDATION_EXPORT AndroidIcuTextDateFormat *AndroidIcuTextDateFormat_getInstanceWithAndroidIcuUtilCalendar_withJavaUtilLocale_(AndroidIcuUtilCalendar *cal, JavaUtilLocale *locale);

FOUNDATION_EXPORT AndroidIcuTextDateFormat *AndroidIcuTextDateFormat_getInstanceWithAndroidIcuUtilCalendar_withAndroidIcuUtilULocale_(AndroidIcuUtilCalendar *cal, AndroidIcuUtilULocale *locale);

FOUNDATION_EXPORT AndroidIcuTextDateFormat *AndroidIcuTextDateFormat_getInstanceWithAndroidIcuUtilCalendar_(AndroidIcuUtilCalendar *cal);

FOUNDATION_EXPORT AndroidIcuTextDateFormat *AndroidIcuTextDateFormat_getDateInstanceWithAndroidIcuUtilCalendar_withInt_(AndroidIcuUtilCalendar *cal, jint dateStyle);

FOUNDATION_EXPORT AndroidIcuTextDateFormat *AndroidIcuTextDateFormat_getTimeInstanceWithAndroidIcuUtilCalendar_withInt_(AndroidIcuUtilCalendar *cal, jint timeStyle);

FOUNDATION_EXPORT AndroidIcuTextDateFormat *AndroidIcuTextDateFormat_getDateTimeInstanceWithAndroidIcuUtilCalendar_withInt_withInt_(AndroidIcuUtilCalendar *cal, jint dateStyle, jint timeStyle);

FOUNDATION_EXPORT AndroidIcuTextDateFormat *AndroidIcuTextDateFormat_getInstanceForSkeletonWithNSString_(NSString *skeleton);

FOUNDATION_EXPORT AndroidIcuTextDateFormat *AndroidIcuTextDateFormat_getInstanceForSkeletonWithNSString_withJavaUtilLocale_(NSString *skeleton, JavaUtilLocale *locale);

FOUNDATION_EXPORT AndroidIcuTextDateFormat *AndroidIcuTextDateFormat_getInstanceForSkeletonWithNSString_withAndroidIcuUtilULocale_(NSString *skeleton, AndroidIcuUtilULocale *locale);

FOUNDATION_EXPORT AndroidIcuTextDateFormat *AndroidIcuTextDateFormat_getInstanceForSkeletonWithAndroidIcuUtilCalendar_withNSString_withJavaUtilLocale_(AndroidIcuUtilCalendar *cal, NSString *skeleton, JavaUtilLocale *locale);

FOUNDATION_EXPORT AndroidIcuTextDateFormat *AndroidIcuTextDateFormat_getInstanceForSkeletonWithAndroidIcuUtilCalendar_withNSString_withAndroidIcuUtilULocale_(AndroidIcuUtilCalendar *cal, NSString *skeleton, AndroidIcuUtilULocale *locale);

FOUNDATION_EXPORT AndroidIcuTextDateFormat *AndroidIcuTextDateFormat_getPatternInstanceWithNSString_(NSString *skeleton);

FOUNDATION_EXPORT AndroidIcuTextDateFormat *AndroidIcuTextDateFormat_getPatternInstanceWithNSString_withJavaUtilLocale_(NSString *skeleton, JavaUtilLocale *locale);

FOUNDATION_EXPORT AndroidIcuTextDateFormat *AndroidIcuTextDateFormat_getPatternInstanceWithNSString_withAndroidIcuUtilULocale_(NSString *skeleton, AndroidIcuUtilULocale *locale);

FOUNDATION_EXPORT AndroidIcuTextDateFormat *AndroidIcuTextDateFormat_getPatternInstanceWithAndroidIcuUtilCalendar_withNSString_withJavaUtilLocale_(AndroidIcuUtilCalendar *cal, NSString *skeleton, JavaUtilLocale *locale);

FOUNDATION_EXPORT AndroidIcuTextDateFormat *AndroidIcuTextDateFormat_getPatternInstanceWithAndroidIcuUtilCalendar_withNSString_withAndroidIcuUtilULocale_(AndroidIcuUtilCalendar *cal, NSString *skeleton, AndroidIcuUtilULocale *locale);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuTextDateFormat)

#endif

#if !defined (AndroidIcuTextDateFormat_BooleanAttribute_) && (INCLUDE_ALL_AndroidIcuTextDateFormat || defined(INCLUDE_AndroidIcuTextDateFormat_BooleanAttribute))
#define AndroidIcuTextDateFormat_BooleanAttribute_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, AndroidIcuTextDateFormat_BooleanAttribute_Enum) {
  AndroidIcuTextDateFormat_BooleanAttribute_Enum_PARSE_ALLOW_WHITESPACE = 0,
  AndroidIcuTextDateFormat_BooleanAttribute_Enum_PARSE_ALLOW_NUMERIC = 1,
  AndroidIcuTextDateFormat_BooleanAttribute_Enum_PARSE_MULTIPLE_PATTERNS_FOR_MATCH = 2,
  AndroidIcuTextDateFormat_BooleanAttribute_Enum_PARSE_PARTIAL_LITERAL_MATCH = 3,
  AndroidIcuTextDateFormat_BooleanAttribute_Enum_PARSE_PARTIAL_MATCH = 4,
};

/*!
 @brief boolean attributes
 */
@interface AndroidIcuTextDateFormat_BooleanAttribute : JavaLangEnum

@property (readonly, class, nonnull) AndroidIcuTextDateFormat_BooleanAttribute *PARSE_ALLOW_WHITESPACE NS_SWIFT_NAME(PARSE_ALLOW_WHITESPACE);
@property (readonly, class, nonnull) AndroidIcuTextDateFormat_BooleanAttribute *PARSE_ALLOW_NUMERIC NS_SWIFT_NAME(PARSE_ALLOW_NUMERIC);
@property (readonly, class, nonnull) AndroidIcuTextDateFormat_BooleanAttribute *PARSE_MULTIPLE_PATTERNS_FOR_MATCH NS_SWIFT_NAME(PARSE_MULTIPLE_PATTERNS_FOR_MATCH);
@property (readonly, class, nonnull) AndroidIcuTextDateFormat_BooleanAttribute *PARSE_PARTIAL_LITERAL_MATCH NS_SWIFT_NAME(PARSE_PARTIAL_LITERAL_MATCH);
@property (readonly, class, nonnull) AndroidIcuTextDateFormat_BooleanAttribute *PARSE_PARTIAL_MATCH NS_SWIFT_NAME(PARSE_PARTIAL_MATCH);
+ (AndroidIcuTextDateFormat_BooleanAttribute * __nonnull)PARSE_ALLOW_WHITESPACE;

+ (AndroidIcuTextDateFormat_BooleanAttribute * __nonnull)PARSE_ALLOW_NUMERIC;

+ (AndroidIcuTextDateFormat_BooleanAttribute * __nonnull)PARSE_MULTIPLE_PATTERNS_FOR_MATCH;

+ (AndroidIcuTextDateFormat_BooleanAttribute * __nonnull)PARSE_PARTIAL_LITERAL_MATCH;

+ (AndroidIcuTextDateFormat_BooleanAttribute * __nonnull)PARSE_PARTIAL_MATCH;

#pragma mark Public

+ (AndroidIcuTextDateFormat_BooleanAttribute *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (AndroidIcuTextDateFormat_BooleanAttribute_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(AndroidIcuTextDateFormat_BooleanAttribute)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT AndroidIcuTextDateFormat_BooleanAttribute *AndroidIcuTextDateFormat_BooleanAttribute_values_[];

/*!
 @brief indicates whitespace tolerance.Also included is trailing dot tolerance.
 */
inline AndroidIcuTextDateFormat_BooleanAttribute *AndroidIcuTextDateFormat_BooleanAttribute_get_PARSE_ALLOW_WHITESPACE(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextDateFormat_BooleanAttribute, PARSE_ALLOW_WHITESPACE)

/*!
 @brief indicates tolerance of numeric data when String data may be assumed.
 e.g. YEAR_NAME_FIELD
 */
inline AndroidIcuTextDateFormat_BooleanAttribute *AndroidIcuTextDateFormat_BooleanAttribute_get_PARSE_ALLOW_NUMERIC(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextDateFormat_BooleanAttribute, PARSE_ALLOW_NUMERIC)

/*!
 @brief indicates tolerance of pattern mismatch between input data and specified format pattern.
 e.g. accepting "September" for a month pattern of MMM ("Sep")
 */
inline AndroidIcuTextDateFormat_BooleanAttribute *AndroidIcuTextDateFormat_BooleanAttribute_get_PARSE_MULTIPLE_PATTERNS_FOR_MATCH(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextDateFormat_BooleanAttribute, PARSE_MULTIPLE_PATTERNS_FOR_MATCH)

/*!
 @brief indicates tolerance of a partial literal match
  e.g.accepting "--mon-02-march-2011" for a pattern of "'--: 'EEE-WW-MMMM-yyyy"
 */
inline AndroidIcuTextDateFormat_BooleanAttribute *AndroidIcuTextDateFormat_BooleanAttribute_get_PARSE_PARTIAL_LITERAL_MATCH(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextDateFormat_BooleanAttribute, PARSE_PARTIAL_LITERAL_MATCH)

/*!
 @brief alias of PARSE_PARTIAL_LITERAL_MATCH
 */
inline AndroidIcuTextDateFormat_BooleanAttribute *AndroidIcuTextDateFormat_BooleanAttribute_get_PARSE_PARTIAL_MATCH(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextDateFormat_BooleanAttribute, PARSE_PARTIAL_MATCH)

FOUNDATION_EXPORT IOSObjectArray *AndroidIcuTextDateFormat_BooleanAttribute_values(void);

FOUNDATION_EXPORT AndroidIcuTextDateFormat_BooleanAttribute *AndroidIcuTextDateFormat_BooleanAttribute_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT AndroidIcuTextDateFormat_BooleanAttribute *AndroidIcuTextDateFormat_BooleanAttribute_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuTextDateFormat_BooleanAttribute)

#endif

#if !defined (AndroidIcuTextDateFormat_Field_) && (INCLUDE_ALL_AndroidIcuTextDateFormat || defined(INCLUDE_AndroidIcuTextDateFormat_Field))
#define AndroidIcuTextDateFormat_Field_

#define RESTRICT_JavaTextFormat 1
#define INCLUDE_JavaTextFormat_Field 1
#include "java/text/Format.h"

/*!
 @brief The instances of this inner class are used as attribute keys and values
  in AttributedCharacterIterator that
  DateFormat.formatToCharacterIterator() method returns.
 <p>There is no public constructor to this class, the only instances are the
  constants defined here. 
 <p>
 */
@interface AndroidIcuTextDateFormat_Field : JavaTextFormat_Field
@property (readonly, class, strong) AndroidIcuTextDateFormat_Field *AM_PM NS_SWIFT_NAME(AM_PM);
@property (readonly, class, strong) AndroidIcuTextDateFormat_Field *DAY_OF_MONTH NS_SWIFT_NAME(DAY_OF_MONTH);
@property (readonly, class, strong) AndroidIcuTextDateFormat_Field *DAY_OF_WEEK NS_SWIFT_NAME(DAY_OF_WEEK);
@property (readonly, class, strong) AndroidIcuTextDateFormat_Field *DAY_OF_WEEK_IN_MONTH NS_SWIFT_NAME(DAY_OF_WEEK_IN_MONTH);
@property (readonly, class, strong) AndroidIcuTextDateFormat_Field *DAY_OF_YEAR NS_SWIFT_NAME(DAY_OF_YEAR);
@property (readonly, class, strong) AndroidIcuTextDateFormat_Field *ERA NS_SWIFT_NAME(ERA);
@property (readonly, class, strong) AndroidIcuTextDateFormat_Field *HOUR_OF_DAY0 NS_SWIFT_NAME(HOUR_OF_DAY0);
@property (readonly, class, strong) AndroidIcuTextDateFormat_Field *HOUR_OF_DAY1 NS_SWIFT_NAME(HOUR_OF_DAY1);
@property (readonly, class, strong) AndroidIcuTextDateFormat_Field *HOUR0 NS_SWIFT_NAME(HOUR0);
@property (readonly, class, strong) AndroidIcuTextDateFormat_Field *HOUR1 NS_SWIFT_NAME(HOUR1);
@property (readonly, class, strong) AndroidIcuTextDateFormat_Field *MILLISECOND NS_SWIFT_NAME(MILLISECOND);
@property (readonly, class, strong) AndroidIcuTextDateFormat_Field *MINUTE NS_SWIFT_NAME(MINUTE);
@property (readonly, class, strong) AndroidIcuTextDateFormat_Field *MONTH NS_SWIFT_NAME(MONTH);
@property (readonly, class, strong) AndroidIcuTextDateFormat_Field *SECOND NS_SWIFT_NAME(SECOND);
@property (readonly, class, strong) AndroidIcuTextDateFormat_Field *TIME_ZONE NS_SWIFT_NAME(TIME_ZONE);
@property (readonly, class, strong) AndroidIcuTextDateFormat_Field *WEEK_OF_MONTH NS_SWIFT_NAME(WEEK_OF_MONTH);
@property (readonly, class, strong) AndroidIcuTextDateFormat_Field *WEEK_OF_YEAR NS_SWIFT_NAME(WEEK_OF_YEAR);
@property (readonly, class, strong) AndroidIcuTextDateFormat_Field *YEAR NS_SWIFT_NAME(YEAR);
@property (readonly, class, strong) AndroidIcuTextDateFormat_Field *DOW_LOCAL NS_SWIFT_NAME(DOW_LOCAL);
@property (readonly, class, strong) AndroidIcuTextDateFormat_Field *EXTENDED_YEAR NS_SWIFT_NAME(EXTENDED_YEAR);
@property (readonly, class, strong) AndroidIcuTextDateFormat_Field *JULIAN_DAY NS_SWIFT_NAME(JULIAN_DAY);
@property (readonly, class, strong) AndroidIcuTextDateFormat_Field *MILLISECONDS_IN_DAY NS_SWIFT_NAME(MILLISECONDS_IN_DAY);
@property (readonly, class, strong) AndroidIcuTextDateFormat_Field *YEAR_WOY NS_SWIFT_NAME(YEAR_WOY);
@property (readonly, class, strong) AndroidIcuTextDateFormat_Field *QUARTER NS_SWIFT_NAME(QUARTER);
@property (readonly, class, strong) AndroidIcuTextDateFormat_Field *RELATED_YEAR NS_SWIFT_NAME(RELATED_YEAR);
@property (readonly, class, strong) AndroidIcuTextDateFormat_Field *AM_PM_MIDNIGHT_NOON NS_SWIFT_NAME(AM_PM_MIDNIGHT_NOON);
@property (readonly, class, strong) AndroidIcuTextDateFormat_Field *FLEXIBLE_DAY_PERIOD NS_SWIFT_NAME(FLEXIBLE_DAY_PERIOD);
@property (readonly, class, strong) AndroidIcuTextDateFormat_Field *TIME_SEPARATOR NS_SWIFT_NAME(TIME_SEPARATOR);

+ (AndroidIcuTextDateFormat_Field *)AM_PM;

+ (AndroidIcuTextDateFormat_Field *)DAY_OF_MONTH;

+ (AndroidIcuTextDateFormat_Field *)DAY_OF_WEEK;

+ (AndroidIcuTextDateFormat_Field *)DAY_OF_WEEK_IN_MONTH;

+ (AndroidIcuTextDateFormat_Field *)DAY_OF_YEAR;

+ (AndroidIcuTextDateFormat_Field *)ERA;

+ (AndroidIcuTextDateFormat_Field *)HOUR_OF_DAY0;

+ (AndroidIcuTextDateFormat_Field *)HOUR_OF_DAY1;

+ (AndroidIcuTextDateFormat_Field *)HOUR0;

+ (AndroidIcuTextDateFormat_Field *)HOUR1;

+ (AndroidIcuTextDateFormat_Field *)MILLISECOND;

+ (AndroidIcuTextDateFormat_Field *)MINUTE;

+ (AndroidIcuTextDateFormat_Field *)MONTH;

+ (AndroidIcuTextDateFormat_Field *)SECOND;

+ (AndroidIcuTextDateFormat_Field *)TIME_ZONE;

+ (AndroidIcuTextDateFormat_Field *)WEEK_OF_MONTH;

+ (AndroidIcuTextDateFormat_Field *)WEEK_OF_YEAR;

+ (AndroidIcuTextDateFormat_Field *)YEAR;

+ (AndroidIcuTextDateFormat_Field *)DOW_LOCAL;

+ (AndroidIcuTextDateFormat_Field *)EXTENDED_YEAR;

+ (AndroidIcuTextDateFormat_Field *)JULIAN_DAY;

+ (AndroidIcuTextDateFormat_Field *)MILLISECONDS_IN_DAY;

+ (AndroidIcuTextDateFormat_Field *)YEAR_WOY;

+ (AndroidIcuTextDateFormat_Field *)QUARTER;

+ (AndroidIcuTextDateFormat_Field *)RELATED_YEAR;

+ (AndroidIcuTextDateFormat_Field *)AM_PM_MIDNIGHT_NOON;

+ (AndroidIcuTextDateFormat_Field *)FLEXIBLE_DAY_PERIOD;

+ (AndroidIcuTextDateFormat_Field *)TIME_SEPARATOR;

#pragma mark Public

/*!
 @brief Returns the <code>Calendar</code> field associated with this attribute.
 If there is no corresponding <code>Calendar</code> available, this will
  return -1.
 @return <code>Calendar</code> constant for this attribute.
 */
- (jint)getCalendarField;

/*!
 @brief Returns the <code>Field</code> constant that corresponds to the <code>
  Calendar</code> field <code>calendarField</code>.If there is no
  corresponding <code>Field</code> is available, null is returned.
 @param calendarField <code> Calendar </code>  field constant
 @return <code>Field</code> associated with the <code>calendarField</code>,
  or null if no associated <code>Field</code> is available.
 @throw IllegalArgumentExceptionif <code>calendarField</code> is not
  a valid <code>Calendar</code> field constant.
 */
+ (AndroidIcuTextDateFormat_Field *)ofCalendarFieldWithInt:(jint)calendarField;

#pragma mark Protected

/*!
 @brief Constructs a <code>DateFormat.Field</code> with the given name and the 
 <code>Calendar</code> field which this attribute represents.Use -1 for 
 <code>calendarField</code> if this field does not have a corresponding 
 <code>Calendar</code> field.
 @param name Name of the attribute
 @param calendarField <code> Calendar </code>  field constant
 */
- (instancetype __nonnull)initWithNSString:(NSString *)name
                                   withInt:(jint)calendarField;

/*!
 @brief Resolves instances being deserialized to the predefined constants.
 @throw InvalidObjectExceptionif the constant could not be resolved.
 */
- (id)readResolve;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(AndroidIcuTextDateFormat_Field)

/*!
 @brief Constant identifying the time of day indicator(am/pm).
 */
inline AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_get_AM_PM(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_AM_PM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat_Field, AM_PM, AndroidIcuTextDateFormat_Field *)

/*!
 @brief Constant identifying the day of month field.
 */
inline AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_get_DAY_OF_MONTH(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_DAY_OF_MONTH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat_Field, DAY_OF_MONTH, AndroidIcuTextDateFormat_Field *)

/*!
 @brief Constant identifying the day of week field.
 */
inline AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_get_DAY_OF_WEEK(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_DAY_OF_WEEK;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat_Field, DAY_OF_WEEK, AndroidIcuTextDateFormat_Field *)

/*!
 @brief Constant identifying the day of week in month field.
 */
inline AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_get_DAY_OF_WEEK_IN_MONTH(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_DAY_OF_WEEK_IN_MONTH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat_Field, DAY_OF_WEEK_IN_MONTH, AndroidIcuTextDateFormat_Field *)

/*!
 @brief Constant identifying the day of year field.
 */
inline AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_get_DAY_OF_YEAR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_DAY_OF_YEAR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat_Field, DAY_OF_YEAR, AndroidIcuTextDateFormat_Field *)

/*!
 @brief Constant identifying the era field.
 */
inline AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_get_ERA(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_ERA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat_Field, ERA, AndroidIcuTextDateFormat_Field *)

/*!
 @brief Constant identifying the hour(0-23) of day field.
 */
inline AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_get_HOUR_OF_DAY0(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_HOUR_OF_DAY0;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat_Field, HOUR_OF_DAY0, AndroidIcuTextDateFormat_Field *)

/*!
 @brief Constant identifying the hour(1-24) of day field.
 */
inline AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_get_HOUR_OF_DAY1(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_HOUR_OF_DAY1;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat_Field, HOUR_OF_DAY1, AndroidIcuTextDateFormat_Field *)

/*!
 @brief Constant identifying the hour(0-11) field.
 */
inline AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_get_HOUR0(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_HOUR0;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat_Field, HOUR0, AndroidIcuTextDateFormat_Field *)

/*!
 @brief Constant identifying the hour(1-12) field.
 */
inline AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_get_HOUR1(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_HOUR1;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat_Field, HOUR1, AndroidIcuTextDateFormat_Field *)

/*!
 @brief Constant identifying the millisecond field.
 */
inline AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_get_MILLISECOND(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_MILLISECOND;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat_Field, MILLISECOND, AndroidIcuTextDateFormat_Field *)

/*!
 @brief Constant identifying the minute field.
 */
inline AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_get_MINUTE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_MINUTE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat_Field, MINUTE, AndroidIcuTextDateFormat_Field *)

/*!
 @brief Constant identifying the month field.
 */
inline AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_get_MONTH(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_MONTH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat_Field, MONTH, AndroidIcuTextDateFormat_Field *)

/*!
 @brief Constant identifying the second field.
 */
inline AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_get_SECOND(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_SECOND;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat_Field, SECOND, AndroidIcuTextDateFormat_Field *)

/*!
 @brief Constant identifying the time zone field.
 */
inline AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_get_TIME_ZONE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_TIME_ZONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat_Field, TIME_ZONE, AndroidIcuTextDateFormat_Field *)

/*!
 @brief Constant identifying the week of month field.
 */
inline AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_get_WEEK_OF_MONTH(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_WEEK_OF_MONTH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat_Field, WEEK_OF_MONTH, AndroidIcuTextDateFormat_Field *)

/*!
 @brief Constant identifying the week of year field.
 */
inline AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_get_WEEK_OF_YEAR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_WEEK_OF_YEAR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat_Field, WEEK_OF_YEAR, AndroidIcuTextDateFormat_Field *)

/*!
 @brief Constant identifying the year field.
 */
inline AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_get_YEAR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_YEAR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat_Field, YEAR, AndroidIcuTextDateFormat_Field *)

/*!
 @brief Constant identifying the local day of week field.
 */
inline AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_get_DOW_LOCAL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_DOW_LOCAL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat_Field, DOW_LOCAL, AndroidIcuTextDateFormat_Field *)

/*!
 @brief Constant identifying the extended year field.
 */
inline AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_get_EXTENDED_YEAR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_EXTENDED_YEAR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat_Field, EXTENDED_YEAR, AndroidIcuTextDateFormat_Field *)

/*!
 @brief Constant identifying the Julian day field.
 */
inline AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_get_JULIAN_DAY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_JULIAN_DAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat_Field, JULIAN_DAY, AndroidIcuTextDateFormat_Field *)

/*!
 @brief Constant identifying the milliseconds in day field.
 */
inline AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_get_MILLISECONDS_IN_DAY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_MILLISECONDS_IN_DAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat_Field, MILLISECONDS_IN_DAY, AndroidIcuTextDateFormat_Field *)

/*!
 @brief Constant identifying the year used with week of year field.
 */
inline AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_get_YEAR_WOY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_YEAR_WOY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat_Field, YEAR_WOY, AndroidIcuTextDateFormat_Field *)

/*!
 @brief Constant identifying the quarter field.
 */
inline AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_get_QUARTER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_QUARTER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat_Field, QUARTER, AndroidIcuTextDateFormat_Field *)

/*!
 @brief Constant identifying the related year field.
 */
inline AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_get_RELATED_YEAR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_RELATED_YEAR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat_Field, RELATED_YEAR, AndroidIcuTextDateFormat_Field *)

/*!
 @brief <strong>[icu]</strong> Constant identifying the am/pm/midnight/noon field.
 */
inline AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_get_AM_PM_MIDNIGHT_NOON(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_AM_PM_MIDNIGHT_NOON;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat_Field, AM_PM_MIDNIGHT_NOON, AndroidIcuTextDateFormat_Field *)

/*!
 @brief <strong>[icu]</strong> Constant identifying the flexible day period field.
 */
inline AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_get_FLEXIBLE_DAY_PERIOD(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_FLEXIBLE_DAY_PERIOD;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat_Field, FLEXIBLE_DAY_PERIOD, AndroidIcuTextDateFormat_Field *)

/*!
 @brief Constant identifying the time separator field.
 */
inline AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_get_TIME_SEPARATOR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_TIME_SEPARATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormat_Field, TIME_SEPARATOR, AndroidIcuTextDateFormat_Field *)

FOUNDATION_EXPORT void AndroidIcuTextDateFormat_Field_initWithNSString_withInt_(AndroidIcuTextDateFormat_Field *self, NSString *name, jint calendarField);

FOUNDATION_EXPORT AndroidIcuTextDateFormat_Field *new_AndroidIcuTextDateFormat_Field_initWithNSString_withInt_(NSString *name, jint calendarField) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidIcuTextDateFormat_Field *create_AndroidIcuTextDateFormat_Field_initWithNSString_withInt_(NSString *name, jint calendarField);

FOUNDATION_EXPORT AndroidIcuTextDateFormat_Field *AndroidIcuTextDateFormat_Field_ofCalendarFieldWithInt_(jint calendarField);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuTextDateFormat_Field)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_AndroidIcuTextDateFormat")
