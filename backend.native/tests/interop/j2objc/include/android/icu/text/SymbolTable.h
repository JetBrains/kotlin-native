//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/external/icu/android_icu4j/src/main/java/android/icu/text/SymbolTable.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidIcuTextSymbolTable")
#ifdef RESTRICT_AndroidIcuTextSymbolTable
#define INCLUDE_ALL_AndroidIcuTextSymbolTable 0
#else
#define INCLUDE_ALL_AndroidIcuTextSymbolTable 1
#endif
#undef RESTRICT_AndroidIcuTextSymbolTable

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (AndroidIcuTextSymbolTable_) && (INCLUDE_ALL_AndroidIcuTextSymbolTable || defined(INCLUDE_AndroidIcuTextSymbolTable))
#define AndroidIcuTextSymbolTable_

@class IOSCharArray;
@class JavaTextParsePosition;
@protocol AndroidIcuTextUnicodeMatcher;

/*!
 @brief An interface that defines both lookup protocol and parsing of
  symbolic names.
 <p>This interface is used by UnicodeSet to resolve $Variable style
  references that appear in set patterns.  RBBI and Transliteration
  both independently implement this interface. 
 <p>A symbol table maintains two kinds of mappings.  The first is
  between symbolic names and their values.  For example, if the
  variable with the name "start" is set to the value "alpha"
  (perhaps, though not necessarily, through an expression such as
  "$start=alpha"), then the call lookup("start") will return the
  char[] array ['a', 'l', 'p', 'h', 'a']. 
 <p>The second kind of mapping is between character values and
  UnicodeMatcher objects.  This is used by RuleBasedTransliterator,
  which uses characters in the private use area to represent objects
  such as UnicodeSets.  If U+E015 is mapped to the UnicodeSet [a-z],
  then lookupMatcher(0xE015) will return the UnicodeSet [a-z]. 
 <p>Finally, a symbol table defines parsing behavior for symbolic
  names.  All symbolic names start with the SYMBOL_REF character.
  When a parser encounters this character, it calls parseReference()
  with the position immediately following the SYMBOL_REF.  The symbol
  table parses the name, if there is one, and returns it.
 */
@protocol AndroidIcuTextSymbolTable < JavaObject >

/*!
 @brief Lookup the characters associated with this string and return it.
 Return <tt>null</tt> if no such name exists.  The resultant
  array may have length zero.
 @param s the symbolic name to lookup
 @return a char array containing the name's value, or null if
  there is no mapping for s.
 */
- (IOSCharArray *)lookupWithNSString:(NSString *)s;

/*!
 @brief Lookup the UnicodeMatcher associated with the given character, and
  return it.Return <tt>null</tt> if not found.
 @param ch a 32-bit code point from 0 to 0x10FFFF inclusive.
 @return the UnicodeMatcher object represented by the given
  character, or null if there is no mapping for ch.
 */
- (id<AndroidIcuTextUnicodeMatcher>)lookupMatcherWithInt:(jint)ch;

/*!
 @brief Parse a symbol reference name from the given string, starting
  at the given position.If no valid symbol reference name is
  found, return null and leave pos unchanged.
 That is, if the
  character at pos cannot start a name, or if pos is at or after
  text.length(), then return null.  This indicates an isolated
  SYMBOL_REF character.
 @param text the text to parse for the name
 @param pos on entry, the index of the first character to parse.  This is the character following the SYMBOL_REF character.  On
   exit, the index after the last parsed character.  If the parse
   failed, pos is unchanged on exit.
 @param limit the index after the last character to be parsed.
 @return the parsed name, or null if there is no valid symbolic
  name at the given position.
 */
- (NSString *)parseReferenceWithNSString:(NSString *)text
               withJavaTextParsePosition:(JavaTextParsePosition *)pos
                                 withInt:(jint)limit;

@end

@interface AndroidIcuTextSymbolTable : NSObject
@property (readonly, class) jchar SYMBOL_REF NS_SWIFT_NAME(SYMBOL_REF);

+ (jchar)SYMBOL_REF;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidIcuTextSymbolTable)

/*!
 @brief The character preceding a symbol reference name.
 */
inline jchar AndroidIcuTextSymbolTable_get_SYMBOL_REF(void);
#define AndroidIcuTextSymbolTable_SYMBOL_REF '$'
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextSymbolTable, SYMBOL_REF, jchar)

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuTextSymbolTable)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_AndroidIcuTextSymbolTable")
