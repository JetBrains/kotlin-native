//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/external/icu/android_icu4j/src/main/java/android/icu/text/TimeZoneFormat.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidIcuTextTimeZoneFormat")
#ifdef RESTRICT_AndroidIcuTextTimeZoneFormat
#define INCLUDE_ALL_AndroidIcuTextTimeZoneFormat 0
#else
#define INCLUDE_ALL_AndroidIcuTextTimeZoneFormat 1
#endif
#undef RESTRICT_AndroidIcuTextTimeZoneFormat

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (AndroidIcuTextTimeZoneFormat_) && (INCLUDE_ALL_AndroidIcuTextTimeZoneFormat || defined(INCLUDE_AndroidIcuTextTimeZoneFormat))
#define AndroidIcuTextTimeZoneFormat_

#define RESTRICT_AndroidIcuTextUFormat 1
#define INCLUDE_AndroidIcuTextUFormat 1
#include "android/icu/text/UFormat.h"

#define RESTRICT_AndroidIcuUtilFreezable 1
#define INCLUDE_AndroidIcuUtilFreezable 1
#include "android/icu/util/Freezable.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType;
@class AndroidIcuTextTimeZoneFormat_Style;
@class AndroidIcuTextTimeZoneNames;
@class AndroidIcuUtilOutput;
@class AndroidIcuUtilTimeZone;
@class AndroidIcuUtilULocale;
@class JavaLangStringBuffer;
@class JavaTextFieldPosition;
@class JavaTextParsePosition;
@class JavaUtilEnumSet;
@class JavaUtilLocale;
@protocol JavaTextAttributedCharacterIterator;

/*!
 @brief <code>TimeZoneFormat</code> supports time zone display name formatting and parsing.
 An instance of TimeZoneFormat works as a subformatter of <code>SimpleDateFormat</code>,
  but you can also directly get a new instance of <code>TimeZoneFormat</code> and
  formatting/parsing time zone display names. 
 <p>
  ICU implements the time zone display names defined by <a href="http://www.unicode.org/reports/tr35/">UTS#35
  Unicode Locale Data Markup Language (LDML)</a>. <code>TimeZoneNames</code> represents the
  time zone display name data model and this class implements the algorithm for actual
  formatting and parsing.
 - seealso: SimpleDateFormat
 - seealso: TimeZoneNames
 */
@interface AndroidIcuTextTimeZoneFormat : AndroidIcuTextUFormat < AndroidIcuUtilFreezable, JavaIoSerializable >

#pragma mark Public

/*!
 */
- (AndroidIcuTextTimeZoneFormat *)cloneAsThawed;

/*!
 */
- (JavaLangStringBuffer *)formatWithId:(id)obj
              withJavaLangStringBuffer:(JavaLangStringBuffer *)toAppendTo
             withJavaTextFieldPosition:(JavaTextFieldPosition *)pos;

/*!
 @brief Returns the display name of the time zone at the given date for
  the style.
 <p><b>Note</b>: A style may have fallback styles defined. For example,
  when <code>GENERIC_LONG</code> is requested, but there is no display name
  data available for <code>GENERIC_LONG</code> style, the implementation
  may use <code>GENERIC_LOCATION</code> or <code>LOCALIZED_GMT</code>.
  See UTS#35 UNICODE LOCALE DATA MARKUP LANGUAGE (LDML) 
 <a href="http://www.unicode.org/reports/tr35/#Time_Zone_Fallback">Appendix J: Time Zone Display Name</a>
  for the details.
 @param style the style enum (e.g.  <code> GENERIC_LONG </code> ,  <code> LOCALIZED_GMT </code>
  ...)
 @param tz the time zone.
 @param date the date.
 @return the display name of the time zone.
 - seealso: Style
 - seealso: #format(Style, TimeZone, long, Output)
 */
- (NSString *)formatWithAndroidIcuTextTimeZoneFormat_Style:(AndroidIcuTextTimeZoneFormat_Style *)style
                                withAndroidIcuUtilTimeZone:(AndroidIcuUtilTimeZone *)tz
                                                  withLong:(jlong)date;

/*!
 @brief Returns the display name of the time zone at the given date for
  the style.This method takes an extra argument <code>Output&lt;TimeType&gt; timeType</code>
  in addition to the argument list of <code>format(Style, TimeZone, long)</code>.
 The argument is used for receiving the time type (standard time
  or daylight saving time, or unknown) actually used for the display name.
 @param style the style enum (e.g.  <code> GENERIC_LONG </code> ,  <code> LOCALIZED_GMT </code>
  ...)
 @param tz the time zone.
 @param date the date.
 @param timeType the output argument for receiving the time type (standard/daylight/unknown)  used for the display name, or specify null if the information is not necessary.
 @return the display name of the time zone.
 - seealso: Style
 - seealso: #format(Style, TimeZone, long)
 */
- (NSString *)formatWithAndroidIcuTextTimeZoneFormat_Style:(AndroidIcuTextTimeZoneFormat_Style *)style
                                withAndroidIcuUtilTimeZone:(AndroidIcuUtilTimeZone *)tz
                                                  withLong:(jlong)date
                                  withAndroidIcuUtilOutput:(AndroidIcuUtilOutput *)timeType;

/*!
 @brief Returns the ISO 8601 basic time zone string for the given offset.
 For example, "-08", "-0830" and "Z"
 @param offset the offset from GMT(UTC) in milliseconds.
 @param useUtcIndicator true if ISO 8601 UTC indicator "Z" is used when the offset is 0.
 @param isShort true if shortest form is used.
 @param ignoreSeconds true if non-zero offset seconds is appended.
 @return the ISO 8601 basic format.
 @throw IllegalArgumentExceptionif the specified offset is out of supported range
  (-24 hours &lt; offset &lt; +24 hours).
 - seealso: #formatOffsetISO8601Extended(int, boolean, boolean, boolean)
 - seealso: #parseOffsetISO8601(String, ParsePosition)
 */
- (NSString *)formatOffsetISO8601BasicWithInt:(jint)offset
                                  withBoolean:(jboolean)useUtcIndicator
                                  withBoolean:(jboolean)isShort
                                  withBoolean:(jboolean)ignoreSeconds;

/*!
 @brief Returns the ISO 8601 extended time zone string for the given offset.
 For example, "-08:00", "-08:30" and "Z"
 @param offset the offset from GMT(UTC) in milliseconds.
 @param useUtcIndicator true if ISO 8601 UTC indicator "Z" is used when the offset is 0.
 @param isShort true if shortest form is used.
 @param ignoreSeconds true if non-zero offset seconds is appended.
 @return the ISO 8601 extended format.
 @throw IllegalArgumentExceptionif the specified offset is out of supported range
  (-24 hours &lt; offset &lt; +24 hours).
 - seealso: #formatOffsetISO8601Basic(int, boolean, boolean, boolean)
 - seealso: #parseOffsetISO8601(String, ParsePosition)
 */
- (NSString *)formatOffsetISO8601ExtendedWithInt:(jint)offset
                                     withBoolean:(jboolean)useUtcIndicator
                                     withBoolean:(jboolean)isShort
                                     withBoolean:(jboolean)ignoreSeconds;

/*!
 @brief Returns the localized GMT(UTC) offset format for the given offset.
 The localized GMT offset is defined by; 
 <ul>
  <li>GMT format pattern (e.g. "GMT {0}" - see <code>getGMTPattern()</code>)
  <li>Offset time pattern (e.g. "+HH:mm" - see <code>getGMTOffsetPattern(GMTOffsetPatternType)</code>)
  <li>Offset digits (e.g. "0123456789" - see <code>getGMTOffsetDigits()</code>)
  <li>GMT zero format (e.g. "GMT" - see <code>getGMTZeroFormat()</code>)
  </ul>
  This format always uses 2 digit hours and minutes. When the given offset has non-zero
  seconds, 2 digit seconds field will be appended. For example,
  GMT+05:00 and GMT+05:28:06.
 @param offset the offset from GMT(UTC) in milliseconds.
 @return the localized GMT format string
 - seealso: #parseOffsetLocalizedGMT(String, ParsePosition)
 @throw IllegalArgumentExceptionif the specified offset is out of supported range
  (-24 hours &lt; offset &lt; +24 hours).
 */
- (NSString *)formatOffsetLocalizedGMTWithInt:(jint)offset;

/*!
 @brief Returns the short localized GMT(UTC) offset format for the given offset.
 The short localized GMT offset is defined by; 
 <ul>
  <li>GMT format pattern (e.g. "GMT {0}" - see <code>getGMTPattern()</code>)
  <li>Offset time pattern (e.g. "+HH:mm" - see <code>getGMTOffsetPattern(GMTOffsetPatternType)</code>)
  <li>Offset digits (e.g. "0123456789" - see <code>getGMTOffsetDigits()</code>)
  <li>GMT zero format (e.g. "GMT" - see <code>getGMTZeroFormat()</code>)
  </ul>
  This format uses the shortest representation of offset. The hours field does not
  have leading zero and lower fields with zero will be truncated. For example,
  GMT+5 and GMT+530.
 @param offset the offset from GMT(UTC) in milliseconds.
 @return the short localized GMT format string
 - seealso: #parseOffsetLocalizedGMT(String, ParsePosition)
 @throw IllegalArgumentExceptionif the specified offset is out of supported range
  (-24 hours &lt; offset &lt; +24 hours).
 */
- (NSString *)formatOffsetShortLocalizedGMTWithInt:(jint)offset;

/*!
 */
- (id<JavaTextAttributedCharacterIterator>)formatToCharacterIteratorWithId:(id)obj;

/*!
 */
- (AndroidIcuTextTimeZoneFormat *)freeze;

/*!
 @brief Returns the default parse options used by this <code>TimeZoneFormat</code> instance.
 @return the default parse options.
 - seealso: ParseOption
 */
- (JavaUtilEnumSet *)getDefaultParseOptions;

/*!
 @brief Returns the decimal digit characters used for localized GMT format in a single string
  containing from 0 to 9 in the ascending order.
 @return the decimal digits for localized GMT format.
 - seealso: #setGMTOffsetDigits(String)
 */
- (NSString *)getGMTOffsetDigits;

/*!
 @brief Returns the offset pattern used for localized GMT format.
 @param type the offset pattern enum
 - seealso: #setGMTOffsetPattern(GMTOffsetPatternType, String)
 */
- (NSString *)getGMTOffsetPatternWithAndroidIcuTextTimeZoneFormat_GMTOffsetPatternType:(AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType *)type;

/*!
 @brief Returns the localized GMT format pattern.
 @return the localized GMT format pattern.
 - seealso: #setGMTPattern(String)
 */
- (NSString *)getGMTPattern;

/*!
 @brief Returns the localized GMT format string for GMT(UTC) itself (GMT offset is 0).
 @return the localized GMT string string for GMT(UTC) itself.
 - seealso: #setGMTZeroFormat(String)
 */
- (NSString *)getGMTZeroFormat;

/*!
 @brief Returns a frozen instance of <code>TimeZoneFormat</code> for the given 
 <code>java.util.Locale</code>.
 <p><b>Note</b>: The instance returned by this method is frozen. If you want to
  customize a TimeZoneFormat, you must use <code>cloneAsThawed()</code> to get a
  thawed copy first.
 @param locale the <code>Locale</code> .
 @return a frozen instance of <code>TimeZoneFormat</code> for the given locale.
 */
+ (AndroidIcuTextTimeZoneFormat *)getInstanceWithJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Returns a frozen instance of <code>TimeZoneFormat</code> for the given locale.
 <p><b>Note</b>: The instance returned by this method is frozen. If you want to
  customize a TimeZoneFormat, you must use <code>cloneAsThawed()</code> to get a
  thawed copy first.
 @param locale the locale.
 @return a frozen instance of <code>TimeZoneFormat</code> for the given locale.
 */
+ (AndroidIcuTextTimeZoneFormat *)getInstanceWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale;

/*!
 @brief Returns the time zone display name data used by this instance.
 @return the time zone display name data.
 - seealso: #setTimeZoneNames(TimeZoneNames)
 */
- (AndroidIcuTextTimeZoneNames *)getTimeZoneNames;

/*!
 */
- (jboolean)isFrozen;

/*!
 @brief Returns a <code>TimeZone</code> for the given text.
 <p>
  <b>Note</b>: The behavior of this method is equivalent to <code>parse(String, ParsePosition)</code>.
 @param text the time zone string
 @return A <code>TimeZone</code>.
 @throw ParseExceptionwhen the input could not be parsed as a time zone string.
 - seealso: #parse(String, ParsePosition)
 */
- (AndroidIcuUtilTimeZone *)parseWithNSString:(NSString *)text;

/*!
 @brief Returns a <code>TimeZone</code> by parsing the time zone string according to
  the given parse position.
 <p>
  <b>Note</b>: This method is equivalent to <code>parse(Style.GENERIC_LOCATION, text, pos, EnumSet.of(ParseOption.ALL_STYLES), timeType)</code>
 .
 @param text the text contains a time zone string at the position.
 @param pos the position.
 @return A <code>TimeZone</code>, or null if the input could not be parsed.
 - seealso: #parse(Style, String, ParsePosition, EnumSet, Output)
 */
- (AndroidIcuUtilTimeZone *)parseWithNSString:(NSString *)text
                    withJavaTextParsePosition:(JavaTextParsePosition *)pos;

/*!
 @brief Returns a <code>TimeZone</code> by parsing the time zone string according to
  the parse position, the style and the parse options.
 @param text the text contains a time zone string at the position.
 @param style the format style.
 @param pos the position.
 @param options the parse options.
 @param timeType The output argument for receiving the time type (standard/daylight/unknown),  or specify null if the information is not necessary.
 @return A <code>TimeZone</code>, or null if the input could not be parsed.
 - seealso: Style
 - seealso: #format(Style, TimeZone, long, Output)
 */
- (AndroidIcuUtilTimeZone *)parseWithAndroidIcuTextTimeZoneFormat_Style:(AndroidIcuTextTimeZoneFormat_Style *)style
                                                           withNSString:(NSString *)text
                                              withJavaTextParsePosition:(JavaTextParsePosition *)pos
                                                    withJavaUtilEnumSet:(JavaUtilEnumSet *)options
                                               withAndroidIcuUtilOutput:(AndroidIcuUtilOutput *)timeType;

/*!
 @brief Returns a <code>TimeZone</code> by parsing the time zone string according to
  the parse position, the style and the default parse options.
 <p>
  <b>Note</b>: This method is equivalent to <code>parse(style, text, pos, null, timeType)</code>
 .
 @param text the text contains a time zone string at the position.
 @param style the format style
 @param pos the position.
 @param timeType The output argument for receiving the time type (standard/daylight/unknown),  or specify null if the information is not necessary.
 @return A <code>TimeZone</code>, or null if the input could not be parsed.
 - seealso: Style
 - seealso: #parse(Style, String, ParsePosition, EnumSet, Output)
 - seealso: #format(Style, TimeZone, long, Output)
 - seealso: #setDefaultParseOptions(EnumSet)
 */
- (AndroidIcuUtilTimeZone *)parseWithAndroidIcuTextTimeZoneFormat_Style:(AndroidIcuTextTimeZoneFormat_Style *)style
                                                           withNSString:(NSString *)text
                                              withJavaTextParsePosition:(JavaTextParsePosition *)pos
                                               withAndroidIcuUtilOutput:(AndroidIcuUtilOutput *)timeType;

/*!
 */
- (id)parseObjectWithNSString:(NSString *)source
    withJavaTextParsePosition:(JavaTextParsePosition *)pos;

/*!
 @brief Returns offset from GMT(UTC) in milliseconds for the given ISO 8601
  basic or extended time zone string.When the given string is not an ISO 8601 time
  zone string, this method sets the current position as the error index
  to <code>ParsePosition pos</code> and returns 0.
 @param text the text contains ISO 8601 style time zone string (e.g. "-08", "-0800", "-08:00", and "Z")  at the position.
 @param pos the position.
 @return the offset from GMT(UTC) in milliseconds for the given ISO 8601 style
  time zone string.
 - seealso: #formatOffsetISO8601Basic(int, boolean, boolean, boolean)
 - seealso: #formatOffsetISO8601Extended(int, boolean, boolean, boolean)
 */
- (jint)parseOffsetISO8601WithNSString:(NSString *)text
             withJavaTextParsePosition:(JavaTextParsePosition *)pos;

/*!
 @brief Returns offset from GMT(UTC) in milliseconds for the given localized GMT
  offset format string.When the given string cannot be parsed, this method
  sets the current position as the error index to <code>ParsePosition pos</code>
  and returns 0.
 @param text the text contains a localized GMT offset string at the position.
 @param pos the position.
 @return the offset from GMT(UTC) in milliseconds for the given localized GMT
  offset format string.
 - seealso: #formatOffsetLocalizedGMT(int)
 */
- (jint)parseOffsetLocalizedGMTWithNSString:(NSString *)text
                  withJavaTextParsePosition:(JavaTextParsePosition *)pos;

/*!
 @brief Returns offset from GMT(UTC) in milliseconds for the given short localized GMT
  offset format string.When the given string cannot be parsed, this method
  sets the current position as the error index to <code>ParsePosition pos</code>
  and returns 0.
 @param text the text contains a short localized GMT offset string at the position.
 @param pos the position.
 @return the offset from GMT(UTC) in milliseconds for the given short localized GMT
  offset format string.
 - seealso: #formatOffsetShortLocalizedGMT(int)
 */
- (jint)parseOffsetShortLocalizedGMTWithNSString:(NSString *)text
                       withJavaTextParsePosition:(JavaTextParsePosition *)pos;

/*!
 @brief Sets the default parse options.
 <p>
  <b>Note:</b> By default, an instance of <code>TimeZoneFormat</code>
  created by <code>getInstance(ULocale)</code> has no parse options set.
 @param options the default parse options.
 @return this object.
 - seealso: ParseOption
 */
- (AndroidIcuTextTimeZoneFormat *)setDefaultParseOptionsWithJavaUtilEnumSet:(JavaUtilEnumSet *)options;

/*!
 @brief Sets the decimal digit characters used for localized GMT format.
 @param digits a string contains the decimal digit characters from 0 to 9 n the ascending order.
 @return this object.
 @throw IllegalArgumentExceptionwhen the string did not contain ten characters.
 @throw UnsupportedOperationExceptionwhen this object is frozen.
 - seealso: #getGMTOffsetDigits()
 */
- (AndroidIcuTextTimeZoneFormat *)setGMTOffsetDigitsWithNSString:(NSString *)digits;

/*!
 @brief Sets the offset pattern for the given offset type.
 @param type the offset pattern.
 @param pattern the pattern string.
 @return this object.
 @throw IllegalArgumentExceptionwhen the pattern string does not have required time field letters.
 @throw UnsupportedOperationExceptionwhen this object is frozen.
 - seealso: #getGMTOffsetPattern(GMTOffsetPatternType)
 */
- (AndroidIcuTextTimeZoneFormat *)setGMTOffsetPatternWithAndroidIcuTextTimeZoneFormat_GMTOffsetPatternType:(AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType *)type
                                                                                              withNSString:(NSString *)pattern;

/*!
 @brief Sets the localized GMT format pattern.The pattern must contain
  a single argument {0}, for example "GMT {0}".
 @param pattern the localized GMT format pattern string
 @return this object.
 @throw IllegalArgumentExceptionwhen the pattern string does not contain "{0}"
 @throw UnsupportedOperationExceptionwhen this object is frozen.
 - seealso: #getGMTPattern()
 */
- (AndroidIcuTextTimeZoneFormat *)setGMTPatternWithNSString:(NSString *)pattern;

/*!
 @brief Sets the localized GMT format string for GMT(UTC) itself (GMT offset is 0).
 @param gmtZeroFormat the localized GMT format string for GMT(UTC).
 @return this object.
 @throw UnsupportedOperationExceptionwhen this object is frozen.
 - seealso: #getGMTZeroFormat()
 */
- (AndroidIcuTextTimeZoneFormat *)setGMTZeroFormatWithNSString:(NSString *)gmtZeroFormat;

/*!
 @brief Sets the time zone display name data to this instance.
 @param tznames the time zone display name data.
 @return this object.
 @throw UnsupportedOperationExceptionwhen this object is frozen.
 - seealso: #getTimeZoneNames()
 */
- (AndroidIcuTextTimeZoneFormat *)setTimeZoneNamesWithAndroidIcuTextTimeZoneNames:(AndroidIcuTextTimeZoneNames *)tznames;

#pragma mark Protected

/*!
 @brief The protected constructor for subclassing.
 @param locale the locale
 */
- (instancetype __nonnull)initWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(AndroidIcuTextTimeZoneFormat)

FOUNDATION_EXPORT void AndroidIcuTextTimeZoneFormat_initWithAndroidIcuUtilULocale_(AndroidIcuTextTimeZoneFormat *self, AndroidIcuUtilULocale *locale);

FOUNDATION_EXPORT AndroidIcuTextTimeZoneFormat *new_AndroidIcuTextTimeZoneFormat_initWithAndroidIcuUtilULocale_(AndroidIcuUtilULocale *locale) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidIcuTextTimeZoneFormat *create_AndroidIcuTextTimeZoneFormat_initWithAndroidIcuUtilULocale_(AndroidIcuUtilULocale *locale);

FOUNDATION_EXPORT AndroidIcuTextTimeZoneFormat *AndroidIcuTextTimeZoneFormat_getInstanceWithAndroidIcuUtilULocale_(AndroidIcuUtilULocale *locale);

FOUNDATION_EXPORT AndroidIcuTextTimeZoneFormat *AndroidIcuTextTimeZoneFormat_getInstanceWithJavaUtilLocale_(JavaUtilLocale *locale);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuTextTimeZoneFormat)

#endif

#if !defined (AndroidIcuTextTimeZoneFormat_Style_) && (INCLUDE_ALL_AndroidIcuTextTimeZoneFormat || defined(INCLUDE_AndroidIcuTextTimeZoneFormat_Style))
#define AndroidIcuTextTimeZoneFormat_Style_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, AndroidIcuTextTimeZoneFormat_Style_Enum) {
  AndroidIcuTextTimeZoneFormat_Style_Enum_GENERIC_LOCATION = 0,
  AndroidIcuTextTimeZoneFormat_Style_Enum_GENERIC_LONG = 1,
  AndroidIcuTextTimeZoneFormat_Style_Enum_GENERIC_SHORT = 2,
  AndroidIcuTextTimeZoneFormat_Style_Enum_SPECIFIC_LONG = 3,
  AndroidIcuTextTimeZoneFormat_Style_Enum_SPECIFIC_SHORT = 4,
  AndroidIcuTextTimeZoneFormat_Style_Enum_LOCALIZED_GMT = 5,
  AndroidIcuTextTimeZoneFormat_Style_Enum_LOCALIZED_GMT_SHORT = 6,
  AndroidIcuTextTimeZoneFormat_Style_Enum_ISO_BASIC_SHORT = 7,
  AndroidIcuTextTimeZoneFormat_Style_Enum_ISO_BASIC_LOCAL_SHORT = 8,
  AndroidIcuTextTimeZoneFormat_Style_Enum_ISO_BASIC_FIXED = 9,
  AndroidIcuTextTimeZoneFormat_Style_Enum_ISO_BASIC_LOCAL_FIXED = 10,
  AndroidIcuTextTimeZoneFormat_Style_Enum_ISO_BASIC_FULL = 11,
  AndroidIcuTextTimeZoneFormat_Style_Enum_ISO_BASIC_LOCAL_FULL = 12,
  AndroidIcuTextTimeZoneFormat_Style_Enum_ISO_EXTENDED_FIXED = 13,
  AndroidIcuTextTimeZoneFormat_Style_Enum_ISO_EXTENDED_LOCAL_FIXED = 14,
  AndroidIcuTextTimeZoneFormat_Style_Enum_ISO_EXTENDED_FULL = 15,
  AndroidIcuTextTimeZoneFormat_Style_Enum_ISO_EXTENDED_LOCAL_FULL = 16,
  AndroidIcuTextTimeZoneFormat_Style_Enum_ZONE_ID = 17,
  AndroidIcuTextTimeZoneFormat_Style_Enum_ZONE_ID_SHORT = 18,
  AndroidIcuTextTimeZoneFormat_Style_Enum_EXEMPLAR_LOCATION = 19,
};

/*!
 @brief Time zone display format style enum used by format/parse APIs in <code>TimeZoneFormat</code>.
 - seealso: TimeZoneFormat#format(Style, TimeZone, long)
 - seealso: TimeZoneFormat#format(Style, TimeZone, long, Output)
 - seealso: TimeZoneFormat#parse(Style, String, ParsePosition, Output)
 */
@interface AndroidIcuTextTimeZoneFormat_Style : JavaLangEnum {
 @public
  jint flag_;
}

@property (readonly, class, nonnull) AndroidIcuTextTimeZoneFormat_Style *GENERIC_LOCATION NS_SWIFT_NAME(GENERIC_LOCATION);
@property (readonly, class, nonnull) AndroidIcuTextTimeZoneFormat_Style *GENERIC_LONG NS_SWIFT_NAME(GENERIC_LONG);
@property (readonly, class, nonnull) AndroidIcuTextTimeZoneFormat_Style *GENERIC_SHORT NS_SWIFT_NAME(GENERIC_SHORT);
@property (readonly, class, nonnull) AndroidIcuTextTimeZoneFormat_Style *SPECIFIC_LONG NS_SWIFT_NAME(SPECIFIC_LONG);
@property (readonly, class, nonnull) AndroidIcuTextTimeZoneFormat_Style *SPECIFIC_SHORT NS_SWIFT_NAME(SPECIFIC_SHORT);
@property (readonly, class, nonnull) AndroidIcuTextTimeZoneFormat_Style *LOCALIZED_GMT NS_SWIFT_NAME(LOCALIZED_GMT);
@property (readonly, class, nonnull) AndroidIcuTextTimeZoneFormat_Style *LOCALIZED_GMT_SHORT NS_SWIFT_NAME(LOCALIZED_GMT_SHORT);
@property (readonly, class, nonnull) AndroidIcuTextTimeZoneFormat_Style *ISO_BASIC_SHORT NS_SWIFT_NAME(ISO_BASIC_SHORT);
@property (readonly, class, nonnull) AndroidIcuTextTimeZoneFormat_Style *ISO_BASIC_LOCAL_SHORT NS_SWIFT_NAME(ISO_BASIC_LOCAL_SHORT);
@property (readonly, class, nonnull) AndroidIcuTextTimeZoneFormat_Style *ISO_BASIC_FIXED NS_SWIFT_NAME(ISO_BASIC_FIXED);
@property (readonly, class, nonnull) AndroidIcuTextTimeZoneFormat_Style *ISO_BASIC_LOCAL_FIXED NS_SWIFT_NAME(ISO_BASIC_LOCAL_FIXED);
@property (readonly, class, nonnull) AndroidIcuTextTimeZoneFormat_Style *ISO_BASIC_FULL NS_SWIFT_NAME(ISO_BASIC_FULL);
@property (readonly, class, nonnull) AndroidIcuTextTimeZoneFormat_Style *ISO_BASIC_LOCAL_FULL NS_SWIFT_NAME(ISO_BASIC_LOCAL_FULL);
@property (readonly, class, nonnull) AndroidIcuTextTimeZoneFormat_Style *ISO_EXTENDED_FIXED NS_SWIFT_NAME(ISO_EXTENDED_FIXED);
@property (readonly, class, nonnull) AndroidIcuTextTimeZoneFormat_Style *ISO_EXTENDED_LOCAL_FIXED NS_SWIFT_NAME(ISO_EXTENDED_LOCAL_FIXED);
@property (readonly, class, nonnull) AndroidIcuTextTimeZoneFormat_Style *ISO_EXTENDED_FULL NS_SWIFT_NAME(ISO_EXTENDED_FULL);
@property (readonly, class, nonnull) AndroidIcuTextTimeZoneFormat_Style *ISO_EXTENDED_LOCAL_FULL NS_SWIFT_NAME(ISO_EXTENDED_LOCAL_FULL);
@property (readonly, class, nonnull) AndroidIcuTextTimeZoneFormat_Style *ZONE_ID NS_SWIFT_NAME(ZONE_ID);
@property (readonly, class, nonnull) AndroidIcuTextTimeZoneFormat_Style *ZONE_ID_SHORT NS_SWIFT_NAME(ZONE_ID_SHORT);
@property (readonly, class, nonnull) AndroidIcuTextTimeZoneFormat_Style *EXEMPLAR_LOCATION NS_SWIFT_NAME(EXEMPLAR_LOCATION);
+ (AndroidIcuTextTimeZoneFormat_Style * __nonnull)GENERIC_LOCATION;

+ (AndroidIcuTextTimeZoneFormat_Style * __nonnull)GENERIC_LONG;

+ (AndroidIcuTextTimeZoneFormat_Style * __nonnull)GENERIC_SHORT;

+ (AndroidIcuTextTimeZoneFormat_Style * __nonnull)SPECIFIC_LONG;

+ (AndroidIcuTextTimeZoneFormat_Style * __nonnull)SPECIFIC_SHORT;

+ (AndroidIcuTextTimeZoneFormat_Style * __nonnull)LOCALIZED_GMT;

+ (AndroidIcuTextTimeZoneFormat_Style * __nonnull)LOCALIZED_GMT_SHORT;

+ (AndroidIcuTextTimeZoneFormat_Style * __nonnull)ISO_BASIC_SHORT;

+ (AndroidIcuTextTimeZoneFormat_Style * __nonnull)ISO_BASIC_LOCAL_SHORT;

+ (AndroidIcuTextTimeZoneFormat_Style * __nonnull)ISO_BASIC_FIXED;

+ (AndroidIcuTextTimeZoneFormat_Style * __nonnull)ISO_BASIC_LOCAL_FIXED;

+ (AndroidIcuTextTimeZoneFormat_Style * __nonnull)ISO_BASIC_FULL;

+ (AndroidIcuTextTimeZoneFormat_Style * __nonnull)ISO_BASIC_LOCAL_FULL;

+ (AndroidIcuTextTimeZoneFormat_Style * __nonnull)ISO_EXTENDED_FIXED;

+ (AndroidIcuTextTimeZoneFormat_Style * __nonnull)ISO_EXTENDED_LOCAL_FIXED;

+ (AndroidIcuTextTimeZoneFormat_Style * __nonnull)ISO_EXTENDED_FULL;

+ (AndroidIcuTextTimeZoneFormat_Style * __nonnull)ISO_EXTENDED_LOCAL_FULL;

+ (AndroidIcuTextTimeZoneFormat_Style * __nonnull)ZONE_ID;

+ (AndroidIcuTextTimeZoneFormat_Style * __nonnull)ZONE_ID_SHORT;

+ (AndroidIcuTextTimeZoneFormat_Style * __nonnull)EXEMPLAR_LOCATION;

#pragma mark Public

+ (AndroidIcuTextTimeZoneFormat_Style *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (AndroidIcuTextTimeZoneFormat_Style_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(AndroidIcuTextTimeZoneFormat_Style)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT AndroidIcuTextTimeZoneFormat_Style *AndroidIcuTextTimeZoneFormat_Style_values_[];

/*!
 @brief Generic location format, such as "United States Time (New York)" and "Italy Time".
 This style is equivalent to the LDML date format pattern "VVVV".
 */
inline AndroidIcuTextTimeZoneFormat_Style *AndroidIcuTextTimeZoneFormat_Style_get_GENERIC_LOCATION(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextTimeZoneFormat_Style, GENERIC_LOCATION)

/*!
 @brief Generic long non-location format, such as "Eastern Time".
 This style is equivalent to the LDML date format pattern "vvvv".
 */
inline AndroidIcuTextTimeZoneFormat_Style *AndroidIcuTextTimeZoneFormat_Style_get_GENERIC_LONG(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextTimeZoneFormat_Style, GENERIC_LONG)

/*!
 @brief Generic short non-location format, such as "ET".
 This style is equivalent to the LDML date format pattern "v".
 */
inline AndroidIcuTextTimeZoneFormat_Style *AndroidIcuTextTimeZoneFormat_Style_get_GENERIC_SHORT(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextTimeZoneFormat_Style, GENERIC_SHORT)

/*!
 @brief Specific long format, such as "Eastern Standard Time".
 This style is equivalent to the LDML date format pattern "zzzz".
 */
inline AndroidIcuTextTimeZoneFormat_Style *AndroidIcuTextTimeZoneFormat_Style_get_SPECIFIC_LONG(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextTimeZoneFormat_Style, SPECIFIC_LONG)

/*!
 @brief Specific short format, such as "EST", "PDT".
 This style is equivalent to the LDML date format pattern "z".
 */
inline AndroidIcuTextTimeZoneFormat_Style *AndroidIcuTextTimeZoneFormat_Style_get_SPECIFIC_SHORT(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextTimeZoneFormat_Style, SPECIFIC_SHORT)

/*!
 @brief Localized GMT offset format, such as "GMT-05:00", "UTC+0100"
  This style is equivalent to the LDML date format pattern "OOOO" and "ZZZZ"
 */
inline AndroidIcuTextTimeZoneFormat_Style *AndroidIcuTextTimeZoneFormat_Style_get_LOCALIZED_GMT(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextTimeZoneFormat_Style, LOCALIZED_GMT)

/*!
 @brief Short localized GMT offset format, such as "GMT-5", "UTC+1:30"
  This style is equivalent to the LDML date format pattern "O".
 */
inline AndroidIcuTextTimeZoneFormat_Style *AndroidIcuTextTimeZoneFormat_Style_get_LOCALIZED_GMT_SHORT(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextTimeZoneFormat_Style, LOCALIZED_GMT_SHORT)

/*!
 @brief Short ISO 8601 local time difference (basic format) or the UTC indicator.
 For example, "-05", "+0530", and "Z"(UTC).
  This style is equivalent to the LDML date format pattern "X".
 */
inline AndroidIcuTextTimeZoneFormat_Style *AndroidIcuTextTimeZoneFormat_Style_get_ISO_BASIC_SHORT(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextTimeZoneFormat_Style, ISO_BASIC_SHORT)

/*!
 @brief Short ISO 8601 locale time difference (basic format).
 For example, "-05" and "+0530".
  This style is equivalent to the LDML date format pattern "x".
 */
inline AndroidIcuTextTimeZoneFormat_Style *AndroidIcuTextTimeZoneFormat_Style_get_ISO_BASIC_LOCAL_SHORT(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextTimeZoneFormat_Style, ISO_BASIC_LOCAL_SHORT)

/*!
 @brief Fixed width ISO 8601 local time difference (basic format) or the UTC indicator.
 For example, "-0500", "+0530", and "Z"(UTC).
  This style is equivalent to the LDML date format pattern "XX".
 */
inline AndroidIcuTextTimeZoneFormat_Style *AndroidIcuTextTimeZoneFormat_Style_get_ISO_BASIC_FIXED(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextTimeZoneFormat_Style, ISO_BASIC_FIXED)

/*!
 @brief Fixed width ISO 8601 local time difference (basic format).
 For example, "-0500" and "+0530".
  This style is equivalent to the LDML date format pattern "xx".
 */
inline AndroidIcuTextTimeZoneFormat_Style *AndroidIcuTextTimeZoneFormat_Style_get_ISO_BASIC_LOCAL_FIXED(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextTimeZoneFormat_Style, ISO_BASIC_LOCAL_FIXED)

/*!
 @brief ISO 8601 local time difference (basic format) with optional seconds field, or the UTC indicator.
 For example, "-0500", "+052538", and "Z"(UTC).
  This style is equivalent to the LDML date format pattern "XXXX".
 */
inline AndroidIcuTextTimeZoneFormat_Style *AndroidIcuTextTimeZoneFormat_Style_get_ISO_BASIC_FULL(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextTimeZoneFormat_Style, ISO_BASIC_FULL)

/*!
 @brief ISO 8601 local time difference (basic format) with optional seconds field.
 For example, "-0500" and "+052538".
  This style is equivalent to the LDML date format pattern "xxxx".
 */
inline AndroidIcuTextTimeZoneFormat_Style *AndroidIcuTextTimeZoneFormat_Style_get_ISO_BASIC_LOCAL_FULL(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextTimeZoneFormat_Style, ISO_BASIC_LOCAL_FULL)

/*!
 @brief Fixed width ISO 8601 local time difference (extended format) or the UTC indicator.
 For example, "-05:00", "+05:30", and "Z"(UTC).
  This style is equivalent to the LDML date format pattern "XXX".
 */
inline AndroidIcuTextTimeZoneFormat_Style *AndroidIcuTextTimeZoneFormat_Style_get_ISO_EXTENDED_FIXED(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextTimeZoneFormat_Style, ISO_EXTENDED_FIXED)

/*!
 @brief Fixed width ISO 8601 local time difference (extended format).
 For example, "-05:00" and "+05:30".
  This style is equivalent to the LDML date format pattern "xxx" and "ZZZZZ".
 */
inline AndroidIcuTextTimeZoneFormat_Style *AndroidIcuTextTimeZoneFormat_Style_get_ISO_EXTENDED_LOCAL_FIXED(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextTimeZoneFormat_Style, ISO_EXTENDED_LOCAL_FIXED)

/*!
 @brief ISO 8601 local time difference (extended format) with optional seconds field, or the UTC indicator.
 For example, "-05:00", "+05:25:38", and "Z"(UTC).
  This style is equivalent to the LDML date format pattern "XXXXX".
 */
inline AndroidIcuTextTimeZoneFormat_Style *AndroidIcuTextTimeZoneFormat_Style_get_ISO_EXTENDED_FULL(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextTimeZoneFormat_Style, ISO_EXTENDED_FULL)

/*!
 @brief ISO 8601 local time difference (extended format) with optional seconds field.
 For example, "-05:00" and "+05:25:38".
  This style is equivalent to the LDML date format pattern "xxxxx".
 */
inline AndroidIcuTextTimeZoneFormat_Style *AndroidIcuTextTimeZoneFormat_Style_get_ISO_EXTENDED_LOCAL_FULL(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextTimeZoneFormat_Style, ISO_EXTENDED_LOCAL_FULL)

/*!
 @brief Time Zone ID, such as "America/Los_Angeles".
 */
inline AndroidIcuTextTimeZoneFormat_Style *AndroidIcuTextTimeZoneFormat_Style_get_ZONE_ID(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextTimeZoneFormat_Style, ZONE_ID)

/*!
 @brief Short Time Zone ID (BCP 47 Unicode location extension, time zone type value), such as "uslax".
 */
inline AndroidIcuTextTimeZoneFormat_Style *AndroidIcuTextTimeZoneFormat_Style_get_ZONE_ID_SHORT(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextTimeZoneFormat_Style, ZONE_ID_SHORT)

/*!
 @brief Exemplar location, such as "Los Angeles" and "Paris".
 */
inline AndroidIcuTextTimeZoneFormat_Style *AndroidIcuTextTimeZoneFormat_Style_get_EXEMPLAR_LOCATION(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextTimeZoneFormat_Style, EXEMPLAR_LOCATION)

FOUNDATION_EXPORT IOSObjectArray *AndroidIcuTextTimeZoneFormat_Style_values(void);

FOUNDATION_EXPORT AndroidIcuTextTimeZoneFormat_Style *AndroidIcuTextTimeZoneFormat_Style_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT AndroidIcuTextTimeZoneFormat_Style *AndroidIcuTextTimeZoneFormat_Style_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuTextTimeZoneFormat_Style)

#endif

#if !defined (AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType_) && (INCLUDE_ALL_AndroidIcuTextTimeZoneFormat || defined(INCLUDE_AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType))
#define AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType_Enum) {
  AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType_Enum_POSITIVE_HM = 0,
  AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType_Enum_POSITIVE_HMS = 1,
  AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType_Enum_NEGATIVE_HM = 2,
  AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType_Enum_NEGATIVE_HMS = 3,
  AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType_Enum_POSITIVE_H = 4,
  AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType_Enum_NEGATIVE_H = 5,
};

/*!
 @brief Offset pattern type enum.
 - seealso: TimeZoneFormat#getGMTOffsetPattern(GMTOffsetPatternType)
 - seealso: TimeZoneFormat#setGMTOffsetPattern(GMTOffsetPatternType, String)
 */
@interface AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType : JavaLangEnum

@property (readonly, class, nonnull) AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType *POSITIVE_HM NS_SWIFT_NAME(POSITIVE_HM);
@property (readonly, class, nonnull) AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType *POSITIVE_HMS NS_SWIFT_NAME(POSITIVE_HMS);
@property (readonly, class, nonnull) AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType *NEGATIVE_HM NS_SWIFT_NAME(NEGATIVE_HM);
@property (readonly, class, nonnull) AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType *NEGATIVE_HMS NS_SWIFT_NAME(NEGATIVE_HMS);
@property (readonly, class, nonnull) AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType *POSITIVE_H NS_SWIFT_NAME(POSITIVE_H);
@property (readonly, class, nonnull) AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType *NEGATIVE_H NS_SWIFT_NAME(NEGATIVE_H);
+ (AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType * __nonnull)POSITIVE_HM;

+ (AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType * __nonnull)POSITIVE_HMS;

+ (AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType * __nonnull)NEGATIVE_HM;

+ (AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType * __nonnull)NEGATIVE_HMS;

+ (AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType * __nonnull)POSITIVE_H;

+ (AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType * __nonnull)NEGATIVE_H;

#pragma mark Public

+ (AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType *AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType_values_[];

/*!
 @brief Positive offset with hours and minutes fields
 */
inline AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType *AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType_get_POSITIVE_HM(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType, POSITIVE_HM)

/*!
 @brief Positive offset with hours, minutes and seconds fields
 */
inline AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType *AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType_get_POSITIVE_HMS(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType, POSITIVE_HMS)

/*!
 @brief Negative offset with hours and minutes fields
 */
inline AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType *AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType_get_NEGATIVE_HM(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType, NEGATIVE_HM)

/*!
 @brief Negative offset with hours, minutes and seconds fields
 */
inline AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType *AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType_get_NEGATIVE_HMS(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType, NEGATIVE_HMS)

/*!
 @brief Positive offset with hours field
 */
inline AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType *AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType_get_POSITIVE_H(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType, POSITIVE_H)

/*!
 @brief Negative offset with hours field
 */
inline AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType *AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType_get_NEGATIVE_H(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType, NEGATIVE_H)

FOUNDATION_EXPORT IOSObjectArray *AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType_values(void);

FOUNDATION_EXPORT AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType *AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType *AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuTextTimeZoneFormat_GMTOffsetPatternType)

#endif

#if !defined (AndroidIcuTextTimeZoneFormat_TimeType_) && (INCLUDE_ALL_AndroidIcuTextTimeZoneFormat || defined(INCLUDE_AndroidIcuTextTimeZoneFormat_TimeType))
#define AndroidIcuTextTimeZoneFormat_TimeType_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, AndroidIcuTextTimeZoneFormat_TimeType_Enum) {
  AndroidIcuTextTimeZoneFormat_TimeType_Enum_UNKNOWN = 0,
  AndroidIcuTextTimeZoneFormat_TimeType_Enum_STANDARD = 1,
  AndroidIcuTextTimeZoneFormat_TimeType_Enum_DAYLIGHT = 2,
};

/*!
 @brief Time type enum used for receiving time type (standard time, daylight time or unknown)
  in <code>TimeZoneFormat</code> APIs.
 */
@interface AndroidIcuTextTimeZoneFormat_TimeType : JavaLangEnum

@property (readonly, class, nonnull) AndroidIcuTextTimeZoneFormat_TimeType *UNKNOWN NS_SWIFT_NAME(UNKNOWN);
@property (readonly, class, nonnull) AndroidIcuTextTimeZoneFormat_TimeType *STANDARD NS_SWIFT_NAME(STANDARD);
@property (readonly, class, nonnull) AndroidIcuTextTimeZoneFormat_TimeType *DAYLIGHT NS_SWIFT_NAME(DAYLIGHT);
+ (AndroidIcuTextTimeZoneFormat_TimeType * __nonnull)UNKNOWN;

+ (AndroidIcuTextTimeZoneFormat_TimeType * __nonnull)STANDARD;

+ (AndroidIcuTextTimeZoneFormat_TimeType * __nonnull)DAYLIGHT;

#pragma mark Public

+ (AndroidIcuTextTimeZoneFormat_TimeType *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (AndroidIcuTextTimeZoneFormat_TimeType_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(AndroidIcuTextTimeZoneFormat_TimeType)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT AndroidIcuTextTimeZoneFormat_TimeType *AndroidIcuTextTimeZoneFormat_TimeType_values_[];

/*!
 @brief Unknown
 */
inline AndroidIcuTextTimeZoneFormat_TimeType *AndroidIcuTextTimeZoneFormat_TimeType_get_UNKNOWN(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextTimeZoneFormat_TimeType, UNKNOWN)

/*!
 @brief Standard time
 */
inline AndroidIcuTextTimeZoneFormat_TimeType *AndroidIcuTextTimeZoneFormat_TimeType_get_STANDARD(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextTimeZoneFormat_TimeType, STANDARD)

/*!
 @brief Daylight saving time
 */
inline AndroidIcuTextTimeZoneFormat_TimeType *AndroidIcuTextTimeZoneFormat_TimeType_get_DAYLIGHT(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextTimeZoneFormat_TimeType, DAYLIGHT)

FOUNDATION_EXPORT IOSObjectArray *AndroidIcuTextTimeZoneFormat_TimeType_values(void);

FOUNDATION_EXPORT AndroidIcuTextTimeZoneFormat_TimeType *AndroidIcuTextTimeZoneFormat_TimeType_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT AndroidIcuTextTimeZoneFormat_TimeType *AndroidIcuTextTimeZoneFormat_TimeType_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuTextTimeZoneFormat_TimeType)

#endif

#if !defined (AndroidIcuTextTimeZoneFormat_ParseOption_) && (INCLUDE_ALL_AndroidIcuTextTimeZoneFormat || defined(INCLUDE_AndroidIcuTextTimeZoneFormat_ParseOption))
#define AndroidIcuTextTimeZoneFormat_ParseOption_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, AndroidIcuTextTimeZoneFormat_ParseOption_Enum) {
  AndroidIcuTextTimeZoneFormat_ParseOption_Enum_ALL_STYLES = 0,
  AndroidIcuTextTimeZoneFormat_ParseOption_Enum_TZ_DATABASE_ABBREVIATIONS = 1,
};

/*!
 @brief Parse option enum, used for specifying optional parse behavior.
 */
@interface AndroidIcuTextTimeZoneFormat_ParseOption : JavaLangEnum

@property (readonly, class, nonnull) AndroidIcuTextTimeZoneFormat_ParseOption *ALL_STYLES NS_SWIFT_NAME(ALL_STYLES);
@property (readonly, class, nonnull) AndroidIcuTextTimeZoneFormat_ParseOption *TZ_DATABASE_ABBREVIATIONS NS_SWIFT_NAME(TZ_DATABASE_ABBREVIATIONS);
+ (AndroidIcuTextTimeZoneFormat_ParseOption * __nonnull)ALL_STYLES;

+ (AndroidIcuTextTimeZoneFormat_ParseOption * __nonnull)TZ_DATABASE_ABBREVIATIONS;

#pragma mark Public

+ (AndroidIcuTextTimeZoneFormat_ParseOption *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (AndroidIcuTextTimeZoneFormat_ParseOption_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(AndroidIcuTextTimeZoneFormat_ParseOption)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT AndroidIcuTextTimeZoneFormat_ParseOption *AndroidIcuTextTimeZoneFormat_ParseOption_values_[];

/*!
 @brief When a time zone display name is not found within a set of display names
  used for the specified style, look for the name from display names used
  by other styles.
 */
inline AndroidIcuTextTimeZoneFormat_ParseOption *AndroidIcuTextTimeZoneFormat_ParseOption_get_ALL_STYLES(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextTimeZoneFormat_ParseOption, ALL_STYLES)

/*!
 @brief When parsing a time zone display name in <code>Style.SPECIFIC_SHORT</code>,
  look for the IANA tz database compatible zone abbreviations in addition
  to the localized names coming from the <code>TimeZoneNames</code> currently
  used by the <code>TimeZoneFormat</code>.
 */
inline AndroidIcuTextTimeZoneFormat_ParseOption *AndroidIcuTextTimeZoneFormat_ParseOption_get_TZ_DATABASE_ABBREVIATIONS(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextTimeZoneFormat_ParseOption, TZ_DATABASE_ABBREVIATIONS)

FOUNDATION_EXPORT IOSObjectArray *AndroidIcuTextTimeZoneFormat_ParseOption_values(void);

FOUNDATION_EXPORT AndroidIcuTextTimeZoneFormat_ParseOption *AndroidIcuTextTimeZoneFormat_ParseOption_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT AndroidIcuTextTimeZoneFormat_ParseOption *AndroidIcuTextTimeZoneFormat_ParseOption_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuTextTimeZoneFormat_ParseOption)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_AndroidIcuTextTimeZoneFormat")
