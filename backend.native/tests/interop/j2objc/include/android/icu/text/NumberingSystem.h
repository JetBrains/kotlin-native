//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/external/icu/android_icu4j/src/main/java/android/icu/text/NumberingSystem.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidIcuTextNumberingSystem")
#ifdef RESTRICT_AndroidIcuTextNumberingSystem
#define INCLUDE_ALL_AndroidIcuTextNumberingSystem 0
#else
#define INCLUDE_ALL_AndroidIcuTextNumberingSystem 1
#endif
#undef RESTRICT_AndroidIcuTextNumberingSystem

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (AndroidIcuTextNumberingSystem_) && (INCLUDE_ALL_AndroidIcuTextNumberingSystem || defined(INCLUDE_AndroidIcuTextNumberingSystem))
#define AndroidIcuTextNumberingSystem_

@class AndroidIcuTextNumberingSystem_LocaleLookupData;
@class AndroidIcuUtilULocale;
@class IOSObjectArray;
@class JavaUtilLocale;

/*!
 @brief <code>NumberingSystem</code> is the base class for all number
  systems.This class provides the interface for setting different numbering
  system types, whether it be a simple alternate digit system such as
  Thai digits or Devanagari digits, or an algorithmic numbering system such
  as Hebrew numbering or Chinese numbering.
 @author John Emmons
 */
@interface AndroidIcuTextNumberingSystem : NSObject

#pragma mark Public

/*!
 @brief Default constructor.Returns a numbering system that uses the Western decimal
  digits 0 through 9.
 */
- (instancetype __nonnull)init;

/*!
 @brief Returns a string array containing a list of the names of numbering systems
  currently known to ICU.
 */
+ (IOSObjectArray *)getAvailableNames;

/*!
 @brief Returns the description string of the current numbering system.
 The description string describes the characteristics of the numbering
  system.  For numeric systems, this string contains the digits used by the
  numbering system, in order, starting from zero.  For algorithmic numbering
  systems, the string contains the name of the RBNF ruleset in the locale's
  NumberingSystemRules section that will be used to format numbers using
  this numbering system.
 */
- (NSString *)getDescription;

/*!
 @brief Returns the default numbering system for the default <code>FORMAT</code> locale.
 - seealso: Category#FORMAT
 */
+ (AndroidIcuTextNumberingSystem *)getInstance;

/*!
 @brief Factory method for creating a numbering system.
 @param radix_in The radix for this numbering system.  ICU currently  supports only numbering systems whose radix is 10.
 @param isAlgorithmic_in Specifies whether the numbering system is algorithmic  (true) or numeric (false).
 @param desc_in String used to describe the characteristics of the numbering  system.  For numeric systems, this string contains the digits used by the
   numbering system, in order, starting from zero.  For algorithmic numbering
   systems, the string contains the name of the RBNF ruleset in the locale's
   NumberingSystemRules section that will be used to format numbers using
   this numbering system.
 */
+ (AndroidIcuTextNumberingSystem *)getInstanceWithInt:(jint)radix_in
                                          withBoolean:(jboolean)isAlgorithmic_in
                                         withNSString:(NSString *)desc_in;

/*!
 @brief Returns the default numbering system for the specified locale.
 */
+ (AndroidIcuTextNumberingSystem *)getInstanceWithJavaUtilLocale:(JavaUtilLocale *)inLocale;

/*!
 @brief Returns the default numbering system for the specified ULocale.
 */
+ (AndroidIcuTextNumberingSystem *)getInstanceWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale;

/*!
 @brief Returns a numbering system from one of the predefined numbering systems
  known to ICU.Numbering system names are based on the numbering systems
  defined in CLDR.
 To get a list of available numbering systems, use the
  getAvailableNames method.
 @param name The name of the desired numbering system.  Numbering system  names often correspond with the name of the script they are associated
   with.  For example, "thai" for Thai digits, "hebr" for Hebrew numerals.
 */
+ (AndroidIcuTextNumberingSystem *)getInstanceByNameWithNSString:(NSString *)name;

/*!
 @brief Returns the string representing the name of the numbering system.
 */
- (NSString *)getName;

/*!
 @brief Returns the radix of the current numbering system.
 */
- (jint)getRadix;

/*!
 @brief Returns the numbering system's algorithmic status.If true,
  the numbering system is algorithmic and uses an RBNF formatter to
  format numerals.
 If false, the numbering system is numeric and
  uses a fixed set of digits.
 */
- (jboolean)isAlgorithmic;

/*!
 @brief Convenience method to determine if a given digit string is valid for use as a
  descriptor of a numeric ( non-algorithmic ) numbering system.In order for
  a digit string to be valid, it must contain exactly ten Unicode code points.
 */
+ (jboolean)isValidDigitStringWithNSString:(NSString *)str;

#pragma mark Package-Private

+ (AndroidIcuTextNumberingSystem *)lookupInstanceByLocaleWithAndroidIcuTextNumberingSystem_LocaleLookupData:(AndroidIcuTextNumberingSystem_LocaleLookupData *)localeLookupData;

@end

J2OBJC_STATIC_INIT(AndroidIcuTextNumberingSystem)

FOUNDATION_EXPORT void AndroidIcuTextNumberingSystem_init(AndroidIcuTextNumberingSystem *self);

FOUNDATION_EXPORT AndroidIcuTextNumberingSystem *new_AndroidIcuTextNumberingSystem_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidIcuTextNumberingSystem *create_AndroidIcuTextNumberingSystem_init(void);

FOUNDATION_EXPORT AndroidIcuTextNumberingSystem *AndroidIcuTextNumberingSystem_getInstanceWithInt_withBoolean_withNSString_(jint radix_in, jboolean isAlgorithmic_in, NSString *desc_in);

FOUNDATION_EXPORT AndroidIcuTextNumberingSystem *AndroidIcuTextNumberingSystem_getInstanceWithJavaUtilLocale_(JavaUtilLocale *inLocale);

FOUNDATION_EXPORT AndroidIcuTextNumberingSystem *AndroidIcuTextNumberingSystem_getInstanceWithAndroidIcuUtilULocale_(AndroidIcuUtilULocale *locale);

FOUNDATION_EXPORT AndroidIcuTextNumberingSystem *AndroidIcuTextNumberingSystem_lookupInstanceByLocaleWithAndroidIcuTextNumberingSystem_LocaleLookupData_(AndroidIcuTextNumberingSystem_LocaleLookupData *localeLookupData);

FOUNDATION_EXPORT AndroidIcuTextNumberingSystem *AndroidIcuTextNumberingSystem_getInstance(void);

FOUNDATION_EXPORT AndroidIcuTextNumberingSystem *AndroidIcuTextNumberingSystem_getInstanceByNameWithNSString_(NSString *name);

FOUNDATION_EXPORT IOSObjectArray *AndroidIcuTextNumberingSystem_getAvailableNames(void);

FOUNDATION_EXPORT jboolean AndroidIcuTextNumberingSystem_isValidDigitStringWithNSString_(NSString *str);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuTextNumberingSystem)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_AndroidIcuTextNumberingSystem")
