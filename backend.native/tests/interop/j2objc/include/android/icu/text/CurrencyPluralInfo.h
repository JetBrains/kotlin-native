//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/external/icu/android_icu4j/src/main/java/android/icu/text/CurrencyPluralInfo.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidIcuTextCurrencyPluralInfo")
#ifdef RESTRICT_AndroidIcuTextCurrencyPluralInfo
#define INCLUDE_ALL_AndroidIcuTextCurrencyPluralInfo 0
#else
#define INCLUDE_ALL_AndroidIcuTextCurrencyPluralInfo 1
#endif
#undef RESTRICT_AndroidIcuTextCurrencyPluralInfo

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (AndroidIcuTextCurrencyPluralInfo_) && (INCLUDE_ALL_AndroidIcuTextCurrencyPluralInfo || defined(INCLUDE_AndroidIcuTextCurrencyPluralInfo))
#define AndroidIcuTextCurrencyPluralInfo_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class AndroidIcuTextPluralRules;
@class AndroidIcuTextPluralRules_FixedDecimal;
@class AndroidIcuUtilULocale;
@class JavaUtilLocale;
@protocol JavaUtilIterator;

/*!
 @brief This class represents the information needed by
  DecimalFormat to format currency plural,
  such as "3.00 US dollars" or "1.00 US dollar".
 DecimalFormat creates for itself an instance of
  CurrencyPluralInfo from its locale data.
  If you need to change any of these symbols, you can get the
  CurrencyPluralInfo object from your
  DecimalFormat and modify it.
  Following are the information needed for currency plural format and parse:
  locale information,
  plural rule of the locale,
  currency plural pattern of the locale.
 */
@interface AndroidIcuTextCurrencyPluralInfo : NSObject < NSCopying, JavaIoSerializable >

#pragma mark Public

/*!
 @brief Create a CurrencyPluralInfo object for the default <code>FORMAT</code> locale.
 - seealso: Category#FORMAT
 */
- (instancetype __nonnull)init;

/*!
 @brief Create a CurrencyPluralInfo object for the given locale.
 @param locale the locale
 */
- (instancetype __nonnull)initWithJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Create a CurrencyPluralInfo object for the given locale.
 @param locale the locale
 */
- (instancetype __nonnull)initWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale;

/*!
 @brief Standard override
 */
- (id)java_clone;

/*!
 @brief Override equals
 */
- (jboolean)isEqual:(id)a;

/*!
 @brief Given a plural count, gets currency plural pattern of this locale,
  used for currency plural format
 @param pluralCount currency plural count
 @return a currency plural pattern based on plural count
 */
- (NSString *)getCurrencyPluralPatternWithNSString:(NSString *)pluralCount;

/*!
 @brief Gets a CurrencyPluralInfo instance for the default locale.
 @return A CurrencyPluralInfo instance.
 */
+ (AndroidIcuTextCurrencyPluralInfo *)getInstance;

/*!
 @brief Gets a CurrencyPluralInfo instance for the given locale.
 @param locale the locale.
 @return A CurrencyPluralInfo instance.
 */
+ (AndroidIcuTextCurrencyPluralInfo *)getInstanceWithJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Gets a CurrencyPluralInfo instance for the given locale.
 @param locale the locale.
 @return A CurrencyPluralInfo instance.
 */
+ (AndroidIcuTextCurrencyPluralInfo *)getInstanceWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale;

/*!
 @brief Get locale
 @return locale
 */
- (AndroidIcuUtilULocale *)getLocale;

/*!
 @brief Gets plural rules of this locale, used for currency plural format
 @return plural rule
 */
- (AndroidIcuTextPluralRules *)getPluralRules;

/*!
 @brief Mock implementation of hashCode().This implementation always returns a constant
  value.
 When Java assertion is enabled, this method triggers an assertion failure.
 */
- (NSUInteger)hash __attribute__((deprecated));

/*!
 @brief Set currency plural patterns.These are initially set in the constructor based on the
  locale, and usually do not need to be changed.
 @param pluralCount the plural count for which the currency pattern will                     be overridden.
 @param pattern the new currency plural pattern
 */
- (void)setCurrencyPluralPatternWithNSString:(NSString *)pluralCount
                                withNSString:(NSString *)pattern;

/*!
 @brief Set locale.This also sets both the plural rules and the currency plural patterns to be
  the defaults for the locale.
 @param loc the new locale to set
 */
- (void)setLocaleWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)loc;

/*!
 @brief Set plural rules.These are initially set in the constructor based on the locale, 
  and usually do not need to be changed.
 @param ruleDescription new plural rule description
 */
- (void)setPluralRulesWithNSString:(NSString *)ruleDescription;

#pragma mark Package-Private

/*!
 @brief Currency plural pattern iterator.
 @return a iterator on the currency plural pattern key set.
 */
- (id<JavaUtilIterator>)pluralPatternIterator;

/*!
 @brief Given a number, returns the keyword of the first rule that applies
  to the number.
 */
- (NSString *)selectWithDouble:(jdouble)number __attribute__((deprecated));

/*!
 @brief Given a number, returns the keyword of the first rule that applies
  to the number.
 */
- (NSString *)selectWithAndroidIcuTextPluralRules_FixedDecimal:(AndroidIcuTextPluralRules_FixedDecimal *)numberInfo __attribute__((deprecated));

@end

J2OBJC_STATIC_INIT(AndroidIcuTextCurrencyPluralInfo)

FOUNDATION_EXPORT void AndroidIcuTextCurrencyPluralInfo_init(AndroidIcuTextCurrencyPluralInfo *self);

FOUNDATION_EXPORT AndroidIcuTextCurrencyPluralInfo *new_AndroidIcuTextCurrencyPluralInfo_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidIcuTextCurrencyPluralInfo *create_AndroidIcuTextCurrencyPluralInfo_init(void);

FOUNDATION_EXPORT void AndroidIcuTextCurrencyPluralInfo_initWithJavaUtilLocale_(AndroidIcuTextCurrencyPluralInfo *self, JavaUtilLocale *locale);

FOUNDATION_EXPORT AndroidIcuTextCurrencyPluralInfo *new_AndroidIcuTextCurrencyPluralInfo_initWithJavaUtilLocale_(JavaUtilLocale *locale) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidIcuTextCurrencyPluralInfo *create_AndroidIcuTextCurrencyPluralInfo_initWithJavaUtilLocale_(JavaUtilLocale *locale);

FOUNDATION_EXPORT void AndroidIcuTextCurrencyPluralInfo_initWithAndroidIcuUtilULocale_(AndroidIcuTextCurrencyPluralInfo *self, AndroidIcuUtilULocale *locale);

FOUNDATION_EXPORT AndroidIcuTextCurrencyPluralInfo *new_AndroidIcuTextCurrencyPluralInfo_initWithAndroidIcuUtilULocale_(AndroidIcuUtilULocale *locale) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidIcuTextCurrencyPluralInfo *create_AndroidIcuTextCurrencyPluralInfo_initWithAndroidIcuUtilULocale_(AndroidIcuUtilULocale *locale);

FOUNDATION_EXPORT AndroidIcuTextCurrencyPluralInfo *AndroidIcuTextCurrencyPluralInfo_getInstance(void);

FOUNDATION_EXPORT AndroidIcuTextCurrencyPluralInfo *AndroidIcuTextCurrencyPluralInfo_getInstanceWithJavaUtilLocale_(JavaUtilLocale *locale);

FOUNDATION_EXPORT AndroidIcuTextCurrencyPluralInfo *AndroidIcuTextCurrencyPluralInfo_getInstanceWithAndroidIcuUtilULocale_(AndroidIcuUtilULocale *locale);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuTextCurrencyPluralInfo)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_AndroidIcuTextCurrencyPluralInfo")
