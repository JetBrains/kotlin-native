//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/external/icu/android_icu4j/src/main/java/android/icu/text/UnicodeSetIterator.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidIcuTextUnicodeSetIterator")
#ifdef RESTRICT_AndroidIcuTextUnicodeSetIterator
#define INCLUDE_ALL_AndroidIcuTextUnicodeSetIterator 0
#else
#define INCLUDE_ALL_AndroidIcuTextUnicodeSetIterator 1
#endif
#undef RESTRICT_AndroidIcuTextUnicodeSetIterator

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (AndroidIcuTextUnicodeSetIterator_) && (INCLUDE_ALL_AndroidIcuTextUnicodeSetIterator || defined(INCLUDE_AndroidIcuTextUnicodeSetIterator))
#define AndroidIcuTextUnicodeSetIterator_

@class AndroidIcuTextUnicodeSet;

/*!
 @brief UnicodeSetIterator iterates over the contents of a UnicodeSet.It
  iterates over either code points or code point ranges.
 After all
  code points or ranges have been returned, it returns the
  multicharacter strings of the UnicodSet, if any. 
 <p>To iterate over code points and multicharacter strings,
  use a loop like this: 
 @code

  for (UnicodeSetIterator it = new UnicodeSetIterator(set); it.next();) {
    processString(it.getString());
  } 
  
@endcode
  
 <p>To iterate over code point ranges, use a loop like this: 
 @code

  for (UnicodeSetIterator it = new UnicodeSetIterator(set); it.nextRange();) {
    if (it.codepoint != UnicodeSetIterator.IS_STRING) {
      processCodepointRange(it.codepoint, it.codepointEnd);
    } else {
      processString(it.getString());
    }  }  
  
@endcode
  <p><b>Warning: </b>For speed, UnicodeSet iteration does not check for concurrent modification. 
  Do not alter the UnicodeSet while iterating.
 @author M. Davis
 */
@interface AndroidIcuTextUnicodeSetIterator : NSObject {
 @public
  /*!
   @brief Current code point, or the special value <tt>IS_STRING</tt>, if
  the iterator points to a string.
   */
  jint codepoint_;
  /*!
   @brief When iterating over ranges using <tt>nextRange()</tt>,
  <tt>codepointEnd</tt> contains the inclusive end of the
  iteration range, if <tt>codepoint !
   = IS_STRING</tt>.If
  iterating over code points using <tt>next()</tt>, or if 
 <tt>codepoint == IS_STRING</tt>, then the value of 
 <tt>codepointEnd</tt> is undefined.
   */
  jint codepointEnd_;
  /*!
   @brief If <tt>codepoint == IS_STRING</tt>, then <tt>string</tt> points
  to the current string.If <tt>codepoint !
   = IS_STRING</tt>, the
  value of <tt>string</tt> is undefined.
   */
  NSString *string_;
  /*!
   */
  jint endElement_;
  /*!
   */
  jint nextElement_;
}
@property (class) jint IS_STRING NS_SWIFT_NAME(IS_STRING);

+ (jint)IS_STRING;

+ (void)setIS_STRING:(jint)value;

#pragma mark Public

/*!
 @brief Create an iterator over nothing.
 <tt>next()</tt> and 
 <tt>nextRange()</tt> return false. This is a convenience
  constructor allowing the target to be set later.
 */
- (instancetype __nonnull)init;

/*!
 @brief Create an iterator over the given set.
 @param set set to iterate over
 */
- (instancetype __nonnull)initWithAndroidIcuTextUnicodeSet:(AndroidIcuTextUnicodeSet *)set;

/*!
 */
- (AndroidIcuTextUnicodeSet *)getSet __attribute__((deprecated));

/*!
 @brief Gets the current string from the iterator.Only use after calling next(), not nextRange().
 */
- (NSString *)getString;

/*!
 @brief Returns the next element in the set, either a single code point
  or a string.If there are no more elements in the set, return
  false.
 If <tt>codepoint == IS_STRING</tt>, the value is a
  string in the <tt>string</tt> field.  Otherwise the value is a
  single code point in the <tt>codepoint</tt> field.  
 <p>The order of iteration is all code points in sorted order,
  followed by all strings sorted order.  <tt>codepointEnd</tt> is
  undefined after calling this method.  <tt>string</tt> is
  undefined unless <tt>codepoint == IS_STRING</tt>.  Do not mix
  calls to <tt>next()</tt> and <tt>nextRange()</tt> without
  calling <tt>reset()</tt> between them.  The results of doing so
  are undefined. 
 <p><b>Warning: </b>For speed, UnicodeSet iteration does not check for concurrent modification. 
  Do not alter the UnicodeSet while iterating.
 @return true if there was another element in the set and this
  object contains the element.
 */
- (jboolean)next;

/*!
 @brief Returns the next element in the set, either a code point range
  or a string.If there are no more elements in the set, return
  false.
 If <tt>codepoint == IS_STRING</tt>, the value is a
  string in the <tt>string</tt> field.  Otherwise the value is a
  range of one or more code points from <tt>codepoint</tt> to 
 <tt>codepointeEnd</tt> inclusive.  
 <p>The order of iteration is all code points ranges in sorted
  order, followed by all strings sorted order.  Ranges are
  disjoint and non-contiguous.  <tt>string</tt> is undefined
  unless <tt>codepoint == IS_STRING</tt>.  Do not mix calls to 
 <tt>next()</tt> and <tt>nextRange()</tt> without calling 
 <tt>reset()</tt> between them.  The results of doing so are
  undefined.
 @return true if there was another element in the set and this
  object contains the element.
 */
- (jboolean)nextRange;

/*!
 @brief Resets this iterator to the start of the set.
 */
- (void)reset;

/*!
 @brief Sets this iterator to visit the elements of the given set and
  resets it to the start of that set.The iterator is valid only
  so long as <tt>set</tt> is valid.
 @param uset the set to iterate over.
 */
- (void)resetWithAndroidIcuTextUnicodeSet:(AndroidIcuTextUnicodeSet *)uset;

#pragma mark Protected

/*!
 */
- (void)loadRangeWithInt:(jint)aRange __attribute__((deprecated));

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidIcuTextUnicodeSetIterator)

J2OBJC_FIELD_SETTER(AndroidIcuTextUnicodeSetIterator, string_, NSString *)

/*!
 @brief Value of <tt>codepoint</tt> if the iterator points to a string.
 If <tt>codepoint == IS_STRING</tt>, then examine 
 <tt>string</tt> for the current iteration result.
 */
inline jint AndroidIcuTextUnicodeSetIterator_get_IS_STRING(void);
inline jint AndroidIcuTextUnicodeSetIterator_set_IS_STRING(jint value);
inline jint *AndroidIcuTextUnicodeSetIterator_getRef_IS_STRING(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint AndroidIcuTextUnicodeSetIterator_IS_STRING;
J2OBJC_STATIC_FIELD_PRIMITIVE(AndroidIcuTextUnicodeSetIterator, IS_STRING, jint)

FOUNDATION_EXPORT void AndroidIcuTextUnicodeSetIterator_initWithAndroidIcuTextUnicodeSet_(AndroidIcuTextUnicodeSetIterator *self, AndroidIcuTextUnicodeSet *set);

FOUNDATION_EXPORT AndroidIcuTextUnicodeSetIterator *new_AndroidIcuTextUnicodeSetIterator_initWithAndroidIcuTextUnicodeSet_(AndroidIcuTextUnicodeSet *set) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidIcuTextUnicodeSetIterator *create_AndroidIcuTextUnicodeSetIterator_initWithAndroidIcuTextUnicodeSet_(AndroidIcuTextUnicodeSet *set);

FOUNDATION_EXPORT void AndroidIcuTextUnicodeSetIterator_init(AndroidIcuTextUnicodeSetIterator *self);

FOUNDATION_EXPORT AndroidIcuTextUnicodeSetIterator *new_AndroidIcuTextUnicodeSetIterator_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidIcuTextUnicodeSetIterator *create_AndroidIcuTextUnicodeSetIterator_init(void);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuTextUnicodeSetIterator)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_AndroidIcuTextUnicodeSetIterator")
