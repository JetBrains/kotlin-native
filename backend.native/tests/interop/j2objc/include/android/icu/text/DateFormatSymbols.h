//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/external/icu/android_icu4j/src/main/java/android/icu/text/DateFormatSymbols.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidIcuTextDateFormatSymbols")
#ifdef RESTRICT_AndroidIcuTextDateFormatSymbols
#define INCLUDE_ALL_AndroidIcuTextDateFormatSymbols 0
#else
#define INCLUDE_ALL_AndroidIcuTextDateFormatSymbols 1
#endif
#undef RESTRICT_AndroidIcuTextDateFormatSymbols

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (AndroidIcuTextDateFormatSymbols_) && (INCLUDE_ALL_AndroidIcuTextDateFormatSymbols || defined(INCLUDE_AndroidIcuTextDateFormatSymbols))
#define AndroidIcuTextDateFormatSymbols_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class AndroidIcuImplICUResourceBundle;
@class AndroidIcuUtilCalendar;
@class AndroidIcuUtilULocale;
@class AndroidIcuUtilULocale_Type;
@class IOSClass;
@class IOSObjectArray;
@class JavaUtilLocale;
@class JavaUtilResourceBundle;
@protocol JavaUtilMap;

/*!
 @brief <strong>[icu enhancement]</strong> ICU's replacement for <code>java.text.DateFormatSymbols</code>.
 &nbsp;Methods, fields, and other functionality specific to ICU are labeled '<strong>[icu]</strong>'.
 <p><code>DateFormatSymbols</code> is a public class for encapsulating
  localizable date-time formatting data, such as the names of the
  months, the names of the days of the week, and the time zone data. 
 <code>DateFormat</code> and <code>SimpleDateFormat</code> both use 
 <code>DateFormatSymbols</code> to encapsulate this information. 
 <p>Typically you shouldn't use <code>DateFormatSymbols</code> directly.
  Rather, you are encouraged to create a date-time formatter with the 
 <code>DateFormat</code> class's factory methods: <code>getTimeInstance</code>,
  <code>getDateInstance</code>, or <code>getDateTimeInstance</code>.
  These methods automatically create a <code>DateFormatSymbols</code> for
  the formatter so that you don't have to. After the
  formatter is created, you may modify its format pattern using the 
 <code>setPattern</code> method. For more information about
  creating formatters using <code>DateFormat</code>'s factory methods,
  see <code>DateFormat</code>.
  
 <p>If you decide to create a date-time formatter with a specific
  format pattern for a specific locale, you can do so with: 
 <blockquote>
  @code

  new SimpleDateFormat(aPattern, new DateFormatSymbols(aLocale)). 
  
@endcode
  </blockquote>
  
 <p><code>DateFormatSymbols</code> objects are clonable. When you obtain
  a <code>DateFormatSymbols</code> object, feel free to modify the
  date-time formatting data. For instance, you can replace the localized
  date-time format pattern characters with the ones that you feel easy
  to remember. Or you can change the representative cities
  to your favorite ones. 
 <p>New <code>DateFormatSymbols</code> subclasses may be added to support 
 <code>SimpleDateFormat</code> for date-time formatting for additional locales.
 - seealso: DateFormat
 - seealso: SimpleDateFormat
 - seealso: android.icu.util.SimpleTimeZone
 @author Chen-Lieh Huang
 */
@interface AndroidIcuTextDateFormatSymbols : NSObject < JavaIoSerializable, NSCopying > {
 @public
  /*!
   @brief Era strings.For example: "AD" and "BC".
   An array of 2 strings,
  indexed by <code>Calendar.BC</code> and <code>Calendar.AD</code>.
   */
  IOSObjectArray *eras_;
  /*!
   @brief Era name strings.For example: "Anno Domini" and "Before Christ".
   An array of 2 strings,
  indexed by <code>Calendar.BC</code> and <code>Calendar.AD</code>.
   */
  IOSObjectArray *eraNames_;
  /*!
   @brief Narrow era names.For example: "A" and "B".
   An array of 2 strings,
  indexed by <code>Calendar.BC</code> and <code>Calendar.AD</code>.
   */
  IOSObjectArray *narrowEras_;
  /*!
   @brief Month strings.For example: "January", "February", etc.
   An array
  of 13 strings (some calendars have 13 months), indexed by 
 <code>Calendar.JANUARY</code>, <code>Calendar.FEBRUARY</code>, etc.
   */
  IOSObjectArray *months_;
  /*!
   @brief Short month strings.For example: "Jan", "Feb", etc.
   An array of
  13 strings (some calendars have 13 months), indexed by 
 <code>Calendar.JANUARY</code>, <code>Calendar.FEBRUARY</code>, etc.
   */
  IOSObjectArray *shortMonths_;
  /*!
   @brief Narrow month strings.For example: "J", "F", etc.
   An array of
  13 strings (some calendars have 13 months), indexed by 
 <code>Calendar.JANUARY</code>, <code>Calendar.FEBRUARY</code>, etc.
   */
  IOSObjectArray *narrowMonths_;
  /*!
   @brief Standalone month strings.For example: "January", "February", etc.
   An array
  of 13 strings (some calendars have 13 months), indexed by 
 <code>Calendar.JANUARY</code>, <code>Calendar.FEBRUARY</code>, etc.
   */
  IOSObjectArray *standaloneMonths_;
  /*!
   @brief Standalone short month strings.For example: "Jan", "Feb", etc.
   An array of
  13 strings (some calendars have 13 months), indexed by 
 <code>Calendar.JANUARY</code>, <code>Calendar.FEBRUARY</code>, etc.
   */
  IOSObjectArray *standaloneShortMonths_;
  /*!
   @brief Standalone narrow month strings.For example: "J", "F", etc.
   An array of
  13 strings (some calendars have 13 months), indexed by 
 <code>Calendar.JANUARY</code>, <code>Calendar.FEBRUARY</code>, etc.
   */
  IOSObjectArray *standaloneNarrowMonths_;
  /*!
   @brief Format wide weekday strings, for example: "Sunday", "Monday", etc.
   An array of 8 strings, indexed by <code>Calendar.SUNDAY</code>,
  <code>Calendar.MONDAY</code>, etc.
  The element <code>weekdays[0]</code> is ignored.
   */
  IOSObjectArray *weekdays_;
  /*!
   @brief CLDR-style format abbreviated (not short) weekday strings,
  for example: "Sun", "Mon", etc.
   An array of 8 strings, indexed by <code>Calendar.SUNDAY</code>,
  <code>Calendar.MONDAY</code>, etc.
  The element <code>shortWeekdays[0]</code> is ignored.
   */
  IOSObjectArray *shortWeekdays_;
  /*!
   @brief CLDR-style format short weekday strings, for example: "Su", "Mo", etc.
   An array of 8 strings, indexed by <code>Calendar.SUNDAY</code>,
  <code>Calendar.MONDAY</code>, etc.
  The element <code>shorterWeekdays[0]</code> is ignored.
   */
  IOSObjectArray *shorterWeekdays_;
  /*!
   @brief CLDR-style format narrow weekday strings, for example: "S", "M", etc.
   An array of 8 strings, indexed by <code>Calendar.SUNDAY</code>,
  <code>Calendar.MONDAY</code>, etc.
  The element <code>narrowWeekdays[0]</code> is ignored.
   */
  IOSObjectArray *narrowWeekdays_;
  /*!
   @brief Standalone wide weekday strings.For example: "Sunday", "Monday", etc.
   An array of 8 strings, indexed by <code>Calendar.SUNDAY</code>,
  <code>Calendar.MONDAY</code>, etc.
  The element <code>standaloneWeekdays[0]</code> is ignored.
   */
  IOSObjectArray *standaloneWeekdays_;
  /*!
   @brief CLDR-style standalone abbreviated (not short) weekday strings,
  for example: "Sun", "Mon", etc.
   An array of 8 strings, indexed by <code>Calendar.SUNDAY</code>,
  <code>Calendar.MONDAY</code>, etc.
  The element <code>standaloneShortWeekdays[0]</code> is ignored.
   */
  IOSObjectArray *standaloneShortWeekdays_;
  /*!
   @brief CLDR-style standalone short weekday strings, for example: "Sun", "Mon", etc.
   An array of 8 strings, indexed by <code>Calendar.SUNDAY</code>,
  <code>Calendar.MONDAY</code>, etc.
  The element <code>standaloneShorterWeekdays[0]</code> is ignored.
   */
  IOSObjectArray *standaloneShorterWeekdays_;
  /*!
   @brief Standalone narrow weekday strings.For example: "S", "M", etc.
   An array
  of 8 strings, indexed by <code>Calendar.SUNDAY</code>,
  <code>Calendar.MONDAY</code>, etc.
  The element <code>standaloneNarrowWeekdays[0]</code> is ignored.
   */
  IOSObjectArray *standaloneNarrowWeekdays_;
  /*!
   @brief AM and PM strings.For example: "AM" and "PM".
   An array of
  2 strings, indexed by <code>Calendar.AM</code> and 
 <code>Calendar.PM</code>.
   */
  IOSObjectArray *ampms_;
  /*!
   @brief narrow AM and PM strings.For example: "a" and "p".
   An array of
  2 strings, indexed by <code>Calendar.AM</code> and 
 <code>Calendar.PM</code>.
   */
  IOSObjectArray *ampmsNarrow_;
  /*!
   @brief Abbreviated quarter names.For example: "Q1", "Q2", "Q3", "Q4".
   An array
  of 4 strings indexed by the month divided by 3.
   */
  IOSObjectArray *shortQuarters_;
  /*!
   @brief Full quarter names.For example: "1st Quarter", "2nd Quarter", "3rd Quarter",
  "4th Quarter".
   An array of 4 strings, indexed by the month divided by 3.
   */
  IOSObjectArray *quarters_;
  /*!
   @brief Standalone abbreviated quarter names.For example: "Q1", "Q2", "Q3", "Q4".
   An array
  of 4 strings indexed by the month divided by 3.
   */
  IOSObjectArray *standaloneShortQuarters_;
  /*!
   @brief Standalone full quarter names.For example: "1st Quarter", "2nd Quarter", "3rd Quarter",
  "4th Quarter".
   An array of 4 strings, indexed by the month divided by 3.
   */
  IOSObjectArray *standaloneQuarters_;
  /*!
   @brief All leap month patterns, for example "{0}bis".
   An array of DT_MONTH_PATTERN_COUNT strings, indexed by the DT_LEAP_MONTH_PATTERN_XXX value.
   */
  IOSObjectArray *leapMonthPatterns_;
  /*!
   @brief Cyclic year names, for example: "jia-zi", "yi-chou", ..."
   gui-hai".
  An array of (normally) 60 strings, corresponding to cyclic years 1-60 (in Calendar YEAR field).
  Currently we only have data for format/abbreviated.
  For the others, just get from format/abbreviated, ignore set.
   */
  IOSObjectArray *shortYearNames_;
  /*!
   @brief Cyclic zodiac names, for example: "Rat", "Ox", "Tiger", etc.
   An array of (normally) 12 strings.
  Currently we only have data for format/abbreviated.
  For the others, just get from format/abbreviated, ignore set.
   */
  IOSObjectArray *shortZodiacNames_;
  /*!
   @brief Localized date-time pattern characters.For example, a locale may
  wish to use 'u' rather than 'y' to represent years in its date format
  pattern strings.
   This string must be exactly 18 characters long, with the index of
  the characters described by <code>DateFormat.ERA_FIELD</code>,
  <code>DateFormat.YEAR_FIELD</code>, etc.  Thus, if the string were
  "Xz...", then localized patterns would use 'X' for era and 'z' for year.
   */
  NSString *localPatternChars_;
  /*!
   @brief Localized names for abbreviated (== short) day periods.
   An array of strings, in the order of DayPeriod constants.
   */
  IOSObjectArray *abbreviatedDayPeriods_;
  /*!
   @brief Localized names for wide day periods.
   An array of strings, in the order of DayPeriod constants.
   */
  IOSObjectArray *wideDayPeriods_;
  /*!
   @brief Localized names for narrow day periods.
   An array of strings, in the order of DayPeriod constants.
   */
  IOSObjectArray *narrowDayPeriods_;
  /*!
   @brief Localized names for standalone abbreviated (== short) day periods.
   An array of strings, in the order of DayPeriod constants.
   */
  IOSObjectArray *standaloneAbbreviatedDayPeriods_;
  /*!
   @brief Localized names for standalone wide day periods.
   An array of strings, in the order of DayPeriod constants.
   */
  IOSObjectArray *standaloneWideDayPeriods_;
  /*!
   @brief Localized names for standalone narrow day periods.
   An array of strings, in the order of DayPeriod constants.
   */
  IOSObjectArray *standaloneNarrowDayPeriods_;
  /*!
   @brief Capitalization transforms.For each usage type, the first array element indicates
  whether to titlecase for uiListOrMenu context, the second indicates whether to
  titlecase for stand-alone context.
   */
  id<JavaUtilMap> capitalization_;
}
@property (readonly, class) jint FORMAT NS_SWIFT_NAME(FORMAT);
@property (readonly, class) jint STANDALONE NS_SWIFT_NAME(STANDALONE);
@property (readonly, class) jint NUMERIC NS_SWIFT_NAME(NUMERIC);
@property (readonly, class) jint DT_CONTEXT_COUNT NS_SWIFT_NAME(DT_CONTEXT_COUNT);
@property (readonly, class) jint ABBREVIATED NS_SWIFT_NAME(ABBREVIATED);
@property (readonly, class) jint WIDE NS_SWIFT_NAME(WIDE);
@property (readonly, class) jint NARROW NS_SWIFT_NAME(NARROW);
@property (readonly, class) jint SHORT NS_SWIFT_NAME(SHORT);
@property (readonly, class) jint DT_WIDTH_COUNT NS_SWIFT_NAME(DT_WIDTH_COUNT);
@property (readonly, class) jint DT_LEAP_MONTH_PATTERN_FORMAT_WIDE NS_SWIFT_NAME(DT_LEAP_MONTH_PATTERN_FORMAT_WIDE);
@property (readonly, class) jint DT_LEAP_MONTH_PATTERN_FORMAT_ABBREV NS_SWIFT_NAME(DT_LEAP_MONTH_PATTERN_FORMAT_ABBREV);
@property (readonly, class) jint DT_LEAP_MONTH_PATTERN_FORMAT_NARROW NS_SWIFT_NAME(DT_LEAP_MONTH_PATTERN_FORMAT_NARROW);
@property (readonly, class) jint DT_LEAP_MONTH_PATTERN_STANDALONE_WIDE NS_SWIFT_NAME(DT_LEAP_MONTH_PATTERN_STANDALONE_WIDE);
@property (readonly, class) jint DT_LEAP_MONTH_PATTERN_STANDALONE_ABBREV NS_SWIFT_NAME(DT_LEAP_MONTH_PATTERN_STANDALONE_ABBREV);
@property (readonly, class) jint DT_LEAP_MONTH_PATTERN_STANDALONE_NARROW NS_SWIFT_NAME(DT_LEAP_MONTH_PATTERN_STANDALONE_NARROW);
@property (readonly, class) jint DT_LEAP_MONTH_PATTERN_NUMERIC NS_SWIFT_NAME(DT_LEAP_MONTH_PATTERN_NUMERIC);
@property (readonly, class) jint DT_MONTH_PATTERN_COUNT NS_SWIFT_NAME(DT_MONTH_PATTERN_COUNT);
@property (readonly, copy, class) NSString *DEFAULT_TIME_SEPARATOR NS_SWIFT_NAME(DEFAULT_TIME_SEPARATOR);
@property (readonly, copy, class) NSString *ALTERNATE_TIME_SEPARATOR NS_SWIFT_NAME(ALTERNATE_TIME_SEPARATOR);
@property (readonly, copy, class) NSString *patternChars NS_SWIFT_NAME(patternChars);
@property (readonly, class) jint millisPerHour NS_SWIFT_NAME(millisPerHour);

+ (jint)FORMAT;

+ (jint)STANDALONE;

+ (jint)NUMERIC;

+ (jint)DT_CONTEXT_COUNT;

+ (jint)ABBREVIATED;

+ (jint)WIDE;

+ (jint)NARROW;

+ (jint)SHORT;

+ (jint)DT_WIDTH_COUNT;

+ (jint)DT_LEAP_MONTH_PATTERN_FORMAT_WIDE;

+ (jint)DT_LEAP_MONTH_PATTERN_FORMAT_ABBREV;

+ (jint)DT_LEAP_MONTH_PATTERN_FORMAT_NARROW;

+ (jint)DT_LEAP_MONTH_PATTERN_STANDALONE_WIDE;

+ (jint)DT_LEAP_MONTH_PATTERN_STANDALONE_ABBREV;

+ (jint)DT_LEAP_MONTH_PATTERN_STANDALONE_NARROW;

+ (jint)DT_LEAP_MONTH_PATTERN_NUMERIC;

+ (jint)DT_MONTH_PATTERN_COUNT;

+ (NSString *)DEFAULT_TIME_SEPARATOR;

+ (NSString *)ALTERNATE_TIME_SEPARATOR;

+ (NSString *)patternChars;

+ (jint)millisPerHour;

#pragma mark Public

/*!
 @brief Constructs a DateFormatSymbols object by loading format data from
  resources for the default <code>FORMAT</code> locale.
 @throw java.util.MissingResourceExceptionif the resources for the default locale
           cannot be found or cannot be loaded.
 - seealso: Category#FORMAT
 */
- (instancetype __nonnull)init;

/*!
 @brief Returns the <code>DateFormatSymbols</code> object that should be used to format a
  calendar system's dates in the given locale.
 <p>
  <b>Subclassing:</b><br>
  When creating a new Calendar subclass, you must create the 
 <code>ResourceBundle</code>
  containing its <code>DateFormatSymbols</code> in a specific place.
  The resource bundle name is based on the calendar's fully-specified
  class name, with ".resources" inserted at the end of the package name
  (just before the class name) and "Symbols" appended to the end.
  For example, the bundle corresponding to "android.icu.util.HebrewCalendar"
  is "android.icu.impl.data.HebrewCalendarSymbols". 
 <p>
  Within the ResourceBundle, this method searches for five keys: 
 <ul>
  <li><b>DayNames</b> -
       An array of strings corresponding to each possible
       value of the <code>DAY_OF_WEEK</code> field.  Even though
       <code>DAY_OF_WEEK</code> starts with <code>SUNDAY</code> = 1,
       This array is 0-based; the name for Sunday goes in the
       first position, at index 0.  If this key is not found
       in the bundle, the day names are inherited from the
       default <code>DateFormatSymbols</code> for the requested locale. 
 <li><b>DayAbbreviations</b> -
       An array of abbreviated day names corresponding
       to the values in the "DayNames" array.  If this key
       is not found in the resource bundle, the "DayNames"
       values are used instead.  If neither key is found,
       the day abbreviations are inherited from the default      
 <code>DateFormatSymbols</code> for the locale. 
 <li><b>MonthNames</b> -
       An array of strings corresponding to each possible
       value of the <code>MONTH</code> field.  If this key is not found
       in the bundle, the month names are inherited from the
       default <code>DateFormatSymbols</code> for the requested locale. 
 <li><b>MonthAbbreviations</b> -
       An array of abbreviated day names corresponding
       to the values in the "MonthNames" array.  If this key
       is not found in the resource bundle, the "MonthNames"
       values are used instead.  If neither key is found,
       the day abbreviations are inherited from the default      
 <code>DateFormatSymbols</code> for the locale. 
 <li><b>Eras</b> -
       An array of strings corresponding to each possible
       value of the <code>ERA</code> field.  If this key is not found
       in the bundle, the era names are inherited from the
       default <code>DateFormatSymbols</code> for the requested locale. 
 </ul>
  <p>
 @param cal The calendar system whose date format symbols are desired.
 @param locale The locale whose symbols are desired.
 - seealso: DateFormatSymbols#DateFormatSymbols(java.util.Locale)
 */
- (instancetype __nonnull)initWithAndroidIcuUtilCalendar:(AndroidIcuUtilCalendar *)cal
                                      withJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Returns the <code>DateFormatSymbols</code> object that should be used to format a
  calendar system's dates in the given locale.
 <p>
  <b>Subclassing:</b><br>
  When creating a new Calendar subclass, you must create the 
 <code>ResourceBundle</code>
  containing its <code>DateFormatSymbols</code> in a specific place.
  The resource bundle name is based on the calendar's fully-specified
  class name, with ".resources" inserted at the end of the package name
  (just before the class name) and "Symbols" appended to the end.
  For example, the bundle corresponding to "android.icu.util.HebrewCalendar"
  is "android.icu.impl.data.HebrewCalendarSymbols". 
 <p>
  Within the ResourceBundle, this method searches for five keys: 
 <ul>
  <li><b>DayNames</b> -
       An array of strings corresponding to each possible
       value of the <code>DAY_OF_WEEK</code> field.  Even though
       <code>DAY_OF_WEEK</code> starts with <code>SUNDAY</code> = 1,
       This array is 0-based; the name for Sunday goes in the
       first position, at index 0.  If this key is not found
       in the bundle, the day names are inherited from the
       default <code>DateFormatSymbols</code> for the requested locale. 
 <li><b>DayAbbreviations</b> -
       An array of abbreviated day names corresponding
       to the values in the "DayNames" array.  If this key
       is not found in the resource bundle, the "DayNames"
       values are used instead.  If neither key is found,
       the day abbreviations are inherited from the default      
 <code>DateFormatSymbols</code> for the locale. 
 <li><b>MonthNames</b> -
       An array of strings corresponding to each possible
       value of the <code>MONTH</code> field.  If this key is not found
       in the bundle, the month names are inherited from the
       default <code>DateFormatSymbols</code> for the requested locale. 
 <li><b>MonthAbbreviations</b> -
       An array of abbreviated day names corresponding
       to the values in the "MonthNames" array.  If this key
       is not found in the resource bundle, the "MonthNames"
       values are used instead.  If neither key is found,
       the day abbreviations are inherited from the default      
 <code>DateFormatSymbols</code> for the locale. 
 <li><b>Eras</b> -
       An array of strings corresponding to each possible
       value of the <code>ERA</code> field.  If this key is not found
       in the bundle, the era names are inherited from the
       default <code>DateFormatSymbols</code> for the requested locale. 
 </ul>
  <p>
 @param cal The calendar system whose date format symbols are desired.
 @param locale The ulocale whose symbols are desired.
 - seealso: DateFormatSymbols#DateFormatSymbols(java.util.Locale)
 */
- (instancetype __nonnull)initWithAndroidIcuUtilCalendar:(AndroidIcuUtilCalendar *)cal
                               withAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale;

/*!
 @brief Variant of DateFormatSymbols(Calendar, Locale) that takes the Calendar class
  instead of a Calendar instance.
 - seealso: #DateFormatSymbols(Calendar, Locale)
 */
- (instancetype __nonnull)initWithIOSClass:(IOSClass *)calendarClass
                        withJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Variant of DateFormatSymbols(Calendar, ULocale) that takes the Calendar class
  instead of a Calendar instance.
 - seealso: #DateFormatSymbols(Calendar, Locale)
 */
- (instancetype __nonnull)initWithIOSClass:(IOSClass *)calendarClass
                 withAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale;

/*!
 @brief Constructs a DateFormatSymbols object by loading format data from
  resources for the given locale.
 @throw java.util.MissingResourceExceptionif the resources for the specified
           locale cannot be found or cannot be loaded.
 */
- (instancetype __nonnull)initWithJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Fetches a custom calendar's DateFormatSymbols out of the given resource
  bundle.Symbols that are not overridden are inherited from the
  default DateFormatSymbols for the locale.
 - seealso: DateFormatSymbols#DateFormatSymbols(java.util.Locale)
 */
- (instancetype __nonnull)initWithJavaUtilResourceBundle:(JavaUtilResourceBundle *)bundle
                                      withJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Fetches a custom calendar's DateFormatSymbols out of the given resource
  bundle.Symbols that are not overridden are inherited from the
  default DateFormatSymbols for the locale.
 - seealso: DateFormatSymbols#DateFormatSymbols(java.util.Locale)
 */
- (instancetype __nonnull)initWithJavaUtilResourceBundle:(JavaUtilResourceBundle *)bundle
                               withAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale;

/*!
 @brief <strong>[icu]</strong> Constructs a DateFormatSymbols object by loading format data from
  resources for the given ulocale.
 @throw java.util.MissingResourceExceptionif the resources for the specified
           locale cannot be found or cannot be loaded.
 */
- (instancetype __nonnull)initWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale;

/*!
 @brief Variant of DateFormatSymbols(Calendar, ULocale) that takes the calendar type
  instead of a Calendar instance.
 - seealso: #DateFormatSymbols(Calendar, Locale)
 */
- (instancetype __nonnull)initWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale
                                           withNSString:(NSString *)calType __attribute__((deprecated));

/*!
 @brief Overrides clone.
 */
- (id)java_clone;

/*!
 @brief Overrides equals.
 */
- (jboolean)isEqual:(id)obj;

/*!
 @brief Returns am/pm strings.For example: "AM" and "PM".
 @return the weekday strings.
 */
- (IOSObjectArray *)getAmPmStrings;

/*!
 @brief Returns an array of all locales for which the <code>getInstance</code> methods of
  this class can return localized instances.
 <strong>[icu] Note:</strong> Unlike <code>java.text.DateFormatSymbols#getAvailableLocales</code>,
  this method simply returns the array of <code>Locale</code>s available in this
  class.  ICU does not support <code>DateFormatSymbolsProvider</code> introduced in
  Java 6 or its equivalent implementation for now.
 @return An array of <code>Locale</code>s for which localized 
 <code>DateFormatSymbols</code> instances are available.
 */
+ (IOSObjectArray *)getAvailableLocales;

/*!
 @brief <strong>[icu]</strong> Returns an array of all locales for which the <code>getInstance</code>
  methods of this class can return localized instances.
 <strong>[icu] Note:</strong> Unlike <code>java.text.DateFormatSymbols#getAvailableLocales</code>,
  this method simply returns the array of <code>ULocale</code>s available in this
  class.  ICU does not support <code>DateFormatSymbolsProvider</code> introduced in
  Java 6 or its equivalent implementation for now.
 @return An array of <code>ULocale</code>s for which localized 
 <code>DateFormatSymbols</code> instances are available.
 */
+ (IOSObjectArray *)getAvailableULocales;

/*!
 @brief Variant of getDateFormatBundle(java.lang.Class, java.util.Locale) that takes
  a Calendar instance instead of a Calendar class.
 <p>
  <b>Note:</b>Because of the structural changes in the ICU locale bundle,
  this API no longer works as described.  This method always returns null.
 - seealso: #getDateFormatBundle(java.lang.Class, java.util.Locale)
 */
+ (JavaUtilResourceBundle *)getDateFormatBundleWithAndroidIcuUtilCalendar:(AndroidIcuUtilCalendar *)cal
                                                       withJavaUtilLocale:(JavaUtilLocale *)locale __attribute__((deprecated));

/*!
 @brief Variant of getDateFormatBundle(java.lang.Class, java.util.Locale) that takes
  a Calendar instance instead of a Calendar class.
 <p>
  <b>Note:</b>Because of the structural changes in the ICU locale bundle,
  this API no longer works as described.  This method always returns null.
 - seealso: #getDateFormatBundle(java.lang.Class, java.util.Locale)
 */
+ (JavaUtilResourceBundle *)getDateFormatBundleWithAndroidIcuUtilCalendar:(AndroidIcuUtilCalendar *)cal
                                                withAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale __attribute__((deprecated));

/*!
 @brief Finds the ResourceBundle containing the date format information for
  a specified calendar subclass in a given locale.
 <p>
  The resource bundle name is based on the calendar's fully-specified
  class name, with ".resources" inserted at the end of the package name
  (just before the class name) and "Symbols" appended to the end.
  For example, the bundle corresponding to "android.icu.util.HebrewCalendar"
  is "android.icu.impl.data.HebrewCalendarSymbols". 
 <p>
  <b>Note:</b>Because of the structural changes in the ICU locale bundle,
  this API no longer works as described.  This method always returns null.
 */
+ (JavaUtilResourceBundle *)getDateFormatBundleWithIOSClass:(IOSClass *)calendarClass
                                         withJavaUtilLocale:(JavaUtilLocale *)locale __attribute__((deprecated));

/*!
 @brief Finds the ResourceBundle containing the date format information for
  a specified calendar subclass in a given locale.
 <p>
  The resource bundle name is based on the calendar's fully-specified
  class name, with ".resources" inserted at the end of the package name
  (just before the class name) and "Symbols" appended to the end.
  For example, the bundle corresponding to "android.icu.util.HebrewCalendar"
  is "android.icu.impl.data.HebrewCalendarSymbols". 
 <p>
  <b>Note:</b>Because of the structural changes in the ICU locale bundle,
  this API no longer works as described.  This method always returns null.
 */
+ (JavaUtilResourceBundle *)getDateFormatBundleWithIOSClass:(IOSClass *)calendarClass
                                  withAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale __attribute__((deprecated));

/*!
 @brief <strong>[icu]</strong> Returns era name strings.For example: "Anno Domini" and "Before Christ".
 @return the era strings.
 */
- (IOSObjectArray *)getEraNames;

/*!
 @brief Returns era strings.For example: "AD" and "BC".
 @return the era strings.
 */
- (IOSObjectArray *)getEras;

/*!
 @brief Returns a DateFormatSymbols instance for the default locale.
 <strong>[icu] Note:</strong> Unlike <code>java.text.DateFormatSymbols#getInstance</code>,
  this method simply returns <code>new android.icu.text.DateFormatSymbols()</code>.
  ICU does not support <code>DateFormatSymbolsProvider</code> introduced in Java 6
  or its equivalent implementation for now.
 @return A DateFormatSymbols instance.
 */
+ (AndroidIcuTextDateFormatSymbols *)getInstance;

/*!
 @brief Returns a DateFormatSymbols instance for the given locale.
 <strong>[icu] Note:</strong> Unlike <code>java.text.DateFormatSymbols#getInstance</code>,
  this method simply returns <code>new android.icu.text.DateFormatSymbols(locale)</code>.
  ICU does not support <code>DateFormatSymbolsProvider</code> introduced in Java 6
  or its equivalent implementation for now.
 @param locale the locale.
 @return A DateFormatSymbols instance.
 */
+ (AndroidIcuTextDateFormatSymbols *)getInstanceWithJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief <strong>[icu]</strong> Returns a DateFormatSymbols instance for the given locale.
 <strong>[icu] Note:</strong> Unlike <code>java.text.DateFormatSymbols#getInstance</code>,
  this method simply returns <code>new android.icu.text.DateFormatSymbols(locale)</code>.
  ICU does not support <code>DateFormatSymbolsProvider</code> introduced in Java 6
  or its equivalent implementation for now.
 @param locale the locale.
 @return A DateFormatSymbols instance.
 */
+ (AndroidIcuTextDateFormatSymbols *)getInstanceWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale;

/*!
 @brief Returns the appropriate leapMonthPattern if the calendar has them,
  for example: "{0}bis"
 @param context The usage context: FORMAT, STANDALONE, NUMERIC.
 @param width The requested pattern width: WIDE, ABBREVIATED, SHORT, NARROW.
 @return The leapMonthPattern, or null if not available for
                   this calendar.
 */
- (NSString *)getLeapMonthPatternWithInt:(jint)context
                                 withInt:(jint)width __attribute__((deprecated));

/*!
 @brief Returns the locale that was used to create this object, or null.
 This may may differ from the locale requested at the time of
  this object's creation.  For example, if an object is created
  for locale <tt>en_US_CALIFORNIA</tt>, the actual data may be
  drawn from <tt>en</tt> (the <i>actual</i> locale), and 
 <tt>en_US</tt> may be the most specific locale that exists (the 
 <i>valid</i> locale). 
 <p>Note: This method will be implemented in ICU 3.0; ICU 2.8
  contains a partial preview implementation.  The * <i>actual</i>
  locale is returned correctly, but the <i>valid</i> locale is
  not, in most cases.
 @param type type of information requested, either <code>android.icu.util.ULocale.VALID_LOCALE</code>
   or <code>android.icu.util.ULocale.ACTUAL_LOCALE</code>
  .
 @return the information specified by <i>type</i>, or null if
  this object was not constructed from locale data.
 - seealso: android.icu.util.ULocale
 - seealso: android.icu.util.ULocale#VALID_LOCALE
 - seealso: android.icu.util.ULocale#ACTUAL_LOCALE
 */
- (AndroidIcuUtilULocale *)getLocaleWithAndroidIcuUtilULocale_Type:(AndroidIcuUtilULocale_Type *)type;

/*!
 @brief Returns localized date-time pattern characters.For example: 'u', 't', etc.
 <p>Note: ICU no longer provides localized date-time pattern characters for a locale
  starting ICU 3.8.  This method returns the non-localized date-time pattern
  characters unless user defined localized data is set by setLocalPatternChars.
 @return the localized date-time pattern characters.
 */
- (NSString *)getLocalPatternChars;

/*!
 @brief Returns month strings.For example: "January", "February", etc.
 @return the month strings.
 */
- (IOSObjectArray *)getMonths;

/*!
 @brief Returns month strings.For example: "January", "February", etc.
 @param context The month context, FORMAT or STANDALONE.
 @param width The width or the returned month string,                    either WIDE, ABBREVIATED, or NARROW.
 @return the month strings.
 */
- (IOSObjectArray *)getMonthsWithInt:(jint)context
                             withInt:(jint)width;

/*!
 @brief <strong>[icu]</strong> Returns narrow era name strings.For example: "A" and "B".
 @return the era strings.
 */
- (IOSObjectArray *)getNarrowEras __attribute__((deprecated));

/*!
 @brief <strong>[icu]</strong> Returns quarter strings.For example: "1st Quarter", "2nd Quarter", etc.
 @param context The quarter context, FORMAT or STANDALONE.
 @param width The width or the returned quarter string,                    either WIDE or ABBREVIATED. There are no NARROW quarters.
 @return the quarter strings.
 */
- (IOSObjectArray *)getQuartersWithInt:(jint)context
                               withInt:(jint)width;

/*!
 @brief Returns short month strings.For example: "Jan", "Feb", etc.
 @return the short month strings.
 */
- (IOSObjectArray *)getShortMonths;

/*!
 @brief Returns abbreviated weekday strings; for example: "Sun", "Mon", etc.
 (Note: the method name is misleading; it does not get the CLDR-style
  "short" weekday strings, e.g. "Su", "Mo", etc.)
 @return the abbreviated weekday strings. Use <code>Calendar.SUNDAY</code>,
  <code>Calendar.MONDAY</code>, etc. to index the result array.
 */
- (IOSObjectArray *)getShortWeekdays;

/*!
 @brief Returns the time separator string.For example: ":".
 @return the time separator string.
 */
- (NSString *)getTimeSeparatorString __attribute__((deprecated));

/*!
 @brief Returns wide weekday strings.For example: "Sunday", "Monday", etc.
 @return the weekday strings. Use <code>Calendar.SUNDAY</code>,
  <code>Calendar.MONDAY</code>, etc. to index the result array.
 */
- (IOSObjectArray *)getWeekdays;

/*!
 @brief Returns weekday strings.For example: "Sunday", "Monday", etc.
 @return the weekday strings. Use <code>Calendar.SUNDAY</code>,
  <code>Calendar.MONDAY</code>, etc. to index the result array.
 @param context Formatting context, either FORMAT or STANDALONE.
 @param width Width of strings to be returned, either                    WIDE, ABBREVIATED, SHORT, or NARROW
 */
- (IOSObjectArray *)getWeekdaysWithInt:(jint)context
                               withInt:(jint)width;

/*!
 @brief Returns cyclic year name strings if the calendar has them,
  for example: "jia-zi", "yi-chou", etc.
 @param context The usage context: FORMAT, STANDALONE.
 @param width The requested name width: WIDE, ABBREVIATED, SHORT, NARROW.
 @return The year name strings, or null if they are not
                   available for this calendar.
 */
- (IOSObjectArray *)getYearNamesWithInt:(jint)context
                                withInt:(jint)width;

/*!
 @brief Returns calendar zodiac name strings if the calendar has them,
  for example: "Rat", "Ox", "Tiger", etc.
 @param context The usage context: FORMAT, STANDALONE.
 @param width The requested name width: WIDE, ABBREVIATED, SHORT, NARROW.
 @return The zodiac name strings, or null if they are not
                   available for this calendar.
 */
- (IOSObjectArray *)getZodiacNamesWithInt:(jint)context
                                  withInt:(jint)width;

/*!
 @brief Returns time zone strings.
 <p>
  The array returned by this API is a two dimensional String array and
  each row contains at least following strings: 
 <ul>
  <li>ZoneStrings[n][0] - System time zone ID 
 <li>ZoneStrings[n][1] - Long standard time display name 
 <li>ZoneStrings[n][2] - Short standard time display name 
 <li>ZoneStrings[n][3] - Long daylight saving time display name 
 <li>ZoneStrings[n][4] - Short daylight saving time display name 
 </ul>
  When a localized display name is not available, the corresponding
  array element will be <code>null</code>.
  <p>
  <b>Note</b>: ICU implements the time zone display name formatting algorithm
  specified by <a href="http://www.unicode.org/reports/tr35/">UTS#35 Unicode
  Locale Data Markup Language(LDML)</a>. The algorithm supports historic
  display name changes and various different types of names not available in 
 <code>java.text.DateFormatSymbols.getZoneStrings()</code>. For accessing the full
  set of time zone string data used by ICU implementation, you should use 
 <code>TimeZoneNames</code> APIs instead.
 @return the time zone strings.
 */
- (IOSObjectArray *)getZoneStrings;

/*!
 @brief Override hashCode.
 Generates a hash code for the DateFormatSymbols object.
 */
- (NSUInteger)hash;

/*!
 @brief Sets am/pm strings.For example: "AM" and "PM".
 @param newAmpms the new ampm strings.
 */
- (void)setAmPmStringsWithNSStringArray:(IOSObjectArray *)newAmpms;

/*!
 @brief <strong>[icu]</strong> Sets era name strings.For example: "Anno Domini" and "Before Christ".
 @param newEraNames the new era strings.
 */
- (void)setEraNamesWithNSStringArray:(IOSObjectArray *)newEraNames;

/*!
 @brief Sets era strings.For example: "AD" and "BC".
 @param newEras the new era strings.
 */
- (void)setErasWithNSStringArray:(IOSObjectArray *)newEras;

/*!
 @brief Sets a leapMonthPattern, for example: "{0}bis"
 @param leapMonthPattern The new leapMonthPattern.
 @param context The usage context: FORMAT, STANDALONE, NUMERIC.
 @param width The name width: WIDE, ABBREVIATED, NARROW.
 */
- (void)setLeapMonthPatternWithNSString:(NSString *)leapMonthPattern
                                withInt:(jint)context
                                withInt:(jint)width __attribute__((deprecated));

/*!
 @brief Sets localized date-time pattern characters.For example: 'u', 't', etc.
 @param newLocalPatternChars the new localized date-time  pattern characters.
 */
- (void)setLocalPatternCharsWithNSString:(NSString *)newLocalPatternChars;

/*!
 @brief Sets month strings.For example: "January", "February", etc.
 @param newMonths the new month strings.
 */
- (void)setMonthsWithNSStringArray:(IOSObjectArray *)newMonths;

/*!
 @brief Sets month strings.For example: "January", "February", etc.
 @param newMonths the new month strings.
 @param context The formatting context, FORMAT or STANDALONE.
 @param width The width of the month string,                    either WIDE, ABBREVIATED, or NARROW.
 */
- (void)setMonthsWithNSStringArray:(IOSObjectArray *)newMonths
                           withInt:(jint)context
                           withInt:(jint)width;

/*!
 @brief <strong>[icu]</strong> Sets quarter strings.For example: "1st Quarter", "2nd Quarter", etc.
 @param newQuarters the new quarter strings.
 @param context The formatting context, FORMAT or STANDALONE.
 @param width The width of the quarter string,                    either WIDE or ABBREVIATED. There are no NARROW quarters.
 */
- (void)setQuartersWithNSStringArray:(IOSObjectArray *)newQuarters
                             withInt:(jint)context
                             withInt:(jint)width;

/*!
 @brief Sets short month strings.For example: "Jan", "Feb", etc.
 @param newShortMonths the new short month strings.
 */
- (void)setShortMonthsWithNSStringArray:(IOSObjectArray *)newShortMonths;

/*!
 @brief Sets abbreviated weekday strings; for example: "Sun", "Mon", etc.
 (Note: the method name is misleading; it does not set the CLDR-style
  "short" weekday strings, e.g. "Su", "Mo", etc.)
 @param newAbbrevWeekdays the new abbreviated weekday strings. The array should  be indexed by 
  <code> Calendar.SUNDAY </code> ,   <code>
  Calendar.MONDAY </code> , etc.
 */
- (void)setShortWeekdaysWithNSStringArray:(IOSObjectArray *)newAbbrevWeekdays;

/*!
 @brief Sets the time separator string.For example: ":".
 @param newTimeSeparator the new time separator string.
 */
- (void)setTimeSeparatorStringWithNSString:(NSString *)newTimeSeparator __attribute__((deprecated));

/*!
 @brief Sets wide weekday strings.For example: "Sunday", "Monday", etc.
 @param newWeekdays the new weekday strings. The array should  be indexed by 
  <code> Calendar.SUNDAY </code> ,   <code>
  Calendar.MONDAY </code> , etc.
 */
- (void)setWeekdaysWithNSStringArray:(IOSObjectArray *)newWeekdays;

/*!
 @brief Sets weekday strings.For example: "Sunday", "Monday", etc.
 @param newWeekdays The new weekday strings.
 @param context The formatting context, FORMAT or STANDALONE.
 @param width The width of the strings,                     either WIDE, ABBREVIATED, SHORT, or NARROW.
 */
- (void)setWeekdaysWithNSStringArray:(IOSObjectArray *)newWeekdays
                             withInt:(jint)context
                             withInt:(jint)width;

/*!
 @brief Sets cyclic year name strings, for example: "jia-zi", "yi-chou", etc.
 @param yearNames The new cyclic year name strings.
 @param context The usage context: FORMAT, STANDALONE (currently only FORMAT is supported).
 @param width The name width: WIDE, ABBREVIATED, NARROW (currently only ABBREVIATED is supported).
 */
- (void)setYearNamesWithNSStringArray:(IOSObjectArray *)yearNames
                              withInt:(jint)context
                              withInt:(jint)width;

/*!
 @brief Sets calendar zodiac name strings, for example: "Rat", "Ox", "Tiger", etc.
 @param zodiacNames The new zodiac name strings.
 @param context The usage context: FORMAT, STANDALONE (currently only FORMAT is supported).
 @param width The name width: WIDE, ABBREVIATED, NARROW (currently only ABBREVIATED is supported).
 */
- (void)setZodiacNamesWithNSStringArray:(IOSObjectArray *)zodiacNames
                                withInt:(jint)context
                                withInt:(jint)width;

/*!
 @brief Sets time zone strings.
 <p>
  <b>Note</b>: <code>SimpleDateFormat</code> no longer uses the
  zone strings stored in a <code>DateFormatSymbols</code>.
  Therefore, the time zone strings set by this method have
  no effects in an instance of <code>SimpleDateFormat</code>
  for formatting time zones. If you want to customize time
  zone display names formatted by <code>SimpleDateFormat</code>,
  you should customize <code>TimeZoneFormat</code> and set the
  instance by <code>SimpleDateFormat.setTimeZoneFormat(TimeZoneFormat)</code>
  instead.
 @param newZoneStrings the new time zone strings.
 */
- (void)setZoneStringsWithNSStringArray2:(IOSObjectArray *)newZoneStrings;

#pragma mark Protected

/*!
 @brief Initializes format symbols for the locale and calendar type
 @param desiredLocale The locale whose symbols are desired.
 @param b Resource bundle provided externally
 @param calendarType The calendar type being used
 */
- (void)initializeDataWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)desiredLocale
            withAndroidIcuImplICUResourceBundle:(AndroidIcuImplICUResourceBundle *)b
                                   withNSString:(NSString *)calendarType OBJC_METHOD_FAMILY_NONE __attribute__((deprecated));

/*!
 @brief Initializes format symbols for the locale and calendar type
 @param desiredLocale The locale whose symbols are desired.
 @param type The calendar type whose date format symbols are desired.
 */
- (void)initializeDataWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)desiredLocale
                                   withNSString:(NSString *)type OBJC_METHOD_FAMILY_NONE;

#pragma mark Package-Private

/*!
 @brief Initializes format symbols using another instance.
 TODO Clean up initialization methods for subclasses
 */
- (void)initializeDataWithAndroidIcuTextDateFormatSymbols:(AndroidIcuTextDateFormatSymbols *)dfs OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Sets information about the locales that were used to create this
  object.If the object was not constructed from locale data,
  both arguments should be set to null.
 Otherwise, neither
  should be null.  The actual locale must be at the same level or
  less specific than the valid locale.  This method is intended
  for use by factories or other entities that create objects of
  this class.
 @param valid the most specific locale containing any resource  data, or null
 @param actual the locale containing data used to construct this  object, or null
 - seealso: android.icu.util.ULocale
 - seealso: android.icu.util.ULocale#VALID_LOCALE
 - seealso: android.icu.util.ULocale#ACTUAL_LOCALE
 */
- (void)setLocaleWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)valid
                 withAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)actual;

@end

J2OBJC_STATIC_INIT(AndroidIcuTextDateFormatSymbols)

J2OBJC_FIELD_SETTER(AndroidIcuTextDateFormatSymbols, eras_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidIcuTextDateFormatSymbols, eraNames_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidIcuTextDateFormatSymbols, narrowEras_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidIcuTextDateFormatSymbols, months_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidIcuTextDateFormatSymbols, shortMonths_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidIcuTextDateFormatSymbols, narrowMonths_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidIcuTextDateFormatSymbols, standaloneMonths_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidIcuTextDateFormatSymbols, standaloneShortMonths_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidIcuTextDateFormatSymbols, standaloneNarrowMonths_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidIcuTextDateFormatSymbols, weekdays_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidIcuTextDateFormatSymbols, shortWeekdays_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidIcuTextDateFormatSymbols, shorterWeekdays_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidIcuTextDateFormatSymbols, narrowWeekdays_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidIcuTextDateFormatSymbols, standaloneWeekdays_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidIcuTextDateFormatSymbols, standaloneShortWeekdays_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidIcuTextDateFormatSymbols, standaloneShorterWeekdays_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidIcuTextDateFormatSymbols, standaloneNarrowWeekdays_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidIcuTextDateFormatSymbols, ampms_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidIcuTextDateFormatSymbols, ampmsNarrow_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidIcuTextDateFormatSymbols, shortQuarters_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidIcuTextDateFormatSymbols, quarters_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidIcuTextDateFormatSymbols, standaloneShortQuarters_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidIcuTextDateFormatSymbols, standaloneQuarters_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidIcuTextDateFormatSymbols, leapMonthPatterns_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidIcuTextDateFormatSymbols, shortYearNames_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidIcuTextDateFormatSymbols, shortZodiacNames_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidIcuTextDateFormatSymbols, localPatternChars_, NSString *)
J2OBJC_FIELD_SETTER(AndroidIcuTextDateFormatSymbols, abbreviatedDayPeriods_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidIcuTextDateFormatSymbols, wideDayPeriods_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidIcuTextDateFormatSymbols, narrowDayPeriods_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidIcuTextDateFormatSymbols, standaloneAbbreviatedDayPeriods_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidIcuTextDateFormatSymbols, standaloneWideDayPeriods_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidIcuTextDateFormatSymbols, standaloneNarrowDayPeriods_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AndroidIcuTextDateFormatSymbols, capitalization_, id<JavaUtilMap>)

/*!
 @brief <strong>[icu]</strong> Constant for context.
 */
inline jint AndroidIcuTextDateFormatSymbols_get_FORMAT(void);
#define AndroidIcuTextDateFormatSymbols_FORMAT 0
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormatSymbols, FORMAT, jint)

/*!
 @brief <strong>[icu]</strong> Constant for context.
 */
inline jint AndroidIcuTextDateFormatSymbols_get_STANDALONE(void);
#define AndroidIcuTextDateFormatSymbols_STANDALONE 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormatSymbols, STANDALONE, jint)

/*!
 @brief <strong>[icu]</strong> Constant for context.NUMERIC context
  is only supported for leapMonthPatterns.
 */
inline jint AndroidIcuTextDateFormatSymbols_get_NUMERIC(void);
#define AndroidIcuTextDateFormatSymbols_NUMERIC 2
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormatSymbols, NUMERIC, jint)

/*!
 @brief <strong>[icu]</strong> Constant for context.
 */
inline jint AndroidIcuTextDateFormatSymbols_get_DT_CONTEXT_COUNT(void);
#define AndroidIcuTextDateFormatSymbols_DT_CONTEXT_COUNT 3
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormatSymbols, DT_CONTEXT_COUNT, jint)

/*!
 @brief <strong>[icu]</strong> Constant for width.
 */
inline jint AndroidIcuTextDateFormatSymbols_get_ABBREVIATED(void);
#define AndroidIcuTextDateFormatSymbols_ABBREVIATED 0
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormatSymbols, ABBREVIATED, jint)

/*!
 @brief <strong>[icu]</strong> Constant for width.
 */
inline jint AndroidIcuTextDateFormatSymbols_get_WIDE(void);
#define AndroidIcuTextDateFormatSymbols_WIDE 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormatSymbols, WIDE, jint)

/*!
 @brief <strong>[icu]</strong> Constant for width.
 */
inline jint AndroidIcuTextDateFormatSymbols_get_NARROW(void);
#define AndroidIcuTextDateFormatSymbols_NARROW 2
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormatSymbols, NARROW, jint)

/*!
 @brief <strong>[icu]</strong> Constant for width; only supported for weekdays.
 */
inline jint AndroidIcuTextDateFormatSymbols_get_SHORT(void);
#define AndroidIcuTextDateFormatSymbols_SHORT 3
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormatSymbols, SHORT, jint)

/*!
 @brief <strong>[icu]</strong> Constant for width.
 */
inline jint AndroidIcuTextDateFormatSymbols_get_DT_WIDTH_COUNT(void);
#define AndroidIcuTextDateFormatSymbols_DT_WIDTH_COUNT 4
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormatSymbols, DT_WIDTH_COUNT, jint)

/*!
 @brief <strong>[icu]</strong> Somewhat temporary constant for leap month pattern type, adequate for Chinese calendar.
 */
inline jint AndroidIcuTextDateFormatSymbols_get_DT_LEAP_MONTH_PATTERN_FORMAT_WIDE(void);
#define AndroidIcuTextDateFormatSymbols_DT_LEAP_MONTH_PATTERN_FORMAT_WIDE 0
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormatSymbols, DT_LEAP_MONTH_PATTERN_FORMAT_WIDE, jint)

/*!
 @brief <strong>[icu]</strong> Somewhat temporary constant for leap month pattern type, adequate for Chinese calendar.
 */
inline jint AndroidIcuTextDateFormatSymbols_get_DT_LEAP_MONTH_PATTERN_FORMAT_ABBREV(void);
#define AndroidIcuTextDateFormatSymbols_DT_LEAP_MONTH_PATTERN_FORMAT_ABBREV 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormatSymbols, DT_LEAP_MONTH_PATTERN_FORMAT_ABBREV, jint)

/*!
 @brief <strong>[icu]</strong> Somewhat temporary constant for leap month pattern type, adequate for Chinese calendar.
 */
inline jint AndroidIcuTextDateFormatSymbols_get_DT_LEAP_MONTH_PATTERN_FORMAT_NARROW(void);
#define AndroidIcuTextDateFormatSymbols_DT_LEAP_MONTH_PATTERN_FORMAT_NARROW 2
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormatSymbols, DT_LEAP_MONTH_PATTERN_FORMAT_NARROW, jint)

/*!
 @brief <strong>[icu]</strong> Somewhat temporary constant for leap month pattern type, adequate for Chinese calendar.
 */
inline jint AndroidIcuTextDateFormatSymbols_get_DT_LEAP_MONTH_PATTERN_STANDALONE_WIDE(void);
#define AndroidIcuTextDateFormatSymbols_DT_LEAP_MONTH_PATTERN_STANDALONE_WIDE 3
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormatSymbols, DT_LEAP_MONTH_PATTERN_STANDALONE_WIDE, jint)

/*!
 @brief <strong>[icu]</strong> Somewhat temporary constant for leap month pattern type, adequate for Chinese calendar.
 */
inline jint AndroidIcuTextDateFormatSymbols_get_DT_LEAP_MONTH_PATTERN_STANDALONE_ABBREV(void);
#define AndroidIcuTextDateFormatSymbols_DT_LEAP_MONTH_PATTERN_STANDALONE_ABBREV 4
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormatSymbols, DT_LEAP_MONTH_PATTERN_STANDALONE_ABBREV, jint)

/*!
 @brief <strong>[icu]</strong> Somewhat temporary constant for leap month pattern type, adequate for Chinese calendar.
 */
inline jint AndroidIcuTextDateFormatSymbols_get_DT_LEAP_MONTH_PATTERN_STANDALONE_NARROW(void);
#define AndroidIcuTextDateFormatSymbols_DT_LEAP_MONTH_PATTERN_STANDALONE_NARROW 5
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormatSymbols, DT_LEAP_MONTH_PATTERN_STANDALONE_NARROW, jint)

/*!
 @brief <strong>[icu]</strong> Somewhat temporary constant for leap month pattern type, adequate for Chinese calendar.
 */
inline jint AndroidIcuTextDateFormatSymbols_get_DT_LEAP_MONTH_PATTERN_NUMERIC(void);
#define AndroidIcuTextDateFormatSymbols_DT_LEAP_MONTH_PATTERN_NUMERIC 6
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormatSymbols, DT_LEAP_MONTH_PATTERN_NUMERIC, jint)

/*!
 @brief <strong>[icu]</strong> Somewhat temporary constant for month pattern count, adequate for Chinese calendar.
 */
inline jint AndroidIcuTextDateFormatSymbols_get_DT_MONTH_PATTERN_COUNT(void);
#define AndroidIcuTextDateFormatSymbols_DT_MONTH_PATTERN_COUNT 7
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormatSymbols, DT_MONTH_PATTERN_COUNT, jint)

/*!
 @brief <strong>[icu]</strong> This default time separator is used for formatting when the locale
  doesn't specify any time separator, and always recognized when parsing.
 */
inline NSString *AndroidIcuTextDateFormatSymbols_get_DEFAULT_TIME_SEPARATOR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormatSymbols_DEFAULT_TIME_SEPARATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormatSymbols, DEFAULT_TIME_SEPARATOR, NSString *)

/*!
 @brief <strong>[icu]</strong> This alternate time separator is always recognized when parsing.
 */
inline NSString *AndroidIcuTextDateFormatSymbols_get_ALTERNATE_TIME_SEPARATOR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormatSymbols_ALTERNATE_TIME_SEPARATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormatSymbols, ALTERNATE_TIME_SEPARATOR, NSString *)

/*!
 @brief Unlocalized date-time pattern characters.For example: 'y', 'd', etc.
 All locales use the same unlocalized pattern characters.
 */
inline NSString *AndroidIcuTextDateFormatSymbols_get_patternChars(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextDateFormatSymbols_patternChars;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextDateFormatSymbols, patternChars, NSString *)

/*!
 @brief Useful constant for defining timezone offsets.
 */
inline jint AndroidIcuTextDateFormatSymbols_get_millisPerHour(void);
#define AndroidIcuTextDateFormatSymbols_millisPerHour 3600000
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextDateFormatSymbols, millisPerHour, jint)

FOUNDATION_EXPORT void AndroidIcuTextDateFormatSymbols_init(AndroidIcuTextDateFormatSymbols *self);

FOUNDATION_EXPORT AndroidIcuTextDateFormatSymbols *new_AndroidIcuTextDateFormatSymbols_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidIcuTextDateFormatSymbols *create_AndroidIcuTextDateFormatSymbols_init(void);

FOUNDATION_EXPORT void AndroidIcuTextDateFormatSymbols_initWithJavaUtilLocale_(AndroidIcuTextDateFormatSymbols *self, JavaUtilLocale *locale);

FOUNDATION_EXPORT AndroidIcuTextDateFormatSymbols *new_AndroidIcuTextDateFormatSymbols_initWithJavaUtilLocale_(JavaUtilLocale *locale) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidIcuTextDateFormatSymbols *create_AndroidIcuTextDateFormatSymbols_initWithJavaUtilLocale_(JavaUtilLocale *locale);

FOUNDATION_EXPORT void AndroidIcuTextDateFormatSymbols_initWithAndroidIcuUtilULocale_(AndroidIcuTextDateFormatSymbols *self, AndroidIcuUtilULocale *locale);

FOUNDATION_EXPORT AndroidIcuTextDateFormatSymbols *new_AndroidIcuTextDateFormatSymbols_initWithAndroidIcuUtilULocale_(AndroidIcuUtilULocale *locale) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidIcuTextDateFormatSymbols *create_AndroidIcuTextDateFormatSymbols_initWithAndroidIcuUtilULocale_(AndroidIcuUtilULocale *locale);

FOUNDATION_EXPORT AndroidIcuTextDateFormatSymbols *AndroidIcuTextDateFormatSymbols_getInstance(void);

FOUNDATION_EXPORT AndroidIcuTextDateFormatSymbols *AndroidIcuTextDateFormatSymbols_getInstanceWithJavaUtilLocale_(JavaUtilLocale *locale);

FOUNDATION_EXPORT AndroidIcuTextDateFormatSymbols *AndroidIcuTextDateFormatSymbols_getInstanceWithAndroidIcuUtilULocale_(AndroidIcuUtilULocale *locale);

FOUNDATION_EXPORT IOSObjectArray *AndroidIcuTextDateFormatSymbols_getAvailableLocales(void);

FOUNDATION_EXPORT IOSObjectArray *AndroidIcuTextDateFormatSymbols_getAvailableULocales(void);

FOUNDATION_EXPORT void AndroidIcuTextDateFormatSymbols_initWithAndroidIcuUtilCalendar_withJavaUtilLocale_(AndroidIcuTextDateFormatSymbols *self, AndroidIcuUtilCalendar *cal, JavaUtilLocale *locale);

FOUNDATION_EXPORT AndroidIcuTextDateFormatSymbols *new_AndroidIcuTextDateFormatSymbols_initWithAndroidIcuUtilCalendar_withJavaUtilLocale_(AndroidIcuUtilCalendar *cal, JavaUtilLocale *locale) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidIcuTextDateFormatSymbols *create_AndroidIcuTextDateFormatSymbols_initWithAndroidIcuUtilCalendar_withJavaUtilLocale_(AndroidIcuUtilCalendar *cal, JavaUtilLocale *locale);

FOUNDATION_EXPORT void AndroidIcuTextDateFormatSymbols_initWithAndroidIcuUtilCalendar_withAndroidIcuUtilULocale_(AndroidIcuTextDateFormatSymbols *self, AndroidIcuUtilCalendar *cal, AndroidIcuUtilULocale *locale);

FOUNDATION_EXPORT AndroidIcuTextDateFormatSymbols *new_AndroidIcuTextDateFormatSymbols_initWithAndroidIcuUtilCalendar_withAndroidIcuUtilULocale_(AndroidIcuUtilCalendar *cal, AndroidIcuUtilULocale *locale) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidIcuTextDateFormatSymbols *create_AndroidIcuTextDateFormatSymbols_initWithAndroidIcuUtilCalendar_withAndroidIcuUtilULocale_(AndroidIcuUtilCalendar *cal, AndroidIcuUtilULocale *locale);

FOUNDATION_EXPORT void AndroidIcuTextDateFormatSymbols_initWithIOSClass_withJavaUtilLocale_(AndroidIcuTextDateFormatSymbols *self, IOSClass *calendarClass, JavaUtilLocale *locale);

FOUNDATION_EXPORT AndroidIcuTextDateFormatSymbols *new_AndroidIcuTextDateFormatSymbols_initWithIOSClass_withJavaUtilLocale_(IOSClass *calendarClass, JavaUtilLocale *locale) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidIcuTextDateFormatSymbols *create_AndroidIcuTextDateFormatSymbols_initWithIOSClass_withJavaUtilLocale_(IOSClass *calendarClass, JavaUtilLocale *locale);

FOUNDATION_EXPORT void AndroidIcuTextDateFormatSymbols_initWithIOSClass_withAndroidIcuUtilULocale_(AndroidIcuTextDateFormatSymbols *self, IOSClass *calendarClass, AndroidIcuUtilULocale *locale);

FOUNDATION_EXPORT AndroidIcuTextDateFormatSymbols *new_AndroidIcuTextDateFormatSymbols_initWithIOSClass_withAndroidIcuUtilULocale_(IOSClass *calendarClass, AndroidIcuUtilULocale *locale) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidIcuTextDateFormatSymbols *create_AndroidIcuTextDateFormatSymbols_initWithIOSClass_withAndroidIcuUtilULocale_(IOSClass *calendarClass, AndroidIcuUtilULocale *locale);

FOUNDATION_EXPORT void AndroidIcuTextDateFormatSymbols_initWithAndroidIcuUtilULocale_withNSString_(AndroidIcuTextDateFormatSymbols *self, AndroidIcuUtilULocale *locale, NSString *calType);

FOUNDATION_EXPORT AndroidIcuTextDateFormatSymbols *new_AndroidIcuTextDateFormatSymbols_initWithAndroidIcuUtilULocale_withNSString_(AndroidIcuUtilULocale *locale, NSString *calType) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidIcuTextDateFormatSymbols *create_AndroidIcuTextDateFormatSymbols_initWithAndroidIcuUtilULocale_withNSString_(AndroidIcuUtilULocale *locale, NSString *calType);

FOUNDATION_EXPORT void AndroidIcuTextDateFormatSymbols_initWithJavaUtilResourceBundle_withJavaUtilLocale_(AndroidIcuTextDateFormatSymbols *self, JavaUtilResourceBundle *bundle, JavaUtilLocale *locale);

FOUNDATION_EXPORT AndroidIcuTextDateFormatSymbols *new_AndroidIcuTextDateFormatSymbols_initWithJavaUtilResourceBundle_withJavaUtilLocale_(JavaUtilResourceBundle *bundle, JavaUtilLocale *locale) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidIcuTextDateFormatSymbols *create_AndroidIcuTextDateFormatSymbols_initWithJavaUtilResourceBundle_withJavaUtilLocale_(JavaUtilResourceBundle *bundle, JavaUtilLocale *locale);

FOUNDATION_EXPORT void AndroidIcuTextDateFormatSymbols_initWithJavaUtilResourceBundle_withAndroidIcuUtilULocale_(AndroidIcuTextDateFormatSymbols *self, JavaUtilResourceBundle *bundle, AndroidIcuUtilULocale *locale);

FOUNDATION_EXPORT AndroidIcuTextDateFormatSymbols *new_AndroidIcuTextDateFormatSymbols_initWithJavaUtilResourceBundle_withAndroidIcuUtilULocale_(JavaUtilResourceBundle *bundle, AndroidIcuUtilULocale *locale) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidIcuTextDateFormatSymbols *create_AndroidIcuTextDateFormatSymbols_initWithJavaUtilResourceBundle_withAndroidIcuUtilULocale_(JavaUtilResourceBundle *bundle, AndroidIcuUtilULocale *locale);

FOUNDATION_EXPORT JavaUtilResourceBundle *AndroidIcuTextDateFormatSymbols_getDateFormatBundleWithIOSClass_withJavaUtilLocale_(IOSClass *calendarClass, JavaUtilLocale *locale);

FOUNDATION_EXPORT JavaUtilResourceBundle *AndroidIcuTextDateFormatSymbols_getDateFormatBundleWithIOSClass_withAndroidIcuUtilULocale_(IOSClass *calendarClass, AndroidIcuUtilULocale *locale);

FOUNDATION_EXPORT JavaUtilResourceBundle *AndroidIcuTextDateFormatSymbols_getDateFormatBundleWithAndroidIcuUtilCalendar_withJavaUtilLocale_(AndroidIcuUtilCalendar *cal, JavaUtilLocale *locale);

FOUNDATION_EXPORT JavaUtilResourceBundle *AndroidIcuTextDateFormatSymbols_getDateFormatBundleWithAndroidIcuUtilCalendar_withAndroidIcuUtilULocale_(AndroidIcuUtilCalendar *cal, AndroidIcuUtilULocale *locale);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuTextDateFormatSymbols)

#endif

#if !defined (AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage_) && (INCLUDE_ALL_AndroidIcuTextDateFormatSymbols || defined(INCLUDE_AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage))
#define AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage_Enum) {
  AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage_Enum_OTHER = 0,
  AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage_Enum_MONTH_FORMAT = 1,
  AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage_Enum_MONTH_STANDALONE = 2,
  AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage_Enum_MONTH_NARROW = 3,
  AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage_Enum_DAY_FORMAT = 4,
  AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage_Enum_DAY_STANDALONE = 5,
  AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage_Enum_DAY_NARROW = 6,
  AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage_Enum_ERA_WIDE = 7,
  AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage_Enum_ERA_ABBREV = 8,
  AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage_Enum_ERA_NARROW = 9,
  AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage_Enum_ZONE_LONG = 10,
  AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage_Enum_ZONE_SHORT = 11,
  AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage_Enum_METAZONE_LONG = 12,
  AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage_Enum_METAZONE_SHORT = 13,
};

/*!
 @brief <strong>[icu]</strong> Constants for capitalization context usage types
  related to date formatting.
 */
@interface AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage : JavaLangEnum

@property (readonly, class, nonnull) AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage *OTHER NS_SWIFT_NAME(OTHER);
@property (readonly, class, nonnull) AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage *MONTH_FORMAT NS_SWIFT_NAME(MONTH_FORMAT);
@property (readonly, class, nonnull) AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage *MONTH_STANDALONE NS_SWIFT_NAME(MONTH_STANDALONE);
@property (readonly, class, nonnull) AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage *MONTH_NARROW NS_SWIFT_NAME(MONTH_NARROW);
@property (readonly, class, nonnull) AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage *DAY_FORMAT NS_SWIFT_NAME(DAY_FORMAT);
@property (readonly, class, nonnull) AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage *DAY_STANDALONE NS_SWIFT_NAME(DAY_STANDALONE);
@property (readonly, class, nonnull) AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage *DAY_NARROW NS_SWIFT_NAME(DAY_NARROW);
@property (readonly, class, nonnull) AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage *ERA_WIDE NS_SWIFT_NAME(ERA_WIDE);
@property (readonly, class, nonnull) AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage *ERA_ABBREV NS_SWIFT_NAME(ERA_ABBREV);
@property (readonly, class, nonnull) AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage *ERA_NARROW NS_SWIFT_NAME(ERA_NARROW);
@property (readonly, class, nonnull) AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage *ZONE_LONG NS_SWIFT_NAME(ZONE_LONG);
@property (readonly, class, nonnull) AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage *ZONE_SHORT NS_SWIFT_NAME(ZONE_SHORT);
@property (readonly, class, nonnull) AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage *METAZONE_LONG NS_SWIFT_NAME(METAZONE_LONG);
@property (readonly, class, nonnull) AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage *METAZONE_SHORT NS_SWIFT_NAME(METAZONE_SHORT);
+ (AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage * __nonnull)OTHER;

+ (AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage * __nonnull)MONTH_FORMAT;

+ (AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage * __nonnull)MONTH_STANDALONE;

+ (AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage * __nonnull)MONTH_NARROW;

+ (AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage * __nonnull)DAY_FORMAT;

+ (AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage * __nonnull)DAY_STANDALONE;

+ (AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage * __nonnull)DAY_NARROW;

+ (AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage * __nonnull)ERA_WIDE;

+ (AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage * __nonnull)ERA_ABBREV;

+ (AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage * __nonnull)ERA_NARROW;

+ (AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage * __nonnull)ZONE_LONG;

+ (AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage * __nonnull)ZONE_SHORT;

+ (AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage * __nonnull)METAZONE_LONG;

+ (AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage * __nonnull)METAZONE_SHORT;

#pragma mark Public

+ (AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage *AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage_values_[];

inline AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage *AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage_get_OTHER(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage, OTHER)

inline AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage *AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage_get_MONTH_FORMAT(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage, MONTH_FORMAT)

inline AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage *AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage_get_MONTH_STANDALONE(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage, MONTH_STANDALONE)

inline AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage *AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage_get_MONTH_NARROW(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage, MONTH_NARROW)

inline AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage *AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage_get_DAY_FORMAT(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage, DAY_FORMAT)

inline AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage *AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage_get_DAY_STANDALONE(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage, DAY_STANDALONE)

inline AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage *AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage_get_DAY_NARROW(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage, DAY_NARROW)

inline AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage *AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage_get_ERA_WIDE(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage, ERA_WIDE)

inline AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage *AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage_get_ERA_ABBREV(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage, ERA_ABBREV)

inline AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage *AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage_get_ERA_NARROW(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage, ERA_NARROW)

inline AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage *AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage_get_ZONE_LONG(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage, ZONE_LONG)

inline AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage *AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage_get_ZONE_SHORT(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage, ZONE_SHORT)

inline AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage *AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage_get_METAZONE_LONG(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage, METAZONE_LONG)

inline AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage *AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage_get_METAZONE_SHORT(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage, METAZONE_SHORT)

FOUNDATION_EXPORT IOSObjectArray *AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage_values(void);

FOUNDATION_EXPORT AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage *AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage *AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuTextDateFormatSymbols_CapitalizationContextUsage)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_AndroidIcuTextDateFormatSymbols")
