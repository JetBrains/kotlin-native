//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/external/icu/android_icu4j/src/main/java/android/icu/text/UCharacterIterator.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidIcuTextUCharacterIterator")
#ifdef RESTRICT_AndroidIcuTextUCharacterIterator
#define INCLUDE_ALL_AndroidIcuTextUCharacterIterator 0
#else
#define INCLUDE_ALL_AndroidIcuTextUCharacterIterator 1
#endif
#undef RESTRICT_AndroidIcuTextUCharacterIterator

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (AndroidIcuTextUCharacterIterator_) && (INCLUDE_ALL_AndroidIcuTextUCharacterIterator || defined(INCLUDE_AndroidIcuTextUCharacterIterator))
#define AndroidIcuTextUCharacterIterator_

#define RESTRICT_AndroidIcuTextUForwardCharacterIterator 1
#define INCLUDE_AndroidIcuTextUForwardCharacterIterator 1
#include "android/icu/text/UForwardCharacterIterator.h"

@class IOSCharArray;
@class JavaLangStringBuffer;
@protocol AndroidIcuTextReplaceable;
@protocol JavaTextCharacterIterator;

/*!
 @brief Abstract class that defines an API for iteration on text objects.This is an interface for forward and backward
  iteration and random access into a text object.Forward iteration is done with post-increment and backward iteration
  is done with pre-decrement semantics, while the <code>java.text.CharacterIterator</code> interface methods provided
  forward iteration with "pre-increment" and backward iteration with pre-decrement semantics.
 This API is more
  efficient for forward iteration over code points. The other major difference is that this API can do both code unit
  and code point iteration, <code>java.text.CharacterIterator</code> can only iterate over code units and is limited to
  BMP (0 - 0xFFFF)
 @author Ram
 */
@interface AndroidIcuTextUCharacterIterator : NSObject < NSCopying, AndroidIcuTextUForwardCharacterIterator >

#pragma mark Public

/*!
 @brief Creates a copy of this iterator, independent from other iterators.If it is not possible to clone the iterator,
  returns null.
 @return copy of this iterator
 */
- (id)java_clone;

/*!
 @brief Returns the code unit at the current index.If index is out of range, returns DONE.
 Index is not changed.
 @return current code unit
 */
- (jint)current;

/*!
 @brief Returns the codepoint at the current index.If the current index is invalid, DONE is returned.
 If the current
  index points to a lead surrogate, and there is a following trail surrogate, then the code point is returned.
  Otherwise, the code unit at index is returned. Index is not changed.
 @return current codepoint
 */
- (jint)currentCodePoint;

/*!
 @brief Returns a <code>java.text.CharacterIterator</code> object for the underlying text of this iterator.The returned
  iterator is independent of this iterator.
 @return java.text.CharacterIterator object
 */
- (id<JavaTextCharacterIterator>)getCharacterIterator;

/*!
 @brief Gets the current index in text.
 @return current index in text.
 */
- (jint)getIndex;

/*!
 @brief Returns a <code>UCharacterIterator</code> object given a source character array.
 @param source an array of UTF-16 code units
 @return UCharacterIterator object
 @throw IllegalArgumentException
 if the argument is null
 */
+ (AndroidIcuTextUCharacterIterator *)getInstanceWithCharArray:(IOSCharArray *)source;

/*!
 @brief Returns a <code>UCharacterIterator</code> object given a source character array.
 @param source an array of UTF-16 code units
 @return UCharacterIterator object
 @throw IllegalArgumentException
 if the argument is null
 */
+ (AndroidIcuTextUCharacterIterator *)getInstanceWithCharArray:(IOSCharArray *)source
                                                       withInt:(jint)start
                                                       withInt:(jint)limit;

/*!
 @brief Returns a <code>UCharacterIterator</code> object given a CharacterIterator.
 @param source a valid CharacterIterator object.
 @return UCharacterIterator object
 @throw IllegalArgumentException
 if the argument is null
 */
+ (AndroidIcuTextUCharacterIterator *)getInstanceWithJavaTextCharacterIterator:(id<JavaTextCharacterIterator>)source;

/*!
 @brief Returns a <code>UCharacterIterator</code> object given a <code>Replaceable</code> object.
 @param source a valid source as a 
  <code> Replaceable </code>  object
 @return UCharacterIterator object
 @throw IllegalArgumentException
 if the argument is null
 */
+ (AndroidIcuTextUCharacterIterator *)getInstanceWithAndroidIcuTextReplaceable:(id<AndroidIcuTextReplaceable>)source;

/*!
 @brief Returns a <code>UCharacterIterator</code> object given a source string.
 @param source a string
 @return UCharacterIterator object
 @throw IllegalArgumentException
 if the argument is null
 */
+ (AndroidIcuTextUCharacterIterator *)getInstanceWithNSString:(NSString *)source;

/*!
 @brief Returns a <code>UCharacterIterator</code> object given a source StringBuffer.
 @param source an string buffer of UTF-16 code units
 @return UCharacterIterator object
 @throw IllegalArgumentException
 if the argument is null
 */
+ (AndroidIcuTextUCharacterIterator *)getInstanceWithJavaLangStringBuffer:(JavaLangStringBuffer *)source;

/*!
 @brief Returns the length of the text
 @return length of the text
 */
- (jint)getLength;

/*!
 @brief Convenience method for returning the underlying text storage as as string
 @return the underlying text storage in the iterator as a string
 */
- (NSString *)getText;

/*!
 @brief Convenience override for <code>getText(char[], int)</code> that provides an offset of 0.
 @param fillIn an array of chars to fill with the underlying UTF-16 code units.
 @return the number of code units added to fillIn, as a convenience
 @throw IndexOutOfBoundsException
 exception if there is not enough room in the array.
 */
- (jint)getTextWithCharArray:(IOSCharArray *)fillIn;

/*!
 @brief Fills the buffer with the underlying text storage of the iterator If the buffer capacity is not enough a
  exception is thrown.The capacity of the fill in buffer should at least be equal to length of text in the
  iterator obtained by calling <code>getLength()</code>).
 <b>Usage:</b>
  
 @code

          UChacterIterator iter = new UCharacterIterator.getInstance(text);
          char[] buf = new char[iter.getLength()];
          iter.getText(buf);
          OR
          char[] buf= new char[1];
          int len = 0;
          for(;;){
              try{
                  len = iter.getText(buf);
                  break;
              }catch(IndexOutOfBoundsException e){
                  buf = new char[iter.getLength()];
              }            }    
  
@endcode
 @param fillIn an array of chars to fill with the underlying UTF-16 code units.
 @param offset the position within the array to start putting the data.
 @return the number of code units added to fillIn, as a convenience
 @throw IndexOutOfBoundsException
 exception if there is not enough room after offset in the array, or if offset &lt; 0.
 */
- (jint)getTextWithCharArray:(IOSCharArray *)fillIn
                     withInt:(jint)offset;

/*!
 @brief Moves the current position by the number of code points specified, either forward or backward depending on the
  sign of delta (positive or negative respectively).If the current index is at a trail surrogate then the first
  adjustment is by code unit, and the remaining adjustments are by code points.
 If the resulting index would be
  less than zero, the index is set to zero, and if the resulting index would be greater than limit, the index is
  set to limit.
 @param delta the number of code units to move the current index.
 @return the new index
 @throw IndexOutOfBoundsException
 is thrown if an invalid delta is supplied
 */
- (jint)moveCodePointIndexWithInt:(jint)delta;

/*!
 @brief Moves the current position by the number of code units specified, either forward or backward depending on the
  sign of delta (positive or negative respectively).If the resulting index would be less than zero, the index is
  set to zero, and if the resulting index would be greater than limit, the index is set to limit.
 @param delta the number of code units to move the current index.
 @return the new index.
 @throw IndexOutOfBoundsException
 is thrown if an invalid index is supplied
 */
- (jint)moveIndexWithInt:(jint)delta;

/*!
 @brief Returns the UTF16 code unit at index, and increments to the next code unit (post-increment semantics).If index
  is out of range, DONE is returned, and the iterator is reset to the limit of the text.
 @return the next UTF16 code unit, or DONE if the index is at the limit of the text.
 */
- (jint)next;

/*!
 @brief Returns the code point at index, and increments to the next code point (post-increment semantics).If index does
  not point to a valid surrogate pair, the behavior is the same as <code>next()</code>.
 Otherwise the iterator is
  incremented past the surrogate pair, and the code point represented by the pair is returned.
 @return the next codepoint in text, or DONE if the index is at the limit of the text.
 */
- (jint)nextCodePoint;

/*!
 @brief Decrement to the position of the previous code unit in the text, and return it (pre-decrement semantics).If the
  resulting index is less than 0, the index is reset to 0 and DONE is returned.
 @return the previous code unit in the text, or DONE if the new index is before the start of the text.
 */
- (jint)previous;

/*!
 @brief Retreat to the start of the previous code point in the text, and return it (pre-decrement semantics).If the
  index is not preceeded by a valid surrogate pair, the behavior is the same as <code>previous()</code>.
 Otherwise
  the iterator is decremented to the start of the surrogate pair, and the code point represented by the pair is
  returned.
 @return the previous code point in the text, or DONE if the new index is before the start of the text.
 */
- (jint)previousCodePoint;

/*!
 @brief Sets the index to the specified index in the text.
 @param index the index within the text.
 @throw IndexOutOfBoundsException
 is thrown if an invalid index is supplied
 */
- (void)setIndexWithInt:(jint)index;

/*!
 @brief Sets the current index to the limit.
 */
- (void)setToLimit;

/*!
 @brief Sets the current index to the start.
 */
- (void)setToStart;

#pragma mark Protected

/*!
 @brief Protected default constructor for the subclasses
 */
- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidIcuTextUCharacterIterator)

FOUNDATION_EXPORT void AndroidIcuTextUCharacterIterator_init(AndroidIcuTextUCharacterIterator *self);

FOUNDATION_EXPORT AndroidIcuTextUCharacterIterator *AndroidIcuTextUCharacterIterator_getInstanceWithAndroidIcuTextReplaceable_(id<AndroidIcuTextReplaceable> source);

FOUNDATION_EXPORT AndroidIcuTextUCharacterIterator *AndroidIcuTextUCharacterIterator_getInstanceWithNSString_(NSString *source);

FOUNDATION_EXPORT AndroidIcuTextUCharacterIterator *AndroidIcuTextUCharacterIterator_getInstanceWithCharArray_(IOSCharArray *source);

FOUNDATION_EXPORT AndroidIcuTextUCharacterIterator *AndroidIcuTextUCharacterIterator_getInstanceWithCharArray_withInt_withInt_(IOSCharArray *source, jint start, jint limit);

FOUNDATION_EXPORT AndroidIcuTextUCharacterIterator *AndroidIcuTextUCharacterIterator_getInstanceWithJavaLangStringBuffer_(JavaLangStringBuffer *source);

FOUNDATION_EXPORT AndroidIcuTextUCharacterIterator *AndroidIcuTextUCharacterIterator_getInstanceWithJavaTextCharacterIterator_(id<JavaTextCharacterIterator> source);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuTextUCharacterIterator)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_AndroidIcuTextUCharacterIterator")
