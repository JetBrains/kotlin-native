//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/external/icu/android_icu4j/src/main/java/android/icu/text/PluralRules.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidIcuTextPluralRules")
#ifdef RESTRICT_AndroidIcuTextPluralRules
#define INCLUDE_ALL_AndroidIcuTextPluralRules 0
#else
#define INCLUDE_ALL_AndroidIcuTextPluralRules 1
#endif
#undef RESTRICT_AndroidIcuTextPluralRules

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (AndroidIcuTextPluralRules_) && (INCLUDE_ALL_AndroidIcuTextPluralRules || defined(INCLUDE_AndroidIcuTextPluralRules))
#define AndroidIcuTextPluralRules_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class AndroidIcuTextPluralRules_FixedDecimal;
@class AndroidIcuTextPluralRules_FixedDecimalSamples;
@class AndroidIcuTextPluralRules_KeywordStatus;
@class AndroidIcuTextPluralRules_PluralType;
@class AndroidIcuTextPluralRules_SampleType;
@class AndroidIcuTextUnicodeSet;
@class AndroidIcuUtilOutput;
@class AndroidIcuUtilULocale;
@class IOSBooleanArray;
@class IOSObjectArray;
@class JavaLangBoolean;
@class JavaUtilLocale;
@class JavaUtilRegexPattern;
@protocol JavaUtilCollection;
@protocol JavaUtilSet;

/*!
 @brief <p>
  Defines rules for mapping non-negative numeric values onto a small set of keywords.
 </p>
  <p>
  Rules are constructed from a text description, consisting of a series of keywords and conditions. The <code>select</code>
  method examines each condition in order and returns the keyword for the first condition that matches the number. If
  none match, <code>KEYWORD_OTHER</code> is returned. 
 </p>
  <p>
  A PluralRules object is immutable. It contains caches for sample values, but those are synchronized. 
 <p>
  PluralRules is Serializable so that it can be used in formatters, which are serializable. 
 </p>
  <p>
  For more information, details, and tips for writing rules, see the <a href="http://www.unicode.org/draft/reports/tr35/tr35.html#Language_Plural_Rules">
 LDML spec, C.11 Language Plural
  Rules</a>
  </p>
  <p>
  Examples: 
 </p>
  
 @code

   &quot;one: n is 1; few: n in 2..4&quot;
   
@endcode
  <p>
  This defines two rules, for 'one' and 'few'. The condition for 'one' is "n is 1" which means that the number must be
  equal to 1 for this condition to pass. The condition for 'few' is "n in 2..4" which means that the number must be
  between 2 and 4 inclusive - and be an integer - for this condition to pass. All other numbers are assigned the
  keyword "other" by the default rule. 
 </p>
  
 @code

   &quot;zero: n is 0; one: n is 1; zero: n mod 100 in 1..19&quot;
   
@endcode
  <p>
  This illustrates that the same keyword can be defined multiple times. Each rule is examined in order, and the first
  keyword whose condition passes is the one returned. Also notes that a modulus is applied to n in the last rule. Thus
  its condition holds for 119, 219, 319... 
 </p>
  
 @code

   &quot;one: n is 1; few: n mod 10 in 2..4 and n mod 100 not in 12..14&quot;
   
@endcode
  <p>
  This illustrates conjunction and negation. The condition for 'few' has two parts, both of which must be met:
  "n mod 10 in 2..4" and "n mod 100 not in 12..14". The first part applies a modulus to n before the test as in the
  previous example. The second part applies a different modulus and also uses negation, thus it matches all numbers
  _not_ in 12, 13, 14, 112, 113, 114, 212, 213, 214... 
 </p>
  <p>
  Syntax: 
 </p>
  @code

  rules         = rule (';' rule)*
  rule          = keyword ':' condition
  keyword       = &lt;identifier&gt;
  condition     = and_condition ('or' and_condition)*
  and_condition = relation ('and' relation)*
  relation      = not? expr not? rel not? range_list
  expr          = ('n' | 'i' | 'f' | 'v' | 't') (mod value)?
  not           = 'not' | '!'
  rel           = 'in' | 'is' | '=' | '≠' | 'within'
  mod           = 'mod' | '%'
  range_list    = (range | value) (',' range_list)*
  value         = digit+
  digit         = 0|1|2|3|4|5|6|7|8|9
  range         = value'..'value 
  
@endcode
  <p>Each <b>not</b> term inverts the meaning; however, there should not be more than one of them.</p>
  <p>
  The i, f, t, and v values are defined as follows: 
 </p>
  <ul>
  <li>i to be the integer digits.</li>
  <li>f to be the visible decimal digits, as an integer.</li>
  <li>t to be the visible decimal digits—without trailing zeros—as an integer.</li>
  <li>v to be the number of visible fraction digits.</li>
  <li>j is defined to only match integers. That is j is 3 fails if v != 0 (eg for 3.1 or 3.0).</li>
  </ul>
  <p>
  Examples are in the following table: 
 </p>
  <table border='1' style="border-collapse:collapse">
  <tbody>
  <tr>
  <th>n</th>
  <th>i</th>
  <th>f</th>
  <th>v</th>
  </tr>
  <tr>
  <td>1.0</td>
  <td>1</td>
  <td align="right">0</td>
  <td>1</td>
  </tr>
  <tr>
  <td>1.00</td>
  <td>1</td>
  <td align="right">0</td>
  <td>2</td>
  </tr>
  <tr>
  <td>1.3</td>
  <td>1</td>
  <td align="right">3</td>
  <td>1</td>
  </tr>
  <tr>
  <td>1.03</td>
  <td>1</td>
  <td align="right">3</td>
  <td>2</td>
  </tr>
  <tr>
  <td>1.23</td>
  <td>1</td>
  <td align="right">23</td>
  <td>2</td>
  </tr>
  </tbody>
  </table>
  <p>
  An "identifier" is a sequence of characters that do not have the Unicode Pattern_Syntax or Pattern_White_Space
  properties. 
 <p>
  The difference between 'in' and 'within' is that 'in' only includes integers in the specified range, while 'within'
  includes all values. Using 'within' with a range_list consisting entirely of values is the same as using 'in' (it's
  not an error). 
 </p>
 */
@interface AndroidIcuTextPluralRules : NSObject < JavaIoSerializable >
@property (readonly, class, strong) AndroidIcuTextUnicodeSet *ALLOWED_ID NS_SWIFT_NAME(ALLOWED_ID);
@property (readonly, copy, class) NSString *CATEGORY_SEPARATOR NS_SWIFT_NAME(CATEGORY_SEPARATOR);
@property (readonly, copy, class) NSString *KEYWORD_RULE_SEPARATOR NS_SWIFT_NAME(KEYWORD_RULE_SEPARATOR);
@property (readonly, copy, class) NSString *KEYWORD_ZERO NS_SWIFT_NAME(KEYWORD_ZERO);
@property (readonly, copy, class) NSString *KEYWORD_ONE NS_SWIFT_NAME(KEYWORD_ONE);
@property (readonly, copy, class) NSString *KEYWORD_TWO NS_SWIFT_NAME(KEYWORD_TWO);
@property (readonly, copy, class) NSString *KEYWORD_FEW NS_SWIFT_NAME(KEYWORD_FEW);
@property (readonly, copy, class) NSString *KEYWORD_MANY NS_SWIFT_NAME(KEYWORD_MANY);
@property (readonly, copy, class) NSString *KEYWORD_OTHER NS_SWIFT_NAME(KEYWORD_OTHER);
@property (readonly, class) jdouble NO_UNIQUE_VALUE NS_SWIFT_NAME(NO_UNIQUE_VALUE);
@property (readonly, class, strong) AndroidIcuTextPluralRules *DEFAULT NS_SWIFT_NAME(DEFAULT);
@property (readonly, class, strong) JavaUtilRegexPattern *AT_SEPARATED NS_SWIFT_NAME(AT_SEPARATED);
@property (readonly, class, strong) JavaUtilRegexPattern *OR_SEPARATED NS_SWIFT_NAME(OR_SEPARATED);
@property (readonly, class, strong) JavaUtilRegexPattern *AND_SEPARATED NS_SWIFT_NAME(AND_SEPARATED);
@property (readonly, class, strong) JavaUtilRegexPattern *COMMA_SEPARATED NS_SWIFT_NAME(COMMA_SEPARATED);
@property (readonly, class, strong) JavaUtilRegexPattern *DOTDOT_SEPARATED NS_SWIFT_NAME(DOTDOT_SEPARATED);
@property (readonly, class, strong) JavaUtilRegexPattern *TILDE_SEPARATED NS_SWIFT_NAME(TILDE_SEPARATED);
@property (readonly, class, strong) JavaUtilRegexPattern *SEMI_SEPARATED NS_SWIFT_NAME(SEMI_SEPARATED);

+ (AndroidIcuTextUnicodeSet *)ALLOWED_ID;

+ (NSString *)CATEGORY_SEPARATOR;

+ (NSString *)KEYWORD_RULE_SEPARATOR;

+ (NSString *)KEYWORD_ZERO;

+ (NSString *)KEYWORD_ONE;

+ (NSString *)KEYWORD_TWO;

+ (NSString *)KEYWORD_FEW;

+ (NSString *)KEYWORD_MANY;

+ (NSString *)KEYWORD_OTHER;

+ (jdouble)NO_UNIQUE_VALUE;

+ (AndroidIcuTextPluralRules *)DEFAULT;

+ (JavaUtilRegexPattern *)AT_SEPARATED;

+ (JavaUtilRegexPattern *)OR_SEPARATED;

+ (JavaUtilRegexPattern *)AND_SEPARATED;

+ (JavaUtilRegexPattern *)COMMA_SEPARATED;

+ (JavaUtilRegexPattern *)DOTDOT_SEPARATED;

+ (JavaUtilRegexPattern *)TILDE_SEPARATED;

+ (JavaUtilRegexPattern *)SEMI_SEPARATED;

#pragma mark Public

/*!
 */
- (jboolean)addSampleWithNSString:(NSString *)keyword
                     withNSNumber:(NSNumber *)sample
                          withInt:(jint)maxCount
                  withJavaUtilSet:(id<JavaUtilSet>)result __attribute__((deprecated));

/*!
 */
- (jint)compareToWithAndroidIcuTextPluralRules:(AndroidIcuTextPluralRules *)other __attribute__((deprecated));

/*!
 */
- (jboolean)computeLimitedWithNSString:(NSString *)keyword
withAndroidIcuTextPluralRules_SampleType:(AndroidIcuTextPluralRules_SampleType *)sampleType __attribute__((deprecated));

/*!
 @brief Creates a PluralRules from a description if it is parsable,
  otherwise returns null.
 @param description_ the rule description.
 @return the PluralRules
 */
+ (AndroidIcuTextPluralRules *)createRulesWithNSString:(NSString *)description_;

/*!
 */
- (jboolean)isEqual:(id)rhs;

/*!
 @brief Returns true if rhs is equal to this.
 @param rhs the PluralRules to compare to.
 @return true if this and rhs are equal.
 */
- (jboolean)equalsWithAndroidIcuTextPluralRules:(AndroidIcuTextPluralRules *)rhs;

/*!
 @brief Provides access to the predefined cardinal-number <code>PluralRules</code> for a given 
 <code>java.util.Locale</code>.
 Same as forLocale(locale, PluralType.CARDINAL). 
 <p>ICU defines plural rules for many locales based on CLDR <i>Language Plural Rules</i>.
  For these predefined rules, see CLDR page at
  http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html
 @param locale The locale for which a  <code> PluralRules </code>  object is
     returned.
 @return The predefined <code>PluralRules</code> object for this locale.
    If there's no predefined rules for this locale, the rules
    for the closest parent in the locale hierarchy that has one will
    be returned.  The final fallback always returns the default
    rules.
 */
+ (AndroidIcuTextPluralRules *)forLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Provides access to the predefined <code>PluralRules</code> for a given 
 <code>java.util.Locale</code> and the plural type.
 <p>ICU defines plural rules for many locales based on CLDR <i>Language Plural Rules</i>.
  For these predefined rules, see CLDR page at
  http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html
 @param locale The locale for which a  <code> PluralRules </code>  object is
     returned.
 @param type The plural type (e.g., cardinal or ordinal).
 @return The predefined <code>PluralRules</code> object for this locale.
    If there's no predefined rules for this locale, the rules
    for the closest parent in the locale hierarchy that has one will
    be returned.  The final fallback always returns the default
    rules.
 */
+ (AndroidIcuTextPluralRules *)forLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale
                  withAndroidIcuTextPluralRules_PluralType:(AndroidIcuTextPluralRules_PluralType *)type;

/*!
 @brief Provides access to the predefined cardinal-number <code>PluralRules</code> for a given
  locale.
 Same as forLocale(locale, PluralType.CARDINAL). 
 <p>ICU defines plural rules for many locales based on CLDR <i>Language Plural Rules</i>.
  For these predefined rules, see CLDR page at
  http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html
 @param locale The locale for which a  <code> PluralRules </code>  object is
     returned.
 @return The predefined <code>PluralRules</code> object for this locale.
    If there's no predefined rules for this locale, the rules
    for the closest parent in the locale hierarchy that has one will
    be returned.  The final fallback always returns the default
    rules.
 */
+ (AndroidIcuTextPluralRules *)forLocaleWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale;

/*!
 @brief Provides access to the predefined <code>PluralRules</code> for a given
  locale and the plural type.
 <p>ICU defines plural rules for many locales based on CLDR <i>Language Plural Rules</i>.
  For these predefined rules, see CLDR page at
  http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html
 @param locale The locale for which a  <code> PluralRules </code>  object is
     returned.
 @param type The plural type (e.g., cardinal or ordinal).
 @return The predefined <code>PluralRules</code> object for this locale.
    If there's no predefined rules for this locale, the rules
    for the closest parent in the locale hierarchy that has one will
    be returned.  The final fallback always returns the default
    rules.
 */
+ (AndroidIcuTextPluralRules *)forLocaleWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale
                         withAndroidIcuTextPluralRules_PluralType:(AndroidIcuTextPluralRules_PluralType *)type;

/*!
 @brief Returns all the values that trigger this keyword, or null if the number of such
  values is unlimited.
 @param keyword the keyword
 @return the values that trigger this keyword, or null.  The returned collection
  is immutable. It will be empty if the keyword is not defined.
 */
- (id<JavaUtilCollection>)getAllKeywordValuesWithNSString:(NSString *)keyword;

/*!
 @brief Returns all the values that trigger this keyword, or null if the number of such
  values is unlimited.
 @param keyword the keyword
 @param type the type of samples requested, INTEGER or DECIMAL
 @return the values that trigger this keyword, or null.  The returned collection
  is immutable. It will be empty if the keyword is not defined.
 */
- (id<JavaUtilCollection>)getAllKeywordValuesWithNSString:(NSString *)keyword
                 withAndroidIcuTextPluralRules_SampleType:(AndroidIcuTextPluralRules_SampleType *)type __attribute__((deprecated));

/*!
 @brief Returns the set of locales for which PluralRules are known.
 @return the set of locales for which PluralRules are known, as a list
 */
+ (IOSObjectArray *)getAvailableULocales;

/*!
 @brief Returns a list of values for which select() would return that keyword,
  or null if the keyword is not defined or no samples are available.
 The returned collection is unmodifiable.
  The returned list is not complete, and there might be additional values that
  would return the keyword.
 @param keyword the keyword to test
 @param sampleType the type of samples requested, INTEGER or DECIMAL
 @return a list of values matching the keyword.
 */
- (AndroidIcuTextPluralRules_FixedDecimalSamples *)getDecimalSamplesWithNSString:(NSString *)keyword
                                        withAndroidIcuTextPluralRules_SampleType:(AndroidIcuTextPluralRules_SampleType *)sampleType __attribute__((deprecated));

/*!
 @brief Returns the 'functionally equivalent' locale with respect to
  plural rules.Calling PluralRules.forLocale with the functionally equivalent
  locale, and with the provided locale, returns rules that behave the same.
 <br>
  All locales with the same functionally equivalent locale have
  plural rules that behave the same.  This is not exaustive;
  there may be other locales whose plural rules behave the same
  that do not have the same equivalent locale.
 @param locale the locale to check
 @param isAvailable if not null and of length  &gt;  0, this will hold 'true' at  index 0 if locale is directly defined (without fallback) as having plural rules
 @return the functionally-equivalent locale
 */
+ (AndroidIcuUtilULocale *)getFunctionalEquivalentWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale
                                                           withBooleanArray:(IOSBooleanArray *)isAvailable;

/*!
 @brief Returns a set of all rule keywords used in this <code>PluralRules</code>
  object.The rule "other" is always present by default.
 @return The set of keywords.
 */
- (id<JavaUtilSet>)getKeywords;

/*!
 @brief Find the status for the keyword, given a certain set of explicit values.
 @param keyword the particular keyword (call rules.getKeywords() to get the valid ones)
 @param offset the offset used, or 0.0d if not. Internally, the offset is subtracted from each explicit value before
              checking against the keyword values.
 @param explicits a set of Doubles that are used explicitly (eg [=0], "[=1]"). May be empty or null.
 @param uniqueValue If non null, set to the unique value.
 @return the KeywordStatus
 */
- (AndroidIcuTextPluralRules_KeywordStatus *)getKeywordStatusWithNSString:(NSString *)keyword
                                                                  withInt:(jint)offset
                                                          withJavaUtilSet:(id<JavaUtilSet>)explicits
                                                 withAndroidIcuUtilOutput:(AndroidIcuUtilOutput *)uniqueValue;

/*!
 @brief Find the status for the keyword, given a certain set of explicit values.
 @param keyword the particular keyword (call rules.getKeywords() to get the valid ones)
 @param offset the offset used, or 0.0d if not. Internally, the offset is subtracted from each explicit value before
              checking against the keyword values.
 @param explicits a set of Doubles that are used explicitly (eg [=0], "[=1]"). May be empty or null.
 @param sampleType request KeywordStatus relative to INTEGER or DECIMAL values
 @param uniqueValue If non null, set to the unique value.
 @return the KeywordStatus
 */
- (AndroidIcuTextPluralRules_KeywordStatus *)getKeywordStatusWithNSString:(NSString *)keyword
                                                                  withInt:(jint)offset
                                                          withJavaUtilSet:(id<JavaUtilSet>)explicits
                                                 withAndroidIcuUtilOutput:(AndroidIcuUtilOutput *)uniqueValue
                                 withAndroidIcuTextPluralRules_SampleType:(AndroidIcuTextPluralRules_SampleType *)sampleType __attribute__((deprecated));

/*!
 */
- (NSString *)getRulesWithNSString:(NSString *)keyword __attribute__((deprecated));

/*!
 @brief Returns a list of integer values for which select() would return that keyword,
  or null if the keyword is not defined.The returned collection is unmodifiable.
 The returned list is not complete, and there might be additional values that
  would return the keyword.
 @param keyword the keyword to test
 @return a list of values matching the keyword.
 */
- (id<JavaUtilCollection>)getSamplesWithNSString:(NSString *)keyword;

/*!
 @brief Returns a list of values for which select() would return that keyword,
  or null if the keyword is not defined.
 The returned collection is unmodifiable.
  The returned list is not complete, and there might be additional values that
  would return the keyword. The keyword might be defined, and yet have an empty set of samples,
  IF there are samples for the other sampleType.
 @param keyword the keyword to test
 @param sampleType the type of samples requested, INTEGER or DECIMAL
 @return a list of values matching the keyword.
 */
- (id<JavaUtilCollection>)getSamplesWithNSString:(NSString *)keyword
        withAndroidIcuTextPluralRules_SampleType:(AndroidIcuTextPluralRules_SampleType *)sampleType __attribute__((deprecated));

/*!
 @brief Returns the unique value that this keyword matches, or <code>NO_UNIQUE_VALUE</code>
  if the keyword matches multiple values or is not defined for this PluralRules.
 @param keyword the keyword to check for a unique value
 @return The unique value for the keyword, or NO_UNIQUE_VALUE.
 */
- (jdouble)getUniqueKeywordValueWithNSString:(NSString *)keyword;

/*!
 */
- (NSUInteger)hash __attribute__((deprecated));

/*!
 */
- (JavaLangBoolean *)isLimitedWithNSString:(NSString *)keyword __attribute__((deprecated));

/*!
 */
- (jboolean)isLimitedWithNSString:(NSString *)keyword
withAndroidIcuTextPluralRules_SampleType:(AndroidIcuTextPluralRules_SampleType *)sampleType __attribute__((deprecated));

/*!
 @brief Given a number information, and keyword, return whether the keyword would match the number.
 @param sample The number information for which the rule has to be determined.
 @param keyword The keyword to filter on
 */
- (jboolean)matchesWithAndroidIcuTextPluralRules_FixedDecimal:(AndroidIcuTextPluralRules_FixedDecimal *)sample
                                                 withNSString:(NSString *)keyword __attribute__((deprecated));

/*!
 @brief Parses a plural rules description and returns a PluralRules.
 @param description_ the rule description.
 @throw ParseExceptionif the description cannot be parsed.
     The exception index is typically not set, it will be -1.
 */
+ (AndroidIcuTextPluralRules *)parseDescriptionWithNSString:(NSString *)description_;

/*!
 @brief Given a number, returns the keyword of the first rule that applies to
  the number.
 @param number The number for which the rule has to be determined.
 @return The keyword of the selected rule.
 */
- (NSString *)selectWithDouble:(jdouble)number;

/*!
 @brief Given a number, returns the keyword of the first rule that applies to
  the number.
 @param number The number for which the rule has to be determined.
 @return The keyword of the selected rule.
 */
- (NSString *)selectWithDouble:(jdouble)number
                       withInt:(jint)countVisibleFractionDigits
                      withLong:(jlong)fractionaldigits __attribute__((deprecated));

/*!
 @brief Given a number information, returns the keyword of the first rule that applies to
  the number.
 @param number The number information for which the rule has to be determined.
 @return The keyword of the selected rule.
 */
- (NSString *)selectWithAndroidIcuTextPluralRules_FixedDecimal:(AndroidIcuTextPluralRules_FixedDecimal *)number __attribute__((deprecated));

/*!
 */
- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(AndroidIcuTextPluralRules)

inline AndroidIcuTextUnicodeSet *AndroidIcuTextPluralRules_get_ALLOWED_ID(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuTextUnicodeSet *AndroidIcuTextPluralRules_ALLOWED_ID;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextPluralRules, ALLOWED_ID, AndroidIcuTextUnicodeSet *)

/*!
 */
inline NSString *AndroidIcuTextPluralRules_get_CATEGORY_SEPARATOR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextPluralRules_CATEGORY_SEPARATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextPluralRules, CATEGORY_SEPARATOR, NSString *)

/*!
 */
inline NSString *AndroidIcuTextPluralRules_get_KEYWORD_RULE_SEPARATOR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextPluralRules_KEYWORD_RULE_SEPARATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextPluralRules, KEYWORD_RULE_SEPARATOR, NSString *)

/*!
 @brief Common name for the 'zero' plural form.
 */
inline NSString *AndroidIcuTextPluralRules_get_KEYWORD_ZERO(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextPluralRules_KEYWORD_ZERO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextPluralRules, KEYWORD_ZERO, NSString *)

/*!
 @brief Common name for the 'singular' plural form.
 */
inline NSString *AndroidIcuTextPluralRules_get_KEYWORD_ONE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextPluralRules_KEYWORD_ONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextPluralRules, KEYWORD_ONE, NSString *)

/*!
 @brief Common name for the 'dual' plural form.
 */
inline NSString *AndroidIcuTextPluralRules_get_KEYWORD_TWO(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextPluralRules_KEYWORD_TWO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextPluralRules, KEYWORD_TWO, NSString *)

/*!
 @brief Common name for the 'paucal' or other special plural form.
 */
inline NSString *AndroidIcuTextPluralRules_get_KEYWORD_FEW(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextPluralRules_KEYWORD_FEW;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextPluralRules, KEYWORD_FEW, NSString *)

/*!
 @brief Common name for the arabic (11 to 99) plural form.
 */
inline NSString *AndroidIcuTextPluralRules_get_KEYWORD_MANY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextPluralRules_KEYWORD_MANY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextPluralRules, KEYWORD_MANY, NSString *)

/*!
 @brief Common name for the default plural form.This name is returned
  for values to which no other form in the rule applies.
 It
  can additionally be assigned rules of its own.
 */
inline NSString *AndroidIcuTextPluralRules_get_KEYWORD_OTHER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *AndroidIcuTextPluralRules_KEYWORD_OTHER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextPluralRules, KEYWORD_OTHER, NSString *)

/*!
 @brief Value returned by <code>getUniqueKeywordValue</code> when there is no
  unique value to return.
 */
inline jdouble AndroidIcuTextPluralRules_get_NO_UNIQUE_VALUE(void);
#define AndroidIcuTextPluralRules_NO_UNIQUE_VALUE -0.00123456777
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextPluralRules, NO_UNIQUE_VALUE, jdouble)

/*!
 @brief The default rules that accept any number and return 
 <code>KEYWORD_OTHER</code>.
 */
inline AndroidIcuTextPluralRules *AndroidIcuTextPluralRules_get_DEFAULT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuTextPluralRules *AndroidIcuTextPluralRules_DEFAULT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextPluralRules, DEFAULT, AndroidIcuTextPluralRules *)

inline JavaUtilRegexPattern *AndroidIcuTextPluralRules_get_AT_SEPARATED(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilRegexPattern *AndroidIcuTextPluralRules_AT_SEPARATED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextPluralRules, AT_SEPARATED, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *AndroidIcuTextPluralRules_get_OR_SEPARATED(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilRegexPattern *AndroidIcuTextPluralRules_OR_SEPARATED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextPluralRules, OR_SEPARATED, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *AndroidIcuTextPluralRules_get_AND_SEPARATED(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilRegexPattern *AndroidIcuTextPluralRules_AND_SEPARATED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextPluralRules, AND_SEPARATED, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *AndroidIcuTextPluralRules_get_COMMA_SEPARATED(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilRegexPattern *AndroidIcuTextPluralRules_COMMA_SEPARATED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextPluralRules, COMMA_SEPARATED, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *AndroidIcuTextPluralRules_get_DOTDOT_SEPARATED(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilRegexPattern *AndroidIcuTextPluralRules_DOTDOT_SEPARATED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextPluralRules, DOTDOT_SEPARATED, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *AndroidIcuTextPluralRules_get_TILDE_SEPARATED(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilRegexPattern *AndroidIcuTextPluralRules_TILDE_SEPARATED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextPluralRules, TILDE_SEPARATED, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *AndroidIcuTextPluralRules_get_SEMI_SEPARATED(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilRegexPattern *AndroidIcuTextPluralRules_SEMI_SEPARATED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextPluralRules, SEMI_SEPARATED, JavaUtilRegexPattern *)

FOUNDATION_EXPORT AndroidIcuTextPluralRules *AndroidIcuTextPluralRules_parseDescriptionWithNSString_(NSString *description_);

FOUNDATION_EXPORT AndroidIcuTextPluralRules *AndroidIcuTextPluralRules_createRulesWithNSString_(NSString *description_);

FOUNDATION_EXPORT AndroidIcuTextPluralRules *AndroidIcuTextPluralRules_forLocaleWithAndroidIcuUtilULocale_(AndroidIcuUtilULocale *locale);

FOUNDATION_EXPORT AndroidIcuTextPluralRules *AndroidIcuTextPluralRules_forLocaleWithJavaUtilLocale_(JavaUtilLocale *locale);

FOUNDATION_EXPORT AndroidIcuTextPluralRules *AndroidIcuTextPluralRules_forLocaleWithAndroidIcuUtilULocale_withAndroidIcuTextPluralRules_PluralType_(AndroidIcuUtilULocale *locale, AndroidIcuTextPluralRules_PluralType *type);

FOUNDATION_EXPORT AndroidIcuTextPluralRules *AndroidIcuTextPluralRules_forLocaleWithJavaUtilLocale_withAndroidIcuTextPluralRules_PluralType_(JavaUtilLocale *locale, AndroidIcuTextPluralRules_PluralType *type);

FOUNDATION_EXPORT IOSObjectArray *AndroidIcuTextPluralRules_getAvailableULocales(void);

FOUNDATION_EXPORT AndroidIcuUtilULocale *AndroidIcuTextPluralRules_getFunctionalEquivalentWithAndroidIcuUtilULocale_withBooleanArray_(AndroidIcuUtilULocale *locale, IOSBooleanArray *isAvailable);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuTextPluralRules)

#endif

#if !defined (AndroidIcuTextPluralRules_Factory_) && (INCLUDE_ALL_AndroidIcuTextPluralRules || defined(INCLUDE_AndroidIcuTextPluralRules_Factory))
#define AndroidIcuTextPluralRules_Factory_

@class AndroidIcuImplPluralRulesLoader;
@class AndroidIcuTextPluralRules;
@class AndroidIcuTextPluralRules_PluralType;
@class AndroidIcuUtilULocale;
@class IOSBooleanArray;
@class IOSObjectArray;

/*!
 @brief Provides a factory for returning plural rules
 */
__attribute__((deprecated))
@interface AndroidIcuTextPluralRules_Factory : NSObject

#pragma mark Public

/*!
 @brief Utility for getting CARDINAL rules.
 @param locale the locale
 @return plural rules.
 */
- (AndroidIcuTextPluralRules *)forLocaleWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale __attribute__((deprecated));

/*!
 @brief Provides access to the predefined <code>PluralRules</code> for a given locale and the plural type.
 <p>
  ICU defines plural rules for many locales based on CLDR <i>Language Plural Rules</i>. For these predefined
  rules, see CLDR page at http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html
 @param locale The locale for which a 
  <code> PluralRules </code>  object is returned.
 @param type The plural type (e.g., cardinal or ordinal).
 @return The predefined <code>PluralRules</code> object for this locale. If there's no predefined rules for
          this locale, the rules for the closest parent in the locale hierarchy that has one will be returned.
          The final fallback always returns the default rules.
 */
- (AndroidIcuTextPluralRules *)forLocaleWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale
                         withAndroidIcuTextPluralRules_PluralType:(AndroidIcuTextPluralRules_PluralType *)type __attribute__((deprecated));

/*!
 @brief Returns the locales for which there is plurals data.
 */
- (IOSObjectArray *)getAvailableULocales __attribute__((deprecated));

/*!
 @brief Returns the default factory.
 */
+ (AndroidIcuImplPluralRulesLoader *)getDefaultFactory __attribute__((deprecated));

/*!
 @brief Returns the 'functionally equivalent' locale with respect to plural rules.Calling PluralRules.forLocale with
  the functionally equivalent locale, and with the provided locale, returns rules that behave the same.
 <br>
  All locales with the same functionally equivalent locale have plural rules that behave the same. This is not
  exaustive; there may be other locales whose plural rules behave the same that do not have the same equivalent
  locale.
 @param locale the locale to check
 @param isAvailable if not null and of length 
  &gt;  0, this will hold 'true' at index 0 if locale is directly defined             (without fallback) as having plural rules
 @return the functionally-equivalent locale
 */
- (AndroidIcuUtilULocale *)getFunctionalEquivalentWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale
                                                           withBooleanArray:(IOSBooleanArray *)isAvailable __attribute__((deprecated));

/*!
 @brief Returns whether or not there are overrides.
 */
- (jboolean)hasOverrideWithAndroidIcuUtilULocale:(AndroidIcuUtilULocale *)locale __attribute__((deprecated));

#pragma mark Protected

/*!
 @brief Sole constructor
 */
- (instancetype __nonnull)init __attribute__((deprecated));

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidIcuTextPluralRules_Factory)

FOUNDATION_EXPORT void AndroidIcuTextPluralRules_Factory_init(AndroidIcuTextPluralRules_Factory *self);

FOUNDATION_EXPORT AndroidIcuImplPluralRulesLoader *AndroidIcuTextPluralRules_Factory_getDefaultFactory(void);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuTextPluralRules_Factory)

#endif

#if !defined (AndroidIcuTextPluralRules_PluralType_) && (INCLUDE_ALL_AndroidIcuTextPluralRules || defined(INCLUDE_AndroidIcuTextPluralRules_PluralType))
#define AndroidIcuTextPluralRules_PluralType_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, AndroidIcuTextPluralRules_PluralType_Enum) {
  AndroidIcuTextPluralRules_PluralType_Enum_CARDINAL = 0,
  AndroidIcuTextPluralRules_PluralType_Enum_ORDINAL = 1,
};

/*!
 @brief Type of plurals and PluralRules.
 */
@interface AndroidIcuTextPluralRules_PluralType : JavaLangEnum

@property (readonly, class, nonnull) AndroidIcuTextPluralRules_PluralType *CARDINAL NS_SWIFT_NAME(CARDINAL);
@property (readonly, class, nonnull) AndroidIcuTextPluralRules_PluralType *ORDINAL NS_SWIFT_NAME(ORDINAL);
+ (AndroidIcuTextPluralRules_PluralType * __nonnull)CARDINAL;

+ (AndroidIcuTextPluralRules_PluralType * __nonnull)ORDINAL;

#pragma mark Public

+ (AndroidIcuTextPluralRules_PluralType *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (AndroidIcuTextPluralRules_PluralType_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(AndroidIcuTextPluralRules_PluralType)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT AndroidIcuTextPluralRules_PluralType *AndroidIcuTextPluralRules_PluralType_values_[];

/*!
 @brief Plural rules for cardinal numbers: 1 file vs.2 files.
 */
inline AndroidIcuTextPluralRules_PluralType *AndroidIcuTextPluralRules_PluralType_get_CARDINAL(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextPluralRules_PluralType, CARDINAL)

/*!
 @brief Plural rules for ordinal numbers: 1st file, 2nd file, 3rd file, 4th file, etc.
 */
inline AndroidIcuTextPluralRules_PluralType *AndroidIcuTextPluralRules_PluralType_get_ORDINAL(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextPluralRules_PluralType, ORDINAL)

FOUNDATION_EXPORT IOSObjectArray *AndroidIcuTextPluralRules_PluralType_values(void);

FOUNDATION_EXPORT AndroidIcuTextPluralRules_PluralType *AndroidIcuTextPluralRules_PluralType_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT AndroidIcuTextPluralRules_PluralType *AndroidIcuTextPluralRules_PluralType_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuTextPluralRules_PluralType)

#endif

#if !defined (AndroidIcuTextPluralRules_Operand_) && (INCLUDE_ALL_AndroidIcuTextPluralRules || defined(INCLUDE_AndroidIcuTextPluralRules_Operand))
#define AndroidIcuTextPluralRules_Operand_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, AndroidIcuTextPluralRules_Operand_Enum) {
  AndroidIcuTextPluralRules_Operand_Enum_n = 0,
  AndroidIcuTextPluralRules_Operand_Enum_i = 1,
  AndroidIcuTextPluralRules_Operand_Enum_f = 2,
  AndroidIcuTextPluralRules_Operand_Enum_t = 3,
  AndroidIcuTextPluralRules_Operand_Enum_v = 4,
  AndroidIcuTextPluralRules_Operand_Enum_w = 5,
  AndroidIcuTextPluralRules_Operand_Enum_j = 6,
};

@interface AndroidIcuTextPluralRules_Operand : JavaLangEnum

@property (readonly, class, nonnull) AndroidIcuTextPluralRules_Operand *n NS_SWIFT_NAME(n);
@property (readonly, class, nonnull) AndroidIcuTextPluralRules_Operand *i NS_SWIFT_NAME(i);
@property (readonly, class, nonnull) AndroidIcuTextPluralRules_Operand *f NS_SWIFT_NAME(f);
@property (readonly, class, nonnull) AndroidIcuTextPluralRules_Operand *t NS_SWIFT_NAME(t);
@property (readonly, class, nonnull) AndroidIcuTextPluralRules_Operand *v NS_SWIFT_NAME(v);
@property (readonly, class, nonnull) AndroidIcuTextPluralRules_Operand *w NS_SWIFT_NAME(w);
@property (readonly, class, nonnull) AndroidIcuTextPluralRules_Operand *j NS_SWIFT_NAME(j);
+ (AndroidIcuTextPluralRules_Operand * __nonnull)n;

+ (AndroidIcuTextPluralRules_Operand * __nonnull)i;

+ (AndroidIcuTextPluralRules_Operand * __nonnull)f;

+ (AndroidIcuTextPluralRules_Operand * __nonnull)t;

+ (AndroidIcuTextPluralRules_Operand * __nonnull)v;

+ (AndroidIcuTextPluralRules_Operand * __nonnull)w;

+ (AndroidIcuTextPluralRules_Operand * __nonnull)j;

#pragma mark Public

+ (AndroidIcuTextPluralRules_Operand *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (AndroidIcuTextPluralRules_Operand_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(AndroidIcuTextPluralRules_Operand)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT AndroidIcuTextPluralRules_Operand *AndroidIcuTextPluralRules_Operand_values_[];

inline AndroidIcuTextPluralRules_Operand *AndroidIcuTextPluralRules_Operand_get_n(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextPluralRules_Operand, n)

inline AndroidIcuTextPluralRules_Operand *AndroidIcuTextPluralRules_Operand_get_i(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextPluralRules_Operand, i)

inline AndroidIcuTextPluralRules_Operand *AndroidIcuTextPluralRules_Operand_get_f(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextPluralRules_Operand, f)

inline AndroidIcuTextPluralRules_Operand *AndroidIcuTextPluralRules_Operand_get_t(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextPluralRules_Operand, t)

inline AndroidIcuTextPluralRules_Operand *AndroidIcuTextPluralRules_Operand_get_v(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextPluralRules_Operand, v)

inline AndroidIcuTextPluralRules_Operand *AndroidIcuTextPluralRules_Operand_get_w(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextPluralRules_Operand, w)

inline AndroidIcuTextPluralRules_Operand *AndroidIcuTextPluralRules_Operand_get_j(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextPluralRules_Operand, j)

FOUNDATION_EXPORT IOSObjectArray *AndroidIcuTextPluralRules_Operand_values(void);

FOUNDATION_EXPORT AndroidIcuTextPluralRules_Operand *AndroidIcuTextPluralRules_Operand_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT AndroidIcuTextPluralRules_Operand *AndroidIcuTextPluralRules_Operand_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuTextPluralRules_Operand)

#endif

#if !defined (AndroidIcuTextPluralRules_FixedDecimal_) && (INCLUDE_ALL_AndroidIcuTextPluralRules || defined(INCLUDE_AndroidIcuTextPluralRules_FixedDecimal))
#define AndroidIcuTextPluralRules_FixedDecimal_

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "java/lang/Comparable.h"

@class AndroidIcuTextPluralRules_Operand;

/*!
 */
__attribute__((deprecated))
@interface AndroidIcuTextPluralRules_FixedDecimal : NSNumber < JavaLangComparable > {
 @public
  /*!
   */
  jdouble source_;
  /*!
   */
  jint visibleDecimalDigitCount_;
  /*!
   */
  jint visibleDecimalDigitCountWithoutTrailingZeros_;
  /*!
   */
  jlong decimalDigits_;
  /*!
   */
  jlong decimalDigitsWithoutTrailingZeros_;
  /*!
   */
  jlong integerValue_;
  /*!
   */
  jboolean hasIntegerValue_;
  /*!
   */
  jboolean isNegative_;
}
@property (readonly, class) jlong MAX NS_SWIFT_NAME(MAX);

+ (jlong)MAX;

#pragma mark Public

/*!
 */
- (instancetype __nonnull)initWithDouble:(jdouble)n __attribute__((deprecated));

/*!
 */
- (instancetype __nonnull)initWithDouble:(jdouble)n
                                 withInt:(jint)v __attribute__((deprecated));

/*!
 @param n is the original number
 @param v number of digits to the right of the decimal place. e.g 1.00 = 2 25. = 0
 @param f Corresponds to f in the plural rules grammar.    The digits to the right of the decimal place as an integer. e.g 1.10 = 10
 */
- (instancetype __nonnull)initWithDouble:(jdouble)n
                                 withInt:(jint)v
                                withLong:(jlong)f __attribute__((deprecated));

/*!
 */
- (instancetype __nonnull)initWithLong:(jlong)n __attribute__((deprecated));

/*!
 */
- (instancetype __nonnull)initWithNSString:(NSString *)n __attribute__((deprecated));

/*!
 @brief We're not going to care about NaN.
 */
- (jint)compareToWithId:(AndroidIcuTextPluralRules_FixedDecimal *)other __attribute__((deprecated));

/*!
 @brief Return a guess as to the number of decimals that would be displayed.This is only a guess; callers should
  always supply the decimals explicitly if possible.
 Currently, it is up to 6 decimals (without trailing zeros).
  Returns 0 for infinities and nans.
 */
+ (jint)decimalsWithDouble:(jdouble)n __attribute__((deprecated));

/*!
 */
- (jdouble)doubleValue __attribute__((deprecated));

/*!
 */
- (jboolean)isEqual:(id)arg0 __attribute__((deprecated));

/*!
 */
- (jfloat)floatValue __attribute__((deprecated));

/*!
 */
- (jdouble)getWithAndroidIcuTextPluralRules_Operand:(AndroidIcuTextPluralRules_Operand *)operand __attribute__((deprecated));

/*!
 */
- (jint)getBaseFactor __attribute__((deprecated));

/*!
 */
- (jlong)getDecimalDigits __attribute__((deprecated));

/*!
 */
- (jlong)getDecimalDigitsWithoutTrailingZeros __attribute__((deprecated));

/*!
 */
- (jlong)getIntegerValue __attribute__((deprecated));

/*!
 */
+ (AndroidIcuTextPluralRules_Operand *)getOperandWithNSString:(NSString *)t __attribute__((deprecated));

/*!
 */
- (jlong)getShiftedValue __attribute__((deprecated));

/*!
 */
- (jdouble)getSource __attribute__((deprecated));

/*!
 */
- (jint)getVisibleDecimalDigitCount __attribute__((deprecated));

/*!
 */
- (jint)getVisibleDecimalDigitCountWithoutTrailingZeros __attribute__((deprecated));

/*!
 */
- (NSUInteger)hash __attribute__((deprecated));

/*!
 */
- (jboolean)hasIntegerValue __attribute__((deprecated));

/*!
 */
- (jint)intValue __attribute__((deprecated));

/*!
 */
- (jboolean)isHasIntegerValue __attribute__((deprecated));

/*!
 */
- (jboolean)isNegative __attribute__((deprecated));

/*!
 */
- (jlong)longLongValue __attribute__((deprecated));

/*!
 */
- (NSString *)description __attribute__((deprecated));

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidIcuTextPluralRules_FixedDecimal)

inline jlong AndroidIcuTextPluralRules_FixedDecimal_get_MAX(void);
#define AndroidIcuTextPluralRules_FixedDecimal_MAX 1000000000000000000LL
J2OBJC_STATIC_FIELD_CONSTANT(AndroidIcuTextPluralRules_FixedDecimal, MAX, jlong)

FOUNDATION_EXPORT void AndroidIcuTextPluralRules_FixedDecimal_initWithDouble_withInt_withLong_(AndroidIcuTextPluralRules_FixedDecimal *self, jdouble n, jint v, jlong f);

FOUNDATION_EXPORT AndroidIcuTextPluralRules_FixedDecimal *new_AndroidIcuTextPluralRules_FixedDecimal_initWithDouble_withInt_withLong_(jdouble n, jint v, jlong f) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidIcuTextPluralRules_FixedDecimal *create_AndroidIcuTextPluralRules_FixedDecimal_initWithDouble_withInt_withLong_(jdouble n, jint v, jlong f);

FOUNDATION_EXPORT void AndroidIcuTextPluralRules_FixedDecimal_initWithDouble_withInt_(AndroidIcuTextPluralRules_FixedDecimal *self, jdouble n, jint v);

FOUNDATION_EXPORT AndroidIcuTextPluralRules_FixedDecimal *new_AndroidIcuTextPluralRules_FixedDecimal_initWithDouble_withInt_(jdouble n, jint v) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidIcuTextPluralRules_FixedDecimal *create_AndroidIcuTextPluralRules_FixedDecimal_initWithDouble_withInt_(jdouble n, jint v);

FOUNDATION_EXPORT void AndroidIcuTextPluralRules_FixedDecimal_initWithDouble_(AndroidIcuTextPluralRules_FixedDecimal *self, jdouble n);

FOUNDATION_EXPORT AndroidIcuTextPluralRules_FixedDecimal *new_AndroidIcuTextPluralRules_FixedDecimal_initWithDouble_(jdouble n) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidIcuTextPluralRules_FixedDecimal *create_AndroidIcuTextPluralRules_FixedDecimal_initWithDouble_(jdouble n);

FOUNDATION_EXPORT void AndroidIcuTextPluralRules_FixedDecimal_initWithLong_(AndroidIcuTextPluralRules_FixedDecimal *self, jlong n);

FOUNDATION_EXPORT AndroidIcuTextPluralRules_FixedDecimal *new_AndroidIcuTextPluralRules_FixedDecimal_initWithLong_(jlong n) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidIcuTextPluralRules_FixedDecimal *create_AndroidIcuTextPluralRules_FixedDecimal_initWithLong_(jlong n);

FOUNDATION_EXPORT jint AndroidIcuTextPluralRules_FixedDecimal_decimalsWithDouble_(jdouble n);

FOUNDATION_EXPORT void AndroidIcuTextPluralRules_FixedDecimal_initWithNSString_(AndroidIcuTextPluralRules_FixedDecimal *self, NSString *n);

FOUNDATION_EXPORT AndroidIcuTextPluralRules_FixedDecimal *new_AndroidIcuTextPluralRules_FixedDecimal_initWithNSString_(NSString *n) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidIcuTextPluralRules_FixedDecimal *create_AndroidIcuTextPluralRules_FixedDecimal_initWithNSString_(NSString *n);

FOUNDATION_EXPORT AndroidIcuTextPluralRules_Operand *AndroidIcuTextPluralRules_FixedDecimal_getOperandWithNSString_(NSString *t);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuTextPluralRules_FixedDecimal)

#endif

#if !defined (AndroidIcuTextPluralRules_SampleType_) && (INCLUDE_ALL_AndroidIcuTextPluralRules || defined(INCLUDE_AndroidIcuTextPluralRules_SampleType))
#define AndroidIcuTextPluralRules_SampleType_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, AndroidIcuTextPluralRules_SampleType_Enum) {
  AndroidIcuTextPluralRules_SampleType_Enum_INTEGER = 0,
  AndroidIcuTextPluralRules_SampleType_Enum_DECIMAL = 1,
};

/*!
 @brief Selection parameter for either integer-only or decimal-only.
 */
__attribute__((deprecated))
@interface AndroidIcuTextPluralRules_SampleType : JavaLangEnum

@property (readonly, class, nonnull) AndroidIcuTextPluralRules_SampleType *INTEGER NS_SWIFT_NAME(INTEGER);
@property (readonly, class, nonnull) AndroidIcuTextPluralRules_SampleType *DECIMAL NS_SWIFT_NAME(DECIMAL);
+ (AndroidIcuTextPluralRules_SampleType * __nonnull)INTEGER;

+ (AndroidIcuTextPluralRules_SampleType * __nonnull)DECIMAL;

#pragma mark Public

+ (AndroidIcuTextPluralRules_SampleType *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (AndroidIcuTextPluralRules_SampleType_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(AndroidIcuTextPluralRules_SampleType)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT AndroidIcuTextPluralRules_SampleType *AndroidIcuTextPluralRules_SampleType_values_[];

/*!
 */
inline AndroidIcuTextPluralRules_SampleType *AndroidIcuTextPluralRules_SampleType_get_INTEGER(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextPluralRules_SampleType, INTEGER)

/*!
 */
inline AndroidIcuTextPluralRules_SampleType *AndroidIcuTextPluralRules_SampleType_get_DECIMAL(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextPluralRules_SampleType, DECIMAL)

FOUNDATION_EXPORT IOSObjectArray *AndroidIcuTextPluralRules_SampleType_values(void);

FOUNDATION_EXPORT AndroidIcuTextPluralRules_SampleType *AndroidIcuTextPluralRules_SampleType_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT AndroidIcuTextPluralRules_SampleType *AndroidIcuTextPluralRules_SampleType_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuTextPluralRules_SampleType)

#endif

#if !defined (AndroidIcuTextPluralRules_FixedDecimalRange_) && (INCLUDE_ALL_AndroidIcuTextPluralRules || defined(INCLUDE_AndroidIcuTextPluralRules_FixedDecimalRange))
#define AndroidIcuTextPluralRules_FixedDecimalRange_

@class AndroidIcuTextPluralRules_FixedDecimal;

/*!
 @brief A range of NumberInfo that includes all values with the same visibleFractionDigitCount.
 */
__attribute__((deprecated))
@interface AndroidIcuTextPluralRules_FixedDecimalRange : NSObject {
 @public
  /*!
   */
  AndroidIcuTextPluralRules_FixedDecimal *start_;
  /*!
   */
  AndroidIcuTextPluralRules_FixedDecimal *end_;
}

#pragma mark Public

/*!
 */
- (instancetype __nonnull)initWithAndroidIcuTextPluralRules_FixedDecimal:(AndroidIcuTextPluralRules_FixedDecimal *)start
                              withAndroidIcuTextPluralRules_FixedDecimal:(AndroidIcuTextPluralRules_FixedDecimal *)end __attribute__((deprecated));

/*!
 */
- (NSString *)description __attribute__((deprecated));

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidIcuTextPluralRules_FixedDecimalRange)

J2OBJC_FIELD_SETTER(AndroidIcuTextPluralRules_FixedDecimalRange, start_, AndroidIcuTextPluralRules_FixedDecimal *)
J2OBJC_FIELD_SETTER(AndroidIcuTextPluralRules_FixedDecimalRange, end_, AndroidIcuTextPluralRules_FixedDecimal *)

FOUNDATION_EXPORT void AndroidIcuTextPluralRules_FixedDecimalRange_initWithAndroidIcuTextPluralRules_FixedDecimal_withAndroidIcuTextPluralRules_FixedDecimal_(AndroidIcuTextPluralRules_FixedDecimalRange *self, AndroidIcuTextPluralRules_FixedDecimal *start, AndroidIcuTextPluralRules_FixedDecimal *end);

FOUNDATION_EXPORT AndroidIcuTextPluralRules_FixedDecimalRange *new_AndroidIcuTextPluralRules_FixedDecimalRange_initWithAndroidIcuTextPluralRules_FixedDecimal_withAndroidIcuTextPluralRules_FixedDecimal_(AndroidIcuTextPluralRules_FixedDecimal *start, AndroidIcuTextPluralRules_FixedDecimal *end) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidIcuTextPluralRules_FixedDecimalRange *create_AndroidIcuTextPluralRules_FixedDecimalRange_initWithAndroidIcuTextPluralRules_FixedDecimal_withAndroidIcuTextPluralRules_FixedDecimal_(AndroidIcuTextPluralRules_FixedDecimal *start, AndroidIcuTextPluralRules_FixedDecimal *end);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuTextPluralRules_FixedDecimalRange)

#endif

#if !defined (AndroidIcuTextPluralRules_FixedDecimalSamples_) && (INCLUDE_ALL_AndroidIcuTextPluralRules || defined(INCLUDE_AndroidIcuTextPluralRules_FixedDecimalSamples))
#define AndroidIcuTextPluralRules_FixedDecimalSamples_

@class AndroidIcuTextPluralRules_SampleType;
@protocol JavaUtilSet;

/*!
 @brief A list of NumberInfo that includes all values with the same visibleFractionDigitCount.
 */
__attribute__((deprecated))
@interface AndroidIcuTextPluralRules_FixedDecimalSamples : NSObject {
 @public
  /*!
   */
  AndroidIcuTextPluralRules_SampleType *sampleType_;
  /*!
   */
  id<JavaUtilSet> samples_;
  /*!
   */
  jboolean bounded_;
}

#pragma mark Public

/*!
 */
- (id<JavaUtilSet>)addSamplesWithJavaUtilSet:(id<JavaUtilSet>)result __attribute__((deprecated));

/*!
 */
- (id<JavaUtilSet>)getSamples __attribute__((deprecated));

/*!
 */
- (void)getStartEndSamplesWithJavaUtilSet:(id<JavaUtilSet>)target __attribute__((deprecated));

/*!
 */
- (NSString *)description __attribute__((deprecated));

#pragma mark Package-Private

+ (AndroidIcuTextPluralRules_FixedDecimalSamples *)parseWithNSString:(NSString *)source;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidIcuTextPluralRules_FixedDecimalSamples)

J2OBJC_FIELD_SETTER(AndroidIcuTextPluralRules_FixedDecimalSamples, sampleType_, AndroidIcuTextPluralRules_SampleType *)
J2OBJC_FIELD_SETTER(AndroidIcuTextPluralRules_FixedDecimalSamples, samples_, id<JavaUtilSet>)

FOUNDATION_EXPORT AndroidIcuTextPluralRules_FixedDecimalSamples *AndroidIcuTextPluralRules_FixedDecimalSamples_parseWithNSString_(NSString *source);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuTextPluralRules_FixedDecimalSamples)

#endif

#if !defined (AndroidIcuTextPluralRules_SimpleTokenizer_) && (INCLUDE_ALL_AndroidIcuTextPluralRules || defined(INCLUDE_AndroidIcuTextPluralRules_SimpleTokenizer))
#define AndroidIcuTextPluralRules_SimpleTokenizer_

@class AndroidIcuTextUnicodeSet;
@class IOSObjectArray;

@interface AndroidIcuTextPluralRules_SimpleTokenizer : NSObject
@property (readonly, class, strong) AndroidIcuTextUnicodeSet *BREAK_AND_IGNORE NS_SWIFT_NAME(BREAK_AND_IGNORE);
@property (readonly, class, strong) AndroidIcuTextUnicodeSet *BREAK_AND_KEEP NS_SWIFT_NAME(BREAK_AND_KEEP);

+ (AndroidIcuTextUnicodeSet *)BREAK_AND_IGNORE;

+ (AndroidIcuTextUnicodeSet *)BREAK_AND_KEEP;

#pragma mark Package-Private

- (instancetype __nonnull)init;

+ (IOSObjectArray *)splitWithNSString:(NSString *)source;

@end

J2OBJC_STATIC_INIT(AndroidIcuTextPluralRules_SimpleTokenizer)

inline AndroidIcuTextUnicodeSet *AndroidIcuTextPluralRules_SimpleTokenizer_get_BREAK_AND_IGNORE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuTextUnicodeSet *AndroidIcuTextPluralRules_SimpleTokenizer_BREAK_AND_IGNORE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextPluralRules_SimpleTokenizer, BREAK_AND_IGNORE, AndroidIcuTextUnicodeSet *)

inline AndroidIcuTextUnicodeSet *AndroidIcuTextPluralRules_SimpleTokenizer_get_BREAK_AND_KEEP(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AndroidIcuTextUnicodeSet *AndroidIcuTextPluralRules_SimpleTokenizer_BREAK_AND_KEEP;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AndroidIcuTextPluralRules_SimpleTokenizer, BREAK_AND_KEEP, AndroidIcuTextUnicodeSet *)

FOUNDATION_EXPORT void AndroidIcuTextPluralRules_SimpleTokenizer_init(AndroidIcuTextPluralRules_SimpleTokenizer *self);

FOUNDATION_EXPORT AndroidIcuTextPluralRules_SimpleTokenizer *new_AndroidIcuTextPluralRules_SimpleTokenizer_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidIcuTextPluralRules_SimpleTokenizer *create_AndroidIcuTextPluralRules_SimpleTokenizer_init(void);

FOUNDATION_EXPORT IOSObjectArray *AndroidIcuTextPluralRules_SimpleTokenizer_splitWithNSString_(NSString *source);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuTextPluralRules_SimpleTokenizer)

#endif

#if !defined (AndroidIcuTextPluralRules_KeywordStatus_) && (INCLUDE_ALL_AndroidIcuTextPluralRules || defined(INCLUDE_AndroidIcuTextPluralRules_KeywordStatus))
#define AndroidIcuTextPluralRules_KeywordStatus_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, AndroidIcuTextPluralRules_KeywordStatus_Enum) {
  AndroidIcuTextPluralRules_KeywordStatus_Enum_INVALID = 0,
  AndroidIcuTextPluralRules_KeywordStatus_Enum_SUPPRESSED = 1,
  AndroidIcuTextPluralRules_KeywordStatus_Enum_UNIQUE = 2,
  AndroidIcuTextPluralRules_KeywordStatus_Enum_BOUNDED = 3,
  AndroidIcuTextPluralRules_KeywordStatus_Enum_UNBOUNDED = 4,
};

/*!
 @brief Status of the keyword for the rules, given a set of explicit values.
 */
@interface AndroidIcuTextPluralRules_KeywordStatus : JavaLangEnum

@property (readonly, class, nonnull) AndroidIcuTextPluralRules_KeywordStatus *INVALID NS_SWIFT_NAME(INVALID);
@property (readonly, class, nonnull) AndroidIcuTextPluralRules_KeywordStatus *SUPPRESSED NS_SWIFT_NAME(SUPPRESSED);
@property (readonly, class, nonnull) AndroidIcuTextPluralRules_KeywordStatus *UNIQUE NS_SWIFT_NAME(UNIQUE);
@property (readonly, class, nonnull) AndroidIcuTextPluralRules_KeywordStatus *BOUNDED NS_SWIFT_NAME(BOUNDED);
@property (readonly, class, nonnull) AndroidIcuTextPluralRules_KeywordStatus *UNBOUNDED NS_SWIFT_NAME(UNBOUNDED);
+ (AndroidIcuTextPluralRules_KeywordStatus * __nonnull)INVALID;

+ (AndroidIcuTextPluralRules_KeywordStatus * __nonnull)SUPPRESSED;

+ (AndroidIcuTextPluralRules_KeywordStatus * __nonnull)UNIQUE;

+ (AndroidIcuTextPluralRules_KeywordStatus * __nonnull)BOUNDED;

+ (AndroidIcuTextPluralRules_KeywordStatus * __nonnull)UNBOUNDED;

#pragma mark Public

+ (AndroidIcuTextPluralRules_KeywordStatus *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (AndroidIcuTextPluralRules_KeywordStatus_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(AndroidIcuTextPluralRules_KeywordStatus)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT AndroidIcuTextPluralRules_KeywordStatus *AndroidIcuTextPluralRules_KeywordStatus_values_[];

/*!
 @brief The keyword is not valid for the rules.
 */
inline AndroidIcuTextPluralRules_KeywordStatus *AndroidIcuTextPluralRules_KeywordStatus_get_INVALID(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextPluralRules_KeywordStatus, INVALID)

/*!
 @brief The keyword is valid, but unused (it is covered by the explicit values, OR has no values for the given <code>SampleType</code>).
 */
inline AndroidIcuTextPluralRules_KeywordStatus *AndroidIcuTextPluralRules_KeywordStatus_get_SUPPRESSED(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextPluralRules_KeywordStatus, SUPPRESSED)

/*!
 @brief The keyword is valid, used, and has a single possible value (before considering explicit values).
 */
inline AndroidIcuTextPluralRules_KeywordStatus *AndroidIcuTextPluralRules_KeywordStatus_get_UNIQUE(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextPluralRules_KeywordStatus, UNIQUE)

/*!
 @brief The keyword is valid, used, not unique, and has a finite set of values.
 */
inline AndroidIcuTextPluralRules_KeywordStatus *AndroidIcuTextPluralRules_KeywordStatus_get_BOUNDED(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextPluralRules_KeywordStatus, BOUNDED)

/*!
 @brief The keyword is valid but not bounded; there indefinitely many matching values.
 */
inline AndroidIcuTextPluralRules_KeywordStatus *AndroidIcuTextPluralRules_KeywordStatus_get_UNBOUNDED(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextPluralRules_KeywordStatus, UNBOUNDED)

FOUNDATION_EXPORT IOSObjectArray *AndroidIcuTextPluralRules_KeywordStatus_values(void);

FOUNDATION_EXPORT AndroidIcuTextPluralRules_KeywordStatus *AndroidIcuTextPluralRules_KeywordStatus_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT AndroidIcuTextPluralRules_KeywordStatus *AndroidIcuTextPluralRules_KeywordStatus_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuTextPluralRules_KeywordStatus)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_AndroidIcuTextPluralRules")
