//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/platform/external/icu/android_icu4j/src/main/java/android/icu/text/Normalizer2.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidIcuTextNormalizer2")
#ifdef RESTRICT_AndroidIcuTextNormalizer2
#define INCLUDE_ALL_AndroidIcuTextNormalizer2 0
#else
#define INCLUDE_ALL_AndroidIcuTextNormalizer2 1
#endif
#undef RESTRICT_AndroidIcuTextNormalizer2

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (AndroidIcuTextNormalizer2_) && (INCLUDE_ALL_AndroidIcuTextNormalizer2 || defined(INCLUDE_AndroidIcuTextNormalizer2))
#define AndroidIcuTextNormalizer2_

@class AndroidIcuTextNormalizer2_Mode;
@class AndroidIcuTextNormalizer_QuickCheckResult;
@class JavaIoInputStream;
@class JavaLangStringBuilder;
@protocol JavaLangAppendable;
@protocol JavaLangCharSequence;

/*!
 @brief Unicode normalization functionality for standard Unicode normalization or
  for using custom mapping tables.
 All instances of this class are unmodifiable/immutable.
  The Normalizer2 class is not intended for public subclassing. 
 <p>
  The primary functions are to produce a normalized string and to detect whether
  a string is already normalized.
  The most commonly used normalization forms are those defined in
  http://www.unicode.org/unicode/reports/tr15/
  However, this API supports additional normalization forms for specialized purposes.
  For example, NFKC_Casefold is provided via getInstance("nfkc_cf", COMPOSE)
  and can be used in implementations of UTS #46. 
 <p>
  Not only are the standard compose and decompose modes supplied,
  but additional modes are provided as documented in the Mode enum. 
 <p>
  Some of the functions in this class identify normalization boundaries.
  At a normalization boundary, the portions of the string
  before it and starting from it do not interact and can be handled independently. 
 <p>
  The spanQuickCheckYes() stops at a normalization boundary.
  When the goal is a normalized string, then the text before the boundary
  can be copied, and the remainder can be processed with normalizeSecondAndAppend(). 
 <p>
  The hasBoundaryBefore(), hasBoundaryAfter() and isInert() functions test whether
  a character is guaranteed to be at a normalization boundary,
  regardless of context.
  This is used for moving from one normalization boundary to the next
  or preceding boundary, and for performing iterative normalization. 
 <p>
  Iterative normalization is useful when only a small portion of a
  longer string needs to be processed.
  For example, in ICU, iterative normalization is used by the NormalizationTransliterator
  (to avoid replacing already-normalized text) and ucol_nextSortKeyPart()
  (to process only the substring for which sort key bytes are computed). 
 <p>
  The set of normalization boundaries returned by these functions may not be
  complete: There may be more boundaries that could be returned.
  Different functions may return different boundaries.
 @author Markus W. Scherer
 */
@interface AndroidIcuTextNormalizer2 : NSObject

#pragma mark Public

/*!
 @brief Appends the second string to the first string
  (merging them at the boundary) and returns the first string.
 The result is normalized if both the strings were normalized.
  The first and second strings must be different objects.
 @param first string, should be normalized
 @param second string, should be normalized
 @return first
 */
- (JavaLangStringBuilder *)appendWithJavaLangStringBuilder:(JavaLangStringBuilder *)first
                                  withJavaLangCharSequence:(id<JavaLangCharSequence>)second;

/*!
 @brief Performs pairwise composition of a &amp; b and returns the composite if there is one.
 <p>Returns a composite code point c only if c has a two-way mapping to a+b.
  In standard Unicode normalization, this means that
  c has a canonical decomposition to a+b
  and c does not have the Full_Composition_Exclusion property. 
 <p>This function is independent of the mode of the Normalizer2.
  The default implementation returns a negative value.
 @param a A (normalization starter) code point.
 @param b Another code point.
 @return The non-negative composite code point if there is one; otherwise a negative value.
 */
- (jint)composePairWithInt:(jint)a
                   withInt:(jint)b;

/*!
 @brief Gets the combining class of c.
 The default implementation returns 0
  but all standard implementations return the Unicode Canonical_Combining_Class value.
 @param c code point
 @return c's combining class
 */
- (jint)getCombiningClassWithInt:(jint)c;

/*!
 @brief Gets the decomposition mapping of c.
 Roughly equivalent to normalizing the String form of c
  on a DECOMPOSE Normalizer2 instance, but much faster, and except that this function
  returns null if c does not have a decomposition mapping in this instance's data.
  This function is independent of the mode of the Normalizer2.
 @param c code point
 @return c's decomposition mapping, if any; otherwise null
 */
- (NSString *)getDecompositionWithInt:(jint)c;

/*!
 @brief Returns a Normalizer2 instance which uses the specified data file
  (an ICU data file if data=null, or else custom binary data)
  and which composes or decomposes text according to the specified mode.
 Returns an unmodifiable singleton instance. 
 <ul>
  <li>Use data=null for data files that are part of ICU's own data. 
 <li>Use name="nfc" and COMPOSE/DECOMPOSE for Unicode standard NFC/NFD. 
 <li>Use name="nfkc" and COMPOSE/DECOMPOSE for Unicode standard NFKC/NFKD. 
 <li>Use name="nfkc_cf" and COMPOSE for Unicode standard NFKC_CF=NFKC_Casefold. 
 </ul>
  If data!=null, then the binary data is read once and cached using the provided
  name as the key.
  If you know or expect the data to be cached already, you can use data!=null
  for non-ICU data as well. 
 <p>Any <code>java.io.IOException</code> is wrapped into a <code>android.icu.util.ICUUncheckedIOException</code>.
 @param data the binary, big-endian normalization (.nrm file) data, or null for ICU data
 @param name "nfc" or "nfkc" or "nfkc_cf" or name of custom data file
 @param mode normalization mode (compose or decompose etc.)
 @return the requested Normalizer2, if successful
 */
+ (AndroidIcuTextNormalizer2 *)getInstanceWithJavaIoInputStream:(JavaIoInputStream *)data
                                                   withNSString:(NSString *)name
                             withAndroidIcuTextNormalizer2_Mode:(AndroidIcuTextNormalizer2_Mode *)mode;

/*!
 @brief Returns a Normalizer2 instance for Unicode NFC normalization.
 Same as getInstance(null, "nfc", Mode.COMPOSE).
  Returns an unmodifiable singleton instance.
 @return the requested Normalizer2, if successful
 */
+ (AndroidIcuTextNormalizer2 *)getNFCInstance;

/*!
 @brief Returns a Normalizer2 instance for Unicode NFD normalization.
 Same as getInstance(null, "nfc", Mode.DECOMPOSE).
  Returns an unmodifiable singleton instance.
 @return the requested Normalizer2, if successful
 */
+ (AndroidIcuTextNormalizer2 *)getNFDInstance;

/*!
 @brief Returns a Normalizer2 instance for Unicode NFKC_Casefold normalization.
 Same as getInstance(null, "nfkc_cf", Mode.COMPOSE).
  Returns an unmodifiable singleton instance.
 @return the requested Normalizer2, if successful
 */
+ (AndroidIcuTextNormalizer2 *)getNFKCCasefoldInstance;

/*!
 @brief Returns a Normalizer2 instance for Unicode NFKC normalization.
 Same as getInstance(null, "nfkc", Mode.COMPOSE).
  Returns an unmodifiable singleton instance.
 @return the requested Normalizer2, if successful
 */
+ (AndroidIcuTextNormalizer2 *)getNFKCInstance;

/*!
 @brief Returns a Normalizer2 instance for Unicode NFKD normalization.
 Same as getInstance(null, "nfkc", Mode.DECOMPOSE).
  Returns an unmodifiable singleton instance.
 @return the requested Normalizer2, if successful
 */
+ (AndroidIcuTextNormalizer2 *)getNFKDInstance;

/*!
 @brief Gets the raw decomposition mapping of c.
 <p>This is similar to the getDecomposition() method but returns the
  raw decomposition mapping as specified in UnicodeData.txt or
  (for custom data) in the mapping files processed by the gennorm2 tool.
  By contrast, getDecomposition() returns the processed,
  recursively-decomposed version of this mapping. 
 <p>When used on a standard NFKC Normalizer2 instance,
  getRawDecomposition() returns the Unicode Decomposition_Mapping (dm) property. 
 <p>When used on a standard NFC Normalizer2 instance,
  it returns the Decomposition_Mapping only if the Decomposition_Type (dt) is Canonical (Can);
  in this case, the result contains either one or two code points (=1..4 Java chars). 
 <p>This function is independent of the mode of the Normalizer2.
  The default implementation returns null.
 @param c code point
 @return c's raw decomposition mapping, if any; otherwise null
 */
- (NSString *)getRawDecompositionWithInt:(jint)c;

/*!
 @brief Tests if the character always has a normalization boundary after it,
  regardless of context.
 If true, then the character does not normalization-interact with
  following characters.
  In other words, a string containing this character can be normalized
  by processing portions up to this character and after this
  character independently.
  This is used for iterative normalization. See the class documentation for details. 
 <p>
  Note that this operation may be significantly slower than hasBoundaryBefore().
 @param c character to test
 @return true if c has a normalization boundary after it
 */
- (jboolean)hasBoundaryAfterWithInt:(jint)c;

/*!
 @brief Tests if the character always has a normalization boundary before it,
  regardless of context.
 If true, then the character does not normalization-interact with
  preceding characters.
  In other words, a string containing this character can be normalized
  by processing portions before this character and starting from this
  character independently.
  This is used for iterative normalization. See the class documentation for details.
 @param c character to test
 @return true if c has a normalization boundary before it
 */
- (jboolean)hasBoundaryBeforeWithInt:(jint)c;

/*!
 @brief Tests if the character is normalization-inert.
 If true, then the character does not change, nor normalization-interact with
  preceding or following characters.
  In other words, a string containing this character can be normalized
  by processing portions before this character and after this
  character independently.
  This is used for iterative normalization. See the class documentation for details. 
 <p>
  Note that this operation may be significantly slower than hasBoundaryBefore().
 @param c character to test
 @return true if c is normalization-inert
 */
- (jboolean)isInertWithInt:(jint)c;

/*!
 @brief Tests if the string is normalized.
 Internally, in cases where the quickCheck() method would return "maybe"
  (which is only possible for the two COMPOSE modes) this method
  resolves to "yes" or "no" to provide a definitive result,
  at the cost of doing more work in those cases.
 @param s input string
 @return true if s is normalized
 */
- (jboolean)isNormalizedWithJavaLangCharSequence:(id<JavaLangCharSequence>)s;

/*!
 @brief Returns the normalized form of the source string.
 @param src source string
 @return normalized src
 */
- (NSString *)normalizeWithJavaLangCharSequence:(id<JavaLangCharSequence>)src;

/*!
 @brief Writes the normalized form of the source string to the destination Appendable
  and returns the destination Appendable.
 The source and destination strings must be different objects. 
 <p>Any <code>java.io.IOException</code> is wrapped into a <code>android.icu.util.ICUUncheckedIOException</code>.
 @param src source string
 @param dest destination Appendable; gets normalized src appended
 @return dest
 */
- (id<JavaLangAppendable>)normalizeWithJavaLangCharSequence:(id<JavaLangCharSequence>)src
                                     withJavaLangAppendable:(id<JavaLangAppendable>)dest;

/*!
 @brief Writes the normalized form of the source string to the destination string
  (replacing its contents) and returns the destination string.
 The source and destination strings must be different objects.
 @param src source string
 @param dest destination string; its contents is replaced with normalized src
 @return dest
 */
- (JavaLangStringBuilder *)normalizeWithJavaLangCharSequence:(id<JavaLangCharSequence>)src
                                   withJavaLangStringBuilder:(JavaLangStringBuilder *)dest;

/*!
 @brief Appends the normalized form of the second string to the first string
  (merging them at the boundary) and returns the first string.
 The result is normalized if the first string was normalized.
  The first and second strings must be different objects.
 @param first string, should be normalized
 @param second string, will be normalized
 @return first
 */
- (JavaLangStringBuilder *)normalizeSecondAndAppendWithJavaLangStringBuilder:(JavaLangStringBuilder *)first
                                                    withJavaLangCharSequence:(id<JavaLangCharSequence>)second;

/*!
 @brief Tests if the string is normalized.
 For the two COMPOSE modes, the result could be "maybe" in cases that
  would take a little more work to resolve definitively.
  Use spanQuickCheckYes() and normalizeSecondAndAppend() for a faster
  combination of quick check + normalization, to avoid
  re-checking the "yes" prefix.
 @param s input string
 @return the quick check result
 */
- (AndroidIcuTextNormalizer_QuickCheckResult *)quickCheckWithJavaLangCharSequence:(id<JavaLangCharSequence>)s;

/*!
 @brief Returns the end of the normalized substring of the input string.
 In other words, with <code>end=spanQuickCheckYes(s);</code>
  the substring <code>s.subSequence(0, end)</code>
  will pass the quick check with a "yes" result. 
 <p>
  The returned end index is usually one or more characters before the
  "no" or "maybe" character: The end index is at a normalization boundary.
  (See the class documentation for more about normalization boundaries.) 
 <p>
  When the goal is a normalized string and most input strings are expected
  to be normalized already, then call this method,
  and if it returns a prefix shorter than the input string,
  copy that prefix and use normalizeSecondAndAppend() for the remainder.
 @param s input string
 @return "yes" span end index
 */
- (jint)spanQuickCheckYesWithJavaLangCharSequence:(id<JavaLangCharSequence>)s;

#pragma mark Protected

/*!
 @brief Sole constructor.
 (For invocation by subclass constructors,
  typically implicit.)
 */
- (instancetype __nonnull)init __attribute__((deprecated));

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidIcuTextNormalizer2)

FOUNDATION_EXPORT AndroidIcuTextNormalizer2 *AndroidIcuTextNormalizer2_getNFCInstance(void);

FOUNDATION_EXPORT AndroidIcuTextNormalizer2 *AndroidIcuTextNormalizer2_getNFDInstance(void);

FOUNDATION_EXPORT AndroidIcuTextNormalizer2 *AndroidIcuTextNormalizer2_getNFKCInstance(void);

FOUNDATION_EXPORT AndroidIcuTextNormalizer2 *AndroidIcuTextNormalizer2_getNFKDInstance(void);

FOUNDATION_EXPORT AndroidIcuTextNormalizer2 *AndroidIcuTextNormalizer2_getNFKCCasefoldInstance(void);

FOUNDATION_EXPORT AndroidIcuTextNormalizer2 *AndroidIcuTextNormalizer2_getInstanceWithJavaIoInputStream_withNSString_withAndroidIcuTextNormalizer2_Mode_(JavaIoInputStream *data, NSString *name, AndroidIcuTextNormalizer2_Mode *mode);

FOUNDATION_EXPORT void AndroidIcuTextNormalizer2_init(AndroidIcuTextNormalizer2 *self);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuTextNormalizer2)

#endif

#if !defined (AndroidIcuTextNormalizer2_Mode_) && (INCLUDE_ALL_AndroidIcuTextNormalizer2 || defined(INCLUDE_AndroidIcuTextNormalizer2_Mode))
#define AndroidIcuTextNormalizer2_Mode_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, AndroidIcuTextNormalizer2_Mode_Enum) {
  AndroidIcuTextNormalizer2_Mode_Enum_COMPOSE = 0,
  AndroidIcuTextNormalizer2_Mode_Enum_DECOMPOSE = 1,
  AndroidIcuTextNormalizer2_Mode_Enum_FCD = 2,
  AndroidIcuTextNormalizer2_Mode_Enum_COMPOSE_CONTIGUOUS = 3,
};

/*!
 @brief Constants for normalization modes.
 For details about standard Unicode normalization forms
  and about the algorithms which are also used with custom mapping tables
  see http://www.unicode.org/unicode/reports/tr15/
 */
@interface AndroidIcuTextNormalizer2_Mode : JavaLangEnum

@property (readonly, class, nonnull) AndroidIcuTextNormalizer2_Mode *COMPOSE NS_SWIFT_NAME(COMPOSE);
@property (readonly, class, nonnull) AndroidIcuTextNormalizer2_Mode *DECOMPOSE NS_SWIFT_NAME(DECOMPOSE);
@property (readonly, class, nonnull) AndroidIcuTextNormalizer2_Mode *FCD NS_SWIFT_NAME(FCD);
@property (readonly, class, nonnull) AndroidIcuTextNormalizer2_Mode *COMPOSE_CONTIGUOUS NS_SWIFT_NAME(COMPOSE_CONTIGUOUS);
+ (AndroidIcuTextNormalizer2_Mode * __nonnull)COMPOSE;

+ (AndroidIcuTextNormalizer2_Mode * __nonnull)DECOMPOSE;

+ (AndroidIcuTextNormalizer2_Mode * __nonnull)FCD;

+ (AndroidIcuTextNormalizer2_Mode * __nonnull)COMPOSE_CONTIGUOUS;

#pragma mark Public

+ (AndroidIcuTextNormalizer2_Mode *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (AndroidIcuTextNormalizer2_Mode_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(AndroidIcuTextNormalizer2_Mode)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT AndroidIcuTextNormalizer2_Mode *AndroidIcuTextNormalizer2_Mode_values_[];

/*!
 @brief Decomposition followed by composition.
 Same as standard NFC when using an "nfc" instance.
  Same as standard NFKC when using an "nfkc" instance.
  For details about standard Unicode normalization forms
  see http://www.unicode.org/unicode/reports/tr15/
 */
inline AndroidIcuTextNormalizer2_Mode *AndroidIcuTextNormalizer2_Mode_get_COMPOSE(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextNormalizer2_Mode, COMPOSE)

/*!
 @brief Map, and reorder canonically.
 Same as standard NFD when using an "nfc" instance.
  Same as standard NFKD when using an "nfkc" instance.
  For details about standard Unicode normalization forms
  see http://www.unicode.org/unicode/reports/tr15/
 */
inline AndroidIcuTextNormalizer2_Mode *AndroidIcuTextNormalizer2_Mode_get_DECOMPOSE(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextNormalizer2_Mode, DECOMPOSE)

/*!
 @brief "Fast C or D" form.
 If a string is in this form, then further decomposition <i>without reordering</i>
  would yield the same form as DECOMPOSE.
  Text in "Fast C or D" form can be processed efficiently with data tables
  that are "canonically closed", that is, that provide equivalent data for
  equivalent text, without having to be fully normalized.<br>
  Not a standard Unicode normalization form.<br>
  Not a unique form: Different FCD strings can be canonically equivalent.<br>
  For details see http://www.unicode.org/notes/tn5/#FCD
 */
inline AndroidIcuTextNormalizer2_Mode *AndroidIcuTextNormalizer2_Mode_get_FCD(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextNormalizer2_Mode, FCD)

/*!
 @brief Compose only contiguously.
 Also known as "FCC" or "Fast C Contiguous".
  The result will often but not always be in NFC.
  The result will conform to FCD which is useful for processing.<br>
  Not a standard Unicode normalization form.<br>
  For details see http://www.unicode.org/notes/tn5/#FCC
 */
inline AndroidIcuTextNormalizer2_Mode *AndroidIcuTextNormalizer2_Mode_get_COMPOSE_CONTIGUOUS(void);
J2OBJC_ENUM_CONSTANT(AndroidIcuTextNormalizer2_Mode, COMPOSE_CONTIGUOUS)

FOUNDATION_EXPORT IOSObjectArray *AndroidIcuTextNormalizer2_Mode_values(void);

FOUNDATION_EXPORT AndroidIcuTextNormalizer2_Mode *AndroidIcuTextNormalizer2_Mode_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT AndroidIcuTextNormalizer2_Mode *AndroidIcuTextNormalizer2_Mode_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(AndroidIcuTextNormalizer2_Mode)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_AndroidIcuTextNormalizer2")
