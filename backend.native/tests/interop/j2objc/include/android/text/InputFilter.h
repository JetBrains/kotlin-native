//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/frameworks/base/core/java/android/text/InputFilter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidTextInputFilter")
#ifdef RESTRICT_AndroidTextInputFilter
#define INCLUDE_ALL_AndroidTextInputFilter 0
#else
#define INCLUDE_ALL_AndroidTextInputFilter 1
#endif
#undef RESTRICT_AndroidTextInputFilter
#ifdef INCLUDE_AndroidTextInputFilter_LengthFilter
#define INCLUDE_AndroidTextInputFilter 1
#endif
#ifdef INCLUDE_AndroidTextInputFilter_AllCaps
#define INCLUDE_AndroidTextInputFilter 1
#endif

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (AndroidTextInputFilter_) && (INCLUDE_ALL_AndroidTextInputFilter || defined(INCLUDE_AndroidTextInputFilter))
#define AndroidTextInputFilter_

@protocol AndroidTextSpanned;
@protocol JavaLangCharSequence;

/*!
 @brief InputFilters can be attached to <code>Editable</code>s to constrain the
  changes that can be made to them.
 */
@protocol AndroidTextInputFilter < JavaObject >

/*!
 @brief This method is called when the buffer is going to replace the
  range <code>dstart &hellip; dend</code> of <code>dest</code>
  with the new text from the range <code>start &hellip; end</code>
  of <code>source</code>.Return the CharSequence that you would
  like to have placed there instead, including an empty string
  if appropriate, or <code>null</code> to accept the original
  replacement.
 Be careful to not to reject 0-length replacements,
  as this is what happens when you delete text.  Also beware that
  you should not attempt to make any changes to <code>dest</code>
  from this method; you may only examine it for context. 
  Note: If <var>source</var> is an instance of <code>Spanned</code> or 
 <code>Spannable</code>, the span objects in the <var>source</var> should be 
  copied into the filtered result (i.e. the non-null return value).  
 <code>TextUtils.copySpansFrom</code> can be used for convenience.
 */
- (id<JavaLangCharSequence>)filterWithJavaLangCharSequence:(id<JavaLangCharSequence>)source
                                                   withInt:(jint)start
                                                   withInt:(jint)end
                                    withAndroidTextSpanned:(id<AndroidTextSpanned>)dest
                                                   withInt:(jint)dstart
                                                   withInt:(jint)dend;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidTextInputFilter)

J2OBJC_TYPE_LITERAL_HEADER(AndroidTextInputFilter)

#endif

#if !defined (AndroidTextInputFilter_AllCaps_) && (INCLUDE_ALL_AndroidTextInputFilter || defined(INCLUDE_AndroidTextInputFilter_AllCaps))
#define AndroidTextInputFilter_AllCaps_

@protocol AndroidTextSpanned;
@protocol JavaLangCharSequence;

/*!
 @brief This filter will capitalize all the lower case letters that are added
  through edits.
 */
@interface AndroidTextInputFilter_AllCaps : NSObject < AndroidTextInputFilter >

#pragma mark Public

- (instancetype __nonnull)init;

- (id<JavaLangCharSequence>)filterWithJavaLangCharSequence:(id<JavaLangCharSequence>)source
                                                   withInt:(jint)start
                                                   withInt:(jint)end
                                    withAndroidTextSpanned:(id<AndroidTextSpanned>)dest
                                                   withInt:(jint)dstart
                                                   withInt:(jint)dend;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidTextInputFilter_AllCaps)

FOUNDATION_EXPORT void AndroidTextInputFilter_AllCaps_init(AndroidTextInputFilter_AllCaps *self);

FOUNDATION_EXPORT AndroidTextInputFilter_AllCaps *new_AndroidTextInputFilter_AllCaps_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidTextInputFilter_AllCaps *create_AndroidTextInputFilter_AllCaps_init(void);

J2OBJC_TYPE_LITERAL_HEADER(AndroidTextInputFilter_AllCaps)

#endif

#if !defined (AndroidTextInputFilter_LengthFilter_) && (INCLUDE_ALL_AndroidTextInputFilter || defined(INCLUDE_AndroidTextInputFilter_LengthFilter))
#define AndroidTextInputFilter_LengthFilter_

@protocol AndroidTextSpanned;
@protocol JavaLangCharSequence;

/*!
 @brief This filter will constrain edits not to make the length of the text
  greater than the specified length.
 */
@interface AndroidTextInputFilter_LengthFilter : NSObject < AndroidTextInputFilter >

#pragma mark Public

- (instancetype __nonnull)initWithInt:(jint)max;

- (id<JavaLangCharSequence>)filterWithJavaLangCharSequence:(id<JavaLangCharSequence>)source
                                                   withInt:(jint)start
                                                   withInt:(jint)end
                                    withAndroidTextSpanned:(id<AndroidTextSpanned>)dest
                                                   withInt:(jint)dstart
                                                   withInt:(jint)dend;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidTextInputFilter_LengthFilter)

FOUNDATION_EXPORT void AndroidTextInputFilter_LengthFilter_initWithInt_(AndroidTextInputFilter_LengthFilter *self, jint max);

FOUNDATION_EXPORT AndroidTextInputFilter_LengthFilter *new_AndroidTextInputFilter_LengthFilter_initWithInt_(jint max) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidTextInputFilter_LengthFilter *create_AndroidTextInputFilter_LengthFilter_initWithInt_(jint max);

J2OBJC_TYPE_LITERAL_HEADER(AndroidTextInputFilter_LengthFilter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_AndroidTextInputFilter")
