//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/frameworks/base/core/java/android/text/SpannedString.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidTextSpannedString")
#ifdef RESTRICT_AndroidTextSpannedString
#define INCLUDE_ALL_AndroidTextSpannedString 0
#else
#define INCLUDE_ALL_AndroidTextSpannedString 1
#endif
#undef RESTRICT_AndroidTextSpannedString

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (AndroidTextSpannedString_) && (INCLUDE_ALL_AndroidTextSpannedString || defined(INCLUDE_AndroidTextSpannedString))
#define AndroidTextSpannedString_

#define RESTRICT_AndroidTextSpannableStringInternal 1
#define INCLUDE_AndroidTextSpannableStringInternal 1
#include "android/text/SpannableStringInternal.h"

#define RESTRICT_JavaLangCharSequence 1
#define INCLUDE_JavaLangCharSequence 1
#include "java/lang/CharSequence.h"

#define RESTRICT_AndroidTextGetChars 1
#define INCLUDE_AndroidTextGetChars 1
#include "android/text/GetChars.h"

#define RESTRICT_AndroidTextSpanned 1
#define INCLUDE_AndroidTextSpanned 1
#include "android/text/Spanned.h"

/*!
 @brief This is the class for text whose content and markup are immutable.
 For mutable markup, see <code>SpannableString</code>; for mutable text,
  see <code>SpannableStringBuilder</code>.
 */
@interface AndroidTextSpannedString : AndroidTextSpannableStringInternal < JavaLangCharSequence, AndroidTextGetChars, AndroidTextSpanned >

#pragma mark Public

- (instancetype __nonnull)initWithJavaLangCharSequence:(id<JavaLangCharSequence>)source;

- (id<JavaLangCharSequence>)subSequenceFrom:(jint)start
                                         to:(jint)end;

+ (AndroidTextSpannedString *)valueOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)source;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initPackagePrivateWithJavaLangCharSequence:(id<JavaLangCharSequence>)arg0
                                                             withInt:(jint)arg1
                                                             withInt:(jint)arg2 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidTextSpannedString)

FOUNDATION_EXPORT void AndroidTextSpannedString_initWithJavaLangCharSequence_(AndroidTextSpannedString *self, id<JavaLangCharSequence> source);

FOUNDATION_EXPORT AndroidTextSpannedString *new_AndroidTextSpannedString_initWithJavaLangCharSequence_(id<JavaLangCharSequence> source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AndroidTextSpannedString *create_AndroidTextSpannedString_initWithJavaLangCharSequence_(id<JavaLangCharSequence> source);

FOUNDATION_EXPORT AndroidTextSpannedString *AndroidTextSpannedString_valueOfWithJavaLangCharSequence_(id<JavaLangCharSequence> source);

J2OBJC_TYPE_LITERAL_HEADER(AndroidTextSpannedString)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_AndroidTextSpannedString")
