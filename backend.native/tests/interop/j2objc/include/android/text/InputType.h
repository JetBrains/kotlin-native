//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/frameworks/base/core/java/android/text/InputType.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidTextInputType")
#ifdef RESTRICT_AndroidTextInputType
#define INCLUDE_ALL_AndroidTextInputType 0
#else
#define INCLUDE_ALL_AndroidTextInputType 1
#endif
#undef RESTRICT_AndroidTextInputType

#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (AndroidTextInputType_) && (INCLUDE_ALL_AndroidTextInputType || defined(INCLUDE_AndroidTextInputType))
#define AndroidTextInputType_

/*!
 @brief Bit definitions for an integer defining the basic content type of text
  held in an <code>Editable</code> object.Supported classes may be combined
  with variations and flags to indicate desired behaviors.
 <h3>Examples</h3>
  
 <dl>
  <dt>A password field with with the password visible to the user: 
 <dd>inputType = TYPE_CLASS_TEXT |
      TYPE_TEXT_VARIATION_VISIBLE_PASSWORD 
 <dt>A multi-line postal address with automatic capitalization: 
 <dd>inputType = TYPE_CLASS_TEXT |
      TYPE_TEXT_VARIATION_POSTAL_ADDRESS |
      TYPE_TEXT_FLAG_MULTI_LINE 
 <dt>A time field: 
 <dd>inputType = TYPE_CLASS_DATETIME |
      TYPE_DATETIME_VARIATION_TIME 
 </dl>
 */
@protocol AndroidTextInputType < JavaObject >

@end

@interface AndroidTextInputType : NSObject
@property (readonly, class) jint TYPE_MASK_CLASS NS_SWIFT_NAME(TYPE_MASK_CLASS);
@property (readonly, class) jint TYPE_MASK_VARIATION NS_SWIFT_NAME(TYPE_MASK_VARIATION);
@property (readonly, class) jint TYPE_MASK_FLAGS NS_SWIFT_NAME(TYPE_MASK_FLAGS);
@property (readonly, class) jint TYPE_NULL NS_SWIFT_NAME(TYPE_NULL);
@property (readonly, class) jint TYPE_CLASS_TEXT NS_SWIFT_NAME(TYPE_CLASS_TEXT);
@property (readonly, class) jint TYPE_TEXT_FLAG_CAP_CHARACTERS NS_SWIFT_NAME(TYPE_TEXT_FLAG_CAP_CHARACTERS);
@property (readonly, class) jint TYPE_TEXT_FLAG_CAP_WORDS NS_SWIFT_NAME(TYPE_TEXT_FLAG_CAP_WORDS);
@property (readonly, class) jint TYPE_TEXT_FLAG_CAP_SENTENCES NS_SWIFT_NAME(TYPE_TEXT_FLAG_CAP_SENTENCES);
@property (readonly, class) jint TYPE_TEXT_FLAG_AUTO_CORRECT NS_SWIFT_NAME(TYPE_TEXT_FLAG_AUTO_CORRECT);
@property (readonly, class) jint TYPE_TEXT_FLAG_AUTO_COMPLETE NS_SWIFT_NAME(TYPE_TEXT_FLAG_AUTO_COMPLETE);
@property (readonly, class) jint TYPE_TEXT_FLAG_MULTI_LINE NS_SWIFT_NAME(TYPE_TEXT_FLAG_MULTI_LINE);
@property (readonly, class) jint TYPE_TEXT_FLAG_IME_MULTI_LINE NS_SWIFT_NAME(TYPE_TEXT_FLAG_IME_MULTI_LINE);
@property (readonly, class) jint TYPE_TEXT_FLAG_NO_SUGGESTIONS NS_SWIFT_NAME(TYPE_TEXT_FLAG_NO_SUGGESTIONS);
@property (readonly, class) jint TYPE_TEXT_VARIATION_NORMAL NS_SWIFT_NAME(TYPE_TEXT_VARIATION_NORMAL);
@property (readonly, class) jint TYPE_TEXT_VARIATION_URI NS_SWIFT_NAME(TYPE_TEXT_VARIATION_URI);
@property (readonly, class) jint TYPE_TEXT_VARIATION_EMAIL_ADDRESS NS_SWIFT_NAME(TYPE_TEXT_VARIATION_EMAIL_ADDRESS);
@property (readonly, class) jint TYPE_TEXT_VARIATION_EMAIL_SUBJECT NS_SWIFT_NAME(TYPE_TEXT_VARIATION_EMAIL_SUBJECT);
@property (readonly, class) jint TYPE_TEXT_VARIATION_SHORT_MESSAGE NS_SWIFT_NAME(TYPE_TEXT_VARIATION_SHORT_MESSAGE);
@property (readonly, class) jint TYPE_TEXT_VARIATION_LONG_MESSAGE NS_SWIFT_NAME(TYPE_TEXT_VARIATION_LONG_MESSAGE);
@property (readonly, class) jint TYPE_TEXT_VARIATION_PERSON_NAME NS_SWIFT_NAME(TYPE_TEXT_VARIATION_PERSON_NAME);
@property (readonly, class) jint TYPE_TEXT_VARIATION_POSTAL_ADDRESS NS_SWIFT_NAME(TYPE_TEXT_VARIATION_POSTAL_ADDRESS);
@property (readonly, class) jint TYPE_TEXT_VARIATION_PASSWORD NS_SWIFT_NAME(TYPE_TEXT_VARIATION_PASSWORD);
@property (readonly, class) jint TYPE_TEXT_VARIATION_VISIBLE_PASSWORD NS_SWIFT_NAME(TYPE_TEXT_VARIATION_VISIBLE_PASSWORD);
@property (readonly, class) jint TYPE_TEXT_VARIATION_WEB_EDIT_TEXT NS_SWIFT_NAME(TYPE_TEXT_VARIATION_WEB_EDIT_TEXT);
@property (readonly, class) jint TYPE_TEXT_VARIATION_FILTER NS_SWIFT_NAME(TYPE_TEXT_VARIATION_FILTER);
@property (readonly, class) jint TYPE_TEXT_VARIATION_PHONETIC NS_SWIFT_NAME(TYPE_TEXT_VARIATION_PHONETIC);
@property (readonly, class) jint TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS NS_SWIFT_NAME(TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS);
@property (readonly, class) jint TYPE_TEXT_VARIATION_WEB_PASSWORD NS_SWIFT_NAME(TYPE_TEXT_VARIATION_WEB_PASSWORD);
@property (readonly, class) jint TYPE_CLASS_NUMBER NS_SWIFT_NAME(TYPE_CLASS_NUMBER);
@property (readonly, class) jint TYPE_NUMBER_FLAG_SIGNED NS_SWIFT_NAME(TYPE_NUMBER_FLAG_SIGNED);
@property (readonly, class) jint TYPE_NUMBER_FLAG_DECIMAL NS_SWIFT_NAME(TYPE_NUMBER_FLAG_DECIMAL);
@property (readonly, class) jint TYPE_NUMBER_VARIATION_NORMAL NS_SWIFT_NAME(TYPE_NUMBER_VARIATION_NORMAL);
@property (readonly, class) jint TYPE_NUMBER_VARIATION_PASSWORD NS_SWIFT_NAME(TYPE_NUMBER_VARIATION_PASSWORD);
@property (readonly, class) jint TYPE_CLASS_PHONE NS_SWIFT_NAME(TYPE_CLASS_PHONE);
@property (readonly, class) jint TYPE_CLASS_DATETIME NS_SWIFT_NAME(TYPE_CLASS_DATETIME);
@property (readonly, class) jint TYPE_DATETIME_VARIATION_NORMAL NS_SWIFT_NAME(TYPE_DATETIME_VARIATION_NORMAL);
@property (readonly, class) jint TYPE_DATETIME_VARIATION_DATE NS_SWIFT_NAME(TYPE_DATETIME_VARIATION_DATE);
@property (readonly, class) jint TYPE_DATETIME_VARIATION_TIME NS_SWIFT_NAME(TYPE_DATETIME_VARIATION_TIME);

+ (jint)TYPE_MASK_CLASS;

+ (jint)TYPE_MASK_VARIATION;

+ (jint)TYPE_MASK_FLAGS;

+ (jint)TYPE_NULL;

+ (jint)TYPE_CLASS_TEXT;

+ (jint)TYPE_TEXT_FLAG_CAP_CHARACTERS;

+ (jint)TYPE_TEXT_FLAG_CAP_WORDS;

+ (jint)TYPE_TEXT_FLAG_CAP_SENTENCES;

+ (jint)TYPE_TEXT_FLAG_AUTO_CORRECT;

+ (jint)TYPE_TEXT_FLAG_AUTO_COMPLETE;

+ (jint)TYPE_TEXT_FLAG_MULTI_LINE;

+ (jint)TYPE_TEXT_FLAG_IME_MULTI_LINE;

+ (jint)TYPE_TEXT_FLAG_NO_SUGGESTIONS;

+ (jint)TYPE_TEXT_VARIATION_NORMAL;

+ (jint)TYPE_TEXT_VARIATION_URI;

+ (jint)TYPE_TEXT_VARIATION_EMAIL_ADDRESS;

+ (jint)TYPE_TEXT_VARIATION_EMAIL_SUBJECT;

+ (jint)TYPE_TEXT_VARIATION_SHORT_MESSAGE;

+ (jint)TYPE_TEXT_VARIATION_LONG_MESSAGE;

+ (jint)TYPE_TEXT_VARIATION_PERSON_NAME;

+ (jint)TYPE_TEXT_VARIATION_POSTAL_ADDRESS;

+ (jint)TYPE_TEXT_VARIATION_PASSWORD;

+ (jint)TYPE_TEXT_VARIATION_VISIBLE_PASSWORD;

+ (jint)TYPE_TEXT_VARIATION_WEB_EDIT_TEXT;

+ (jint)TYPE_TEXT_VARIATION_FILTER;

+ (jint)TYPE_TEXT_VARIATION_PHONETIC;

+ (jint)TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS;

+ (jint)TYPE_TEXT_VARIATION_WEB_PASSWORD;

+ (jint)TYPE_CLASS_NUMBER;

+ (jint)TYPE_NUMBER_FLAG_SIGNED;

+ (jint)TYPE_NUMBER_FLAG_DECIMAL;

+ (jint)TYPE_NUMBER_VARIATION_NORMAL;

+ (jint)TYPE_NUMBER_VARIATION_PASSWORD;

+ (jint)TYPE_CLASS_PHONE;

+ (jint)TYPE_CLASS_DATETIME;

+ (jint)TYPE_DATETIME_VARIATION_NORMAL;

+ (jint)TYPE_DATETIME_VARIATION_DATE;

+ (jint)TYPE_DATETIME_VARIATION_TIME;

@end

J2OBJC_EMPTY_STATIC_INIT(AndroidTextInputType)

/*!
 @brief Mask of bits that determine the overall class
  of text being given.Currently supported classes are: 
 <code>TYPE_CLASS_TEXT</code>, <code>TYPE_CLASS_NUMBER</code>,
  <code>TYPE_CLASS_PHONE</code>, <code>TYPE_CLASS_DATETIME</code>.
 <p>IME authors: If the class is not one you
  understand, assume <code>TYPE_CLASS_TEXT</code> with NO variation
  or flags.<p>
 */
inline jint AndroidTextInputType_get_TYPE_MASK_CLASS(void);
#define AndroidTextInputType_TYPE_MASK_CLASS 15
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTextInputType, TYPE_MASK_CLASS, jint)

/*!
 @brief Mask of bits that determine the variation of
  the base content class.
 */
inline jint AndroidTextInputType_get_TYPE_MASK_VARIATION(void);
#define AndroidTextInputType_TYPE_MASK_VARIATION 4080
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTextInputType, TYPE_MASK_VARIATION, jint)

/*!
 @brief Mask of bits that provide addition bit flags
  of options.
 */
inline jint AndroidTextInputType_get_TYPE_MASK_FLAGS(void);
#define AndroidTextInputType_TYPE_MASK_FLAGS 16773120
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTextInputType, TYPE_MASK_FLAGS, jint)

/*!
 @brief Special content type for when no explicit type has been specified.
 This should be interpreted to mean that the target input connection
  is not rich, it can not process and show things like candidate text nor
  retrieve the current text, so the input method will need to run in a
  limited "generate key events" mode, if it supports it. Note that some
  input methods may not support it, for example a voice-based input
  method will likely not be able to generate key events even if this
  flag is set.
 */
inline jint AndroidTextInputType_get_TYPE_NULL(void);
#define AndroidTextInputType_TYPE_NULL 0
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTextInputType, TYPE_NULL, jint)

/*!
 @brief Class for normal text.This class supports the following flags (only
  one of which should be set): 
 <code>TYPE_TEXT_FLAG_CAP_CHARACTERS</code>,
  <code>TYPE_TEXT_FLAG_CAP_WORDS</code>, and.
 <code>TYPE_TEXT_FLAG_CAP_SENTENCES</code>.  It also supports the
  following variations: 
 <code>TYPE_TEXT_VARIATION_NORMAL</code>, and 
 <code>TYPE_TEXT_VARIATION_URI</code>.  If you do not recognize the
  variation, normal should be assumed.
 */
inline jint AndroidTextInputType_get_TYPE_CLASS_TEXT(void);
#define AndroidTextInputType_TYPE_CLASS_TEXT 1
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTextInputType, TYPE_CLASS_TEXT, jint)

/*!
 @brief Flag for <code>TYPE_CLASS_TEXT</code>: capitalize all characters.Overrides
  <code>TYPE_TEXT_FLAG_CAP_WORDS</code> and 
 <code>TYPE_TEXT_FLAG_CAP_SENTENCES</code>.
 This value is explicitly defined
  to be the same as <code>TextUtils.CAP_MODE_CHARACTERS</code>. Of course,
  this only affects languages where there are upper-case and lower-case letters.
 */
inline jint AndroidTextInputType_get_TYPE_TEXT_FLAG_CAP_CHARACTERS(void);
#define AndroidTextInputType_TYPE_TEXT_FLAG_CAP_CHARACTERS 4096
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTextInputType, TYPE_TEXT_FLAG_CAP_CHARACTERS, jint)

/*!
 @brief Flag for <code>TYPE_CLASS_TEXT</code>: capitalize the first character of
  every word.Overrides <code>TYPE_TEXT_FLAG_CAP_SENTENCES</code>.
 This
  value is explicitly defined
  to be the same as <code>TextUtils.CAP_MODE_WORDS</code>. Of course,
  this only affects languages where there are upper-case and lower-case letters.
 */
inline jint AndroidTextInputType_get_TYPE_TEXT_FLAG_CAP_WORDS(void);
#define AndroidTextInputType_TYPE_TEXT_FLAG_CAP_WORDS 8192
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTextInputType, TYPE_TEXT_FLAG_CAP_WORDS, jint)

/*!
 @brief Flag for <code>TYPE_CLASS_TEXT</code>: capitalize the first character of
  each sentence.This value is explicitly defined
  to be the same as <code>TextUtils.CAP_MODE_SENTENCES</code>.
 For example
  in English it means to capitalize after a period and a space (note that other
  languages may have different characters for period, or not use spaces,
  or use different grammatical rules). Of course,
  this only affects languages where there are upper-case and lower-case letters.
 */
inline jint AndroidTextInputType_get_TYPE_TEXT_FLAG_CAP_SENTENCES(void);
#define AndroidTextInputType_TYPE_TEXT_FLAG_CAP_SENTENCES 16384
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTextInputType, TYPE_TEXT_FLAG_CAP_SENTENCES, jint)

/*!
 @brief Flag for <code>TYPE_CLASS_TEXT</code>: the user is entering free-form
  text that should have auto-correction applied to it.Without this flag,
  the IME will not try to correct typos.
 You should always set this flag
  unless you really expect users to type non-words in this field, for
  example to choose a name for a character in a game.
  Contrast this with <code>TYPE_TEXT_FLAG_AUTO_COMPLETE</code> and 
 <code>TYPE_TEXT_FLAG_NO_SUGGESTIONS</code>:
  <code>TYPE_TEXT_FLAG_AUTO_CORRECT</code> means that the IME will try to
  auto-correct typos as the user is typing, but does not define whether
  the IME offers an interface to show suggestions.
 */
inline jint AndroidTextInputType_get_TYPE_TEXT_FLAG_AUTO_CORRECT(void);
#define AndroidTextInputType_TYPE_TEXT_FLAG_AUTO_CORRECT 32768
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTextInputType, TYPE_TEXT_FLAG_AUTO_CORRECT, jint)

/*!
 @brief Flag for <code>TYPE_CLASS_TEXT</code>: the text editor (which means
  the application) is performing auto-completion of the text being entered
  based on its own semantics, which it will present to the user as they type.
 This generally means that the input method should not be showing
  candidates itself, but can expect the editor to supply its own
  completions/candidates from
  InputMethodSession.displayCompletions() as a result of the editor calling
  InputMethodManager.displayCompletions().
  Note the contrast with <code>TYPE_TEXT_FLAG_AUTO_CORRECT</code> and 
 <code>TYPE_TEXT_FLAG_NO_SUGGESTIONS</code>:
  <code>TYPE_TEXT_FLAG_AUTO_COMPLETE</code> means the editor should show an
  interface for displaying suggestions, but instead of supplying its own
  it will rely on the Editor to pass completions/corrections.
 */
inline jint AndroidTextInputType_get_TYPE_TEXT_FLAG_AUTO_COMPLETE(void);
#define AndroidTextInputType_TYPE_TEXT_FLAG_AUTO_COMPLETE 65536
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTextInputType, TYPE_TEXT_FLAG_AUTO_COMPLETE, jint)

/*!
 @brief Flag for <code>TYPE_CLASS_TEXT</code>: multiple lines of text can be
  entered into the field.If this flag is not set, the text field 
  will be constrained to a single line.
 The IME may also choose not to
  display an enter key when this flag is not set, as there should be no
  need to create new lines.
 */
inline jint AndroidTextInputType_get_TYPE_TEXT_FLAG_MULTI_LINE(void);
#define AndroidTextInputType_TYPE_TEXT_FLAG_MULTI_LINE 131072
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTextInputType, TYPE_TEXT_FLAG_MULTI_LINE, jint)

/*!
 @brief Flag for <code>TYPE_CLASS_TEXT</code>: the regular text view associated
  with this should not be multi-line, but when a fullscreen input method
  is providing text it should use multiple lines if it can.
 */
inline jint AndroidTextInputType_get_TYPE_TEXT_FLAG_IME_MULTI_LINE(void);
#define AndroidTextInputType_TYPE_TEXT_FLAG_IME_MULTI_LINE 262144
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTextInputType, TYPE_TEXT_FLAG_IME_MULTI_LINE, jint)

/*!
 @brief Flag for <code>TYPE_CLASS_TEXT</code>: the input method does not need to
  display any dictionary-based candidates.This is useful for text views that
  do not contain words from the language and do not benefit from any
  dictionary-based completions or corrections.
 It overrides the 
 <code>TYPE_TEXT_FLAG_AUTO_CORRECT</code> value when set.
  Please avoid using this unless you are certain this is what you want.
  Many input methods need suggestions to work well, for example the ones
  based on gesture typing. Consider clearing 
 <code>TYPE_TEXT_FLAG_AUTO_CORRECT</code> instead if you just do not
  want the IME to correct typos.
  Note the contrast with <code>TYPE_TEXT_FLAG_AUTO_CORRECT</code> and 
 <code>TYPE_TEXT_FLAG_AUTO_COMPLETE</code>:
  <code>TYPE_TEXT_FLAG_NO_SUGGESTIONS</code> means the IME should never
  show an interface to display suggestions. Most IMEs will also take this to
  mean they should not try to auto-correct what the user is typing.
 */
inline jint AndroidTextInputType_get_TYPE_TEXT_FLAG_NO_SUGGESTIONS(void);
#define AndroidTextInputType_TYPE_TEXT_FLAG_NO_SUGGESTIONS 524288
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTextInputType, TYPE_TEXT_FLAG_NO_SUGGESTIONS, jint)

/*!
 @brief Default variation of <code>TYPE_CLASS_TEXT</code>: plain old normal text.
 */
inline jint AndroidTextInputType_get_TYPE_TEXT_VARIATION_NORMAL(void);
#define AndroidTextInputType_TYPE_TEXT_VARIATION_NORMAL 0
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTextInputType, TYPE_TEXT_VARIATION_NORMAL, jint)

/*!
 @brief Variation of <code>TYPE_CLASS_TEXT</code>: entering a URI.
 */
inline jint AndroidTextInputType_get_TYPE_TEXT_VARIATION_URI(void);
#define AndroidTextInputType_TYPE_TEXT_VARIATION_URI 16
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTextInputType, TYPE_TEXT_VARIATION_URI, jint)

/*!
 @brief Variation of <code>TYPE_CLASS_TEXT</code>: entering an e-mail address.
 */
inline jint AndroidTextInputType_get_TYPE_TEXT_VARIATION_EMAIL_ADDRESS(void);
#define AndroidTextInputType_TYPE_TEXT_VARIATION_EMAIL_ADDRESS 32
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTextInputType, TYPE_TEXT_VARIATION_EMAIL_ADDRESS, jint)

/*!
 @brief Variation of <code>TYPE_CLASS_TEXT</code>: entering the subject line of
  an e-mail.
 */
inline jint AndroidTextInputType_get_TYPE_TEXT_VARIATION_EMAIL_SUBJECT(void);
#define AndroidTextInputType_TYPE_TEXT_VARIATION_EMAIL_SUBJECT 48
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTextInputType, TYPE_TEXT_VARIATION_EMAIL_SUBJECT, jint)

/*!
 @brief Variation of <code>TYPE_CLASS_TEXT</code>: entering a short, possibly informal
  message such as an instant message or a text message.
 */
inline jint AndroidTextInputType_get_TYPE_TEXT_VARIATION_SHORT_MESSAGE(void);
#define AndroidTextInputType_TYPE_TEXT_VARIATION_SHORT_MESSAGE 64
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTextInputType, TYPE_TEXT_VARIATION_SHORT_MESSAGE, jint)

/*!
 @brief Variation of <code>TYPE_CLASS_TEXT</code>: entering the content of a long, possibly 
  formal message such as the body of an e-mail.
 */
inline jint AndroidTextInputType_get_TYPE_TEXT_VARIATION_LONG_MESSAGE(void);
#define AndroidTextInputType_TYPE_TEXT_VARIATION_LONG_MESSAGE 80
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTextInputType, TYPE_TEXT_VARIATION_LONG_MESSAGE, jint)

/*!
 @brief Variation of <code>TYPE_CLASS_TEXT</code>: entering the name of a person.
 */
inline jint AndroidTextInputType_get_TYPE_TEXT_VARIATION_PERSON_NAME(void);
#define AndroidTextInputType_TYPE_TEXT_VARIATION_PERSON_NAME 96
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTextInputType, TYPE_TEXT_VARIATION_PERSON_NAME, jint)

/*!
 @brief Variation of <code>TYPE_CLASS_TEXT</code>: entering a postal mailing address.
 */
inline jint AndroidTextInputType_get_TYPE_TEXT_VARIATION_POSTAL_ADDRESS(void);
#define AndroidTextInputType_TYPE_TEXT_VARIATION_POSTAL_ADDRESS 112
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTextInputType, TYPE_TEXT_VARIATION_POSTAL_ADDRESS, jint)

/*!
 @brief Variation of <code>TYPE_CLASS_TEXT</code>: entering a password.
 */
inline jint AndroidTextInputType_get_TYPE_TEXT_VARIATION_PASSWORD(void);
#define AndroidTextInputType_TYPE_TEXT_VARIATION_PASSWORD 128
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTextInputType, TYPE_TEXT_VARIATION_PASSWORD, jint)

/*!
 @brief Variation of <code>TYPE_CLASS_TEXT</code>: entering a password, which should
  be visible to the user.
 */
inline jint AndroidTextInputType_get_TYPE_TEXT_VARIATION_VISIBLE_PASSWORD(void);
#define AndroidTextInputType_TYPE_TEXT_VARIATION_VISIBLE_PASSWORD 144
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTextInputType, TYPE_TEXT_VARIATION_VISIBLE_PASSWORD, jint)

/*!
 @brief Variation of <code>TYPE_CLASS_TEXT</code>: entering text inside of a web form.
 */
inline jint AndroidTextInputType_get_TYPE_TEXT_VARIATION_WEB_EDIT_TEXT(void);
#define AndroidTextInputType_TYPE_TEXT_VARIATION_WEB_EDIT_TEXT 160
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTextInputType, TYPE_TEXT_VARIATION_WEB_EDIT_TEXT, jint)

/*!
 @brief Variation of <code>TYPE_CLASS_TEXT</code>: entering text to filter contents
  of a list etc.
 */
inline jint AndroidTextInputType_get_TYPE_TEXT_VARIATION_FILTER(void);
#define AndroidTextInputType_TYPE_TEXT_VARIATION_FILTER 176
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTextInputType, TYPE_TEXT_VARIATION_FILTER, jint)

/*!
 @brief Variation of <code>TYPE_CLASS_TEXT</code>: entering text for phonetic
  pronunciation, such as a phonetic name field in contacts.This is mostly
  useful for languages where one spelling may have several phonetic
  readings, like Japanese.
 */
inline jint AndroidTextInputType_get_TYPE_TEXT_VARIATION_PHONETIC(void);
#define AndroidTextInputType_TYPE_TEXT_VARIATION_PHONETIC 192
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTextInputType, TYPE_TEXT_VARIATION_PHONETIC, jint)

/*!
 @brief Variation of <code>TYPE_CLASS_TEXT</code>: entering e-mail address inside
  of a web form.This was added in HONEYCOMB.
 An IME must target
  this API version or later to see this input type; if it doesn't, a request
  for this type will be seen as <code>TYPE_TEXT_VARIATION_EMAIL_ADDRESS</code>
  when passed through EditorInfo.makeCompatible(int).
 */
inline jint AndroidTextInputType_get_TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS(void);
#define AndroidTextInputType_TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS 208
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTextInputType, TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS, jint)

/*!
 @brief Variation of <code>TYPE_CLASS_TEXT</code>: entering password inside
  of a web form.This was added in HONEYCOMB.
 An IME must target
  this API version or later to see this input type; if it doesn't, a request
  for this type will be seen as EditorInfo.makeCompatible(int).
 */
inline jint AndroidTextInputType_get_TYPE_TEXT_VARIATION_WEB_PASSWORD(void);
#define AndroidTextInputType_TYPE_TEXT_VARIATION_WEB_PASSWORD 224
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTextInputType, TYPE_TEXT_VARIATION_WEB_PASSWORD, jint)

/*!
 @brief Class for numeric text.This class supports the following flags: 
 <code>TYPE_NUMBER_FLAG_SIGNED</code> and 
 <code>TYPE_NUMBER_FLAG_DECIMAL</code>.
 It also supports the following
  variations: <code>TYPE_NUMBER_VARIATION_NORMAL</code> and 
 <code>TYPE_NUMBER_VARIATION_PASSWORD</code>.
  <p>IME authors: If you do not recognize
  the variation, normal should be assumed.</p>
 */
inline jint AndroidTextInputType_get_TYPE_CLASS_NUMBER(void);
#define AndroidTextInputType_TYPE_CLASS_NUMBER 2
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTextInputType, TYPE_CLASS_NUMBER, jint)

/*!
 @brief Flag of <code>TYPE_CLASS_NUMBER</code>: the number is signed, allowing
  a positive or negative sign at the start.
 */
inline jint AndroidTextInputType_get_TYPE_NUMBER_FLAG_SIGNED(void);
#define AndroidTextInputType_TYPE_NUMBER_FLAG_SIGNED 4096
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTextInputType, TYPE_NUMBER_FLAG_SIGNED, jint)

/*!
 @brief Flag of <code>TYPE_CLASS_NUMBER</code>: the number is decimal, allowing
  a decimal point to provide fractional values.
 */
inline jint AndroidTextInputType_get_TYPE_NUMBER_FLAG_DECIMAL(void);
#define AndroidTextInputType_TYPE_NUMBER_FLAG_DECIMAL 8192
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTextInputType, TYPE_NUMBER_FLAG_DECIMAL, jint)

/*!
 @brief Default variation of <code>TYPE_CLASS_NUMBER</code>: plain normal
  numeric text.This was added in HONEYCOMB.
 An IME must target
  this API version or later to see this input type; if it doesn't, a request
  for this type will be dropped when passed through
  EditorInfo.makeCompatible(int).
 */
inline jint AndroidTextInputType_get_TYPE_NUMBER_VARIATION_NORMAL(void);
#define AndroidTextInputType_TYPE_NUMBER_VARIATION_NORMAL 0
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTextInputType, TYPE_NUMBER_VARIATION_NORMAL, jint)

/*!
 @brief Variation of <code>TYPE_CLASS_NUMBER</code>: entering a numeric password.
 This was added in HONEYCOMB.  An
  IME must target this API version or later to see this input type; if it
  doesn't, a request for this type will be dropped when passed
  through EditorInfo.makeCompatible(int).
 */
inline jint AndroidTextInputType_get_TYPE_NUMBER_VARIATION_PASSWORD(void);
#define AndroidTextInputType_TYPE_NUMBER_VARIATION_PASSWORD 16
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTextInputType, TYPE_NUMBER_VARIATION_PASSWORD, jint)

/*!
 @brief Class for a phone number.This class currently supports no variations
  or flags.
 */
inline jint AndroidTextInputType_get_TYPE_CLASS_PHONE(void);
#define AndroidTextInputType_TYPE_CLASS_PHONE 3
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTextInputType, TYPE_CLASS_PHONE, jint)

/*!
 @brief Class for dates and times.It supports the
  following variations: 
 <code>TYPE_DATETIME_VARIATION_NORMAL</code>
  <code>TYPE_DATETIME_VARIATION_DATE</code>, and 
 <code>TYPE_DATETIME_VARIATION_TIME</code>.
 */
inline jint AndroidTextInputType_get_TYPE_CLASS_DATETIME(void);
#define AndroidTextInputType_TYPE_CLASS_DATETIME 4
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTextInputType, TYPE_CLASS_DATETIME, jint)

/*!
 @brief Default variation of <code>TYPE_CLASS_DATETIME</code>: allows entering
  both a date and time.
 */
inline jint AndroidTextInputType_get_TYPE_DATETIME_VARIATION_NORMAL(void);
#define AndroidTextInputType_TYPE_DATETIME_VARIATION_NORMAL 0
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTextInputType, TYPE_DATETIME_VARIATION_NORMAL, jint)

/*!
 @brief Default variation of <code>TYPE_CLASS_DATETIME</code>: allows entering
  only a date.
 */
inline jint AndroidTextInputType_get_TYPE_DATETIME_VARIATION_DATE(void);
#define AndroidTextInputType_TYPE_DATETIME_VARIATION_DATE 16
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTextInputType, TYPE_DATETIME_VARIATION_DATE, jint)

/*!
 @brief Default variation of <code>TYPE_CLASS_DATETIME</code>: allows entering
  only a time.
 */
inline jint AndroidTextInputType_get_TYPE_DATETIME_VARIATION_TIME(void);
#define AndroidTextInputType_TYPE_DATETIME_VARIATION_TIME 32
J2OBJC_STATIC_FIELD_CONSTANT(AndroidTextInputType, TYPE_DATETIME_VARIATION_TIME, jint)

J2OBJC_TYPE_LITERAL_HEADER(AndroidTextInputType)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif

#pragma clang diagnostic pop
#pragma pop_macro("INCLUDE_ALL_AndroidTextInputType")
