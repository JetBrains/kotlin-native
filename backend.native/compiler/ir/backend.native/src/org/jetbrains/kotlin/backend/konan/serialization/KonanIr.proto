
syntax = "proto2";
package org.jetbrains.kotlin.serialization;

import "org/jetbrains/kotlin/backend/konan/serialization/descriptors.proto1";
option java_outer_classname = "KonanIr";
option optimize_for = LITE_RUNTIME;

// This is subject to change.
// One can think of it as a 'descriptor reference'.
// The real descriptor data is encoded in KonanLinkdData.
message KotlinDescriptor {
    enum Kind {
        FUNCTION = 1;
        VARIABLE = 2;
        CLASS = 3;
        VALUE_PARAMETER = 4;
        CONSTRUCTOR = 5;
        TYPE_PARAMETER = 6;
        RECEIVER = 7;
        ACCESSOR = 8;
    }
    // TODO: Use the string table index.
    optional string name = 1;
    required Kind kind = 2;
    required UniqId uniq_id = 3;
    required UniqId original_uniq_id = 4;
    // index in fq name table
    optional int32 class_or_package = 5;

    // Descriptor kind specific fields.
    // TODO: consider introducing specific messages
    // for functions, variables etc.
    optional KotlinType type = 6;
    repeated KotlinDescriptor value_parameter = 7;
    repeated KotlinDescriptor type_parameter = 8;
    optional UniqId dispatch_receiver_uniq_id = 9;
    optional UniqId extension_receiver_uniq_id = 10;
    optional KotlinType extension_receiver_type = 11;
    optional LocalDeclaration ir_local_declaration = 12;
}

message UniqId {
    required int64 index = 1;
}

// Inner descriptors used for inlining.
message DeclarationDescriptor {
    // These are ProtoBuf.Function, ProtoBuf.Class etc
    oneof descriptor {
        Function function = 1;
        Class clazz = 2;
        Property property = 3;
        Constructor constructor = 4;
    }
}
message LocalDeclaration {
    required DeclarationDescriptor descriptor = 1;
}

message KotlinType {
    required int32 index = 1;
    required bool isCaptured = 2; // TODO: make it a flag set?
    optional string debug_text = 3; // TODO: remove me
}

message Coordinates {
    required int32 start_offset = 1;
    required int32 end_offset = 2;
}

message TypeMap {
    message Pair {
        required  KotlinDescriptor descriptor = 1;
        required  KotlinType type = 2;
    }
    repeated Pair pair = 1;
}

/* ------ IrExpressions --------------------------------------------- */

message IrBreak {
    required int32 loop_id = 1;
    optional string label = 2;
}

message IrBlock {
    required bool is_transparent_scope = 1;
    required bool is_lambda_origin = 2;
    repeated IrStatement statement = 3; 
}

message MemberAccessCommon {
    required TypeMap type_map = 3;
    optional IrExpression dispatch_receiver = 5;
    optional IrExpression extension_receiver = 6;
    repeated IrExpression value_argument = 7;
}

message IrCall {
    enum Primitive {
        NOT_PRIMITIVE = 1;
        NULLARY = 2;
        UNARY = 3;
        BINARY = 4;
    }
    required Primitive kind = 1;
    required KotlinDescriptor descriptor = 2;
    required MemberAccessCommon member_access = 3;
    optional KotlinDescriptor super = 4;
}

message IrCallableReference {
    required KotlinDescriptor descriptor = 1;
    required TypeMap type_map = 2;
}

message IrConst {
    oneof value {
        bool    null = 1;
        bool    boolean = 2;
        int32   char = 3;
        int32   byte = 4;
        int32   short = 5;
        int32   int = 6;
        int64   long = 7;
        float   float = 8;
        double  double = 9;
        string  string = 10;
    }
}

message IrContinue {
    required int32 loop_id = 1;
    optional string label = 2;
}

message IrDelegatingConstructorCall {
    required KotlinDescriptor descriptor = 1;
    required MemberAccessCommon member_access = 2;
}

message IrEnumConstructorCall {
    required KotlinDescriptor descriptor = 1;
    required MemberAccessCommon member_access = 2;
}

message IrGetEnumValue {
    required KotlinType type = 1;
    required KotlinDescriptor descriptor = 2;
}

message IrGetValue {
    required KotlinDescriptor descriptor = 1;
}

message IrGetObject {
    required KotlinDescriptor descriptor = 1;
}

message IrInstanceInitializerCall {
    required KotlinDescriptor descriptor = 1;
}

message IrReturn {
    required KotlinDescriptor return_target = 1;
    required IrExpression value = 2;
}

message IrSetVariable {
    required KotlinDescriptor descriptor = 1;
    required IrExpression value = 2;
}

message IrStringConcat {
    repeated IrExpression argument = 1; 
}

message IrThrow {
    required IrExpression value = 1;
}

message IrTry {
    required IrExpression result = 1;
    repeated IrStatement catch = 2;
    optional IrExpression finally = 3;
}

message IrTypeOp {
    required IrTypeOperator operator = 1;
    required KotlinType operand = 2;
    required IrExpression argument = 3;
}

message IrVararg {
    required KotlinType element_type = 1;
}

message IrWhen {
    repeated IrStatement branch = 1;
}

message IrWhile {
    required int32 loop_id = 1;
    required IrExpression condition = 2;
    optional string label = 3;
    optional IrExpression body = 4;
}

// TODO: we need an extension mechanism to accomodate new 
// IR operators in upcoming releases.
message IrOperation {
    oneof operation {
        IrBlock block = 1;
        IrBreak break = 2;
        IrCall call = 3;
        IrCallableReference callable_reference = 4;
        IrConst const = 5;
        IrContinue continue = 6;
        IrDelegatingConstructorCall delegating_constructor_call = 7;
        IrEnumConstructorCall enum_constructor_call = 8;
        IrGetEnumValue get_enum_value = 9;
        IrGetValue get_value = 10;
        IrGetObject get_object = 11;
        IrInstanceInitializerCall instance_initializer_call = 12;
        IrReturn return = 13;
        IrSetVariable set_variable = 14;
        IrStringConcat string_concat = 15;
        IrThrow throw = 16;
        IrTry try = 17;
        IrTypeOp type_op = 18;
        IrVararg vararg = 19;
        IrWhen when = 20;
        IrWhile while = 21;
    }
}

enum IrTypeOperator {
    CAST = 1;
    IMPLICIT_CAST = 2;
    IMPLICIT_NOTNULL = 3;
    IMPLICIT_COERCION_TO_UNIT = 4;
    SAFE_CAST = 5;
    INSTANCEOF = 6;
    NOT_INSTANCEOF = 7;
}

message IrExpression {
    required IrOperation operation = 1;
    required KotlinType type = 2;
    required Coordinates coordinates = 3;
}


/* ------ Declarations --------------------------------------------- */

message IrFunc {
    message DefaultArgument {
        required int32 position = 1;
        required IrExpression value = 2;
    }
    optional IrStatement body = 1;
    repeated DefaultArgument default_argument = 2;
}

message IrVar {
    optional IrExpression initializer = 1;
}

message IrClass {
    repeated IrDeclaration member = 1;
}

message IrEnumEntry {
    required IrExpression initializer = 1;
    optional IrDeclaration corresponding_class = 2;
}

// TODO: we need an extension mechanism to accomodate new 
// IR operators in upcoming releases.
message IrDeclarator {
    oneof symbol {
        IrVar variable = 1;
        IrFunc function = 2;
        IrClass ir_class = 3;
        IrEnumEntry ir_enum_entry = 4;
    }
}

message IrDeclaration {
    required KotlinDescriptor descriptor = 1;
    required Coordinates coordinates = 2;
    required IrDeclarator declarator = 3;
    repeated IrDeclaration nested = 4;
}

/* ------- IrStatements --------------------------------------------- */

message IrBranch {
    required IrExpression condition = 1;
    required IrExpression result = 2;
}

message IrBlockBody {
    repeated IrStatement statement = 1;
}

message IrCatch {
    required KotlinDescriptor parameter = 1;
    required IrExpression result = 2;
}

// Let's try to map IrElement as well as IrStatement to IrStatement.
message IrStatement {
    required Coordinates coordinates = 1;
    oneof statement {
        IrDeclaration declaration = 2;
        IrExpression expression = 3;
        IrBlockBody block_body = 4;
        IrBranch branch = 5;
        IrCatch catch = 6;
    }
}

