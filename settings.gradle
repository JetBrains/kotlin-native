
/*
 * Copyright 2010-2017 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

include ':dependencies'
include ':Interop:Indexer'
include ':Interop:JsRuntime'
include ':Interop:StubGenerator'
include ':Interop:Runtime'
include ':llvmCoverageMappingC'
include ':llvmDebugInfoC'
include ':libclangext'
include ':klib'
include ':backend.native'
include ':runtime'
include ':common'
include ':backend.native:tests'
include ':backend.native:debugger-tests'
include ':utilities:basic-utils'
include ':utilities:cli-runner'
include 'dependencyPacker'

include ':performance'
include ':performance:ring'
include ':performance:cinterop'
include ':performance:helloworld'
include ':performance:numerical'
include ':performance:videoplayer'
include ':performance:framework'
include ':performance:startup'
if (System.getProperty("os.name") == "Mac OS X") {
    include ':performance:objcinterop'
    include ':performance:swiftinterop'
    if (hasProperty("runExcludedBenchmarks")) {
        include ':performance:KotlinVsSwift'
        include ':performance:KotlinVsSwift:ring'
    }
}

include ':platformLibs'
include ':endorsedLibraries'
include ':endorsedLibraries:kotlinx.cli'

if (hasProperty("kotlinProjectPath")) {
    include ':runtime:generator'
    includeBuild(kotlinProjectPath) {
        dependencySubstitution {
            substitute module("org.jetbrains.kotlin:kotlin-compiler:$kotlinVersion") with project(':include:kotlin-compiler')
            substitute module("org.jetbrains.kotlin:kotlin-stdlib-common:$kotlinStdlibVersion") with project(':include:kotlin-stdlib-common-sources')
            substitute module("org.jetbrains.kotlin:kotlin-stdlib-gen:$kotlinStdlibVersion") with project(':tools:kotlin-stdlib-gen')
            substitute module("org.jetbrains.kotlin:kotlin-util-io:$kotlinVersion") with project(':kotlin-util-io')
            substitute module("org.jetbrains.kotlin:kotlin-util-klib:$kotlinVersion") with project(':kotlin-util-klib')
            substitute module("org.jetbrains.kotlin:kotlin-util-klib-metadata:$kotlinVersion") with project(':kotlin-util-klib-metadata')
            substitute module("org.jetbrains.kotlin:kotlin-native-utils:$kotlinVersion") with project(':native:kotlin-native-utils')
            substitute module("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion") with project(':kotlin-reflect')
            substitute module("org.jetbrains.kotlinx:kotlinx-metadata-klib") with project(':kotlinx-metadata-klib')
        }
    }
}

includeBuild 'shared'
includeBuild 'build-tools'
includeBuild 'tools/kotlin-native-gradle-plugin'

