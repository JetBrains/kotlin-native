import org.jetbrains.kotlin.konan.target.KonanTarget
import org.jetbrains.kotlin.konan.target.TargetManager
import org.jetbrains.kotlin.konan.util.DefFile


import static org.jetbrains.kotlin.konan.util.VisibleNamedKt.getVisibleName

apply plugin: 'konan'

buildscript {
    repositories {
        mavenCentral()
        maven {
            url kotlinCompilerRepo
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-native-gradle-plugin"
    }

    ext.konanHome = distDir.absolutePath
    ext.jvmArgs = project.findProperty("platformLibsJvmArgs") ?: "-Xmx6G"
    ext.setProperty("konan.home", konanHome)
    ext.setProperty("konan.jvmArgs", jvmArgs)
}

//#region Util functions.
private ArrayList<DefFile> targetDefFiles(String target) {
    def platform = targetToPlatform(target)
    def substitution = ['arch': target,
                        'os'  : targetToOs(target)]
    file("src/platform/$platform")
            .listFiles()
            .findAll { it.name.endsWith(".def") }
            // The libz.a/libz.so and zlib.h are missing in raspberrypi and mips sysroots.
            // Just workaround it until we have sysroots corrected.
            .findAll { ! ((target == 'raspberrypi' || target == 'linux_mips32' || target == 'linux_mipsel32') && it.name == 'zlib.def') }
            .collect { new DefFile(it, substitution) }
}

private String targetToPlatform(String target) {
    getVisibleName(new TargetManager(target).target.family)
}

private String targetToOs(String target) {
    new TargetManager(target).target.detailedName
}

private String defFileToLibName(String target, String name) {
    return "$target-$name".toString()
}

// TODO: Implement as a part of the gradle plugin
class KlibInstall extends Exec {
    @InputFile
    public File klib
    public File repo

    @Input
    public String target

    @Override
    Task configure(Closure config) {
        super.configure(config)

        def konanHome = project.property("konan.home")
        def suffix = (TargetManager.host == KonanTarget.MINGW) ? ".bat" : ""
        def klibProgram = "$konanHome/bin/klib$suffix"

        doFirst {
            repo.mkdirs()

            commandLine klibProgram,
                    'install', klib.absolutePath,
                    '-target', target,
                    '-repository', repo.absolutePath
        }
    }

    @OutputDirectory
    File getInstallDir() {
        def klibName = klib.name.take(klib.name.lastIndexOf('.'))
        return project.file("$repo.absolutePath/$klibName")
    }
}

//#endregion

targetList.each { target ->

    ArrayList<Task> installTasks = []

    targetDefFiles(target).each { df ->
        def libName = defFileToLibName(target, df.name)

        konanArtifacts {
            interop (libName, targets: [target]) {
                defFile df.file
                artifactName df.name
                noDefaultLibs true
                libraries {
                    files df.config.depends.collect { "$konanHome/klib/platform/$target/$it" }
                }
                extraOpts '--purge_user_libs'
            }
        }

        def libTask = konanArtifacts."$libName"."$target"
        libTask.dependsOn df.config.depends.collect{ defFileToLibName(target, it) }
        libTask.dependsOn ':cross_dist'

        task "$libName"(type: KlibInstall) {
            klib = libTask.artifact
            repo = file("$konanHome/klib/platform/$target")
            it.target = target
            dependsOn libTask

        }
        installTasks.add(tasks[libName])
    }

    task "${target}Install" {
        dependsOn installTasks
    }
}

// TODO: Don't install libraries here - copy them in the distPlatformLibs task
task hostInstall {
    dependsOn tasks.withType(KlibInstall.class).findAll {
        new TargetManager(it.target).target == TargetManager.host
    }
}

task install {
    dependsOn tasks.withType(KlibInstall.class)
}




