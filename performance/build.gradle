buildscript {
    ext.rootBuildDirectory = file('..')

    apply from: "$rootBuildDirectory/gradle/loadRootProperties.gradle"
    apply from: "$rootBuildDirectory/gradle/kotlinGradlePlugin.gradle"
    repositories {
        maven {
            url 'https://cache-redirector.jetbrains.com/jcenter'
        }
        maven {
            url kotlinCompilerRepo
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

apply plugin: 'kotlin-multiplatform'

repositories {
    maven {
        url 'https://cache-redirector.jetbrains.com/jcenter'
    }
    maven {
        url kotlinCompilerRepo
    }
    maven {
        url buildKotlinCompilerRepo
    }

}

defaultTasks 'bench'

private def determinePreset() {
    def preset = MPPTools.defaultHostPreset(project)
    println("$project has been configured for ${preset.name} platform.")
    preset
}

def hostPreset = determinePreset()
def applicationName = 'Ring'

kotlin {
    sourceSets {
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlinVersion"
            }
            kotlin.srcDir '../tools/benchmarks/shared/src'
            kotlin.srcDir 'src/main/kotlin'

        }
        nativeMain {
            kotlin.srcDir 'src/main/kotlin-native'
        }
        jvmMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
            }
            kotlin.srcDir 'src/main/kotlin-jvm'
        }
    }

    targets {
        fromPreset(presets.jvm, 'jvm') {
            compilations.all {
                tasks[compileKotlinTaskName].kotlinOptions {
                    jvmTarget = '1.8'
                }
                tasks[compileKotlinTaskName].kotlinOptions.suppressWarnings = true
            }
        }

        fromPreset(hostPreset, 'native') {
            compilations.main.outputKinds('EXECUTABLE')
            compilations.main.extraOpts '-opt'
            compilations.main.buildTypes = [RELEASE]
        }
    }
}

MPPTools.addTimeListener(project)

MPPTools.createRunTask(project, 'konanRun', kotlin.targets.native) {
    workingDir = project.provider {
        kotlin.targets.native.compilations.main.getBinary('EXECUTABLE', buildType).parentFile
    }
    args("$nativeWarmup", "$attempts", "${buildDir.absolutePath}/${nativeBenchResults}")
}

task jvmRun(type: JavaExec)  {
    dependsOn 'build'
    def output = new ByteArrayOutputStream()
    def runtimeClasspath = files(
            kotlin.targets.jvm.compilations.main.output.allOutputs,
            project.configurations.getByName(kotlin.targets.jvm.compilations.main.runtimeDependencyConfigurationName)
    )
    classpath runtimeClasspath
    main = "MainKt"
    args "$jvmWarmup", "$attempts",  "${buildDir.absolutePath}/${jvmBenchResults}"
}

task konanJsonReport {
    doLast {
        def nativeExecutable = MPPTools.getKotlinNativeExecutable(kotlin.targets.native, "RELEASE")
        def nativeCompileTime = MPPTools.getNativeCompileTime(applicationName)
        String benchContents = new File("${buildDir.absolutePath}/${nativeBenchResults}").text
        def properties = getCommonProperties() + ['type'           : 'native',
                                                  'compilerVersion': "${konanVersion}".toString(),
                                                  'flags'          : kotlin.targets.native.compilations.main.extraOpts.collect{ "\"$it\"" },
                                                  'benchmarks'     : benchContents,
                                                  'compileTime'    : nativeCompileTime,
                                                  'codeSize'       : MPPTools.getCodeSizeBenchmark(applicationName, nativeExecutable) ]
        def output = MPPTools.createJsonReport(properties)
        new File("${buildDir.absolutePath}/${nativeJson}").write(output)
        uploadBenchmarkResultToBintray(nativeJson)
    }
}

task jvmJsonReport {
    doLast {
        def jarPath = project.getTasks().getByName("jvmJar").archivePath
        def jvmCompileTime = MPPTools.getJvmCompileTime(applicationName)
        String benchContents = new File("${buildDir.absolutePath}/${jvmBenchResults}").text
        def properties = getCommonProperties() + ['type'           : 'jvm',
                                                  'compilerVersion': "${buildKotlinVersion}".toString(),
                                                  'benchmarks'     : benchContents,
                                                  'compileTime'    : jvmCompileTime,
                                                  'codeSize'       : MPPTools.getCodeSizeBenchmark(applicationName, "${jarPath}") ]
        def output = MPPTools.createJsonReport(properties)
        new File("${buildDir.absolutePath}/${jvmJson}").write(output)
        uploadBenchmarkResultToBintray(jvmJson)
    }
}

jvmRun.finalizedBy jvmJsonReport
konanRun.finalizedBy konanJsonReport

private void dumpReport(String name, ByteArrayOutputStream output) {
    new File("${name}").withOutputStream {
        it.write(output.toByteArray())
    }
}

private def getCommonProperties() {
    return ['cpu': System.getProperty("os.arch"),
            'os': System.getProperty("os.name"), // OperatingSystem.current().getName()
            'jdkVersion': System.getProperty("java.version"), // org.gradle.internal.jvm.Jvm.current().javaVersion
            'jdkVendor': System.getProperty("java.vendor"),
            'kotlinVersion': "${kotlinVersion}".toString()]
}

private def uploadBenchmarkResultToBintray(String fileName) {
    def teamcityConfig = System.getenv("TEAMCITY_BUILD_PROPERTIES_FILE")
    if (teamcityConfig) {
        def buildProperties = new Properties()
        buildProperties.load(new FileInputStream(teamcityConfig))
        def user = buildProperties.getProperty("bintray.user")
        def password = buildProperties.getProperty("bintray.apikey")
        def buildNumber = buildProperties.getProperty("build.number")
        def target = System.getProperty("os.name").replaceAll("\\s", "")
        MPPTools.uploadFileToBintray("${bintrayUrl}", "${bintrayRepo}",
                buildNumber, "${bintrayPackage}", "${target}/${buildNumber}/${fileName}",
                "${buildDir.absolutePath}/${fileName}", user, password)
    }
}

task bench(type:Exec) {
    dependsOn jvmRun
    dependsOn konanRun
    def extension = MPPTools.getNativeProgramExtension()
    def analyzer = MPPTools.findFile("${analyzerTool}${extension}", "${rootBuildDirectory}/${analyzerToolDirectory}")
    if (analyzer != null) {
        commandLine "${analyzer}", "-r", "text", "-r", "teamcity", "${buildDir.absolutePath}/${nativeJson}", "${buildDir.absolutePath}/${jvmJson}"
    } else {
        println("No analyzer $analyzerTool found in subdirectories of ${rootBuildDirectory}/${analyzerToolDirectory}")
    }
}

// Produce and send slack report.
task slackReport(type: RegressionsReporter) {
    // Create folder for report (root Kotlin project settings make create report in separate folder).
    def reportDirectory = outputReport.substring(0, outputReport.lastIndexOf("/"))
    mkdir reportDirectory
    mkdir "../targetsResults"
    currentBenchmarksReportFile = "${buildDir.absolutePath}/${nativeJson}"
    analyzer = MPPTools.findFile("${analyzerTool}${MPPTools.getNativeProgramExtension()}",
            "${rootBuildDirectory}/${analyzerToolDirectory}")
    htmlReport = outputReport
    defaultBranch = project.findProperty('kotlin.native.default.branch') ?: "master"
    def target = System.getProperty("os.name")
    summaryFile = "../targetsResults/${target}.txt"
}

task slackSummary(type: RegressionsSummaryReporter) {
    targetsResultFiles = ["Linux": "../targetsResults/Linux.txt",
                          "MacOSX": "../targetsResults/Mac OS X.txt",
                          "Windows": "../targetsResults/Windows 10.txt"]
}