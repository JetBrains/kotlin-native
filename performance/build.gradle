import org.jetbrains.kotlin.RegressionsReporter
import org.jetbrains.kotlin.RegressionsSummaryReporter
import org.jetbrains.kotlin.BuildRegister
import org.jetbrains.kotlin.MPPTools

buildscript {
    ext.rootBuildDirectory = file('..')

    apply from: "$rootBuildDirectory/gradle/loadRootProperties.gradle"
    apply from: "$rootBuildDirectory/gradle/kotlinGradlePlugin.gradle"
    repositories {
        maven {
            url 'https://cache-redirector.jetbrains.com/jcenter'
        }
        maven {
            url kotlinCompilerRepo
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

task konanRun {
    subprojects.each {
        dependsOn it.getTasksByName('konanRun', true)[0]
    }
}
    
task jvmRun {
    subprojects.each {
        dependsOn it.getTasksByName('jvmRun', true)[0]
    }
}

task clean {
    subprojects.each {
        dependsOn it.getTasksByName('clean', true)[0]
    }
    doLast {
        delete "${buildDir.absolutePath}"
    }
}

defaultTasks 'konanRun'

// Produce and send slack report.
task slackReport(type: RegressionsReporter) {
    def analyzerBinary = MPPTools.findFile("${analyzerTool}${MPPTools.getNativeProgramExtension()}",
            "${rootBuildDirectory}/${analyzerToolDirectory}")
    def teamcityConfig = System.getenv("TEAMCITY_BUILD_PROPERTIES_FILE")
    if (teamcityConfig && analyzerBinary != null) {
        // Create folder for report (root Kotlin project settings make create report in separate folder).
        def reportDirectory = new File(outputReport).parentFile
        mkdir reportDirectory
        def targetsResults = new File(new File("${rootBuildDirectory}"), "targetsResults").toString()
        mkdir targetsResults
        currentBenchmarksReportFile = "${buildDir.absolutePath}/${nativeJson}"
        analyzer = analyzerBinary
        htmlReport = outputReport
        defaultBranch = project.findProperty('kotlin.native.default.branch') ?: "master"
        def target = System.getProperty("os.name")
        summaryFile = "${targetsResults}/${target}.txt"
        bundleBuild = project.findProperty('kotlin.bundleBuild') == null ? false : true
    }
}

task slackSummary(type: RegressionsSummaryReporter) {
    targetsResultFiles = ['Linux': "${rootBuildDirectory}/targetsResults/Linux.txt".toString(),
                          'MacOSX': "${rootBuildDirectory}/targetsResults/Mac OS X.txt".toString(),
                          'Windows': "${rootBuildDirectory}/targetsResults/Windows 10.txt".toString()]
}

private def uploadBenchmarkResultToBintray(String fileName) {
    def teamcityConfig = System.getenv("TEAMCITY_BUILD_PROPERTIES_FILE")
    if (teamcityConfig) {
        def buildProperties = new Properties()
        buildProperties.load(new FileInputStream(teamcityConfig))
        def user = buildProperties.getProperty("bintray.user")
        def password = buildProperties.getProperty("bintray.apikey")
        def buildNumber = buildProperties.getProperty("build.number")
        def target = System.getProperty("os.name").replaceAll("\\s", "")
        MPPTools.uploadFileToBintray("${bintrayUrl}", "${bintrayRepo}",
                buildNumber, "${bintrayPackage}", "${target}/${buildNumber}/${fileName}",
                "${buildDir.absolutePath}/${fileName}", user, password)
    }
}

task registerBuild(type: BuildRegister) {
    def analyzerBinary = MPPTools.findFile("${analyzerTool}${MPPTools.getNativeProgramExtension()}",
            "${rootBuildDirectory}/${analyzerToolDirectory}")
    if (analyzerBinary != null) {
        onlyBranch = project.findProperty('kotlin.register.branch')
        // Get bundle size.
        bundleSize = null
        if (project.findProperty('kotlin.bundleBuild') != null) {
            def dist = findProperty('org.jetbrains.kotlin.native.home') ?: 'dist'
            dist = (new File(dist)).isAbsolute() ? dist : "${project.getProjectDir()}/$dist"
            bundleSize = (new File(dist)).directorySize()
        }
        currentBenchmarksReportFile = "${buildDir.absolutePath}/${nativeJson}"
        analyzer = analyzerBinary
    }
}

def mergeReports(String fileName) {
    def reports = []
    subprojects.each {
        def reportFile = new File("${it.buildDir.absolutePath}/${fileName}")
        if (reportFile.exists()) {
            reports.add(reportFile)
        }
    }
    def output = MPPTools.mergeReports(reports)
    mkdir buildDir.absolutePath
    new File("${buildDir.absolutePath}/${fileName}").write(output)
}

task mergeNativeReports {
    doLast {
        mergeReports(nativeJson)
        uploadBenchmarkResultToBintray(nativeJson)
    }
}

task mergeJvmReports {
    doLast {
        mergeReports(jvmJson)
        uploadBenchmarkResultToBintray(jvmJson)
    }
}

subprojects.each {
    it.getTasksByName('jvmJsonReport', true)[0].finalizedBy mergeJvmReports
    it.getTasksByName('konanJsonReport', true)[0].finalizedBy mergeNativeReports
}

task teamCityStat(type:Exec) {
    def extension = MPPTools.getNativeProgramExtension()
    def analyzer = MPPTools.findFile("${analyzerTool}${extension}", "${rootBuildDirectory}/${analyzerToolDirectory}")
    if (analyzer != null) {
        commandLine "${analyzer}", "-r", "teamcity", "${buildDir.absolutePath}/${nativeJson}"
    } else {
        println("No analyzer $analyzerTool found in subdirectories of ${rootBuildDirectory}/${analyzerToolDirectory}")
    }
}

task сinterop {
    dependsOn 'clean'
    dependsOn 'сinterop:konanRun'
}

task framework {
    dependsOn 'clean'
    dependsOn 'framework:konanRun'
}

task helloworld {
    dependsOn 'clean'
    dependsOn 'helloworld:konanRun'
}

task objcinterop {
    dependsOn 'clean'
    dependsOn 'objcinterop:konanRun'
}

task ring {
    dependsOn 'clean'
    dependsOn 'ring:konanRun'
}

task swiftinterop {
    dependsOn 'clean'
    dependsOn 'swiftinterop:konanRun'
}

task videoplayer {
    dependsOn 'clean'
    dependsOn 'swiftinterop:konanRun'
}