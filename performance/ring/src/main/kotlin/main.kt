/*
 * Copyright 2010-2017 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import org.jetbrains.ring.*
import octoTest
import org.jetbrains.benchmarksLauncher.*
import org.jetbrains.kliopt.*

class RingLauncher : Launcher() {

    override val benchmarks = BenchmarksCollection(
            mutableMapOf(
                    "AbstractMethod.sortStrings" to InstanceBenchmarkEntry.create(::AbstractMethodBenchmark, { sortStrings() }),
                    "AbstractMethod.sortStringsWithComparator" to InstanceBenchmarkEntry.create(::AbstractMethodBenchmark, { sortStringsWithComparator() }),
                    "ClassArray.copy" to InstanceBenchmarkEntry.create(::ClassArrayBenchmark, { copy() }),
                    "ClassArray.copyManual" to InstanceBenchmarkEntry.create(::ClassArrayBenchmark, { copyManual() }),
                    "ClassArray.filterAndCount" to InstanceBenchmarkEntry.create(::ClassArrayBenchmark, { filterAndCount() }),
                    "ClassArray.filterAndMap" to InstanceBenchmarkEntry.create(::ClassArrayBenchmark, { filterAndMap() }),
                    "ClassArray.filterAndMapManual" to InstanceBenchmarkEntry.create(::ClassArrayBenchmark, { filterAndMapManual() }),
                    "ClassArray.filter" to InstanceBenchmarkEntry.create(::ClassArrayBenchmark, { filter() }),
                    "ClassArray.filterManual" to InstanceBenchmarkEntry.create(::ClassArrayBenchmark, { filterManual() }),
                    "ClassArray.countFilteredManual" to InstanceBenchmarkEntry.create(::ClassArrayBenchmark, { countFilteredManual() }),
                    "ClassArray.countFiltered" to InstanceBenchmarkEntry.create(::ClassArrayBenchmark, { countFiltered() }),
                    "ClassArray.countFilteredLocal" to InstanceBenchmarkEntry.create(::ClassArrayBenchmark, { countFilteredLocal() }),
                    "ClassBaseline.consume" to InstanceBenchmarkEntry.create(::ClassBaselineBenchmark, { consume() }),
                    "ClassBaseline.consumeField" to InstanceBenchmarkEntry.create(::ClassBaselineBenchmark, { consumeField() }),
                    "ClassBaseline.allocateList" to InstanceBenchmarkEntry.create(::ClassBaselineBenchmark, { allocateList() }),
                    "ClassBaseline.allocateArray" to InstanceBenchmarkEntry.create(::ClassBaselineBenchmark, { allocateArray() }),
                    "ClassBaseline.allocateListAndFill" to InstanceBenchmarkEntry.create(::ClassBaselineBenchmark, { allocateListAndFill() }),
                    "ClassBaseline.allocateListAndWrite" to InstanceBenchmarkEntry.create(::ClassBaselineBenchmark, { allocateListAndWrite() }),
                    "ClassBaseline.allocateArrayAndFill" to InstanceBenchmarkEntry.create(::ClassBaselineBenchmark, { allocateArrayAndFill() }),
                    "ClassList.copy" to InstanceBenchmarkEntry.create(::ClassListBenchmark, { copy() }),
                    "ClassList.copyManual" to InstanceBenchmarkEntry.create(::ClassListBenchmark, { copyManual() }),
                    "ClassList.filterAndCount" to InstanceBenchmarkEntry.create(::ClassListBenchmark, { filterAndCount() }),
                    "ClassList.filterAndCountWithLambda" to InstanceBenchmarkEntry.create(::ClassListBenchmark, { filterAndCountWithLambda() }),
                    "ClassList.filterWithLambda" to InstanceBenchmarkEntry.create(::ClassListBenchmark, { filterWithLambda() }),
                    "ClassList.mapWithLambda" to InstanceBenchmarkEntry.create(::ClassListBenchmark, { mapWithLambda() }),
                    "ClassList.countWithLambda" to InstanceBenchmarkEntry.create(::ClassListBenchmark, { countWithLambda() }),
                    "ClassList.filterAndMapWithLambda" to InstanceBenchmarkEntry.create(::ClassListBenchmark, { filterAndMapWithLambda() }),
                    "ClassList.filterAndMapWithLambdaAsSequence" to InstanceBenchmarkEntry.create(::ClassListBenchmark, { filterAndMapWithLambdaAsSequence() }),
                    "ClassList.filterAndMap" to InstanceBenchmarkEntry.create(::ClassListBenchmark, { filterAndMap() }),
                    "ClassList.filterAndMapManual" to InstanceBenchmarkEntry.create(::ClassListBenchmark, { filterAndMapManual() }),
                    "ClassList.filter" to InstanceBenchmarkEntry.create(::ClassListBenchmark, { filter() }),
                    "ClassList.filterManual" to InstanceBenchmarkEntry.create(::ClassListBenchmark, { filterManual() }),
                    "ClassList.countFilteredManual" to InstanceBenchmarkEntry.create(::ClassListBenchmark, { countFilteredManual() }),
                    "ClassList.countFiltered" to InstanceBenchmarkEntry.create(::ClassListBenchmark, { countFiltered() }),
                    "ClassList.reduce" to InstanceBenchmarkEntry.create(::ClassListBenchmark, { reduce() }),
                    "ClassStream.copy" to InstanceBenchmarkEntry.create(::ClassStreamBenchmark, { copy() }),
                    "ClassStream.copyManual" to InstanceBenchmarkEntry.create(::ClassStreamBenchmark, { copyManual() }),
                    "ClassStream.filterAndCount" to InstanceBenchmarkEntry.create(::ClassStreamBenchmark, { filterAndCount() }),
                    "ClassStream.filterAndMap" to InstanceBenchmarkEntry.create(::ClassStreamBenchmark, { filterAndMap() }),
                    "ClassStream.filterAndMapManual" to InstanceBenchmarkEntry.create(::ClassStreamBenchmark, { filterAndMapManual() }),
                    "ClassStream.filter" to InstanceBenchmarkEntry.create(::ClassStreamBenchmark, { filter() }),
                    "ClassStream.filterManual" to InstanceBenchmarkEntry.create(::ClassStreamBenchmark, { filterManual() }),
                    "ClassStream.countFilteredManual" to InstanceBenchmarkEntry.create(::ClassStreamBenchmark, { countFilteredManual() }),
                    "ClassStream.countFiltered" to InstanceBenchmarkEntry.create(::ClassStreamBenchmark, { countFiltered() }),
                    "ClassStream.reduce" to InstanceBenchmarkEntry.create(::ClassStreamBenchmark, { reduce() }),
                    "CompanionObject.invokeRegularFunction" to InstanceBenchmarkEntry.create(::CompanionObjectBenchmark, { invokeRegularFunction() }),
                    "CompanionObject.invokeJvmStaticFunction" to InstanceBenchmarkEntry.create(::CompanionObjectBenchmark, { invokeJvmStaticFunction() }),
                    "DefaultArgument.testOneOfTwo" to InstanceBenchmarkEntry.create(::DefaultArgumentBenchmark, { testOneOfTwo() }),
                    "DefaultArgument.testTwoOfTwo" to InstanceBenchmarkEntry.create(::DefaultArgumentBenchmark, { testTwoOfTwo() }),
                    "DefaultArgument.testOneOfFour" to InstanceBenchmarkEntry.create(::DefaultArgumentBenchmark, { testOneOfFour() }),
                    "DefaultArgument.testFourOfFour" to InstanceBenchmarkEntry.create(::DefaultArgumentBenchmark, { testFourOfFour() }),
                    "DefaultArgument.testOneOfEight" to InstanceBenchmarkEntry.create(::DefaultArgumentBenchmark, { testOneOfEight() }),
                    "DefaultArgument.testEightOfEight" to InstanceBenchmarkEntry.create(::DefaultArgumentBenchmark, { testEightOfEight() }),
                    "Elvis.testElvis" to InstanceBenchmarkEntry.create(::ElvisBenchmark, { testElvis() }),
                    "Euler.problem1bySequence" to InstanceBenchmarkEntry.create(::EulerBenchmark, { problem1bySequence() }),
                    "Euler.problem1" to InstanceBenchmarkEntry.create(::EulerBenchmark, { problem1() }),
                    "Euler.problem2" to InstanceBenchmarkEntry.create(::EulerBenchmark, { problem2() }),
                    "Euler.problem4" to InstanceBenchmarkEntry.create(::EulerBenchmark, { problem4() }),
                    "Euler.problem8" to InstanceBenchmarkEntry.create(::EulerBenchmark, { problem8() }),
                    "Euler.problem9" to InstanceBenchmarkEntry.create(::EulerBenchmark, { problem9() }),
                    "Euler.problem14" to InstanceBenchmarkEntry.create(::EulerBenchmark, { problem14() }),
                    "Euler.problem14full" to InstanceBenchmarkEntry.create(::EulerBenchmark, { problem14full() }),
                    "Fibonacci.calcClassic" to InstanceBenchmarkEntry.create(::FibonacciBenchmark, { calcClassic() }),
                    "Fibonacci.calc" to InstanceBenchmarkEntry.create(::FibonacciBenchmark, { calc() }),
                    "Fibonacci.calcWithProgression" to InstanceBenchmarkEntry.create(::FibonacciBenchmark, { calcWithProgression() }),
                    "Fibonacci.calcSquare" to InstanceBenchmarkEntry.create(::FibonacciBenchmark, { calcSquare() }),
                    "ForLoops.arrayLoop" to InstanceBenchmarkEntry.create(::ForLoopsBenchmark, { arrayLoop() }),
                    "ForLoops.intArrayLoop" to InstanceBenchmarkEntry.create(::ForLoopsBenchmark, { intArrayLoop() }),
                    "ForLoops.floatArrayLoop" to InstanceBenchmarkEntry.create(::ForLoopsBenchmark, { floatArrayLoop() }),
                    "ForLoops.charArrayLoop" to InstanceBenchmarkEntry.create(::ForLoopsBenchmark, { charArrayLoop() }),
                    "ForLoops.stringLoop" to InstanceBenchmarkEntry.create(::ForLoopsBenchmark, { stringLoop() }),
                    "ForLoops.arrayIndicesLoop" to InstanceBenchmarkEntry.create(::ForLoopsBenchmark, { arrayIndicesLoop() }),
                    "ForLoops.intArrayIndicesLoop" to InstanceBenchmarkEntry.create(::ForLoopsBenchmark, { intArrayIndicesLoop() }),
                    "ForLoops.floatArrayIndicesLoop" to InstanceBenchmarkEntry.create(::ForLoopsBenchmark, { floatArrayIndicesLoop() }),
                    "ForLoops.charArrayIndicesLoop" to InstanceBenchmarkEntry.create(::ForLoopsBenchmark, { charArrayIndicesLoop() }),
                    "ForLoops.stringIndicesLoop" to InstanceBenchmarkEntry.create(::ForLoopsBenchmark, { stringIndicesLoop() }),
                    "Inline.calculate" to InstanceBenchmarkEntry.create(::InlineBenchmark, { calculate() }),
                    "Inline.calculateInline" to InstanceBenchmarkEntry.create(::InlineBenchmark, { calculateInline() }),
                    "Inline.calculateGeneric" to InstanceBenchmarkEntry.create(::InlineBenchmark, { calculateGeneric() }),
                    "Inline.calculateGenericInline" to InstanceBenchmarkEntry.create(::InlineBenchmark, { calculateGenericInline() }),
                    "IntArray.copy" to InstanceBenchmarkEntry.create(::IntArrayBenchmark, { copy() }),
                    "IntArray.copyManual" to InstanceBenchmarkEntry.create(::IntArrayBenchmark, { copyManual() }),
                    "IntArray.filterAndCount" to InstanceBenchmarkEntry.create(::IntArrayBenchmark, { filterAndCount() }),
                    "IntArray.filterSomeAndCount" to InstanceBenchmarkEntry.create(::IntArrayBenchmark, { filterSomeAndCount() }),
                    "IntArray.filterAndMap" to InstanceBenchmarkEntry.create(::IntArrayBenchmark, { filterAndMap() }),
                    "IntArray.filterAndMapManual" to InstanceBenchmarkEntry.create(::IntArrayBenchmark, { filterAndMapManual() }),
                    "IntArray.filter" to InstanceBenchmarkEntry.create(::IntArrayBenchmark, { filter() }),
                    "IntArray.filterSome" to InstanceBenchmarkEntry.create(::IntArrayBenchmark, { filterSome() }),
                    "IntArray.filterPrime" to InstanceBenchmarkEntry.create(::IntArrayBenchmark, { filterPrime() }),
                    "IntArray.filterManual" to InstanceBenchmarkEntry.create(::IntArrayBenchmark, { filterManual() }),
                    "IntArray.filterSomeManual" to InstanceBenchmarkEntry.create(::IntArrayBenchmark, { filterSomeManual() }),
                    "IntArray.countFilteredManual" to InstanceBenchmarkEntry.create(::IntArrayBenchmark, { countFilteredManual() }),
                    "IntArray.countFilteredSomeManual" to InstanceBenchmarkEntry.create(::IntArrayBenchmark, { countFilteredSomeManual() }),
                    "IntArray.countFilteredPrimeManual" to InstanceBenchmarkEntry.create(::IntArrayBenchmark, { countFilteredPrimeManual() }),
                    "IntArray.countFiltered" to InstanceBenchmarkEntry.create(::IntArrayBenchmark, { countFiltered() }),
                    "IntArray.countFilteredSome" to InstanceBenchmarkEntry.create(::IntArrayBenchmark, { countFilteredSome() }),
                    "IntArray.countFilteredPrime" to InstanceBenchmarkEntry.create(::IntArrayBenchmark, { countFilteredPrime() }),
                    "IntArray.countFilteredLocal" to InstanceBenchmarkEntry.create(::IntArrayBenchmark, { countFilteredLocal() }),
                    "IntArray.countFilteredSomeLocal" to InstanceBenchmarkEntry.create(::IntArrayBenchmark, { countFilteredSomeLocal() }),
                    "IntArray.reduce" to InstanceBenchmarkEntry.create(::IntArrayBenchmark, { reduce() }),
                    "IntBaseline.consume" to InstanceBenchmarkEntry.create(::IntBaselineBenchmark, { consume() }),
                    "IntBaseline.allocateList" to InstanceBenchmarkEntry.create(::IntBaselineBenchmark, { allocateList() }),
                    "IntBaseline.allocateArray" to InstanceBenchmarkEntry.create(::IntBaselineBenchmark, { allocateArray() }),
                    "IntBaseline.allocateListAndFill" to InstanceBenchmarkEntry.create(::IntBaselineBenchmark, { allocateListAndFill() }),
                    "IntBaseline.allocateArrayAndFill" to InstanceBenchmarkEntry.create(::IntBaselineBenchmark, { allocateArrayAndFill() }),
                    "IntList.copy" to InstanceBenchmarkEntry.create(::IntListBenchmark, { copy() }),
                    "IntList.copyManual" to InstanceBenchmarkEntry.create(::IntListBenchmark, { copyManual() }),
                    "IntList.filterAndCount" to InstanceBenchmarkEntry.create(::IntListBenchmark, { filterAndCount() }),
                    "IntList.filterAndMap" to InstanceBenchmarkEntry.create(::IntListBenchmark, { filterAndMap() }),
                    "IntList.filterAndMapManual" to InstanceBenchmarkEntry.create(::IntListBenchmark, { filterAndMapManual() }),
                    "IntList.filter" to InstanceBenchmarkEntry.create(::IntListBenchmark, { filter() }),
                    "IntList.filterManual" to InstanceBenchmarkEntry.create(::IntListBenchmark, { filterManual() }),
                    "IntList.countFilteredManual" to InstanceBenchmarkEntry.create(::IntListBenchmark, { countFilteredManual() }),
                    "IntList.countFiltered" to InstanceBenchmarkEntry.create(::IntListBenchmark, { countFiltered() }),
                    "IntList.countFilteredLocal" to InstanceBenchmarkEntry.create(::IntListBenchmark, { countFilteredLocal() }),
                    "IntList.reduce" to InstanceBenchmarkEntry.create(::IntListBenchmark, { reduce() }),
                    "IntStream.copy" to InstanceBenchmarkEntry.create(::IntStreamBenchmark, { copy() }),
                    "IntStream.copyManual" to InstanceBenchmarkEntry.create(::IntStreamBenchmark, { copyManual() }),
                    "IntStream.filterAndCount" to InstanceBenchmarkEntry.create(::IntStreamBenchmark, { filterAndCount() }),
                    "IntStream.filterAndMap" to InstanceBenchmarkEntry.create(::IntStreamBenchmark, { filterAndMap() }),
                    "IntStream.filterAndMapManual" to InstanceBenchmarkEntry.create(::IntStreamBenchmark, { filterAndMapManual() }),
                    "IntStream.filter" to InstanceBenchmarkEntry.create(::IntStreamBenchmark, { filter() }),
                    "IntStream.filterManual" to InstanceBenchmarkEntry.create(::IntStreamBenchmark, { filterManual() }),
                    "IntStream.countFilteredManual" to InstanceBenchmarkEntry.create(::IntStreamBenchmark, { countFilteredManual() }),
                    "IntStream.countFiltered" to InstanceBenchmarkEntry.create(::IntStreamBenchmark, { countFiltered() }),
                    "IntStream.countFilteredLocal" to InstanceBenchmarkEntry.create(::IntStreamBenchmark, { countFilteredLocal() }),
                    "IntStream.reduce" to InstanceBenchmarkEntry.create(::IntStreamBenchmark, { reduce() }),
                    "Lambda.noncapturingLambda" to InstanceBenchmarkEntry.create(::LambdaBenchmark, { noncapturingLambda() }),
                    "Lambda.noncapturingLambdaNoInline" to InstanceBenchmarkEntry.create(::LambdaBenchmark, { noncapturingLambdaNoInline() }),
                    "Lambda.capturingLambda" to InstanceBenchmarkEntry.create(::LambdaBenchmark, { capturingLambda() }),
                    "Lambda.capturingLambdaNoInline" to InstanceBenchmarkEntry.create(::LambdaBenchmark, { capturingLambdaNoInline() }),
                    "Lambda.mutatingLambda" to InstanceBenchmarkEntry.create(::LambdaBenchmark, { mutatingLambda() }),
                    "Lambda.mutatingLambdaNoInline" to InstanceBenchmarkEntry.create(::LambdaBenchmark, { mutatingLambdaNoInline() }),
                    "Lambda.methodReference" to InstanceBenchmarkEntry.create(::LambdaBenchmark, { methodReference() }),
                    "Lambda.methodReferenceNoInline" to InstanceBenchmarkEntry.create(::LambdaBenchmark, { methodReferenceNoInline() }),
                    "Loop.arrayLoop" to InstanceBenchmarkEntry.create(::LoopBenchmark, { arrayLoop() }),
                    "Loop.arrayIndexLoop" to InstanceBenchmarkEntry.create(::LoopBenchmark, { arrayIndexLoop() }),
                    "Loop.rangeLoop" to InstanceBenchmarkEntry.create(::LoopBenchmark, { rangeLoop() }),
                    "Loop.arrayListLoop" to InstanceBenchmarkEntry.create(::LoopBenchmark, { arrayListLoop() }),
                    "Loop.arrayWhileLoop" to InstanceBenchmarkEntry.create(::LoopBenchmark, { arrayWhileLoop() }),
                    "Loop.arrayForeachLoop" to InstanceBenchmarkEntry.create(::LoopBenchmark, { arrayForeachLoop() }),
                    "Loop.arrayListForeachLoop" to InstanceBenchmarkEntry.create(::LoopBenchmark, { arrayListForeachLoop() }),
                    "MatrixMap.add" to InstanceBenchmarkEntry.create(::MatrixMapBenchmark, { add() }),
                    "ParameterNotNull.invokeOneArgWithNullCheck" to InstanceBenchmarkEntry.create(::ParameterNotNullAssertionBenchmark, { invokeOneArgWithNullCheck() }),
                    "ParameterNotNull.invokeOneArgWithoutNullCheck" to InstanceBenchmarkEntry.create(::ParameterNotNullAssertionBenchmark, { invokeOneArgWithoutNullCheck() }),
                    "ParameterNotNull.invokeTwoArgsWithNullCheck" to InstanceBenchmarkEntry.create(::ParameterNotNullAssertionBenchmark, { invokeTwoArgsWithNullCheck() }),
                    "ParameterNotNull.invokeTwoArgsWithoutNullCheck" to InstanceBenchmarkEntry.create(::ParameterNotNullAssertionBenchmark, { invokeTwoArgsWithoutNullCheck() }),
                    "ParameterNotNull.invokeEightArgsWithNullCheck" to InstanceBenchmarkEntry.create(::ParameterNotNullAssertionBenchmark, { invokeEightArgsWithNullCheck() }),
                    "ParameterNotNull.invokeEightArgsWithoutNullCheck" to InstanceBenchmarkEntry.create(::ParameterNotNullAssertionBenchmark, { invokeEightArgsWithoutNullCheck() }),
                    "PrimeList.calcDirect" to InstanceBenchmarkEntry.create(::PrimeListBenchmark, { calcDirect() }),
                    "PrimeList.calcEratosthenes" to InstanceBenchmarkEntry.create(::PrimeListBenchmark, { calcEratosthenes() }),
                    "String.stringConcat" to InstanceBenchmarkEntry.create(::StringBenchmark, { stringConcat() }),
                    "String.stringConcatNullable" to InstanceBenchmarkEntry.create(::StringBenchmark, { stringConcatNullable() }),
                    "String.stringBuilderConcat" to InstanceBenchmarkEntry.create(::StringBenchmark, { stringBuilderConcat() }),
                    "String.stringBuilderConcatNullable" to InstanceBenchmarkEntry.create(::StringBenchmark, { stringBuilderConcatNullable() }),
                    "String.summarizeSplittedCsv" to InstanceBenchmarkEntry.create(::StringBenchmark, { summarizeSplittedCsv() }),
                    "Switch.testSparseIntSwitch" to InstanceBenchmarkEntry.create(::SwitchBenchmark, { testSparseIntSwitch() }),
                    "Switch.testDenseIntSwitch" to InstanceBenchmarkEntry.create(::SwitchBenchmark, { testDenseIntSwitch() }),
                    "Switch.testConstSwitch" to InstanceBenchmarkEntry.create(::SwitchBenchmark, { testConstSwitch() }),
                    "Switch.testObjConstSwitch" to InstanceBenchmarkEntry.create(::SwitchBenchmark, { testObjConstSwitch() }),
                    "Switch.testVarSwitch" to InstanceBenchmarkEntry.create(::SwitchBenchmark, { testVarSwitch() }),
                    "Switch.testStringsSwitch" to InstanceBenchmarkEntry.create(::SwitchBenchmark, { testStringsSwitch() }),
                    "Switch.testEnumsSwitch" to InstanceBenchmarkEntry.create(::SwitchBenchmark, { testEnumsSwitch() }),
                    "Switch.testDenseEnumsSwitch" to InstanceBenchmarkEntry.create(::SwitchBenchmark, { testDenseEnumsSwitch() }),
                    "Switch.testSealedWhenSwitch" to InstanceBenchmarkEntry.create(::SwitchBenchmark, { testSealedWhenSwitch() }),
                    "WithIndicies.withIndicies" to InstanceBenchmarkEntry.create(::WithIndiciesBenchmark, { withIndicies() }),
                    "WithIndicies.withIndiciesManual" to InstanceBenchmarkEntry.create(::WithIndiciesBenchmark, { withIndiciesManual() }),
                    "OctoTest" to FunctionBenchmarkEntry(::octoTest),
                    "Calls.finalMethod" to InstanceBenchmarkEntry.create(::CallsBenchmark, { finalMethodCall() }),
                    "Calls.openMethodMonomorphic" to InstanceBenchmarkEntry.create(::CallsBenchmark, { classOpenMethodCall_MonomorphicCallsite() }),
                    "Calls.openMethodBimorphic" to InstanceBenchmarkEntry.create(::CallsBenchmark, { classOpenMethodCall_BimorphicCallsite() }),
                    "Calls.openMethodTrimorphic" to InstanceBenchmarkEntry.create(::CallsBenchmark, { classOpenMethodCall_TrimorphicCallsite() }),
                    "Calls.interfaceMethodMonomorphic" to InstanceBenchmarkEntry.create(::CallsBenchmark, { interfaceMethodCall_MonomorphicCallsite() }),
                    "Calls.interfaceMethodBimorphic" to InstanceBenchmarkEntry.create(::CallsBenchmark, { interfaceMethodCall_BimorphicCallsite() }),
                    "Calls.interfaceMethodTrimorphic" to InstanceBenchmarkEntry.create(::CallsBenchmark, { interfaceMethodCall_TrimorphicCallsite() }),
                    "Calls.returnBoxUnboxFolding" to InstanceBenchmarkEntry.create(::CallsBenchmark, { returnBoxUnboxFolding() }),
                    "Calls.parameterBoxUnboxFolding" to InstanceBenchmarkEntry.create(::CallsBenchmark, { parameterBoxUnboxFolding() }),
                    "CoordinatesSolver.solve" to InstanceBenchmarkEntry.create(::CoordinatesSolverBenchmark, { solve() }),
                    "GraphSolver.solve" to InstanceBenchmarkEntry.create(::GraphSolverBenchmark, { solve() })
            )
    )
}

fun main(args: Array<String>) {
    val launcher = RingLauncher()
    BenchmarksRunner.runBenchmarks(args, { parser: ArgParser ->
        launcher.launch(parser.get<Int>("warmup")!!, parser.get<Int>("repeat")!!, parser.get<String>("prefix")!!,
                parser.getAll<String>("filter"), parser.getAll<String>("filterRegex"))
    }, benchmarksListAction = launcher::benchmarksListAction)
}