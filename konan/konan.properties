#
# Copyright 2010-2018 JetBrains s.r.o.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# TODO: Do we need a $variable substitution mechanism here?
dependenciesUrl = https://download.jetbrains.com/kotlin/native

# In order of preference:
dependencyProfiles = default alt

# Don't check dependencies on a server.
# If true, dependency downloader will throw an exception if a dependency isn't found in konan.home.
airplaneMode = false
# if true, ignores Xcode version check.
ignoreXcodeVersionCheck = false
# Disabled until decided better mechanism.
# useFixedXcodeVersion = 10.2

downloadingAttempts = 10
downloadingAttemptIntervalMs = 3000
homeDependencyCache = .konan/cache

llvmDebugOptFlags = -O1
llvmVersion = 6.0.1

# Mac OS X.
llvmHome.macos_x64 = clang-llvm-6.0.1-darwin-macos
targetToolchain.macos_x64 = target-toolchain-9-macos_x64
libffiDir.macos_x64 = libffi-3.2.1-3-darwin-macos

arch.macos_x64 = x86_64
targetSysRoot.macos_x64 = target-sysroot-9-macos_x64
llvmLtoFlags.macos_x64 =
llvmLtoOptFlags.macos_x64 = -O3 -function-sections
llvmLtoNooptFlags.macos_x64 = -O1
llvmLtoDynamicFlags.macos_x64 = -relocation-model=pic
linkerKonanFlags.macos_x64 = -lSystem -lc++ -lobjc -framework Foundation
linkerOptimizationFlags.macos_x64 = -dead_strip
linkerNoDebugFlags.macos_x64 = -S
linkerDynamicFlags.macos_x64 = -dylib
osVersionMinFlagLd.macos_x64 = -macosx_version_min
osVersionMinFlagClang.macos_x64 = -mmacosx-version-min
osVersionMin.macos_x64 = 10.11
entrySelector.macos_x64 = -alias _Konan_main _main
dependencies.macos_x64 = \
    libffi-3.2.1-3-darwin-macos \
    clang-llvm-6.0.1-darwin-macos

target-sysroot-9-macos_x64.default = \
  remote:internal

target-toolchain-9-macos_x64.default = \
  remote:internal

# Apple's 32-bit iOS.
targetToolchain.macos_x64-ios_arm32 = target-toolchain-9-macos_x64
dependencies.macos_x64-ios_arm32 = \
  libffi-3.2.1-3-darwin-macos \
  clang-llvm-6.0.1-darwin-macos

target-sysroot-9-ios_arm32.default = \
  remote:internal

arch.ios_arm32 = armv7
entrySelector.ios_arm32 = -alias _Konan_main _main
# Shared with 64-bit version.
targetSysRoot.ios_arm32 = target-sysroot-9-ios_arm64
llvmLtoFlags.ios_arm32 =
llvmLtoOptFlags.ios_arm32 = -O3 -function-sections
linkerNoDebugFlags.ios_arm32 = -S
linkerDynamicFlags.ios_arm32 = -dylib
llvmLtoNooptFlags.ios_arm32 = -O1
llvmLtoDynamicFlags.ios_arm32 = -relocation-model=pic
linkerKonanFlags.ios_arm32 = -lSystem -lc++ -lobjc -framework Foundation -sdk_version 11.2
linkerOptimizationFlags.ios_arm32 = -dead_strip
osVersionMinFlagLd.ios_arm32 = -iphoneos_version_min
osVersionMinFlagClang.ios_arm32 = -miphoneos-version-min
osVersionMin.ios_arm32 = 9.0

# Apple's 64-bit iOS.
targetToolchain.macos_x64-ios_arm64 = target-toolchain-9-macos_x64
dependencies.macos_x64-ios_arm64 = \
  libffi-3.2.1-3-darwin-macos \
  clang-llvm-6.0.1-darwin-macos

target-sysroot-9-ios_arm64.default = \
  remote:internal

arch.ios_arm64 = arm64
entrySelector.ios_arm64 = -alias _Konan_main _main
targetSysRoot.ios_arm64 = target-sysroot-9-ios_arm64
llvmLtoFlags.ios_arm64 =
llvmLtoOptFlags.ios_arm64 = -O3 -function-sections
linkerNoDebugFlags.ios_arm64 = -S
linkerDynamicFlags.ios_arm64 = -dylib
llvmLtoNooptFlags.ios_arm64 = -O1
llvmLtoDynamicFlags.ios_arm64 = -relocation-model=pic
linkerKonanFlags.ios_arm64 = -lSystem -lc++ -lobjc -framework Foundation -sdk_version 11.2
linkerOptimizationFlags.ios_arm64 = -dead_strip
osVersionMinFlagLd.ios_arm64 = -iphoneos_version_min
osVersionMinFlagClang.ios_arm64 = -miphoneos-version-min
osVersionMin.ios_arm64 = 9.0

#  Apple's iOS simulator.
targetToolchain.macos_x64-ios_x64 = target-toolchain-9-macos_x64
dependencies.macos_x64-ios_x64 = \
  libffi-3.2.1-3-darwin-macos \
  clang-llvm-6.0.1-darwin-macos

target-sysroot-9-ios_x64.default = \
  remote:internal

arch.ios_x64 = x86_64
entrySelector.ios_x64 = -alias _Konan_main _main
targetSysRoot.ios_x64 = target-sysroot-9-ios_x64
llvmLtoFlags.ios_x64 =
llvmLtoOptFlags.ios_x64 = -O3 -function-sections
llvmLtoNooptFlags.ios_x64 = -O1
llvmLtoDynamicFlags.ios_x64 = -relocation-model=pic
linkerKonanFlags.ios_x64 = -lSystem -lc++ -lobjc -framework Foundation -sdk_version 11.2
linkerOptimizationFlags.ios_x64 = -dead_strip
linkerNoDebugFlags.ios_x64 = -S
linkerDynamicFlags.ios_x64 = -dylib
osVersionMinFlagLd.ios_x64 = -ios_simulator_version_min
osVersionMinFlagClang.ios_x64 = -mios-simulator-version-min
osVersionMin.ios_x64 = 9.0

# Linux x86-64.
llvmHome.linux_x64 = clang-llvm-6.0.1-linux-x86-64
libffiDir.linux_x64 = libffi-3.2.1-2-linux-x86-64

gccToolchain.linux_x64 = target-gcc-toolchain-3-linux-x86-64
targetToolchain.linux_x64 = target-gcc-toolchain-3-linux-x86-64/x86_64-unknown-linux-gnu
dependencies.linux_x64 = \
    clang-llvm-6.0.1-linux-x86-64 \
    target-gcc-toolchain-3-linux-x86-64 \
    libffi-3.2.1-2-linux-x86-64

gccToolchain.mingw_x64 = target-gcc-toolchain-3-linux-x86-64
targetToolchain.mingw_x64-linux_x64 = msys2-mingw-w64-x86_64-gcc-7.3.0-clang-llvm-lld-6.0.1
dependencies.mingw_x64-linux_x64 = \
    msys2-mingw-w64-x86_64-gcc-7.3.0-clang-llvm-lld-6.0.1 \
    libffi-3.2.1-mingw-w64-x86-64 \
    target-gcc-toolchain-3-linux-x86-64

gccToolchain.macos_x64 = target-gcc-toolchain-3-linux-x86-64
targetToolchain.macos_x64-linux_x64 = clang-llvm-6.0.1-darwin-macos
dependencies.macos_x64-linux_x64 = \
    clang-llvm-6.0.1-darwin-macos \
    libffi-3.2.1-3-darwin-macos \
    target-gcc-toolchain-3-linux-x86-64

quadruple.linux_x64 = x86_64-unknown-linux-gnu
targetSysRoot.linux_x64 = target-gcc-toolchain-3-linux-x86-64/x86_64-unknown-linux-gnu/sysroot
# targetSysroot-relative.
libGcc.linux_x64 = ../../lib/gcc/x86_64-unknown-linux-gnu/4.8.5
llvmLtoFlags.linux_x64 = -mcpu=x86-64
llvmLtoOptFlags.linux_x64 = -O3 -function-sections
llvmLtoNooptFlags.linux_x64 = -O1
llvmLtoDynamicFlags.linux_x64 = -relocation-model=pic
llvmLlcFlags.linux_x64 = -march=x86-64
linkerKonanFlags.linux_x64 = -Bstatic -lstdc++ -Bdynamic -ldl -lm -lpthread \
  --defsym __cxa_demangle=Konan_cxa_demangle --no-threads
linkerOptimizationFlags.linux_x64 = --gc-sections
linkerNoDebugFlags.linux_x64 = -S
linkerDynamicFlags.linux_x64 = -shared
pluginOptimizationFlags.linux_x64 = -plugin-opt=mcpu=x86-64 -plugin-opt=O3
dynamicLinker.linux_x64 = /lib64/ld-linux-x86-64.so.2
entrySelector.linux_x64 = --defsym main=Konan_main
# targetSysRoot relative
abiSpecificLibraries.linux_x64 = ../lib64 lib64 usr/lib64

# Raspberry Pi
targetToolchain.linux_x64-linux_arm32_hfp = target-gcc-toolchain-3-linux-x86-64/x86_64-unknown-linux-gnu
targetToolchain.mingw_x64-linux_arm32_hfp = msys2-mingw-w64-x86_64-gcc-7.3.0-clang-llvm-lld-6.0.1
targetToolchain.macos_x64-linux_arm32_hfp = clang-llvm-6.0.1-darwin-macos
dependencies.linux_x64-linux_arm32_hfp = \
    clang-llvm-6.0.1-linux-x86-64 \
    target-gcc-toolchain-3-linux-x86-64 \
    target-sysroot-1-raspberrypi \
    libffi-3.2.1-2-linux-x86-64
dependencies.mingw_x64-linux_arm32_hfp = \
    msys2-mingw-w64-x86_64-gcc-7.3.0-clang-llvm-lld-6.0.1 \
    libffi-3.2.1-mingw-w64-x86-64 \
    target-gcc-toolchain-3-linux-x86-64 \
    target-sysroot-1-raspberrypi
dependencies.macos_x64-linux_arm32_hfp = \
    clang-llvm-6.0.1-darwin-macos \
    libffi-3.2.1-3-darwin-macos \
    target-gcc-toolchain-3-linux-x86-64 \
    target-sysroot-1-raspberrypi

quadruple.linux_arm32_hfp = armv6-unknown-linux-gnueabihf
entrySelector.linux_arm32_hfp = --defsym main=Konan_main
linkerNoDebugFlags.linux_arm32_hfp = -S
linkerDynamicFlags.linux_arm32_hfp = -shared
linkerOptimizationFlags.linux_arm32_hfp = --gc-sections
targetSysRoot.linux_arm32_hfp = target-sysroot-1-raspberrypi
# We could reuse host toolchain here.
linkerKonanFlags.linux_arm32_hfp = -Bstatic -lstdc++ -Bdynamic -ldl -lm -lpthread \
  --defsym __cxa_demangle=Konan_cxa_demangle
# targetSysroot-relative.
libGcc.linux_arm32_hfp = lib/gcc/arm-linux-gnueabihf/4.8.3
llvmLtoFlags.linux_arm32_hfp = -float-abi=hard -mcpu=arm1136jf-s
llvmLtoOptFlags.linux_arm32_hfp = -O3 -function-sections
llvmLtoNooptFlags.linux_arm32_hfp = -O1
llvmLtoDynamicFlags.linux_arm32_hfp = -relocation-model=pic
dynamicLinker.linux_arm32_hfp = /lib/ld-linux-armhf.so.3
# targetSysRoot relative
abiSpecificLibraries.linux_arm32_hfp = \
    ../lib/arm-linux-gnueabihf \
    lib/arm-linux-gnueabihf \
    usr/lib/arm-linux-gnueabihf

# MIPS
targetToolchain.linux_x64-linux_mips32 = target-gcc-toolchain-2-linux-mips/x86_64-unknown-linux-gnu
dependencies.linux_x64-linux_mips32 = \
    clang-llvm-6.0.1-linux-x86-64 \
    target-gcc-toolchain-2-linux-mips \
    target-gcc-toolchain-3-linux-x86-64 \
    target-sysroot-2-mips \
    libffi-3.2.1-2-linux-x86-64

quadruple.linux_mips32 = mips-unknown-linux-gnu
entrySelector.linux_mips32 = --defsym main=Konan_main
linkerOptimizationFlags.linux_mips32 = --gc-sections
linkerDynamicFlags.linux_mips32 = -shared
targetSysRoot.linux_mips32 = target-sysroot-2-mips
# We could reuse host toolchain here.
linkerKonanFlags.linux_mips32 = -Bstatic -lstdc++ -Bdynamic -ldl -lm -lpthread \
  --defsym __cxa_demangle=Konan_cxa_demangle  -z notext
# targetSysroot-relative.
libGcc.linux_mips32 = lib/gcc/mips-unknown-linux-gnu/4.9.4
llvmLtoFlags.linux_mips32 =
llvmLtoOptFlags.linux_mips32 = -O3 -function-sections
llvmLtoNooptFlags.linux_mips32 = -O1
llvmLtoDynamicFlags.linux_mips32 = -relocation-model=pic
dynamicLinker.linux_mips32 = /lib/ld.so.1
# targetSysRoot relative
abiSpecificLibraries.linux_mips32 =

# MIPSel
targetToolchain.linux_x64-linux_mipsel32 = target-gcc-toolchain-2-linux-mips/x86_64-unknown-linux-gnu
dependencies.linux_x64-linux_mipsel32 = \
    clang-llvm-6.0.1-linux-x86-64 \
    target-gcc-toolchain-2-linux-mips \
    target-gcc-toolchain-3-linux-x86-64 \
    target-sysroot-2-mipsel \
    libffi-3.2.1-2-linux-x86-64
quadruple.linux_mipsel32 = mipsel-unknown-linux-gnu
entrySelector.linux_mipsel32 = --defsym main=Konan_main
linkerOptimizationFlags.linux_mipsel32 = --gc-sections
linkerDynamicFlags.linux_mipsel32 = -shared
targetSysRoot.linux_mipsel32 = target-sysroot-2-mipsel
# We could reuse host toolchain here.
linkerKonanFlags.linux_mipsel32 = -Bstatic -lstdc++ -Bdynamic -ldl -lm -lpthread \
  --defsym __cxa_demangle=Konan_cxa_demangle -z notext
# targetSysroot-relative.
libGcc.linux_mipsel32 = lib/gcc/mipsel-unknown-linux-gnu/4.9.4
llvmLtoFlags.linux_mipsel32 =
llvmLtoOptFlags.linux_mipsel32 = -O3 -function-sections
llvmLtoNooptFlags.linux_mipsel32 = -O1
llvmLtoDynamicFlags.linux_mipsel32 = -relocation-model=pic
dynamicLinker.linux_mipsel32 = /lib/ld.so.1
# targetSysRoot relative
abiSpecificLibraries.linux_mipsel32 =

# Android ARM32, based on NDK for android-21.
targetToolchain.macos_x64-android_arm32 = target-toolchain-21-osx-android_arm32
# TODO: split dependencies to host-dependent and host-independent parts.
dependencies.macos_x64-android_arm32 = \
    clang-llvm-6.0.1-darwin-macos \
    target-sysroot-21-android_arm32 \
    target-toolchain-21-osx-android_arm32 \
    libffi-3.2.1-3-darwin-macos
targetToolchain.linux_x64-android_arm32 = target-toolchain-21-linux-android_arm32
dependencies.linux_x64-android_arm32 = \
    clang-llvm-6.0.1-linux-x86-64 \
    target-sysroot-21-android_arm32 \
    target-toolchain-21-linux-android_arm32 \
    libffi-3.2.1-2-linux-x86-64
targetToolchain.mingw_x64-android_arm32 = target-toolchain-21-windows-android_arm32
dependencies.mingw_x64-android_arm32 = \
    msys2-mingw-w64-x86_64-gcc-7.3.0-clang-llvm-lld-6.0.1 \
    target-sysroot-21-android_arm32 \
    target-toolchain-21-windows-android_arm32 \
    libffi-3.2.1-mingw-w64-x86-64

quadruple.android_arm32 = arm-linux-androideabi
entrySelector.android_arm32 =  -Wl,--defsym -Wl,main=Konan_main
llvmLtoFlags.android_arm32 = -emulated-tls -relocation-model=pic
llvmLtoOptFlags.android_arm32 = -O3 -function-sections
linkerNoDebugFlags.android_arm32 = -Wl,-S
llvmLtoNooptFlags.android_arm32 = -O1
targetSysRoot.android_arm32 = target-sysroot-21-android_arm32
linkerKonanFlags.android_arm32 = -lm -latomic -lstdc++ -landroid

# Android ARM64, based on NDK for android-21.
targetToolchain.macos_x64-android_arm64 = target-toolchain-21-osx-android_arm64
# TODO: split dependencies to host-dependent and host-independent parts.
dependencies.macos_x64-android_arm64 = \
    clang-llvm-6.0.1-darwin-macos \
    target-sysroot-21-android_arm64 \
    target-toolchain-21-osx-android_arm64 \
    libffi-3.2.1-3-darwin-macos
targetToolchain.linux_x64-android_arm64 = target-toolchain-21-linux-android_arm64
dependencies.linux_x64-android_arm64 = \
    clang-llvm-6.0.1-linux-x86-64 \
    target-sysroot-21-android_arm64 \
    target-toolchain-21-linux-android_arm64 \
    libffi-3.2.1-2-linux-x86-64
targetToolchain.mingw_x64-android_arm64 = target-toolchain-21-windows-android_arm64
dependencies.mingw_x64-android_arm64 = \
    msys2-mingw-w64-x86_64-gcc-7.3.0-clang-llvm-lld-6.0.1 \
    target-sysroot-21-android_arm64 \
    target-toolchain-21-windows-android_arm64 \
    libffi-3.2.1-mingw-w64-x86-64

quadruple.android_arm64 = aarch64-linux-android
entrySelector.android_arm64 =  -Wl,--defsym -Wl,main=Konan_main
llvmLtoFlags.android_arm64 = -emulated-tls -relocation-model=pic
targetSysRoot.android_arm64 = target-sysroot-21-android_arm64
linkerKonanFlags.android_arm64 = -lm -latomic -lstdc++ -landroid
linkerNoDebugFlags.android_arm64 = -Wl,-S

# Windows x86-64, based on mingw-w64.
llvmHome.mingw_x64 = msys2-mingw-w64-x86_64-gcc-7.3.0-clang-llvm-lld-6.0.1
targetToolchain.mingw_x64 = msys2-mingw-w64-x86_64-gcc-7.3.0-clang-llvm-lld-6.0.1
libffiDir.mingw_x64 = libffi-3.2.1-mingw-w64-x86-64

targetToolchain.linux_x64-mingw_x64 = msys2-mingw-w64-x86_64-gcc-7.3.0-clang-llvm-lld-6.0.1
targetToolchain.macos_x64-mingw_x64 = msys2-mingw-w64-x86_64-gcc-7.3.0-clang-llvm-lld-6.0.1
dependencies.mingw_x64 = \
    msys2-mingw-w64-x86_64-gcc-7.3.0-clang-llvm-lld-6.0.1 \
    libffi-3.2.1-mingw-w64-x86-64
dependencies.linux_x64-mingw_x64 = \
    msys2-mingw-w64-x86_64-gcc-7.3.0-clang-llvm-lld-6.0.1 \
    clang-llvm-6.0.1-linux-x86-64 \
    libffi-3.2.1-2-linux-x86-64
dependencies.macos_x64-mingw_x64 = \
    msys2-mingw-w64-x86_64-gcc-7.3.0-clang-llvm-lld-6.0.1 \
    clang-llvm-6.0.1-darwin-macos \
    libffi-3.2.1-3-darwin-macos

quadruple.mingw_x64 = x86_64-w64-mingw32
targetSysRoot.mingw_x64 = msys2-mingw-w64-x86_64-gcc-7.3.0-clang-llvm-lld-6.0.1
# For using with Universal Windows Platform (UWP) we need to use this slower option.
# See https://youtrack.jetbrains.com/issue/KT-27654.
# TODO: remove, once fixed in mingw, check with the bug testcase.
llvmLtoFlags.mingw_x64 = -emulated-tls
llvmLtoOptFlags.mingw_x64 = -O3 -function-sections
llvmLtoNooptFlags.mingw_x64 = -O1
linkerNoDebugFlags.mingw_x64 = -Wl,-S
linkerDynamicFlags.mingw_x64 = -shared
linkerKonanFlags.mingw_x64 =-static-libgcc -static-libstdc++ \
  -Xclang -flto-visibility-public-std -Wl,--dynamicbase \
  -Wl,-Bstatic,--whole-archive -lwinpthread -Wl,--no-whole-archive,-Bdynamic \
  -Wl,--defsym,__cxa_demangle=Konan_cxa_demangle
linkerOptimizationFlags.mingw_x64 = -Wl,--gc-sections
entrySelector.mingw_x64 = -Wl,--defsym,main=Konan_main

# Windows i686, based on mingw-w64.
targetToolchain.mingw_x64-mingw_x86 = msys2-mingw-w64-i686-gcc-7.4.0-clang-llvm-6.0.1
dependencies.mingw_x64-mingw_x86 = \
    msys2-mingw-w64-i686-gcc-7.4.0-clang-llvm-6.0.1 \
    msys2-mingw-w64-x86_64-gcc-7.3.0-clang-llvm-lld-6.0.1 \
    libffi-3.2.1-mingw-w64-x86-64
targetToolchain.linux_x64-mingw_x86 = msys2-mingw-w64-i686-gcc-7.4.0-clang-llvm-6.0.1
targetToolchain.macos_x64-mingw_x86 = msys2-mingw-w64-i686-gcc-7.4.0-clang-llvm-6.0.1
dependencies.linux_x64-mingw_x86 = \
    msys2-mingw-w64-i686-gcc-7.4.0-clang-llvm-6.0.1 \
    clang-llvm-6.0.1-linux-x86-64 \
    libffi-3.2.1-2-linux-x86-64
dependencies.macos_x64-mingw_x86 = \
    msys2-mingw-w64-i686-gcc-7.4.0-clang-llvm-6.0.1 \
    clang-llvm-6.0.1-darwin-macos \
    libffi-3.2.1-3-darwin-macos

quadruple.mingw_x86 = i686-w64-mingw32
targetSysRoot.mingw_x86 = msys2-mingw-w64-i686-gcc-7.4.0-clang-llvm-6.0.1
# For using with Universal Windows Platform (UWP) we need to use this slower option.
# See https://youtrack.jetbrains.com/issue/KT-27654.
# TODO: remove, once fixed in mingw, check with the bug testcase.
llvmLtoFlags.mingw_x86 = -emulated-tls
llvmLtoOptFlags.mingw_x86 = -O3 -function-sections
llvmLtoNooptFlags.mingw_x86 = -O1
linkerNoDebugFlags.mingw_x86 = -Wl,-S
linkerDynamicFlags.mingw_x86 = -shared
linkerKonanFlags.mingw_x86 = -static-libgcc -static-libstdc++ \
  -Xclang -flto-visibility-public-std -Wl,--dynamicbase \
  -Wl,-Bstatic,--whole-archive -lwinpthread -Wl,--no-whole-archive,-Bdynamic \
  -Wl,--defsym,___cxa_demangle=_Konan_cxa_demangle
linkerOptimizationFlags.mingw_x86 = -Wl,--gc-sections
entrySelector.mingw_x86 = -Wl,--defsym,_main=_Konan_main

# WebAssembly 32-bit.
targetToolchain.macos_x64-wasm32 = target-toolchain-3-macos-wasm
dependencies.macos_x64-wasm32 = \
    libffi-3.2.1-3-darwin-macos \
    clang-llvm-6.0.1-darwin-macos \
    target-sysroot-2-wasm \
    target-toolchain-3-macos-wasm

targetToolchain.linux_x64-wasm32 = target-toolchain-2-linux-wasm
dependencies.linux_x64-wasm32 = \
    libffi-3.2.1-2-linux-x86-64 \
    clang-llvm-6.0.1-linux-x86-64 \
    target-sysroot-2-wasm \
    target-toolchain-2-linux-wasm

targetToolchain.mingw_x64-wasm32 = target-toolchain-2-mingw-wasm
dependencies.mingw_x64-wasm32 = \
    libffi-3.2.1-mingw-w64-x86-64 \
    msys2-mingw-w64-x86_64-gcc-7.3.0-clang-llvm-lld-6.0.1 \
    target-sysroot-2-wasm \
    target-toolchain-2-mingw-wasm

quadruple.wasm32 = wasm32-unknown-unknown
llvmLtoFlags.wasm32 =
targetSysRoot.wasm32 = target-sysroot-2-wasm
optFlags.wasm32 = -internalize -globaldce -mtriple=wasm32-unknown-unknown-wasm
optNooptFlags.wasm32 = -O1
optOptFlags.wasm32 = -O3
optDebugFlags.wasm32 = -O0
llcFlags.wasm32 = -mtriple=wasm32-unknown-unknown-wasm
llcNooptFlags.wasm32 = -O1
llcOptFlags.wasm32 = -O3
llcDebugFlags.wasm32 = -O0
# TODO: make explicit list of external symbols
lld.wasm32 = --allow-undefined --no-entry --global-base=0 --no-threads

