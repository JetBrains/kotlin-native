import org.jetbrains.kotlin.UtilsKt
import org.jetbrains.kotlin.gradle.plugin.konan.tasks.KonanCacheTask

buildscript {
    repositories {
        maven { url 'https://cache-redirector.jetbrains.com/jcenter' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-native-gradle-plugin:$gradlePluginVersion"
    }
}

def endorsedLibrariesList = ['kotlinx.cli']

def toTaskName(library) {
    def name = ""
    library.split("\\.").each { word -> name += word.capitalize() }
    return name
}

task clean {
    doLast {
        delete buildDir
    }
}

task jvmJar {
    endorsedLibrariesList.each { library ->
        dependsOn "$library:jvmJar"
    }
}

// Build all default libraries.
targetList.each { target ->
    task("${target}EndorsedLibraries", type: Copy) {
        endorsedLibrariesList.each { library ->
            dependsOn "$library:${target}${ toTaskName(library) }"
        }

        destinationDir project.buildDir

        endorsedLibrariesList.each { library ->
            from(project("$library").file("build/${target}${ toTaskName(library) }")) {
                include('**')
                into("${library.replaceAll("\\.", "-")}")
                eachFile {
                    if (name == 'manifest') {
                        def existingManifest = file("$destinationDir/$path")
                        if (existingManifest.exists()) {
                            UtilsKt.mergeManifestsByTargets(project, file, existingManifest)
                            exclude()
                        }
                    }
                }
            }
        }
    }

    if (target in cacheableTargetNames) {
        def cacheTask = task("${target}Cache")

        endorsedLibrariesList.each { library ->
            def libraryName = library.replaceAll("\\.", "-")
            def dist = rootProject.file("dist")
            task("${target}${toTaskName(library)}Cache", type: KonanCacheTask) {
                it.target = target
                originalKlib = file("${project.buildDir}/$libraryName")
                cacheRoot = file("$dist/klib/cache")
                compilerDistributionPath.set(distDir)

                dependsOn "${target}EndorsedLibraries"
                dependsOn ":${target}CrossDistRuntime"
                dependsOn ":${target}StdlibCache"

                cacheTask.dependsOn it
            }
        }
    }
}

endorsedLibrariesList.each { library ->
    task("${toTaskName(library)}CommonSources", type: Zip) {
        destinationDirectory = file("${rootProject.projectDir}/dist/sources")
        archiveFileName = "${library.replaceAll("\\.", "-")}-common-sources.zip"

        includeEmptyDirs = false
        include('**/*.kt')

        from(project(":endorsedLibraries:${library}").file('src/main/kotlin'))
    }
    task("${toTaskName(library)}NativeSources", type: Zip) {
        destinationDirectory = file("${rootProject.projectDir}/dist/sources")
        archiveFileName = "${library.replaceAll("\\.", "-")}-native-sources.zip"

        includeEmptyDirs = false
        include('**/*.kt')

        from(project(":endorsedLibraries:${library}").file('src/main/kotlin-native'))
    }
}

task endorsedLibsSources {
    endorsedLibrariesList.each { library ->
        dependsOn "${toTaskName(library)}CommonSources"
        dependsOn "${toTaskName(library)}NativeSources"
    }
}