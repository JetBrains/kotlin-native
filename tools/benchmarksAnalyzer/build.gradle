buildscript {
    ext.rootBuildDirectory = file('../..')

    apply from: "$rootBuildDirectory/gradle/loadRootProperties.gradle"
    apply from: "$rootBuildDirectory/gradle/kotlinGradlePlugin.gradle"

    repositories {
        maven {
            url 'https://cache-redirector.jetbrains.com/jcenter'
        }
        maven {
            url kotlinCompilerRepo
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

apply plugin: 'kotlin-multiplatform'

repositories {
    maven {
        url 'https://cache-redirector.jetbrains.com/jcenter'
    }
    maven {
        url kotlinCompilerRepo
    }
    maven {
        url buildKotlinCompilerRepo
    }
}

kotlin {
    sourceSets {
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlinVersion"
            }
            kotlin.srcDir '../benchmarks/shared/src'
            kotlin.srcDir 'src/main/kotlin'

        }
        commonTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-common:$kotlinVersion"
                implementation "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlinVersion"
            }
            kotlin.srcDir 'src/tests'
        }
        jvmTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
                implementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
            }
        }
        nativeMain {
            dependsOn commonMain
            kotlin.srcDir 'src/main/kotlin-native'
        }
        jvmMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
            }
            kotlin.srcDir 'src/main/kotlin-jvm'
        }
        linuxMain { dependsOn nativeMain }
        windowsMain { dependsOn nativeMain }
        macosMain {dependsOn nativeMain }
    }

    targets {
        fromPreset(presets.jvm, 'jvm') {
            def mainOutput = compilations.main.output
            compilations.all {
                tasks[compileKotlinTaskName].kotlinOptions {
                    jvmTarget = '1.8'
                }
                tasks[compileKotlinTaskName].kotlinOptions.suppressWarnings = true
            }
        }

        fromPreset(presets.mingwX64, 'windows')
        fromPreset(presets.linuxX64, 'linux')
        fromPreset(presets.macosX64, 'macos')

        configure([windows, linux, macos]) {
            compilations.main.outputKinds('EXECUTABLE')
            compilations.main.extraOpts '-opt'
            compilations.main.buildTypes = [RELEASE]
        }
    }
}