/*
 * Copyright 2010-2017 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.jetbrains.kotlin.NativeInteropPlugin
import org.jetbrains.kotlin.RunInteropKonanTest
import org.jetbrains.kotlin.RunKonanTest
import org.jetbrains.kotlin.TestFailedException

import java.util.concurrent.atomic.AtomicInteger

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

// Copied from backend.native project. =====
repositories {
    maven { url kotlinCompilerRepo }
}

configurations.all {
    // kotlin-compiler module includes Kotlin runtime bundled;
    // make Gradle aware of this to avoid multiple Kotlin runtimes in classpath:
    resolutionStrategy.dependencySubstitution {
        substitute module('org.jetbrains.kotlin:kotlin-runtime') with module(kotlinCompilerModule)
        substitute module('org.jetbrains.kotlin:kotlin-stdlib')  with module(kotlinCompilerModule)
        substitute module('org.jetbrains.kotlin:kotlin-reflect') with module(kotlinCompilerModule)
    }
}
// =========================================

apply plugin: 'kotlin'
apply plugin: NativeInteropPlugin

configurations {
    cli_bc.extendsFrom compile
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-runtime:$kotlin_version"
    // We need this configuration to test the helpers.
    cli_bc jar.outputs.files
    cli_bc project(path: ':backend.native', configuration: 'cli_bc')
}

sourceSets {
    testOutputLocal {
        output.dir(rootProject.file("${findProject(":backend.native:tests").testOutputRoot}/tools/helpers"))
    }
}

def testDependencies = project.file("${sourceSets.testOutputLocal.output.dirs.singleFile.absolutePath}/dependencies")

void prepareDependenciesDir(File testDependencies) {
    project.delete testDependencies
    testDependencies.mkdirs()
    // Delete all sysroots from the dependencies cache to tests their downloading.
    project.delete(project.fileTree("${System.getProperty("user.home")}/.konan/cache/") {
        include "*sysroot*.tar.gz"
    })
}

kotlinNativeInterop {
    sysstat {
        pkg 'sysstat'
        headers 'sys/stat.h'
        flavor 'native'
    }
}

project.convention.plugins.remoteExec = new org.jetbrains.kotlin.ExecRemote(project)

task testInteropHelper(type: RunInteropKonanTest) {
    dependsOn jar
    dependsOn ':dist'

    dependenciesDir = testDependencies
    goldValue = "0\n0\n"
    source = "testData/interop.kt"
    interop = 'sysstat'

    doFirst {
        prepareDependenciesDir(testDependencies)
        project.delete(project.file(buildExePath()).parent)
    }
    //Interop gradle plugin doesn't save its work log so we cannot use it to check if dependencies were downloaded or not.
}

task testCompilerHelper(type: RunKonanTest) {
    dependenciesDir = testDependencies
    source = "testData/main.kt"

    doFirst {
        prepareDependenciesDir(testDependencies)
        project.delete(project.file(buildExePath()).parent)
    }

    doLast {
        if (!file("${buildExePath()}.compilation.log").text.contains("Extract dependency") ||
            !file("${buildExePath()}.compilation.log").text.contains("Download dependency")) {
            throw new TestFailedException("Compilation log contains no Extract/Download messages")
        }
    }
}

// Simple test for parallel compiler execution
task testParallel(type: DefaultTask) {
    for (int i=0; i<4; i++) {
        task("runParallel$i", type: RunKonanTest) {
            dependenciesDir = testDependencies
            source = "testData/main.kt"
        }
    }

    doFirst {
        prepareDependenciesDir(testDependencies)
    }

    doLast {
        List<Thread> threads = new ArrayList<>()
        def downloadCnt = new AtomicInteger(0)
        def extractCnt = new AtomicInteger(0)
        tasks.withType(RunKonanTest).matching { it.name.startsWith("runParallel") }.each { task ->
            threads.add(Thread.start {
                task.executeTest()
                // The helper prints messages when it is downloading.
                // We check that there is only one downloading using compilation logs.
                if (file("${task.buildExePath()}.compilation.log").text.contains("Extract dependency")) {
                    extractCnt.incrementAndGet()
                }
                if (file("${task.buildExePath()}.compilation.log").text.contains("Download dependency")) {
                    downloadCnt.incrementAndGet()
                }
            })
        }
        threads.each { it.join() }
        if (downloadCnt.intValue() != 1 || extractCnt.intValue() != 1) {
            throw new TestFailedException("Actual downloads: ${downloadCnt.intValue()}, expected: 1\n" +
                                          "Actial extractions: ${extractCnt.intValue()}, expected: 1")
        }
    }
}

task testHelpers {
    dependsOn testInteropHelper
    dependsOn testCompilerHelper
    dependsOn testParallel

    doLast {
        delete testDependencies
    }
}

