syntax = "proto2";
package org.jetbrains.kotlin.metadata.konan;

// This, and all the rest of the included proto files have ".proto1" extension.
// That allows us to construct the current file,
// but protoc will skip .class files for them.
// The issue here is that we need to co-exist with the big Kotlin,
// in the same namespace of renamed org.jetbrains.kotlin.protobuf packages.
// In case we merge to the main Kotlin workspace the scheme will be simplified.

// FIXME(ddol): fix this import after moving `metadata` to main Kotlin repo - it should refer to the actual metadata.proto file from Kotlin project
import "metadata.proto1";

option java_outer_classname = "KonanProtoBuf";
option optimize_for = LITE_RUNTIME;

// Konan extensions to the "descriptors" protobuf.

message DescriptorUniqId {
    required int64 index = 1;
}

extend Package {
    optional int32 package_fq_name = 171;
}

extend Class {
    repeated Annotation class_annotation = 170;
    optional DescriptorUniqId class_uniq_id = 171;
}

extend Constructor {
    repeated Annotation constructor_annotation = 170;
    optional DescriptorUniqId constructor_uniq_id = 172;
}

extend Function {
    repeated Annotation function_annotation = 170;
    optional int32 function_file = 172;
    optional DescriptorUniqId function_uniq_id = 173;
}

extend Property {
    repeated Annotation property_annotation = 170;
    repeated Annotation property_getter_annotation = 177;
    repeated Annotation property_setter_annotation = 178;
    optional Annotation.Argument.Value compile_time_value = 173;
    optional int32 property_file = 176;
    optional DescriptorUniqId property_uniq_id = 179;
}

extend EnumEntry {
    repeated Annotation enum_entry_annotation = 170;
    optional int32 enum_entry_ordinal = 171;
    optional DescriptorUniqId enum_entry_uniq_id = 172;
}

extend ValueParameter {
    repeated Annotation parameter_annotation = 170;
    optional DescriptorUniqId value_param_uniq_id = 171;
}

extend TypeAlias {
    // TODO repeated org.jetbrains.kotlin.metadata.Annotation type_alias_annotation = 130;
    optional DescriptorUniqId type_alias_uniq_id = 131;
}

extend Type {
    repeated Annotation type_annotation = 170;
}

extend TypeParameter {
    repeated Annotation type_parameter_annotation = 170;
    optional DescriptorUniqId type_param_uniq_id = 171;
}

// Konan Binary Linkdata structures.

message LinkDataPackageFragment {
    // Make if an index?
    required string fq_name = 1;
    required Package package = 4;
    required LinkDataClasses classes = 5;
    required bool is_empty = 6;

    // To construct name resolver
    required QualifiedNameTable name_table = 2;
    required StringTable string_table = 3;
}

message LinkDataClasses {
    // Index in the QualifiedNameIndex table.
    repeated int32 class_name = 1;
    repeated Class classes = 2;
}

message LinkDataLibrary {
    required string module_name = 1;
    repeated string package_fragment_name = 2;
    repeated string empty_package = 3;
    repeated string file = 4;
}

